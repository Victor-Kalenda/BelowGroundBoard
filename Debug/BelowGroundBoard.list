
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bac  08009bac  0000b0cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009bac  08009bac  0000b0cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bac  08009bac  0000b0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bac  08009bac  0000abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bb0  08009bb0  0000abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08009bb4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  200000cc  08009c80  0000b0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08009c80  0000b8e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001923a  00000000  00000000  0000b0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033aa  00000000  00000000  0002432e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  000276d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b5  00000000  00000000  00028e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019965  00000000  00000000  0002a14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c629  00000000  00000000  00043ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3b0  00000000  00000000  000600db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe48b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa0  00000000  00000000  000fe4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00104470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009650 	.word	0x08009650

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	08009650 	.word	0x08009650

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <bno055_setPage>:
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

extern uint16_t holding_register_database[NUM_HOLDING_REGISTERS];

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	0019      	movs	r1, r3
 800041a:	2007      	movs	r0, #7
 800041c:	f000 f8e8 	bl	80005f0 <bno055_writeData>
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	701a      	strb	r2, [r3, #0]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	0019      	movs	r1, r3
 800043a:	203d      	movs	r0, #61	@ 0x3d
 800043c:	f000 f8d8 	bl	80005f0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG)
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d103      	bne.n	8000450 <bno055_setOperationMode+0x28>
  {
    bno055_delay(19);
 8000448:	2013      	movs	r0, #19
 800044a:	f000 f8c5 	bl	80005d8 <bno055_delay>
  }
  else
  {
    bno055_delay(7);
  }
}
 800044e:	e002      	b.n	8000456 <bno055_setOperationMode+0x2e>
    bno055_delay(7);
 8000450:	2007      	movs	r0, #7
 8000452:	f000 f8c1 	bl	80005d8 <bno055_delay>
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}

0800045e <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig()
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000462:	2000      	movs	r0, #0
 8000464:	f7ff ffe0 	bl	8000428 <bno055_setOperationMode>
}
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF()
{
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000472:	200c      	movs	r0, #12
 8000474:	f7ff ffd8 	bl	8000428 <bno055_setOperationMode>
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <bno055_reset>:

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset()
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000482:	2120      	movs	r1, #32
 8000484:	203f      	movs	r0, #63	@ 0x3f
 8000486:	f000 f8b3 	bl	80005f0 <bno055_writeData>
  bno055_delay(700);
 800048a:	23af      	movs	r3, #175	@ 0xaf
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 f8a2 	bl	80005d8 <bno055_delay>
}
 8000494:	46c0      	nop			@ (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  bno055_reset();
 80004a2:	f7ff ffec 	bl	800047e <bno055_reset>

  uint8_t id = 0;
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	2201      	movs	r2, #1
 80004b0:	0019      	movs	r1, r3
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 f9aa 	bl	800080c <bno055_readData>
  if (id != BNO055_ID)
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80004be:	d007      	beq.n	80004d0 <bno055_setup+0x34>
  {
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	001a      	movs	r2, r3
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <bno055_setup+0x54>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f008 f9ba 	bl	8008844 <iprintf>
  }
  bno055_setPage(0);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff ff99 	bl	8000408 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0); // TODO: change to external oscillator
 80004d6:	2100      	movs	r1, #0
 80004d8:	203f      	movs	r0, #63	@ 0x3f
 80004da:	f000 f889 	bl	80005f0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80004de:	f7ff ffbe 	bl	800045e <bno055_setOperationModeConfig>
  bno055_delay(10);
 80004e2:	200a      	movs	r0, #10
 80004e4:	f000 f878 	bl	80005d8 <bno055_delay>
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	08009668 	.word	0x08009668

080004f4 <bno055_get_all_values>:

  return xyz;
}

void bno055_get_all_values()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af00      	add	r7, sp, #0
	uint8_t buffer[44];    // Quaternion needs 8 bytes
	bno055_readData(BNO055_VECTOR_ACCELEROMETER, buffer, 6);
 80004fa:	003b      	movs	r3, r7
 80004fc:	2206      	movs	r2, #6
 80004fe:	0019      	movs	r1, r3
 8000500:	2008      	movs	r0, #8
 8000502:	f000 f983 	bl	800080c <bno055_readData>
	bno055_readData(BNO055_VECTOR_MAGNETOMETER, &buffer[6], 6);
 8000506:	003b      	movs	r3, r7
 8000508:	3306      	adds	r3, #6
 800050a:	2206      	movs	r2, #6
 800050c:	0019      	movs	r1, r3
 800050e:	200e      	movs	r0, #14
 8000510:	f000 f97c 	bl	800080c <bno055_readData>
	bno055_readData(BNO055_VECTOR_GYROSCOPE, &buffer[6*2], 6);
 8000514:	003b      	movs	r3, r7
 8000516:	330c      	adds	r3, #12
 8000518:	2206      	movs	r2, #6
 800051a:	0019      	movs	r1, r3
 800051c:	2014      	movs	r0, #20
 800051e:	f000 f975 	bl	800080c <bno055_readData>
	bno055_readData(BNO055_VECTOR_EULER, &buffer[6*3], 6);
 8000522:	003b      	movs	r3, r7
 8000524:	3312      	adds	r3, #18
 8000526:	2206      	movs	r2, #6
 8000528:	0019      	movs	r1, r3
 800052a:	201a      	movs	r0, #26
 800052c:	f000 f96e 	bl	800080c <bno055_readData>
	bno055_readData(BNO055_VECTOR_LINEARACCEL, &buffer[6*4], 6);
 8000530:	003b      	movs	r3, r7
 8000532:	3318      	adds	r3, #24
 8000534:	2206      	movs	r2, #6
 8000536:	0019      	movs	r1, r3
 8000538:	2028      	movs	r0, #40	@ 0x28
 800053a:	f000 f967 	bl	800080c <bno055_readData>
	bno055_readData(BNO055_VECTOR_GRAVITY, &buffer[6*5], 6);
 800053e:	003b      	movs	r3, r7
 8000540:	331e      	adds	r3, #30
 8000542:	2206      	movs	r2, #6
 8000544:	0019      	movs	r1, r3
 8000546:	202e      	movs	r0, #46	@ 0x2e
 8000548:	f000 f960 	bl	800080c <bno055_readData>
	bno055_readData(BNO055_VECTOR_QUATERNION, &buffer[6*6], 8);
 800054c:	003b      	movs	r3, r7
 800054e:	3324      	adds	r3, #36	@ 0x24
 8000550:	2208      	movs	r2, #8
 8000552:	0019      	movs	r1, r3
 8000554:	2020      	movs	r0, #32
 8000556:	f000 f959 	bl	800080c <bno055_readData>

	for(uint8_t i = 0; i < 22; i++)
 800055a:	232f      	movs	r3, #47	@ 0x2f
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e01e      	b.n	80005a2 <bno055_get_all_values+0xae>
	{
		holding_register_database[12 + i] = (buffer[2*i + 1] << 8) | buffer[2*i];
 8000564:	212f      	movs	r1, #47	@ 0x2f
 8000566:	187b      	adds	r3, r7, r1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	3301      	adds	r3, #1
 800056e:	003a      	movs	r2, r7
 8000570:	5cd3      	ldrb	r3, [r2, r3]
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	b21a      	sxth	r2, r3
 8000576:	0008      	movs	r0, r1
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	0039      	movs	r1, r7
 8000580:	5ccb      	ldrb	r3, [r1, r3]
 8000582:	b21b      	sxth	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b219      	sxth	r1, r3
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	330c      	adds	r3, #12
 800058e:	001a      	movs	r2, r3
 8000590:	b289      	uxth	r1, r1
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <bno055_get_all_values+0xc4>)
 8000594:	0052      	lsls	r2, r2, #1
 8000596:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 22; i++)
 8000598:	183b      	adds	r3, r7, r0
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	183b      	adds	r3, r7, r0
 800059e:	3201      	adds	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	232f      	movs	r3, #47	@ 0x2f
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b15      	cmp	r3, #21
 80005aa:	d9db      	bls.n	8000564 <bno055_get_all_values+0x70>
	}
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b00c      	add	sp, #48	@ 0x30
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	20000000 	.word	0x20000000

080005bc <bno055_assignI2C>:
extern I2C_HandleTypeDef hi2c1;

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <bno055_assignI2C+0x18>)
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	200000e8 	.word	0x200000e8

080005d8 <bno055_delay>:

void bno055_delay(int time)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 feda 	bl	800239c <HAL_Delay>
#endif
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	0002      	movs	r2, r0
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	1c0a      	adds	r2, r1, #0
 8000600:	701a      	strb	r2, [r3, #0]
  uint8_t txdata[2] = {reg, data};
 8000602:	210c      	movs	r1, #12
 8000604:	187b      	adds	r3, r7, r1
 8000606:	1dfa      	adds	r2, r7, #7
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	187b      	adds	r3, r7, r1
 800060e:	1dba      	adds	r2, r7, #6
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	705a      	strb	r2, [r3, #1]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 8000614:	2517      	movs	r5, #23
 8000616:	197c      	adds	r4, r7, r5
 8000618:	187a      	adds	r2, r7, r1
 800061a:	4869      	ldr	r0, [pc, #420]	@ (80007c0 <bno055_writeData+0x1d0>)
 800061c:	230a      	movs	r3, #10
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2302      	movs	r3, #2
 8000622:	2150      	movs	r1, #80	@ 0x50
 8000624:	f003 f9a8 	bl	8003978 <HAL_I2C_Master_Transmit>
 8000628:	0003      	movs	r3, r0
 800062a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800062c:	197b      	adds	r3, r7, r5
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <bno055_writeData+0x46>
 8000634:	e0be      	b.n	80007b4 <bno055_writeData+0x1c4>
  {
    return;
  }

  if (status == HAL_ERROR)
 8000636:	197b      	adds	r3, r7, r5
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d104      	bne.n	8000648 <bno055_writeData+0x58>
  {
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800063e:	4b61      	ldr	r3, [pc, #388]	@ (80007c4 <bno055_writeData+0x1d4>)
 8000640:	0018      	movs	r0, r3
 8000642:	f008 f965 	bl	8008910 <puts>
 8000646:	e01b      	b.n	8000680 <bno055_writeData+0x90>
  }
  else if (status == HAL_TIMEOUT)
 8000648:	2317      	movs	r3, #23
 800064a:	18fb      	adds	r3, r7, r3
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d104      	bne.n	800065c <bno055_writeData+0x6c>
  {
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000652:	4b5d      	ldr	r3, [pc, #372]	@ (80007c8 <bno055_writeData+0x1d8>)
 8000654:	0018      	movs	r0, r3
 8000656:	f008 f95b 	bl	8008910 <puts>
 800065a:	e011      	b.n	8000680 <bno055_writeData+0x90>
  }
  else if (status == HAL_BUSY)
 800065c:	2317      	movs	r3, #23
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d104      	bne.n	8000670 <bno055_writeData+0x80>
  {
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000666:	4b59      	ldr	r3, [pc, #356]	@ (80007cc <bno055_writeData+0x1dc>)
 8000668:	0018      	movs	r0, r3
 800066a:	f008 f951 	bl	8008910 <puts>
 800066e:	e007      	b.n	8000680 <bno055_writeData+0x90>
  }
  else
  {
    printf("Unknown status data %d", status);
 8000670:	2317      	movs	r3, #23
 8000672:	18fb      	adds	r3, r7, r3
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	4b56      	ldr	r3, [pc, #344]	@ (80007d0 <bno055_writeData+0x1e0>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f008 f8e2 	bl	8008844 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(&hi2c1);
 8000680:	4b4f      	ldr	r3, [pc, #316]	@ (80007c0 <bno055_writeData+0x1d0>)
 8000682:	0018      	movs	r0, r3
 8000684:	f003 fc61 	bl	8003f4a <HAL_I2C_GetError>
 8000688:	0003      	movs	r3, r0
 800068a:	613b      	str	r3, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE)
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d100      	bne.n	8000694 <bno055_writeData+0xa4>
 8000692:	e091      	b.n	80007b8 <bno055_writeData+0x1c8>
  {
    return;
  }
  else if (error == HAL_I2C_ERROR_BERR)
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d104      	bne.n	80006a4 <bno055_writeData+0xb4>
  {
    printf("HAL_I2C_ERROR_BERR\r\n");
 800069a:	4b4e      	ldr	r3, [pc, #312]	@ (80007d4 <bno055_writeData+0x1e4>)
 800069c:	0018      	movs	r0, r3
 800069e:	f008 f937 	bl	8008910 <puts>
 80006a2:	e026      	b.n	80006f2 <bno055_writeData+0x102>
  }
  else if (error == HAL_I2C_ERROR_ARLO)
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d104      	bne.n	80006b4 <bno055_writeData+0xc4>
  {
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80006aa:	4b4b      	ldr	r3, [pc, #300]	@ (80007d8 <bno055_writeData+0x1e8>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f008 f92f 	bl	8008910 <puts>
 80006b2:	e01e      	b.n	80006f2 <bno055_writeData+0x102>
  }
  else if (error == HAL_I2C_ERROR_AF)
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	d104      	bne.n	80006c4 <bno055_writeData+0xd4>
  {
    printf("HAL_I2C_ERROR_AF\r\n");
 80006ba:	4b48      	ldr	r3, [pc, #288]	@ (80007dc <bno055_writeData+0x1ec>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f008 f927 	bl	8008910 <puts>
 80006c2:	e016      	b.n	80006f2 <bno055_writeData+0x102>
  }
  else if (error == HAL_I2C_ERROR_OVR)
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d104      	bne.n	80006d4 <bno055_writeData+0xe4>
  {
    printf("HAL_I2C_ERROR_OVR\r\n");
 80006ca:	4b45      	ldr	r3, [pc, #276]	@ (80007e0 <bno055_writeData+0x1f0>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f008 f91f 	bl	8008910 <puts>
 80006d2:	e00e      	b.n	80006f2 <bno055_writeData+0x102>
  }
  else if (error == HAL_I2C_ERROR_DMA)
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	2b10      	cmp	r3, #16
 80006d8:	d104      	bne.n	80006e4 <bno055_writeData+0xf4>
  {
    printf("HAL_I2C_ERROR_DMA\r\n");
 80006da:	4b42      	ldr	r3, [pc, #264]	@ (80007e4 <bno055_writeData+0x1f4>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f008 f917 	bl	8008910 <puts>
 80006e2:	e006      	b.n	80006f2 <bno055_writeData+0x102>
  }
  else if (error == HAL_I2C_ERROR_TIMEOUT)
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	2b20      	cmp	r3, #32
 80006e8:	d103      	bne.n	80006f2 <bno055_writeData+0x102>
  {
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80006ea:	4b3f      	ldr	r3, [pc, #252]	@ (80007e8 <bno055_writeData+0x1f8>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f008 f90f 	bl	8008910 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(&hi2c1);
 80006f2:	250f      	movs	r5, #15
 80006f4:	197c      	adds	r4, r7, r5
 80006f6:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <bno055_writeData+0x1d0>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 fc1a 	bl	8003f32 <HAL_I2C_GetState>
 80006fe:	0003      	movs	r3, r0
 8000700:	7023      	strb	r3, [r4, #0]
  if (state == HAL_I2C_STATE_RESET)
 8000702:	197b      	adds	r3, r7, r5
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d104      	bne.n	8000714 <bno055_writeData+0x124>
  {
    printf("HAL_I2C_STATE_RESET\r\n");
 800070a:	4b38      	ldr	r3, [pc, #224]	@ (80007ec <bno055_writeData+0x1fc>)
 800070c:	0018      	movs	r0, r3
 800070e:	f008 f8ff 	bl	8008910 <puts>
 8000712:	e052      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_READY)
 8000714:	230f      	movs	r3, #15
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b20      	cmp	r3, #32
 800071c:	d104      	bne.n	8000728 <bno055_writeData+0x138>
  {
    printf("HAL_I2C_STATE_RESET\r\n");
 800071e:	4b33      	ldr	r3, [pc, #204]	@ (80007ec <bno055_writeData+0x1fc>)
 8000720:	0018      	movs	r0, r3
 8000722:	f008 f8f5 	bl	8008910 <puts>
 8000726:	e048      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_BUSY)
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b24      	cmp	r3, #36	@ 0x24
 8000730:	d104      	bne.n	800073c <bno055_writeData+0x14c>
  {
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <bno055_writeData+0x200>)
 8000734:	0018      	movs	r0, r3
 8000736:	f008 f8eb 	bl	8008910 <puts>
 800073a:	e03e      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_BUSY_TX)
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b21      	cmp	r3, #33	@ 0x21
 8000744:	d104      	bne.n	8000750 <bno055_writeData+0x160>
  {
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000746:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <bno055_writeData+0x204>)
 8000748:	0018      	movs	r0, r3
 800074a:	f008 f8e1 	bl	8008910 <puts>
 800074e:	e034      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_BUSY_RX)
 8000750:	230f      	movs	r3, #15
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b22      	cmp	r3, #34	@ 0x22
 8000758:	d104      	bne.n	8000764 <bno055_writeData+0x174>
  {
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <bno055_writeData+0x208>)
 800075c:	0018      	movs	r0, r3
 800075e:	f008 f8d7 	bl	8008910 <puts>
 8000762:	e02a      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_LISTEN)
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b28      	cmp	r3, #40	@ 0x28
 800076c:	d104      	bne.n	8000778 <bno055_writeData+0x188>
  {
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <bno055_writeData+0x20c>)
 8000770:	0018      	movs	r0, r3
 8000772:	f008 f8cd 	bl	8008910 <puts>
 8000776:	e020      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000778:	230f      	movs	r3, #15
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b29      	cmp	r3, #41	@ 0x29
 8000780:	d104      	bne.n	800078c <bno055_writeData+0x19c>
  {
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <bno055_writeData+0x210>)
 8000784:	0018      	movs	r0, r3
 8000786:	f008 f8c3 	bl	8008910 <puts>
 800078a:	e016      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b2a      	cmp	r3, #42	@ 0x2a
 8000794:	d104      	bne.n	80007a0 <bno055_writeData+0x1b0>
  {
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000796:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <bno055_writeData+0x214>)
 8000798:	0018      	movs	r0, r3
 800079a:	f008 f8b9 	bl	8008910 <puts>
 800079e:	e00c      	b.n	80007ba <bno055_writeData+0x1ca>
  }
  else if (state == HAL_I2C_STATE_ABORT)
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b60      	cmp	r3, #96	@ 0x60
 80007a8:	d107      	bne.n	80007ba <bno055_writeData+0x1ca>
  {
    printf("HAL_I2C_STATE_ABORT\r\n");
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <bno055_writeData+0x218>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f008 f8af 	bl	8008910 <puts>
 80007b2:	e002      	b.n	80007ba <bno055_writeData+0x1ca>
    return;
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	e000      	b.n	80007ba <bno055_writeData+0x1ca>
    return;
 80007b8:	46c0      	nop			@ (mov r8, r8)
    printf("HAL_I2C_STATE_ERROR\r\n");
  }
  */
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b006      	add	sp, #24
 80007be:	bdb0      	pop	{r4, r5, r7, pc}
 80007c0:	200001ac 	.word	0x200001ac
 80007c4:	080096a4 	.word	0x080096a4
 80007c8:	080096c8 	.word	0x080096c8
 80007cc:	080096f0 	.word	0x080096f0
 80007d0:	08009714 	.word	0x08009714
 80007d4:	0800972c 	.word	0x0800972c
 80007d8:	08009740 	.word	0x08009740
 80007dc:	08009754 	.word	0x08009754
 80007e0:	08009768 	.word	0x08009768
 80007e4:	0800977c 	.word	0x0800977c
 80007e8:	08009790 	.word	0x08009790
 80007ec:	080097a8 	.word	0x080097a8
 80007f0:	080097c0 	.word	0x080097c0
 80007f4:	080097d4 	.word	0x080097d4
 80007f8:	080097ec 	.word	0x080097ec
 80007fc:	08009804 	.word	0x08009804
 8000800:	0800981c 	.word	0x0800981c
 8000804:	0800983c 	.word	0x0800983c
 8000808:	0800985c 	.word	0x0800985c

0800080c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len)
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	6039      	str	r1, [r7, #0]
 8000814:	0011      	movs	r1, r2
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	1c02      	adds	r2, r0, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	1dbb      	adds	r3, r7, #6
 800081e:	1c0a      	adds	r2, r1, #0
 8000820:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000822:	250f      	movs	r5, #15
 8000824:	197b      	adds	r3, r7, r5
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
  status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, &reg, 1, 100);
 800082a:	197c      	adds	r4, r7, r5
 800082c:	1dfa      	adds	r2, r7, #7
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <bno055_readData+0x58>)
 8000830:	2364      	movs	r3, #100	@ 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	2150      	movs	r1, #80	@ 0x50
 8000838:	f003 f89e 	bl	8003978 <HAL_I2C_Master_Transmit>
 800083c:	0003      	movs	r3, r0
 800083e:	7023      	strb	r3, [r4, #0]
  status = HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR << 1, data, len, 100);
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	197c      	adds	r4, r7, r5
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <bno055_readData+0x58>)
 800084c:	2164      	movs	r1, #100	@ 0x64
 800084e:	9100      	str	r1, [sp, #0]
 8000850:	2150      	movs	r1, #80	@ 0x50
 8000852:	f003 f9bb 	bl	8003bcc <HAL_I2C_Master_Receive>
 8000856:	0003      	movs	r3, r0
 8000858:	7023      	strb	r3, [r4, #0]

//   status = HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
//   I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b004      	add	sp, #16
 8000860:	bdb0      	pop	{r4, r5, r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	200001ac 	.word	0x200001ac

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f001 fd18 	bl	80022a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f8c1 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fba3 	bl	8000fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 800087a:	f000 fb73 	bl	8000f64 <MX_DMA_Init>
  MX_ADC1_Init();
 800087e:	f000 f8f9 	bl	8000a74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000882:	f000 f9d1 	bl	8000c28 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000886:	f000 fa0f 	bl	8000ca8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800088a:	f000 fa4b 	bl	8000d24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800088e:	f000 fb19 	bl	8000ec4 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000892:	f000 faf1 	bl	8000e78 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 8000896:	4b50      	ldr	r3, [pc, #320]	@ (80009d8 <main+0x170>)
 8000898:	2280      	movs	r2, #128	@ 0x80
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 800089e:	4b4e      	ldr	r3, [pc, #312]	@ (80009d8 <main+0x170>)
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	0052      	lsls	r2, r2, #1
 80008a4:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80008a6:	4b4c      	ldr	r3, [pc, #304]	@ (80009d8 <main+0x170>)
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	809a      	strh	r2, [r3, #4]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 80008ac:	4b4b      	ldr	r3, [pc, #300]	@ (80009dc <main+0x174>)
 80008ae:	22fe      	movs	r2, #254	@ 0xfe
 80008b0:	0592      	lsls	r2, r2, #22
 80008b2:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 80008b4:	4b49      	ldr	r3, [pc, #292]	@ (80009dc <main+0x174>)
 80008b6:	4a4a      	ldr	r2, [pc, #296]	@ (80009e0 <main+0x178>)
 80008b8:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80008ba:	4b48      	ldr	r3, [pc, #288]	@ (80009dc <main+0x174>)
 80008bc:	4a49      	ldr	r2, [pc, #292]	@ (80009e4 <main+0x17c>)
 80008be:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80008c0:	4b46      	ldr	r3, [pc, #280]	@ (80009dc <main+0x174>)
 80008c2:	4a47      	ldr	r2, [pc, #284]	@ (80009e0 <main+0x178>)
 80008c4:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 80008c6:	4b45      	ldr	r3, [pc, #276]	@ (80009dc <main+0x174>)
 80008c8:	22fe      	movs	r2, #254	@ 0xfe
 80008ca:	0592      	lsls	r2, r2, #22
 80008cc:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 80008ce:	4b43      	ldr	r3, [pc, #268]	@ (80009dc <main+0x174>)
 80008d0:	4a45      	ldr	r2, [pc, #276]	@ (80009e8 <main+0x180>)
 80008d2:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 80008d4:	4b41      	ldr	r3, [pc, #260]	@ (80009dc <main+0x174>)
 80008d6:	4a44      	ldr	r2, [pc, #272]	@ (80009e8 <main+0x180>)
 80008d8:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 80008da:	4b40      	ldr	r3, [pc, #256]	@ (80009dc <main+0x174>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 80008e0:	4b3e      	ldr	r3, [pc, #248]	@ (80009dc <main+0x174>)
 80008e2:	4a42      	ldr	r2, [pc, #264]	@ (80009ec <main+0x184>)
 80008e4:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <main+0x174>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 80008ec:	4b3b      	ldr	r3, [pc, #236]	@ (80009dc <main+0x174>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 80008f2:	4b3a      	ldr	r3, [pc, #232]	@ (80009dc <main+0x174>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 80008f8:	4b38      	ldr	r3, [pc, #224]	@ (80009dc <main+0x174>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 80008fe:	4b37      	ldr	r3, [pc, #220]	@ (80009dc <main+0x174>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8000904:	f000 ffa0 	bl	8001848 <modbus_set_rx>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <main+0xa8>
  {
	  Error_Handler();
 800090c:	f000 fbd4 	bl	80010b8 <Error_Handler>
//  if(HAL_ADC_Start_DMA(&hadc1, raw_data, 9) != HAL_OK)
//  {
//	  Error_Handler();
//  }

  bno055_assignI2C(&hi2c1);
 8000910:	4b37      	ldr	r3, [pc, #220]	@ (80009f0 <main+0x188>)
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fe52 	bl	80005bc <bno055_assignI2C>
  bno055_setup();
 8000918:	f7ff fdc0 	bl	800049c <bno055_setup>
  bno055_setOperationModeNDOF();
 800091c:	f7ff fda7 	bl	800046e <bno055_setOperationModeNDOF>
   */
//  uint8_t target_actuator = 0;

  while (1)
  {
	  if(modbus_rx())
 8000920:	f000 ff7c 	bl	800181c <modbus_rx>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d054      	beq.n	80009d2 <main+0x16a>
	  {
		  int8_t status = 0;
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fcb4 	bl	800129c <get_rx_buffer>
 8000934:	0003      	movs	r3, r0
 8000936:	001a      	movs	r2, r3
 8000938:	4b2e      	ldr	r3, [pc, #184]	@ (80009f4 <main+0x18c>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d11b      	bne.n	8000978 <main+0x110>
		  {
			  switch(get_rx_buffer(1))
 8000940:	2001      	movs	r0, #1
 8000942:	f000 fcab 	bl	800129c <get_rx_buffer>
 8000946:	0003      	movs	r3, r0
 8000948:	2b03      	cmp	r3, #3
 800094a:	d002      	beq.n	8000952 <main+0xea>
 800094c:	2b10      	cmp	r3, #16
 800094e:	d006      	beq.n	800095e <main+0xf6>
 8000950:	e00b      	b.n	800096a <main+0x102>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 8000952:	1dfc      	adds	r4, r7, #7
 8000954:	f000 fcda 	bl	800130c <return_holding_registers>
 8000958:	0003      	movs	r3, r0
 800095a:	7023      	strb	r3, [r4, #0]
					  break;
 800095c:	e034      	b.n	80009c8 <main+0x160>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 800095e:	1dfc      	adds	r4, r7, #7
 8000960:	f000 fd70 	bl	8001444 <edit_multiple_registers>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]
					  break;
 8000968:	e02e      	b.n	80009c8 <main+0x160>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 800096a:	1dfc      	adds	r4, r7, #7
 800096c:	2004      	movs	r0, #4
 800096e:	f000 fe57 	bl	8001620 <modbus_exception>
 8000972:	0003      	movs	r3, r0
 8000974:	7023      	strb	r3, [r4, #0]
					  break;
 8000976:	e027      	b.n	80009c8 <main+0x160>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fc8f 	bl	800129c <get_rx_buffer>
 800097e:	0003      	movs	r3, r0
 8000980:	2bff      	cmp	r3, #255	@ 0xff
 8000982:	d121      	bne.n	80009c8 <main+0x160>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000984:	2001      	movs	r0, #1
 8000986:	f000 fc89 	bl	800129c <get_rx_buffer>
 800098a:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800098c:	2b03      	cmp	r3, #3
 800098e:	d11b      	bne.n	80009c8 <main+0x160>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000990:	2002      	movs	r0, #2
 8000992:	f000 fc83 	bl	800129c <get_rx_buffer>
 8000996:	0003      	movs	r3, r0
 8000998:	021c      	lsls	r4, r3, #8
 800099a:	2003      	movs	r0, #3
 800099c:	f000 fc7e 	bl	800129c <get_rx_buffer>
 80009a0:	0003      	movs	r3, r0
 80009a2:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80009a4:	d110      	bne.n	80009c8 <main+0x160>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 80009a6:	2004      	movs	r0, #4
 80009a8:	f000 fc78 	bl	800129c <get_rx_buffer>
 80009ac:	0003      	movs	r3, r0
 80009ae:	021c      	lsls	r4, r3, #8
 80009b0:	2005      	movs	r0, #5
 80009b2:	f000 fc73 	bl	800129c <get_rx_buffer>
 80009b6:	0003      	movs	r3, r0
 80009b8:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d104      	bne.n	80009c8 <main+0x160>
		  {

			  status = return_holding_registers();
 80009be:	1dfc      	adds	r4, r7, #7
 80009c0:	f000 fca4 	bl	800130c <return_holding_registers>
 80009c4:	0003      	movs	r3, r0
 80009c6:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 80009c8:	1dfc      	adds	r4, r7, #7
 80009ca:	f000 ff3d 	bl	8001848 <modbus_set_rx>
 80009ce:	0003      	movs	r3, r0
 80009d0:	7023      	strb	r3, [r4, #0]

//	  if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
//	  {
//		  bno055_retrieve_values();
//	  }
	  bno055_get_all_values();
 80009d2:	f7ff fd8f 	bl	80004f4 <bno055_get_all_values>
	  if(modbus_rx())
 80009d6:	e7a3      	b.n	8000920 <main+0xb8>
 80009d8:	20000480 	.word	0x20000480
 80009dc:	20000448 	.word	0x20000448
 80009e0:	3dcccccd 	.word	0x3dcccccd
 80009e4:	40a00000 	.word	0x40a00000
 80009e8:	42c80000 	.word	0x42c80000
 80009ec:	42200000 	.word	0x42200000
 80009f0:	200001ac 	.word	0x200001ac
 80009f4:	20000000 	.word	0x20000000

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b08f      	sub	sp, #60	@ 0x3c
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	2418      	movs	r4, #24
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	0018      	movs	r0, r3
 8000a04:	2320      	movs	r3, #32
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f008 f877 	bl	8008afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f008 f870 	bl	8008afc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	0252      	lsls	r2, r2, #9
 8000a28:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f004 fb99 	bl	8005164 <HAL_RCC_OscConfig>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000a36:	f000 fb3f 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2201      	movs	r2, #1
 8000a44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f004 fda7 	bl	80055b0 <HAL_RCC_ClockConfig>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a66:	f000 fb27 	bl	80010b8 <Error_Handler>
  }
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b00f      	add	sp, #60	@ 0x3c
 8000a70:	bd90      	pop	{r4, r7, pc}
	...

08000a74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	230c      	movs	r3, #12
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f008 f83a 	bl	8008afc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a88:	4b5d      	ldr	r3, [pc, #372]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8000c04 <MX_ADC1_Init+0x190>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000a90:	22c0      	movs	r2, #192	@ 0xc0
 8000a92:	0612      	lsls	r2, r2, #24
 8000a94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a96:	4b5a      	ldr	r3, [pc, #360]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9c:	4b58      	ldr	r3, [pc, #352]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000aa2:	4b57      	ldr	r3, [pc, #348]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	0612      	lsls	r2, r2, #24
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aaa:	4b55      	ldr	r3, [pc, #340]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ab0:	4b53      	ldr	r3, [pc, #332]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000ab6:	4b52      	ldr	r3, [pc, #328]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000abc:	4b50      	ldr	r3, [pc, #320]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8000ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ace:	4b4c      	ldr	r3, [pc, #304]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000ad6:	222c      	movs	r2, #44	@ 0x2c
 8000ad8:	2101      	movs	r1, #1
 8000ada:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000adc:	4b48      	ldr	r3, [pc, #288]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000ae2:	4b47      	ldr	r3, [pc, #284]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ae8:	4b45      	ldr	r3, [pc, #276]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000aea:	223c      	movs	r2, #60	@ 0x3c
 8000aec:	2100      	movs	r1, #0
 8000aee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000af0:	4b43      	ldr	r3, [pc, #268]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af6:	4b42      	ldr	r3, [pc, #264]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 fd71 	bl	80025e0 <HAL_ADC_Init>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b02:	f000 fad9 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	1d3a      	adds	r2, r7, #4
 8000b14:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 ff07 	bl	800292c <HAL_ADC_ConfigChannel>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b22:	f000 fac9 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4a37      	ldr	r2, [pc, #220]	@ (8000c08 <MX_ADC1_Init+0x194>)
 8000b2a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	1d3a      	adds	r2, r7, #4
 8000b2e:	4b34      	ldr	r3, [pc, #208]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 fefa 	bl	800292c <HAL_ADC_ConfigChannel>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000b3c:	f000 fabc 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4a32      	ldr	r2, [pc, #200]	@ (8000c0c <MX_ADC1_Init+0x198>)
 8000b44:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b46:	1d3a      	adds	r2, r7, #4
 8000b48:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 feed 	bl	800292c <HAL_ADC_ConfigChannel>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000b56:	f000 faaf 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <MX_ADC1_Init+0x19c>)
 8000b5e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b60:	1d3a      	adds	r2, r7, #4
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 fee0 	bl	800292c <HAL_ADC_ConfigChannel>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b70:	f000 faa2 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <MX_ADC1_Init+0x1a0>)
 8000b78:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	1d3a      	adds	r2, r7, #4
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 fed3 	bl	800292c <HAL_ADC_ConfigChannel>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000b8a:	f000 fa95 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4a21      	ldr	r2, [pc, #132]	@ (8000c18 <MX_ADC1_Init+0x1a4>)
 8000b92:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	1d3a      	adds	r2, r7, #4
 8000b96:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 fec6 	bl	800292c <HAL_ADC_ConfigChannel>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000ba4:	f000 fa88 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c1c <MX_ADC1_Init+0x1a8>)
 8000bac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	1d3a      	adds	r2, r7, #4
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 feb9 	bl	800292c <HAL_ADC_ConfigChannel>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000bbe:	f000 fa7b 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4a16      	ldr	r2, [pc, #88]	@ (8000c20 <MX_ADC1_Init+0x1ac>)
 8000bc6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc8:	1d3a      	adds	r2, r7, #4
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 feac 	bl	800292c <HAL_ADC_ConfigChannel>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000bd8:	f000 fa6e 	bl	80010b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4a11      	ldr	r2, [pc, #68]	@ (8000c24 <MX_ADC1_Init+0x1b0>)
 8000be0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3a      	adds	r2, r7, #4
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_ADC1_Init+0x18c>)
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 fe9f 	bl	800292c <HAL_ADC_ConfigChannel>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8000bf2:	f000 fa61 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	200000ec 	.word	0x200000ec
 8000c04:	40012400 	.word	0x40012400
 8000c08:	04000002 	.word	0x04000002
 8000c0c:	08000004 	.word	0x08000004
 8000c10:	0c000008 	.word	0x0c000008
 8000c14:	10000010 	.word	0x10000010
 8000c18:	14000020 	.word	0x14000020
 8000c1c:	18000040 	.word	0x18000040
 8000c20:	1c000080 	.word	0x1c000080
 8000c24:	20000100 	.word	0x20000100

08000c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <MX_I2C1_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020B;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca4 <MX_I2C1_Init+0x7c>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 fde1 	bl	800382c <HAL_I2C_Init>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c6e:	f000 fa23 	bl	80010b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c74:	2100      	movs	r1, #0
 8000c76:	0018      	movs	r0, r3
 8000c78:	f004 f9dc 	bl	8005034 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c80:	f000 fa1a 	bl	80010b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <MX_I2C1_Init+0x74>)
 8000c86:	2100      	movs	r1, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f004 fa1f 	bl	80050cc <HAL_I2CEx_ConfigDigitalFilter>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f000 fa11 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200001ac 	.word	0x200001ac
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	0010020b 	.word	0x0010020b

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_SPI1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cb4:	2282      	movs	r2, #130	@ 0x82
 8000cb6:	0052      	lsls	r2, r2, #1
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cc2:	22e0      	movs	r2, #224	@ 0xe0
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cd6:	2280      	movs	r2, #128	@ 0x80
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000d02:	2208      	movs	r2, #8
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d06:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <MX_SPI1_Init+0x74>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f004 fef3 	bl	8005af4 <HAL_SPI_Init>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f9d1 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000025c 	.word	0x2000025c
 8000d20:	40013000 	.word	0x40013000

08000d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b098      	sub	sp, #96	@ 0x60
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	2354      	movs	r3, #84	@ 0x54
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	0018      	movs	r0, r3
 8000d30:	230c      	movs	r3, #12
 8000d32:	001a      	movs	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f007 fee1 	bl	8008afc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	2338      	movs	r3, #56	@ 0x38
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	0018      	movs	r0, r3
 8000d40:	231c      	movs	r3, #28
 8000d42:	001a      	movs	r2, r3
 8000d44:	2100      	movs	r1, #0
 8000d46:	f007 fed9 	bl	8008afc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2334      	movs	r3, #52	@ 0x34
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f007 fed2 	bl	8008afc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d58:	4b45      	ldr	r3, [pc, #276]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d5a:	4a46      	ldr	r2, [pc, #280]	@ (8000e74 <MX_TIM1_Init+0x150>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000d5e:	4b44      	ldr	r3, [pc, #272]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d60:	220b      	movs	r2, #11
 8000d62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b42      	ldr	r3, [pc, #264]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000d6a:	4b41      	ldr	r3, [pc, #260]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d6c:	2263      	movs	r2, #99	@ 0x63
 8000d6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b3f      	ldr	r3, [pc, #252]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d76:	4b3e      	ldr	r3, [pc, #248]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d82:	4b3b      	ldr	r3, [pc, #236]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f004 ffc5 	bl	8005d14 <HAL_TIM_PWM_Init>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 f993 	bl	80010b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2154      	movs	r1, #84	@ 0x54
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da6:	187a      	adds	r2, r7, r1
 8000da8:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f005 fc29 	bl	8006604 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000db6:	f000 f97f 	bl	80010b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dba:	2138      	movs	r1, #56	@ 0x38
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2260      	movs	r2, #96	@ 0x60
 8000dc0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	1879      	adds	r1, r7, r1
 8000de8:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	0018      	movs	r0, r3
 8000dee:	f004 ffe9 	bl	8005dc4 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000df6:	f000 f95f 	bl	80010b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2280      	movs	r2, #128	@ 0x80
 8000e1c:	0192      	lsls	r2, r2, #6
 8000e1e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	0492      	lsls	r2, r2, #18
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e4c:	1d3a      	adds	r2, r7, #4
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f005 fc3e 	bl	80066d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000e5c:	f000 f92c 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <MX_TIM1_Init+0x14c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 ffca 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b018      	add	sp, #96	@ 0x60
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200002c0 	.word	0x200002c0
 8000e74:	40012c00 	.word	0x40012c00

08000e78 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_TIM14_Init+0x40>)
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <MX_TIM14_Init+0x44>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <MX_TIM14_Init+0x40>)
 8000e84:	220b      	movs	r2, #11
 8000e86:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <MX_TIM14_Init+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <MX_TIM14_Init+0x40>)
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <MX_TIM14_Init+0x48>)
 8000e92:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <MX_TIM14_Init+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <MX_TIM14_Init+0x40>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <MX_TIM14_Init+0x40>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f004 fede 	bl	8005c64 <HAL_TIM_Base_Init>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000eac:	f000 f904 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	2000030c 	.word	0x2000030c
 8000ebc:	40002000 	.word	0x40002000
 8000ec0:	0000ffff 	.word	0x0000ffff

08000ec4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000eca:	4a25      	ldr	r2, [pc, #148]	@ (8000f60 <MX_USART1_UART_Init+0x9c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000ed0:	2296      	movs	r2, #150	@ 0x96
 8000ed2:	0192      	lsls	r2, r2, #6
 8000ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000f0c:	4813      	ldr	r0, [pc, #76]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	f007 f9c6 	bl	80082a4 <HAL_RS485Ex_Init>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000f1c:	f000 f8cc 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	0018      	movs	r0, r3
 8000f26:	f007 fa81 	bl	800842c <HAL_UARTEx_SetTxFifoThreshold>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 f8c3 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f007 fab8 	bl	80084ac <HAL_UARTEx_SetRxFifoThreshold>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000f40:	f000 f8ba 	bl	80010b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <MX_USART1_UART_Init+0x98>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f007 fa36 	bl	80083b8 <HAL_UARTEx_DisableFifoMode>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000f50:	f000 f8b2 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	20000358 	.word	0x20000358
 8000f60:	40013800 	.word	0x40013800

08000f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_DMA_Init+0x58>)
 8000f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_DMA_Init+0x58>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_DMA_Init+0x58>)
 8000f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2009      	movs	r0, #9
 8000f88:	f001 ff52 	bl	8002e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f8c:	2009      	movs	r0, #9
 8000f8e:	f001 ff64 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	200a      	movs	r0, #10
 8000f98:	f001 ff4a 	bl	8002e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f001 ff5c 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	200b      	movs	r0, #11
 8000fa8:	f001 ff42 	bl	8002e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8000fac:	200b      	movs	r0, #11
 8000fae:	f001 ff54 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b08b      	sub	sp, #44	@ 0x2c
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	2414      	movs	r4, #20
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2314      	movs	r3, #20
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f007 fd93 	bl	8008afc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b35      	ldr	r3, [pc, #212]	@ (80010ac <MX_GPIO_Init+0xec>)
 8000fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fda:	4b34      	ldr	r3, [pc, #208]	@ (80010ac <MX_GPIO_Init+0xec>)
 8000fdc:	2104      	movs	r1, #4
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe2:	4b32      	ldr	r3, [pc, #200]	@ (80010ac <MX_GPIO_Init+0xec>)
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <MX_GPIO_Init+0xec>)
 8000ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80010ac <MX_GPIO_Init+0xec>)
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80010ac <MX_GPIO_Init+0xec>)
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffe:	2220      	movs	r2, #32
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <MX_GPIO_Init+0xec>)
 8001008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800100a:	4b28      	ldr	r3, [pc, #160]	@ (80010ac <MX_GPIO_Init+0xec>)
 800100c:	2101      	movs	r1, #1
 800100e:	430a      	orrs	r2, r1
 8001010:	635a      	str	r2, [r3, #52]	@ 0x34
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <MX_GPIO_Init+0xec>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001016:	2201      	movs	r2, #1
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <MX_GPIO_Init+0xec>)
 8001020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <MX_GPIO_Init+0xec>)
 8001024:	2102      	movs	r1, #2
 8001026:	430a      	orrs	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	@ 0x34
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_GPIO_Init+0xec>)
 800102c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_GPIO_Init+0xec>)
 8001038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_GPIO_Init+0xec>)
 800103c:	2108      	movs	r1, #8
 800103e:	430a      	orrs	r2, r1
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_GPIO_Init+0xec>)
 8001044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001046:	2208      	movs	r2, #8
 8001048:	4013      	ands	r3, r2
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin, GPIO_PIN_RESET);
 800104e:	23e0      	movs	r3, #224	@ 0xe0
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <MX_GPIO_Init+0xf0>)
 8001054:	2200      	movs	r2, #0
 8001056:	0019      	movs	r1, r3
 8001058:	f002 fbca 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 800105c:	193b      	adds	r3, r7, r4
 800105e:	2206      	movs	r2, #6
 8001060:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	193b      	adds	r3, r7, r4
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <MX_GPIO_Init+0xf4>)
 8001072:	0019      	movs	r1, r3
 8001074:	0010      	movs	r0, r2
 8001076:	f002 fa49 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_C_EN_Pin Actuator_B_EN_Pin Actuator_A_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin;
 800107a:	0021      	movs	r1, r4
 800107c:	187b      	adds	r3, r7, r1
 800107e:	22e0      	movs	r2, #224	@ 0xe0
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2201      	movs	r2, #1
 8001088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	187b      	adds	r3, r7, r1
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <MX_GPIO_Init+0xf0>)
 800109a:	0019      	movs	r1, r3
 800109c:	0010      	movs	r0, r2
 800109e:	f002 fa35 	bl	800350c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b00b      	add	sp, #44	@ 0x2c
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	40021000 	.word	0x40021000
 80010b0:	50000400 	.word	0x50000400
 80010b4:	50000c00 	.word	0x50000c00

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	e7fd      	b.n	80010c0 <Error_Handler+0x8>

080010c4 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	000a      	movs	r2, r1
 80010ce:	1cbb      	adds	r3, r7, #2
 80010d0:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a45      	ldr	r2, [pc, #276]	@ (80011ec <HAL_UARTEx_RxEventCallback+0x128>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d000      	beq.n	80010de <HAL_UARTEx_RxEventCallback+0x1a>
 80010dc:	e081      	b.n	80011e2 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 80010de:	4b44      	ldr	r3, [pc, #272]	@ (80011f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b43      	ldr	r3, [pc, #268]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x130>)
 80010e6:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 80010e8:	4b42      	ldr	r3, [pc, #264]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x130>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	001a      	movs	r2, r3
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	18d2      	adds	r2, r2, r3
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dd29      	ble.n	8001152 <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 80010fe:	4b3d      	ldr	r3, [pc, #244]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29a      	uxth	r2, r3
 8001104:	240e      	movs	r4, #14
 8001106:	193b      	adds	r3, r7, r4
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	0049      	lsls	r1, r1, #1
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8001110:	4b38      	ldr	r3, [pc, #224]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	001a      	movs	r2, r3
 8001118:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <HAL_UARTEx_RxEventCallback+0x134>)
 800111a:	18d0      	adds	r0, r2, r3
 800111c:	193b      	adds	r3, r7, r4
 800111e:	881a      	ldrh	r2, [r3, #0]
 8001120:	4b36      	ldr	r3, [pc, #216]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x138>)
 8001122:	0019      	movs	r1, r3
 8001124:	f007 fd6d 	bl	8008c02 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8001128:	1cba      	adds	r2, r7, #2
 800112a:	193b      	adds	r3, r7, r4
 800112c:	8812      	ldrh	r2, [r2, #0]
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001136:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8001138:	193b      	adds	r3, r7, r4
 800113a:	881a      	ldrh	r2, [r3, #0]
 800113c:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x138>)
 800113e:	18d1      	adds	r1, r2, r3
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	001a      	movs	r2, r3
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <HAL_UARTEx_RxEventCallback+0x134>)
 800114a:	0018      	movs	r0, r3
 800114c:	f007 fd59 	bl	8008c02 <memcpy>
 8001150:	e014      	b.n	800117c <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	001a      	movs	r2, r3
 800115a:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <HAL_UARTEx_RxEventCallback+0x134>)
 800115c:	18d0      	adds	r0, r2, r3
 800115e:	1cbb      	adds	r3, r7, #2
 8001160:	881a      	ldrh	r2, [r3, #0]
 8001162:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x138>)
 8001164:	0019      	movs	r1, r3
 8001166:	f007 fd4c 	bl	8008c02 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 800116a:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x130>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b29a      	uxth	r2, r3
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	18d3      	adds	r3, r2, r3
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 800117a:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x13c>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d027      	beq.n	80011d6 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8001186:	f001 f8ff 	bl	8002388 <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_UARTEx_RxEventCallback+0x140>)
 800118e:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x144>)
 8001198:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x13c>)
 800119c:	2200      	movs	r2, #0
 800119e:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x138>)
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	4a15      	ldr	r2, [pc, #84]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x138>)
 80011a8:	7952      	ldrb	r2, [r2, #5]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	18db      	adds	r3, r3, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4910      	ldr	r1, [pc, #64]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x138>)
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <HAL_UARTEx_RxEventCallback+0x148>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f007 f9b6 	bl	8008530 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_UARTEx_RxEventCallback+0x14c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2104      	movs	r1, #4
 80011d0:	438a      	bics	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 80011d4:	e005      	b.n	80011e2 <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x13c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_UARTEx_RxEventCallback+0x150>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b005      	add	sp, #20
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	40013800 	.word	0x40013800
 80011f0:	20000790 	.word	0x20000790
 80011f4:	2000078e 	.word	0x2000078e
 80011f8:	20000488 	.word	0x20000488
 80011fc:	20000688 	.word	0x20000688
 8001200:	20000062 	.word	0x20000062
 8001204:	20000788 	.word	0x20000788
 8001208:	2000078c 	.word	0x2000078c
 800120c:	20000358 	.word	0x20000358
 8001210:	200003ec 	.word	0x200003ec
 8001214:	20000792 	.word	0x20000792

08001218 <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_UART_TxCpltCallback+0x18>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	20000793 	.word	0x20000793

08001234 <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <handle_chunk_miss+0x5c>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d120      	bne.n	8001286 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8001244:	f001 f8a0 	bl	8002388 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <handle_chunk_miss+0x60>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b0a      	cmp	r3, #10
 8001252:	d918      	bls.n	8001286 <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <handle_chunk_miss+0x5c>)
 8001256:	2201      	movs	r2, #1
 8001258:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <handle_chunk_miss+0x64>)
 800125c:	0018      	movs	r0, r3
 800125e:	f005 fb7d 	bl	800695c <HAL_UART_Abort_IT>
 8001262:	0003      	movs	r3, r0
 8001264:	001a      	movs	r2, r3
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b25b      	sxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d104      	bne.n	800127e <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8001274:	1dfc      	adds	r4, r7, #7
 8001276:	f000 fae7 	bl	8001848 <modbus_set_rx>
 800127a:	0003      	movs	r3, r0
 800127c:	7023      	strb	r3, [r4, #0]
			}
			return status;
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	e000      	b.n	8001288 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b003      	add	sp, #12
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	20000062 	.word	0x20000062
 8001294:	20000788 	.word	0x20000788
 8001298:	20000358 	.word	0x20000358

0800129c <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	0002      	movs	r2, r0
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2bff      	cmp	r3, #255	@ 0xff
 80012ae:	d023      	beq.n	80012f8 <get_rx_buffer+0x5c>
	{
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <get_rx_buffer+0x68>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	001a      	movs	r2, r3
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	18d3      	adds	r3, r2, r3
 80012be:	2bff      	cmp	r3, #255	@ 0xff
 80012c0:	dd0b      	ble.n	80012da <get_rx_buffer+0x3e>
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <get_rx_buffer+0x68>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	001a      	movs	r2, r3
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	3b01      	subs	r3, #1
 80012d2:	3bff      	subs	r3, #255	@ 0xff
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80012d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <get_rx_buffer+0x6c>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	e008      	b.n	80012ec <get_rx_buffer+0x50>
				modbus_rx_buffer[start_index + index];
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <get_rx_buffer+0x68>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	001a      	movs	r2, r3
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	18d3      	adds	r3, r2, r3
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <get_rx_buffer+0x6c>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	210f      	movs	r1, #15
 80012ee:	187a      	adds	r2, r7, r1
 80012f0:	7013      	strb	r3, [r2, #0]
		return value;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	e000      	b.n	80012fa <get_rx_buffer+0x5e>
	}
	return 0xFF;
 80012f8:	23ff      	movs	r3, #255	@ 0xff
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	2000078c 	.word	0x2000078c
 8001308:	20000488 	.word	0x20000488

0800130c <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001312:	2002      	movs	r0, #2
 8001314:	f7ff ffc2 	bl	800129c <get_rx_buffer>
 8001318:	0003      	movs	r3, r0
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21c      	sxth	r4, r3
 800131e:	2003      	movs	r0, #3
 8001320:	f7ff ffbc 	bl	800129c <get_rx_buffer>
 8001324:	0003      	movs	r3, r0
 8001326:	b21b      	sxth	r3, r3
 8001328:	4323      	orrs	r3, r4
 800132a:	b21a      	sxth	r2, r3
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001330:	2004      	movs	r0, #4
 8001332:	f7ff ffb3 	bl	800129c <get_rx_buffer>
 8001336:	0003      	movs	r3, r0
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21c      	sxth	r4, r3
 800133c:	2005      	movs	r0, #5
 800133e:	f7ff ffad 	bl	800129c <get_rx_buffer>
 8001342:	0003      	movs	r3, r0
 8001344:	b21b      	sxth	r3, r3
 8001346:	4323      	orrs	r3, r4
 8001348:	b21a      	sxth	r2, r3
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 800134e:	1cbb      	adds	r3, r7, #2
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	2b7d      	cmp	r3, #125	@ 0x7d
 8001354:	d803      	bhi.n	800135e <return_holding_registers+0x52>
 8001356:	1cbb      	adds	r3, r7, #2
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 800135e:	2006      	movs	r0, #6
 8001360:	f000 f95e 	bl	8001620 <modbus_exception>
 8001364:	0003      	movs	r3, r0
 8001366:	e065      	b.n	8001434 <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001368:	1cba      	adds	r2, r7, #2
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	b29a      	uxth	r2, r3
 8001374:	003b      	movs	r3, r7
 8001376:	3a01      	subs	r2, #1
 8001378:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800137a:	003b      	movs	r3, r7
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	2b31      	cmp	r3, #49	@ 0x31
 8001380:	d904      	bls.n	800138c <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001382:	2005      	movs	r0, #5
 8001384:	f000 f94c 	bl	8001620 <modbus_exception>
 8001388:	0003      	movs	r3, r0
 800138a:	e053      	b.n	8001434 <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff ff85 	bl	800129c <get_rx_buffer>
 8001392:	0003      	movs	r3, r0
 8001394:	001a      	movs	r2, r3
 8001396:	4b29      	ldr	r3, [pc, #164]	@ (800143c <return_holding_registers+0x130>)
 8001398:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff ff7e 	bl	800129c <get_rx_buffer>
 80013a0:	0003      	movs	r3, r0
 80013a2:	001a      	movs	r2, r3
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <return_holding_registers+0x130>)
 80013a6:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	18db      	adds	r3, r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b22      	ldr	r3, [pc, #136]	@ (800143c <return_holding_registers+0x130>)
 80013b4:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	2203      	movs	r2, #3
 80013ba:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 80013bc:	1dbb      	adds	r3, r7, #6
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e028      	b.n	8001416 <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	881a      	ldrh	r2, [r3, #0]
 80013c8:	1dbb      	adds	r3, r7, #6
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	18d2      	adds	r2, r2, r3
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <return_holding_registers+0x134>)
 80013d0:	0052      	lsls	r2, r2, #1
 80013d2:	5ad3      	ldrh	r3, [r2, r3]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	b299      	uxth	r1, r3
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	1dfa      	adds	r2, r7, #7
 80013de:	1c58      	adds	r0, r3, #1
 80013e0:	7010      	strb	r0, [r2, #0]
 80013e2:	001a      	movs	r2, r3
 80013e4:	b2c9      	uxtb	r1, r1
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <return_holding_registers+0x130>)
 80013e8:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	1dbb      	adds	r3, r7, #6
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	18d2      	adds	r2, r2, r3
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <return_holding_registers+0x134>)
 80013f6:	0052      	lsls	r2, r2, #1
 80013f8:	5ad1      	ldrh	r1, [r2, r3]
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	1dfa      	adds	r2, r7, #7
 8001400:	1c58      	adds	r0, r3, #1
 8001402:	7010      	strb	r0, [r2, #0]
 8001404:	001a      	movs	r2, r3
 8001406:	b2c9      	uxtb	r1, r1
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <return_holding_registers+0x130>)
 800140a:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	3201      	adds	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	1dbb      	adds	r3, r7, #6
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	1cba      	adds	r2, r7, #2
 800141e:	8812      	ldrh	r2, [r2, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8cf      	bhi.n	80013c4 <return_holding_registers+0xb8>
	}

	return modbus_send(modbus_tx_buffer, index);
 8001424:	1dfb      	adds	r3, r7, #7
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <return_holding_registers+0x130>)
 800142a:	0011      	movs	r1, r2
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f98d 	bl	800174c <modbus_send>
 8001432:	0003      	movs	r3, r0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b003      	add	sp, #12
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	20000588 	.word	0x20000588
 8001440:	20000000 	.word	0x20000000

08001444 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800144a:	2002      	movs	r0, #2
 800144c:	f7ff ff26 	bl	800129c <get_rx_buffer>
 8001450:	0003      	movs	r3, r0
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21c      	sxth	r4, r3
 8001456:	2003      	movs	r0, #3
 8001458:	f7ff ff20 	bl	800129c <get_rx_buffer>
 800145c:	0003      	movs	r3, r0
 800145e:	b21b      	sxth	r3, r3
 8001460:	4323      	orrs	r3, r4
 8001462:	b21a      	sxth	r2, r3
 8001464:	230c      	movs	r3, #12
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 800146a:	2004      	movs	r0, #4
 800146c:	f7ff ff16 	bl	800129c <get_rx_buffer>
 8001470:	0003      	movs	r3, r0
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21c      	sxth	r4, r3
 8001476:	2005      	movs	r0, #5
 8001478:	f7ff ff10 	bl	800129c <get_rx_buffer>
 800147c:	0003      	movs	r3, r0
 800147e:	b21b      	sxth	r3, r3
 8001480:	4323      	orrs	r3, r4
 8001482:	b21a      	sxth	r2, r3
 8001484:	210a      	movs	r1, #10
 8001486:	187b      	adds	r3, r7, r1
 8001488:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 800148a:	000a      	movs	r2, r1
 800148c:	18bb      	adds	r3, r7, r2
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	2b7d      	cmp	r3, #125	@ 0x7d
 8001492:	d803      	bhi.n	800149c <edit_multiple_registers+0x58>
 8001494:	18bb      	adds	r3, r7, r2
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 800149c:	2006      	movs	r0, #6
 800149e:	f000 f8bf 	bl	8001620 <modbus_exception>
 80014a2:	0003      	movs	r3, r0
 80014a4:	e0b4      	b.n	8001610 <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80014a6:	230a      	movs	r3, #10
 80014a8:	18fa      	adds	r2, r7, r3
 80014aa:	230c      	movs	r3, #12
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	18d3      	adds	r3, r2, r3
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	2108      	movs	r1, #8
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	3a01      	subs	r2, #1
 80014bc:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	2b31      	cmp	r3, #49	@ 0x31
 80014c4:	d904      	bls.n	80014d0 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80014c6:	2005      	movs	r0, #5
 80014c8:	f000 f8aa 	bl	8001620 <modbus_exception>
 80014cc:	0003      	movs	r3, r0
 80014ce:	e09f      	b.n	8001610 <edit_multiple_registers+0x1cc>
	}

	if((first_register_address >= 3 && last_register_address <= 33))
 80014d0:	230c      	movs	r3, #12
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d909      	bls.n	80014ee <edit_multiple_registers+0xaa>
 80014da:	2308      	movs	r3, #8
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b21      	cmp	r3, #33	@ 0x21
 80014e2:	d804      	bhi.n	80014ee <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 80014e4:	2004      	movs	r0, #4
 80014e6:	f000 f89b 	bl	8001620 <modbus_exception>
 80014ea:	0003      	movs	r3, r0
 80014ec:	e090      	b.n	8001610 <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fed4 	bl	800129c <get_rx_buffer>
 80014f4:	0003      	movs	r3, r0
 80014f6:	001a      	movs	r2, r3
 80014f8:	4b47      	ldr	r3, [pc, #284]	@ (8001618 <edit_multiple_registers+0x1d4>)
 80014fa:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fecd 	bl	800129c <get_rx_buffer>
 8001502:	0003      	movs	r3, r0
 8001504:	001a      	movs	r2, r3
 8001506:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <edit_multiple_registers+0x1d4>)
 8001508:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 800150a:	2002      	movs	r0, #2
 800150c:	f7ff fec6 	bl	800129c <get_rx_buffer>
 8001510:	0003      	movs	r3, r0
 8001512:	001a      	movs	r2, r3
 8001514:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <edit_multiple_registers+0x1d4>)
 8001516:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001518:	2003      	movs	r0, #3
 800151a:	f7ff febf 	bl	800129c <get_rx_buffer>
 800151e:	0003      	movs	r3, r0
 8001520:	001a      	movs	r2, r3
 8001522:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <edit_multiple_registers+0x1d4>)
 8001524:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8001526:	2004      	movs	r0, #4
 8001528:	f7ff feb8 	bl	800129c <get_rx_buffer>
 800152c:	0003      	movs	r3, r0
 800152e:	001a      	movs	r2, r3
 8001530:	4b39      	ldr	r3, [pc, #228]	@ (8001618 <edit_multiple_registers+0x1d4>)
 8001532:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8001534:	2005      	movs	r0, #5
 8001536:	f7ff feb1 	bl	800129c <get_rx_buffer>
 800153a:	0003      	movs	r3, r0
 800153c:	001a      	movs	r2, r3
 800153e:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <edit_multiple_registers+0x1d4>)
 8001540:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	2206      	movs	r2, #6
 8001546:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001548:	230f      	movs	r3, #15
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e032      	b.n	80015b8 <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8001552:	250f      	movs	r5, #15
 8001554:	197b      	adds	r3, r7, r5
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	18db      	adds	r3, r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3307      	adds	r3, #7
 800155e:	b2db      	uxtb	r3, r3
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fe9b 	bl	800129c <get_rx_buffer>
 8001566:	0003      	movs	r3, r0
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21c      	sxth	r4, r3
 800156c:	197b      	adds	r3, r7, r5
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3304      	adds	r3, #4
 8001572:	b2db      	uxtb	r3, r3
 8001574:	18db      	adds	r3, r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff fe8f 	bl	800129c <get_rx_buffer>
 800157e:	0003      	movs	r3, r0
 8001580:	b21b      	sxth	r3, r3
 8001582:	4323      	orrs	r3, r4
 8001584:	b219      	sxth	r1, r3
 8001586:	200c      	movs	r0, #12
 8001588:	183b      	adds	r3, r7, r0
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	197b      	adds	r3, r7, r5
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	18d2      	adds	r2, r2, r3
 8001592:	b289      	uxth	r1, r1
 8001594:	4b21      	ldr	r3, [pc, #132]	@ (800161c <edit_multiple_registers+0x1d8>)
 8001596:	0052      	lsls	r2, r2, #1
 8001598:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 800159a:	197b      	adds	r3, r7, r5
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	183b      	adds	r3, r7, r0
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	18d3      	adds	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f863 	bl	8001674 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80015ae:	197b      	adds	r3, r7, r5
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	197b      	adds	r3, r7, r5
 80015b4:	3201      	adds	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	230f      	movs	r3, #15
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	220a      	movs	r2, #10
 80015c2:	18ba      	adds	r2, r7, r2
 80015c4:	8812      	ldrh	r2, [r2, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d8c3      	bhi.n	8001552 <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 fee6 	bl	800239c <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 80015d0:	1dbc      	adds	r4, r7, #6
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <edit_multiple_registers+0x1d4>)
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 f8b6 	bl	800174c <modbus_send>
 80015e0:	0003      	movs	r3, r0
 80015e2:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 80015e4:	1dbb      	adds	r3, r7, #6
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80015ee:	230c      	movs	r3, #12
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d808      	bhi.n	800160a <edit_multiple_registers+0x1c6>
 80015f8:	2308      	movs	r3, #8
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 8001602:	f000 f943 	bl	800188c <modbus_change_baud_rate>
 8001606:	0003      	movs	r3, r0
 8001608:	e002      	b.n	8001610 <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 800160a:	1dbb      	adds	r3, r7, #6
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b25b      	sxtb	r3, r3
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b004      	add	sp, #16
 8001616:	bdb0      	pop	{r4, r5, r7, pc}
 8001618:	20000588 	.word	0x20000588
 800161c:	20000000 	.word	0x20000000

08001620 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	0002      	movs	r2, r0
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fe35 	bl	800129c <get_rx_buffer>
 8001632:	0003      	movs	r3, r0
 8001634:	001a      	movs	r2, r3
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <modbus_exception+0x50>)
 8001638:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fe2e 	bl	800129c <get_rx_buffer>
 8001640:	0003      	movs	r3, r0
 8001642:	001a      	movs	r2, r3
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	425b      	negs	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <modbus_exception+0x50>)
 800164e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3b03      	subs	r3, #3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <modbus_exception+0x50>)
 800165a:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <modbus_exception+0x50>)
 800165e:	2103      	movs	r1, #3
 8001660:	0018      	movs	r0, r3
 8001662:	f000 f873 	bl	800174c <modbus_send>
 8001666:	0003      	movs	r3, r0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000588 	.word	0x20000588

08001674 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	0002      	movs	r2, r0
 800167c:	1dbb      	adds	r3, r7, #6
 800167e:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8001680:	1dbb      	adds	r3, r7, #6
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2b24      	cmp	r3, #36	@ 0x24
 8001686:	dd00      	ble.n	800168a <handle_range+0x16>
 8001688:	e058      	b.n	800173c <handle_range+0xc8>
 800168a:	2b22      	cmp	r3, #34	@ 0x22
 800168c:	da3f      	bge.n	800170e <handle_range+0x9a>
 800168e:	2b02      	cmp	r3, #2
 8001690:	d02f      	beq.n	80016f2 <handle_range+0x7e>
 8001692:	dc53      	bgt.n	800173c <handle_range+0xc8>
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <handle_range+0x2a>
 8001698:	2b01      	cmp	r3, #1
 800169a:	d00e      	beq.n	80016ba <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 800169c:	e04e      	b.n	800173c <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 800169e:	1dbb      	adds	r3, r7, #6
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <handle_range+0xd0>)
 80016a4:	0052      	lsls	r2, r2, #1
 80016a6:	5ad3      	ldrh	r3, [r2, r3]
 80016a8:	2bff      	cmp	r3, #255	@ 0xff
 80016aa:	d940      	bls.n	800172e <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 80016ac:	1dbb      	adds	r3, r7, #6
 80016ae:	881a      	ldrh	r2, [r3, #0]
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <handle_range+0xd0>)
 80016b2:	0052      	lsls	r2, r2, #1
 80016b4:	21ff      	movs	r1, #255	@ 0xff
 80016b6:	52d1      	strh	r1, [r2, r3]
			break;
 80016b8:	e039      	b.n	800172e <handle_range+0xba>
			if(holding_register_database[holding_register] < 2)
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <handle_range+0xd0>)
 80016c0:	0052      	lsls	r2, r2, #1
 80016c2:	5ad3      	ldrh	r3, [r2, r3]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d806      	bhi.n	80016d6 <handle_range+0x62>
				holding_register_database[holding_register] = 2;
 80016c8:	1dbb      	adds	r3, r7, #6
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <handle_range+0xd0>)
 80016ce:	0052      	lsls	r2, r2, #1
 80016d0:	2102      	movs	r1, #2
 80016d2:	52d1      	strh	r1, [r2, r3]
			break;
 80016d4:	e02d      	b.n	8001732 <handle_range+0xbe>
			else if(holding_register_database[holding_register] > 9)
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <handle_range+0xd0>)
 80016dc:	0052      	lsls	r2, r2, #1
 80016de:	5ad3      	ldrh	r3, [r2, r3]
 80016e0:	2b09      	cmp	r3, #9
 80016e2:	d926      	bls.n	8001732 <handle_range+0xbe>
				holding_register_database[holding_register] = 9;
 80016e4:	1dbb      	adds	r3, r7, #6
 80016e6:	881a      	ldrh	r2, [r3, #0]
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <handle_range+0xd0>)
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	2109      	movs	r1, #9
 80016ee:	52d1      	strh	r1, [r2, r3]
			break;
 80016f0:	e01f      	b.n	8001732 <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 80016f2:	1dbb      	adds	r3, r7, #6
 80016f4:	881a      	ldrh	r2, [r3, #0]
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <handle_range+0xd0>)
 80016f8:	0052      	lsls	r2, r2, #1
 80016fa:	5ad3      	ldrh	r3, [r2, r3]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d91a      	bls.n	8001736 <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <handle_range+0xd0>)
 8001706:	0052      	lsls	r2, r2, #1
 8001708:	2101      	movs	r1, #1
 800170a:	52d1      	strh	r1, [r2, r3]
			break;
 800170c:	e013      	b.n	8001736 <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 800170e:	1dbb      	adds	r3, r7, #6
 8001710:	881a      	ldrh	r2, [r3, #0]
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <handle_range+0xd0>)
 8001714:	0052      	lsls	r2, r2, #1
 8001716:	5ad2      	ldrh	r2, [r2, r3]
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	429a      	cmp	r2, r3
 800171e:	d30c      	bcc.n	800173a <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 8001720:	1dbb      	adds	r3, r7, #6
 8001722:	881a      	ldrh	r2, [r3, #0]
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <handle_range+0xd0>)
 8001726:	0052      	lsls	r2, r2, #1
 8001728:	4907      	ldr	r1, [pc, #28]	@ (8001748 <handle_range+0xd4>)
 800172a:	52d1      	strh	r1, [r2, r3]
			break;
 800172c:	e005      	b.n	800173a <handle_range+0xc6>
			break;
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	e004      	b.n	800173c <handle_range+0xc8>
			break;
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	e002      	b.n	800173c <handle_range+0xc8>
			break;
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	e000      	b.n	800173c <handle_range+0xc8>
			break;
 800173a:	46c0      	nop			@ (mov r8, r8)
}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	00000fff 	.word	0x00000fff

0800174c <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	000a      	movs	r2, r1
 8001756:	1cfb      	adds	r3, r7, #3
 8001758:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 800175a:	250e      	movs	r5, #14
 800175c:	197c      	adds	r4, r7, r5
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <modbus_send+0xc0>)
 8001764:	0011      	movs	r1, r2
 8001766:	0018      	movs	r0, r3
 8001768:	f000 f8f6 	bl	8001958 <crc_16>
 800176c:	0003      	movs	r3, r0
 800176e:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8001770:	1cfb      	adds	r3, r7, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	197a      	adds	r2, r7, r5
 8001776:	8812      	ldrh	r2, [r2, #0]
 8001778:	b2d1      	uxtb	r1, r2
 800177a:	4a24      	ldr	r2, [pc, #144]	@ (800180c <modbus_send+0xc0>)
 800177c:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 800177e:	197b      	adds	r3, r7, r5
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b29a      	uxth	r2, r3
 8001786:	1cfb      	adds	r3, r7, #3
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	b2d1      	uxtb	r1, r2
 800178e:	4a1f      	ldr	r2, [pc, #124]	@ (800180c <modbus_send+0xc0>)
 8001790:	54d1      	strb	r1, [r2, r3]

	int8_t status = HAL_OK;
 8001792:	240d      	movs	r4, #13
 8001794:	193b      	adds	r3, r7, r4
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, modbus_tx_buffer, size + 2);
 800179a:	1cfb      	adds	r3, r7, #3
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3302      	adds	r3, #2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4919      	ldr	r1, [pc, #100]	@ (800180c <modbus_send+0xc0>)
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <modbus_send+0xc4>)
 80017a8:	0018      	movs	r0, r3
 80017aa:	f005 f82f 	bl	800680c <HAL_UART_Transmit_IT>
 80017ae:	0003      	movs	r3, r0
 80017b0:	001a      	movs	r2, r3
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <modbus_send+0x7c>
	{
		return status;
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	e01d      	b.n	8001804 <modbus_send+0xb8>
	}
	time = HAL_GetTick();
 80017c8:	f000 fdde 	bl	8002388 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <modbus_send+0xc8>)
 80017d0:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <modbus_send+0xcc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d107      	bne.n	80017ee <modbus_send+0xa2>
 80017de:	f000 fdd3 	bl	8002388 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <modbus_send+0xc8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b63      	cmp	r3, #99	@ 0x63
 80017ec:	d9f2      	bls.n	80017d4 <modbus_send+0x88>
	if(tx_int)
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <modbus_send+0xcc>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <modbus_send+0xb6>
	{
		tx_int = 0;
 80017f8:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <modbus_send+0xcc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <modbus_send+0xb8>
	}
	else
	{
		return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
	}
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b004      	add	sp, #16
 800180a:	bdb0      	pop	{r4, r5, r7, pc}
 800180c:	20000588 	.word	0x20000588
 8001810:	20000358 	.word	0x20000358
 8001814:	20000784 	.word	0x20000784
 8001818:	20000793 	.word	0x20000793

0800181c <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	if(rx_int)
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <modbus_rx+0x28>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <modbus_rx+0x18>
	{
		rx_int = 0;
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <modbus_rx+0x28>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		return 1;
 8001830:	2301      	movs	r3, #1
 8001832:	e004      	b.n	800183e <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8001834:	f7ff fcfe 	bl	8001234 <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 8001838:	4b02      	ldr	r3, [pc, #8]	@ (8001844 <modbus_rx+0x28>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000792 	.word	0x20000792

08001848 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 800184e:	490c      	ldr	r1, [pc, #48]	@ (8001880 <modbus_set_rx+0x38>)
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <modbus_set_rx+0x3c>)
 8001852:	2206      	movs	r2, #6
 8001854:	0018      	movs	r0, r3
 8001856:	f006 fe6b 	bl	8008530 <HAL_UARTEx_ReceiveToIdle_DMA>
 800185a:	0003      	movs	r3, r0
 800185c:	001a      	movs	r2, r3
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <modbus_set_rx+0x40>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <modbus_set_rx+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2104      	movs	r1, #4
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

	return status;
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b25b      	sxtb	r3, r3
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000688 	.word	0x20000688
 8001884:	20000358 	.word	0x20000358
 8001888:	200003ec 	.word	0x200003ec

0800188c <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 8001898:	4b2c      	ldr	r3, [pc, #176]	@ (800194c <modbus_change_baud_rate+0xc0>)
 800189a:	885b      	ldrh	r3, [r3, #2]
 800189c:	2b09      	cmp	r3, #9
 800189e:	d82c      	bhi.n	80018fa <modbus_change_baud_rate+0x6e>
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <modbus_change_baud_rate+0xc4>)
 80018a4:	18d3      	adds	r3, r2, r3
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80018aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018ac:	2296      	movs	r2, #150	@ 0x96
 80018ae:	0152      	lsls	r2, r2, #5
 80018b0:	605a      	str	r2, [r3, #4]
			break;
 80018b2:	e033      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80018b4:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018b6:	2296      	movs	r2, #150	@ 0x96
 80018b8:	0192      	lsls	r2, r2, #6
 80018ba:	605a      	str	r2, [r3, #4]
			break;
 80018bc:	e02e      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80018be:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018c0:	2296      	movs	r2, #150	@ 0x96
 80018c2:	01d2      	lsls	r2, r2, #7
 80018c4:	605a      	str	r2, [r3, #4]
			break;
 80018c6:	e029      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018ca:	2296      	movs	r2, #150	@ 0x96
 80018cc:	0212      	lsls	r2, r2, #8
 80018ce:	605a      	str	r2, [r3, #4]
			break;
 80018d0:	e024      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018d4:	22e1      	movs	r2, #225	@ 0xe1
 80018d6:	0212      	lsls	r2, r2, #8
 80018d8:	605a      	str	r2, [r3, #4]
			break;
 80018da:	e01f      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018de:	22e1      	movs	r2, #225	@ 0xe1
 80018e0:	0252      	lsls	r2, r2, #9
 80018e2:	605a      	str	r2, [r3, #4]
			break;
 80018e4:	e01a      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018e8:	22fa      	movs	r2, #250	@ 0xfa
 80018ea:	0252      	lsls	r2, r2, #9
 80018ec:	605a      	str	r2, [r3, #4]
			break;
 80018ee:	e015      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 80018f2:	22fa      	movs	r2, #250	@ 0xfa
 80018f4:	0292      	lsls	r2, r2, #10
 80018f6:	605a      	str	r2, [r3, #4]
			break;
 80018f8:	e010      	b.n	800191c <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <modbus_change_baud_rate+0xc0>)
 80018fc:	2203      	movs	r2, #3
 80018fe:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 8001902:	2296      	movs	r2, #150	@ 0x96
 8001904:	0192      	lsls	r2, r2, #6
 8001906:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 800190a:	0018      	movs	r0, r3
 800190c:	f005 fcc0 	bl	8007290 <UART_SetConfig>
 8001910:	0003      	movs	r3, r0
 8001912:	001a      	movs	r2, r3
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 8001918:	2306      	movs	r3, #6
 800191a:	e013      	b.n	8001944 <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 800191c:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <modbus_change_baud_rate+0xc8>)
 800191e:	0018      	movs	r0, r3
 8001920:	f005 fcb6 	bl	8007290 <UART_SetConfig>
 8001924:	0003      	movs	r3, r0
 8001926:	001a      	movs	r2, r3
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b25b      	sxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <modbus_change_baud_rate+0xb2>
	{
		return status;
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b25b      	sxtb	r3, r3
 800193c:	e002      	b.n	8001944 <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b25b      	sxtb	r3, r3
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	08009a74 	.word	0x08009a74
 8001954:	20000358 	.word	0x20000358

08001958 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	000a      	movs	r2, r1
 8001962:	1cfb      	adds	r3, r7, #3
 8001964:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8001966:	230f      	movs	r3, #15
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	22ff      	movs	r2, #255	@ 0xff
 800196c:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 800196e:	230e      	movs	r3, #14
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	22ff      	movs	r2, #255	@ 0xff
 8001974:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8001976:	e019      	b.n	80019ac <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	200e      	movs	r0, #14
 8001982:	183b      	adds	r3, r7, r0
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4053      	eors	r3, r2
 8001988:	b2db      	uxtb	r3, r3
 800198a:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 800198c:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <crc_16+0x84>)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	7819      	ldrb	r1, [r3, #0]
 8001994:	183b      	adds	r3, r7, r0
 8001996:	200f      	movs	r0, #15
 8001998:	183a      	adds	r2, r7, r0
 800199a:	7812      	ldrb	r2, [r2, #0]
 800199c:	404a      	eors	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 80019a0:	183b      	adds	r3, r7, r0
 80019a2:	490f      	ldr	r1, [pc, #60]	@ (80019e0 <crc_16+0x88>)
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	188a      	adds	r2, r1, r2
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	701a      	strb	r2, [r3, #0]
	while (size--)
 80019ac:	1cfb      	adds	r3, r7, #3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	1cfa      	adds	r2, r7, #3
 80019b2:	1e59      	subs	r1, r3, #1
 80019b4:	7011      	strb	r1, [r2, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1de      	bne.n	8001978 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80019ba:	230f      	movs	r3, #15
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	230e      	movs	r3, #14
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	b29b      	uxth	r3, r3
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	08009874 	.word	0x08009874
 80019e0:	08009974 	.word	0x08009974

080019e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_MspInit+0x44>)
 80019ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_MspInit+0x44>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <HAL_MspInit+0x44>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_MspInit+0x44>)
 8001a04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_MspInit+0x44>)
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0549      	lsls	r1, r1, #21
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_MspInit+0x44>)
 8001a12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	055b      	lsls	r3, r3, #21
 8001a18:	4013      	ands	r3, r2
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b093      	sub	sp, #76	@ 0x4c
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	2334      	movs	r3, #52	@ 0x34
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	0018      	movs	r0, r3
 8001a3a:	2314      	movs	r3, #20
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f007 f85c 	bl	8008afc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	2414      	movs	r4, #20
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	0018      	movs	r0, r3
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f007 f854 	bl	8008afc <memset>
  if(hadc->Instance==ADC1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a35      	ldr	r2, [pc, #212]	@ (8001b30 <HAL_ADC_MspInit+0x104>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d163      	bne.n	8001b26 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2220      	movs	r2, #32
 8001a62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f003 ff45 	bl	80058fc <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8001a76:	f7ff fb1f 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b34 <HAL_ADC_MspInit+0x108>)
 8001a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b34 <HAL_ADC_MspInit+0x108>)
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	0349      	lsls	r1, r1, #13
 8001a84:	430a      	orrs	r2, r1
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a88:	4b2a      	ldr	r3, [pc, #168]	@ (8001b34 <HAL_ADC_MspInit+0x108>)
 8001a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	035b      	lsls	r3, r3, #13
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <HAL_ADC_MspInit+0x108>)
 8001a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a9a:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <HAL_ADC_MspInit+0x108>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aa2:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <HAL_ADC_MspInit+0x108>)
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 8001aae:	2134      	movs	r1, #52	@ 0x34
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	4a21      	ldr	r2, [pc, #132]	@ (8001b38 <HAL_ADC_MspInit+0x10c>)
 8001ab4:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	187a      	adds	r2, r7, r1
 8001ac4:	23a0      	movs	r3, #160	@ 0xa0
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	0011      	movs	r1, r2
 8001aca:	0018      	movs	r0, r3
 8001acc:	f001 fd1e 	bl	800350c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <HAL_ADC_MspInit+0x114>)
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001ad8:	2205      	movs	r2, #5
 8001ada:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001adc:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001aea:	2280      	movs	r2, #128	@ 0x80
 8001aec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	0052      	lsls	r2, r2, #1
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001af8:	2280      	movs	r2, #128	@ 0x80
 8001afa:	00d2      	lsls	r2, r2, #3
 8001afc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001b00:	2220      	movs	r2, #32
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f001 f9c1 	bl	8002e94 <HAL_DMA_Init>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001b16:	f7ff facf 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001b1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_ADC_MspInit+0x110>)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b013      	add	sp, #76	@ 0x4c
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	40012400 	.word	0x40012400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	000001ff 	.word	0x000001ff
 8001b3c:	20000150 	.word	0x20000150
 8001b40:	40020008 	.word	0x40020008

08001b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b093      	sub	sp, #76	@ 0x4c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	2334      	movs	r3, #52	@ 0x34
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	0018      	movs	r0, r3
 8001b52:	2314      	movs	r3, #20
 8001b54:	001a      	movs	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f006 ffd0 	bl	8008afc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	2414      	movs	r4, #20
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	0018      	movs	r0, r3
 8001b62:	2320      	movs	r3, #32
 8001b64:	001a      	movs	r2, r3
 8001b66:	2100      	movs	r1, #0
 8001b68:	f006 ffc8 	bl	8008afc <memset>
  if(hi2c->Instance==I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3b      	ldr	r2, [pc, #236]	@ (8001c60 <HAL_I2C_MspInit+0x11c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d170      	bne.n	8001c58 <HAL_I2C_MspInit+0x114>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2202      	movs	r2, #2
 8001b7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	0018      	movs	r0, r3
 8001b86:	f003 feb9 	bl	80058fc <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b8e:	f7ff fa93 	bl	80010b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <HAL_I2C_MspInit+0x120>)
 8001b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b96:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_I2C_MspInit+0x120>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b9e:	4b31      	ldr	r3, [pc, #196]	@ (8001c64 <HAL_I2C_MspInit+0x120>)
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001baa:	2134      	movs	r1, #52	@ 0x34
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	22c0      	movs	r2, #192	@ 0xc0
 8001bb0:	00d2      	lsls	r2, r2, #3
 8001bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2212      	movs	r2, #18
 8001bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2206      	movs	r2, #6
 8001bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	187a      	adds	r2, r7, r1
 8001bce:	23a0      	movs	r3, #160	@ 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f001 fc99 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bda:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <HAL_I2C_MspInit+0x120>)
 8001bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bde:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <HAL_I2C_MspInit+0x120>)
 8001be0:	2180      	movs	r1, #128	@ 0x80
 8001be2:	0389      	lsls	r1, r1, #14
 8001be4:	430a      	orrs	r2, r1
 8001be6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_I2C_MspInit+0x120>)
 8001bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	039b      	lsls	r3, r3, #14
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c6c <HAL_I2C_MspInit+0x128>)
 8001bfa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001bfe:	220a      	movs	r2, #10
 8001c00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f001 f930 	bl	8002e94 <HAL_DMA_Init>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 8001c38:	f7ff fa3e 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_I2C_MspInit+0x124>)
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2017      	movs	r0, #23
 8001c4e:	f001 f8ef 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001c52:	2017      	movs	r0, #23
 8001c54:	f001 f901 	bl	8002e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c58:	46c0      	nop			@ (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b013      	add	sp, #76	@ 0x4c
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	40005400 	.word	0x40005400
 8001c64:	40021000 	.word	0x40021000
 8001c68:	20000200 	.word	0x20000200
 8001c6c:	4002001c 	.word	0x4002001c

08001c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b093      	sub	sp, #76	@ 0x4c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	2334      	movs	r3, #52	@ 0x34
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	2314      	movs	r3, #20
 8001c80:	001a      	movs	r2, r3
 8001c82:	2100      	movs	r1, #0
 8001c84:	f006 ff3a 	bl	8008afc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c88:	2414      	movs	r4, #20
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	2320      	movs	r3, #32
 8001c90:	001a      	movs	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	f006 ff32 	bl	8008afc <memset>
  if(hspi->Instance==SPI1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a34      	ldr	r2, [pc, #208]	@ (8001d70 <HAL_SPI_MspInit+0x100>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d162      	bne.n	8001d68 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f003 fe23 	bl	80058fc <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001cba:	f7ff f9fd 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	0149      	lsls	r1, r1, #5
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ccc:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cde:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cea:	2201      	movs	r2, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <HAL_SPI_MspInit+0x104>)
 8001d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d0a:	2134      	movs	r1, #52	@ 0x34
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2280      	movs	r2, #128	@ 0x80
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	000c      	movs	r4, r1
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	2202      	movs	r2, #2
 8001d1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	193b      	adds	r3, r7, r4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	193b      	adds	r3, r7, r4
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	193a      	adds	r2, r7, r4
 8001d30:	23a0      	movs	r3, #160	@ 0xa0
 8001d32:	05db      	lsls	r3, r3, #23
 8001d34:	0011      	movs	r1, r2
 8001d36:	0018      	movs	r0, r3
 8001d38:	f001 fbe8 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001d3c:	0021      	movs	r1, r4
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2228      	movs	r2, #40	@ 0x28
 8001d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2202      	movs	r2, #2
 8001d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	4a06      	ldr	r2, [pc, #24]	@ (8001d78 <HAL_SPI_MspInit+0x108>)
 8001d60:	0019      	movs	r1, r3
 8001d62:	0010      	movs	r0, r2
 8001d64:	f001 fbd2 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d68:	46c0      	nop			@ (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b013      	add	sp, #76	@ 0x4c
 8001d6e:	bd90      	pop	{r4, r7, pc}
 8001d70:	40013000 	.word	0x40013000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	50000400 	.word	0x50000400

08001d7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_TIM_PWM_MspInit+0x38>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10d      	bne.n	8001daa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	0109      	lsls	r1, r1, #4
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_TIM_Base_MspInit+0x38>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10d      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dd4:	2180      	movs	r1, #128	@ 0x80
 8001dd6:	0209      	lsls	r1, r1, #8
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b004      	add	sp, #16
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	40002000 	.word	0x40002000
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	240c      	movs	r4, #12
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	0018      	movs	r0, r3
 8001e0a:	2314      	movs	r3, #20
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f006 fe74 	bl	8008afc <memset>
  if(htim->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a15      	ldr	r2, [pc, #84]	@ (8001e70 <HAL_TIM_MspPostInit+0x74>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d123      	bne.n	8001e66 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_TIM_MspPostInit+0x78>)
 8001e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e22:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <HAL_TIM_MspPostInit+0x78>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e2a:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_TIM_MspPostInit+0x78>)
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	0212      	lsls	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	0021      	movs	r1, r4
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	2202      	movs	r2, #2
 8001e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2202      	movs	r2, #2
 8001e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e58:	187a      	adds	r2, r7, r1
 8001e5a:	23a0      	movs	r3, #160	@ 0xa0
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	0011      	movs	r1, r2
 8001e60:	0018      	movs	r0, r3
 8001e62:	f001 fb53 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b009      	add	sp, #36	@ 0x24
 8001e6c:	bd90      	pop	{r4, r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40021000 	.word	0x40021000

08001e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b095      	sub	sp, #84	@ 0x54
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	233c      	movs	r3, #60	@ 0x3c
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	0018      	movs	r0, r3
 8001e86:	2314      	movs	r3, #20
 8001e88:	001a      	movs	r2, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	f006 fe36 	bl	8008afc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e90:	241c      	movs	r4, #28
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	0018      	movs	r0, r3
 8001e96:	2320      	movs	r3, #32
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f006 fe2e 	bl	8008afc <memset>
  if(huart->Instance==USART1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a5f      	ldr	r2, [pc, #380]	@ (8002024 <HAL_UART_MspInit+0x1ac>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d000      	beq.n	8001eac <HAL_UART_MspInit+0x34>
 8001eaa:	e0b6      	b.n	800201a <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001eb2:	193b      	adds	r3, r7, r4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f003 fd1e 	bl	80058fc <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ec4:	f7ff f8f8 	bl	80010b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec8:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ecc:	4b56      	ldr	r3, [pc, #344]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001ece:	2180      	movs	r1, #128	@ 0x80
 8001ed0:	01c9      	lsls	r1, r1, #7
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ed6:	4b54      	ldr	r3, [pc, #336]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	01db      	lsls	r3, r3, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee4:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001eea:	2104      	movs	r1, #4
 8001eec:	430a      	orrs	r2, r1
 8001eee:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f00:	4b49      	ldr	r3, [pc, #292]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001f02:	2102      	movs	r1, #2
 8001f04:	430a      	orrs	r2, r1
 8001f06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f08:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f18:	4b43      	ldr	r3, [pc, #268]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_UART_MspInit+0x1b0>)
 8001f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f2c:	213c      	movs	r1, #60	@ 0x3c
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2280      	movs	r2, #128	@ 0x80
 8001f32:	01d2      	lsls	r2, r2, #7
 8001f34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	000c      	movs	r4, r1
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001f4a:	193b      	adds	r3, r7, r4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f50:	193b      	adds	r3, r7, r4
 8001f52:	4a36      	ldr	r2, [pc, #216]	@ (800202c <HAL_UART_MspInit+0x1b4>)
 8001f54:	0019      	movs	r1, r3
 8001f56:	0010      	movs	r0, r2
 8001f58:	f001 fad8 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	2204      	movs	r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	2202      	movs	r2, #2
 8001f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002030 <HAL_UART_MspInit+0x1b8>)
 8001f7e:	0019      	movs	r1, r3
 8001f80:	0010      	movs	r0, r2
 8001f82:	f001 fac3 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f86:	0021      	movs	r1, r4
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	0152      	lsls	r2, r2, #5
 8001f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	2202      	movs	r2, #2
 8001f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	187a      	adds	r2, r7, r1
 8001faa:	23a0      	movs	r3, #160	@ 0xa0
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f001 faab 	bl	800350c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <HAL_UART_MspInit+0x1c0>)
 8001fba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fbe:	2232      	movs	r2, #50	@ 0x32
 8001fc0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 ff50 	bl	8002e94 <HAL_DMA_Init>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001ff8:	f7ff f85e 	bl	80010b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2180      	movs	r1, #128	@ 0x80
 8002000:	4a0c      	ldr	r2, [pc, #48]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8002002:	505a      	str	r2, [r3, r1]
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_UART_MspInit+0x1bc>)
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	201b      	movs	r0, #27
 8002010:	f000 ff0e 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002014:	201b      	movs	r0, #27
 8002016:	f000 ff20 	bl	8002e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b015      	add	sp, #84	@ 0x54
 8002020:	bd90      	pop	{r4, r7, pc}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	40013800 	.word	0x40013800
 8002028:	40021000 	.word	0x40021000
 800202c:	50000800 	.word	0x50000800
 8002030:	50000400 	.word	0x50000400
 8002034:	200003ec 	.word	0x200003ec
 8002038:	40020044 	.word	0x40020044

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	e7fd      	b.n	8002040 <NMI_Handler+0x4>

08002044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	e7fd      	b.n	8002048 <HardFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002064:	f000 f97e 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <DMA1_Channel1_IRQHandler+0x14>)
 8002076:	0018      	movs	r0, r3
 8002078:	f001 f8fa 	bl	8003270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800207c:	46c0      	nop			@ (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	20000150 	.word	0x20000150

08002088 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <DMA1_Channel2_3_IRQHandler+0x14>)
 800208e:	0018      	movs	r0, r3
 8002090:	f001 f8ee 	bl	8003270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	20000200 	.word	0x20000200

080020a0 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x14>)
 80020a6:	0018      	movs	r0, r3
 80020a8:	f001 f8e2 	bl	8003270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	200003ec 	.word	0x200003ec

080020b8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <I2C1_IRQHandler+0x2c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	23e0      	movs	r3, #224	@ 0xe0
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4013      	ands	r3, r2
 80020c8:	d004      	beq.n	80020d4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <I2C1_IRQHandler+0x2c>)
 80020cc:	0018      	movs	r0, r3
 80020ce:	f001 fe9f 	bl	8003e10 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80020d2:	e003      	b.n	80020dc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80020d4:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <I2C1_IRQHandler+0x2c>)
 80020d6:	0018      	movs	r0, r3
 80020d8:	f001 fe80 	bl	8003ddc <HAL_I2C_EV_IRQHandler>
}
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	200001ac 	.word	0x200001ac

080020e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <USART1_IRQHandler+0x14>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f004 fd68 	bl	8006bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	20000358 	.word	0x20000358

08002100 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e00a      	b.n	8002128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002112:	e000      	b.n	8002116 <_read+0x16>
 8002114:	bf00      	nop
 8002116:	0001      	movs	r1, r0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf0      	blt.n	8002112 <_read+0x12>
  }

  return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b006      	add	sp, #24
 8002138:	bd80      	pop	{r7, pc}

0800213a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e009      	b.n	8002160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	0018      	movs	r0, r3
 8002156:	e000      	b.n	800215a <_write+0x20>
 8002158:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf1      	blt.n	800214c <_write+0x12>
  }
  return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b006      	add	sp, #24
 8002170:	bd80      	pop	{r7, pc}

08002172 <_close>:

int _close(int file)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800217a:	2301      	movs	r3, #1
 800217c:	425b      	negs	r3, r3
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}

08002186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	0192      	lsls	r2, r2, #6
 8002196:	605a      	str	r2, [r3, #4]
  return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_isatty>:

int _isatty(int file)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	18d3      	adds	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f006 fcd4 	bl	8008ba8 <__errno>
 8002200:	0003      	movs	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	2301      	movs	r3, #1
 8002208:	425b      	negs	r3, r3
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	18d2      	adds	r2, r2, r3
 800221a:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <_sbrk+0x64>)
 800221c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b006      	add	sp, #24
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20006000 	.word	0x20006000
 800222c:	00000400 	.word	0x00000400
 8002230:	20000794 	.word	0x20000794
 8002234:	200008e8 	.word	0x200008e8

08002238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <SystemInit+0x14>)
 800223e:	2280      	movs	r2, #128	@ 0x80
 8002240:	0512      	lsls	r2, r2, #20
 8002242:	609a      	str	r2, [r3, #8]
#endif
}
 8002244:	46c0      	nop			@ (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002250:	480d      	ldr	r0, [pc, #52]	@ (8002288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002252:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002254:	f7ff fff0 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002258:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800225a:	e003      	b.n	8002264 <LoopCopyDataInit>

0800225c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800225e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002260:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002262:	3104      	adds	r1, #4

08002264 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002264:	480a      	ldr	r0, [pc, #40]	@ (8002290 <LoopForever+0xa>)
  ldr r3, =_edata
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <LoopForever+0xe>)
  adds r2, r0, r1
 8002268:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800226a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800226c:	d3f6      	bcc.n	800225c <CopyDataInit>
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <LoopForever+0x12>)
  b LoopFillZerobss
 8002270:	e002      	b.n	8002278 <LoopFillZerobss>

08002272 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  str  r3, [r2]
 8002274:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002276:	3204      	adds	r2, #4

08002278 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <LoopForever+0x16>)
  cmp r2, r3
 800227a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800227c:	d3f9      	bcc.n	8002272 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800227e:	f006 fc99 	bl	8008bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7fe faf1 	bl	8000868 <main>

08002286 <LoopForever>:

LoopForever:
    b LoopForever
 8002286:	e7fe      	b.n	8002286 <LoopForever>
  ldr   r0, =_estack
 8002288:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 800228c:	08009bb4 	.word	0x08009bb4
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002294:	200000cc 	.word	0x200000cc
  ldr r2, =_sbss
 8002298:	200000cc 	.word	0x200000cc
  ldr r3, = _ebss
 800229c:	200008e8 	.word	0x200008e8

080022a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC1_IRQHandler>

080022a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 f80e 	bl	80022d0 <HAL_InitTick>
 80022b4:	1e03      	subs	r3, r0, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e001      	b.n	80022c4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c0:	f7ff fb90 	bl	80019e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	781b      	ldrb	r3, [r3, #0]
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022d8:	230f      	movs	r3, #15
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80022e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <HAL_InitTick+0x88>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02b      	beq.n	8002340 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80022e8:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <HAL_InitTick+0x8c>)
 80022ea:	681c      	ldr	r4, [r3, #0]
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <HAL_InitTick+0x88>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	0019      	movs	r1, r3
 80022f2:	23fa      	movs	r3, #250	@ 0xfa
 80022f4:	0098      	lsls	r0, r3, #2
 80022f6:	f7fd ff11 	bl	800011c <__udivsi3>
 80022fa:	0003      	movs	r3, r0
 80022fc:	0019      	movs	r1, r3
 80022fe:	0020      	movs	r0, r4
 8002300:	f7fd ff0c 	bl	800011c <__udivsi3>
 8002304:	0003      	movs	r3, r0
 8002306:	0018      	movs	r0, r3
 8002308:	f000 fdb7 	bl	8002e7a <HAL_SYSTICK_Config>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d112      	bne.n	8002336 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d80a      	bhi.n	800232c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	2301      	movs	r3, #1
 800231a:	425b      	negs	r3, r3
 800231c:	2200      	movs	r2, #0
 800231e:	0018      	movs	r0, r3
 8002320:	f000 fd86 	bl	8002e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_InitTick+0x90>)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e00d      	b.n	8002348 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800232c:	230f      	movs	r3, #15
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e008      	b.n	8002348 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002336:	230f      	movs	r3, #15
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e003      	b.n	8002348 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002340:	230f      	movs	r3, #15
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002348:	230f      	movs	r3, #15
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b005      	add	sp, #20
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	2000006c 	.word	0x2000006c
 800235c:	20000064 	.word	0x20000064
 8002360:	20000068 	.word	0x20000068

08002364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_IncTick+0x1c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	001a      	movs	r2, r3
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_IncTick+0x20>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	18d2      	adds	r2, r2, r3
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_IncTick+0x20>)
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	2000006c 	.word	0x2000006c
 8002384:	20000798 	.word	0x20000798

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b02      	ldr	r3, [pc, #8]	@ (8002398 <HAL_GetTick+0x10>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	20000798 	.word	0x20000798

0800239c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff fff0 	bl	8002388 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	d005      	beq.n	80023c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <HAL_Delay+0x44>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	001a      	movs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	f7ff ffe0 	bl	8002388 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d8f7      	bhi.n	80023c4 <HAL_Delay+0x28>
  {
  }
}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	2000006c 	.word	0x2000006c

080023e4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80023f4:	401a      	ands	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	ff3fffff 	.word	0xff3fffff

0800240c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	23c0      	movs	r3, #192	@ 0xc0
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	4013      	ands	r3, r2
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}

08002426 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	2104      	movs	r1, #4
 800243a:	400a      	ands	r2, r1
 800243c:	2107      	movs	r1, #7
 800243e:	4091      	lsls	r1, r2
 8002440:	000a      	movs	r2, r1
 8002442:	43d2      	mvns	r2, r2
 8002444:	401a      	ands	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2104      	movs	r1, #4
 800244a:	400b      	ands	r3, r1
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4099      	lsls	r1, r3
 8002450:	000b      	movs	r3, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}

08002460 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	2104      	movs	r1, #4
 8002472:	400a      	ands	r2, r1
 8002474:	2107      	movs	r1, #7
 8002476:	4091      	lsls	r1, r2
 8002478:	000a      	movs	r2, r1
 800247a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2104      	movs	r1, #4
 8002480:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002482:	40da      	lsrs	r2, r3
 8002484:	0013      	movs	r3, r2
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}

0800248e <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	211f      	movs	r1, #31
 80024a2:	400a      	ands	r2, r1
 80024a4:	210f      	movs	r1, #15
 80024a6:	4091      	lsls	r1, r2
 80024a8:	000a      	movs	r2, r1
 80024aa:	43d2      	mvns	r2, r2
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	210f      	movs	r1, #15
 80024b4:	4019      	ands	r1, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	201f      	movs	r0, #31
 80024ba:	4003      	ands	r3, r0
 80024bc:	4099      	lsls	r1, r3
 80024be:	000b      	movs	r3, r1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}

080024ce <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	0a5b      	lsrs	r3, r3, #9
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024e8:	46c0      	nop			@ (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	0252      	lsls	r2, r2, #9
 8002502:	0a52      	lsrs	r2, r2, #9
 8002504:	43d2      	mvns	r2, r2
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	0212      	lsls	r2, r2, #8
 8002528:	43d2      	mvns	r2, r2
 800252a:	401a      	ands	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	400b      	ands	r3, r1
 8002534:	4904      	ldr	r1, [pc, #16]	@ (8002548 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002536:	400b      	ands	r3, r1
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	7fffff00 	.word	0x7fffff00

0800254c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <LL_ADC_EnableInternalRegulator+0x24>)
 800255a:	4013      	ands	r3, r2
 800255c:	2280      	movs	r2, #128	@ 0x80
 800255e:	0552      	lsls	r2, r2, #21
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	6fffffe8 	.word	0x6fffffe8

08002574 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	401a      	ands	r2, r3
 8002586:	2380      	movs	r3, #128	@ 0x80
 8002588:	055b      	lsls	r3, r3, #21
 800258a:	429a      	cmp	r2, r3
 800258c:	d101      	bne.n	8002592 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002592:	2300      	movs	r3, #0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}

0800259c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <LL_ADC_IsEnabled+0x18>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <LL_ADC_IsEnabled+0x1a>
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}

080025be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2204      	movs	r2, #4
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d101      	bne.n	80025d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	231f      	movs	r3, #31
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e17e      	b.n	8002904 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff fa0b 	bl	8001a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2254      	movs	r2, #84	@ 0x54
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff ffa3 	bl	8002574 <LL_ADC_IsInternalRegulatorEnabled>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d114      	bne.n	800265c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff ff88 	bl	800254c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800263c:	4bb3      	ldr	r3, [pc, #716]	@ (800290c <HAL_ADC_Init+0x32c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	49b3      	ldr	r1, [pc, #716]	@ (8002910 <HAL_ADC_Init+0x330>)
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd6a 	bl	800011c <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800264e:	e002      	b.n	8002656 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff ff87 	bl	8002574 <LL_ADC_IsInternalRegulatorEnabled>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d10f      	bne.n	800268a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	2210      	movs	r2, #16
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	2201      	movs	r2, #1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002682:	231f      	movs	r3, #31
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff ff95 	bl	80025be <LL_ADC_REG_IsConversionOngoing>
 8002694:	0003      	movs	r3, r0
 8002696:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	2210      	movs	r2, #16
 800269e:	4013      	ands	r3, r2
 80026a0:	d000      	beq.n	80026a4 <HAL_ADC_Init+0xc4>
 80026a2:	e122      	b.n	80028ea <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d000      	beq.n	80026ac <HAL_ADC_Init+0xcc>
 80026aa:	e11e      	b.n	80028ea <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	4a98      	ldr	r2, [pc, #608]	@ (8002914 <HAL_ADC_Init+0x334>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	2202      	movs	r2, #2
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff ff6b 	bl	800259c <LL_ADC_IsEnabled>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d000      	beq.n	80026cc <HAL_ADC_Init+0xec>
 80026ca:	e0ad      	b.n	8002828 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e1b      	ldrb	r3, [r3, #24]
 80026d4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026d6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e5b      	ldrb	r3, [r3, #25]
 80026dc:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80026de:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7e9b      	ldrb	r3, [r3, #26]
 80026e4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_ADC_Init+0x116>
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	e000      	b.n	80026f8 <HAL_ADC_Init+0x118>
 80026f6:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026f8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026fe:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	da04      	bge.n	8002712 <HAL_ADC_Init+0x132>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	e001      	b.n	8002716 <HAL_ADC_Init+0x136>
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002716:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	212c      	movs	r1, #44	@ 0x2c
 800271c:	5c5b      	ldrb	r3, [r3, r1]
 800271e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002720:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	5c9b      	ldrb	r3, [r3, r2]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d115      	bne.n	800275e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7e9b      	ldrb	r3, [r3, #26]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2280      	movs	r2, #128	@ 0x80
 800273e:	0252      	lsls	r2, r2, #9
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e00b      	b.n	800275e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274a:	2220      	movs	r2, #32
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	2201      	movs	r2, #1
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800276a:	23e0      	movs	r3, #224	@ 0xe0
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002774:	4313      	orrs	r3, r2
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a65      	ldr	r2, [pc, #404]	@ (8002918 <HAL_ADC_Init+0x338>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	430a      	orrs	r2, r1
 8002790:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	0f9b      	lsrs	r3, r3, #30
 8002798:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800279e:	4313      	orrs	r3, r2
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223c      	movs	r2, #60	@ 0x3c
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d111      	bne.n	80027d4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	0f9b      	lsrs	r3, r3, #30
 80027b6:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027bc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80027c2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80027c8:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	2201      	movs	r2, #1
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	4a50      	ldr	r2, [pc, #320]	@ (800291c <HAL_ADC_Init+0x33c>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	23c0      	movs	r3, #192	@ 0xc0
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d018      	beq.n	8002828 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	429a      	cmp	r2, r3
 8002800:	d012      	beq.n	8002828 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	429a      	cmp	r2, r3
 800280c:	d00c      	beq.n	8002828 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800280e:	4b44      	ldr	r3, [pc, #272]	@ (8002920 <HAL_ADC_Init+0x340>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a44      	ldr	r2, [pc, #272]	@ (8002924 <HAL_ADC_Init+0x344>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	23f0      	movs	r3, #240	@ 0xf0
 800281e:	039b      	lsls	r3, r3, #14
 8002820:	401a      	ands	r2, r3
 8002822:	4b3f      	ldr	r3, [pc, #252]	@ (8002920 <HAL_ADC_Init+0x340>)
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002830:	001a      	movs	r2, r3
 8002832:	2100      	movs	r1, #0
 8002834:	f7ff fdf7 	bl	8002426 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	4939      	ldr	r1, [pc, #228]	@ (8002928 <HAL_ADC_Init+0x348>)
 8002842:	001a      	movs	r2, r3
 8002844:	f7ff fdef 	bl	8002426 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2110      	movs	r1, #16
 800285c:	4249      	negs	r1, r1
 800285e:	430a      	orrs	r2, r1
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28
 8002862:	e018      	b.n	8002896 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	039b      	lsls	r3, r3, #14
 800286c:	429a      	cmp	r2, r3
 800286e:	d112      	bne.n	8002896 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	3b01      	subs	r3, #1
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	221c      	movs	r2, #28
 8002880:	4013      	ands	r3, r2
 8002882:	2210      	movs	r2, #16
 8002884:	4252      	negs	r2, r2
 8002886:	409a      	lsls	r2, r3
 8002888:	0011      	movs	r1, r2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff fddf 	bl	8002460 <LL_ADC_GetSamplingTimeCommonChannels>
 80028a2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d10b      	bne.n	80028c4 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	2203      	movs	r2, #3
 80028b8:	4393      	bics	r3, r2
 80028ba:	2201      	movs	r2, #1
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028c2:	e01c      	b.n	80028fe <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	2212      	movs	r2, #18
 80028ca:	4393      	bics	r3, r2
 80028cc:	2210      	movs	r2, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2201      	movs	r2, #1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80028e0:	231f      	movs	r3, #31
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028e8:	e009      	b.n	80028fe <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	2210      	movs	r2, #16
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028f6:	231f      	movs	r3, #31
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80028fe:	231f      	movs	r3, #31
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	781b      	ldrb	r3, [r3, #0]
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b008      	add	sp, #32
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000064 	.word	0x20000064
 8002910:	00030d40 	.word	0x00030d40
 8002914:	fffffefd 	.word	0xfffffefd
 8002918:	ffde0201 	.word	0xffde0201
 800291c:	1ffffc02 	.word	0x1ffffc02
 8002920:	40012708 	.word	0x40012708
 8002924:	ffc3ffff 	.word	0xffc3ffff
 8002928:	7fffff04 	.word	0x7fffff04

0800292c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002936:	2317      	movs	r3, #23
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2254      	movs	r2, #84	@ 0x54
 8002946:	5c9b      	ldrb	r3, [r3, r2]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x24>
 800294c:	2302      	movs	r3, #2
 800294e:	e1be      	b.n	8002cce <HAL_ADC_ConfigChannel+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2254      	movs	r2, #84	@ 0x54
 8002954:	2101      	movs	r1, #1
 8002956:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff fe2e 	bl	80025be <LL_ADC_REG_IsConversionOngoing>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d000      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x3c>
 8002966:	e1a1      	b.n	8002cac <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d100      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x46>
 8002970:	e152      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	429a      	cmp	r2, r3
 800297c:	d004      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002982:	4ac2      	ldr	r2, [pc, #776]	@ (8002c8c <HAL_ADC_ConfigChannel+0x360>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d108      	bne.n	800299a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0019      	movs	r1, r3
 8002992:	0010      	movs	r0, r2
 8002994:	f7ff fd9b 	bl	80024ce <LL_ADC_REG_SetSequencerChAdd>
 8002998:	e0ed      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	211f      	movs	r1, #31
 80029a4:	400b      	ands	r3, r1
 80029a6:	210f      	movs	r1, #15
 80029a8:	4099      	lsls	r1, r3
 80029aa:	000b      	movs	r3, r1
 80029ac:	43db      	mvns	r3, r3
 80029ae:	4013      	ands	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	0a5b      	lsrs	r3, r3, #9
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x9c>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	221f      	movs	r2, #31
 80029c4:	4013      	ands	r3, r2
 80029c6:	e0bc      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	4013      	ands	r3, r2
 80029d0:	d000      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0xa8>
 80029d2:	e0b5      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x214>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2202      	movs	r2, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	d000      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0xb4>
 80029de:	e0ad      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x210>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2204      	movs	r2, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d000      	beq.n	80029ec <HAL_ADC_ConfigChannel+0xc0>
 80029ea:	e0a5      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x20c>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	4013      	ands	r3, r2
 80029f4:	d000      	beq.n	80029f8 <HAL_ADC_ConfigChannel+0xcc>
 80029f6:	e09d      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x208>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2210      	movs	r2, #16
 80029fe:	4013      	ands	r3, r2
 8002a00:	d000      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0xd8>
 8002a02:	e095      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x204>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d000      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0xe4>
 8002a0e:	e08d      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x200>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2240      	movs	r2, #64	@ 0x40
 8002a16:	4013      	ands	r3, r2
 8002a18:	d000      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0xf0>
 8002a1a:	e085      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x1fc>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2280      	movs	r2, #128	@ 0x80
 8002a22:	4013      	ands	r3, r2
 8002a24:	d000      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0xfc>
 8002a26:	e07d      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x1f8>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	d000      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x10a>
 8002a34:	e074      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x1f4>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d000      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x118>
 8002a42:	e06b      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1f0>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d000      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x126>
 8002a50:	e062      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1ec>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d000      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x134>
 8002a5e:	e059      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1e8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	@ 0x80
 8002a66:	015b      	lsls	r3, r3, #5
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d151      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x1e4>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	@ 0x80
 8002a72:	019b      	lsls	r3, r3, #6
 8002a74:	4013      	ands	r3, r2
 8002a76:	d149      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1e0>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	01db      	lsls	r3, r3, #7
 8002a80:	4013      	ands	r3, r2
 8002a82:	d141      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1dc>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d139      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1d8>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	025b      	lsls	r3, r3, #9
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d131      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1d4>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d129      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x1d0>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	02db      	lsls	r3, r3, #11
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d121      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	031b      	lsls	r3, r3, #12
 8002abc:	4013      	ands	r3, r2
 8002abe:	d119      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1c8>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	035b      	lsls	r3, r3, #13
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d111      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x1c4>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	039b      	lsls	r3, r3, #14
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d109      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x1c0>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	03db      	lsls	r3, r3, #15
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d001      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x1bc>
 8002ae4:	2316      	movs	r3, #22
 8002ae6:	e02c      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e02a      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002aec:	2315      	movs	r3, #21
 8002aee:	e028      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002af0:	2314      	movs	r3, #20
 8002af2:	e026      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002af4:	2313      	movs	r3, #19
 8002af6:	e024      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002af8:	2312      	movs	r3, #18
 8002afa:	e022      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002afc:	2311      	movs	r3, #17
 8002afe:	e020      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b00:	2310      	movs	r3, #16
 8002b02:	e01e      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b04:	230f      	movs	r3, #15
 8002b06:	e01c      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b08:	230e      	movs	r3, #14
 8002b0a:	e01a      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b0c:	230d      	movs	r3, #13
 8002b0e:	e018      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b10:	230c      	movs	r3, #12
 8002b12:	e016      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b14:	230b      	movs	r3, #11
 8002b16:	e014      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b18:	230a      	movs	r3, #10
 8002b1a:	e012      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b1c:	2309      	movs	r3, #9
 8002b1e:	e010      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b20:	2308      	movs	r3, #8
 8002b22:	e00e      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b24:	2307      	movs	r3, #7
 8002b26:	e00c      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b28:	2306      	movs	r3, #6
 8002b2a:	e00a      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b2c:	2305      	movs	r3, #5
 8002b2e:	e008      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b30:	2304      	movs	r3, #4
 8002b32:	e006      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b34:	2303      	movs	r3, #3
 8002b36:	e004      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e002      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x216>
 8002b40:	2300      	movs	r3, #0
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	6852      	ldr	r2, [r2, #4]
 8002b46:	201f      	movs	r0, #31
 8002b48:	4002      	ands	r2, r0
 8002b4a:	4093      	lsls	r3, r2
 8002b4c:	000a      	movs	r2, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d808      	bhi.n	8002b76 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	001a      	movs	r2, r3
 8002b72:	f7ff fc8c 	bl	800248e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	001a      	movs	r2, r3
 8002b84:	f7ff fcc6 	bl	8002514 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db00      	blt.n	8002b92 <HAL_ADC_ConfigChannel+0x266>
 8002b90:	e096      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b92:	4b3f      	ldr	r3, [pc, #252]	@ (8002c90 <HAL_ADC_ConfigChannel+0x364>)
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7ff fc39 	bl	800240c <LL_ADC_GetCommonPathInternalCh>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8002c94 <HAL_ADC_ConfigChannel+0x368>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d123      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bb0:	d11e      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	0412      	lsls	r2, r2, #16
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	4a35      	ldr	r2, [pc, #212]	@ (8002c90 <HAL_ADC_ConfigChannel+0x364>)
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	0010      	movs	r0, r2
 8002bc0:	f7ff fc10 	bl	80023e4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002bc4:	4b34      	ldr	r3, [pc, #208]	@ (8002c98 <HAL_ADC_ConfigChannel+0x36c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4934      	ldr	r1, [pc, #208]	@ (8002c9c <HAL_ADC_ConfigChannel+0x370>)
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7fd faa6 	bl	800011c <__udivsi3>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bee:	e067      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x374>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d162      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	03db      	lsls	r3, r3, #15
 8002c00:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c02:	d15d      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2280      	movs	r2, #128	@ 0x80
 8002c08:	03d2      	lsls	r2, r2, #15
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	4a20      	ldr	r2, [pc, #128]	@ (8002c90 <HAL_ADC_ConfigChannel+0x364>)
 8002c0e:	0019      	movs	r1, r3
 8002c10:	0010      	movs	r0, r2
 8002c12:	f7ff fbe7 	bl	80023e4 <LL_ADC_SetCommonPathInternalCh>
 8002c16:	e053      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d004      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c28:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_ADC_ConfigChannel+0x360>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d107      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f7ff fc59 	bl	80024f0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da3c      	bge.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <HAL_ADC_ConfigChannel+0x364>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fbdf 	bl	800240c <LL_ADC_GetCommonPathInternalCh>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	@ (8002c94 <HAL_ADC_ConfigChannel+0x368>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d108      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x378>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	4a0b      	ldr	r2, [pc, #44]	@ (8002c90 <HAL_ADC_ConfigChannel+0x364>)
 8002c64:	0019      	movs	r1, r3
 8002c66:	0010      	movs	r0, r2
 8002c68:	f7ff fbbc 	bl	80023e4 <LL_ADC_SetCommonPathInternalCh>
 8002c6c:	e028      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x374>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d123      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x37c>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <HAL_ADC_ConfigChannel+0x364>)
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f7ff fbae 	bl	80023e4 <LL_ADC_SetCommonPathInternalCh>
 8002c88:	e01a      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x394>
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	80000004 	.word	0x80000004
 8002c90:	40012708 	.word	0x40012708
 8002c94:	a4000200 	.word	0xa4000200
 8002c98:	20000064 	.word	0x20000064
 8002c9c:	00030d40 	.word	0x00030d40
 8002ca0:	a8000400 	.word	0xa8000400
 8002ca4:	ff7fffff 	.word	0xff7fffff
 8002ca8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cb8:	2317      	movs	r3, #23
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2254      	movs	r2, #84	@ 0x54
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002cc8:	2317      	movs	r3, #23
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b006      	add	sp, #24
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			@ (mov r8, r8)

08002cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	0002      	movs	r2, r0
 8002ce0:	1dfb      	adds	r3, r7, #7
 8002ce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cea:	d809      	bhi.n	8002d00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cec:	1dfb      	adds	r3, r7, #7
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	231f      	movs	r3, #31
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <__NVIC_EnableIRQ+0x30>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4091      	lsls	r1, r2
 8002cfc:	000a      	movs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	0002      	movs	r2, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	1dfb      	adds	r3, r7, #7
 8002d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d20:	d828      	bhi.n	8002d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d22:	4a2f      	ldr	r2, [pc, #188]	@ (8002de0 <__NVIC_SetPriority+0xd4>)
 8002d24:	1dfb      	adds	r3, r7, #7
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	33c0      	adds	r3, #192	@ 0xc0
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	589b      	ldr	r3, [r3, r2]
 8002d32:	1dfa      	adds	r2, r7, #7
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	0011      	movs	r1, r2
 8002d38:	2203      	movs	r2, #3
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	00d2      	lsls	r2, r2, #3
 8002d3e:	21ff      	movs	r1, #255	@ 0xff
 8002d40:	4091      	lsls	r1, r2
 8002d42:	000a      	movs	r2, r1
 8002d44:	43d2      	mvns	r2, r2
 8002d46:	401a      	ands	r2, r3
 8002d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	22ff      	movs	r2, #255	@ 0xff
 8002d50:	401a      	ands	r2, r3
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	0018      	movs	r0, r3
 8002d58:	2303      	movs	r3, #3
 8002d5a:	4003      	ands	r3, r0
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d60:	481f      	ldr	r0, [pc, #124]	@ (8002de0 <__NVIC_SetPriority+0xd4>)
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	33c0      	adds	r3, #192	@ 0xc0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d72:	e031      	b.n	8002dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d74:	4a1b      	ldr	r2, [pc, #108]	@ (8002de4 <__NVIC_SetPriority+0xd8>)
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	230f      	movs	r3, #15
 8002d7e:	400b      	ands	r3, r1
 8002d80:	3b08      	subs	r3, #8
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3306      	adds	r3, #6
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1dfa      	adds	r2, r7, #7
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	0011      	movs	r1, r2
 8002d94:	2203      	movs	r2, #3
 8002d96:	400a      	ands	r2, r1
 8002d98:	00d2      	lsls	r2, r2, #3
 8002d9a:	21ff      	movs	r1, #255	@ 0xff
 8002d9c:	4091      	lsls	r1, r2
 8002d9e:	000a      	movs	r2, r1
 8002da0:	43d2      	mvns	r2, r2
 8002da2:	401a      	ands	r2, r3
 8002da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	22ff      	movs	r2, #255	@ 0xff
 8002dac:	401a      	ands	r2, r3
 8002dae:	1dfb      	adds	r3, r7, #7
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	0018      	movs	r0, r3
 8002db4:	2303      	movs	r3, #3
 8002db6:	4003      	ands	r3, r0
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbc:	4809      	ldr	r0, [pc, #36]	@ (8002de4 <__NVIC_SetPriority+0xd8>)
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	001c      	movs	r4, r3
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	4023      	ands	r3, r4
 8002dc8:	3b08      	subs	r3, #8
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	3306      	adds	r3, #6
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	18c3      	adds	r3, r0, r3
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	601a      	str	r2, [r3, #0]
}
 8002dd8:	46c0      	nop			@ (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b003      	add	sp, #12
 8002dde:	bd90      	pop	{r4, r7, pc}
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	045b      	lsls	r3, r3, #17
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d301      	bcc.n	8002e00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e010      	b.n	8002e22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <SysTick_Config+0x44>)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	3a01      	subs	r2, #1
 8002e06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e08:	2301      	movs	r3, #1
 8002e0a:	425b      	negs	r3, r3
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff ff7c 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <SysTick_Config+0x44>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <SysTick_Config+0x44>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b002      	add	sp, #8
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	1c02      	adds	r2, r0, #0
 8002e40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b004      	add	sp, #16
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	0002      	movs	r2, r0
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e66:	1dfb      	adds	r3, r7, #7
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff ff33 	bl	8002cd8 <__NVIC_EnableIRQ>
}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff ffaf 	bl	8002de8 <SysTick_Config>
 8002e8a:	0003      	movs	r3, r0
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e077      	b.n	8002f96 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa0 <HAL_DMA_Init+0x10c>)
 8002eac:	4694      	mov	ip, r2
 8002eae:	4463      	add	r3, ip
 8002eb0:	2114      	movs	r1, #20
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7fd f932 	bl	800011c <__udivsi3>
 8002eb8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002eba:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2225      	movs	r2, #37	@ 0x25
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4934      	ldr	r1, [pc, #208]	@ (8002fa4 <HAL_DMA_Init+0x110>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 faab 	bl	800346c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	01db      	lsls	r3, r3, #7
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d102      	bne.n	8002f28 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	21ff      	movs	r1, #255	@ 0xff
 8002f32:	400a      	ands	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d011      	beq.n	8002f6c <HAL_DMA_Init+0xd8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d80d      	bhi.n	8002f6c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 fab6 	bl	80034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e008      	b.n	8002f7e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2225      	movs	r2, #37	@ 0x25
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	@ 0x24
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	bffdfff8 	.word	0xbffdfff8
 8002fa4:	ffff800f 	.word	0xffff800f

08002fa8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2317      	movs	r3, #23
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2224      	movs	r2, #36	@ 0x24
 8002fc2:	5c9b      	ldrb	r3, [r3, r2]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_Start_IT+0x24>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e070      	b.n	80030ae <HAL_DMA_Start_IT+0x106>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2224      	movs	r2, #36	@ 0x24
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2225      	movs	r2, #37	@ 0x25
 8002fd8:	5c9b      	ldrb	r3, [r3, r2]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d157      	bne.n	8003090 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2225      	movs	r2, #37	@ 0x25
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f9f1 	bl	80033ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	210e      	movs	r1, #14
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e00f      	b.n	8003044 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2104      	movs	r1, #4
 8003030:	438a      	bics	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	210a      	movs	r1, #10
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	025b      	lsls	r3, r3, #9
 800304e:	4013      	ands	r3, r2
 8003050:	d008      	beq.n	8003064 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	2180      	movs	r1, #128	@ 0x80
 800305e:	0049      	lsls	r1, r1, #1
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003076:	2180      	movs	r1, #128	@ 0x80
 8003078:	0049      	lsls	r1, r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e007      	b.n	80030a0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	2100      	movs	r1, #0
 8003096:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003098:	2317      	movs	r3, #23
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2202      	movs	r2, #2
 800309e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2224      	movs	r2, #36	@ 0x24
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

  return status;
 80030a8:	2317      	movs	r3, #23
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	781b      	ldrb	r3, [r3, #0]
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b006      	add	sp, #24
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e050      	b.n	800316c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2225      	movs	r2, #37	@ 0x25
 80030ce:	5c9b      	ldrb	r3, [r3, r2]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d008      	beq.n	80030e8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2204      	movs	r2, #4
 80030da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	@ 0x24
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e041      	b.n	800316c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	210e      	movs	r1, #14
 80030f4:	438a      	bics	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	491c      	ldr	r1, [pc, #112]	@ (8003174 <HAL_DMA_Abort+0xbc>)
 8003104:	400a      	ands	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2101      	movs	r1, #1
 8003114:	438a      	bics	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003118:	4b17      	ldr	r3, [pc, #92]	@ (8003178 <HAL_DMA_Abort+0xc0>)
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	221c      	movs	r2, #28
 8003122:	4013      	ands	r3, r2
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	4b13      	ldr	r3, [pc, #76]	@ (8003178 <HAL_DMA_Abort+0xc0>)
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003136:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314a:	490a      	ldr	r1, [pc, #40]	@ (8003174 <HAL_DMA_Abort+0xbc>)
 800314c:	400a      	ands	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003158:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2225      	movs	r2, #37	@ 0x25
 800315e:	2101      	movs	r1, #1
 8003160:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2224      	movs	r2, #36	@ 0x24
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}
 8003174:	fffffeff 	.word	0xfffffeff
 8003178:	40020000 	.word	0x40020000

0800317c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	230f      	movs	r3, #15
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	@ 0x24
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	@ 0x24
 8003198:	5c9b      	ldrb	r3, [r3, r2]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_DMA_Abort_IT+0x26>
 800319e:	2302      	movs	r3, #2
 80031a0:	e05e      	b.n	8003260 <HAL_DMA_Abort_IT+0xe4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2224      	movs	r2, #36	@ 0x24
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2225      	movs	r2, #37	@ 0x25
 80031ae:	5c9b      	ldrb	r3, [r3, r2]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d007      	beq.n	80031c6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80031bc:	230f      	movs	r3, #15
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e049      	b.n	800325a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	210e      	movs	r1, #14
 80031d2:	438a      	bics	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	438a      	bics	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	491d      	ldr	r1, [pc, #116]	@ (8003268 <HAL_DMA_Abort_IT+0xec>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80031f6:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_DMA_Abort_IT+0xf0>)
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	221c      	movs	r2, #28
 8003200:	4013      	ands	r3, r2
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	4b19      	ldr	r3, [pc, #100]	@ (800326c <HAL_DMA_Abort_IT+0xf0>)
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003214:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003228:	490f      	ldr	r1, [pc, #60]	@ (8003268 <HAL_DMA_Abort_IT+0xec>)
 800322a:	400a      	ands	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003236:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2225      	movs	r2, #37	@ 0x25
 800323c:	2101      	movs	r1, #1
 800323e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	@ 0x24
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	0010      	movs	r0, r2
 8003258:	4798      	blx	r3
    }
  }
  return status;
 800325a:	230f      	movs	r3, #15
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bd80      	pop	{r7, pc}
 8003268:	fffffeff 	.word	0xfffffeff
 800326c:	40020000 	.word	0x40020000

08003270 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003278:	4b55      	ldr	r3, [pc, #340]	@ (80033d0 <HAL_DMA_IRQHandler+0x160>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	221c      	movs	r2, #28
 800328c:	4013      	ands	r3, r2
 800328e:	2204      	movs	r2, #4
 8003290:	409a      	lsls	r2, r3
 8003292:	0013      	movs	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4013      	ands	r3, r2
 8003298:	d027      	beq.n	80032ea <HAL_DMA_IRQHandler+0x7a>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2204      	movs	r2, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	d023      	beq.n	80032ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2220      	movs	r2, #32
 80032aa:	4013      	ands	r3, r2
 80032ac:	d107      	bne.n	80032be <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2104      	movs	r1, #4
 80032ba:	438a      	bics	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80032be:	4b44      	ldr	r3, [pc, #272]	@ (80033d0 <HAL_DMA_IRQHandler+0x160>)
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	221c      	movs	r2, #28
 80032c8:	4013      	ands	r3, r2
 80032ca:	2204      	movs	r2, #4
 80032cc:	409a      	lsls	r2, r3
 80032ce:	4b40      	ldr	r3, [pc, #256]	@ (80033d0 <HAL_DMA_IRQHandler+0x160>)
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d100      	bne.n	80032de <HAL_DMA_IRQHandler+0x6e>
 80032dc:	e073      	b.n	80033c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	0010      	movs	r0, r2
 80032e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032e8:	e06d      	b.n	80033c6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	221c      	movs	r2, #28
 80032f0:	4013      	ands	r3, r2
 80032f2:	2202      	movs	r2, #2
 80032f4:	409a      	lsls	r2, r3
 80032f6:	0013      	movs	r3, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	d02e      	beq.n	800335c <HAL_DMA_IRQHandler+0xec>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2202      	movs	r2, #2
 8003302:	4013      	ands	r3, r2
 8003304:	d02a      	beq.n	800335c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2220      	movs	r2, #32
 800330e:	4013      	ands	r3, r2
 8003310:	d10b      	bne.n	800332a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	210a      	movs	r1, #10
 800331e:	438a      	bics	r2, r1
 8003320:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2225      	movs	r2, #37	@ 0x25
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800332a:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <HAL_DMA_IRQHandler+0x160>)
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	221c      	movs	r2, #28
 8003334:	4013      	ands	r3, r2
 8003336:	2202      	movs	r2, #2
 8003338:	409a      	lsls	r2, r3
 800333a:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <HAL_DMA_IRQHandler+0x160>)
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2224      	movs	r2, #36	@ 0x24
 8003344:	2100      	movs	r1, #0
 8003346:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d03a      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	0010      	movs	r0, r2
 8003358:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800335a:	e034      	b.n	80033c6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	221c      	movs	r2, #28
 8003362:	4013      	ands	r3, r2
 8003364:	2208      	movs	r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	0013      	movs	r3, r2
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4013      	ands	r3, r2
 800336e:	d02b      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x158>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2208      	movs	r2, #8
 8003374:	4013      	ands	r3, r2
 8003376:	d027      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	210e      	movs	r1, #14
 8003384:	438a      	bics	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003388:	4b11      	ldr	r3, [pc, #68]	@ (80033d0 <HAL_DMA_IRQHandler+0x160>)
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	221c      	movs	r2, #28
 8003392:	4013      	ands	r3, r2
 8003394:	2201      	movs	r2, #1
 8003396:	409a      	lsls	r2, r3
 8003398:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <HAL_DMA_IRQHandler+0x160>)
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2225      	movs	r2, #37	@ 0x25
 80033a8:	2101      	movs	r1, #1
 80033aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	@ 0x24
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	0010      	movs	r0, r2
 80033c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	46c0      	nop			@ (mov r8, r8)
}
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40020000 	.word	0x40020000

080033d4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2225      	movs	r2, #37	@ 0x25
 80033e0:	5c9b      	ldrb	r3, [r3, r2]
 80033e2:	b2db      	uxtb	r3, r3
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}

080033ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003402:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003416:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <DMA_SetConfig+0x7c>)
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	221c      	movs	r2, #28
 8003420:	4013      	ands	r3, r2
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <DMA_SetConfig+0x7c>)
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b10      	cmp	r3, #16
 800343a:	d108      	bne.n	800344e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800344c:	e007      	b.n	800345e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	60da      	str	r2, [r3, #12]
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	40020000 	.word	0x40020000

0800346c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	001a      	movs	r2, r3
 800347a:	23ff      	movs	r3, #255	@ 0xff
 800347c:	4013      	ands	r3, r2
 800347e:	3b08      	subs	r3, #8
 8003480:	2114      	movs	r1, #20
 8003482:	0018      	movs	r0, r3
 8003484:	f7fc fe4a 	bl	800011c <__udivsi3>
 8003488:	0003      	movs	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003494:	4694      	mov	ip, r2
 8003496:	4463      	add	r3, ip
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	001a      	movs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a07      	ldr	r2, [pc, #28]	@ (80034c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80034a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	221c      	movs	r2, #28
 80034aa:	4013      	ands	r3, r2
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	10008200 	.word	0x10008200
 80034c0:	40020880 	.word	0x40020880

080034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	22ff      	movs	r2, #255	@ 0xff
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034da:	4694      	mov	ip, r2
 80034dc:	4463      	add	r3, ip
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	001a      	movs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	4013      	ands	r3, r2
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80034fc:	46c0      	nop			@ (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	1000823f 	.word	0x1000823f
 8003508:	40020940 	.word	0x40020940

0800350c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800351a:	e153      	b.n	80037c4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4091      	lsls	r1, r2
 8003526:	000a      	movs	r2, r1
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_GPIO_Init+0x28>
 8003532:	e144      	b.n	80037be <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x38>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b12      	cmp	r3, #18
 8003542:	d125      	bne.n	8003590 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	08da      	lsrs	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3208      	adds	r2, #8
 800354c:	0092      	lsls	r2, r2, #2
 800354e:	58d3      	ldr	r3, [r2, r3]
 8003550:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2207      	movs	r2, #7
 8003556:	4013      	ands	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	220f      	movs	r2, #15
 800355c:	409a      	lsls	r2, r3
 800355e:	0013      	movs	r3, r2
 8003560:	43da      	mvns	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	4013      	ands	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	220f      	movs	r2, #15
 800356e:	401a      	ands	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2107      	movs	r1, #7
 8003574:	400b      	ands	r3, r1
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	409a      	lsls	r2, r3
 800357a:	0013      	movs	r3, r2
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	08da      	lsrs	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3208      	adds	r2, #8
 800358a:	0092      	lsls	r2, r2, #2
 800358c:	6979      	ldr	r1, [r7, #20]
 800358e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	409a      	lsls	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	43da      	mvns	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4013      	ands	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2203      	movs	r2, #3
 80035ae:	401a      	ands	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	409a      	lsls	r2, r3
 80035b6:	0013      	movs	r3, r2
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d00b      	beq.n	80035e4 <HAL_GPIO_Init+0xd8>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d007      	beq.n	80035e4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035d8:	2b11      	cmp	r3, #17
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b12      	cmp	r3, #18
 80035e2:	d130      	bne.n	8003646 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	409a      	lsls	r2, r3
 80035f2:	0013      	movs	r3, r2
 80035f4:	43da      	mvns	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	409a      	lsls	r2, r3
 8003606:	0013      	movs	r3, r2
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800361a:	2201      	movs	r2, #1
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	409a      	lsls	r2, r3
 8003620:	0013      	movs	r3, r2
 8003622:	43da      	mvns	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4013      	ands	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	2201      	movs	r2, #1
 8003632:	401a      	ands	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d017      	beq.n	800367e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	409a      	lsls	r2, r3
 800365c:	0013      	movs	r3, r2
 800365e:	43da      	mvns	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4013      	ands	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	0013      	movs	r3, r2
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	055b      	lsls	r3, r3, #21
 8003686:	4013      	ands	r3, r2
 8003688:	d100      	bne.n	800368c <HAL_GPIO_Init+0x180>
 800368a:	e098      	b.n	80037be <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800368c:	4a53      	ldr	r2, [pc, #332]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3318      	adds	r3, #24
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	589b      	ldr	r3, [r3, r2]
 8003698:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2203      	movs	r2, #3
 800369e:	4013      	ands	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	220f      	movs	r2, #15
 80036a4:	409a      	lsls	r2, r3
 80036a6:	0013      	movs	r3, r2
 80036a8:	43da      	mvns	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	4013      	ands	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	23a0      	movs	r3, #160	@ 0xa0
 80036b4:	05db      	lsls	r3, r3, #23
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d019      	beq.n	80036ee <HAL_GPIO_Init+0x1e2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a48      	ldr	r2, [pc, #288]	@ (80037e0 <HAL_GPIO_Init+0x2d4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_GPIO_Init+0x1de>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a47      	ldr	r2, [pc, #284]	@ (80037e4 <HAL_GPIO_Init+0x2d8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00d      	beq.n	80036e6 <HAL_GPIO_Init+0x1da>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a46      	ldr	r2, [pc, #280]	@ (80037e8 <HAL_GPIO_Init+0x2dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0x1d6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a45      	ldr	r2, [pc, #276]	@ (80037ec <HAL_GPIO_Init+0x2e0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_GPIO_Init+0x1d2>
 80036da:	2305      	movs	r3, #5
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036de:	2306      	movs	r3, #6
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036ee:	2300      	movs	r3, #0
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	2103      	movs	r1, #3
 80036f4:	400a      	ands	r2, r1
 80036f6:	00d2      	lsls	r2, r2, #3
 80036f8:	4093      	lsls	r3, r2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003700:	4936      	ldr	r1, [pc, #216]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3318      	adds	r3, #24
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800370e:	4a33      	ldr	r2, [pc, #204]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 8003710:	2380      	movs	r3, #128	@ 0x80
 8003712:	58d3      	ldr	r3, [r2, r3]
 8003714:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43da      	mvns	r2, r3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	4013      	ands	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	025b      	lsls	r3, r3, #9
 8003728:	4013      	ands	r3, r2
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003734:	4929      	ldr	r1, [pc, #164]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800373c:	4a27      	ldr	r2, [pc, #156]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 800373e:	2384      	movs	r3, #132	@ 0x84
 8003740:	58d3      	ldr	r3, [r2, r3]
 8003742:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43da      	mvns	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4013      	ands	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	4013      	ands	r3, r2
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003762:	491e      	ldr	r1, [pc, #120]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 8003764:	2284      	movs	r2, #132	@ 0x84
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800376a:	4b1c      	ldr	r3, [pc, #112]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43da      	mvns	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	4013      	ands	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	035b      	lsls	r3, r3, #13
 8003782:	4013      	ands	r3, r2
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800378e:	4b13      	ldr	r3, [pc, #76]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43da      	mvns	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	4013      	ands	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	039b      	lsls	r3, r3, #14
 80037ac:	4013      	ands	r3, r2
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <HAL_GPIO_Init+0x2d0>)
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	40da      	lsrs	r2, r3
 80037cc:	1e13      	subs	r3, r2, #0
 80037ce:	d000      	beq.n	80037d2 <HAL_GPIO_Init+0x2c6>
 80037d0:	e6a4      	b.n	800351c <HAL_GPIO_Init+0x10>
  }
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	46c0      	nop			@ (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b006      	add	sp, #24
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021800 	.word	0x40021800
 80037e0:	50000400 	.word	0x50000400
 80037e4:	50000800 	.word	0x50000800
 80037e8:	50000c00 	.word	0x50000c00
 80037ec:	50001400 	.word	0x50001400

080037f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	0008      	movs	r0, r1
 80037fa:	0011      	movs	r1, r2
 80037fc:	1cbb      	adds	r3, r7, #2
 80037fe:	1c02      	adds	r2, r0, #0
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	1c7b      	adds	r3, r7, #1
 8003804:	1c0a      	adds	r2, r1, #0
 8003806:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003808:	1c7b      	adds	r3, r7, #1
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003810:	1cbb      	adds	r3, r7, #2
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003818:	e003      	b.n	8003822 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381a:	1cbb      	adds	r3, r7, #2
 800381c:	881a      	ldrh	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e08f      	b.n	800395e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2241      	movs	r2, #65	@ 0x41
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2240      	movs	r2, #64	@ 0x40
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	0018      	movs	r0, r3
 8003856:	f7fe f975 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2241      	movs	r2, #65	@ 0x41
 800385e:	2124      	movs	r1, #36	@ 0x24
 8003860:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2101      	movs	r1, #1
 800386e:	438a      	bics	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	493b      	ldr	r1, [pc, #236]	@ (8003968 <HAL_I2C_Init+0x13c>)
 800387c:	400a      	ands	r2, r1
 800387e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4938      	ldr	r1, [pc, #224]	@ (800396c <HAL_I2C_Init+0x140>)
 800388c:	400a      	ands	r2, r1
 800388e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d108      	bne.n	80038aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2180      	movs	r1, #128	@ 0x80
 80038a2:	0209      	lsls	r1, r1, #8
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e007      	b.n	80038ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2184      	movs	r1, #132	@ 0x84
 80038b4:	0209      	lsls	r1, r1, #8
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d109      	bne.n	80038d6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2180      	movs	r1, #128	@ 0x80
 80038ce:	0109      	lsls	r1, r1, #4
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	e007      	b.n	80038e6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4923      	ldr	r1, [pc, #140]	@ (8003970 <HAL_I2C_Init+0x144>)
 80038e2:	400a      	ands	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4920      	ldr	r1, [pc, #128]	@ (8003974 <HAL_I2C_Init+0x148>)
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	491a      	ldr	r1, [pc, #104]	@ (800396c <HAL_I2C_Init+0x140>)
 8003902:	400a      	ands	r2, r1
 8003904:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
 8003910:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1a      	ldr	r2, [r3, #32]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2241      	movs	r2, #65	@ 0x41
 800394a:	2120      	movs	r1, #32
 800394c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2242      	movs	r2, #66	@ 0x42
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	f0ffffff 	.word	0xf0ffffff
 800396c:	ffff7fff 	.word	0xffff7fff
 8003970:	fffff7ff 	.word	0xfffff7ff
 8003974:	02008000 	.word	0x02008000

08003978 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b089      	sub	sp, #36	@ 0x24
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	0008      	movs	r0, r1
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	0019      	movs	r1, r3
 8003986:	230a      	movs	r3, #10
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	1c02      	adds	r2, r0, #0
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	2308      	movs	r3, #8
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	1c0a      	adds	r2, r1, #0
 8003994:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2241      	movs	r2, #65	@ 0x41
 800399a:	5c9b      	ldrb	r3, [r3, r2]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d000      	beq.n	80039a4 <HAL_I2C_Master_Transmit+0x2c>
 80039a2:	e10a      	b.n	8003bba <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2240      	movs	r2, #64	@ 0x40
 80039a8:	5c9b      	ldrb	r3, [r3, r2]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_Master_Transmit+0x3a>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e104      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x244>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2240      	movs	r2, #64	@ 0x40
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039ba:	f7fe fce5 	bl	8002388 <HAL_GetTick>
 80039be:	0003      	movs	r3, r0
 80039c0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039c2:	2380      	movs	r3, #128	@ 0x80
 80039c4:	0219      	lsls	r1, r3, #8
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2319      	movs	r3, #25
 80039ce:	2201      	movs	r2, #1
 80039d0:	f001 f81a 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0ef      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2241      	movs	r2, #65	@ 0x41
 80039e0:	2121      	movs	r1, #33	@ 0x21
 80039e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2242      	movs	r2, #66	@ 0x42
 80039e8:	2110      	movs	r1, #16
 80039ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2208      	movs	r2, #8
 80039fc:	18ba      	adds	r2, r7, r2
 80039fe:	8812      	ldrh	r2, [r2, #0]
 8003a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2bff      	cmp	r3, #255	@ 0xff
 8003a10:	d906      	bls.n	8003a20 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	22ff      	movs	r2, #255	@ 0xff
 8003a16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	045b      	lsls	r3, r3, #17
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e007      	b.n	8003a30 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	049b      	lsls	r3, r3, #18
 8003a2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d027      	beq.n	8003a88 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	697c      	ldr	r4, [r7, #20]
 8003a74:	230a      	movs	r3, #10
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	8819      	ldrh	r1, [r3, #0]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	4b51      	ldr	r3, [pc, #324]	@ (8003bc4 <HAL_I2C_Master_Transmit+0x24c>)
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	0023      	movs	r3, r4
 8003a82:	f001 fa39 	bl	8004ef8 <I2C_TransferConfig>
 8003a86:	e06f      	b.n	8003b68 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	697c      	ldr	r4, [r7, #20]
 8003a90:	230a      	movs	r3, #10
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	8819      	ldrh	r1, [r3, #0]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc4 <HAL_I2C_Master_Transmit+0x24c>)
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	0023      	movs	r3, r4
 8003a9e:	f001 fa2b 	bl	8004ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003aa2:	e061      	b.n	8003b68 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f001 f804 	bl	8004ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e081      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d03a      	beq.n	8003b68 <HAL_I2C_Master_Transmit+0x1f0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d136      	bne.n	8003b68 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	0013      	movs	r3, r2
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	f000 ff7e 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	1e03      	subs	r3, r0, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e053      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2bff      	cmp	r3, #255	@ 0xff
 8003b1c:	d911      	bls.n	8003b42 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	22ff      	movs	r2, #255	@ 0xff
 8003b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	045c      	lsls	r4, r3, #17
 8003b2e:	230a      	movs	r3, #10
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	8819      	ldrh	r1, [r3, #0]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	0023      	movs	r3, r4
 8003b3c:	f001 f9dc 	bl	8004ef8 <I2C_TransferConfig>
 8003b40:	e012      	b.n	8003b68 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	049c      	lsls	r4, r3, #18
 8003b56:	230a      	movs	r3, #10
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	8819      	ldrh	r1, [r3, #0]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0023      	movs	r3, r4
 8003b64:	f001 f9c8 	bl	8004ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d198      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 ffe3 	bl	8004b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e01a      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	490b      	ldr	r1, [pc, #44]	@ (8003bc8 <HAL_I2C_Master_Transmit+0x250>)
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2241      	movs	r2, #65	@ 0x41
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2242      	movs	r2, #66	@ 0x42
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2240      	movs	r2, #64	@ 0x40
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b007      	add	sp, #28
 8003bc2:	bd90      	pop	{r4, r7, pc}
 8003bc4:	80002000 	.word	0x80002000
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b089      	sub	sp, #36	@ 0x24
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	0008      	movs	r0, r1
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	0019      	movs	r1, r3
 8003bda:	230a      	movs	r3, #10
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	1c02      	adds	r2, r0, #0
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	2308      	movs	r3, #8
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	1c0a      	adds	r2, r1, #0
 8003be8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2241      	movs	r2, #65	@ 0x41
 8003bee:	5c9b      	ldrb	r3, [r3, r2]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d000      	beq.n	8003bf8 <HAL_I2C_Master_Receive+0x2c>
 8003bf6:	e0e8      	b.n	8003dca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2240      	movs	r2, #64	@ 0x40
 8003bfc:	5c9b      	ldrb	r3, [r3, r2]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_Master_Receive+0x3a>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0e2      	b.n	8003dcc <HAL_I2C_Master_Receive+0x200>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2240      	movs	r2, #64	@ 0x40
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fe fbbb 	bl	8002388 <HAL_GetTick>
 8003c12:	0003      	movs	r3, r0
 8003c14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	0219      	lsls	r1, r3, #8
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2319      	movs	r3, #25
 8003c22:	2201      	movs	r2, #1
 8003c24:	f000 fef0 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8003c28:	1e03      	subs	r3, r0, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cd      	b.n	8003dcc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2241      	movs	r2, #65	@ 0x41
 8003c34:	2122      	movs	r1, #34	@ 0x22
 8003c36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2242      	movs	r2, #66	@ 0x42
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2208      	movs	r2, #8
 8003c50:	18ba      	adds	r2, r7, r2
 8003c52:	8812      	ldrh	r2, [r2, #0]
 8003c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2bff      	cmp	r3, #255	@ 0xff
 8003c64:	d911      	bls.n	8003c8a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	22ff      	movs	r2, #255	@ 0xff
 8003c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	2380      	movs	r3, #128	@ 0x80
 8003c74:	045c      	lsls	r4, r3, #17
 8003c76:	230a      	movs	r3, #10
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	8819      	ldrh	r1, [r3, #0]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	4b55      	ldr	r3, [pc, #340]	@ (8003dd4 <HAL_I2C_Master_Receive+0x208>)
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	0023      	movs	r3, r4
 8003c84:	f001 f938 	bl	8004ef8 <I2C_TransferConfig>
 8003c88:	e076      	b.n	8003d78 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	2380      	movs	r3, #128	@ 0x80
 8003c9c:	049c      	lsls	r4, r3, #18
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	8819      	ldrh	r1, [r3, #0]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd4 <HAL_I2C_Master_Receive+0x208>)
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	0023      	movs	r3, r4
 8003cac:	f001 f924 	bl	8004ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003cb0:	e062      	b.n	8003d78 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 ff87 	bl	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cbe:	1e03      	subs	r3, r0, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e082      	b.n	8003dcc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03a      	beq.n	8003d78 <HAL_I2C_Master_Receive+0x1ac>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d136      	bne.n	8003d78 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	0013      	movs	r3, r2
 8003d14:	2200      	movs	r2, #0
 8003d16:	2180      	movs	r1, #128	@ 0x80
 8003d18:	f000 fe76 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e053      	b.n	8003dcc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2bff      	cmp	r3, #255	@ 0xff
 8003d2c:	d911      	bls.n	8003d52 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	22ff      	movs	r2, #255	@ 0xff
 8003d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	045c      	lsls	r4, r3, #17
 8003d3e:	230a      	movs	r3, #10
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	8819      	ldrh	r1, [r3, #0]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	0023      	movs	r3, r4
 8003d4c:	f001 f8d4 	bl	8004ef8 <I2C_TransferConfig>
 8003d50:	e012      	b.n	8003d78 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	049c      	lsls	r4, r3, #18
 8003d66:	230a      	movs	r3, #10
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	8819      	ldrh	r1, [r3, #0]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	0023      	movs	r3, r4
 8003d74:	f001 f8c0 	bl	8004ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d197      	bne.n	8003cb2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 fedb 	bl	8004b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e01a      	b.n	8003dcc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	490b      	ldr	r1, [pc, #44]	@ (8003dd8 <HAL_I2C_Master_Receive+0x20c>)
 8003daa:	400a      	ands	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2241      	movs	r2, #65	@ 0x41
 8003db2:	2120      	movs	r1, #32
 8003db4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2242      	movs	r2, #66	@ 0x42
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2240      	movs	r2, #64	@ 0x40
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b007      	add	sp, #28
 8003dd2:	bd90      	pop	{r4, r7, pc}
 8003dd4:	80002400 	.word	0x80002400
 8003dd8:	fe00e800 	.word	0xfe00e800

08003ddc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
  }
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b004      	add	sp, #16
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2280      	movs	r2, #128	@ 0x80
 8003e36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003e38:	d00a      	beq.n	8003e50 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	2201      	movs	r2, #1
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2280      	movs	r2, #128	@ 0x80
 8003e4c:	0052      	lsls	r2, r2, #1
 8003e4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4013      	ands	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2280      	movs	r2, #128	@ 0x80
 8003e5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e60:	d00a      	beq.n	8003e78 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	2208      	movs	r2, #8
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2280      	movs	r2, #128	@ 0x80
 8003e74:	00d2      	lsls	r2, r2, #3
 8003e76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2280      	movs	r2, #128	@ 0x80
 8003e86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e88:	d00a      	beq.n	8003ea0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	2202      	movs	r2, #2
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2280      	movs	r2, #128	@ 0x80
 8003e9c:	0092      	lsls	r2, r2, #2
 8003e9e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	220b      	movs	r2, #11
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d005      	beq.n	8003eba <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 fc3b 	bl	8004730 <I2C_ITError>
  }
}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b002      	add	sp, #8
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	0008      	movs	r0, r1
 8003eec:	0011      	movs	r1, r2
 8003eee:	1cfb      	adds	r3, r7, #3
 8003ef0:	1c02      	adds	r2, r0, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	003b      	movs	r3, r7
 8003ef6:	1c0a      	adds	r2, r1, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b002      	add	sp, #8
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b002      	add	sp, #8
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2241      	movs	r2, #65	@ 0x41
 8003f3e:	5c9b      	ldrb	r3, [r3, r2]
 8003f40:	b2db      	uxtb	r3, r3
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2240      	movs	r2, #64	@ 0x40
 8003f7a:	5c9b      	ldrb	r3, [r3, r2]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <I2C_Slave_ISR_IT+0x24>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e0e7      	b.n	8004154 <I2C_Slave_ISR_IT+0x1f4>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2240      	movs	r2, #64	@ 0x40
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00a      	beq.n	8003faa <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f9a:	d006      	beq.n	8003faa <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 f9e4 	bl	8004370 <I2C_ITSlaveCplt>
 8003fa8:	e0cf      	b.n	800414a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2210      	movs	r2, #16
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d052      	beq.n	8004058 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fb8:	d04e      	beq.n	8004058 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d12d      	bne.n	8004020 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2241      	movs	r2, #65	@ 0x41
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b28      	cmp	r3, #40	@ 0x28
 8003fce:	d10b      	bne.n	8003fe8 <I2C_Slave_ISR_IT+0x88>
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	2380      	movs	r3, #128	@ 0x80
 8003fd4:	049b      	lsls	r3, r3, #18
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d106      	bne.n	8003fe8 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 fb4d 	bl	8004680 <I2C_ITListenCplt>
 8003fe6:	e036      	b.n	8004056 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2241      	movs	r2, #65	@ 0x41
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b29      	cmp	r3, #41	@ 0x29
 8003ff2:	d110      	bne.n	8004016 <I2C_Slave_ISR_IT+0xb6>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4a59      	ldr	r2, [pc, #356]	@ (800415c <I2C_Slave_ISR_IT+0x1fc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00c      	beq.n	8004016 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2210      	movs	r2, #16
 8004002:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fcbd 	bl	8004986 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	0018      	movs	r0, r3
 8004010:	f000 f94a 	bl	80042a8 <I2C_ITSlaveSeqCplt>
 8004014:	e01f      	b.n	8004056 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800401e:	e091      	b.n	8004144 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2210      	movs	r2, #16
 8004026:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402c:	2204      	movs	r2, #4
 800402e:	431a      	orrs	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <I2C_Slave_ISR_IT+0xe6>
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	2380      	movs	r3, #128	@ 0x80
 800403e:	045b      	lsls	r3, r3, #17
 8004040:	429a      	cmp	r2, r3
 8004042:	d000      	beq.n	8004046 <I2C_Slave_ISR_IT+0xe6>
 8004044:	e07e      	b.n	8004144 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f000 fb6e 	bl	8004730 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004054:	e076      	b.n	8004144 <I2C_Slave_ISR_IT+0x1e4>
 8004056:	e075      	b.n	8004144 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2204      	movs	r2, #4
 800405c:	4013      	ands	r3, r2
 800405e:	d02f      	beq.n	80040c0 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2204      	movs	r2, #4
 8004064:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004066:	d02b      	beq.n	80040c0 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d018      	beq.n	80040a4 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d14c      	bne.n	8004148 <I2C_Slave_ISR_IT+0x1e8>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4a2a      	ldr	r2, [pc, #168]	@ (800415c <I2C_Slave_ISR_IT+0x1fc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d048      	beq.n	8004148 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 f8f5 	bl	80042a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80040be:	e043      	b.n	8004148 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2208      	movs	r2, #8
 80040c4:	4013      	ands	r3, r2
 80040c6:	d00a      	beq.n	80040de <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2208      	movs	r2, #8
 80040cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040ce:	d006      	beq.n	80040de <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f000 f842 	bl	8004160 <I2C_ITAddrCplt>
 80040dc:	e035      	b.n	800414a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2202      	movs	r2, #2
 80040e2:	4013      	ands	r3, r2
 80040e4:	d031      	beq.n	800414a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80040ec:	d02d      	beq.n	800414a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d018      	beq.n	800412a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004128:	e00f      	b.n	800414a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	2380      	movs	r3, #128	@ 0x80
 800412e:	045b      	lsls	r3, r3, #17
 8004130:	429a      	cmp	r2, r3
 8004132:	d002      	beq.n	800413a <I2C_Slave_ISR_IT+0x1da>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 f8b3 	bl	80042a8 <I2C_ITSlaveSeqCplt>
 8004142:	e002      	b.n	800414a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	e000      	b.n	800414a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8004148:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2240      	movs	r2, #64	@ 0x40
 800414e:	2100      	movs	r1, #0
 8004150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	b006      	add	sp, #24
 800415a:	bd80      	pop	{r7, pc}
 800415c:	ffff0000 	.word	0xffff0000

08004160 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2241      	movs	r2, #65	@ 0x41
 800416e:	5c9b      	ldrb	r3, [r3, r2]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	001a      	movs	r2, r3
 8004174:	2328      	movs	r3, #40	@ 0x28
 8004176:	4013      	ands	r3, r2
 8004178:	2b28      	cmp	r3, #40	@ 0x28
 800417a:	d000      	beq.n	800417e <I2C_ITAddrCplt+0x1e>
 800417c:	e088      	b.n	8004290 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	b2da      	uxtb	r2, r3
 8004188:	250f      	movs	r5, #15
 800418a:	197b      	adds	r3, r7, r5
 800418c:	2101      	movs	r1, #1
 800418e:	400a      	ands	r2, r1
 8004190:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	b29a      	uxth	r2, r3
 800419c:	200c      	movs	r0, #12
 800419e:	183b      	adds	r3, r7, r0
 80041a0:	21fe      	movs	r1, #254	@ 0xfe
 80041a2:	400a      	ands	r2, r1
 80041a4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	240a      	movs	r4, #10
 80041b0:	193b      	adds	r3, r7, r4
 80041b2:	0592      	lsls	r2, r2, #22
 80041b4:	0d92      	lsrs	r2, r2, #22
 80041b6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	b29a      	uxth	r2, r3
 80041c0:	2308      	movs	r3, #8
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	21fe      	movs	r1, #254	@ 0xfe
 80041c6:	400a      	ands	r2, r1
 80041c8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d148      	bne.n	8004264 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80041d2:	0021      	movs	r1, r4
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	09db      	lsrs	r3, r3, #7
 80041da:	b29a      	uxth	r2, r3
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	4053      	eors	r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	001a      	movs	r2, r3
 80041e6:	2306      	movs	r3, #6
 80041e8:	4013      	ands	r3, r2
 80041ea:	d120      	bne.n	800422e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80041ec:	183b      	adds	r3, r7, r0
 80041ee:	187a      	adds	r2, r7, r1
 80041f0:	8812      	ldrh	r2, [r2, #0]
 80041f2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004202:	2b02      	cmp	r3, #2
 8004204:	d14c      	bne.n	80042a0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2208      	movs	r2, #8
 8004212:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2240      	movs	r2, #64	@ 0x40
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800421c:	183b      	adds	r3, r7, r0
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	197b      	adds	r3, r7, r5
 8004222:	7819      	ldrb	r1, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0018      	movs	r0, r3
 8004228:	f7ff fe5b 	bl	8003ee2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800422c:	e038      	b.n	80042a0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800422e:	240c      	movs	r4, #12
 8004230:	193b      	adds	r3, r7, r4
 8004232:	2208      	movs	r2, #8
 8004234:	18ba      	adds	r2, r7, r2
 8004236:	8812      	ldrh	r2, [r2, #0]
 8004238:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0011      	movs	r1, r2
 8004242:	0018      	movs	r0, r3
 8004244:	f000 fe92 	bl	8004f6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2240      	movs	r2, #64	@ 0x40
 800424c:	2100      	movs	r1, #0
 800424e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004250:	193b      	adds	r3, r7, r4
 8004252:	881a      	ldrh	r2, [r3, #0]
 8004254:	230f      	movs	r3, #15
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	7819      	ldrb	r1, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0018      	movs	r0, r3
 800425e:	f7ff fe40 	bl	8003ee2 <HAL_I2C_AddrCallback>
}
 8004262:	e01d      	b.n	80042a0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004264:	2380      	movs	r3, #128	@ 0x80
 8004266:	021a      	lsls	r2, r3, #8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0011      	movs	r1, r2
 800426c:	0018      	movs	r0, r3
 800426e:	f000 fe7d 	bl	8004f6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2240      	movs	r2, #64	@ 0x40
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800427a:	230c      	movs	r3, #12
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	230f      	movs	r3, #15
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	7819      	ldrb	r1, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff fe2a 	bl	8003ee2 <HAL_I2C_AddrCallback>
}
 800428e:	e007      	b.n	80042a0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2208      	movs	r2, #8
 8004296:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2240      	movs	r2, #64	@ 0x40
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b004      	add	sp, #16
 80042a6:	bdb0      	pop	{r4, r5, r7, pc}

080042a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2242      	movs	r2, #66	@ 0x42
 80042bc:	2100      	movs	r1, #0
 80042be:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	2380      	movs	r3, #128	@ 0x80
 80042c4:	01db      	lsls	r3, r3, #7
 80042c6:	4013      	ands	r3, r2
 80042c8:	d008      	beq.n	80042dc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4924      	ldr	r1, [pc, #144]	@ (8004368 <I2C_ITSlaveSeqCplt+0xc0>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e00c      	b.n	80042f6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	4013      	ands	r3, r2
 80042e4:	d007      	beq.n	80042f6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	491e      	ldr	r1, [pc, #120]	@ (800436c <I2C_ITSlaveSeqCplt+0xc4>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2241      	movs	r2, #65	@ 0x41
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b29      	cmp	r3, #41	@ 0x29
 8004300:	d114      	bne.n	800432c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2241      	movs	r2, #65	@ 0x41
 8004306:	2128      	movs	r1, #40	@ 0x28
 8004308:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2221      	movs	r2, #33	@ 0x21
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2101      	movs	r1, #1
 8004314:	0018      	movs	r0, r3
 8004316:	f000 fe29 	bl	8004f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2240      	movs	r2, #64	@ 0x40
 800431e:	2100      	movs	r1, #0
 8004320:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff fdcc 	bl	8003ec2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800432a:	e019      	b.n	8004360 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2241      	movs	r2, #65	@ 0x41
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b2a      	cmp	r3, #42	@ 0x2a
 8004336:	d113      	bne.n	8004360 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2241      	movs	r2, #65	@ 0x41
 800433c:	2128      	movs	r1, #40	@ 0x28
 800433e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2222      	movs	r2, #34	@ 0x22
 8004344:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2102      	movs	r1, #2
 800434a:	0018      	movs	r0, r3
 800434c:	f000 fe0e 	bl	8004f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2240      	movs	r2, #64	@ 0x40
 8004354:	2100      	movs	r1, #0
 8004356:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0018      	movs	r0, r3
 800435c:	f7ff fdb9 	bl	8003ed2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004360:	46c0      	nop			@ (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b004      	add	sp, #16
 8004366:	bd80      	pop	{r7, pc}
 8004368:	ffffbfff 	.word	0xffffbfff
 800436c:	ffff7fff 	.word	0xffff7fff

08004370 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800438c:	200b      	movs	r0, #11
 800438e:	183b      	adds	r3, r7, r0
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	2141      	movs	r1, #65	@ 0x41
 8004394:	5c52      	ldrb	r2, [r2, r1]
 8004396:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2220      	movs	r2, #32
 800439e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043a0:	183b      	adds	r3, r7, r0
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b21      	cmp	r3, #33	@ 0x21
 80043a6:	d003      	beq.n	80043b0 <I2C_ITSlaveCplt+0x40>
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b29      	cmp	r3, #41	@ 0x29
 80043ae:	d109      	bne.n	80043c4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80043b0:	4aac      	ldr	r2, [pc, #688]	@ (8004664 <I2C_ITSlaveCplt+0x2f4>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0011      	movs	r1, r2
 80043b6:	0018      	movs	r0, r3
 80043b8:	f000 fdd8 	bl	8004f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2221      	movs	r2, #33	@ 0x21
 80043c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80043c2:	e020      	b.n	8004406 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043c4:	220b      	movs	r2, #11
 80043c6:	18bb      	adds	r3, r7, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b22      	cmp	r3, #34	@ 0x22
 80043cc:	d003      	beq.n	80043d6 <I2C_ITSlaveCplt+0x66>
 80043ce:	18bb      	adds	r3, r7, r2
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d4:	d109      	bne.n	80043ea <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80043d6:	4aa4      	ldr	r2, [pc, #656]	@ (8004668 <I2C_ITSlaveCplt+0x2f8>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	0011      	movs	r1, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 fdc5 	bl	8004f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2222      	movs	r2, #34	@ 0x22
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043e8:	e00d      	b.n	8004406 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80043ea:	230b      	movs	r3, #11
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b28      	cmp	r3, #40	@ 0x28
 80043f2:	d108      	bne.n	8004406 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80043f4:	4a9d      	ldr	r2, [pc, #628]	@ (800466c <I2C_ITSlaveCplt+0x2fc>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fdb6 	bl	8004f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2180      	movs	r1, #128	@ 0x80
 8004412:	0209      	lsls	r1, r1, #8
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4993      	ldr	r1, [pc, #588]	@ (8004670 <I2C_ITSlaveCplt+0x300>)
 8004424:	400a      	ands	r2, r1
 8004426:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	0018      	movs	r0, r3
 800442c:	f000 faab 	bl	8004986 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	01db      	lsls	r3, r3, #7
 8004436:	4013      	ands	r3, r2
 8004438:	d013      	beq.n	8004462 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	498b      	ldr	r1, [pc, #556]	@ (8004674 <I2C_ITSlaveCplt+0x304>)
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01f      	beq.n	8004492 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004460:	e017      	b.n	8004492 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	4013      	ands	r3, r2
 800446a:	d012      	beq.n	8004492 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4980      	ldr	r1, [pc, #512]	@ (8004678 <I2C_ITSlaveCplt+0x308>)
 8004478:	400a      	ands	r2, r1
 800447a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d006      	beq.n	8004492 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2204      	movs	r2, #4
 8004496:	4013      	ands	r3, r2
 8004498:	d020      	beq.n	80044dc <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2204      	movs	r2, #4
 800449e:	4393      	bics	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	2204      	movs	r2, #4
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2210      	movs	r2, #16
 80044f6:	4013      	ands	r3, r2
 80044f8:	d04f      	beq.n	800459a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2210      	movs	r2, #16
 80044fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004500:	d04b      	beq.n	800459a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d12d      	bne.n	8004568 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2241      	movs	r2, #65	@ 0x41
 8004510:	5c9b      	ldrb	r3, [r3, r2]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b28      	cmp	r3, #40	@ 0x28
 8004516:	d10b      	bne.n	8004530 <I2C_ITSlaveCplt+0x1c0>
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	049b      	lsls	r3, r3, #18
 800451e:	429a      	cmp	r2, r3
 8004520:	d106      	bne.n	8004530 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0011      	movs	r1, r2
 8004528:	0018      	movs	r0, r3
 800452a:	f000 f8a9 	bl	8004680 <I2C_ITListenCplt>
 800452e:	e034      	b.n	800459a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2241      	movs	r2, #65	@ 0x41
 8004534:	5c9b      	ldrb	r3, [r3, r2]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b29      	cmp	r3, #41	@ 0x29
 800453a:	d110      	bne.n	800455e <I2C_ITSlaveCplt+0x1ee>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a4f      	ldr	r2, [pc, #316]	@ (800467c <I2C_ITSlaveCplt+0x30c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00c      	beq.n	800455e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2210      	movs	r2, #16
 800454a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 fa19 	bl	8004986 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	0018      	movs	r0, r3
 8004558:	f7ff fea6 	bl	80042a8 <I2C_ITSlaveSeqCplt>
 800455c:	e01d      	b.n	800459a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2210      	movs	r2, #16
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e018      	b.n	800459a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2210      	movs	r2, #16
 800456e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004574:	2204      	movs	r2, #4
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <I2C_ITSlaveCplt+0x21c>
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	045b      	lsls	r3, r3, #17
 8004588:	429a      	cmp	r2, r3
 800458a:	d106      	bne.n	800459a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0011      	movs	r1, r2
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f8cb 	bl	8004730 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2242      	movs	r2, #66	@ 0x42
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0011      	movs	r1, r2
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 f8b9 	bl	8004730 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2241      	movs	r2, #65	@ 0x41
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b28      	cmp	r3, #40	@ 0x28
 80045c8:	d147      	bne.n	800465a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	0011      	movs	r1, r2
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 f855 	bl	8004680 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045d6:	e040      	b.n	800465a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a27      	ldr	r2, [pc, #156]	@ (800467c <I2C_ITSlaveCplt+0x30c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d016      	beq.n	8004610 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff fe5f 	bl	80042a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a23      	ldr	r2, [pc, #140]	@ (800467c <I2C_ITSlaveCplt+0x30c>)
 80045ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2241      	movs	r2, #65	@ 0x41
 80045f4:	2120      	movs	r1, #32
 80045f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2240      	movs	r2, #64	@ 0x40
 8004602:	2100      	movs	r1, #0
 8004604:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f7ff fc7a 	bl	8003f02 <HAL_I2C_ListenCpltCallback>
}
 800460e:	e024      	b.n	800465a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2241      	movs	r2, #65	@ 0x41
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b22      	cmp	r3, #34	@ 0x22
 800461a:	d10f      	bne.n	800463c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2241      	movs	r2, #65	@ 0x41
 8004620:	2120      	movs	r1, #32
 8004622:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2240      	movs	r2, #64	@ 0x40
 800462e:	2100      	movs	r1, #0
 8004630:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff fc4c 	bl	8003ed2 <HAL_I2C_SlaveRxCpltCallback>
}
 800463a:	e00e      	b.n	800465a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2241      	movs	r2, #65	@ 0x41
 8004640:	2120      	movs	r1, #32
 8004642:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2240      	movs	r2, #64	@ 0x40
 800464e:	2100      	movs	r1, #0
 8004650:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0018      	movs	r0, r3
 8004656:	f7ff fc34 	bl	8003ec2 <HAL_I2C_SlaveTxCpltCallback>
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	b006      	add	sp, #24
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	00008001 	.word	0x00008001
 8004668:	00008002 	.word	0x00008002
 800466c:	00008003 	.word	0x00008003
 8004670:	fe00e800 	.word	0xfe00e800
 8004674:	ffffbfff 	.word	0xffffbfff
 8004678:	ffff7fff 	.word	0xffff7fff
 800467c:	ffff0000 	.word	0xffff0000

08004680 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <I2C_ITListenCplt+0xa8>)
 800468e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2241      	movs	r2, #65	@ 0x41
 800469a:	2120      	movs	r1, #32
 800469c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2242      	movs	r2, #66	@ 0x42
 80046a2:	2100      	movs	r1, #0
 80046a4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2204      	movs	r2, #4
 80046b0:	4013      	ands	r3, r2
 80046b2:	d022      	beq.n	80046fa <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d012      	beq.n	80046fa <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	2204      	movs	r2, #4
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80046fa:	4a0c      	ldr	r2, [pc, #48]	@ (800472c <I2C_ITListenCplt+0xac>)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f000 fc33 	bl	8004f6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2210      	movs	r2, #16
 800470c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2240      	movs	r2, #64	@ 0x40
 8004712:	2100      	movs	r1, #0
 8004714:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	0018      	movs	r0, r3
 800471a:	f7ff fbf2 	bl	8003f02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b002      	add	sp, #8
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	ffff0000 	.word	0xffff0000
 800472c:	00008003 	.word	0x00008003

08004730 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800473a:	200f      	movs	r0, #15
 800473c:	183b      	adds	r3, r7, r0
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	2141      	movs	r1, #65	@ 0x41
 8004742:	5c52      	ldrb	r2, [r2, r1]
 8004744:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2242      	movs	r2, #66	@ 0x42
 800474a:	2100      	movs	r1, #0
 800474c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a72      	ldr	r2, [pc, #456]	@ (800491c <I2C_ITError+0x1ec>)
 8004752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004766:	183b      	adds	r3, r7, r0
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b28      	cmp	r3, #40	@ 0x28
 800476c:	d007      	beq.n	800477e <I2C_ITError+0x4e>
 800476e:	183b      	adds	r3, r7, r0
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b29      	cmp	r3, #41	@ 0x29
 8004774:	d003      	beq.n	800477e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004776:	183b      	adds	r3, r7, r0
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b2a      	cmp	r3, #42	@ 0x2a
 800477c:	d10c      	bne.n	8004798 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2103      	movs	r1, #3
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fbf2 	bl	8004f6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2241      	movs	r2, #65	@ 0x41
 800478c:	2128      	movs	r1, #40	@ 0x28
 800478e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a63      	ldr	r2, [pc, #396]	@ (8004920 <I2C_ITError+0x1f0>)
 8004794:	635a      	str	r2, [r3, #52]	@ 0x34
 8004796:	e032      	b.n	80047fe <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004798:	4a62      	ldr	r2, [pc, #392]	@ (8004924 <I2C_ITError+0x1f4>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0011      	movs	r1, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 fbe4 	bl	8004f6c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	0018      	movs	r0, r3
 80047a8:	f000 f8ed 	bl	8004986 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2241      	movs	r2, #65	@ 0x41
 80047b0:	5c9b      	ldrb	r3, [r3, r2]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d01f      	beq.n	80047f8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2241      	movs	r2, #65	@ 0x41
 80047bc:	2120      	movs	r1, #32
 80047be:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2220      	movs	r2, #32
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d114      	bne.n	80047f8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2210      	movs	r2, #16
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d109      	bne.n	80047f0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2210      	movs	r2, #16
 80047e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e8:	2204      	movs	r2, #4
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2220      	movs	r2, #32
 80047f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004802:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d03b      	beq.n	8004884 <I2C_ITError+0x154>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b11      	cmp	r3, #17
 8004810:	d002      	beq.n	8004818 <I2C_ITError+0xe8>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b21      	cmp	r3, #33	@ 0x21
 8004816:	d135      	bne.n	8004884 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	@ 0x80
 8004820:	01db      	lsls	r3, r3, #7
 8004822:	401a      	ands	r2, r3
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	01db      	lsls	r3, r3, #7
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	493c      	ldr	r1, [pc, #240]	@ (8004928 <I2C_ITError+0x1f8>)
 8004838:	400a      	ands	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	0018      	movs	r0, r3
 8004842:	f7fe fdc7 	bl	80033d4 <HAL_DMA_GetState>
 8004846:	0003      	movs	r3, r0
 8004848:	2b01      	cmp	r3, #1
 800484a:	d016      	beq.n	800487a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	4a36      	ldr	r2, [pc, #216]	@ (800492c <I2C_ITError+0x1fc>)
 8004852:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2240      	movs	r2, #64	@ 0x40
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	0018      	movs	r0, r3
 8004862:	f7fe fc8b 	bl	800317c <HAL_DMA_Abort_IT>
 8004866:	1e03      	subs	r3, r0, #0
 8004868:	d051      	beq.n	800490e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	0018      	movs	r0, r3
 8004876:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004878:	e049      	b.n	800490e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f859 	bl	8004934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004882:	e044      	b.n	800490e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03b      	beq.n	8004904 <I2C_ITError+0x1d4>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b12      	cmp	r3, #18
 8004890:	d002      	beq.n	8004898 <I2C_ITError+0x168>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b22      	cmp	r3, #34	@ 0x22
 8004896:	d135      	bne.n	8004904 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	401a      	ands	r2, r3
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d107      	bne.n	80048bc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	491e      	ldr	r1, [pc, #120]	@ (8004930 <I2C_ITError+0x200>)
 80048b8:	400a      	ands	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fe fd87 	bl	80033d4 <HAL_DMA_GetState>
 80048c6:	0003      	movs	r3, r0
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d016      	beq.n	80048fa <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	4a16      	ldr	r2, [pc, #88]	@ (800492c <I2C_ITError+0x1fc>)
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2240      	movs	r2, #64	@ 0x40
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7fe fc4b 	bl	800317c <HAL_DMA_Abort_IT>
 80048e6:	1e03      	subs	r3, r0, #0
 80048e8:	d013      	beq.n	8004912 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f4:	0018      	movs	r0, r3
 80048f6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f8:	e00b      	b.n	8004912 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 f819 	bl	8004934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004902:	e006      	b.n	8004912 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0018      	movs	r0, r3
 8004908:	f000 f814 	bl	8004934 <I2C_TreatErrorCallback>
  }
}
 800490c:	e002      	b.n	8004914 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	e000      	b.n	8004914 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004912:	46c0      	nop			@ (mov r8, r8)
}
 8004914:	46c0      	nop			@ (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b004      	add	sp, #16
 800491a:	bd80      	pop	{r7, pc}
 800491c:	ffff0000 	.word	0xffff0000
 8004920:	08003f61 	.word	0x08003f61
 8004924:	00008003 	.word	0x00008003
 8004928:	ffffbfff 	.word	0xffffbfff
 800492c:	080049cb 	.word	0x080049cb
 8004930:	ffff7fff 	.word	0xffff7fff

08004934 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2241      	movs	r2, #65	@ 0x41
 8004940:	5c9b      	ldrb	r3, [r3, r2]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b60      	cmp	r3, #96	@ 0x60
 8004946:	d10f      	bne.n	8004968 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2241      	movs	r2, #65	@ 0x41
 800494c:	2120      	movs	r1, #32
 800494e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2240      	movs	r2, #64	@ 0x40
 800495a:	2100      	movs	r1, #0
 800495c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0018      	movs	r0, r3
 8004962:	f7ff fade 	bl	8003f22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004966:	e00a      	b.n	800497e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2240      	movs	r2, #64	@ 0x40
 8004972:	2100      	movs	r1, #0
 8004974:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f7ff faca 	bl	8003f12 <HAL_I2C_ErrorCallback>
}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	46bd      	mov	sp, r7
 8004982:	b002      	add	sp, #8
 8004984:	bd80      	pop	{r7, pc}

08004986 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2202      	movs	r2, #2
 8004996:	4013      	ands	r3, r2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d103      	bne.n	80049a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2200      	movs	r2, #0
 80049a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2201      	movs	r2, #1
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d007      	beq.n	80049c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2101      	movs	r1, #1
 80049be:	430a      	orrs	r2, r1
 80049c0:	619a      	str	r2, [r3, #24]
  }
}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}

080049ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	2200      	movs	r2, #0
 80049e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f4:	2200      	movs	r2, #0
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7ff ff9a 	bl	8004934 <I2C_TreatErrorCallback>
}
 8004a00:	46c0      	nop			@ (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b004      	add	sp, #16
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	1dfb      	adds	r3, r7, #7
 8004a16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a18:	e03a      	b.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 f971 	bl	8004d08 <I2C_IsErrorOccurred>
 8004a26:	1e03      	subs	r3, r0, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e040      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	d02d      	beq.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a34:	f7fd fca8 	bl	8002388 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d302      	bcc.n	8004a4a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d122      	bne.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	425a      	negs	r2, r3
 8004a5a:	4153      	adcs	r3, r2
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	001a      	movs	r2, r3
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d113      	bne.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2241      	movs	r2, #65	@ 0x41
 8004a78:	2120      	movs	r1, #32
 8004a7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2242      	movs	r2, #66	@ 0x42
 8004a80:	2100      	movs	r1, #0
 8004a82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2240      	movs	r2, #64	@ 0x40
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e00f      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	425a      	negs	r2, r3
 8004aa0:	4153      	adcs	r3, r2
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	001a      	movs	r2, r3
 8004aa6:	1dfb      	adds	r3, r7, #7
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d0b5      	beq.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b004      	add	sp, #16
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ac4:	e032      	b.n	8004b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 f91b 	bl	8004d08 <I2C_IsErrorOccurred>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e030      	b.n	8004b3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3301      	adds	r3, #1
 8004ade:	d025      	beq.n	8004b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae0:	f7fd fc52 	bl	8002388 <HAL_GetTick>
 8004ae4:	0002      	movs	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d302      	bcc.n	8004af6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d11a      	bne.n	8004b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2202      	movs	r2, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d013      	beq.n	8004b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b08:	2220      	movs	r2, #32
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2241      	movs	r2, #65	@ 0x41
 8004b14:	2120      	movs	r1, #32
 8004b16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2242      	movs	r2, #66	@ 0x42
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	@ 0x40
 8004b24:	2100      	movs	r1, #0
 8004b26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e007      	b.n	8004b3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d1c5      	bne.n	8004ac6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b004      	add	sp, #16
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b50:	e02f      	b.n	8004bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f000 f8d5 	bl	8004d08 <I2C_IsErrorOccurred>
 8004b5e:	1e03      	subs	r3, r0, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e02d      	b.n	8004bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fd fc0f 	bl	8002388 <HAL_GetTick>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d11a      	bne.n	8004bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2220      	movs	r2, #32
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d013      	beq.n	8004bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	2220      	movs	r2, #32
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2241      	movs	r2, #65	@ 0x41
 8004b9a:	2120      	movs	r1, #32
 8004b9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2242      	movs	r2, #66	@ 0x42
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2240      	movs	r2, #64	@ 0x40
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e007      	b.n	8004bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d1c8      	bne.n	8004b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd8:	2317      	movs	r3, #23
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004be0:	e07b      	b.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 f88d 	bl	8004d08 <I2C_IsErrorOccurred>
 8004bee:	1e03      	subs	r3, r0, #0
 8004bf0:	d003      	beq.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004bf2:	2317      	movs	r3, #23
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2220      	movs	r2, #32
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d140      	bne.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004c08:	2117      	movs	r1, #23
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d13b      	bne.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d106      	bne.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004c28:	187b      	adds	r3, r7, r1
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2210      	movs	r2, #16
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d123      	bne.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2210      	movs	r2, #16
 8004c42:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2204      	movs	r2, #4
 8004c48:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4929      	ldr	r1, [pc, #164]	@ (8004d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004c5e:	400a      	ands	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2241      	movs	r2, #65	@ 0x41
 8004c66:	2120      	movs	r1, #32
 8004c68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2242      	movs	r2, #66	@ 0x42
 8004c6e:	2100      	movs	r1, #0
 8004c70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2240      	movs	r2, #64	@ 0x40
 8004c76:	2100      	movs	r1, #0
 8004c78:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c7a:	2317      	movs	r3, #23
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e002      	b.n	8004c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004c8a:	f7fd fb7d 	bl	8002388 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11c      	bne.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004ca0:	2017      	movs	r0, #23
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d117      	bne.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d010      	beq.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2241      	movs	r2, #65	@ 0x41
 8004cc8:	2120      	movs	r1, #32
 8004cca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2240      	movs	r2, #64	@ 0x40
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004cd4:	183b      	adds	r3, r7, r0
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d005      	beq.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004ce8:	2317      	movs	r3, #23
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d100      	bne.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004cf2:	e776      	b.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004cf4:	2317      	movs	r3, #23
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	781b      	ldrb	r3, [r3, #0]
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b006      	add	sp, #24
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	fe00e800 	.word	0xfe00e800

08004d08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	@ 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2327      	movs	r3, #39	@ 0x27
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2210      	movs	r2, #16
 8004d30:	4013      	ands	r3, r2
 8004d32:	d100      	bne.n	8004d36 <I2C_IsErrorOccurred+0x2e>
 8004d34:	e079      	b.n	8004e2a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d3e:	e057      	b.n	8004df0 <I2C_IsErrorOccurred+0xe8>
 8004d40:	2227      	movs	r2, #39	@ 0x27
 8004d42:	18bb      	adds	r3, r7, r2
 8004d44:	18ba      	adds	r2, r7, r2
 8004d46:	7812      	ldrb	r2, [r2, #0]
 8004d48:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	d04f      	beq.n	8004df0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fd fb1a 	bl	8002388 <HAL_GetTick>
 8004d54:	0002      	movs	r2, r0
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <I2C_IsErrorOccurred+0x5e>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d144      	bne.n	8004df0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	01db      	lsls	r3, r3, #7
 8004d70:	4013      	ands	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d74:	2013      	movs	r0, #19
 8004d76:	183b      	adds	r3, r7, r0
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	2142      	movs	r1, #66	@ 0x42
 8004d7c:	5c52      	ldrb	r2, [r2, r1]
 8004d7e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d126      	bne.n	8004de2 <I2C_IsErrorOccurred+0xda>
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	01db      	lsls	r3, r3, #7
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d021      	beq.n	8004de2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004d9e:	183b      	adds	r3, r7, r0
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d01d      	beq.n	8004de2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2180      	movs	r1, #128	@ 0x80
 8004db2:	01c9      	lsls	r1, r1, #7
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004db8:	f7fd fae6 	bl	8002388 <HAL_GetTick>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc0:	e00f      	b.n	8004de2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dc2:	f7fd fae1 	bl	8002388 <HAL_GetTick>
 8004dc6:	0002      	movs	r2, r0
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b19      	cmp	r3, #25
 8004dce:	d908      	bls.n	8004de2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004dd8:	2327      	movs	r3, #39	@ 0x27
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]

              break;
 8004de0:	e006      	b.n	8004df0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2220      	movs	r2, #32
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d1e8      	bne.n	8004dc2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2220      	movs	r2, #32
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d004      	beq.n	8004e08 <I2C_IsErrorOccurred+0x100>
 8004dfe:	2327      	movs	r3, #39	@ 0x27
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d09b      	beq.n	8004d40 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e08:	2327      	movs	r3, #39	@ 0x27
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2220      	movs	r2, #32
 8004e18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e22:	2327      	movs	r3, #39	@ 0x27
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	2201      	movs	r2, #1
 8004e28:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00c      	beq.n	8004e56 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2280      	movs	r2, #128	@ 0x80
 8004e4a:	0052      	lsls	r2, r2, #1
 8004e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e4e:	2327      	movs	r3, #39	@ 0x27
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d00c      	beq.n	8004e7a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	2208      	movs	r2, #8
 8004e64:	4313      	orrs	r3, r2
 8004e66:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2280      	movs	r2, #128	@ 0x80
 8004e6e:	00d2      	lsls	r2, r2, #3
 8004e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e72:	2327      	movs	r3, #39	@ 0x27
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	2201      	movs	r2, #1
 8004e78:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4013      	ands	r3, r2
 8004e82:	d00c      	beq.n	8004e9e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2202      	movs	r2, #2
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2280      	movs	r2, #128	@ 0x80
 8004e92:	0092      	lsls	r2, r2, #2
 8004e94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e96:	2327      	movs	r3, #39	@ 0x27
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e9e:	2327      	movs	r3, #39	@ 0x27
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01d      	beq.n	8004ee4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f7ff fd6b 	bl	8004986 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	490e      	ldr	r1, [pc, #56]	@ (8004ef4 <I2C_IsErrorOccurred+0x1ec>)
 8004ebc:	400a      	ands	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2241      	movs	r2, #65	@ 0x41
 8004ed0:	2120      	movs	r1, #32
 8004ed2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2242      	movs	r2, #66	@ 0x42
 8004ed8:	2100      	movs	r1, #0
 8004eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2240      	movs	r2, #64	@ 0x40
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004ee4:	2327      	movs	r3, #39	@ 0x27
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	781b      	ldrb	r3, [r3, #0]
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b00a      	add	sp, #40	@ 0x28
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	fe00e800 	.word	0xfe00e800

08004ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	0008      	movs	r0, r1
 8004f02:	0011      	movs	r1, r2
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	240a      	movs	r4, #10
 8004f08:	193b      	adds	r3, r7, r4
 8004f0a:	1c02      	adds	r2, r0, #0
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	2009      	movs	r0, #9
 8004f10:	183b      	adds	r3, r7, r0
 8004f12:	1c0a      	adds	r2, r1, #0
 8004f14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	059b      	lsls	r3, r3, #22
 8004f1c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f1e:	183b      	adds	r3, r7, r0
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	0419      	lsls	r1, r3, #16
 8004f24:	23ff      	movs	r3, #255	@ 0xff
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f2a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	4313      	orrs	r3, r2
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f42:	0d51      	lsrs	r1, r2, #21
 8004f44:	2280      	movs	r2, #128	@ 0x80
 8004f46:	00d2      	lsls	r2, r2, #3
 8004f48:	400a      	ands	r2, r1
 8004f4a:	4907      	ldr	r1, [pc, #28]	@ (8004f68 <I2C_TransferConfig+0x70>)
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	43d2      	mvns	r2, r2
 8004f50:	401a      	ands	r2, r3
 8004f52:	0011      	movs	r1, r2
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b007      	add	sp, #28
 8004f64:	bd90      	pop	{r4, r7, pc}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	03ff63ff 	.word	0x03ff63ff

08004f6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	000a      	movs	r2, r1
 8004f76:	1cbb      	adds	r3, r7, #2
 8004f78:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f7e:	1cbb      	adds	r3, r7, #2
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	4013      	ands	r3, r2
 8004f86:	d010      	beq.n	8004faa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2242      	movs	r2, #66	@ 0x42
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2241      	movs	r2, #65	@ 0x41
 8004f94:	5c9b      	ldrb	r3, [r3, r2]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	001a      	movs	r2, r3
 8004f9a:	2328      	movs	r3, #40	@ 0x28
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b28      	cmp	r3, #40	@ 0x28
 8004fa0:	d003      	beq.n	8004faa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	22b0      	movs	r2, #176	@ 0xb0
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004faa:	1cbb      	adds	r3, r7, #2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d010      	beq.n	8004fd6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2244      	movs	r2, #68	@ 0x44
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2241      	movs	r2, #65	@ 0x41
 8004fc0:	5c9b      	ldrb	r3, [r3, r2]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	001a      	movs	r2, r3
 8004fc6:	2328      	movs	r3, #40	@ 0x28
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b28      	cmp	r3, #40	@ 0x28
 8004fcc:	d003      	beq.n	8004fd6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	22b0      	movs	r2, #176	@ 0xb0
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fd6:	1cbb      	adds	r3, r7, #2
 8004fd8:	2200      	movs	r2, #0
 8004fda:	5e9b      	ldrsh	r3, [r3, r2]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da03      	bge.n	8004fe8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	22b8      	movs	r2, #184	@ 0xb8
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004fe8:	1cbb      	adds	r3, r7, #2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d103      	bne.n	8004ff8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2290      	movs	r2, #144	@ 0x90
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ff8:	1cbb      	adds	r3, r7, #2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d103      	bne.n	8005008 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005008:	1cbb      	adds	r3, r7, #2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	d103      	bne.n	8005018 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2240      	movs	r2, #64	@ 0x40
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	43d9      	mvns	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	400a      	ands	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2241      	movs	r2, #65	@ 0x41
 8005042:	5c9b      	ldrb	r3, [r3, r2]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b20      	cmp	r3, #32
 8005048:	d138      	bne.n	80050bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2240      	movs	r2, #64	@ 0x40
 800504e:	5c9b      	ldrb	r3, [r3, r2]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005054:	2302      	movs	r3, #2
 8005056:	e032      	b.n	80050be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2240      	movs	r2, #64	@ 0x40
 800505c:	2101      	movs	r1, #1
 800505e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2241      	movs	r2, #65	@ 0x41
 8005064:	2124      	movs	r1, #36	@ 0x24
 8005066:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2101      	movs	r1, #1
 8005074:	438a      	bics	r2, r1
 8005076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4911      	ldr	r1, [pc, #68]	@ (80050c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005084:	400a      	ands	r2, r1
 8005086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2101      	movs	r1, #1
 80050a4:	430a      	orrs	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2241      	movs	r2, #65	@ 0x41
 80050ac:	2120      	movs	r1, #32
 80050ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2240      	movs	r2, #64	@ 0x40
 80050b4:	2100      	movs	r1, #0
 80050b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
  }
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b002      	add	sp, #8
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	ffffefff 	.word	0xffffefff

080050cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2241      	movs	r2, #65	@ 0x41
 80050da:	5c9b      	ldrb	r3, [r3, r2]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d139      	bne.n	8005156 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2240      	movs	r2, #64	@ 0x40
 80050e6:	5c9b      	ldrb	r3, [r3, r2]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e033      	b.n	8005158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2240      	movs	r2, #64	@ 0x40
 80050f4:	2101      	movs	r1, #1
 80050f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2241      	movs	r2, #65	@ 0x41
 80050fc:	2124      	movs	r1, #36	@ 0x24
 80050fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2101      	movs	r1, #1
 800510c:	438a      	bics	r2, r1
 800510e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a11      	ldr	r2, [pc, #68]	@ (8005160 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2101      	movs	r1, #1
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2241      	movs	r2, #65	@ 0x41
 8005146:	2120      	movs	r1, #32
 8005148:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2240      	movs	r2, #64	@ 0x40
 800514e:	2100      	movs	r1, #0
 8005150:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e000      	b.n	8005158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
  }
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b004      	add	sp, #16
 800515e:	bd80      	pop	{r7, pc}
 8005160:	fffff0ff 	.word	0xfffff0ff

08005164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e20f      	b.n	8005596 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2201      	movs	r2, #1
 800517c:	4013      	ands	r3, r2
 800517e:	d100      	bne.n	8005182 <HAL_RCC_OscConfig+0x1e>
 8005180:	e069      	b.n	8005256 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005182:	4bc8      	ldr	r3, [pc, #800]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2238      	movs	r2, #56	@ 0x38
 8005188:	4013      	ands	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d105      	bne.n	800519e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d15d      	bne.n	8005256 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e1fb      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	2380      	movs	r3, #128	@ 0x80
 80051a4:	025b      	lsls	r3, r3, #9
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_OscConfig+0x56>
 80051aa:	4bbe      	ldr	r3, [pc, #760]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4bbd      	ldr	r3, [pc, #756]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051b0:	2180      	movs	r1, #128	@ 0x80
 80051b2:	0249      	lsls	r1, r1, #9
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e020      	b.n	80051fc <HAL_RCC_OscConfig+0x98>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	23a0      	movs	r3, #160	@ 0xa0
 80051c0:	02db      	lsls	r3, r3, #11
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d10e      	bne.n	80051e4 <HAL_RCC_OscConfig+0x80>
 80051c6:	4bb7      	ldr	r3, [pc, #732]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4bb6      	ldr	r3, [pc, #728]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051cc:	2180      	movs	r1, #128	@ 0x80
 80051ce:	02c9      	lsls	r1, r1, #11
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	4bb3      	ldr	r3, [pc, #716]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4bb2      	ldr	r3, [pc, #712]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	0249      	lsls	r1, r1, #9
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e00b      	b.n	80051fc <HAL_RCC_OscConfig+0x98>
 80051e4:	4baf      	ldr	r3, [pc, #700]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4bae      	ldr	r3, [pc, #696]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051ea:	49af      	ldr	r1, [pc, #700]	@ (80054a8 <HAL_RCC_OscConfig+0x344>)
 80051ec:	400a      	ands	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	4bac      	ldr	r3, [pc, #688]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4bab      	ldr	r3, [pc, #684]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80051f6:	49ad      	ldr	r1, [pc, #692]	@ (80054ac <HAL_RCC_OscConfig+0x348>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d014      	beq.n	800522e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fd f8c0 	bl	8002388 <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800520e:	f7fd f8bb 	bl	8002388 <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b64      	cmp	r3, #100	@ 0x64
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e1ba      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005220:	4ba0      	ldr	r3, [pc, #640]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	2380      	movs	r3, #128	@ 0x80
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	4013      	ands	r3, r2
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0xaa>
 800522c:	e013      	b.n	8005256 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fd f8ab 	bl	8002388 <HAL_GetTick>
 8005232:	0003      	movs	r3, r0
 8005234:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005238:	f7fd f8a6 	bl	8002388 <HAL_GetTick>
 800523c:	0002      	movs	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	@ 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e1a5      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800524a:	4b96      	ldr	r3, [pc, #600]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	029b      	lsls	r3, r3, #10
 8005252:	4013      	ands	r3, r2
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	d100      	bne.n	8005262 <HAL_RCC_OscConfig+0xfe>
 8005260:	e086      	b.n	8005370 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005262:	4b90      	ldr	r3, [pc, #576]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2238      	movs	r2, #56	@ 0x38
 8005268:	4013      	ands	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d12f      	bne.n	80052d2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e18b      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527e:	4b89      	ldr	r3, [pc, #548]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4a8b      	ldr	r2, [pc, #556]	@ (80054b0 <HAL_RCC_OscConfig+0x34c>)
 8005284:	4013      	ands	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	021a      	lsls	r2, r3, #8
 800528e:	4b85      	ldr	r3, [pc, #532]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d112      	bne.n	80052c0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800529a:	4b82      	ldr	r3, [pc, #520]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a85      	ldr	r2, [pc, #532]	@ (80054b4 <HAL_RCC_OscConfig+0x350>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	4b7e      	ldr	r3, [pc, #504]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80052ae:	4b7d      	ldr	r3, [pc, #500]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	0adb      	lsrs	r3, r3, #11
 80052b4:	2207      	movs	r2, #7
 80052b6:	4013      	ands	r3, r2
 80052b8:	4a7f      	ldr	r2, [pc, #508]	@ (80054b8 <HAL_RCC_OscConfig+0x354>)
 80052ba:	40da      	lsrs	r2, r3
 80052bc:	4b7f      	ldr	r3, [pc, #508]	@ (80054bc <HAL_RCC_OscConfig+0x358>)
 80052be:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052c0:	4b7f      	ldr	r3, [pc, #508]	@ (80054c0 <HAL_RCC_OscConfig+0x35c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7fd f803 	bl	80022d0 <HAL_InitTick>
 80052ca:	1e03      	subs	r3, r0, #0
 80052cc:	d050      	beq.n	8005370 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e161      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d030      	beq.n	800533c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80052da:	4b72      	ldr	r3, [pc, #456]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a75      	ldr	r2, [pc, #468]	@ (80054b4 <HAL_RCC_OscConfig+0x350>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	4b6e      	ldr	r3, [pc, #440]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80052ea:	430a      	orrs	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80052ee:	4b6d      	ldr	r3, [pc, #436]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b6c      	ldr	r3, [pc, #432]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80052f4:	2180      	movs	r1, #128	@ 0x80
 80052f6:	0049      	lsls	r1, r1, #1
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fd f844 	bl	8002388 <HAL_GetTick>
 8005300:	0003      	movs	r3, r0
 8005302:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005306:	f7fd f83f 	bl	8002388 <HAL_GetTick>
 800530a:	0002      	movs	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e13e      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005318:	4b62      	ldr	r3, [pc, #392]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4013      	ands	r3, r2
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005324:	4b5f      	ldr	r3, [pc, #380]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a61      	ldr	r2, [pc, #388]	@ (80054b0 <HAL_RCC_OscConfig+0x34c>)
 800532a:	4013      	ands	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	4b5b      	ldr	r3, [pc, #364]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
 800533a:	e019      	b.n	8005370 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800533c:	4b59      	ldr	r3, [pc, #356]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b58      	ldr	r3, [pc, #352]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005342:	4960      	ldr	r1, [pc, #384]	@ (80054c4 <HAL_RCC_OscConfig+0x360>)
 8005344:	400a      	ands	r2, r1
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fd f81e 	bl	8002388 <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005352:	f7fd f819 	bl	8002388 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e118      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005364:	4b4f      	ldr	r3, [pc, #316]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4013      	ands	r3, r2
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2208      	movs	r2, #8
 8005376:	4013      	ands	r3, r2
 8005378:	d042      	beq.n	8005400 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800537a:	4b4a      	ldr	r3, [pc, #296]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2238      	movs	r2, #56	@ 0x38
 8005380:	4013      	ands	r3, r2
 8005382:	2b18      	cmp	r3, #24
 8005384:	d105      	bne.n	8005392 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d138      	bne.n	8005400 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e101      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d019      	beq.n	80053ce <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800539a:	4b42      	ldr	r3, [pc, #264]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800539c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800539e:	4b41      	ldr	r3, [pc, #260]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80053a0:	2101      	movs	r1, #1
 80053a2:	430a      	orrs	r2, r1
 80053a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fc ffef 	bl	8002388 <HAL_GetTick>
 80053aa:	0003      	movs	r3, r0
 80053ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80053b0:	f7fc ffea 	bl	8002388 <HAL_GetTick>
 80053b4:	0002      	movs	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e0e9      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80053c2:	4b38      	ldr	r3, [pc, #224]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80053c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c6:	2202      	movs	r2, #2
 80053c8:	4013      	ands	r3, r2
 80053ca:	d0f1      	beq.n	80053b0 <HAL_RCC_OscConfig+0x24c>
 80053cc:	e018      	b.n	8005400 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80053ce:	4b35      	ldr	r3, [pc, #212]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80053d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80053d2:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80053d4:	2101      	movs	r1, #1
 80053d6:	438a      	bics	r2, r1
 80053d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fc ffd5 	bl	8002388 <HAL_GetTick>
 80053de:	0003      	movs	r3, r0
 80053e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80053e4:	f7fc ffd0 	bl	8002388 <HAL_GetTick>
 80053e8:	0002      	movs	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e0cf      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80053f6:	4b2b      	ldr	r3, [pc, #172]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 80053f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fa:	2202      	movs	r2, #2
 80053fc:	4013      	ands	r3, r2
 80053fe:	d1f1      	bne.n	80053e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2204      	movs	r2, #4
 8005406:	4013      	ands	r3, r2
 8005408:	d100      	bne.n	800540c <HAL_RCC_OscConfig+0x2a8>
 800540a:	e084      	b.n	8005516 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540c:	230f      	movs	r3, #15
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005414:	4b23      	ldr	r3, [pc, #140]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2238      	movs	r2, #56	@ 0x38
 800541a:	4013      	ands	r3, r2
 800541c:	2b20      	cmp	r3, #32
 800541e:	d106      	bne.n	800542e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d000      	beq.n	800542a <HAL_RCC_OscConfig+0x2c6>
 8005428:	e075      	b.n	8005516 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e0b3      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d106      	bne.n	8005444 <HAL_RCC_OscConfig+0x2e0>
 8005436:	4b1b      	ldr	r3, [pc, #108]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800543a:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800543c:	2101      	movs	r1, #1
 800543e:	430a      	orrs	r2, r1
 8005440:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005442:	e01c      	b.n	800547e <HAL_RCC_OscConfig+0x31a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b05      	cmp	r3, #5
 800544a:	d10c      	bne.n	8005466 <HAL_RCC_OscConfig+0x302>
 800544c:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800544e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005450:	4b14      	ldr	r3, [pc, #80]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005452:	2104      	movs	r1, #4
 8005454:	430a      	orrs	r2, r1
 8005456:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005458:	4b12      	ldr	r3, [pc, #72]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800545a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800545c:	4b11      	ldr	r3, [pc, #68]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800545e:	2101      	movs	r1, #1
 8005460:	430a      	orrs	r2, r1
 8005462:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005464:	e00b      	b.n	800547e <HAL_RCC_OscConfig+0x31a>
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005468:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800546a:	4b0e      	ldr	r3, [pc, #56]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 800546c:	2101      	movs	r1, #1
 800546e:	438a      	bics	r2, r1
 8005470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005474:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005476:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <HAL_RCC_OscConfig+0x340>)
 8005478:	2104      	movs	r1, #4
 800547a:	438a      	bics	r2, r1
 800547c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d028      	beq.n	80054d8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fc ff7f 	bl	8002388 <HAL_GetTick>
 800548a:	0003      	movs	r3, r0
 800548c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800548e:	e01d      	b.n	80054cc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fc ff7a 	bl	8002388 <HAL_GetTick>
 8005494:	0002      	movs	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	4a0b      	ldr	r2, [pc, #44]	@ (80054c8 <HAL_RCC_OscConfig+0x364>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d915      	bls.n	80054cc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e078      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
 80054a4:	40021000 	.word	0x40021000
 80054a8:	fffeffff 	.word	0xfffeffff
 80054ac:	fffbffff 	.word	0xfffbffff
 80054b0:	ffff80ff 	.word	0xffff80ff
 80054b4:	ffffc7ff 	.word	0xffffc7ff
 80054b8:	02dc6c00 	.word	0x02dc6c00
 80054bc:	20000064 	.word	0x20000064
 80054c0:	20000068 	.word	0x20000068
 80054c4:	fffffeff 	.word	0xfffffeff
 80054c8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80054cc:	4b34      	ldr	r3, [pc, #208]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	2202      	movs	r2, #2
 80054d2:	4013      	ands	r3, r2
 80054d4:	d0dc      	beq.n	8005490 <HAL_RCC_OscConfig+0x32c>
 80054d6:	e013      	b.n	8005500 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fc ff56 	bl	8002388 <HAL_GetTick>
 80054dc:	0003      	movs	r3, r0
 80054de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80054e0:	e009      	b.n	80054f6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fc ff51 	bl	8002388 <HAL_GetTick>
 80054e6:	0002      	movs	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	4a2d      	ldr	r2, [pc, #180]	@ (80055a4 <HAL_RCC_OscConfig+0x440>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e04f      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80054f6:	4b2a      	ldr	r3, [pc, #168]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 80054f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fa:	2202      	movs	r2, #2
 80054fc:	4013      	ands	r3, r2
 80054fe:	d1f0      	bne.n	80054e2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005500:	230f      	movs	r3, #15
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800550a:	4b25      	ldr	r3, [pc, #148]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 800550c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800550e:	4b24      	ldr	r3, [pc, #144]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 8005510:	4925      	ldr	r1, [pc, #148]	@ (80055a8 <HAL_RCC_OscConfig+0x444>)
 8005512:	400a      	ands	r2, r1
 8005514:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2210      	movs	r2, #16
 800551c:	4013      	ands	r3, r2
 800551e:	d039      	beq.n	8005594 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005528:	4b1d      	ldr	r3, [pc, #116]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b1c      	ldr	r3, [pc, #112]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 800552e:	2180      	movs	r1, #128	@ 0x80
 8005530:	03c9      	lsls	r1, r1, #15
 8005532:	430a      	orrs	r2, r1
 8005534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005536:	f7fc ff27 	bl	8002388 <HAL_GetTick>
 800553a:	0003      	movs	r3, r0
 800553c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005540:	f7fc ff22 	bl	8002388 <HAL_GetTick>
 8005544:	0002      	movs	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e021      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005552:	4b13      	ldr	r3, [pc, #76]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	2380      	movs	r3, #128	@ 0x80
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	4013      	ands	r3, r2
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x3dc>
 800555e:	e019      	b.n	8005594 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005560:	4b0f      	ldr	r3, [pc, #60]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 8005566:	4911      	ldr	r1, [pc, #68]	@ (80055ac <HAL_RCC_OscConfig+0x448>)
 8005568:	400a      	ands	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fc ff0c 	bl	8002388 <HAL_GetTick>
 8005570:	0003      	movs	r3, r0
 8005572:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005576:	f7fc ff07 	bl	8002388 <HAL_GetTick>
 800557a:	0002      	movs	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e006      	b.n	8005596 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <HAL_RCC_OscConfig+0x43c>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	2380      	movs	r3, #128	@ 0x80
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	4013      	ands	r3, r2
 8005592:	d1f0      	bne.n	8005576 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b006      	add	sp, #24
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	40021000 	.word	0x40021000
 80055a4:	00001388 	.word	0x00001388
 80055a8:	efffffff 	.word	0xefffffff
 80055ac:	ffbfffff 	.word	0xffbfffff

080055b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0f6      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055c4:	4b7d      	ldr	r3, [pc, #500]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2207      	movs	r2, #7
 80055ca:	4013      	ands	r3, r2
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d91e      	bls.n	8005610 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d2:	4b7a      	ldr	r3, [pc, #488]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2207      	movs	r2, #7
 80055d8:	4393      	bics	r3, r2
 80055da:	0019      	movs	r1, r3
 80055dc:	4b77      	ldr	r3, [pc, #476]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055e4:	f7fc fed0 	bl	8002388 <HAL_GetTick>
 80055e8:	0003      	movs	r3, r0
 80055ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055ec:	e009      	b.n	8005602 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80055ee:	f7fc fecb 	bl	8002388 <HAL_GetTick>
 80055f2:	0002      	movs	r2, r0
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	4a71      	ldr	r2, [pc, #452]	@ (80057c0 <HAL_RCC_ClockConfig+0x210>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0d7      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005602:	4b6e      	ldr	r3, [pc, #440]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2207      	movs	r2, #7
 8005608:	4013      	ands	r3, r2
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d1ee      	bne.n	80055ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2202      	movs	r2, #2
 8005616:	4013      	ands	r3, r2
 8005618:	d017      	beq.n	800564a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2204      	movs	r2, #4
 8005620:	4013      	ands	r3, r2
 8005622:	d008      	beq.n	8005636 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005624:	4b67      	ldr	r3, [pc, #412]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a67      	ldr	r2, [pc, #412]	@ (80057c8 <HAL_RCC_ClockConfig+0x218>)
 800562a:	401a      	ands	r2, r3
 800562c:	4b65      	ldr	r3, [pc, #404]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 800562e:	21b0      	movs	r1, #176	@ 0xb0
 8005630:	0109      	lsls	r1, r1, #4
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005636:	4b63      	ldr	r3, [pc, #396]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	4a64      	ldr	r2, [pc, #400]	@ (80057cc <HAL_RCC_ClockConfig+0x21c>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	4b5f      	ldr	r3, [pc, #380]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2201      	movs	r2, #1
 8005650:	4013      	ands	r3, r2
 8005652:	d100      	bne.n	8005656 <HAL_RCC_ClockConfig+0xa6>
 8005654:	e061      	b.n	800571a <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8005656:	4b5b      	ldr	r3, [pc, #364]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	221c      	movs	r2, #28
 800565c:	4393      	bics	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	4b57      	ldr	r3, [pc, #348]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005672:	4b54      	ldr	r3, [pc, #336]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	2380      	movs	r3, #128	@ 0x80
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	4013      	ands	r3, r2
 800567c:	d12b      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e097      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800568a:	4b4e      	ldr	r3, [pc, #312]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	2380      	movs	r3, #128	@ 0x80
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4013      	ands	r3, r2
 8005694:	d11f      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e08b      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d107      	bne.n	80056b2 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80056a2:	4b48      	ldr	r3, [pc, #288]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	2380      	movs	r3, #128	@ 0x80
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	4013      	ands	r3, r2
 80056ac:	d113      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e07f      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d106      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80056ba:	4b42      	ldr	r3, [pc, #264]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 80056bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056be:	2202      	movs	r2, #2
 80056c0:	4013      	ands	r3, r2
 80056c2:	d108      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e074      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80056c8:	4b3e      	ldr	r3, [pc, #248]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	2202      	movs	r2, #2
 80056ce:	4013      	ands	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e06d      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d6:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2207      	movs	r2, #7
 80056dc:	4393      	bics	r3, r2
 80056de:	0019      	movs	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	4b37      	ldr	r3, [pc, #220]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 80056e6:	430a      	orrs	r2, r1
 80056e8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ea:	f7fc fe4d 	bl	8002388 <HAL_GetTick>
 80056ee:	0003      	movs	r3, r0
 80056f0:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f2:	e009      	b.n	8005708 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80056f4:	f7fc fe48 	bl	8002388 <HAL_GetTick>
 80056f8:	0002      	movs	r2, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	4a30      	ldr	r2, [pc, #192]	@ (80057c0 <HAL_RCC_ClockConfig+0x210>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e054      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005708:	4b2e      	ldr	r3, [pc, #184]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2238      	movs	r2, #56	@ 0x38
 800570e:	401a      	ands	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	429a      	cmp	r2, r3
 8005718:	d1ec      	bne.n	80056f4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800571a:	4b28      	ldr	r3, [pc, #160]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2207      	movs	r2, #7
 8005720:	4013      	ands	r3, r2
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d21e      	bcs.n	8005766 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005728:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2207      	movs	r2, #7
 800572e:	4393      	bics	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	4b22      	ldr	r3, [pc, #136]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800573a:	f7fc fe25 	bl	8002388 <HAL_GetTick>
 800573e:	0003      	movs	r3, r0
 8005740:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005742:	e009      	b.n	8005758 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005744:	f7fc fe20 	bl	8002388 <HAL_GetTick>
 8005748:	0002      	movs	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	4a1c      	ldr	r2, [pc, #112]	@ (80057c0 <HAL_RCC_ClockConfig+0x210>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e02c      	b.n	80057b2 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005758:	4b18      	ldr	r3, [pc, #96]	@ (80057bc <HAL_RCC_ClockConfig+0x20c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2207      	movs	r2, #7
 800575e:	4013      	ands	r3, r2
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d1ee      	bne.n	8005744 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2204      	movs	r2, #4
 800576c:	4013      	ands	r3, r2
 800576e:	d009      	beq.n	8005784 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <HAL_RCC_ClockConfig+0x220>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 8005780:	430a      	orrs	r2, r1
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005784:	f000 f82c 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 8005788:	0001      	movs	r1, r0
 800578a:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <HAL_RCC_ClockConfig+0x214>)
 800578c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	220f      	movs	r2, #15
 8005792:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005794:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <HAL_RCC_ClockConfig+0x224>)
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800579a:	221f      	movs	r2, #31
 800579c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800579e:	000a      	movs	r2, r1
 80057a0:	40da      	lsrs	r2, r3
 80057a2:	4b0d      	ldr	r3, [pc, #52]	@ (80057d8 <HAL_RCC_ClockConfig+0x228>)
 80057a4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <HAL_RCC_ClockConfig+0x22c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	0018      	movs	r0, r3
 80057ac:	f7fc fd90 	bl	80022d0 <HAL_InitTick>
 80057b0:	0003      	movs	r3, r0
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b004      	add	sp, #16
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	40022000 	.word	0x40022000
 80057c0:	00001388 	.word	0x00001388
 80057c4:	40021000 	.word	0x40021000
 80057c8:	ffff84ff 	.word	0xffff84ff
 80057cc:	fffff0ff 	.word	0xfffff0ff
 80057d0:	ffff8fff 	.word	0xffff8fff
 80057d4:	08009a9c 	.word	0x08009a9c
 80057d8:	20000064 	.word	0x20000064
 80057dc:	20000068 	.word	0x20000068

080057e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80057e6:	4b27      	ldr	r3, [pc, #156]	@ (8005884 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	2207      	movs	r2, #7
 80057ee:	4013      	ands	r3, r2
 80057f0:	3301      	adds	r3, #1
 80057f2:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057f4:	4b23      	ldr	r3, [pc, #140]	@ (8005884 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2238      	movs	r2, #56	@ 0x38
 80057fa:	4013      	ands	r3, r2
 80057fc:	d10f      	bne.n	800581e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80057fe:	4b21      	ldr	r3, [pc, #132]	@ (8005884 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	0adb      	lsrs	r3, r3, #11
 8005804:	2207      	movs	r2, #7
 8005806:	4013      	ands	r3, r2
 8005808:	2201      	movs	r2, #1
 800580a:	409a      	lsls	r2, r3
 800580c:	0013      	movs	r3, r2
 800580e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	481d      	ldr	r0, [pc, #116]	@ (8005888 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005814:	f7fa fc82 	bl	800011c <__udivsi3>
 8005818:	0003      	movs	r3, r0
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e027      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800581e:	4b19      	ldr	r3, [pc, #100]	@ (8005884 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2238      	movs	r2, #56	@ 0x38
 8005824:	4013      	ands	r3, r2
 8005826:	2b08      	cmp	r3, #8
 8005828:	d102      	bne.n	8005830 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800582a:	4b18      	ldr	r3, [pc, #96]	@ (800588c <HAL_RCC_GetSysClockFreq+0xac>)
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e01e      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005830:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2238      	movs	r2, #56	@ 0x38
 8005836:	4013      	ands	r3, r2
 8005838:	2b20      	cmp	r3, #32
 800583a:	d103      	bne.n	8005844 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	e014      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005844:	4b0f      	ldr	r3, [pc, #60]	@ (8005884 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2238      	movs	r2, #56	@ 0x38
 800584a:	4013      	ands	r3, r2
 800584c:	2b18      	cmp	r3, #24
 800584e:	d103      	bne.n	8005858 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005850:	23fa      	movs	r3, #250	@ 0xfa
 8005852:	01db      	lsls	r3, r3, #7
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e00a      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8005858:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <HAL_RCC_GetSysClockFreq+0xa4>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2238      	movs	r2, #56	@ 0x38
 800585e:	4013      	ands	r3, r2
 8005860:	2b10      	cmp	r3, #16
 8005862:	d102      	bne.n	800586a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8005864:	4b08      	ldr	r3, [pc, #32]	@ (8005888 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e001      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7fa fc53 	bl	800011c <__udivsi3>
 8005876:	0003      	movs	r3, r0
 8005878:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800587a:	68fb      	ldr	r3, [r7, #12]
}
 800587c:	0018      	movs	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	b004      	add	sp, #16
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000
 8005888:	02dc6c00 	.word	0x02dc6c00
 800588c:	007a1200 	.word	0x007a1200

08005890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005894:	f7ff ffa4 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 8005898:	0001      	movs	r1, r0
 800589a:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <HAL_RCC_GetHCLKFreq+0x30>)
 800589c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	220f      	movs	r2, #15
 80058a2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80058a4:	4b07      	ldr	r3, [pc, #28]	@ (80058c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80058a6:	0092      	lsls	r2, r2, #2
 80058a8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80058aa:	221f      	movs	r2, #31
 80058ac:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80058ae:	000a      	movs	r2, r1
 80058b0:	40da      	lsrs	r2, r3
 80058b2:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <HAL_RCC_GetHCLKFreq+0x38>)
 80058b4:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80058b6:	4b04      	ldr	r3, [pc, #16]	@ (80058c8 <HAL_RCC_GetHCLKFreq+0x38>)
 80058b8:	681b      	ldr	r3, [r3, #0]
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40021000 	.word	0x40021000
 80058c4:	08009a9c 	.word	0x08009a9c
 80058c8:	20000064 	.word	0x20000064

080058cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80058d0:	f7ff ffde 	bl	8005890 <HAL_RCC_GetHCLKFreq>
 80058d4:	0001      	movs	r1, r0
 80058d6:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	0b1b      	lsrs	r3, r3, #12
 80058dc:	2207      	movs	r2, #7
 80058de:	401a      	ands	r2, r3
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80058e2:	0092      	lsls	r2, r2, #2
 80058e4:	58d3      	ldr	r3, [r2, r3]
 80058e6:	221f      	movs	r2, #31
 80058e8:	4013      	ands	r3, r2
 80058ea:	40d9      	lsrs	r1, r3
 80058ec:	000b      	movs	r3, r1
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40021000 	.word	0x40021000
 80058f8:	08009adc 	.word	0x08009adc

080058fc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005904:	2313      	movs	r3, #19
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800590c:	2312      	movs	r3, #18
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2240      	movs	r2, #64	@ 0x40
 800591a:	4013      	ands	r3, r2
 800591c:	d100      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800591e:	e079      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005920:	2011      	movs	r0, #17
 8005922:	183b      	adds	r3, r7, r0
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005928:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800592a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	055b      	lsls	r3, r3, #21
 8005930:	4013      	ands	r3, r2
 8005932:	d110      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005934:	4b67      	ldr	r3, [pc, #412]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005938:	4b66      	ldr	r3, [pc, #408]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800593a:	2180      	movs	r1, #128	@ 0x80
 800593c:	0549      	lsls	r1, r1, #21
 800593e:	430a      	orrs	r2, r1
 8005940:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005942:	4b64      	ldr	r3, [pc, #400]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005946:	2380      	movs	r3, #128	@ 0x80
 8005948:	055b      	lsls	r3, r3, #21
 800594a:	4013      	ands	r3, r2
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005950:	183b      	adds	r3, r7, r0
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005956:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005958:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800595a:	23c0      	movs	r3, #192	@ 0xc0
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4013      	ands	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d019      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d014      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005972:	4b58      	ldr	r3, [pc, #352]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005976:	4a58      	ldr	r2, [pc, #352]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005978:	4013      	ands	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800597c:	4b55      	ldr	r3, [pc, #340]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800597e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005980:	4b54      	ldr	r3, [pc, #336]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005982:	2180      	movs	r1, #128	@ 0x80
 8005984:	0249      	lsls	r1, r1, #9
 8005986:	430a      	orrs	r2, r1
 8005988:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800598a:	4b52      	ldr	r3, [pc, #328]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800598c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800598e:	4b51      	ldr	r3, [pc, #324]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005990:	4952      	ldr	r1, [pc, #328]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005992:	400a      	ands	r2, r1
 8005994:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005996:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2201      	movs	r2, #1
 80059a0:	4013      	ands	r3, r2
 80059a2:	d016      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fc fcf0 	bl	8002388 <HAL_GetTick>
 80059a8:	0003      	movs	r3, r0
 80059aa:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80059ac:	e00c      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fc fceb 	bl	8002388 <HAL_GetTick>
 80059b2:	0002      	movs	r2, r0
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	4a49      	ldr	r2, [pc, #292]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d904      	bls.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80059be:	2313      	movs	r3, #19
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2203      	movs	r2, #3
 80059c4:	701a      	strb	r2, [r3, #0]
          break;
 80059c6:	e004      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80059c8:	4b42      	ldr	r3, [pc, #264]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059cc:	2202      	movs	r2, #2
 80059ce:	4013      	ands	r3, r2
 80059d0:	d0ed      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80059d2:	2313      	movs	r3, #19
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059dc:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	0019      	movs	r1, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059ec:	430a      	orrs	r2, r1
 80059ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059f0:	e005      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f2:	2312      	movs	r3, #18
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	2213      	movs	r2, #19
 80059f8:	18ba      	adds	r2, r7, r2
 80059fa:	7812      	ldrb	r2, [r2, #0]
 80059fc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059fe:	2311      	movs	r3, #17
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d105      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a08:	4b32      	ldr	r3, [pc, #200]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a0c:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a0e:	4935      	ldr	r1, [pc, #212]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a22:	2203      	movs	r2, #3
 8005a24:	4393      	bics	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2202      	movs	r2, #2
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a3c:	4b25      	ldr	r3, [pc, #148]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a40:	4a29      	ldr	r2, [pc, #164]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	4b22      	ldr	r3, [pc, #136]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2220      	movs	r2, #32
 8005a56:	4013      	ands	r3, r2
 8005a58:	d008      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	0899      	lsrs	r1, r3, #2
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2208      	movs	r2, #8
 8005a72:	4013      	ands	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a76:	4b17      	ldr	r3, [pc, #92]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	0019      	movs	r1, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a86:	430a      	orrs	r2, r1
 8005a88:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	4013      	ands	r3, r2
 8005a92:	d009      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005a94:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a98:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	0019      	movs	r1, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2280      	movs	r2, #128	@ 0x80
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005ab2:	4b08      	ldr	r3, [pc, #32]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	22e0      	movs	r2, #224	@ 0xe0
 8005ab8:	4393      	bics	r3, r2
 8005aba:	0019      	movs	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	4b04      	ldr	r3, [pc, #16]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005ac6:	2312      	movs	r3, #18
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	781b      	ldrb	r3, [r3, #0]
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b006      	add	sp, #24
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	fffffcff 	.word	0xfffffcff
 8005adc:	fffeffff 	.word	0xfffeffff
 8005ae0:	00001388 	.word	0x00001388
 8005ae4:	efffffff 	.word	0xefffffff
 8005ae8:	ffffcfff 	.word	0xffffcfff
 8005aec:	ffffefff 	.word	0xffffefff
 8005af0:	ffff3fff 	.word	0xffff3fff

08005af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0a8      	b.n	8005c58 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	2382      	movs	r3, #130	@ 0x82
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d009      	beq.n	8005b2e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	61da      	str	r2, [r3, #28]
 8005b20:	e005      	b.n	8005b2e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	225d      	movs	r2, #93	@ 0x5d
 8005b38:	5c9b      	ldrb	r3, [r3, r2]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d107      	bne.n	8005b50 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	225c      	movs	r2, #92	@ 0x5c
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f7fc f890 	bl	8001c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	225d      	movs	r2, #93	@ 0x5d
 8005b54:	2102      	movs	r1, #2
 8005b56:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2140      	movs	r1, #64	@ 0x40
 8005b64:	438a      	bics	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	23e0      	movs	r3, #224	@ 0xe0
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d902      	bls.n	8005b7a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e002      	b.n	8005b80 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	015b      	lsls	r3, r3, #5
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	23f0      	movs	r3, #240	@ 0xf0
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d008      	beq.n	8005b9e <HAL_SPI_Init+0xaa>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	23e0      	movs	r3, #224	@ 0xe0
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	2382      	movs	r3, #130	@ 0x82
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6899      	ldr	r1, [r3, #8]
 8005bac:	2384      	movs	r3, #132	@ 0x84
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	400b      	ands	r3, r1
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2102      	movs	r1, #2
 8005bba:	400b      	ands	r3, r1
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	400b      	ands	r3, r1
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6999      	ldr	r1, [r3, #24]
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	400b      	ands	r3, r1
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	2138      	movs	r1, #56	@ 0x38
 8005bda:	400b      	ands	r3, r1
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	400b      	ands	r3, r1
 8005be6:	431a      	orrs	r2, r3
 8005be8:	0011      	movs	r1, r2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bee:	2380      	movs	r3, #128	@ 0x80
 8005bf0:	019b      	lsls	r3, r3, #6
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	2204      	movs	r2, #4
 8005c04:	401a      	ands	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0a:	2110      	movs	r1, #16
 8005c0c:	400b      	ands	r3, r1
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c14:	2108      	movs	r1, #8
 8005c16:	400b      	ands	r3, r1
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68d9      	ldr	r1, [r3, #12]
 8005c1e:	23f0      	movs	r3, #240	@ 0xf0
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	400b      	ands	r3, r1
 8005c24:	431a      	orrs	r2, r3
 8005c26:	0011      	movs	r1, r2
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	2380      	movs	r3, #128	@ 0x80
 8005c2c:	015b      	lsls	r3, r3, #5
 8005c2e:	401a      	ands	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4907      	ldr	r1, [pc, #28]	@ (8005c60 <HAL_SPI_Init+0x16c>)
 8005c44:	400a      	ands	r2, r1
 8005c46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	225d      	movs	r2, #93	@ 0x5d
 8005c52:	2101      	movs	r1, #1
 8005c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b004      	add	sp, #16
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	fffff7ff 	.word	0xfffff7ff

08005c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e04a      	b.n	8005d0c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	223d      	movs	r2, #61	@ 0x3d
 8005c7a:	5c9b      	ldrb	r3, [r3, r2]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	223c      	movs	r2, #60	@ 0x3c
 8005c86:	2100      	movs	r1, #0
 8005c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7fc f895 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	223d      	movs	r2, #61	@ 0x3d
 8005c96:	2102      	movs	r1, #2
 8005c98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	0019      	movs	r1, r3
 8005ca4:	0010      	movs	r0, r2
 8005ca6:	f000 f98d 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2248      	movs	r2, #72	@ 0x48
 8005cae:	2101      	movs	r1, #1
 8005cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	223e      	movs	r2, #62	@ 0x3e
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	5499      	strb	r1, [r3, r2]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	223f      	movs	r2, #63	@ 0x3f
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	5499      	strb	r1, [r3, r2]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2240      	movs	r2, #64	@ 0x40
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	5499      	strb	r1, [r3, r2]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2241      	movs	r2, #65	@ 0x41
 8005cce:	2101      	movs	r1, #1
 8005cd0:	5499      	strb	r1, [r3, r2]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2242      	movs	r2, #66	@ 0x42
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	5499      	strb	r1, [r3, r2]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2243      	movs	r2, #67	@ 0x43
 8005cde:	2101      	movs	r1, #1
 8005ce0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2244      	movs	r2, #68	@ 0x44
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	5499      	strb	r1, [r3, r2]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2245      	movs	r2, #69	@ 0x45
 8005cee:	2101      	movs	r1, #1
 8005cf0:	5499      	strb	r1, [r3, r2]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2246      	movs	r2, #70	@ 0x46
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	5499      	strb	r1, [r3, r2]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2247      	movs	r2, #71	@ 0x47
 8005cfe:	2101      	movs	r1, #1
 8005d00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	223d      	movs	r2, #61	@ 0x3d
 8005d06:	2101      	movs	r1, #1
 8005d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e04a      	b.n	8005dbc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	223d      	movs	r2, #61	@ 0x3d
 8005d2a:	5c9b      	ldrb	r3, [r3, r2]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	223c      	movs	r2, #60	@ 0x3c
 8005d36:	2100      	movs	r1, #0
 8005d38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7fc f81d 	bl	8001d7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	223d      	movs	r2, #61	@ 0x3d
 8005d46:	2102      	movs	r1, #2
 8005d48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3304      	adds	r3, #4
 8005d52:	0019      	movs	r1, r3
 8005d54:	0010      	movs	r0, r2
 8005d56:	f000 f935 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2248      	movs	r2, #72	@ 0x48
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	223e      	movs	r2, #62	@ 0x3e
 8005d66:	2101      	movs	r1, #1
 8005d68:	5499      	strb	r1, [r3, r2]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	223f      	movs	r2, #63	@ 0x3f
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2240      	movs	r2, #64	@ 0x40
 8005d76:	2101      	movs	r1, #1
 8005d78:	5499      	strb	r1, [r3, r2]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2241      	movs	r2, #65	@ 0x41
 8005d7e:	2101      	movs	r1, #1
 8005d80:	5499      	strb	r1, [r3, r2]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2242      	movs	r2, #66	@ 0x42
 8005d86:	2101      	movs	r1, #1
 8005d88:	5499      	strb	r1, [r3, r2]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2243      	movs	r2, #67	@ 0x43
 8005d8e:	2101      	movs	r1, #1
 8005d90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2244      	movs	r2, #68	@ 0x44
 8005d96:	2101      	movs	r1, #1
 8005d98:	5499      	strb	r1, [r3, r2]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2245      	movs	r2, #69	@ 0x45
 8005d9e:	2101      	movs	r1, #1
 8005da0:	5499      	strb	r1, [r3, r2]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2246      	movs	r2, #70	@ 0x46
 8005da6:	2101      	movs	r1, #1
 8005da8:	5499      	strb	r1, [r3, r2]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2247      	movs	r2, #71	@ 0x47
 8005dae:	2101      	movs	r1, #1
 8005db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	223d      	movs	r2, #61	@ 0x3d
 8005db6:	2101      	movs	r1, #1
 8005db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	2317      	movs	r3, #23
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	223c      	movs	r2, #60	@ 0x3c
 8005ddc:	5c9b      	ldrb	r3, [r3, r2]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e0e5      	b.n	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	223c      	movs	r2, #60	@ 0x3c
 8005dea:	2101      	movs	r1, #1
 8005dec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b14      	cmp	r3, #20
 8005df2:	d900      	bls.n	8005df6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005df4:	e0d1      	b.n	8005f9a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	009a      	lsls	r2, r3, #2
 8005dfa:	4b70      	ldr	r3, [pc, #448]	@ (8005fbc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005dfc:	18d3      	adds	r3, r2, r3
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0011      	movs	r1, r2
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 f95e 	bl	80060cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2108      	movs	r1, #8
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	438a      	bics	r2, r1
 8005e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6999      	ldr	r1, [r3, #24]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	619a      	str	r2, [r3, #24]
      break;
 8005e42:	e0af      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	0011      	movs	r1, r2
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f000 f9bd 	bl	80061cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2180      	movs	r1, #128	@ 0x80
 8005e5e:	0109      	lsls	r1, r1, #4
 8005e60:	430a      	orrs	r2, r1
 8005e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4954      	ldr	r1, [pc, #336]	@ (8005fc0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e70:	400a      	ands	r2, r1
 8005e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6999      	ldr	r1, [r3, #24]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	619a      	str	r2, [r3, #24]
      break;
 8005e88:	e08c      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	0011      	movs	r1, r2
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 fa18 	bl	80062c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2108      	movs	r1, #8
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69da      	ldr	r2, [r3, #28]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2104      	movs	r1, #4
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69d9      	ldr	r1, [r3, #28]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	61da      	str	r2, [r3, #28]
      break;
 8005eca:	e06b      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	0011      	movs	r1, r2
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 fa79 	bl	80063cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2180      	movs	r1, #128	@ 0x80
 8005ee6:	0109      	lsls	r1, r1, #4
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4932      	ldr	r1, [pc, #200]	@ (8005fc0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ef8:	400a      	ands	r2, r1
 8005efa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69d9      	ldr	r1, [r3, #28]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	021a      	lsls	r2, r3, #8
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	61da      	str	r2, [r3, #28]
      break;
 8005f10:	e048      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	0011      	movs	r1, r2
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f000 faba 	bl	8006494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2108      	movs	r1, #8
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	438a      	bics	r2, r1
 8005f3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f52:	e027      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 faf3 	bl	8006548 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2180      	movs	r1, #128	@ 0x80
 8005f6e:	0109      	lsls	r1, r1, #4
 8005f70:	430a      	orrs	r2, r1
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4910      	ldr	r1, [pc, #64]	@ (8005fc0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f98:	e004      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005f9a:	2317      	movs	r3, #23
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
      break;
 8005fa2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	223c      	movs	r2, #60	@ 0x3c
 8005fa8:	2100      	movs	r1, #0
 8005faa:	5499      	strb	r1, [r3, r2]

  return status;
 8005fac:	2317      	movs	r3, #23
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	781b      	ldrb	r3, [r3, #0]
}
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b006      	add	sp, #24
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	08009afc 	.word	0x08009afc
 8005fc0:	fffffbff 	.word	0xfffffbff

08005fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a37      	ldr	r2, [pc, #220]	@ (80060b4 <TIM_Base_SetConfig+0xf0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d008      	beq.n	8005fee <TIM_Base_SetConfig+0x2a>
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	2380      	movs	r3, #128	@ 0x80
 8005fe0:	05db      	lsls	r3, r3, #23
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0x2a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a33      	ldr	r2, [pc, #204]	@ (80060b8 <TIM_Base_SetConfig+0xf4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2270      	movs	r2, #112	@ 0x70
 8005ff2:	4393      	bics	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2c      	ldr	r2, [pc, #176]	@ (80060b4 <TIM_Base_SetConfig+0xf0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d014      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	2380      	movs	r3, #128	@ 0x80
 800600c:	05db      	lsls	r3, r3, #23
 800600e:	429a      	cmp	r2, r3
 8006010:	d00f      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a28      	ldr	r2, [pc, #160]	@ (80060b8 <TIM_Base_SetConfig+0xf4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00b      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a27      	ldr	r2, [pc, #156]	@ (80060bc <TIM_Base_SetConfig+0xf8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <TIM_Base_SetConfig+0xfc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_Base_SetConfig+0x6e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a25      	ldr	r2, [pc, #148]	@ (80060c4 <TIM_Base_SetConfig+0x100>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d108      	bne.n	8006044 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a24      	ldr	r2, [pc, #144]	@ (80060c8 <TIM_Base_SetConfig+0x104>)
 8006036:	4013      	ands	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2280      	movs	r2, #128	@ 0x80
 8006048:	4393      	bics	r3, r2
 800604a:	001a      	movs	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <TIM_Base_SetConfig+0xf0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a12      	ldr	r2, [pc, #72]	@ (80060c0 <TIM_Base_SetConfig+0xfc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0xbe>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a11      	ldr	r2, [pc, #68]	@ (80060c4 <TIM_Base_SetConfig+0x100>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d103      	bne.n	800608a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2201      	movs	r2, #1
 8006096:	4013      	ands	r3, r2
 8006098:	2b01      	cmp	r3, #1
 800609a:	d106      	bne.n	80060aa <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2201      	movs	r2, #1
 80060a2:	4393      	bics	r3, r2
 80060a4:	001a      	movs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]
  }
}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40002000 	.word	0x40002000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	fffffcff 	.word	0xfffffcff

080060cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	2201      	movs	r2, #1
 80060e2:	4393      	bics	r3, r2
 80060e4:	001a      	movs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a2e      	ldr	r2, [pc, #184]	@ (80061b4 <TIM_OC1_SetConfig+0xe8>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2203      	movs	r2, #3
 8006102:	4393      	bics	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2202      	movs	r2, #2
 8006114:	4393      	bics	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <TIM_OC1_SetConfig+0xec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_OC1_SetConfig+0x6e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <TIM_OC1_SetConfig+0xf0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_OC1_SetConfig+0x6e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <TIM_OC1_SetConfig+0xf4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d10c      	bne.n	8006154 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2208      	movs	r2, #8
 800613e:	4393      	bics	r3, r2
 8006140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2204      	movs	r2, #4
 8006150:	4393      	bics	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <TIM_OC1_SetConfig+0xec>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_OC1_SetConfig+0xa0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <TIM_OC1_SetConfig+0xf0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC1_SetConfig+0xa0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <TIM_OC1_SetConfig+0xf4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d111      	bne.n	8006190 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <TIM_OC1_SetConfig+0xf8>)
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <TIM_OC1_SetConfig+0xfc>)
 8006178:	4013      	ands	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b006      	add	sp, #24
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			@ (mov r8, r8)
 80061b4:	fffeff8f 	.word	0xfffeff8f
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800
 80061c4:	fffffeff 	.word	0xfffffeff
 80061c8:	fffffdff 	.word	0xfffffdff

080061cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	2210      	movs	r2, #16
 80061e2:	4393      	bics	r3, r2
 80061e4:	001a      	movs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <TIM_OC2_SetConfig+0xe0>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a2b      	ldr	r2, [pc, #172]	@ (80062b0 <TIM_OC2_SetConfig+0xe4>)
 8006202:	4013      	ands	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2220      	movs	r2, #32
 8006216:	4393      	bics	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <TIM_OC2_SetConfig+0xe8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10d      	bne.n	800624a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2280      	movs	r2, #128	@ 0x80
 8006232:	4393      	bics	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2240      	movs	r2, #64	@ 0x40
 8006246:	4393      	bics	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <TIM_OC2_SetConfig+0xe8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_OC2_SetConfig+0x96>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <TIM_OC2_SetConfig+0xec>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_OC2_SetConfig+0x96>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <TIM_OC2_SetConfig+0xf0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d113      	bne.n	800628a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4a16      	ldr	r2, [pc, #88]	@ (80062c0 <TIM_OC2_SetConfig+0xf4>)
 8006266:	4013      	ands	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <TIM_OC2_SetConfig+0xf8>)
 800626e:	4013      	ands	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b006      	add	sp, #24
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	feff8fff 	.word	0xfeff8fff
 80062b0:	fffffcff 	.word	0xfffffcff
 80062b4:	40012c00 	.word	0x40012c00
 80062b8:	40014400 	.word	0x40014400
 80062bc:	40014800 	.word	0x40014800
 80062c0:	fffffbff 	.word	0xfffffbff
 80062c4:	fffff7ff 	.word	0xfffff7ff

080062c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4a31      	ldr	r2, [pc, #196]	@ (80063a4 <TIM_OC3_SetConfig+0xdc>)
 80062de:	401a      	ands	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a2d      	ldr	r2, [pc, #180]	@ (80063a8 <TIM_OC3_SetConfig+0xe0>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2203      	movs	r2, #3
 80062fc:	4393      	bics	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	4a27      	ldr	r2, [pc, #156]	@ (80063ac <TIM_OC3_SetConfig+0xe4>)
 800630e:	4013      	ands	r3, r2
 8006310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a23      	ldr	r2, [pc, #140]	@ (80063b0 <TIM_OC3_SetConfig+0xe8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10d      	bne.n	8006342 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	4a22      	ldr	r2, [pc, #136]	@ (80063b4 <TIM_OC3_SetConfig+0xec>)
 800632a:	4013      	ands	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4a1e      	ldr	r2, [pc, #120]	@ (80063b8 <TIM_OC3_SetConfig+0xf0>)
 800633e:	4013      	ands	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1a      	ldr	r2, [pc, #104]	@ (80063b0 <TIM_OC3_SetConfig+0xe8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d007      	beq.n	800635a <TIM_OC3_SetConfig+0x92>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <TIM_OC3_SetConfig+0xf4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC3_SetConfig+0x92>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1a      	ldr	r2, [pc, #104]	@ (80063c0 <TIM_OC3_SetConfig+0xf8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d113      	bne.n	8006382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4a19      	ldr	r2, [pc, #100]	@ (80063c4 <TIM_OC3_SetConfig+0xfc>)
 800635e:	4013      	ands	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4a18      	ldr	r2, [pc, #96]	@ (80063c8 <TIM_OC3_SetConfig+0x100>)
 8006366:	4013      	ands	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	46c0      	nop			@ (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b006      	add	sp, #24
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	fffffeff 	.word	0xfffffeff
 80063a8:	fffeff8f 	.word	0xfffeff8f
 80063ac:	fffffdff 	.word	0xfffffdff
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	fffff7ff 	.word	0xfffff7ff
 80063b8:	fffffbff 	.word	0xfffffbff
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800
 80063c4:	ffffefff 	.word	0xffffefff
 80063c8:	ffffdfff 	.word	0xffffdfff

080063cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	4a24      	ldr	r2, [pc, #144]	@ (8006474 <TIM_OC4_SetConfig+0xa8>)
 80063e2:	401a      	ands	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a20      	ldr	r2, [pc, #128]	@ (8006478 <TIM_OC4_SetConfig+0xac>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4a1f      	ldr	r2, [pc, #124]	@ (800647c <TIM_OC4_SetConfig+0xb0>)
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <TIM_OC4_SetConfig+0xb4>)
 8006414:	4013      	ands	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	031b      	lsls	r3, r3, #12
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <TIM_OC4_SetConfig+0xb8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d007      	beq.n	800643c <TIM_OC4_SetConfig+0x70>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <TIM_OC4_SetConfig+0xbc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC4_SetConfig+0x70>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a15      	ldr	r2, [pc, #84]	@ (800648c <TIM_OC4_SetConfig+0xc0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d109      	bne.n	8006450 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4a14      	ldr	r2, [pc, #80]	@ (8006490 <TIM_OC4_SetConfig+0xc4>)
 8006440:	4013      	ands	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	019b      	lsls	r3, r3, #6
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b006      	add	sp, #24
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	ffffefff 	.word	0xffffefff
 8006478:	feff8fff 	.word	0xfeff8fff
 800647c:	fffffcff 	.word	0xfffffcff
 8006480:	ffffdfff 	.word	0xffffdfff
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40014400 	.word	0x40014400
 800648c:	40014800 	.word	0x40014800
 8006490:	ffffbfff 	.word	0xffffbfff

08006494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	4a21      	ldr	r2, [pc, #132]	@ (8006530 <TIM_OC5_SetConfig+0x9c>)
 80064aa:	401a      	ands	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <TIM_OC5_SetConfig+0xa0>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4a19      	ldr	r2, [pc, #100]	@ (8006538 <TIM_OC5_SetConfig+0xa4>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	041b      	lsls	r3, r3, #16
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a15      	ldr	r2, [pc, #84]	@ (800653c <TIM_OC5_SetConfig+0xa8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_OC5_SetConfig+0x66>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a14      	ldr	r2, [pc, #80]	@ (8006540 <TIM_OC5_SetConfig+0xac>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC5_SetConfig+0x66>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a13      	ldr	r2, [pc, #76]	@ (8006544 <TIM_OC5_SetConfig+0xb0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d109      	bne.n	800650e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4a0c      	ldr	r2, [pc, #48]	@ (8006530 <TIM_OC5_SetConfig+0x9c>)
 80064fe:	4013      	ands	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	46c0      	nop			@ (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b006      	add	sp, #24
 800652e:	bd80      	pop	{r7, pc}
 8006530:	fffeffff 	.word	0xfffeffff
 8006534:	fffeff8f 	.word	0xfffeff8f
 8006538:	fffdffff 	.word	0xfffdffff
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40014400 	.word	0x40014400
 8006544:	40014800 	.word	0x40014800

08006548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	4a22      	ldr	r2, [pc, #136]	@ (80065e8 <TIM_OC6_SetConfig+0xa0>)
 800655e:	401a      	ands	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <TIM_OC6_SetConfig+0xa4>)
 8006574:	4013      	ands	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <TIM_OC6_SetConfig+0xa8>)
 8006588:	4013      	ands	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	051b      	lsls	r3, r3, #20
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a16      	ldr	r2, [pc, #88]	@ (80065f4 <TIM_OC6_SetConfig+0xac>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d007      	beq.n	80065b0 <TIM_OC6_SetConfig+0x68>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a15      	ldr	r2, [pc, #84]	@ (80065f8 <TIM_OC6_SetConfig+0xb0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_OC6_SetConfig+0x68>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a14      	ldr	r2, [pc, #80]	@ (80065fc <TIM_OC6_SetConfig+0xb4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d109      	bne.n	80065c4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4a13      	ldr	r2, [pc, #76]	@ (8006600 <TIM_OC6_SetConfig+0xb8>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	46c0      	nop			@ (mov r8, r8)
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b006      	add	sp, #24
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			@ (mov r8, r8)
 80065e8:	ffefffff 	.word	0xffefffff
 80065ec:	feff8fff 	.word	0xfeff8fff
 80065f0:	ffdfffff 	.word	0xffdfffff
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	fffbffff 	.word	0xfffbffff

08006604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	223c      	movs	r2, #60	@ 0x3c
 8006612:	5c9b      	ldrb	r3, [r3, r2]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006618:	2302      	movs	r3, #2
 800661a:	e050      	b.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	223c      	movs	r2, #60	@ 0x3c
 8006620:	2101      	movs	r1, #1
 8006622:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	223d      	movs	r2, #61	@ 0x3d
 8006628:	2102      	movs	r1, #2
 800662a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a21      	ldr	r2, [pc, #132]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d108      	bne.n	8006658 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4a20      	ldr	r2, [pc, #128]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800664a:	4013      	ands	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2270      	movs	r2, #112	@ 0x70
 800665c:	4393      	bics	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a14      	ldr	r2, [pc, #80]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00a      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2380      	movs	r3, #128	@ 0x80
 8006682:	05db      	lsls	r3, r3, #23
 8006684:	429a      	cmp	r2, r3
 8006686:	d004      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a10      	ldr	r2, [pc, #64]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10c      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2280      	movs	r2, #128	@ 0x80
 8006696:	4393      	bics	r3, r2
 8006698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	223d      	movs	r2, #61	@ 0x3d
 80066b0:	2101      	movs	r1, #1
 80066b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	223c      	movs	r2, #60	@ 0x3c
 80066b8:	2100      	movs	r1, #0
 80066ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	0018      	movs	r0, r3
 80066c0:	46bd      	mov	sp, r7
 80066c2:	b004      	add	sp, #16
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	ff0fffff 	.word	0xff0fffff
 80066d0:	40000400 	.word	0x40000400

080066d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	223c      	movs	r2, #60	@ 0x3c
 80066e6:	5c9b      	ldrb	r3, [r3, r2]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e06f      	b.n	80067d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	223c      	movs	r2, #60	@ 0x3c
 80066f4:	2101      	movs	r1, #1
 80066f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	22ff      	movs	r2, #255	@ 0xff
 80066fc:	4393      	bics	r3, r2
 80066fe:	001a      	movs	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a33      	ldr	r2, [pc, #204]	@ (80067d8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800670c:	401a      	ands	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a30      	ldr	r2, [pc, #192]	@ (80067dc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800671a:	401a      	ands	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a2e      	ldr	r2, [pc, #184]	@ (80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006728:	401a      	ands	r2, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a2b      	ldr	r2, [pc, #172]	@ (80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006736:	401a      	ands	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a29      	ldr	r2, [pc, #164]	@ (80067e8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006744:	401a      	ands	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a26      	ldr	r2, [pc, #152]	@ (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006752:	401a      	ands	r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4a24      	ldr	r2, [pc, #144]	@ (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006760:	401a      	ands	r2, r3
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	041b      	lsls	r3, r3, #16
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a21      	ldr	r2, [pc, #132]	@ (80067f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006770:	401a      	ands	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d11c      	bne.n	80067be <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006788:	401a      	ands	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	051b      	lsls	r3, r3, #20
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a1a      	ldr	r2, [pc, #104]	@ (8006800 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006798:	401a      	ands	r2, r3
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a17      	ldr	r2, [pc, #92]	@ (8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80067a6:	401a      	ands	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a15      	ldr	r2, [pc, #84]	@ (8006808 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80067b4:	401a      	ands	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	223c      	movs	r2, #60	@ 0x3c
 80067ca:	2100      	movs	r1, #0
 80067cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	0018      	movs	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b004      	add	sp, #16
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	fffffcff 	.word	0xfffffcff
 80067dc:	fffffbff 	.word	0xfffffbff
 80067e0:	fffff7ff 	.word	0xfffff7ff
 80067e4:	ffffefff 	.word	0xffffefff
 80067e8:	ffffdfff 	.word	0xffffdfff
 80067ec:	ffffbfff 	.word	0xffffbfff
 80067f0:	fff0ffff 	.word	0xfff0ffff
 80067f4:	efffffff 	.word	0xefffffff
 80067f8:	40012c00 	.word	0x40012c00
 80067fc:	ff0fffff 	.word	0xff0fffff
 8006800:	feffffff 	.word	0xfeffffff
 8006804:	fdffffff 	.word	0xfdffffff
 8006808:	dfffffff 	.word	0xdfffffff

0800680c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	@ 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	1dbb      	adds	r3, r7, #6
 8006818:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2288      	movs	r2, #136	@ 0x88
 800681e:	589b      	ldr	r3, [r3, r2]
 8006820:	2b20      	cmp	r3, #32
 8006822:	d000      	beq.n	8006826 <HAL_UART_Transmit_IT+0x1a>
 8006824:	e08d      	b.n	8006942 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_UART_Transmit_IT+0x28>
 800682c:	1dbb      	adds	r3, r7, #6
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e085      	b.n	8006944 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	2380      	movs	r3, #128	@ 0x80
 800683e:	015b      	lsls	r3, r3, #5
 8006840:	429a      	cmp	r2, r3
 8006842:	d109      	bne.n	8006858 <HAL_UART_Transmit_IT+0x4c>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2201      	movs	r2, #1
 8006850:	4013      	ands	r3, r2
 8006852:	d001      	beq.n	8006858 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e075      	b.n	8006944 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1dba      	adds	r2, r7, #6
 8006862:	2154      	movs	r1, #84	@ 0x54
 8006864:	8812      	ldrh	r2, [r2, #0]
 8006866:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1dba      	adds	r2, r7, #6
 800686c:	2156      	movs	r1, #86	@ 0x56
 800686e:	8812      	ldrh	r2, [r2, #0]
 8006870:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2290      	movs	r2, #144	@ 0x90
 800687c:	2100      	movs	r1, #0
 800687e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2288      	movs	r2, #136	@ 0x88
 8006884:	2121      	movs	r1, #33	@ 0x21
 8006886:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800688c:	2380      	movs	r3, #128	@ 0x80
 800688e:	059b      	lsls	r3, r3, #22
 8006890:	429a      	cmp	r2, r3
 8006892:	d12a      	bne.n	80068ea <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	2380      	movs	r3, #128	@ 0x80
 800689a:	015b      	lsls	r3, r3, #5
 800689c:	429a      	cmp	r2, r3
 800689e:	d107      	bne.n	80068b0 <HAL_UART_Transmit_IT+0xa4>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d103      	bne.n	80068b0 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a28      	ldr	r2, [pc, #160]	@ (800694c <HAL_UART_Transmit_IT+0x140>)
 80068ac:	679a      	str	r2, [r3, #120]	@ 0x78
 80068ae:	e002      	b.n	80068b6 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a27      	ldr	r2, [pc, #156]	@ (8006950 <HAL_UART_Transmit_IT+0x144>)
 80068b4:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80068b6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80068bc:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80068be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c0:	2301      	movs	r3, #1
 80068c2:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	f383 8810 	msr	PRIMASK, r3
}
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2180      	movs	r1, #128	@ 0x80
 80068d8:	0409      	lsls	r1, r1, #16
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	f383 8810 	msr	PRIMASK, r3
}
 80068e8:	e029      	b.n	800693e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	2380      	movs	r3, #128	@ 0x80
 80068f0:	015b      	lsls	r3, r3, #5
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d107      	bne.n	8006906 <HAL_UART_Transmit_IT+0xfa>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4a14      	ldr	r2, [pc, #80]	@ (8006954 <HAL_UART_Transmit_IT+0x148>)
 8006902:	679a      	str	r2, [r3, #120]	@ 0x78
 8006904:	e002      	b.n	800690c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a13      	ldr	r2, [pc, #76]	@ (8006958 <HAL_UART_Transmit_IT+0x14c>)
 800690a:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800690c:	f3ef 8310 	mrs	r3, PRIMASK
 8006910:	613b      	str	r3, [r7, #16]
  return(result);
 8006912:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006916:	2301      	movs	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f383 8810 	msr	PRIMASK, r3
}
 8006920:	46c0      	nop			@ (mov r8, r8)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2180      	movs	r1, #128	@ 0x80
 800692e:	430a      	orrs	r2, r1
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006934:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	f383 8810 	msr	PRIMASK, r3
}
 800693c:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006942:	2302      	movs	r3, #2
  }
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b00c      	add	sp, #48	@ 0x30
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08008159 	.word	0x08008159
 8006950:	0800806d 	.word	0x0800806d
 8006954:	08007fad 	.word	0x08007fad
 8006958:	08007ef9 	.word	0x08007ef9

0800695c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b098      	sub	sp, #96	@ 0x60
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8006964:	2301      	movs	r3, #1
 8006966:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006968:	f3ef 8310 	mrs	r3, PRIMASK
 800696c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8006970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006972:	2301      	movs	r3, #1
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006978:	f383 8810 	msr	PRIMASK, r3
}
 800697c:	46c0      	nop			@ (mov r8, r8)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	498a      	ldr	r1, [pc, #552]	@ (8006bb4 <HAL_UART_Abort_IT+0x258>)
 800698a:	400a      	ands	r2, r1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006990:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	f383 8810 	msr	PRIMASK, r3
}
 8006998:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800699a:	f3ef 8310 	mrs	r3, PRIMASK
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80069a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80069a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069a4:	2301      	movs	r3, #1
 80069a6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	497f      	ldr	r1, [pc, #508]	@ (8006bb8 <HAL_UART_Abort_IT+0x25c>)
 80069bc:	400a      	ands	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069c2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069c6:	f383 8810 	msr	PRIMASK, r3
}
 80069ca:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d118      	bne.n	8006a06 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80069d4:	f3ef 8310 	mrs	r3, PRIMASK
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80069dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80069de:	2301      	movs	r3, #1
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	f383 8810 	msr	PRIMASK, r3
}
 80069e8:	46c0      	nop			@ (mov r8, r8)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2110      	movs	r1, #16
 80069f6:	438a      	bics	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a00:	f383 8810 	msr	PRIMASK, r3
}
 8006a04:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00f      	beq.n	8006a2e <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2280      	movs	r2, #128	@ 0x80
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b80      	cmp	r3, #128	@ 0x80
 8006a1a:	d104      	bne.n	8006a26 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a20:	4a66      	ldr	r2, [pc, #408]	@ (8006bbc <HAL_UART_Abort_IT+0x260>)
 8006a22:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a24:	e003      	b.n	8006a2e <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2280      	movs	r2, #128	@ 0x80
 8006a32:	589b      	ldr	r3, [r3, r2]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d011      	beq.n	8006a5c <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2240      	movs	r2, #64	@ 0x40
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b40      	cmp	r3, #64	@ 0x40
 8006a44:	d105      	bne.n	8006a52 <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2280      	movs	r2, #128	@ 0x80
 8006a4a:	589b      	ldr	r3, [r3, r2]
 8006a4c:	4a5c      	ldr	r2, [pc, #368]	@ (8006bc0 <HAL_UART_Abort_IT+0x264>)
 8006a4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a50:	e004      	b.n	8006a5c <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2280      	movs	r2, #128	@ 0x80
 8006a56:	589b      	ldr	r3, [r3, r2]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2280      	movs	r2, #128	@ 0x80
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b80      	cmp	r3, #128	@ 0x80
 8006a68:	d12a      	bne.n	8006ac0 <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a70:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a74:	2301      	movs	r3, #1
 8006a76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f383 8810 	msr	PRIMASK, r3
}
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2180      	movs	r1, #128	@ 0x80
 8006a8c:	438a      	bics	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	f383 8810 	msr	PRIMASK, r3
}
 8006a9a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7fc fb67 	bl	800317c <HAL_DMA_Abort_IT>
 8006aae:	1e03      	subs	r3, r0, #0
 8006ab0:	d004      	beq.n	8006abc <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	639a      	str	r2, [r3, #56]	@ 0x38
 8006aba:	e001      	b.n	8006ac0 <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2240      	movs	r2, #64	@ 0x40
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b40      	cmp	r3, #64	@ 0x40
 8006acc:	d12f      	bne.n	8006b2e <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ace:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad8:	2301      	movs	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f383 8810 	msr	PRIMASK, r3
}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2140      	movs	r1, #64	@ 0x40
 8006af0:	438a      	bics	r2, r1
 8006af2:	609a      	str	r2, [r3, #8]
 8006af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f383 8810 	msr	PRIMASK, r3
}
 8006afe:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2280      	movs	r2, #128	@ 0x80
 8006b04:	589b      	ldr	r3, [r3, r2]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d011      	beq.n	8006b2e <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2280      	movs	r2, #128	@ 0x80
 8006b0e:	589b      	ldr	r3, [r3, r2]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7fc fb33 	bl	800317c <HAL_DMA_Abort_IT>
 8006b16:	1e03      	subs	r3, r0, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2280      	movs	r2, #128	@ 0x80
 8006b1e:	589b      	ldr	r3, [r3, r2]
 8006b20:	2200      	movs	r2, #0
 8006b22:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8006b24:	2301      	movs	r3, #1
 8006b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b28:	e001      	b.n	8006b2e <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8006b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d13a      	bne.n	8006baa <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2256      	movs	r2, #86	@ 0x56
 8006b38:	2100      	movs	r1, #0
 8006b3a:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	225e      	movs	r2, #94	@ 0x5e
 8006b40:	2100      	movs	r1, #0
 8006b42:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2290      	movs	r2, #144	@ 0x90
 8006b54:	2100      	movs	r1, #0
 8006b56:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	220f      	movs	r2, #15
 8006b5e:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006b64:	2380      	movs	r3, #128	@ 0x80
 8006b66:	059b      	lsls	r3, r3, #22
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d107      	bne.n	8006b7c <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2110      	movs	r1, #16
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2108      	movs	r1, #8
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2288      	movs	r2, #136	@ 0x88
 8006b90:	2120      	movs	r1, #32
 8006b92:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	228c      	movs	r2, #140	@ 0x8c
 8006b98:	2120      	movs	r1, #32
 8006b9a:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 fb6b 	bl	8007280 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	0018      	movs	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b018      	add	sp, #96	@ 0x60
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	fffffe1f 	.word	0xfffffe1f
 8006bb8:	ef7ffffe 	.word	0xef7ffffe
 8006bbc:	08007de7 	.word	0x08007de7
 8006bc0:	08007e77 	.word	0x08007e77

08006bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc4:	b5b0      	push	{r4, r5, r7, lr}
 8006bc6:	b0aa      	sub	sp, #168	@ 0xa8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	22a4      	movs	r2, #164	@ 0xa4
 8006bd4:	18b9      	adds	r1, r7, r2
 8006bd6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	20a0      	movs	r0, #160	@ 0xa0
 8006be0:	1839      	adds	r1, r7, r0
 8006be2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	249c      	movs	r4, #156	@ 0x9c
 8006bec:	1939      	adds	r1, r7, r4
 8006bee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bf0:	0011      	movs	r1, r2
 8006bf2:	18bb      	adds	r3, r7, r2
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4aa2      	ldr	r2, [pc, #648]	@ (8006e80 <HAL_UART_IRQHandler+0x2bc>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2298      	movs	r2, #152	@ 0x98
 8006bfc:	18bd      	adds	r5, r7, r2
 8006bfe:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006c00:	18bb      	adds	r3, r7, r2
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11a      	bne.n	8006c3e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c08:	187b      	adds	r3, r7, r1
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d015      	beq.n	8006c3e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c12:	183b      	adds	r3, r7, r0
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2220      	movs	r2, #32
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d105      	bne.n	8006c28 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c1c:	193b      	adds	r3, r7, r4
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	2380      	movs	r3, #128	@ 0x80
 8006c22:	055b      	lsls	r3, r3, #21
 8006c24:	4013      	ands	r3, r2
 8006c26:	d00a      	beq.n	8006c3e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d100      	bne.n	8006c32 <HAL_UART_IRQHandler+0x6e>
 8006c30:	e2fb      	b.n	800722a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	0010      	movs	r0, r2
 8006c3a:	4798      	blx	r3
      }
      return;
 8006c3c:	e2f5      	b.n	800722a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c3e:	2398      	movs	r3, #152	@ 0x98
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d100      	bne.n	8006c4a <HAL_UART_IRQHandler+0x86>
 8006c48:	e122      	b.n	8006e90 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c4a:	239c      	movs	r3, #156	@ 0x9c
 8006c4c:	18fb      	adds	r3, r7, r3
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a8c      	ldr	r2, [pc, #560]	@ (8006e84 <HAL_UART_IRQHandler+0x2c0>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	d106      	bne.n	8006c64 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c56:	23a0      	movs	r3, #160	@ 0xa0
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a8a      	ldr	r2, [pc, #552]	@ (8006e88 <HAL_UART_IRQHandler+0x2c4>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d100      	bne.n	8006c64 <HAL_UART_IRQHandler+0xa0>
 8006c62:	e115      	b.n	8006e90 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c64:	23a4      	movs	r3, #164	@ 0xa4
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d012      	beq.n	8006c96 <HAL_UART_IRQHandler+0xd2>
 8006c70:	23a0      	movs	r3, #160	@ 0xa0
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	2380      	movs	r3, #128	@ 0x80
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d00b      	beq.n	8006c96 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2290      	movs	r2, #144	@ 0x90
 8006c8a:	589b      	ldr	r3, [r3, r2]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2190      	movs	r1, #144	@ 0x90
 8006c94:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c96:	23a4      	movs	r3, #164	@ 0xa4
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d011      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x102>
 8006ca2:	239c      	movs	r3, #156	@ 0x9c
 8006ca4:	18fb      	adds	r3, r7, r3
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	4013      	ands	r3, r2
 8006cac:	d00b      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2290      	movs	r2, #144	@ 0x90
 8006cba:	589b      	ldr	r3, [r3, r2]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2190      	movs	r1, #144	@ 0x90
 8006cc4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cc6:	23a4      	movs	r3, #164	@ 0xa4
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2204      	movs	r2, #4
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d011      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x132>
 8006cd2:	239c      	movs	r3, #156	@ 0x9c
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d00b      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2290      	movs	r2, #144	@ 0x90
 8006cea:	589b      	ldr	r3, [r3, r2]
 8006cec:	2202      	movs	r2, #2
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2190      	movs	r1, #144	@ 0x90
 8006cf4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cf6:	23a4      	movs	r3, #164	@ 0xa4
 8006cf8:	18fb      	adds	r3, r7, r3
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d017      	beq.n	8006d32 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d02:	23a0      	movs	r3, #160	@ 0xa0
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d105      	bne.n	8006d1a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d0e:	239c      	movs	r3, #156	@ 0x9c
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a5b      	ldr	r2, [pc, #364]	@ (8006e84 <HAL_UART_IRQHandler+0x2c0>)
 8006d16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d18:	d00b      	beq.n	8006d32 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2208      	movs	r2, #8
 8006d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2290      	movs	r2, #144	@ 0x90
 8006d26:	589b      	ldr	r3, [r3, r2]
 8006d28:	2208      	movs	r2, #8
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2190      	movs	r1, #144	@ 0x90
 8006d30:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d32:	23a4      	movs	r3, #164	@ 0xa4
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	2380      	movs	r3, #128	@ 0x80
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_UART_IRQHandler+0x1a4>
 8006d40:	23a0      	movs	r3, #160	@ 0xa0
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	2380      	movs	r3, #128	@ 0x80
 8006d48:	04db      	lsls	r3, r3, #19
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d00c      	beq.n	8006d68 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2280      	movs	r2, #128	@ 0x80
 8006d54:	0112      	lsls	r2, r2, #4
 8006d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2290      	movs	r2, #144	@ 0x90
 8006d5c:	589b      	ldr	r3, [r3, r2]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2190      	movs	r1, #144	@ 0x90
 8006d66:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2290      	movs	r2, #144	@ 0x90
 8006d6c:	589b      	ldr	r3, [r3, r2]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d100      	bne.n	8006d74 <HAL_UART_IRQHandler+0x1b0>
 8006d72:	e25c      	b.n	800722e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d74:	23a4      	movs	r3, #164	@ 0xa4
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d015      	beq.n	8006dac <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d80:	23a0      	movs	r3, #160	@ 0xa0
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2220      	movs	r2, #32
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d106      	bne.n	8006d9a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d8c:	239c      	movs	r3, #156	@ 0x9c
 8006d8e:	18fb      	adds	r3, r7, r3
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	2380      	movs	r3, #128	@ 0x80
 8006d94:	055b      	lsls	r3, r3, #21
 8006d96:	4013      	ands	r3, r2
 8006d98:	d008      	beq.n	8006dac <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	0010      	movs	r0, r2
 8006daa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2290      	movs	r2, #144	@ 0x90
 8006db0:	589b      	ldr	r3, [r3, r2]
 8006db2:	2194      	movs	r1, #148	@ 0x94
 8006db4:	187a      	adds	r2, r7, r1
 8006db6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2240      	movs	r2, #64	@ 0x40
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b40      	cmp	r3, #64	@ 0x40
 8006dc4:	d004      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dc6:	187b      	adds	r3, r7, r1
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2228      	movs	r2, #40	@ 0x28
 8006dcc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dce:	d04c      	beq.n	8006e6a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f000 fe8e 	bl	8007af4 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2240      	movs	r2, #64	@ 0x40
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b40      	cmp	r3, #64	@ 0x40
 8006de4:	d13c      	bne.n	8006e60 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006de6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dea:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dee:	2090      	movs	r0, #144	@ 0x90
 8006df0:	183a      	adds	r2, r7, r0
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	2301      	movs	r3, #1
 8006df6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dfa:	f383 8810 	msr	PRIMASK, r3
}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2140      	movs	r1, #64	@ 0x40
 8006e0c:	438a      	bics	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
 8006e10:	183b      	adds	r3, r7, r0
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e18:	f383 8810 	msr	PRIMASK, r3
}
 8006e1c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2280      	movs	r2, #128	@ 0x80
 8006e22:	589b      	ldr	r3, [r3, r2]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d016      	beq.n	8006e56 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2280      	movs	r2, #128	@ 0x80
 8006e2c:	589b      	ldr	r3, [r3, r2]
 8006e2e:	4a17      	ldr	r2, [pc, #92]	@ (8006e8c <HAL_UART_IRQHandler+0x2c8>)
 8006e30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2280      	movs	r2, #128	@ 0x80
 8006e36:	589b      	ldr	r3, [r3, r2]
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7fc f99f 	bl	800317c <HAL_DMA_Abort_IT>
 8006e3e:	1e03      	subs	r3, r0, #0
 8006e40:	d01c      	beq.n	8006e7c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2280      	movs	r2, #128	@ 0x80
 8006e46:	589b      	ldr	r3, [r3, r2]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	2180      	movs	r1, #128	@ 0x80
 8006e4e:	5852      	ldr	r2, [r2, r1]
 8006e50:	0010      	movs	r0, r2
 8006e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	e012      	b.n	8006e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 fa09 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5e:	e00d      	b.n	8006e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fa04 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	e008      	b.n	8006e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 f9ff 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2290      	movs	r2, #144	@ 0x90
 8006e76:	2100      	movs	r1, #0
 8006e78:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006e7a:	e1d8      	b.n	800722e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7c:	46c0      	nop			@ (mov r8, r8)
    return;
 8006e7e:	e1d6      	b.n	800722e <HAL_UART_IRQHandler+0x66a>
 8006e80:	0000080f 	.word	0x0000080f
 8006e84:	10000001 	.word	0x10000001
 8006e88:	04000120 	.word	0x04000120
 8006e8c:	08007db9 	.word	0x08007db9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d000      	beq.n	8006e9a <HAL_UART_IRQHandler+0x2d6>
 8006e98:	e15d      	b.n	8007156 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e9a:	23a4      	movs	r3, #164	@ 0xa4
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2210      	movs	r2, #16
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	d100      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x2e4>
 8006ea6:	e156      	b.n	8007156 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ea8:	23a0      	movs	r3, #160	@ 0xa0
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	d100      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x2f2>
 8006eb4:	e14f      	b.n	8007156 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2210      	movs	r2, #16
 8006ebc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2240      	movs	r2, #64	@ 0x40
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b40      	cmp	r3, #64	@ 0x40
 8006eca:	d000      	beq.n	8006ece <HAL_UART_IRQHandler+0x30a>
 8006ecc:	e0c3      	b.n	8007056 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2280      	movs	r2, #128	@ 0x80
 8006ed2:	589b      	ldr	r3, [r3, r2]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	217e      	movs	r1, #126	@ 0x7e
 8006eda:	187b      	adds	r3, r7, r1
 8006edc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006ede:	187b      	adds	r3, r7, r1
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d100      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x324>
 8006ee6:	e097      	b.n	8007018 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	225c      	movs	r2, #92	@ 0x5c
 8006eec:	5a9b      	ldrh	r3, [r3, r2]
 8006eee:	187a      	adds	r2, r7, r1
 8006ef0:	8812      	ldrh	r2, [r2, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d300      	bcc.n	8006ef8 <HAL_UART_IRQHandler+0x334>
 8006ef6:	e08f      	b.n	8007018 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	187a      	adds	r2, r7, r1
 8006efc:	215e      	movs	r1, #94	@ 0x5e
 8006efe:	8812      	ldrh	r2, [r2, #0]
 8006f00:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2280      	movs	r2, #128	@ 0x80
 8006f06:	589b      	ldr	r3, [r3, r2]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d170      	bne.n	8006ff4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f12:	f3ef 8310 	mrs	r3, PRIMASK
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	f383 8810 	msr	PRIMASK, r3
}
 8006f26:	46c0      	nop			@ (mov r8, r8)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	49c4      	ldr	r1, [pc, #784]	@ (8007244 <HAL_UART_IRQHandler+0x680>)
 8006f34:	400a      	ands	r2, r1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3e:	f383 8810 	msr	PRIMASK, r3
}
 8006f42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f4e:	2301      	movs	r3, #1
 8006f50:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f54:	f383 8810 	msr	PRIMASK, r3
}
 8006f58:	46c0      	nop			@ (mov r8, r8)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2101      	movs	r1, #1
 8006f66:	438a      	bics	r2, r1
 8006f68:	609a      	str	r2, [r3, #8]
 8006f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f70:	f383 8810 	msr	PRIMASK, r3
}
 8006f74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f76:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f80:	2301      	movs	r3, #1
 8006f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	46c0      	nop			@ (mov r8, r8)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2140      	movs	r1, #64	@ 0x40
 8006f98:	438a      	bics	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f9e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fa2:	f383 8810 	msr	PRIMASK, r3
}
 8006fa6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	228c      	movs	r2, #140	@ 0x8c
 8006fac:	2120      	movs	r1, #32
 8006fae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fba:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fc6:	f383 8810 	msr	PRIMASK, r3
}
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2110      	movs	r1, #16
 8006fd8:	438a      	bics	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fe2:	f383 8810 	msr	PRIMASK, r3
}
 8006fe6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2280      	movs	r2, #128	@ 0x80
 8006fec:	589b      	ldr	r3, [r3, r2]
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f7fc f862 	bl	80030b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	225c      	movs	r2, #92	@ 0x5c
 8006ffe:	5a9a      	ldrh	r2, [r3, r2]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	215e      	movs	r1, #94	@ 0x5e
 8007004:	5a5b      	ldrh	r3, [r3, r1]
 8007006:	b29b      	uxth	r3, r3
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	0011      	movs	r1, r2
 8007010:	0018      	movs	r0, r3
 8007012:	f7fa f857 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007016:	e10c      	b.n	8007232 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	225c      	movs	r2, #92	@ 0x5c
 800701c:	5a9b      	ldrh	r3, [r3, r2]
 800701e:	227e      	movs	r2, #126	@ 0x7e
 8007020:	18ba      	adds	r2, r7, r2
 8007022:	8812      	ldrh	r2, [r2, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d000      	beq.n	800702a <HAL_UART_IRQHandler+0x466>
 8007028:	e103      	b.n	8007232 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2280      	movs	r2, #128	@ 0x80
 800702e:	589b      	ldr	r3, [r3, r2]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2220      	movs	r2, #32
 8007036:	4013      	ands	r3, r2
 8007038:	2b20      	cmp	r3, #32
 800703a:	d000      	beq.n	800703e <HAL_UART_IRQHandler+0x47a>
 800703c:	e0f9      	b.n	8007232 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	225c      	movs	r2, #92	@ 0x5c
 8007048:	5a9a      	ldrh	r2, [r3, r2]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f7fa f838 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
      return;
 8007054:	e0ed      	b.n	8007232 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	225c      	movs	r2, #92	@ 0x5c
 800705a:	5a99      	ldrh	r1, [r3, r2]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	225e      	movs	r2, #94	@ 0x5e
 8007060:	5a9b      	ldrh	r3, [r3, r2]
 8007062:	b29a      	uxth	r2, r3
 8007064:	208e      	movs	r0, #142	@ 0x8e
 8007066:	183b      	adds	r3, r7, r0
 8007068:	1a8a      	subs	r2, r1, r2
 800706a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	225e      	movs	r2, #94	@ 0x5e
 8007070:	5a9b      	ldrh	r3, [r3, r2]
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d100      	bne.n	800707a <HAL_UART_IRQHandler+0x4b6>
 8007078:	e0dd      	b.n	8007236 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800707a:	183b      	adds	r3, r7, r0
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d100      	bne.n	8007084 <HAL_UART_IRQHandler+0x4c0>
 8007082:	e0d8      	b.n	8007236 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007084:	f3ef 8310 	mrs	r3, PRIMASK
 8007088:	60fb      	str	r3, [r7, #12]
  return(result);
 800708a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800708c:	2488      	movs	r4, #136	@ 0x88
 800708e:	193a      	adds	r2, r7, r4
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	2301      	movs	r3, #1
 8007094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f383 8810 	msr	PRIMASK, r3
}
 800709c:	46c0      	nop			@ (mov r8, r8)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4967      	ldr	r1, [pc, #412]	@ (8007248 <HAL_UART_IRQHandler+0x684>)
 80070aa:	400a      	ands	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	193b      	adds	r3, r7, r4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f383 8810 	msr	PRIMASK, r3
}
 80070ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80070bc:	f3ef 8310 	mrs	r3, PRIMASK
 80070c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80070c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070c4:	2484      	movs	r4, #132	@ 0x84
 80070c6:	193a      	adds	r2, r7, r4
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	2301      	movs	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f383 8810 	msr	PRIMASK, r3
}
 80070d4:	46c0      	nop			@ (mov r8, r8)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	495a      	ldr	r1, [pc, #360]	@ (800724c <HAL_UART_IRQHandler+0x688>)
 80070e2:	400a      	ands	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]
 80070e6:	193b      	adds	r3, r7, r4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	f383 8810 	msr	PRIMASK, r3
}
 80070f2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	228c      	movs	r2, #140	@ 0x8c
 80070f8:	2120      	movs	r1, #32
 80070fa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007108:	f3ef 8310 	mrs	r3, PRIMASK
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	2480      	movs	r4, #128	@ 0x80
 8007112:	193a      	adds	r2, r7, r4
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	2301      	movs	r3, #1
 8007118:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f383 8810 	msr	PRIMASK, r3
}
 8007120:	46c0      	nop			@ (mov r8, r8)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2110      	movs	r1, #16
 800712e:	438a      	bics	r2, r1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	193b      	adds	r3, r7, r4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	f383 8810 	msr	PRIMASK, r3
}
 800713e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007146:	183b      	adds	r3, r7, r0
 8007148:	881a      	ldrh	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	0011      	movs	r1, r2
 800714e:	0018      	movs	r0, r3
 8007150:	f7f9 ffb8 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007154:	e06f      	b.n	8007236 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007156:	23a4      	movs	r3, #164	@ 0xa4
 8007158:	18fb      	adds	r3, r7, r3
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	2380      	movs	r3, #128	@ 0x80
 800715e:	035b      	lsls	r3, r3, #13
 8007160:	4013      	ands	r3, r2
 8007162:	d010      	beq.n	8007186 <HAL_UART_IRQHandler+0x5c2>
 8007164:	239c      	movs	r3, #156	@ 0x9c
 8007166:	18fb      	adds	r3, r7, r3
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	2380      	movs	r3, #128	@ 0x80
 800716c:	03db      	lsls	r3, r3, #15
 800716e:	4013      	ands	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2280      	movs	r2, #128	@ 0x80
 8007178:	0352      	lsls	r2, r2, #13
 800717a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	0018      	movs	r0, r3
 8007180:	f001 f902 	bl	8008388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007184:	e05a      	b.n	800723c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007186:	23a4      	movs	r3, #164	@ 0xa4
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2280      	movs	r2, #128	@ 0x80
 800718e:	4013      	ands	r3, r2
 8007190:	d016      	beq.n	80071c0 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007192:	23a0      	movs	r3, #160	@ 0xa0
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2280      	movs	r2, #128	@ 0x80
 800719a:	4013      	ands	r3, r2
 800719c:	d106      	bne.n	80071ac <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800719e:	239c      	movs	r3, #156	@ 0x9c
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	2380      	movs	r3, #128	@ 0x80
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	4013      	ands	r3, r2
 80071aa:	d009      	beq.n	80071c0 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d042      	beq.n	800723a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	0010      	movs	r0, r2
 80071bc:	4798      	blx	r3
    }
    return;
 80071be:	e03c      	b.n	800723a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071c0:	23a4      	movs	r3, #164	@ 0xa4
 80071c2:	18fb      	adds	r3, r7, r3
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2240      	movs	r2, #64	@ 0x40
 80071c8:	4013      	ands	r3, r2
 80071ca:	d00a      	beq.n	80071e2 <HAL_UART_IRQHandler+0x61e>
 80071cc:	23a0      	movs	r3, #160	@ 0xa0
 80071ce:	18fb      	adds	r3, r7, r3
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2240      	movs	r2, #64	@ 0x40
 80071d4:	4013      	ands	r3, r2
 80071d6:	d004      	beq.n	80071e2 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	0018      	movs	r0, r3
 80071dc:	f001 f836 	bl	800824c <UART_EndTransmit_IT>
    return;
 80071e0:	e02c      	b.n	800723c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071e2:	23a4      	movs	r3, #164	@ 0xa4
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	2380      	movs	r3, #128	@ 0x80
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	4013      	ands	r3, r2
 80071ee:	d00b      	beq.n	8007208 <HAL_UART_IRQHandler+0x644>
 80071f0:	23a0      	movs	r3, #160	@ 0xa0
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	2380      	movs	r3, #128	@ 0x80
 80071f8:	05db      	lsls	r3, r3, #23
 80071fa:	4013      	ands	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	0018      	movs	r0, r3
 8007202:	f001 f8d1 	bl	80083a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007206:	e019      	b.n	800723c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007208:	23a4      	movs	r3, #164	@ 0xa4
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	2380      	movs	r3, #128	@ 0x80
 8007210:	045b      	lsls	r3, r3, #17
 8007212:	4013      	ands	r3, r2
 8007214:	d012      	beq.n	800723c <HAL_UART_IRQHandler+0x678>
 8007216:	23a0      	movs	r3, #160	@ 0xa0
 8007218:	18fb      	adds	r3, r7, r3
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da0d      	bge.n	800723c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	0018      	movs	r0, r3
 8007224:	f001 f8b8 	bl	8008398 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007228:	e008      	b.n	800723c <HAL_UART_IRQHandler+0x678>
      return;
 800722a:	46c0      	nop			@ (mov r8, r8)
 800722c:	e006      	b.n	800723c <HAL_UART_IRQHandler+0x678>
    return;
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	e004      	b.n	800723c <HAL_UART_IRQHandler+0x678>
      return;
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	e002      	b.n	800723c <HAL_UART_IRQHandler+0x678>
      return;
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	e000      	b.n	800723c <HAL_UART_IRQHandler+0x678>
    return;
 800723a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800723c:	46bd      	mov	sp, r7
 800723e:	b02a      	add	sp, #168	@ 0xa8
 8007240:	bdb0      	pop	{r4, r5, r7, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	fffffeff 	.word	0xfffffeff
 8007248:	fffffedf 	.word	0xfffffedf
 800724c:	effffffe 	.word	0xeffffffe

08007250 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007258:	46c0      	nop			@ (mov r8, r8)
 800725a:	46bd      	mov	sp, r7
 800725c:	b002      	add	sp, #8
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007268:	46c0      	nop			@ (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	b002      	add	sp, #8
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007278:	46c0      	nop			@ (mov r8, r8)
 800727a:	46bd      	mov	sp, r7
 800727c:	b002      	add	sp, #8
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007288:	46c0      	nop			@ (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b002      	add	sp, #8
 800728e:	bd80      	pop	{r7, pc}

08007290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007298:	231e      	movs	r3, #30
 800729a:	18fb      	adds	r3, r7, r3
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4aab      	ldr	r2, [pc, #684]	@ (800756c <UART_SetConfig+0x2dc>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	0019      	movs	r1, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	4aa6      	ldr	r2, [pc, #664]	@ (8007570 <UART_SetConfig+0x2e0>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	0019      	movs	r1, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	4a9d      	ldr	r2, [pc, #628]	@ (8007574 <UART_SetConfig+0x2e4>)
 80072fe:	4013      	ands	r3, r2
 8007300:	0019      	movs	r1, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	430a      	orrs	r2, r1
 800730a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	220f      	movs	r2, #15
 8007314:	4393      	bics	r3, r2
 8007316:	0019      	movs	r1, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a93      	ldr	r2, [pc, #588]	@ (8007578 <UART_SetConfig+0x2e8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d127      	bne.n	800737e <UART_SetConfig+0xee>
 800732e:	4b93      	ldr	r3, [pc, #588]	@ (800757c <UART_SetConfig+0x2ec>)
 8007330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007332:	2203      	movs	r2, #3
 8007334:	4013      	ands	r3, r2
 8007336:	2b03      	cmp	r3, #3
 8007338:	d017      	beq.n	800736a <UART_SetConfig+0xda>
 800733a:	d81b      	bhi.n	8007374 <UART_SetConfig+0xe4>
 800733c:	2b02      	cmp	r3, #2
 800733e:	d00a      	beq.n	8007356 <UART_SetConfig+0xc6>
 8007340:	d818      	bhi.n	8007374 <UART_SetConfig+0xe4>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <UART_SetConfig+0xbc>
 8007346:	2b01      	cmp	r3, #1
 8007348:	d00a      	beq.n	8007360 <UART_SetConfig+0xd0>
 800734a:	e013      	b.n	8007374 <UART_SetConfig+0xe4>
 800734c:	231f      	movs	r3, #31
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e021      	b.n	800739a <UART_SetConfig+0x10a>
 8007356:	231f      	movs	r3, #31
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	2202      	movs	r2, #2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	e01c      	b.n	800739a <UART_SetConfig+0x10a>
 8007360:	231f      	movs	r3, #31
 8007362:	18fb      	adds	r3, r7, r3
 8007364:	2204      	movs	r2, #4
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e017      	b.n	800739a <UART_SetConfig+0x10a>
 800736a:	231f      	movs	r3, #31
 800736c:	18fb      	adds	r3, r7, r3
 800736e:	2208      	movs	r2, #8
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	e012      	b.n	800739a <UART_SetConfig+0x10a>
 8007374:	231f      	movs	r3, #31
 8007376:	18fb      	adds	r3, r7, r3
 8007378:	2210      	movs	r2, #16
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	e00d      	b.n	800739a <UART_SetConfig+0x10a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a7f      	ldr	r2, [pc, #508]	@ (8007580 <UART_SetConfig+0x2f0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d104      	bne.n	8007392 <UART_SetConfig+0x102>
 8007388:	231f      	movs	r3, #31
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e003      	b.n	800739a <UART_SetConfig+0x10a>
 8007392:	231f      	movs	r3, #31
 8007394:	18fb      	adds	r3, r7, r3
 8007396:	2210      	movs	r2, #16
 8007398:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	2380      	movs	r3, #128	@ 0x80
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d000      	beq.n	80073a8 <UART_SetConfig+0x118>
 80073a6:	e06f      	b.n	8007488 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80073a8:	231f      	movs	r3, #31
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d01f      	beq.n	80073f2 <UART_SetConfig+0x162>
 80073b2:	dc22      	bgt.n	80073fa <UART_SetConfig+0x16a>
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d017      	beq.n	80073e8 <UART_SetConfig+0x158>
 80073b8:	dc1f      	bgt.n	80073fa <UART_SetConfig+0x16a>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <UART_SetConfig+0x134>
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d005      	beq.n	80073ce <UART_SetConfig+0x13e>
 80073c2:	e01a      	b.n	80073fa <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c4:	f7fe fa82 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 80073c8:	0003      	movs	r3, r0
 80073ca:	61bb      	str	r3, [r7, #24]
        break;
 80073cc:	e01c      	b.n	8007408 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80073ce:	4b6b      	ldr	r3, [pc, #428]	@ (800757c <UART_SetConfig+0x2ec>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	2207      	movs	r2, #7
 80073d6:	4013      	ands	r3, r2
 80073d8:	3301      	adds	r3, #1
 80073da:	0019      	movs	r1, r3
 80073dc:	4869      	ldr	r0, [pc, #420]	@ (8007584 <UART_SetConfig+0x2f4>)
 80073de:	f7f8 fe9d 	bl	800011c <__udivsi3>
 80073e2:	0003      	movs	r3, r0
 80073e4:	61bb      	str	r3, [r7, #24]
        break;
 80073e6:	e00f      	b.n	8007408 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e8:	f7fe f9fa 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 80073ec:	0003      	movs	r3, r0
 80073ee:	61bb      	str	r3, [r7, #24]
        break;
 80073f0:	e00a      	b.n	8007408 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	2380      	movs	r3, #128	@ 0x80
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	61bb      	str	r3, [r7, #24]
        break;
 80073f8:	e006      	b.n	8007408 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073fe:	231e      	movs	r3, #30
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	2201      	movs	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
        break;
 8007406:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d100      	bne.n	8007410 <UART_SetConfig+0x180>
 800740e:	e097      	b.n	8007540 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007414:	4b5c      	ldr	r3, [pc, #368]	@ (8007588 <UART_SetConfig+0x2f8>)
 8007416:	0052      	lsls	r2, r2, #1
 8007418:	5ad3      	ldrh	r3, [r2, r3]
 800741a:	0019      	movs	r1, r3
 800741c:	69b8      	ldr	r0, [r7, #24]
 800741e:	f7f8 fe7d 	bl	800011c <__udivsi3>
 8007422:	0003      	movs	r3, r0
 8007424:	005a      	lsls	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	18d2      	adds	r2, r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	0019      	movs	r1, r3
 8007434:	0010      	movs	r0, r2
 8007436:	f7f8 fe71 	bl	800011c <__udivsi3>
 800743a:	0003      	movs	r3, r0
 800743c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b0f      	cmp	r3, #15
 8007442:	d91c      	bls.n	800747e <UART_SetConfig+0x1ee>
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	2380      	movs	r3, #128	@ 0x80
 8007448:	025b      	lsls	r3, r3, #9
 800744a:	429a      	cmp	r2, r3
 800744c:	d217      	bcs.n	800747e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	b29a      	uxth	r2, r3
 8007452:	200e      	movs	r0, #14
 8007454:	183b      	adds	r3, r7, r0
 8007456:	210f      	movs	r1, #15
 8007458:	438a      	bics	r2, r1
 800745a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	b29b      	uxth	r3, r3
 8007462:	2207      	movs	r2, #7
 8007464:	4013      	ands	r3, r2
 8007466:	b299      	uxth	r1, r3
 8007468:	183b      	adds	r3, r7, r0
 800746a:	183a      	adds	r2, r7, r0
 800746c:	8812      	ldrh	r2, [r2, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	183a      	adds	r2, r7, r0
 8007478:	8812      	ldrh	r2, [r2, #0]
 800747a:	60da      	str	r2, [r3, #12]
 800747c:	e060      	b.n	8007540 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800747e:	231e      	movs	r3, #30
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	2201      	movs	r2, #1
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e05b      	b.n	8007540 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007488:	231f      	movs	r3, #31
 800748a:	18fb      	adds	r3, r7, r3
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b08      	cmp	r3, #8
 8007490:	d01f      	beq.n	80074d2 <UART_SetConfig+0x242>
 8007492:	dc22      	bgt.n	80074da <UART_SetConfig+0x24a>
 8007494:	2b04      	cmp	r3, #4
 8007496:	d017      	beq.n	80074c8 <UART_SetConfig+0x238>
 8007498:	dc1f      	bgt.n	80074da <UART_SetConfig+0x24a>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <UART_SetConfig+0x214>
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d005      	beq.n	80074ae <UART_SetConfig+0x21e>
 80074a2:	e01a      	b.n	80074da <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a4:	f7fe fa12 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 80074a8:	0003      	movs	r3, r0
 80074aa:	61bb      	str	r3, [r7, #24]
        break;
 80074ac:	e01c      	b.n	80074e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80074ae:	4b33      	ldr	r3, [pc, #204]	@ (800757c <UART_SetConfig+0x2ec>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	2207      	movs	r2, #7
 80074b6:	4013      	ands	r3, r2
 80074b8:	3301      	adds	r3, #1
 80074ba:	0019      	movs	r1, r3
 80074bc:	4831      	ldr	r0, [pc, #196]	@ (8007584 <UART_SetConfig+0x2f4>)
 80074be:	f7f8 fe2d 	bl	800011c <__udivsi3>
 80074c2:	0003      	movs	r3, r0
 80074c4:	61bb      	str	r3, [r7, #24]
        break;
 80074c6:	e00f      	b.n	80074e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c8:	f7fe f98a 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 80074cc:	0003      	movs	r3, r0
 80074ce:	61bb      	str	r3, [r7, #24]
        break;
 80074d0:	e00a      	b.n	80074e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d2:	2380      	movs	r3, #128	@ 0x80
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	61bb      	str	r3, [r7, #24]
        break;
 80074d8:	e006      	b.n	80074e8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074de:	231e      	movs	r3, #30
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	2201      	movs	r2, #1
 80074e4:	701a      	strb	r2, [r3, #0]
        break;
 80074e6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d028      	beq.n	8007540 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074f2:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <UART_SetConfig+0x2f8>)
 80074f4:	0052      	lsls	r2, r2, #1
 80074f6:	5ad3      	ldrh	r3, [r2, r3]
 80074f8:	0019      	movs	r1, r3
 80074fa:	69b8      	ldr	r0, [r7, #24]
 80074fc:	f7f8 fe0e 	bl	800011c <__udivsi3>
 8007500:	0003      	movs	r3, r0
 8007502:	001a      	movs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	085b      	lsrs	r3, r3, #1
 800750a:	18d2      	adds	r2, r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	0019      	movs	r1, r3
 8007512:	0010      	movs	r0, r2
 8007514:	f7f8 fe02 	bl	800011c <__udivsi3>
 8007518:	0003      	movs	r3, r0
 800751a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b0f      	cmp	r3, #15
 8007520:	d90a      	bls.n	8007538 <UART_SetConfig+0x2a8>
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	2380      	movs	r3, #128	@ 0x80
 8007526:	025b      	lsls	r3, r3, #9
 8007528:	429a      	cmp	r2, r3
 800752a:	d205      	bcs.n	8007538 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60da      	str	r2, [r3, #12]
 8007536:	e003      	b.n	8007540 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8007538:	231e      	movs	r3, #30
 800753a:	18fb      	adds	r3, r7, r3
 800753c:	2201      	movs	r2, #1
 800753e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	226a      	movs	r2, #106	@ 0x6a
 8007544:	2101      	movs	r1, #1
 8007546:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2268      	movs	r2, #104	@ 0x68
 800754c:	2101      	movs	r1, #1
 800754e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800755c:	231e      	movs	r3, #30
 800755e:	18fb      	adds	r3, r7, r3
 8007560:	781b      	ldrb	r3, [r3, #0]
}
 8007562:	0018      	movs	r0, r3
 8007564:	46bd      	mov	sp, r7
 8007566:	b008      	add	sp, #32
 8007568:	bd80      	pop	{r7, pc}
 800756a:	46c0      	nop			@ (mov r8, r8)
 800756c:	cfff69f3 	.word	0xcfff69f3
 8007570:	ffffcfff 	.word	0xffffcfff
 8007574:	11fff4ff 	.word	0x11fff4ff
 8007578:	40013800 	.word	0x40013800
 800757c:	40021000 	.word	0x40021000
 8007580:	40004400 	.word	0x40004400
 8007584:	02dc6c00 	.word	0x02dc6c00
 8007588:	08009b50 	.word	0x08009b50

0800758c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	2208      	movs	r2, #8
 800759a:	4013      	ands	r3, r2
 800759c:	d00b      	beq.n	80075b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	4a4a      	ldr	r2, [pc, #296]	@ (80076d0 <UART_AdvFeatureConfig+0x144>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	0019      	movs	r1, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	2201      	movs	r2, #1
 80075bc:	4013      	ands	r3, r2
 80075be:	d00b      	beq.n	80075d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4a43      	ldr	r2, [pc, #268]	@ (80076d4 <UART_AdvFeatureConfig+0x148>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	0019      	movs	r1, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	2202      	movs	r2, #2
 80075de:	4013      	ands	r3, r2
 80075e0:	d00b      	beq.n	80075fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a3b      	ldr	r2, [pc, #236]	@ (80076d8 <UART_AdvFeatureConfig+0x14c>)
 80075ea:	4013      	ands	r3, r2
 80075ec:	0019      	movs	r1, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	2204      	movs	r2, #4
 8007600:	4013      	ands	r3, r2
 8007602:	d00b      	beq.n	800761c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	4a34      	ldr	r2, [pc, #208]	@ (80076dc <UART_AdvFeatureConfig+0x150>)
 800760c:	4013      	ands	r3, r2
 800760e:	0019      	movs	r1, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	2210      	movs	r2, #16
 8007622:	4013      	ands	r3, r2
 8007624:	d00b      	beq.n	800763e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	4a2c      	ldr	r2, [pc, #176]	@ (80076e0 <UART_AdvFeatureConfig+0x154>)
 800762e:	4013      	ands	r3, r2
 8007630:	0019      	movs	r1, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	2220      	movs	r2, #32
 8007644:	4013      	ands	r3, r2
 8007646:	d00b      	beq.n	8007660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	4a25      	ldr	r2, [pc, #148]	@ (80076e4 <UART_AdvFeatureConfig+0x158>)
 8007650:	4013      	ands	r3, r2
 8007652:	0019      	movs	r1, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007664:	2240      	movs	r2, #64	@ 0x40
 8007666:	4013      	ands	r3, r2
 8007668:	d01d      	beq.n	80076a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a1d      	ldr	r2, [pc, #116]	@ (80076e8 <UART_AdvFeatureConfig+0x15c>)
 8007672:	4013      	ands	r3, r2
 8007674:	0019      	movs	r1, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007686:	2380      	movs	r3, #128	@ 0x80
 8007688:	035b      	lsls	r3, r3, #13
 800768a:	429a      	cmp	r2, r3
 800768c:	d10b      	bne.n	80076a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4a15      	ldr	r2, [pc, #84]	@ (80076ec <UART_AdvFeatureConfig+0x160>)
 8007696:	4013      	ands	r3, r2
 8007698:	0019      	movs	r1, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	2280      	movs	r2, #128	@ 0x80
 80076ac:	4013      	ands	r3, r2
 80076ae:	d00b      	beq.n	80076c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4a0e      	ldr	r2, [pc, #56]	@ (80076f0 <UART_AdvFeatureConfig+0x164>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	0019      	movs	r1, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  }
}
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b002      	add	sp, #8
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	ffff7fff 	.word	0xffff7fff
 80076d4:	fffdffff 	.word	0xfffdffff
 80076d8:	fffeffff 	.word	0xfffeffff
 80076dc:	fffbffff 	.word	0xfffbffff
 80076e0:	ffffefff 	.word	0xffffefff
 80076e4:	ffffdfff 	.word	0xffffdfff
 80076e8:	ffefffff 	.word	0xffefffff
 80076ec:	ff9fffff 	.word	0xff9fffff
 80076f0:	fff7ffff 	.word	0xfff7ffff

080076f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b092      	sub	sp, #72	@ 0x48
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2290      	movs	r2, #144	@ 0x90
 8007700:	2100      	movs	r1, #0
 8007702:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007704:	f7fa fe40 	bl	8002388 <HAL_GetTick>
 8007708:	0003      	movs	r3, r0
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2208      	movs	r2, #8
 8007714:	4013      	ands	r3, r2
 8007716:	2b08      	cmp	r3, #8
 8007718:	d12d      	bne.n	8007776 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800771a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771c:	2280      	movs	r2, #128	@ 0x80
 800771e:	0391      	lsls	r1, r2, #14
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4a47      	ldr	r2, [pc, #284]	@ (8007840 <UART_CheckIdleState+0x14c>)
 8007724:	9200      	str	r2, [sp, #0]
 8007726:	2200      	movs	r2, #0
 8007728:	f000 f88e 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 800772c:	1e03      	subs	r3, r0, #0
 800772e:	d022      	beq.n	8007776 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007730:	f3ef 8310 	mrs	r3, PRIMASK
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007738:	63bb      	str	r3, [r7, #56]	@ 0x38
 800773a:	2301      	movs	r3, #1
 800773c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	f383 8810 	msr	PRIMASK, r3
}
 8007744:	46c0      	nop			@ (mov r8, r8)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2180      	movs	r1, #128	@ 0x80
 8007752:	438a      	bics	r2, r1
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	f383 8810 	msr	PRIMASK, r3
}
 8007760:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2288      	movs	r2, #136	@ 0x88
 8007766:	2120      	movs	r1, #32
 8007768:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2284      	movs	r2, #132	@ 0x84
 800776e:	2100      	movs	r1, #0
 8007770:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e060      	b.n	8007838 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2204      	movs	r2, #4
 800777e:	4013      	ands	r3, r2
 8007780:	2b04      	cmp	r3, #4
 8007782:	d146      	bne.n	8007812 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007786:	2280      	movs	r2, #128	@ 0x80
 8007788:	03d1      	lsls	r1, r2, #15
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4a2c      	ldr	r2, [pc, #176]	@ (8007840 <UART_CheckIdleState+0x14c>)
 800778e:	9200      	str	r2, [sp, #0]
 8007790:	2200      	movs	r2, #0
 8007792:	f000 f859 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 8007796:	1e03      	subs	r3, r0, #0
 8007798:	d03b      	beq.n	8007812 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
 800779e:	60fb      	str	r3, [r7, #12]
  return(result);
 80077a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a4:	2301      	movs	r3, #1
 80077a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f383 8810 	msr	PRIMASK, r3
}
 80077ae:	46c0      	nop			@ (mov r8, r8)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4922      	ldr	r1, [pc, #136]	@ (8007844 <UART_CheckIdleState+0x150>)
 80077bc:	400a      	ands	r2, r1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80077cc:	f3ef 8310 	mrs	r3, PRIMASK
 80077d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80077d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80077d6:	2301      	movs	r3, #1
 80077d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f383 8810 	msr	PRIMASK, r3
}
 80077e0:	46c0      	nop			@ (mov r8, r8)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2101      	movs	r1, #1
 80077ee:	438a      	bics	r2, r1
 80077f0:	609a      	str	r2, [r3, #8]
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	f383 8810 	msr	PRIMASK, r3
}
 80077fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	228c      	movs	r2, #140	@ 0x8c
 8007802:	2120      	movs	r1, #32
 8007804:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2284      	movs	r2, #132	@ 0x84
 800780a:	2100      	movs	r1, #0
 800780c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e012      	b.n	8007838 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2288      	movs	r2, #136	@ 0x88
 8007816:	2120      	movs	r1, #32
 8007818:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	228c      	movs	r2, #140	@ 0x8c
 800781e:	2120      	movs	r1, #32
 8007820:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2284      	movs	r2, #132	@ 0x84
 8007832:	2100      	movs	r1, #0
 8007834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	b010      	add	sp, #64	@ 0x40
 800783e:	bd80      	pop	{r7, pc}
 8007840:	01ffffff 	.word	0x01ffffff
 8007844:	fffffedf 	.word	0xfffffedf

08007848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007858:	e051      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	3301      	adds	r3, #1
 800785e:	d04e      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007860:	f7fa fd92 	bl	8002388 <HAL_GetTick>
 8007864:	0002      	movs	r2, r0
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e051      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2204      	movs	r2, #4
 8007882:	4013      	ands	r3, r2
 8007884:	d03b      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b80      	cmp	r3, #128	@ 0x80
 800788a:	d038      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d035      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	2208      	movs	r2, #8
 800789a:	4013      	ands	r3, r2
 800789c:	2b08      	cmp	r3, #8
 800789e:	d111      	bne.n	80078c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2208      	movs	r2, #8
 80078a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 f922 	bl	8007af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2290      	movs	r2, #144	@ 0x90
 80078b4:	2108      	movs	r1, #8
 80078b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2284      	movs	r2, #132	@ 0x84
 80078bc:	2100      	movs	r1, #0
 80078be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e02c      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	69da      	ldr	r2, [r3, #28]
 80078ca:	2380      	movs	r3, #128	@ 0x80
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	401a      	ands	r2, r3
 80078d0:	2380      	movs	r3, #128	@ 0x80
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d112      	bne.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2280      	movs	r2, #128	@ 0x80
 80078de:	0112      	lsls	r2, r2, #4
 80078e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 f905 	bl	8007af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2290      	movs	r2, #144	@ 0x90
 80078ee:	2120      	movs	r1, #32
 80078f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2284      	movs	r2, #132	@ 0x84
 80078f6:	2100      	movs	r1, #0
 80078f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e00f      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	425a      	negs	r2, r3
 800790e:	4153      	adcs	r3, r2
 8007910:	b2db      	uxtb	r3, r3
 8007912:	001a      	movs	r2, r3
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d09e      	beq.n	800785a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	0018      	movs	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	b004      	add	sp, #16
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b090      	sub	sp, #64	@ 0x40
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	1dbb      	adds	r3, r7, #6
 8007934:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	1dba      	adds	r2, r7, #6
 8007940:	215c      	movs	r1, #92	@ 0x5c
 8007942:	8812      	ldrh	r2, [r2, #0]
 8007944:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2290      	movs	r2, #144	@ 0x90
 800794a:	2100      	movs	r1, #0
 800794c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	228c      	movs	r2, #140	@ 0x8c
 8007952:	2122      	movs	r1, #34	@ 0x22
 8007954:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2280      	movs	r2, #128	@ 0x80
 800795a:	589b      	ldr	r3, [r3, r2]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02d      	beq.n	80079bc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2280      	movs	r2, #128	@ 0x80
 8007964:	589b      	ldr	r3, [r3, r2]
 8007966:	4a40      	ldr	r2, [pc, #256]	@ (8007a68 <UART_Start_Receive_DMA+0x140>)
 8007968:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2280      	movs	r2, #128	@ 0x80
 800796e:	589b      	ldr	r3, [r3, r2]
 8007970:	4a3e      	ldr	r2, [pc, #248]	@ (8007a6c <UART_Start_Receive_DMA+0x144>)
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2280      	movs	r2, #128	@ 0x80
 8007978:	589b      	ldr	r3, [r3, r2]
 800797a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a70 <UART_Start_Receive_DMA+0x148>)
 800797c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2280      	movs	r2, #128	@ 0x80
 8007982:	589b      	ldr	r3, [r3, r2]
 8007984:	2200      	movs	r2, #0
 8007986:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2280      	movs	r2, #128	@ 0x80
 800798c:	5898      	ldr	r0, [r3, r2]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3324      	adds	r3, #36	@ 0x24
 8007994:	0019      	movs	r1, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799a:	001a      	movs	r2, r3
 800799c:	1dbb      	adds	r3, r7, #6
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	f7fb fb02 	bl	8002fa8 <HAL_DMA_Start_IT>
 80079a4:	1e03      	subs	r3, r0, #0
 80079a6:	d009      	beq.n	80079bc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2290      	movs	r2, #144	@ 0x90
 80079ac:	2110      	movs	r1, #16
 80079ae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	228c      	movs	r2, #140	@ 0x8c
 80079b4:	2120      	movs	r1, #32
 80079b6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e050      	b.n	8007a5e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d019      	beq.n	80079f8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80079c4:	f3ef 8310 	mrs	r3, PRIMASK
 80079c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80079ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079ce:	2301      	movs	r3, #1
 80079d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d4:	f383 8810 	msr	PRIMASK, r3
}
 80079d8:	46c0      	nop			@ (mov r8, r8)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2180      	movs	r1, #128	@ 0x80
 80079e6:	0049      	lsls	r1, r1, #1
 80079e8:	430a      	orrs	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80079f8:	f3ef 8310 	mrs	r3, PRIMASK
 80079fc:	613b      	str	r3, [r7, #16]
  return(result);
 80079fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a02:	2301      	movs	r3, #1
 8007a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f383 8810 	msr	PRIMASK, r3
}
 8007a0c:	46c0      	nop			@ (mov r8, r8)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2101      	movs	r1, #1
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	609a      	str	r2, [r3, #8]
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f383 8810 	msr	PRIMASK, r3
}
 8007a28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a2e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a30:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a34:	2301      	movs	r3, #1
 8007a36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	f383 8810 	msr	PRIMASK, r3
}
 8007a3e:	46c0      	nop			@ (mov r8, r8)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2140      	movs	r1, #64	@ 0x40
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	609a      	str	r2, [r3, #8]
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	f383 8810 	msr	PRIMASK, r3
}
 8007a5a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	0018      	movs	r0, r3
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b010      	add	sp, #64	@ 0x40
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	08007bc1 	.word	0x08007bc1
 8007a6c:	08007cf1 	.word	0x08007cf1
 8007a70:	08007d33 	.word	0x08007d33

08007a74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08a      	sub	sp, #40	@ 0x28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a80:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a82:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a86:	2301      	movs	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f383 8810 	msr	PRIMASK, r3
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	21c0      	movs	r1, #192	@ 0xc0
 8007a9e:	438a      	bics	r2, r1
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f383 8810 	msr	PRIMASK, r3
}
 8007aac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007aae:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab2:	617b      	str	r3, [r7, #20]
  return(result);
 8007ab4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ab6:	623b      	str	r3, [r7, #32]
 8007ab8:	2301      	movs	r3, #1
 8007aba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f383 8810 	msr	PRIMASK, r3
}
 8007ac2:	46c0      	nop			@ (mov r8, r8)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4908      	ldr	r1, [pc, #32]	@ (8007af0 <UART_EndTxTransfer+0x7c>)
 8007ad0:	400a      	ands	r2, r1
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f383 8810 	msr	PRIMASK, r3
}
 8007ade:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2288      	movs	r2, #136	@ 0x88
 8007ae4:	2120      	movs	r1, #32
 8007ae6:	5099      	str	r1, [r3, r2]
}
 8007ae8:	46c0      	nop			@ (mov r8, r8)
 8007aea:	46bd      	mov	sp, r7
 8007aec:	b00a      	add	sp, #40	@ 0x28
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	ff7fffff 	.word	0xff7fffff

08007af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	@ 0x38
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007afc:	f3ef 8310 	mrs	r3, PRIMASK
 8007b00:	617b      	str	r3, [r7, #20]
  return(result);
 8007b02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b06:	2301      	movs	r3, #1
 8007b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	f383 8810 	msr	PRIMASK, r3
}
 8007b10:	46c0      	nop			@ (mov r8, r8)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4926      	ldr	r1, [pc, #152]	@ (8007bb8 <UART_EndRxTransfer+0xc4>)
 8007b1e:	400a      	ands	r2, r1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	f383 8810 	msr	PRIMASK, r3
}
 8007b2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b32:	623b      	str	r3, [r7, #32]
  return(result);
 8007b34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b38:	2301      	movs	r3, #1
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3e:	f383 8810 	msr	PRIMASK, r3
}
 8007b42:	46c0      	nop			@ (mov r8, r8)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	491b      	ldr	r1, [pc, #108]	@ (8007bbc <UART_EndRxTransfer+0xc8>)
 8007b50:	400a      	ands	r2, r1
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5a:	f383 8810 	msr	PRIMASK, r3
}
 8007b5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d118      	bne.n	8007b9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b68:	f3ef 8310 	mrs	r3, PRIMASK
 8007b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b72:	2301      	movs	r3, #1
 8007b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f383 8810 	msr	PRIMASK, r3
}
 8007b7c:	46c0      	nop			@ (mov r8, r8)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2110      	movs	r1, #16
 8007b8a:	438a      	bics	r2, r1
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f383 8810 	msr	PRIMASK, r3
}
 8007b98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	228c      	movs	r2, #140	@ 0x8c
 8007b9e:	2120      	movs	r1, #32
 8007ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bae:	46c0      	nop			@ (mov r8, r8)
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	b00e      	add	sp, #56	@ 0x38
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	46c0      	nop			@ (mov r8, r8)
 8007bb8:	fffffedf 	.word	0xfffffedf
 8007bbc:	effffffe 	.word	0xeffffffe

08007bc0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b094      	sub	sp, #80	@ 0x50
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	d16f      	bne.n	8007cba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bdc:	225e      	movs	r2, #94	@ 0x5e
 8007bde:	2100      	movs	r1, #0
 8007be0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007be2:	f3ef 8310 	mrs	r3, PRIMASK
 8007be6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007be8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bec:	2301      	movs	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f383 8810 	msr	PRIMASK, r3
}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	493a      	ldr	r1, [pc, #232]	@ (8007cec <UART_DMAReceiveCplt+0x12c>)
 8007c04:	400a      	ands	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	f383 8810 	msr	PRIMASK, r3
}
 8007c12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c14:	f3ef 8310 	mrs	r3, PRIMASK
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1e:	2301      	movs	r3, #1
 8007c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	f383 8810 	msr	PRIMASK, r3
}
 8007c28:	46c0      	nop			@ (mov r8, r8)
 8007c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2101      	movs	r1, #1
 8007c36:	438a      	bics	r2, r1
 8007c38:	609a      	str	r2, [r3, #8]
 8007c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c40:	f383 8810 	msr	PRIMASK, r3
}
 8007c44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c46:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c50:	2301      	movs	r3, #1
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c56:	f383 8810 	msr	PRIMASK, r3
}
 8007c5a:	46c0      	nop			@ (mov r8, r8)
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2140      	movs	r1, #64	@ 0x40
 8007c68:	438a      	bics	r2, r1
 8007c6a:	609a      	str	r2, [r3, #8]
 8007c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c72:	f383 8810 	msr	PRIMASK, r3
}
 8007c76:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c7a:	228c      	movs	r2, #140	@ 0x8c
 8007c7c:	2120      	movs	r1, #32
 8007c7e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d118      	bne.n	8007cba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c88:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c92:	2301      	movs	r3, #1
 8007c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f383 8810 	msr	PRIMASK, r3
}
 8007c9c:	46c0      	nop			@ (mov r8, r8)
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2110      	movs	r1, #16
 8007caa:	438a      	bics	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f383 8810 	msr	PRIMASK, r3
}
 8007cb8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d108      	bne.n	8007cda <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cca:	225c      	movs	r2, #92	@ 0x5c
 8007ccc:	5a9a      	ldrh	r2, [r3, r2]
 8007cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd0:	0011      	movs	r1, r2
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f7f9 f9f6 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cd8:	e003      	b.n	8007ce2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8007cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7ff fab7 	bl	8007250 <HAL_UART_RxCpltCallback>
}
 8007ce2:	46c0      	nop			@ (mov r8, r8)
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b014      	add	sp, #80	@ 0x50
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	fffffeff 	.word	0xfffffeff

08007cf0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10a      	bne.n	8007d22 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	225c      	movs	r2, #92	@ 0x5c
 8007d10:	5a9b      	ldrh	r3, [r3, r2]
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	0011      	movs	r1, r2
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f7f9 f9d2 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d20:	e003      	b.n	8007d2a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	0018      	movs	r0, r3
 8007d26:	f7ff fa9b 	bl	8007260 <HAL_UART_RxHalfCpltCallback>
}
 8007d2a:	46c0      	nop			@ (mov r8, r8)
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b004      	add	sp, #16
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2288      	movs	r2, #136	@ 0x88
 8007d44:	589b      	ldr	r3, [r3, r2]
 8007d46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	228c      	movs	r2, #140	@ 0x8c
 8007d4c:	589b      	ldr	r3, [r3, r2]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	2280      	movs	r2, #128	@ 0x80
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b80      	cmp	r3, #128	@ 0x80
 8007d5c:	d10a      	bne.n	8007d74 <UART_DMAError+0x42>
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b21      	cmp	r3, #33	@ 0x21
 8007d62:	d107      	bne.n	8007d74 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2256      	movs	r2, #86	@ 0x56
 8007d68:	2100      	movs	r1, #0
 8007d6a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f7ff fe80 	bl	8007a74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2240      	movs	r2, #64	@ 0x40
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b40      	cmp	r3, #64	@ 0x40
 8007d80:	d10a      	bne.n	8007d98 <UART_DMAError+0x66>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b22      	cmp	r3, #34	@ 0x22
 8007d86:	d107      	bne.n	8007d98 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	225e      	movs	r2, #94	@ 0x5e
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	0018      	movs	r0, r3
 8007d94:	f7ff feae 	bl	8007af4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2290      	movs	r2, #144	@ 0x90
 8007d9c:	589b      	ldr	r3, [r3, r2]
 8007d9e:	2210      	movs	r2, #16
 8007da0:	431a      	orrs	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2190      	movs	r1, #144	@ 0x90
 8007da6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	0018      	movs	r0, r3
 8007dac:	f7ff fa60 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db0:	46c0      	nop			@ (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b006      	add	sp, #24
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	225e      	movs	r2, #94	@ 0x5e
 8007dca:	2100      	movs	r1, #0
 8007dcc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2256      	movs	r2, #86	@ 0x56
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f7ff fa49 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dde:	46c0      	nop			@ (mov r8, r8)
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b004      	add	sp, #16
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007df8:	2200      	movs	r2, #0
 8007dfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2280      	movs	r2, #128	@ 0x80
 8007e00:	589b      	ldr	r3, [r3, r2]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2280      	movs	r2, #128	@ 0x80
 8007e0a:	589b      	ldr	r3, [r3, r2]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d12d      	bne.n	8007e6e <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2256      	movs	r2, #86	@ 0x56
 8007e16:	2100      	movs	r1, #0
 8007e18:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	225e      	movs	r2, #94	@ 0x5e
 8007e1e:	2100      	movs	r1, #0
 8007e20:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2290      	movs	r2, #144	@ 0x90
 8007e26:	2100      	movs	r1, #0
 8007e28:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	220f      	movs	r2, #15
 8007e30:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007e36:	2380      	movs	r3, #128	@ 0x80
 8007e38:	059b      	lsls	r3, r3, #22
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d107      	bne.n	8007e4e <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2110      	movs	r1, #16
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2288      	movs	r2, #136	@ 0x88
 8007e52:	2120      	movs	r1, #32
 8007e54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	228c      	movs	r2, #140	@ 0x8c
 8007e5a:	2120      	movs	r1, #32
 8007e5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7ff fa0a 	bl	8007280 <HAL_UART_AbortCpltCallback>
 8007e6c:	e000      	b.n	8007e70 <UART_DMATxAbortCallback+0x8a>
      return;
 8007e6e:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e70:	46bd      	mov	sp, r7
 8007e72:	b004      	add	sp, #16
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e82:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2280      	movs	r2, #128	@ 0x80
 8007e88:	589b      	ldr	r3, [r3, r2]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d127      	bne.n	8007ef0 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2256      	movs	r2, #86	@ 0x56
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	225e      	movs	r2, #94	@ 0x5e
 8007eac:	2100      	movs	r1, #0
 8007eae:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2290      	movs	r2, #144	@ 0x90
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	220f      	movs	r2, #15
 8007ebe:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2108      	movs	r1, #8
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2288      	movs	r2, #136	@ 0x88
 8007ed4:	2120      	movs	r1, #32
 8007ed6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	228c      	movs	r2, #140	@ 0x8c
 8007edc:	2120      	movs	r1, #32
 8007ede:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	0018      	movs	r0, r3
 8007eea:	f7ff f9c9 	bl	8007280 <HAL_UART_AbortCpltCallback>
 8007eee:	e000      	b.n	8007ef2 <UART_DMARxAbortCallback+0x7c>
      return;
 8007ef0:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b004      	add	sp, #16
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	@ 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2288      	movs	r2, #136	@ 0x88
 8007f04:	589b      	ldr	r3, [r3, r2]
 8007f06:	2b21      	cmp	r3, #33	@ 0x21
 8007f08:	d14c      	bne.n	8007fa4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2256      	movs	r2, #86	@ 0x56
 8007f0e:	5a9b      	ldrh	r3, [r3, r2]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d132      	bne.n	8007f7c <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f16:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f20:	2301      	movs	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2180      	movs	r1, #128	@ 0x80
 8007f38:	438a      	bics	r2, r1
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f383 8810 	msr	PRIMASK, r3
}
 8007f46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f48:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8007f4e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f50:	623b      	str	r3, [r7, #32]
 8007f52:	2301      	movs	r3, #1
 8007f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	f383 8810 	msr	PRIMASK, r3
}
 8007f5c:	46c0      	nop			@ (mov r8, r8)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2140      	movs	r1, #64	@ 0x40
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	f383 8810 	msr	PRIMASK, r3
}
 8007f78:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007f7a:	e013      	b.n	8007fa4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2256      	movs	r2, #86	@ 0x56
 8007f96:	5a9b      	ldrh	r3, [r3, r2]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b299      	uxth	r1, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2256      	movs	r2, #86	@ 0x56
 8007fa2:	5299      	strh	r1, [r3, r2]
}
 8007fa4:	46c0      	nop			@ (mov r8, r8)
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b00a      	add	sp, #40	@ 0x28
 8007faa:	bd80      	pop	{r7, pc}

08007fac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	@ 0x30
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2288      	movs	r2, #136	@ 0x88
 8007fb8:	589b      	ldr	r3, [r3, r2]
 8007fba:	2b21      	cmp	r3, #33	@ 0x21
 8007fbc:	d151      	bne.n	8008062 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2256      	movs	r2, #86	@ 0x56
 8007fc2:	5a9b      	ldrh	r3, [r3, r2]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d132      	bne.n	8008030 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007fca:	f3ef 8310 	mrs	r3, PRIMASK
 8007fce:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f383 8810 	msr	PRIMASK, r3
}
 8007fde:	46c0      	nop			@ (mov r8, r8)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2180      	movs	r1, #128	@ 0x80
 8007fec:	438a      	bics	r2, r1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8008000:	61bb      	str	r3, [r7, #24]
  return(result);
 8008002:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
 8008006:	2301      	movs	r3, #1
 8008008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f383 8810 	msr	PRIMASK, r3
}
 8008010:	46c0      	nop			@ (mov r8, r8)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2140      	movs	r1, #64	@ 0x40
 800801e:	430a      	orrs	r2, r1
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f383 8810 	msr	PRIMASK, r3
}
 800802c:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800802e:	e018      	b.n	8008062 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008034:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	001a      	movs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	05d2      	lsls	r2, r2, #23
 8008042:	0dd2      	lsrs	r2, r2, #23
 8008044:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804a:	1c9a      	adds	r2, r3, #2
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2256      	movs	r2, #86	@ 0x56
 8008054:	5a9b      	ldrh	r3, [r3, r2]
 8008056:	b29b      	uxth	r3, r3
 8008058:	3b01      	subs	r3, #1
 800805a:	b299      	uxth	r1, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2256      	movs	r2, #86	@ 0x56
 8008060:	5299      	strh	r1, [r3, r2]
}
 8008062:	46c0      	nop			@ (mov r8, r8)
 8008064:	46bd      	mov	sp, r7
 8008066:	b00c      	add	sp, #48	@ 0x30
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	@ 0x30
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2288      	movs	r2, #136	@ 0x88
 8008078:	589b      	ldr	r3, [r3, r2]
 800807a:	2b21      	cmp	r3, #33	@ 0x21
 800807c:	d165      	bne.n	800814a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800807e:	232e      	movs	r3, #46	@ 0x2e
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	216a      	movs	r1, #106	@ 0x6a
 8008086:	5a52      	ldrh	r2, [r2, r1]
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	e059      	b.n	8008140 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2256      	movs	r2, #86	@ 0x56
 8008090:	5a9b      	ldrh	r3, [r3, r2]
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d133      	bne.n	8008100 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008098:	f3ef 8310 	mrs	r3, PRIMASK
 800809c:	60fb      	str	r3, [r7, #12]
  return(result);
 800809e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080a2:	2301      	movs	r3, #1
 80080a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f383 8810 	msr	PRIMASK, r3
}
 80080ac:	46c0      	nop			@ (mov r8, r8)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4926      	ldr	r1, [pc, #152]	@ (8008154 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80080ba:	400a      	ands	r2, r1
 80080bc:	609a      	str	r2, [r3, #8]
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f383 8810 	msr	PRIMASK, r3
}
 80080c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80080ca:	f3ef 8310 	mrs	r3, PRIMASK
 80080ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80080d0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080d4:	2301      	movs	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f383 8810 	msr	PRIMASK, r3
}
 80080de:	46c0      	nop			@ (mov r8, r8)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2140      	movs	r1, #64	@ 0x40
 80080ec:	430a      	orrs	r2, r1
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	f383 8810 	msr	PRIMASK, r3
}
 80080fa:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80080fc:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80080fe:	e024      	b.n	800814a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	2280      	movs	r2, #128	@ 0x80
 8008108:	4013      	ands	r3, r2
 800810a:	d013      	beq.n	8008134 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008110:	781a      	ldrb	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2256      	movs	r2, #86	@ 0x56
 8008126:	5a9b      	ldrh	r3, [r3, r2]
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b299      	uxth	r1, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2256      	movs	r2, #86	@ 0x56
 8008132:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008134:	212e      	movs	r1, #46	@ 0x2e
 8008136:	187b      	adds	r3, r7, r1
 8008138:	881a      	ldrh	r2, [r3, #0]
 800813a:	187b      	adds	r3, r7, r1
 800813c:	3a01      	subs	r2, #1
 800813e:	801a      	strh	r2, [r3, #0]
 8008140:	232e      	movs	r3, #46	@ 0x2e
 8008142:	18fb      	adds	r3, r7, r3
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1a0      	bne.n	800808c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	46bd      	mov	sp, r7
 800814e:	b00c      	add	sp, #48	@ 0x30
 8008150:	bd80      	pop	{r7, pc}
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	ff7fffff 	.word	0xff7fffff

08008158 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08c      	sub	sp, #48	@ 0x30
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2288      	movs	r2, #136	@ 0x88
 8008164:	589b      	ldr	r3, [r3, r2]
 8008166:	2b21      	cmp	r3, #33	@ 0x21
 8008168:	d16a      	bne.n	8008240 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800816a:	232e      	movs	r3, #46	@ 0x2e
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	216a      	movs	r1, #106	@ 0x6a
 8008172:	5a52      	ldrh	r2, [r2, r1]
 8008174:	801a      	strh	r2, [r3, #0]
 8008176:	e05e      	b.n	8008236 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2256      	movs	r2, #86	@ 0x56
 800817c:	5a9b      	ldrh	r3, [r3, r2]
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d133      	bne.n	80081ec <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008184:	f3ef 8310 	mrs	r3, PRIMASK
 8008188:	60bb      	str	r3, [r7, #8]
  return(result);
 800818a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24
 800818e:	2301      	movs	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f383 8810 	msr	PRIMASK, r3
}
 8008198:	46c0      	nop			@ (mov r8, r8)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4928      	ldr	r1, [pc, #160]	@ (8008248 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80081a6:	400a      	ands	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f383 8810 	msr	PRIMASK, r3
}
 80081b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80081b6:	f3ef 8310 	mrs	r3, PRIMASK
 80081ba:	617b      	str	r3, [r7, #20]
  return(result);
 80081bc:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081be:	623b      	str	r3, [r7, #32]
 80081c0:	2301      	movs	r3, #1
 80081c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f383 8810 	msr	PRIMASK, r3
}
 80081ca:	46c0      	nop			@ (mov r8, r8)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2140      	movs	r1, #64	@ 0x40
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f383 8810 	msr	PRIMASK, r3
}
 80081e6:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80081e8:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80081ea:	e029      	b.n	8008240 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	2280      	movs	r2, #128	@ 0x80
 80081f4:	4013      	ands	r3, r2
 80081f6:	d018      	beq.n	800822a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	001a      	movs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	05d2      	lsls	r2, r2, #23
 800820a:	0dd2      	lsrs	r2, r2, #23
 800820c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008212:	1c9a      	adds	r2, r3, #2
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2256      	movs	r2, #86	@ 0x56
 800821c:	5a9b      	ldrh	r3, [r3, r2]
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b299      	uxth	r1, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2256      	movs	r2, #86	@ 0x56
 8008228:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800822a:	212e      	movs	r1, #46	@ 0x2e
 800822c:	187b      	adds	r3, r7, r1
 800822e:	881a      	ldrh	r2, [r3, #0]
 8008230:	187b      	adds	r3, r7, r1
 8008232:	3a01      	subs	r2, #1
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	232e      	movs	r3, #46	@ 0x2e
 8008238:	18fb      	adds	r3, r7, r3
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d19b      	bne.n	8008178 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8008240:	46c0      	nop			@ (mov r8, r8)
 8008242:	46bd      	mov	sp, r7
 8008244:	b00c      	add	sp, #48	@ 0x30
 8008246:	bd80      	pop	{r7, pc}
 8008248:	ff7fffff 	.word	0xff7fffff

0800824c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008254:	f3ef 8310 	mrs	r3, PRIMASK
 8008258:	60bb      	str	r3, [r7, #8]
  return(result);
 800825a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	2301      	movs	r3, #1
 8008260:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f383 8810 	msr	PRIMASK, r3
}
 8008268:	46c0      	nop			@ (mov r8, r8)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2140      	movs	r1, #64	@ 0x40
 8008276:	438a      	bics	r2, r1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f383 8810 	msr	PRIMASK, r3
}
 8008284:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2288      	movs	r2, #136	@ 0x88
 800828a:	2120      	movs	r1, #32
 800828c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	0018      	movs	r0, r3
 8008298:	f7f8 ffbe 	bl	8001218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800829c:	46c0      	nop			@ (mov r8, r8)
 800829e:	46bd      	mov	sp, r7
 80082a0:	b006      	add	sp, #24
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e05d      	b.n	8008378 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2288      	movs	r2, #136	@ 0x88
 80082c0:	589b      	ldr	r3, [r3, r2]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d107      	bne.n	80082d6 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2284      	movs	r2, #132	@ 0x84
 80082ca:	2100      	movs	r1, #0
 80082cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7f9 fdd1 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2288      	movs	r2, #136	@ 0x88
 80082da:	2124      	movs	r1, #36	@ 0x24
 80082dc:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2101      	movs	r1, #1
 80082ea:	438a      	bics	r2, r1
 80082ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	0018      	movs	r0, r3
 80082fa:	f7ff f947 	bl	800758c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	0018      	movs	r0, r3
 8008302:	f7fe ffc5 	bl	8007290 <UART_SetConfig>
 8008306:	0003      	movs	r3, r0
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e033      	b.n	8008378 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2180      	movs	r1, #128	@ 0x80
 800831c:	01c9      	lsls	r1, r1, #7
 800831e:	430a      	orrs	r2, r1
 8008320:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4a15      	ldr	r2, [pc, #84]	@ (8008380 <HAL_RS485Ex_Init+0xdc>)
 800832a:	4013      	ands	r3, r2
 800832c:	0019      	movs	r1, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	430a      	orrs	r2, r1
 8008336:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	055b      	lsls	r3, r3, #21
 800833c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	041b      	lsls	r3, r3, #16
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4313      	orrs	r3, r2
 8008346:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a0d      	ldr	r2, [pc, #52]	@ (8008384 <HAL_RS485Ex_Init+0xe0>)
 8008350:	4013      	ands	r3, r2
 8008352:	0019      	movs	r1, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	430a      	orrs	r2, r1
 800835c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2101      	movs	r1, #1
 800836a:	430a      	orrs	r2, r1
 800836c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	0018      	movs	r0, r3
 8008372:	f7ff f9bf 	bl	80076f4 <UART_CheckIdleState>
 8008376:	0003      	movs	r3, r0
}
 8008378:	0018      	movs	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	b006      	add	sp, #24
 800837e:	bd80      	pop	{r7, pc}
 8008380:	ffff7fff 	.word	0xffff7fff
 8008384:	fc00ffff 	.word	0xfc00ffff

08008388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008390:	46c0      	nop			@ (mov r8, r8)
 8008392:	46bd      	mov	sp, r7
 8008394:	b002      	add	sp, #8
 8008396:	bd80      	pop	{r7, pc}

08008398 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083a0:	46c0      	nop			@ (mov r8, r8)
 80083a2:	46bd      	mov	sp, r7
 80083a4:	b002      	add	sp, #8
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083b0:	46c0      	nop			@ (mov r8, r8)
 80083b2:	46bd      	mov	sp, r7
 80083b4:	b002      	add	sp, #8
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2284      	movs	r2, #132	@ 0x84
 80083c4:	5c9b      	ldrb	r3, [r3, r2]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d101      	bne.n	80083ce <HAL_UARTEx_DisableFifoMode+0x16>
 80083ca:	2302      	movs	r3, #2
 80083cc:	e027      	b.n	800841e <HAL_UARTEx_DisableFifoMode+0x66>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2284      	movs	r2, #132	@ 0x84
 80083d2:	2101      	movs	r1, #1
 80083d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2288      	movs	r2, #136	@ 0x88
 80083da:	2124      	movs	r1, #36	@ 0x24
 80083dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2101      	movs	r1, #1
 80083f2:	438a      	bics	r2, r1
 80083f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4a0b      	ldr	r2, [pc, #44]	@ (8008428 <HAL_UARTEx_DisableFifoMode+0x70>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2288      	movs	r2, #136	@ 0x88
 8008410:	2120      	movs	r1, #32
 8008412:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2284      	movs	r2, #132	@ 0x84
 8008418:	2100      	movs	r1, #0
 800841a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b004      	add	sp, #16
 8008424:	bd80      	pop	{r7, pc}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	dfffffff 	.word	0xdfffffff

0800842c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2284      	movs	r2, #132	@ 0x84
 800843a:	5c9b      	ldrb	r3, [r3, r2]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008440:	2302      	movs	r3, #2
 8008442:	e02e      	b.n	80084a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2284      	movs	r2, #132	@ 0x84
 8008448:	2101      	movs	r1, #1
 800844a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2288      	movs	r2, #136	@ 0x88
 8008450:	2124      	movs	r1, #36	@ 0x24
 8008452:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2101      	movs	r1, #1
 8008468:	438a      	bics	r2, r1
 800846a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	08d9      	lsrs	r1, r3, #3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	0018      	movs	r0, r3
 8008484:	f000 f8bc 	bl	8008600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2288      	movs	r2, #136	@ 0x88
 8008494:	2120      	movs	r1, #32
 8008496:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2284      	movs	r2, #132	@ 0x84
 800849c:	2100      	movs	r1, #0
 800849e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	0018      	movs	r0, r3
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b004      	add	sp, #16
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2284      	movs	r2, #132	@ 0x84
 80084ba:	5c9b      	ldrb	r3, [r3, r2]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d101      	bne.n	80084c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e02f      	b.n	8008524 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2284      	movs	r2, #132	@ 0x84
 80084c8:	2101      	movs	r1, #1
 80084ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2288      	movs	r2, #136	@ 0x88
 80084d0:	2124      	movs	r1, #36	@ 0x24
 80084d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2101      	movs	r1, #1
 80084e8:	438a      	bics	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	4a0e      	ldr	r2, [pc, #56]	@ (800852c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	0019      	movs	r1, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	0018      	movs	r0, r3
 8008506:	f000 f87b 	bl	8008600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2288      	movs	r2, #136	@ 0x88
 8008516:	2120      	movs	r1, #32
 8008518:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2284      	movs	r2, #132	@ 0x84
 800851e:	2100      	movs	r1, #0
 8008520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	0018      	movs	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	b004      	add	sp, #16
 800852a:	bd80      	pop	{r7, pc}
 800852c:	f1ffffff 	.word	0xf1ffffff

08008530 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008530:	b5b0      	push	{r4, r5, r7, lr}
 8008532:	b08a      	sub	sp, #40	@ 0x28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	1dbb      	adds	r3, r7, #6
 800853c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	228c      	movs	r2, #140	@ 0x8c
 8008542:	589b      	ldr	r3, [r3, r2]
 8008544:	2b20      	cmp	r3, #32
 8008546:	d156      	bne.n	80085f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800854e:	1dbb      	adds	r3, r7, #6
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e04e      	b.n	80085f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	2380      	movs	r3, #128	@ 0x80
 8008560:	015b      	lsls	r3, r3, #5
 8008562:	429a      	cmp	r2, r3
 8008564:	d109      	bne.n	800857a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2201      	movs	r2, #1
 8008572:	4013      	ands	r3, r2
 8008574:	d001      	beq.n	800857a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e03e      	b.n	80085f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008586:	2527      	movs	r5, #39	@ 0x27
 8008588:	197c      	adds	r4, r7, r5
 800858a:	1dbb      	adds	r3, r7, #6
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	0018      	movs	r0, r3
 8008594:	f7ff f9c8 	bl	8007928 <UART_Start_Receive_DMA>
 8008598:	0003      	movs	r3, r0
 800859a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800859c:	197b      	adds	r3, r7, r5
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d124      	bne.n	80085ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11c      	bne.n	80085e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2210      	movs	r2, #16
 80085b2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80085b4:	f3ef 8310 	mrs	r3, PRIMASK
 80085b8:	617b      	str	r3, [r7, #20]
  return(result);
 80085ba:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085bc:	623b      	str	r3, [r7, #32]
 80085be:	2301      	movs	r3, #1
 80085c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f383 8810 	msr	PRIMASK, r3
}
 80085c8:	46c0      	nop			@ (mov r8, r8)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2110      	movs	r1, #16
 80085d6:	430a      	orrs	r2, r1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f383 8810 	msr	PRIMASK, r3
}
 80085e4:	e003      	b.n	80085ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80085e6:	2327      	movs	r3, #39	@ 0x27
 80085e8:	18fb      	adds	r3, r7, r3
 80085ea:	2201      	movs	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80085ee:	2327      	movs	r3, #39	@ 0x27
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	e000      	b.n	80085f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80085f6:	2302      	movs	r3, #2
  }
}
 80085f8:	0018      	movs	r0, r3
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b00a      	add	sp, #40	@ 0x28
 80085fe:	bdb0      	pop	{r4, r5, r7, pc}

08008600 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800860c:	2b00      	cmp	r3, #0
 800860e:	d108      	bne.n	8008622 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	226a      	movs	r2, #106	@ 0x6a
 8008614:	2101      	movs	r1, #1
 8008616:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2268      	movs	r2, #104	@ 0x68
 800861c:	2101      	movs	r1, #1
 800861e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008620:	e043      	b.n	80086aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008622:	260f      	movs	r6, #15
 8008624:	19bb      	adds	r3, r7, r6
 8008626:	2208      	movs	r2, #8
 8008628:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800862a:	200e      	movs	r0, #14
 800862c:	183b      	adds	r3, r7, r0
 800862e:	2208      	movs	r2, #8
 8008630:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	0e5b      	lsrs	r3, r3, #25
 800863a:	b2da      	uxtb	r2, r3
 800863c:	240d      	movs	r4, #13
 800863e:	193b      	adds	r3, r7, r4
 8008640:	2107      	movs	r1, #7
 8008642:	400a      	ands	r2, r1
 8008644:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	0f5b      	lsrs	r3, r3, #29
 800864e:	b2da      	uxtb	r2, r3
 8008650:	250c      	movs	r5, #12
 8008652:	197b      	adds	r3, r7, r5
 8008654:	2107      	movs	r1, #7
 8008656:	400a      	ands	r2, r1
 8008658:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800865a:	183b      	adds	r3, r7, r0
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	197a      	adds	r2, r7, r5
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	4914      	ldr	r1, [pc, #80]	@ (80086b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008664:	5c8a      	ldrb	r2, [r1, r2]
 8008666:	435a      	muls	r2, r3
 8008668:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800866a:	197b      	adds	r3, r7, r5
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	4a12      	ldr	r2, [pc, #72]	@ (80086b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008670:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008672:	0019      	movs	r1, r3
 8008674:	f7f7 fddc 	bl	8000230 <__divsi3>
 8008678:	0003      	movs	r3, r0
 800867a:	b299      	uxth	r1, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	226a      	movs	r2, #106	@ 0x6a
 8008680:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008682:	19bb      	adds	r3, r7, r6
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	193a      	adds	r2, r7, r4
 8008688:	7812      	ldrb	r2, [r2, #0]
 800868a:	490a      	ldr	r1, [pc, #40]	@ (80086b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800868c:	5c8a      	ldrb	r2, [r1, r2]
 800868e:	435a      	muls	r2, r3
 8008690:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008692:	193b      	adds	r3, r7, r4
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	4a08      	ldr	r2, [pc, #32]	@ (80086b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008698:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800869a:	0019      	movs	r1, r3
 800869c:	f7f7 fdc8 	bl	8000230 <__divsi3>
 80086a0:	0003      	movs	r3, r0
 80086a2:	b299      	uxth	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2268      	movs	r2, #104	@ 0x68
 80086a8:	5299      	strh	r1, [r3, r2]
}
 80086aa:	46c0      	nop			@ (mov r8, r8)
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b005      	add	sp, #20
 80086b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	08009b68 	.word	0x08009b68
 80086b8:	08009b70 	.word	0x08009b70

080086bc <std>:
 80086bc:	2300      	movs	r3, #0
 80086be:	b510      	push	{r4, lr}
 80086c0:	0004      	movs	r4, r0
 80086c2:	6003      	str	r3, [r0, #0]
 80086c4:	6043      	str	r3, [r0, #4]
 80086c6:	6083      	str	r3, [r0, #8]
 80086c8:	8181      	strh	r1, [r0, #12]
 80086ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80086cc:	81c2      	strh	r2, [r0, #14]
 80086ce:	6103      	str	r3, [r0, #16]
 80086d0:	6143      	str	r3, [r0, #20]
 80086d2:	6183      	str	r3, [r0, #24]
 80086d4:	0019      	movs	r1, r3
 80086d6:	2208      	movs	r2, #8
 80086d8:	305c      	adds	r0, #92	@ 0x5c
 80086da:	f000 fa0f 	bl	8008afc <memset>
 80086de:	4b0b      	ldr	r3, [pc, #44]	@ (800870c <std+0x50>)
 80086e0:	6224      	str	r4, [r4, #32]
 80086e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80086e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008710 <std+0x54>)
 80086e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008714 <std+0x58>)
 80086ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <std+0x5c>)
 80086ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80086f0:	4b0a      	ldr	r3, [pc, #40]	@ (800871c <std+0x60>)
 80086f2:	429c      	cmp	r4, r3
 80086f4:	d005      	beq.n	8008702 <std+0x46>
 80086f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008720 <std+0x64>)
 80086f8:	429c      	cmp	r4, r3
 80086fa:	d002      	beq.n	8008702 <std+0x46>
 80086fc:	4b09      	ldr	r3, [pc, #36]	@ (8008724 <std+0x68>)
 80086fe:	429c      	cmp	r4, r3
 8008700:	d103      	bne.n	800870a <std+0x4e>
 8008702:	0020      	movs	r0, r4
 8008704:	3058      	adds	r0, #88	@ 0x58
 8008706:	f000 fa79 	bl	8008bfc <__retarget_lock_init_recursive>
 800870a:	bd10      	pop	{r4, pc}
 800870c:	08008925 	.word	0x08008925
 8008710:	0800894d 	.word	0x0800894d
 8008714:	08008985 	.word	0x08008985
 8008718:	080089b1 	.word	0x080089b1
 800871c:	2000079c 	.word	0x2000079c
 8008720:	20000804 	.word	0x20000804
 8008724:	2000086c 	.word	0x2000086c

08008728 <stdio_exit_handler>:
 8008728:	b510      	push	{r4, lr}
 800872a:	4a03      	ldr	r2, [pc, #12]	@ (8008738 <stdio_exit_handler+0x10>)
 800872c:	4903      	ldr	r1, [pc, #12]	@ (800873c <stdio_exit_handler+0x14>)
 800872e:	4804      	ldr	r0, [pc, #16]	@ (8008740 <stdio_exit_handler+0x18>)
 8008730:	f000 f86c 	bl	800880c <_fwalk_sglue>
 8008734:	bd10      	pop	{r4, pc}
 8008736:	46c0      	nop			@ (mov r8, r8)
 8008738:	20000070 	.word	0x20000070
 800873c:	0800949d 	.word	0x0800949d
 8008740:	20000080 	.word	0x20000080

08008744 <cleanup_stdio>:
 8008744:	6841      	ldr	r1, [r0, #4]
 8008746:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <cleanup_stdio+0x30>)
 8008748:	b510      	push	{r4, lr}
 800874a:	0004      	movs	r4, r0
 800874c:	4299      	cmp	r1, r3
 800874e:	d001      	beq.n	8008754 <cleanup_stdio+0x10>
 8008750:	f000 fea4 	bl	800949c <_fflush_r>
 8008754:	68a1      	ldr	r1, [r4, #8]
 8008756:	4b08      	ldr	r3, [pc, #32]	@ (8008778 <cleanup_stdio+0x34>)
 8008758:	4299      	cmp	r1, r3
 800875a:	d002      	beq.n	8008762 <cleanup_stdio+0x1e>
 800875c:	0020      	movs	r0, r4
 800875e:	f000 fe9d 	bl	800949c <_fflush_r>
 8008762:	68e1      	ldr	r1, [r4, #12]
 8008764:	4b05      	ldr	r3, [pc, #20]	@ (800877c <cleanup_stdio+0x38>)
 8008766:	4299      	cmp	r1, r3
 8008768:	d002      	beq.n	8008770 <cleanup_stdio+0x2c>
 800876a:	0020      	movs	r0, r4
 800876c:	f000 fe96 	bl	800949c <_fflush_r>
 8008770:	bd10      	pop	{r4, pc}
 8008772:	46c0      	nop			@ (mov r8, r8)
 8008774:	2000079c 	.word	0x2000079c
 8008778:	20000804 	.word	0x20000804
 800877c:	2000086c 	.word	0x2000086c

08008780 <global_stdio_init.part.0>:
 8008780:	b510      	push	{r4, lr}
 8008782:	4b09      	ldr	r3, [pc, #36]	@ (80087a8 <global_stdio_init.part.0+0x28>)
 8008784:	4a09      	ldr	r2, [pc, #36]	@ (80087ac <global_stdio_init.part.0+0x2c>)
 8008786:	2104      	movs	r1, #4
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	4809      	ldr	r0, [pc, #36]	@ (80087b0 <global_stdio_init.part.0+0x30>)
 800878c:	2200      	movs	r2, #0
 800878e:	f7ff ff95 	bl	80086bc <std>
 8008792:	2201      	movs	r2, #1
 8008794:	2109      	movs	r1, #9
 8008796:	4807      	ldr	r0, [pc, #28]	@ (80087b4 <global_stdio_init.part.0+0x34>)
 8008798:	f7ff ff90 	bl	80086bc <std>
 800879c:	2202      	movs	r2, #2
 800879e:	2112      	movs	r1, #18
 80087a0:	4805      	ldr	r0, [pc, #20]	@ (80087b8 <global_stdio_init.part.0+0x38>)
 80087a2:	f7ff ff8b 	bl	80086bc <std>
 80087a6:	bd10      	pop	{r4, pc}
 80087a8:	200008d4 	.word	0x200008d4
 80087ac:	08008729 	.word	0x08008729
 80087b0:	2000079c 	.word	0x2000079c
 80087b4:	20000804 	.word	0x20000804
 80087b8:	2000086c 	.word	0x2000086c

080087bc <__sfp_lock_acquire>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4802      	ldr	r0, [pc, #8]	@ (80087c8 <__sfp_lock_acquire+0xc>)
 80087c0:	f000 fa1d 	bl	8008bfe <__retarget_lock_acquire_recursive>
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	46c0      	nop			@ (mov r8, r8)
 80087c8:	200008dd 	.word	0x200008dd

080087cc <__sfp_lock_release>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	4802      	ldr	r0, [pc, #8]	@ (80087d8 <__sfp_lock_release+0xc>)
 80087d0:	f000 fa16 	bl	8008c00 <__retarget_lock_release_recursive>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	46c0      	nop			@ (mov r8, r8)
 80087d8:	200008dd 	.word	0x200008dd

080087dc <__sinit>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	0004      	movs	r4, r0
 80087e0:	f7ff ffec 	bl	80087bc <__sfp_lock_acquire>
 80087e4:	6a23      	ldr	r3, [r4, #32]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <__sinit+0x14>
 80087ea:	f7ff ffef 	bl	80087cc <__sfp_lock_release>
 80087ee:	bd10      	pop	{r4, pc}
 80087f0:	4b04      	ldr	r3, [pc, #16]	@ (8008804 <__sinit+0x28>)
 80087f2:	6223      	str	r3, [r4, #32]
 80087f4:	4b04      	ldr	r3, [pc, #16]	@ (8008808 <__sinit+0x2c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f6      	bne.n	80087ea <__sinit+0xe>
 80087fc:	f7ff ffc0 	bl	8008780 <global_stdio_init.part.0>
 8008800:	e7f3      	b.n	80087ea <__sinit+0xe>
 8008802:	46c0      	nop			@ (mov r8, r8)
 8008804:	08008745 	.word	0x08008745
 8008808:	200008d4 	.word	0x200008d4

0800880c <_fwalk_sglue>:
 800880c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800880e:	0014      	movs	r4, r2
 8008810:	2600      	movs	r6, #0
 8008812:	9000      	str	r0, [sp, #0]
 8008814:	9101      	str	r1, [sp, #4]
 8008816:	68a5      	ldr	r5, [r4, #8]
 8008818:	6867      	ldr	r7, [r4, #4]
 800881a:	3f01      	subs	r7, #1
 800881c:	d504      	bpl.n	8008828 <_fwalk_sglue+0x1c>
 800881e:	6824      	ldr	r4, [r4, #0]
 8008820:	2c00      	cmp	r4, #0
 8008822:	d1f8      	bne.n	8008816 <_fwalk_sglue+0xa>
 8008824:	0030      	movs	r0, r6
 8008826:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008828:	89ab      	ldrh	r3, [r5, #12]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d908      	bls.n	8008840 <_fwalk_sglue+0x34>
 800882e:	220e      	movs	r2, #14
 8008830:	5eab      	ldrsh	r3, [r5, r2]
 8008832:	3301      	adds	r3, #1
 8008834:	d004      	beq.n	8008840 <_fwalk_sglue+0x34>
 8008836:	0029      	movs	r1, r5
 8008838:	9800      	ldr	r0, [sp, #0]
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	4798      	blx	r3
 800883e:	4306      	orrs	r6, r0
 8008840:	3568      	adds	r5, #104	@ 0x68
 8008842:	e7ea      	b.n	800881a <_fwalk_sglue+0xe>

08008844 <iprintf>:
 8008844:	b40f      	push	{r0, r1, r2, r3}
 8008846:	b507      	push	{r0, r1, r2, lr}
 8008848:	4905      	ldr	r1, [pc, #20]	@ (8008860 <iprintf+0x1c>)
 800884a:	ab04      	add	r3, sp, #16
 800884c:	6808      	ldr	r0, [r1, #0]
 800884e:	cb04      	ldmia	r3!, {r2}
 8008850:	6881      	ldr	r1, [r0, #8]
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f000 fb02 	bl	8008e5c <_vfiprintf_r>
 8008858:	b003      	add	sp, #12
 800885a:	bc08      	pop	{r3}
 800885c:	b004      	add	sp, #16
 800885e:	4718      	bx	r3
 8008860:	2000007c 	.word	0x2000007c

08008864 <_puts_r>:
 8008864:	6a03      	ldr	r3, [r0, #32]
 8008866:	b570      	push	{r4, r5, r6, lr}
 8008868:	0005      	movs	r5, r0
 800886a:	000e      	movs	r6, r1
 800886c:	6884      	ldr	r4, [r0, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <_puts_r+0x12>
 8008872:	f7ff ffb3 	bl	80087dc <__sinit>
 8008876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008878:	07db      	lsls	r3, r3, #31
 800887a:	d405      	bmi.n	8008888 <_puts_r+0x24>
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	059b      	lsls	r3, r3, #22
 8008880:	d402      	bmi.n	8008888 <_puts_r+0x24>
 8008882:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008884:	f000 f9bb 	bl	8008bfe <__retarget_lock_acquire_recursive>
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	071b      	lsls	r3, r3, #28
 800888c:	d502      	bpl.n	8008894 <_puts_r+0x30>
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d11f      	bne.n	80088d4 <_puts_r+0x70>
 8008894:	0021      	movs	r1, r4
 8008896:	0028      	movs	r0, r5
 8008898:	f000 f8d2 	bl	8008a40 <__swsetup_r>
 800889c:	2800      	cmp	r0, #0
 800889e:	d019      	beq.n	80088d4 <_puts_r+0x70>
 80088a0:	2501      	movs	r5, #1
 80088a2:	426d      	negs	r5, r5
 80088a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088a6:	07db      	lsls	r3, r3, #31
 80088a8:	d405      	bmi.n	80088b6 <_puts_r+0x52>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	059b      	lsls	r3, r3, #22
 80088ae:	d402      	bmi.n	80088b6 <_puts_r+0x52>
 80088b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088b2:	f000 f9a5 	bl	8008c00 <__retarget_lock_release_recursive>
 80088b6:	0028      	movs	r0, r5
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
 80088ba:	3601      	adds	r6, #1
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	da04      	bge.n	80088cc <_puts_r+0x68>
 80088c2:	69a2      	ldr	r2, [r4, #24]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	dc16      	bgt.n	80088f6 <_puts_r+0x92>
 80088c8:	290a      	cmp	r1, #10
 80088ca:	d014      	beq.n	80088f6 <_puts_r+0x92>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	6022      	str	r2, [r4, #0]
 80088d2:	7019      	strb	r1, [r3, #0]
 80088d4:	68a3      	ldr	r3, [r4, #8]
 80088d6:	7831      	ldrb	r1, [r6, #0]
 80088d8:	3b01      	subs	r3, #1
 80088da:	2900      	cmp	r1, #0
 80088dc:	d1ed      	bne.n	80088ba <_puts_r+0x56>
 80088de:	60a3      	str	r3, [r4, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	da0f      	bge.n	8008904 <_puts_r+0xa0>
 80088e4:	0022      	movs	r2, r4
 80088e6:	0028      	movs	r0, r5
 80088e8:	310a      	adds	r1, #10
 80088ea:	f000 f867 	bl	80089bc <__swbuf_r>
 80088ee:	3001      	adds	r0, #1
 80088f0:	d0d6      	beq.n	80088a0 <_puts_r+0x3c>
 80088f2:	250a      	movs	r5, #10
 80088f4:	e7d6      	b.n	80088a4 <_puts_r+0x40>
 80088f6:	0022      	movs	r2, r4
 80088f8:	0028      	movs	r0, r5
 80088fa:	f000 f85f 	bl	80089bc <__swbuf_r>
 80088fe:	3001      	adds	r0, #1
 8008900:	d1e8      	bne.n	80088d4 <_puts_r+0x70>
 8008902:	e7cd      	b.n	80088a0 <_puts_r+0x3c>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	6022      	str	r2, [r4, #0]
 800890a:	220a      	movs	r2, #10
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	e7f0      	b.n	80088f2 <_puts_r+0x8e>

08008910 <puts>:
 8008910:	b510      	push	{r4, lr}
 8008912:	4b03      	ldr	r3, [pc, #12]	@ (8008920 <puts+0x10>)
 8008914:	0001      	movs	r1, r0
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	f7ff ffa4 	bl	8008864 <_puts_r>
 800891c:	bd10      	pop	{r4, pc}
 800891e:	46c0      	nop			@ (mov r8, r8)
 8008920:	2000007c 	.word	0x2000007c

08008924 <__sread>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	000c      	movs	r4, r1
 8008928:	250e      	movs	r5, #14
 800892a:	5f49      	ldrsh	r1, [r1, r5]
 800892c:	f000 f914 	bl	8008b58 <_read_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	db03      	blt.n	800893c <__sread+0x18>
 8008934:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008936:	181b      	adds	r3, r3, r0
 8008938:	6563      	str	r3, [r4, #84]	@ 0x54
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	4a02      	ldr	r2, [pc, #8]	@ (8008948 <__sread+0x24>)
 8008940:	4013      	ands	r3, r2
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	e7f9      	b.n	800893a <__sread+0x16>
 8008946:	46c0      	nop			@ (mov r8, r8)
 8008948:	ffffefff 	.word	0xffffefff

0800894c <__swrite>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	001f      	movs	r7, r3
 8008950:	898b      	ldrh	r3, [r1, #12]
 8008952:	0005      	movs	r5, r0
 8008954:	000c      	movs	r4, r1
 8008956:	0016      	movs	r6, r2
 8008958:	05db      	lsls	r3, r3, #23
 800895a:	d505      	bpl.n	8008968 <__swrite+0x1c>
 800895c:	230e      	movs	r3, #14
 800895e:	5ec9      	ldrsh	r1, [r1, r3]
 8008960:	2200      	movs	r2, #0
 8008962:	2302      	movs	r3, #2
 8008964:	f000 f8e4 	bl	8008b30 <_lseek_r>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	4a05      	ldr	r2, [pc, #20]	@ (8008980 <__swrite+0x34>)
 800896c:	0028      	movs	r0, r5
 800896e:	4013      	ands	r3, r2
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	0032      	movs	r2, r6
 8008974:	230e      	movs	r3, #14
 8008976:	5ee1      	ldrsh	r1, [r4, r3]
 8008978:	003b      	movs	r3, r7
 800897a:	f000 f901 	bl	8008b80 <_write_r>
 800897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008980:	ffffefff 	.word	0xffffefff

08008984 <__sseek>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	000c      	movs	r4, r1
 8008988:	250e      	movs	r5, #14
 800898a:	5f49      	ldrsh	r1, [r1, r5]
 800898c:	f000 f8d0 	bl	8008b30 <_lseek_r>
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	1c42      	adds	r2, r0, #1
 8008994:	d103      	bne.n	800899e <__sseek+0x1a>
 8008996:	4a05      	ldr	r2, [pc, #20]	@ (80089ac <__sseek+0x28>)
 8008998:	4013      	ands	r3, r2
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	2280      	movs	r2, #128	@ 0x80
 80089a0:	0152      	lsls	r2, r2, #5
 80089a2:	4313      	orrs	r3, r2
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80089a8:	e7f8      	b.n	800899c <__sseek+0x18>
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	ffffefff 	.word	0xffffefff

080089b0 <__sclose>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	230e      	movs	r3, #14
 80089b4:	5ec9      	ldrsh	r1, [r1, r3]
 80089b6:	f000 f8a9 	bl	8008b0c <_close_r>
 80089ba:	bd10      	pop	{r4, pc}

080089bc <__swbuf_r>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	0006      	movs	r6, r0
 80089c0:	000d      	movs	r5, r1
 80089c2:	0014      	movs	r4, r2
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d004      	beq.n	80089d2 <__swbuf_r+0x16>
 80089c8:	6a03      	ldr	r3, [r0, #32]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <__swbuf_r+0x16>
 80089ce:	f7ff ff05 	bl	80087dc <__sinit>
 80089d2:	69a3      	ldr	r3, [r4, #24]
 80089d4:	60a3      	str	r3, [r4, #8]
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	071b      	lsls	r3, r3, #28
 80089da:	d502      	bpl.n	80089e2 <__swbuf_r+0x26>
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <__swbuf_r+0x3a>
 80089e2:	0021      	movs	r1, r4
 80089e4:	0030      	movs	r0, r6
 80089e6:	f000 f82b 	bl	8008a40 <__swsetup_r>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d003      	beq.n	80089f6 <__swbuf_r+0x3a>
 80089ee:	2501      	movs	r5, #1
 80089f0:	426d      	negs	r5, r5
 80089f2:	0028      	movs	r0, r5
 80089f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	b2ef      	uxtb	r7, r5
 80089fc:	1ac0      	subs	r0, r0, r3
 80089fe:	6963      	ldr	r3, [r4, #20]
 8008a00:	b2ed      	uxtb	r5, r5
 8008a02:	4283      	cmp	r3, r0
 8008a04:	dc05      	bgt.n	8008a12 <__swbuf_r+0x56>
 8008a06:	0021      	movs	r1, r4
 8008a08:	0030      	movs	r0, r6
 8008a0a:	f000 fd47 	bl	800949c <_fflush_r>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d1ed      	bne.n	80089ee <__swbuf_r+0x32>
 8008a12:	68a3      	ldr	r3, [r4, #8]
 8008a14:	3001      	adds	r0, #1
 8008a16:	3b01      	subs	r3, #1
 8008a18:	60a3      	str	r3, [r4, #8]
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	6022      	str	r2, [r4, #0]
 8008a20:	701f      	strb	r7, [r3, #0]
 8008a22:	6963      	ldr	r3, [r4, #20]
 8008a24:	4283      	cmp	r3, r0
 8008a26:	d004      	beq.n	8008a32 <__swbuf_r+0x76>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	07db      	lsls	r3, r3, #31
 8008a2c:	d5e1      	bpl.n	80089f2 <__swbuf_r+0x36>
 8008a2e:	2d0a      	cmp	r5, #10
 8008a30:	d1df      	bne.n	80089f2 <__swbuf_r+0x36>
 8008a32:	0021      	movs	r1, r4
 8008a34:	0030      	movs	r0, r6
 8008a36:	f000 fd31 	bl	800949c <_fflush_r>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d0d9      	beq.n	80089f2 <__swbuf_r+0x36>
 8008a3e:	e7d6      	b.n	80089ee <__swbuf_r+0x32>

08008a40 <__swsetup_r>:
 8008a40:	4b2d      	ldr	r3, [pc, #180]	@ (8008af8 <__swsetup_r+0xb8>)
 8008a42:	b570      	push	{r4, r5, r6, lr}
 8008a44:	0005      	movs	r5, r0
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	000c      	movs	r4, r1
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d004      	beq.n	8008a58 <__swsetup_r+0x18>
 8008a4e:	6a03      	ldr	r3, [r0, #32]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <__swsetup_r+0x18>
 8008a54:	f7ff fec2 	bl	80087dc <__sinit>
 8008a58:	230c      	movs	r3, #12
 8008a5a:	5ee2      	ldrsh	r2, [r4, r3]
 8008a5c:	0713      	lsls	r3, r2, #28
 8008a5e:	d423      	bmi.n	8008aa8 <__swsetup_r+0x68>
 8008a60:	06d3      	lsls	r3, r2, #27
 8008a62:	d407      	bmi.n	8008a74 <__swsetup_r+0x34>
 8008a64:	2309      	movs	r3, #9
 8008a66:	602b      	str	r3, [r5, #0]
 8008a68:	2340      	movs	r3, #64	@ 0x40
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	4240      	negs	r0, r0
 8008a72:	e03a      	b.n	8008aea <__swsetup_r+0xaa>
 8008a74:	0752      	lsls	r2, r2, #29
 8008a76:	d513      	bpl.n	8008aa0 <__swsetup_r+0x60>
 8008a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a7a:	2900      	cmp	r1, #0
 8008a7c:	d008      	beq.n	8008a90 <__swsetup_r+0x50>
 8008a7e:	0023      	movs	r3, r4
 8008a80:	3344      	adds	r3, #68	@ 0x44
 8008a82:	4299      	cmp	r1, r3
 8008a84:	d002      	beq.n	8008a8c <__swsetup_r+0x4c>
 8008a86:	0028      	movs	r0, r5
 8008a88:	f000 f8c4 	bl	8008c14 <_free_r>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a90:	2224      	movs	r2, #36	@ 0x24
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	4393      	bics	r3, r2
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6063      	str	r3, [r4, #4]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	89a2      	ldrh	r2, [r4, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	81a3      	strh	r3, [r4, #12]
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <__swsetup_r+0x86>
 8008aae:	21a0      	movs	r1, #160	@ 0xa0
 8008ab0:	2280      	movs	r2, #128	@ 0x80
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	0089      	lsls	r1, r1, #2
 8008ab6:	0092      	lsls	r2, r2, #2
 8008ab8:	400b      	ands	r3, r1
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d003      	beq.n	8008ac6 <__swsetup_r+0x86>
 8008abe:	0021      	movs	r1, r4
 8008ac0:	0028      	movs	r0, r5
 8008ac2:	f000 fd41 	bl	8009548 <__smakebuf_r>
 8008ac6:	230c      	movs	r3, #12
 8008ac8:	5ee2      	ldrsh	r2, [r4, r3]
 8008aca:	2101      	movs	r1, #1
 8008acc:	0013      	movs	r3, r2
 8008ace:	400b      	ands	r3, r1
 8008ad0:	420a      	tst	r2, r1
 8008ad2:	d00b      	beq.n	8008aec <__swsetup_r+0xac>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60a3      	str	r3, [r4, #8]
 8008ad8:	6963      	ldr	r3, [r4, #20]
 8008ada:	425b      	negs	r3, r3
 8008adc:	61a3      	str	r3, [r4, #24]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	4283      	cmp	r3, r0
 8008ae4:	d101      	bne.n	8008aea <__swsetup_r+0xaa>
 8008ae6:	0613      	lsls	r3, r2, #24
 8008ae8:	d4be      	bmi.n	8008a68 <__swsetup_r+0x28>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	0791      	lsls	r1, r2, #30
 8008aee:	d400      	bmi.n	8008af2 <__swsetup_r+0xb2>
 8008af0:	6963      	ldr	r3, [r4, #20]
 8008af2:	60a3      	str	r3, [r4, #8]
 8008af4:	e7f3      	b.n	8008ade <__swsetup_r+0x9e>
 8008af6:	46c0      	nop			@ (mov r8, r8)
 8008af8:	2000007c 	.word	0x2000007c

08008afc <memset>:
 8008afc:	0003      	movs	r3, r0
 8008afe:	1882      	adds	r2, r0, r2
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d100      	bne.n	8008b06 <memset+0xa>
 8008b04:	4770      	bx	lr
 8008b06:	7019      	strb	r1, [r3, #0]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	e7f9      	b.n	8008b00 <memset+0x4>

08008b0c <_close_r>:
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	b570      	push	{r4, r5, r6, lr}
 8008b10:	4d06      	ldr	r5, [pc, #24]	@ (8008b2c <_close_r+0x20>)
 8008b12:	0004      	movs	r4, r0
 8008b14:	0008      	movs	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f9 fb2b 	bl	8002172 <_close>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d103      	bne.n	8008b28 <_close_r+0x1c>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d000      	beq.n	8008b28 <_close_r+0x1c>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	bd70      	pop	{r4, r5, r6, pc}
 8008b2a:	46c0      	nop			@ (mov r8, r8)
 8008b2c:	200008d8 	.word	0x200008d8

08008b30 <_lseek_r>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	0004      	movs	r4, r0
 8008b34:	0008      	movs	r0, r1
 8008b36:	0011      	movs	r1, r2
 8008b38:	001a      	movs	r2, r3
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4d05      	ldr	r5, [pc, #20]	@ (8008b54 <_lseek_r+0x24>)
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	f7f9 fb38 	bl	80021b4 <_lseek>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d103      	bne.n	8008b50 <_lseek_r+0x20>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d000      	beq.n	8008b50 <_lseek_r+0x20>
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	bd70      	pop	{r4, r5, r6, pc}
 8008b52:	46c0      	nop			@ (mov r8, r8)
 8008b54:	200008d8 	.word	0x200008d8

08008b58 <_read_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	0004      	movs	r4, r0
 8008b5c:	0008      	movs	r0, r1
 8008b5e:	0011      	movs	r1, r2
 8008b60:	001a      	movs	r2, r3
 8008b62:	2300      	movs	r3, #0
 8008b64:	4d05      	ldr	r5, [pc, #20]	@ (8008b7c <_read_r+0x24>)
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7f9 faca 	bl	8002100 <_read>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d103      	bne.n	8008b78 <_read_r+0x20>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d000      	beq.n	8008b78 <_read_r+0x20>
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	200008d8 	.word	0x200008d8

08008b80 <_write_r>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	0004      	movs	r4, r0
 8008b84:	0008      	movs	r0, r1
 8008b86:	0011      	movs	r1, r2
 8008b88:	001a      	movs	r2, r3
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4d05      	ldr	r5, [pc, #20]	@ (8008ba4 <_write_r+0x24>)
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f9 fad3 	bl	800213a <_write>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d103      	bne.n	8008ba0 <_write_r+0x20>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d000      	beq.n	8008ba0 <_write_r+0x20>
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	200008d8 	.word	0x200008d8

08008ba8 <__errno>:
 8008ba8:	4b01      	ldr	r3, [pc, #4]	@ (8008bb0 <__errno+0x8>)
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	4770      	bx	lr
 8008bae:	46c0      	nop			@ (mov r8, r8)
 8008bb0:	2000007c 	.word	0x2000007c

08008bb4 <__libc_init_array>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	4c0c      	ldr	r4, [pc, #48]	@ (8008bec <__libc_init_array+0x38>)
 8008bba:	4d0d      	ldr	r5, [pc, #52]	@ (8008bf0 <__libc_init_array+0x3c>)
 8008bbc:	1b64      	subs	r4, r4, r5
 8008bbe:	10a4      	asrs	r4, r4, #2
 8008bc0:	42a6      	cmp	r6, r4
 8008bc2:	d109      	bne.n	8008bd8 <__libc_init_array+0x24>
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	f000 fd43 	bl	8009650 <_init>
 8008bca:	4c0a      	ldr	r4, [pc, #40]	@ (8008bf4 <__libc_init_array+0x40>)
 8008bcc:	4d0a      	ldr	r5, [pc, #40]	@ (8008bf8 <__libc_init_array+0x44>)
 8008bce:	1b64      	subs	r4, r4, r5
 8008bd0:	10a4      	asrs	r4, r4, #2
 8008bd2:	42a6      	cmp	r6, r4
 8008bd4:	d105      	bne.n	8008be2 <__libc_init_array+0x2e>
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	00b3      	lsls	r3, r6, #2
 8008bda:	58eb      	ldr	r3, [r5, r3]
 8008bdc:	4798      	blx	r3
 8008bde:	3601      	adds	r6, #1
 8008be0:	e7ee      	b.n	8008bc0 <__libc_init_array+0xc>
 8008be2:	00b3      	lsls	r3, r6, #2
 8008be4:	58eb      	ldr	r3, [r5, r3]
 8008be6:	4798      	blx	r3
 8008be8:	3601      	adds	r6, #1
 8008bea:	e7f2      	b.n	8008bd2 <__libc_init_array+0x1e>
 8008bec:	08009bac 	.word	0x08009bac
 8008bf0:	08009bac 	.word	0x08009bac
 8008bf4:	08009bb0 	.word	0x08009bb0
 8008bf8:	08009bac 	.word	0x08009bac

08008bfc <__retarget_lock_init_recursive>:
 8008bfc:	4770      	bx	lr

08008bfe <__retarget_lock_acquire_recursive>:
 8008bfe:	4770      	bx	lr

08008c00 <__retarget_lock_release_recursive>:
 8008c00:	4770      	bx	lr

08008c02 <memcpy>:
 8008c02:	2300      	movs	r3, #0
 8008c04:	b510      	push	{r4, lr}
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d100      	bne.n	8008c0c <memcpy+0xa>
 8008c0a:	bd10      	pop	{r4, pc}
 8008c0c:	5ccc      	ldrb	r4, [r1, r3]
 8008c0e:	54c4      	strb	r4, [r0, r3]
 8008c10:	3301      	adds	r3, #1
 8008c12:	e7f8      	b.n	8008c06 <memcpy+0x4>

08008c14 <_free_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	0005      	movs	r5, r0
 8008c18:	1e0c      	subs	r4, r1, #0
 8008c1a:	d010      	beq.n	8008c3e <_free_r+0x2a>
 8008c1c:	3c04      	subs	r4, #4
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	da00      	bge.n	8008c26 <_free_r+0x12>
 8008c24:	18e4      	adds	r4, r4, r3
 8008c26:	0028      	movs	r0, r5
 8008c28:	f000 f8e0 	bl	8008dec <__malloc_lock>
 8008c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ca4 <_free_r+0x90>)
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <_free_r+0x2c>
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	6014      	str	r4, [r2, #0]
 8008c38:	0028      	movs	r0, r5
 8008c3a:	f000 f8df 	bl	8008dfc <__malloc_unlock>
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	d908      	bls.n	8008c56 <_free_r+0x42>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	1821      	adds	r1, r4, r0
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	d1f3      	bne.n	8008c34 <_free_r+0x20>
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	1809      	adds	r1, r1, r0
 8008c52:	6021      	str	r1, [r4, #0]
 8008c54:	e7ee      	b.n	8008c34 <_free_r+0x20>
 8008c56:	001a      	movs	r2, r3
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <_free_r+0x4e>
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	d9f9      	bls.n	8008c56 <_free_r+0x42>
 8008c62:	6811      	ldr	r1, [r2, #0]
 8008c64:	1850      	adds	r0, r2, r1
 8008c66:	42a0      	cmp	r0, r4
 8008c68:	d10b      	bne.n	8008c82 <_free_r+0x6e>
 8008c6a:	6820      	ldr	r0, [r4, #0]
 8008c6c:	1809      	adds	r1, r1, r0
 8008c6e:	1850      	adds	r0, r2, r1
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	4283      	cmp	r3, r0
 8008c74:	d1e0      	bne.n	8008c38 <_free_r+0x24>
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	1841      	adds	r1, r0, r1
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	6053      	str	r3, [r2, #4]
 8008c80:	e7da      	b.n	8008c38 <_free_r+0x24>
 8008c82:	42a0      	cmp	r0, r4
 8008c84:	d902      	bls.n	8008c8c <_free_r+0x78>
 8008c86:	230c      	movs	r3, #12
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	e7d5      	b.n	8008c38 <_free_r+0x24>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	1821      	adds	r1, r4, r0
 8008c90:	428b      	cmp	r3, r1
 8008c92:	d103      	bne.n	8008c9c <_free_r+0x88>
 8008c94:	6819      	ldr	r1, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	1809      	adds	r1, r1, r0
 8008c9a:	6021      	str	r1, [r4, #0]
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	6054      	str	r4, [r2, #4]
 8008ca0:	e7ca      	b.n	8008c38 <_free_r+0x24>
 8008ca2:	46c0      	nop			@ (mov r8, r8)
 8008ca4:	200008e4 	.word	0x200008e4

08008ca8 <sbrk_aligned>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	4e0f      	ldr	r6, [pc, #60]	@ (8008ce8 <sbrk_aligned+0x40>)
 8008cac:	000d      	movs	r5, r1
 8008cae:	6831      	ldr	r1, [r6, #0]
 8008cb0:	0004      	movs	r4, r0
 8008cb2:	2900      	cmp	r1, #0
 8008cb4:	d102      	bne.n	8008cbc <sbrk_aligned+0x14>
 8008cb6:	f000 fcad 	bl	8009614 <_sbrk_r>
 8008cba:	6030      	str	r0, [r6, #0]
 8008cbc:	0029      	movs	r1, r5
 8008cbe:	0020      	movs	r0, r4
 8008cc0:	f000 fca8 	bl	8009614 <_sbrk_r>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d103      	bne.n	8008cd0 <sbrk_aligned+0x28>
 8008cc8:	2501      	movs	r5, #1
 8008cca:	426d      	negs	r5, r5
 8008ccc:	0028      	movs	r0, r5
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	1cc5      	adds	r5, r0, #3
 8008cd4:	439d      	bics	r5, r3
 8008cd6:	42a8      	cmp	r0, r5
 8008cd8:	d0f8      	beq.n	8008ccc <sbrk_aligned+0x24>
 8008cda:	1a29      	subs	r1, r5, r0
 8008cdc:	0020      	movs	r0, r4
 8008cde:	f000 fc99 	bl	8009614 <_sbrk_r>
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d1f2      	bne.n	8008ccc <sbrk_aligned+0x24>
 8008ce6:	e7ef      	b.n	8008cc8 <sbrk_aligned+0x20>
 8008ce8:	200008e0 	.word	0x200008e0

08008cec <_malloc_r>:
 8008cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cee:	2203      	movs	r2, #3
 8008cf0:	1ccb      	adds	r3, r1, #3
 8008cf2:	4393      	bics	r3, r2
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	0005      	movs	r5, r0
 8008cf8:	001f      	movs	r7, r3
 8008cfa:	2b0c      	cmp	r3, #12
 8008cfc:	d234      	bcs.n	8008d68 <_malloc_r+0x7c>
 8008cfe:	270c      	movs	r7, #12
 8008d00:	42b9      	cmp	r1, r7
 8008d02:	d833      	bhi.n	8008d6c <_malloc_r+0x80>
 8008d04:	0028      	movs	r0, r5
 8008d06:	f000 f871 	bl	8008dec <__malloc_lock>
 8008d0a:	4e37      	ldr	r6, [pc, #220]	@ (8008de8 <_malloc_r+0xfc>)
 8008d0c:	6833      	ldr	r3, [r6, #0]
 8008d0e:	001c      	movs	r4, r3
 8008d10:	2c00      	cmp	r4, #0
 8008d12:	d12f      	bne.n	8008d74 <_malloc_r+0x88>
 8008d14:	0039      	movs	r1, r7
 8008d16:	0028      	movs	r0, r5
 8008d18:	f7ff ffc6 	bl	8008ca8 <sbrk_aligned>
 8008d1c:	0004      	movs	r4, r0
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	d15f      	bne.n	8008de2 <_malloc_r+0xf6>
 8008d22:	6834      	ldr	r4, [r6, #0]
 8008d24:	9400      	str	r4, [sp, #0]
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d14a      	bne.n	8008dc2 <_malloc_r+0xd6>
 8008d2c:	2c00      	cmp	r4, #0
 8008d2e:	d052      	beq.n	8008dd6 <_malloc_r+0xea>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	0028      	movs	r0, r5
 8008d34:	18e3      	adds	r3, r4, r3
 8008d36:	9900      	ldr	r1, [sp, #0]
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	f000 fc6b 	bl	8009614 <_sbrk_r>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	4283      	cmp	r3, r0
 8008d42:	d148      	bne.n	8008dd6 <_malloc_r+0xea>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	0028      	movs	r0, r5
 8008d48:	1aff      	subs	r7, r7, r3
 8008d4a:	0039      	movs	r1, r7
 8008d4c:	f7ff ffac 	bl	8008ca8 <sbrk_aligned>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d040      	beq.n	8008dd6 <_malloc_r+0xea>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	19db      	adds	r3, r3, r7
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	6833      	ldr	r3, [r6, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	2a00      	cmp	r2, #0
 8008d60:	d133      	bne.n	8008dca <_malloc_r+0xde>
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	6033      	str	r3, [r6, #0]
 8008d66:	e019      	b.n	8008d9c <_malloc_r+0xb0>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dac9      	bge.n	8008d00 <_malloc_r+0x14>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	2000      	movs	r0, #0
 8008d72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d74:	6821      	ldr	r1, [r4, #0]
 8008d76:	1bc9      	subs	r1, r1, r7
 8008d78:	d420      	bmi.n	8008dbc <_malloc_r+0xd0>
 8008d7a:	290b      	cmp	r1, #11
 8008d7c:	d90a      	bls.n	8008d94 <_malloc_r+0xa8>
 8008d7e:	19e2      	adds	r2, r4, r7
 8008d80:	6027      	str	r7, [r4, #0]
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	d104      	bne.n	8008d90 <_malloc_r+0xa4>
 8008d86:	6032      	str	r2, [r6, #0]
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	6011      	str	r1, [r2, #0]
 8008d8c:	6053      	str	r3, [r2, #4]
 8008d8e:	e005      	b.n	8008d9c <_malloc_r+0xb0>
 8008d90:	605a      	str	r2, [r3, #4]
 8008d92:	e7f9      	b.n	8008d88 <_malloc_r+0x9c>
 8008d94:	6862      	ldr	r2, [r4, #4]
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	d10e      	bne.n	8008db8 <_malloc_r+0xcc>
 8008d9a:	6032      	str	r2, [r6, #0]
 8008d9c:	0028      	movs	r0, r5
 8008d9e:	f000 f82d 	bl	8008dfc <__malloc_unlock>
 8008da2:	0020      	movs	r0, r4
 8008da4:	2207      	movs	r2, #7
 8008da6:	300b      	adds	r0, #11
 8008da8:	1d23      	adds	r3, r4, #4
 8008daa:	4390      	bics	r0, r2
 8008dac:	1ac2      	subs	r2, r0, r3
 8008dae:	4298      	cmp	r0, r3
 8008db0:	d0df      	beq.n	8008d72 <_malloc_r+0x86>
 8008db2:	1a1b      	subs	r3, r3, r0
 8008db4:	50a3      	str	r3, [r4, r2]
 8008db6:	e7dc      	b.n	8008d72 <_malloc_r+0x86>
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	e7ef      	b.n	8008d9c <_malloc_r+0xb0>
 8008dbc:	0023      	movs	r3, r4
 8008dbe:	6864      	ldr	r4, [r4, #4]
 8008dc0:	e7a6      	b.n	8008d10 <_malloc_r+0x24>
 8008dc2:	9c00      	ldr	r4, [sp, #0]
 8008dc4:	6863      	ldr	r3, [r4, #4]
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	e7ad      	b.n	8008d26 <_malloc_r+0x3a>
 8008dca:	001a      	movs	r2, r3
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	d1fb      	bne.n	8008dca <_malloc_r+0xde>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e7da      	b.n	8008d8c <_malloc_r+0xa0>
 8008dd6:	230c      	movs	r3, #12
 8008dd8:	0028      	movs	r0, r5
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	f000 f80e 	bl	8008dfc <__malloc_unlock>
 8008de0:	e7c6      	b.n	8008d70 <_malloc_r+0x84>
 8008de2:	6007      	str	r7, [r0, #0]
 8008de4:	e7da      	b.n	8008d9c <_malloc_r+0xb0>
 8008de6:	46c0      	nop			@ (mov r8, r8)
 8008de8:	200008e4 	.word	0x200008e4

08008dec <__malloc_lock>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4802      	ldr	r0, [pc, #8]	@ (8008df8 <__malloc_lock+0xc>)
 8008df0:	f7ff ff05 	bl	8008bfe <__retarget_lock_acquire_recursive>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	46c0      	nop			@ (mov r8, r8)
 8008df8:	200008dc 	.word	0x200008dc

08008dfc <__malloc_unlock>:
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	4802      	ldr	r0, [pc, #8]	@ (8008e08 <__malloc_unlock+0xc>)
 8008e00:	f7ff fefe 	bl	8008c00 <__retarget_lock_release_recursive>
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	46c0      	nop			@ (mov r8, r8)
 8008e08:	200008dc 	.word	0x200008dc

08008e0c <__sfputc_r>:
 8008e0c:	6893      	ldr	r3, [r2, #8]
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	3b01      	subs	r3, #1
 8008e12:	6093      	str	r3, [r2, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	da04      	bge.n	8008e22 <__sfputc_r+0x16>
 8008e18:	6994      	ldr	r4, [r2, #24]
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	db07      	blt.n	8008e2e <__sfputc_r+0x22>
 8008e1e:	290a      	cmp	r1, #10
 8008e20:	d005      	beq.n	8008e2e <__sfputc_r+0x22>
 8008e22:	6813      	ldr	r3, [r2, #0]
 8008e24:	1c58      	adds	r0, r3, #1
 8008e26:	6010      	str	r0, [r2, #0]
 8008e28:	7019      	strb	r1, [r3, #0]
 8008e2a:	0008      	movs	r0, r1
 8008e2c:	bd10      	pop	{r4, pc}
 8008e2e:	f7ff fdc5 	bl	80089bc <__swbuf_r>
 8008e32:	0001      	movs	r1, r0
 8008e34:	e7f9      	b.n	8008e2a <__sfputc_r+0x1e>

08008e36 <__sfputs_r>:
 8008e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e38:	0006      	movs	r6, r0
 8008e3a:	000f      	movs	r7, r1
 8008e3c:	0014      	movs	r4, r2
 8008e3e:	18d5      	adds	r5, r2, r3
 8008e40:	42ac      	cmp	r4, r5
 8008e42:	d101      	bne.n	8008e48 <__sfputs_r+0x12>
 8008e44:	2000      	movs	r0, #0
 8008e46:	e007      	b.n	8008e58 <__sfputs_r+0x22>
 8008e48:	7821      	ldrb	r1, [r4, #0]
 8008e4a:	003a      	movs	r2, r7
 8008e4c:	0030      	movs	r0, r6
 8008e4e:	f7ff ffdd 	bl	8008e0c <__sfputc_r>
 8008e52:	3401      	adds	r4, #1
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d1f3      	bne.n	8008e40 <__sfputs_r+0xa>
 8008e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e5c <_vfiprintf_r>:
 8008e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e5e:	b0a1      	sub	sp, #132	@ 0x84
 8008e60:	000f      	movs	r7, r1
 8008e62:	0015      	movs	r5, r2
 8008e64:	001e      	movs	r6, r3
 8008e66:	9003      	str	r0, [sp, #12]
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d004      	beq.n	8008e76 <_vfiprintf_r+0x1a>
 8008e6c:	6a03      	ldr	r3, [r0, #32]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <_vfiprintf_r+0x1a>
 8008e72:	f7ff fcb3 	bl	80087dc <__sinit>
 8008e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e78:	07db      	lsls	r3, r3, #31
 8008e7a:	d405      	bmi.n	8008e88 <_vfiprintf_r+0x2c>
 8008e7c:	89bb      	ldrh	r3, [r7, #12]
 8008e7e:	059b      	lsls	r3, r3, #22
 8008e80:	d402      	bmi.n	8008e88 <_vfiprintf_r+0x2c>
 8008e82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008e84:	f7ff febb 	bl	8008bfe <__retarget_lock_acquire_recursive>
 8008e88:	89bb      	ldrh	r3, [r7, #12]
 8008e8a:	071b      	lsls	r3, r3, #28
 8008e8c:	d502      	bpl.n	8008e94 <_vfiprintf_r+0x38>
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d113      	bne.n	8008ebc <_vfiprintf_r+0x60>
 8008e94:	0039      	movs	r1, r7
 8008e96:	9803      	ldr	r0, [sp, #12]
 8008e98:	f7ff fdd2 	bl	8008a40 <__swsetup_r>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d00d      	beq.n	8008ebc <_vfiprintf_r+0x60>
 8008ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ea2:	07db      	lsls	r3, r3, #31
 8008ea4:	d503      	bpl.n	8008eae <_vfiprintf_r+0x52>
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	4240      	negs	r0, r0
 8008eaa:	b021      	add	sp, #132	@ 0x84
 8008eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eae:	89bb      	ldrh	r3, [r7, #12]
 8008eb0:	059b      	lsls	r3, r3, #22
 8008eb2:	d4f8      	bmi.n	8008ea6 <_vfiprintf_r+0x4a>
 8008eb4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008eb6:	f7ff fea3 	bl	8008c00 <__retarget_lock_release_recursive>
 8008eba:	e7f4      	b.n	8008ea6 <_vfiprintf_r+0x4a>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	ac08      	add	r4, sp, #32
 8008ec0:	6163      	str	r3, [r4, #20]
 8008ec2:	3320      	adds	r3, #32
 8008ec4:	7663      	strb	r3, [r4, #25]
 8008ec6:	3310      	adds	r3, #16
 8008ec8:	76a3      	strb	r3, [r4, #26]
 8008eca:	9607      	str	r6, [sp, #28]
 8008ecc:	002e      	movs	r6, r5
 8008ece:	7833      	ldrb	r3, [r6, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <_vfiprintf_r+0x7c>
 8008ed4:	2b25      	cmp	r3, #37	@ 0x25
 8008ed6:	d148      	bne.n	8008f6a <_vfiprintf_r+0x10e>
 8008ed8:	1b73      	subs	r3, r6, r5
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	42ae      	cmp	r6, r5
 8008ede:	d00b      	beq.n	8008ef8 <_vfiprintf_r+0x9c>
 8008ee0:	002a      	movs	r2, r5
 8008ee2:	0039      	movs	r1, r7
 8008ee4:	9803      	ldr	r0, [sp, #12]
 8008ee6:	f7ff ffa6 	bl	8008e36 <__sfputs_r>
 8008eea:	3001      	adds	r0, #1
 8008eec:	d100      	bne.n	8008ef0 <_vfiprintf_r+0x94>
 8008eee:	e0ae      	b.n	800904e <_vfiprintf_r+0x1f2>
 8008ef0:	6963      	ldr	r3, [r4, #20]
 8008ef2:	9a05      	ldr	r2, [sp, #20]
 8008ef4:	189b      	adds	r3, r3, r2
 8008ef6:	6163      	str	r3, [r4, #20]
 8008ef8:	7833      	ldrb	r3, [r6, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d100      	bne.n	8008f00 <_vfiprintf_r+0xa4>
 8008efe:	e0a6      	b.n	800904e <_vfiprintf_r+0x1f2>
 8008f00:	2201      	movs	r2, #1
 8008f02:	2300      	movs	r3, #0
 8008f04:	4252      	negs	r2, r2
 8008f06:	6062      	str	r2, [r4, #4]
 8008f08:	a904      	add	r1, sp, #16
 8008f0a:	3254      	adds	r2, #84	@ 0x54
 8008f0c:	1852      	adds	r2, r2, r1
 8008f0e:	1c75      	adds	r5, r6, #1
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	60e3      	str	r3, [r4, #12]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	7013      	strb	r3, [r2, #0]
 8008f18:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008f1a:	4b59      	ldr	r3, [pc, #356]	@ (8009080 <_vfiprintf_r+0x224>)
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	0018      	movs	r0, r3
 8008f20:	7829      	ldrb	r1, [r5, #0]
 8008f22:	9305      	str	r3, [sp, #20]
 8008f24:	f000 fb88 	bl	8009638 <memchr>
 8008f28:	1c6e      	adds	r6, r5, #1
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d11f      	bne.n	8008f6e <_vfiprintf_r+0x112>
 8008f2e:	6822      	ldr	r2, [r4, #0]
 8008f30:	06d3      	lsls	r3, r2, #27
 8008f32:	d504      	bpl.n	8008f3e <_vfiprintf_r+0xe2>
 8008f34:	2353      	movs	r3, #83	@ 0x53
 8008f36:	a904      	add	r1, sp, #16
 8008f38:	185b      	adds	r3, r3, r1
 8008f3a:	2120      	movs	r1, #32
 8008f3c:	7019      	strb	r1, [r3, #0]
 8008f3e:	0713      	lsls	r3, r2, #28
 8008f40:	d504      	bpl.n	8008f4c <_vfiprintf_r+0xf0>
 8008f42:	2353      	movs	r3, #83	@ 0x53
 8008f44:	a904      	add	r1, sp, #16
 8008f46:	185b      	adds	r3, r3, r1
 8008f48:	212b      	movs	r1, #43	@ 0x2b
 8008f4a:	7019      	strb	r1, [r3, #0]
 8008f4c:	782b      	ldrb	r3, [r5, #0]
 8008f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f50:	d016      	beq.n	8008f80 <_vfiprintf_r+0x124>
 8008f52:	002e      	movs	r6, r5
 8008f54:	2100      	movs	r1, #0
 8008f56:	200a      	movs	r0, #10
 8008f58:	68e3      	ldr	r3, [r4, #12]
 8008f5a:	7832      	ldrb	r2, [r6, #0]
 8008f5c:	1c75      	adds	r5, r6, #1
 8008f5e:	3a30      	subs	r2, #48	@ 0x30
 8008f60:	2a09      	cmp	r2, #9
 8008f62:	d950      	bls.n	8009006 <_vfiprintf_r+0x1aa>
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d111      	bne.n	8008f8c <_vfiprintf_r+0x130>
 8008f68:	e017      	b.n	8008f9a <_vfiprintf_r+0x13e>
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7af      	b.n	8008ece <_vfiprintf_r+0x72>
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	6822      	ldr	r2, [r4, #0]
 8008f72:	1ac0      	subs	r0, r0, r3
 8008f74:	2301      	movs	r3, #1
 8008f76:	4083      	lsls	r3, r0
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	0035      	movs	r5, r6
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	e7cc      	b.n	8008f1a <_vfiprintf_r+0xbe>
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	1d19      	adds	r1, r3, #4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	9107      	str	r1, [sp, #28]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	db01      	blt.n	8008f90 <_vfiprintf_r+0x134>
 8008f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f8e:	e004      	b.n	8008f9a <_vfiprintf_r+0x13e>
 8008f90:	425b      	negs	r3, r3
 8008f92:	60e3      	str	r3, [r4, #12]
 8008f94:	2302      	movs	r3, #2
 8008f96:	4313      	orrs	r3, r2
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	7833      	ldrb	r3, [r6, #0]
 8008f9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f9e:	d10c      	bne.n	8008fba <_vfiprintf_r+0x15e>
 8008fa0:	7873      	ldrb	r3, [r6, #1]
 8008fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fa4:	d134      	bne.n	8009010 <_vfiprintf_r+0x1b4>
 8008fa6:	9b07      	ldr	r3, [sp, #28]
 8008fa8:	3602      	adds	r6, #2
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	9207      	str	r2, [sp, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	da01      	bge.n	8008fb8 <_vfiprintf_r+0x15c>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	425b      	negs	r3, r3
 8008fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fba:	4d32      	ldr	r5, [pc, #200]	@ (8009084 <_vfiprintf_r+0x228>)
 8008fbc:	2203      	movs	r2, #3
 8008fbe:	0028      	movs	r0, r5
 8008fc0:	7831      	ldrb	r1, [r6, #0]
 8008fc2:	f000 fb39 	bl	8009638 <memchr>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d006      	beq.n	8008fd8 <_vfiprintf_r+0x17c>
 8008fca:	2340      	movs	r3, #64	@ 0x40
 8008fcc:	1b40      	subs	r0, r0, r5
 8008fce:	4083      	lsls	r3, r0
 8008fd0:	6822      	ldr	r2, [r4, #0]
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	7831      	ldrb	r1, [r6, #0]
 8008fda:	2206      	movs	r2, #6
 8008fdc:	482a      	ldr	r0, [pc, #168]	@ (8009088 <_vfiprintf_r+0x22c>)
 8008fde:	1c75      	adds	r5, r6, #1
 8008fe0:	7621      	strb	r1, [r4, #24]
 8008fe2:	f000 fb29 	bl	8009638 <memchr>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d040      	beq.n	800906c <_vfiprintf_r+0x210>
 8008fea:	4b28      	ldr	r3, [pc, #160]	@ (800908c <_vfiprintf_r+0x230>)
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d122      	bne.n	8009036 <_vfiprintf_r+0x1da>
 8008ff0:	2207      	movs	r2, #7
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	3307      	adds	r3, #7
 8008ff6:	4393      	bics	r3, r2
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	9307      	str	r3, [sp, #28]
 8008ffc:	6963      	ldr	r3, [r4, #20]
 8008ffe:	9a04      	ldr	r2, [sp, #16]
 8009000:	189b      	adds	r3, r3, r2
 8009002:	6163      	str	r3, [r4, #20]
 8009004:	e762      	b.n	8008ecc <_vfiprintf_r+0x70>
 8009006:	4343      	muls	r3, r0
 8009008:	002e      	movs	r6, r5
 800900a:	2101      	movs	r1, #1
 800900c:	189b      	adds	r3, r3, r2
 800900e:	e7a4      	b.n	8008f5a <_vfiprintf_r+0xfe>
 8009010:	2300      	movs	r3, #0
 8009012:	200a      	movs	r0, #10
 8009014:	0019      	movs	r1, r3
 8009016:	3601      	adds	r6, #1
 8009018:	6063      	str	r3, [r4, #4]
 800901a:	7832      	ldrb	r2, [r6, #0]
 800901c:	1c75      	adds	r5, r6, #1
 800901e:	3a30      	subs	r2, #48	@ 0x30
 8009020:	2a09      	cmp	r2, #9
 8009022:	d903      	bls.n	800902c <_vfiprintf_r+0x1d0>
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0c8      	beq.n	8008fba <_vfiprintf_r+0x15e>
 8009028:	9109      	str	r1, [sp, #36]	@ 0x24
 800902a:	e7c6      	b.n	8008fba <_vfiprintf_r+0x15e>
 800902c:	4341      	muls	r1, r0
 800902e:	002e      	movs	r6, r5
 8009030:	2301      	movs	r3, #1
 8009032:	1889      	adds	r1, r1, r2
 8009034:	e7f1      	b.n	800901a <_vfiprintf_r+0x1be>
 8009036:	aa07      	add	r2, sp, #28
 8009038:	9200      	str	r2, [sp, #0]
 800903a:	0021      	movs	r1, r4
 800903c:	003a      	movs	r2, r7
 800903e:	4b14      	ldr	r3, [pc, #80]	@ (8009090 <_vfiprintf_r+0x234>)
 8009040:	9803      	ldr	r0, [sp, #12]
 8009042:	e000      	b.n	8009046 <_vfiprintf_r+0x1ea>
 8009044:	bf00      	nop
 8009046:	9004      	str	r0, [sp, #16]
 8009048:	9b04      	ldr	r3, [sp, #16]
 800904a:	3301      	adds	r3, #1
 800904c:	d1d6      	bne.n	8008ffc <_vfiprintf_r+0x1a0>
 800904e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009050:	07db      	lsls	r3, r3, #31
 8009052:	d405      	bmi.n	8009060 <_vfiprintf_r+0x204>
 8009054:	89bb      	ldrh	r3, [r7, #12]
 8009056:	059b      	lsls	r3, r3, #22
 8009058:	d402      	bmi.n	8009060 <_vfiprintf_r+0x204>
 800905a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800905c:	f7ff fdd0 	bl	8008c00 <__retarget_lock_release_recursive>
 8009060:	89bb      	ldrh	r3, [r7, #12]
 8009062:	065b      	lsls	r3, r3, #25
 8009064:	d500      	bpl.n	8009068 <_vfiprintf_r+0x20c>
 8009066:	e71e      	b.n	8008ea6 <_vfiprintf_r+0x4a>
 8009068:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800906a:	e71e      	b.n	8008eaa <_vfiprintf_r+0x4e>
 800906c:	aa07      	add	r2, sp, #28
 800906e:	9200      	str	r2, [sp, #0]
 8009070:	0021      	movs	r1, r4
 8009072:	003a      	movs	r2, r7
 8009074:	4b06      	ldr	r3, [pc, #24]	@ (8009090 <_vfiprintf_r+0x234>)
 8009076:	9803      	ldr	r0, [sp, #12]
 8009078:	f000 f87c 	bl	8009174 <_printf_i>
 800907c:	e7e3      	b.n	8009046 <_vfiprintf_r+0x1ea>
 800907e:	46c0      	nop			@ (mov r8, r8)
 8009080:	08009b78 	.word	0x08009b78
 8009084:	08009b7e 	.word	0x08009b7e
 8009088:	08009b82 	.word	0x08009b82
 800908c:	00000000 	.word	0x00000000
 8009090:	08008e37 	.word	0x08008e37

08009094 <_printf_common>:
 8009094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009096:	0016      	movs	r6, r2
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	688a      	ldr	r2, [r1, #8]
 800909c:	690b      	ldr	r3, [r1, #16]
 800909e:	000c      	movs	r4, r1
 80090a0:	9000      	str	r0, [sp, #0]
 80090a2:	4293      	cmp	r3, r2
 80090a4:	da00      	bge.n	80090a8 <_printf_common+0x14>
 80090a6:	0013      	movs	r3, r2
 80090a8:	0022      	movs	r2, r4
 80090aa:	6033      	str	r3, [r6, #0]
 80090ac:	3243      	adds	r2, #67	@ 0x43
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	2a00      	cmp	r2, #0
 80090b2:	d001      	beq.n	80090b8 <_printf_common+0x24>
 80090b4:	3301      	adds	r3, #1
 80090b6:	6033      	str	r3, [r6, #0]
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	069b      	lsls	r3, r3, #26
 80090bc:	d502      	bpl.n	80090c4 <_printf_common+0x30>
 80090be:	6833      	ldr	r3, [r6, #0]
 80090c0:	3302      	adds	r3, #2
 80090c2:	6033      	str	r3, [r6, #0]
 80090c4:	6822      	ldr	r2, [r4, #0]
 80090c6:	2306      	movs	r3, #6
 80090c8:	0015      	movs	r5, r2
 80090ca:	401d      	ands	r5, r3
 80090cc:	421a      	tst	r2, r3
 80090ce:	d027      	beq.n	8009120 <_printf_common+0x8c>
 80090d0:	0023      	movs	r3, r4
 80090d2:	3343      	adds	r3, #67	@ 0x43
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	1e5a      	subs	r2, r3, #1
 80090d8:	4193      	sbcs	r3, r2
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	0692      	lsls	r2, r2, #26
 80090de:	d430      	bmi.n	8009142 <_printf_common+0xae>
 80090e0:	0022      	movs	r2, r4
 80090e2:	9901      	ldr	r1, [sp, #4]
 80090e4:	9800      	ldr	r0, [sp, #0]
 80090e6:	9d08      	ldr	r5, [sp, #32]
 80090e8:	3243      	adds	r2, #67	@ 0x43
 80090ea:	47a8      	blx	r5
 80090ec:	3001      	adds	r0, #1
 80090ee:	d025      	beq.n	800913c <_printf_common+0xa8>
 80090f0:	2206      	movs	r2, #6
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	2500      	movs	r5, #0
 80090f6:	4013      	ands	r3, r2
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d105      	bne.n	8009108 <_printf_common+0x74>
 80090fc:	6833      	ldr	r3, [r6, #0]
 80090fe:	68e5      	ldr	r5, [r4, #12]
 8009100:	1aed      	subs	r5, r5, r3
 8009102:	43eb      	mvns	r3, r5
 8009104:	17db      	asrs	r3, r3, #31
 8009106:	401d      	ands	r5, r3
 8009108:	68a3      	ldr	r3, [r4, #8]
 800910a:	6922      	ldr	r2, [r4, #16]
 800910c:	4293      	cmp	r3, r2
 800910e:	dd01      	ble.n	8009114 <_printf_common+0x80>
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	18ed      	adds	r5, r5, r3
 8009114:	2600      	movs	r6, #0
 8009116:	42b5      	cmp	r5, r6
 8009118:	d120      	bne.n	800915c <_printf_common+0xc8>
 800911a:	2000      	movs	r0, #0
 800911c:	e010      	b.n	8009140 <_printf_common+0xac>
 800911e:	3501      	adds	r5, #1
 8009120:	68e3      	ldr	r3, [r4, #12]
 8009122:	6832      	ldr	r2, [r6, #0]
 8009124:	1a9b      	subs	r3, r3, r2
 8009126:	42ab      	cmp	r3, r5
 8009128:	ddd2      	ble.n	80090d0 <_printf_common+0x3c>
 800912a:	0022      	movs	r2, r4
 800912c:	2301      	movs	r3, #1
 800912e:	9901      	ldr	r1, [sp, #4]
 8009130:	9800      	ldr	r0, [sp, #0]
 8009132:	9f08      	ldr	r7, [sp, #32]
 8009134:	3219      	adds	r2, #25
 8009136:	47b8      	blx	r7
 8009138:	3001      	adds	r0, #1
 800913a:	d1f0      	bne.n	800911e <_printf_common+0x8a>
 800913c:	2001      	movs	r0, #1
 800913e:	4240      	negs	r0, r0
 8009140:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009142:	2030      	movs	r0, #48	@ 0x30
 8009144:	18e1      	adds	r1, r4, r3
 8009146:	3143      	adds	r1, #67	@ 0x43
 8009148:	7008      	strb	r0, [r1, #0]
 800914a:	0021      	movs	r1, r4
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	3145      	adds	r1, #69	@ 0x45
 8009150:	7809      	ldrb	r1, [r1, #0]
 8009152:	18a2      	adds	r2, r4, r2
 8009154:	3243      	adds	r2, #67	@ 0x43
 8009156:	3302      	adds	r3, #2
 8009158:	7011      	strb	r1, [r2, #0]
 800915a:	e7c1      	b.n	80090e0 <_printf_common+0x4c>
 800915c:	0022      	movs	r2, r4
 800915e:	2301      	movs	r3, #1
 8009160:	9901      	ldr	r1, [sp, #4]
 8009162:	9800      	ldr	r0, [sp, #0]
 8009164:	9f08      	ldr	r7, [sp, #32]
 8009166:	321a      	adds	r2, #26
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	d0e6      	beq.n	800913c <_printf_common+0xa8>
 800916e:	3601      	adds	r6, #1
 8009170:	e7d1      	b.n	8009116 <_printf_common+0x82>
	...

08009174 <_printf_i>:
 8009174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009176:	b08b      	sub	sp, #44	@ 0x2c
 8009178:	9206      	str	r2, [sp, #24]
 800917a:	000a      	movs	r2, r1
 800917c:	3243      	adds	r2, #67	@ 0x43
 800917e:	9307      	str	r3, [sp, #28]
 8009180:	9005      	str	r0, [sp, #20]
 8009182:	9203      	str	r2, [sp, #12]
 8009184:	7e0a      	ldrb	r2, [r1, #24]
 8009186:	000c      	movs	r4, r1
 8009188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800918a:	2a78      	cmp	r2, #120	@ 0x78
 800918c:	d809      	bhi.n	80091a2 <_printf_i+0x2e>
 800918e:	2a62      	cmp	r2, #98	@ 0x62
 8009190:	d80b      	bhi.n	80091aa <_printf_i+0x36>
 8009192:	2a00      	cmp	r2, #0
 8009194:	d100      	bne.n	8009198 <_printf_i+0x24>
 8009196:	e0bc      	b.n	8009312 <_printf_i+0x19e>
 8009198:	497b      	ldr	r1, [pc, #492]	@ (8009388 <_printf_i+0x214>)
 800919a:	9104      	str	r1, [sp, #16]
 800919c:	2a58      	cmp	r2, #88	@ 0x58
 800919e:	d100      	bne.n	80091a2 <_printf_i+0x2e>
 80091a0:	e090      	b.n	80092c4 <_printf_i+0x150>
 80091a2:	0025      	movs	r5, r4
 80091a4:	3542      	adds	r5, #66	@ 0x42
 80091a6:	702a      	strb	r2, [r5, #0]
 80091a8:	e022      	b.n	80091f0 <_printf_i+0x7c>
 80091aa:	0010      	movs	r0, r2
 80091ac:	3863      	subs	r0, #99	@ 0x63
 80091ae:	2815      	cmp	r0, #21
 80091b0:	d8f7      	bhi.n	80091a2 <_printf_i+0x2e>
 80091b2:	f7f6 ffa9 	bl	8000108 <__gnu_thumb1_case_shi>
 80091b6:	0016      	.short	0x0016
 80091b8:	fff6001f 	.word	0xfff6001f
 80091bc:	fff6fff6 	.word	0xfff6fff6
 80091c0:	001ffff6 	.word	0x001ffff6
 80091c4:	fff6fff6 	.word	0xfff6fff6
 80091c8:	fff6fff6 	.word	0xfff6fff6
 80091cc:	003600a1 	.word	0x003600a1
 80091d0:	fff60080 	.word	0xfff60080
 80091d4:	00b2fff6 	.word	0x00b2fff6
 80091d8:	0036fff6 	.word	0x0036fff6
 80091dc:	fff6fff6 	.word	0xfff6fff6
 80091e0:	0084      	.short	0x0084
 80091e2:	0025      	movs	r5, r4
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	3542      	adds	r5, #66	@ 0x42
 80091e8:	1d11      	adds	r1, r2, #4
 80091ea:	6019      	str	r1, [r3, #0]
 80091ec:	6813      	ldr	r3, [r2, #0]
 80091ee:	702b      	strb	r3, [r5, #0]
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0a0      	b.n	8009336 <_printf_i+0x1c2>
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	6809      	ldr	r1, [r1, #0]
 80091f8:	1d02      	adds	r2, r0, #4
 80091fa:	060d      	lsls	r5, r1, #24
 80091fc:	d50b      	bpl.n	8009216 <_printf_i+0xa2>
 80091fe:	6806      	ldr	r6, [r0, #0]
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	2e00      	cmp	r6, #0
 8009204:	da03      	bge.n	800920e <_printf_i+0x9a>
 8009206:	232d      	movs	r3, #45	@ 0x2d
 8009208:	9a03      	ldr	r2, [sp, #12]
 800920a:	4276      	negs	r6, r6
 800920c:	7013      	strb	r3, [r2, #0]
 800920e:	4b5e      	ldr	r3, [pc, #376]	@ (8009388 <_printf_i+0x214>)
 8009210:	270a      	movs	r7, #10
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	e018      	b.n	8009248 <_printf_i+0xd4>
 8009216:	6806      	ldr	r6, [r0, #0]
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	0649      	lsls	r1, r1, #25
 800921c:	d5f1      	bpl.n	8009202 <_printf_i+0x8e>
 800921e:	b236      	sxth	r6, r6
 8009220:	e7ef      	b.n	8009202 <_printf_i+0x8e>
 8009222:	6808      	ldr	r0, [r1, #0]
 8009224:	6819      	ldr	r1, [r3, #0]
 8009226:	c940      	ldmia	r1!, {r6}
 8009228:	0605      	lsls	r5, r0, #24
 800922a:	d402      	bmi.n	8009232 <_printf_i+0xbe>
 800922c:	0640      	lsls	r0, r0, #25
 800922e:	d500      	bpl.n	8009232 <_printf_i+0xbe>
 8009230:	b2b6      	uxth	r6, r6
 8009232:	6019      	str	r1, [r3, #0]
 8009234:	4b54      	ldr	r3, [pc, #336]	@ (8009388 <_printf_i+0x214>)
 8009236:	270a      	movs	r7, #10
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	2a6f      	cmp	r2, #111	@ 0x6f
 800923c:	d100      	bne.n	8009240 <_printf_i+0xcc>
 800923e:	3f02      	subs	r7, #2
 8009240:	0023      	movs	r3, r4
 8009242:	2200      	movs	r2, #0
 8009244:	3343      	adds	r3, #67	@ 0x43
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	60a3      	str	r3, [r4, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	db03      	blt.n	8009258 <_printf_i+0xe4>
 8009250:	2104      	movs	r1, #4
 8009252:	6822      	ldr	r2, [r4, #0]
 8009254:	438a      	bics	r2, r1
 8009256:	6022      	str	r2, [r4, #0]
 8009258:	2e00      	cmp	r6, #0
 800925a:	d102      	bne.n	8009262 <_printf_i+0xee>
 800925c:	9d03      	ldr	r5, [sp, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00c      	beq.n	800927c <_printf_i+0x108>
 8009262:	9d03      	ldr	r5, [sp, #12]
 8009264:	0030      	movs	r0, r6
 8009266:	0039      	movs	r1, r7
 8009268:	f7f6 ffde 	bl	8000228 <__aeabi_uidivmod>
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	3d01      	subs	r5, #1
 8009270:	5c5b      	ldrb	r3, [r3, r1]
 8009272:	702b      	strb	r3, [r5, #0]
 8009274:	0033      	movs	r3, r6
 8009276:	0006      	movs	r6, r0
 8009278:	429f      	cmp	r7, r3
 800927a:	d9f3      	bls.n	8009264 <_printf_i+0xf0>
 800927c:	2f08      	cmp	r7, #8
 800927e:	d109      	bne.n	8009294 <_printf_i+0x120>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	07db      	lsls	r3, r3, #31
 8009284:	d506      	bpl.n	8009294 <_printf_i+0x120>
 8009286:	6862      	ldr	r2, [r4, #4]
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	429a      	cmp	r2, r3
 800928c:	dc02      	bgt.n	8009294 <_printf_i+0x120>
 800928e:	2330      	movs	r3, #48	@ 0x30
 8009290:	3d01      	subs	r5, #1
 8009292:	702b      	strb	r3, [r5, #0]
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	1b5b      	subs	r3, r3, r5
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	9b07      	ldr	r3, [sp, #28]
 800929c:	0021      	movs	r1, r4
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	9805      	ldr	r0, [sp, #20]
 80092a2:	9b06      	ldr	r3, [sp, #24]
 80092a4:	aa09      	add	r2, sp, #36	@ 0x24
 80092a6:	f7ff fef5 	bl	8009094 <_printf_common>
 80092aa:	3001      	adds	r0, #1
 80092ac:	d148      	bne.n	8009340 <_printf_i+0x1cc>
 80092ae:	2001      	movs	r0, #1
 80092b0:	4240      	negs	r0, r0
 80092b2:	b00b      	add	sp, #44	@ 0x2c
 80092b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b6:	2220      	movs	r2, #32
 80092b8:	6809      	ldr	r1, [r1, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	2278      	movs	r2, #120	@ 0x78
 80092c0:	4932      	ldr	r1, [pc, #200]	@ (800938c <_printf_i+0x218>)
 80092c2:	9104      	str	r1, [sp, #16]
 80092c4:	0021      	movs	r1, r4
 80092c6:	3145      	adds	r1, #69	@ 0x45
 80092c8:	700a      	strb	r2, [r1, #0]
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	6822      	ldr	r2, [r4, #0]
 80092ce:	c940      	ldmia	r1!, {r6}
 80092d0:	0610      	lsls	r0, r2, #24
 80092d2:	d402      	bmi.n	80092da <_printf_i+0x166>
 80092d4:	0650      	lsls	r0, r2, #25
 80092d6:	d500      	bpl.n	80092da <_printf_i+0x166>
 80092d8:	b2b6      	uxth	r6, r6
 80092da:	6019      	str	r1, [r3, #0]
 80092dc:	07d3      	lsls	r3, r2, #31
 80092de:	d502      	bpl.n	80092e6 <_printf_i+0x172>
 80092e0:	2320      	movs	r3, #32
 80092e2:	4313      	orrs	r3, r2
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	d001      	beq.n	80092ee <_printf_i+0x17a>
 80092ea:	2710      	movs	r7, #16
 80092ec:	e7a8      	b.n	8009240 <_printf_i+0xcc>
 80092ee:	2220      	movs	r2, #32
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	4393      	bics	r3, r2
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	e7f8      	b.n	80092ea <_printf_i+0x176>
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	680d      	ldr	r5, [r1, #0]
 80092fc:	1d10      	adds	r0, r2, #4
 80092fe:	6949      	ldr	r1, [r1, #20]
 8009300:	6018      	str	r0, [r3, #0]
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	062e      	lsls	r6, r5, #24
 8009306:	d501      	bpl.n	800930c <_printf_i+0x198>
 8009308:	6019      	str	r1, [r3, #0]
 800930a:	e002      	b.n	8009312 <_printf_i+0x19e>
 800930c:	066d      	lsls	r5, r5, #25
 800930e:	d5fb      	bpl.n	8009308 <_printf_i+0x194>
 8009310:	8019      	strh	r1, [r3, #0]
 8009312:	2300      	movs	r3, #0
 8009314:	9d03      	ldr	r5, [sp, #12]
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	e7bf      	b.n	800929a <_printf_i+0x126>
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	1d11      	adds	r1, r2, #4
 800931e:	6019      	str	r1, [r3, #0]
 8009320:	6815      	ldr	r5, [r2, #0]
 8009322:	2100      	movs	r1, #0
 8009324:	0028      	movs	r0, r5
 8009326:	6862      	ldr	r2, [r4, #4]
 8009328:	f000 f986 	bl	8009638 <memchr>
 800932c:	2800      	cmp	r0, #0
 800932e:	d001      	beq.n	8009334 <_printf_i+0x1c0>
 8009330:	1b40      	subs	r0, r0, r5
 8009332:	6060      	str	r0, [r4, #4]
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	2300      	movs	r3, #0
 800933a:	9a03      	ldr	r2, [sp, #12]
 800933c:	7013      	strb	r3, [r2, #0]
 800933e:	e7ac      	b.n	800929a <_printf_i+0x126>
 8009340:	002a      	movs	r2, r5
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	9906      	ldr	r1, [sp, #24]
 8009346:	9805      	ldr	r0, [sp, #20]
 8009348:	9d07      	ldr	r5, [sp, #28]
 800934a:	47a8      	blx	r5
 800934c:	3001      	adds	r0, #1
 800934e:	d0ae      	beq.n	80092ae <_printf_i+0x13a>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	079b      	lsls	r3, r3, #30
 8009354:	d415      	bmi.n	8009382 <_printf_i+0x20e>
 8009356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009358:	68e0      	ldr	r0, [r4, #12]
 800935a:	4298      	cmp	r0, r3
 800935c:	daa9      	bge.n	80092b2 <_printf_i+0x13e>
 800935e:	0018      	movs	r0, r3
 8009360:	e7a7      	b.n	80092b2 <_printf_i+0x13e>
 8009362:	0022      	movs	r2, r4
 8009364:	2301      	movs	r3, #1
 8009366:	9906      	ldr	r1, [sp, #24]
 8009368:	9805      	ldr	r0, [sp, #20]
 800936a:	9e07      	ldr	r6, [sp, #28]
 800936c:	3219      	adds	r2, #25
 800936e:	47b0      	blx	r6
 8009370:	3001      	adds	r0, #1
 8009372:	d09c      	beq.n	80092ae <_printf_i+0x13a>
 8009374:	3501      	adds	r5, #1
 8009376:	68e3      	ldr	r3, [r4, #12]
 8009378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	42ab      	cmp	r3, r5
 800937e:	dcf0      	bgt.n	8009362 <_printf_i+0x1ee>
 8009380:	e7e9      	b.n	8009356 <_printf_i+0x1e2>
 8009382:	2500      	movs	r5, #0
 8009384:	e7f7      	b.n	8009376 <_printf_i+0x202>
 8009386:	46c0      	nop			@ (mov r8, r8)
 8009388:	08009b89 	.word	0x08009b89
 800938c:	08009b9a 	.word	0x08009b9a

08009390 <__sflush_r>:
 8009390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009392:	220c      	movs	r2, #12
 8009394:	5e8b      	ldrsh	r3, [r1, r2]
 8009396:	0005      	movs	r5, r0
 8009398:	000c      	movs	r4, r1
 800939a:	071a      	lsls	r2, r3, #28
 800939c:	d456      	bmi.n	800944c <__sflush_r+0xbc>
 800939e:	684a      	ldr	r2, [r1, #4]
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	dc02      	bgt.n	80093aa <__sflush_r+0x1a>
 80093a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	dd4e      	ble.n	8009448 <__sflush_r+0xb8>
 80093aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80093ac:	2f00      	cmp	r7, #0
 80093ae:	d04b      	beq.n	8009448 <__sflush_r+0xb8>
 80093b0:	2200      	movs	r2, #0
 80093b2:	2080      	movs	r0, #128	@ 0x80
 80093b4:	682e      	ldr	r6, [r5, #0]
 80093b6:	602a      	str	r2, [r5, #0]
 80093b8:	001a      	movs	r2, r3
 80093ba:	0140      	lsls	r0, r0, #5
 80093bc:	6a21      	ldr	r1, [r4, #32]
 80093be:	4002      	ands	r2, r0
 80093c0:	4203      	tst	r3, r0
 80093c2:	d033      	beq.n	800942c <__sflush_r+0x9c>
 80093c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	075b      	lsls	r3, r3, #29
 80093ca:	d506      	bpl.n	80093da <__sflush_r+0x4a>
 80093cc:	6863      	ldr	r3, [r4, #4]
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <__sflush_r+0x4a>
 80093d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093d8:	1ad2      	subs	r2, r2, r3
 80093da:	2300      	movs	r3, #0
 80093dc:	0028      	movs	r0, r5
 80093de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80093e0:	6a21      	ldr	r1, [r4, #32]
 80093e2:	47b8      	blx	r7
 80093e4:	89a2      	ldrh	r2, [r4, #12]
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	d106      	bne.n	80093f8 <__sflush_r+0x68>
 80093ea:	6829      	ldr	r1, [r5, #0]
 80093ec:	291d      	cmp	r1, #29
 80093ee:	d846      	bhi.n	800947e <__sflush_r+0xee>
 80093f0:	4b29      	ldr	r3, [pc, #164]	@ (8009498 <__sflush_r+0x108>)
 80093f2:	410b      	asrs	r3, r1
 80093f4:	07db      	lsls	r3, r3, #31
 80093f6:	d442      	bmi.n	800947e <__sflush_r+0xee>
 80093f8:	2300      	movs	r3, #0
 80093fa:	6063      	str	r3, [r4, #4]
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	6023      	str	r3, [r4, #0]
 8009400:	04d2      	lsls	r2, r2, #19
 8009402:	d505      	bpl.n	8009410 <__sflush_r+0x80>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <__sflush_r+0x7e>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d100      	bne.n	8009410 <__sflush_r+0x80>
 800940e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009412:	602e      	str	r6, [r5, #0]
 8009414:	2900      	cmp	r1, #0
 8009416:	d017      	beq.n	8009448 <__sflush_r+0xb8>
 8009418:	0023      	movs	r3, r4
 800941a:	3344      	adds	r3, #68	@ 0x44
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <__sflush_r+0x96>
 8009420:	0028      	movs	r0, r5
 8009422:	f7ff fbf7 	bl	8008c14 <_free_r>
 8009426:	2300      	movs	r3, #0
 8009428:	6363      	str	r3, [r4, #52]	@ 0x34
 800942a:	e00d      	b.n	8009448 <__sflush_r+0xb8>
 800942c:	2301      	movs	r3, #1
 800942e:	0028      	movs	r0, r5
 8009430:	47b8      	blx	r7
 8009432:	0002      	movs	r2, r0
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d1c6      	bne.n	80093c6 <__sflush_r+0x36>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0c3      	beq.n	80093c6 <__sflush_r+0x36>
 800943e:	2b1d      	cmp	r3, #29
 8009440:	d001      	beq.n	8009446 <__sflush_r+0xb6>
 8009442:	2b16      	cmp	r3, #22
 8009444:	d11a      	bne.n	800947c <__sflush_r+0xec>
 8009446:	602e      	str	r6, [r5, #0]
 8009448:	2000      	movs	r0, #0
 800944a:	e01e      	b.n	800948a <__sflush_r+0xfa>
 800944c:	690e      	ldr	r6, [r1, #16]
 800944e:	2e00      	cmp	r6, #0
 8009450:	d0fa      	beq.n	8009448 <__sflush_r+0xb8>
 8009452:	680f      	ldr	r7, [r1, #0]
 8009454:	600e      	str	r6, [r1, #0]
 8009456:	1bba      	subs	r2, r7, r6
 8009458:	9201      	str	r2, [sp, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	079b      	lsls	r3, r3, #30
 800945e:	d100      	bne.n	8009462 <__sflush_r+0xd2>
 8009460:	694a      	ldr	r2, [r1, #20]
 8009462:	60a2      	str	r2, [r4, #8]
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	ddee      	ble.n	8009448 <__sflush_r+0xb8>
 800946a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800946c:	0032      	movs	r2, r6
 800946e:	001f      	movs	r7, r3
 8009470:	0028      	movs	r0, r5
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	6a21      	ldr	r1, [r4, #32]
 8009476:	47b8      	blx	r7
 8009478:	2800      	cmp	r0, #0
 800947a:	dc07      	bgt.n	800948c <__sflush_r+0xfc>
 800947c:	89a2      	ldrh	r2, [r4, #12]
 800947e:	2340      	movs	r3, #64	@ 0x40
 8009480:	2001      	movs	r0, #1
 8009482:	4313      	orrs	r3, r2
 8009484:	b21b      	sxth	r3, r3
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	4240      	negs	r0, r0
 800948a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800948c:	9b01      	ldr	r3, [sp, #4]
 800948e:	1836      	adds	r6, r6, r0
 8009490:	1a1b      	subs	r3, r3, r0
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	e7e6      	b.n	8009464 <__sflush_r+0xd4>
 8009496:	46c0      	nop			@ (mov r8, r8)
 8009498:	dfbffffe 	.word	0xdfbffffe

0800949c <_fflush_r>:
 800949c:	690b      	ldr	r3, [r1, #16]
 800949e:	b570      	push	{r4, r5, r6, lr}
 80094a0:	0005      	movs	r5, r0
 80094a2:	000c      	movs	r4, r1
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <_fflush_r+0x12>
 80094a8:	2500      	movs	r5, #0
 80094aa:	0028      	movs	r0, r5
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d004      	beq.n	80094bc <_fflush_r+0x20>
 80094b2:	6a03      	ldr	r3, [r0, #32]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <_fflush_r+0x20>
 80094b8:	f7ff f990 	bl	80087dc <__sinit>
 80094bc:	220c      	movs	r2, #12
 80094be:	5ea3      	ldrsh	r3, [r4, r2]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0f1      	beq.n	80094a8 <_fflush_r+0xc>
 80094c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094c6:	07d2      	lsls	r2, r2, #31
 80094c8:	d404      	bmi.n	80094d4 <_fflush_r+0x38>
 80094ca:	059b      	lsls	r3, r3, #22
 80094cc:	d402      	bmi.n	80094d4 <_fflush_r+0x38>
 80094ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094d0:	f7ff fb95 	bl	8008bfe <__retarget_lock_acquire_recursive>
 80094d4:	0028      	movs	r0, r5
 80094d6:	0021      	movs	r1, r4
 80094d8:	f7ff ff5a 	bl	8009390 <__sflush_r>
 80094dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094de:	0005      	movs	r5, r0
 80094e0:	07db      	lsls	r3, r3, #31
 80094e2:	d4e2      	bmi.n	80094aa <_fflush_r+0xe>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	059b      	lsls	r3, r3, #22
 80094e8:	d4df      	bmi.n	80094aa <_fflush_r+0xe>
 80094ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ec:	f7ff fb88 	bl	8008c00 <__retarget_lock_release_recursive>
 80094f0:	e7db      	b.n	80094aa <_fflush_r+0xe>
	...

080094f4 <__swhatbuf_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	000e      	movs	r6, r1
 80094f8:	001d      	movs	r5, r3
 80094fa:	230e      	movs	r3, #14
 80094fc:	5ec9      	ldrsh	r1, [r1, r3]
 80094fe:	0014      	movs	r4, r2
 8009500:	b096      	sub	sp, #88	@ 0x58
 8009502:	2900      	cmp	r1, #0
 8009504:	da0c      	bge.n	8009520 <__swhatbuf_r+0x2c>
 8009506:	89b2      	ldrh	r2, [r6, #12]
 8009508:	2380      	movs	r3, #128	@ 0x80
 800950a:	0011      	movs	r1, r2
 800950c:	4019      	ands	r1, r3
 800950e:	421a      	tst	r2, r3
 8009510:	d114      	bne.n	800953c <__swhatbuf_r+0x48>
 8009512:	2380      	movs	r3, #128	@ 0x80
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	2000      	movs	r0, #0
 8009518:	6029      	str	r1, [r5, #0]
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	b016      	add	sp, #88	@ 0x58
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	466a      	mov	r2, sp
 8009522:	f000 f853 	bl	80095cc <_fstat_r>
 8009526:	2800      	cmp	r0, #0
 8009528:	dbed      	blt.n	8009506 <__swhatbuf_r+0x12>
 800952a:	23f0      	movs	r3, #240	@ 0xf0
 800952c:	9901      	ldr	r1, [sp, #4]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	4019      	ands	r1, r3
 8009532:	4b04      	ldr	r3, [pc, #16]	@ (8009544 <__swhatbuf_r+0x50>)
 8009534:	18c9      	adds	r1, r1, r3
 8009536:	424b      	negs	r3, r1
 8009538:	4159      	adcs	r1, r3
 800953a:	e7ea      	b.n	8009512 <__swhatbuf_r+0x1e>
 800953c:	2100      	movs	r1, #0
 800953e:	2340      	movs	r3, #64	@ 0x40
 8009540:	e7e9      	b.n	8009516 <__swhatbuf_r+0x22>
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	ffffe000 	.word	0xffffe000

08009548 <__smakebuf_r>:
 8009548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954a:	2602      	movs	r6, #2
 800954c:	898b      	ldrh	r3, [r1, #12]
 800954e:	0005      	movs	r5, r0
 8009550:	000c      	movs	r4, r1
 8009552:	b085      	sub	sp, #20
 8009554:	4233      	tst	r3, r6
 8009556:	d007      	beq.n	8009568 <__smakebuf_r+0x20>
 8009558:	0023      	movs	r3, r4
 800955a:	3347      	adds	r3, #71	@ 0x47
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	6123      	str	r3, [r4, #16]
 8009560:	2301      	movs	r3, #1
 8009562:	6163      	str	r3, [r4, #20]
 8009564:	b005      	add	sp, #20
 8009566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009568:	ab03      	add	r3, sp, #12
 800956a:	aa02      	add	r2, sp, #8
 800956c:	f7ff ffc2 	bl	80094f4 <__swhatbuf_r>
 8009570:	9f02      	ldr	r7, [sp, #8]
 8009572:	9001      	str	r0, [sp, #4]
 8009574:	0039      	movs	r1, r7
 8009576:	0028      	movs	r0, r5
 8009578:	f7ff fbb8 	bl	8008cec <_malloc_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	d108      	bne.n	8009592 <__smakebuf_r+0x4a>
 8009580:	220c      	movs	r2, #12
 8009582:	5ea3      	ldrsh	r3, [r4, r2]
 8009584:	059a      	lsls	r2, r3, #22
 8009586:	d4ed      	bmi.n	8009564 <__smakebuf_r+0x1c>
 8009588:	2203      	movs	r2, #3
 800958a:	4393      	bics	r3, r2
 800958c:	431e      	orrs	r6, r3
 800958e:	81a6      	strh	r6, [r4, #12]
 8009590:	e7e2      	b.n	8009558 <__smakebuf_r+0x10>
 8009592:	2380      	movs	r3, #128	@ 0x80
 8009594:	89a2      	ldrh	r2, [r4, #12]
 8009596:	6020      	str	r0, [r4, #0]
 8009598:	4313      	orrs	r3, r2
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	6120      	str	r0, [r4, #16]
 80095a0:	6167      	str	r7, [r4, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00c      	beq.n	80095c0 <__smakebuf_r+0x78>
 80095a6:	0028      	movs	r0, r5
 80095a8:	230e      	movs	r3, #14
 80095aa:	5ee1      	ldrsh	r1, [r4, r3]
 80095ac:	f000 f820 	bl	80095f0 <_isatty_r>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d005      	beq.n	80095c0 <__smakebuf_r+0x78>
 80095b4:	2303      	movs	r3, #3
 80095b6:	89a2      	ldrh	r2, [r4, #12]
 80095b8:	439a      	bics	r2, r3
 80095ba:	3b02      	subs	r3, #2
 80095bc:	4313      	orrs	r3, r2
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	9a01      	ldr	r2, [sp, #4]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	81a3      	strh	r3, [r4, #12]
 80095c8:	e7cc      	b.n	8009564 <__smakebuf_r+0x1c>
	...

080095cc <_fstat_r>:
 80095cc:	2300      	movs	r3, #0
 80095ce:	b570      	push	{r4, r5, r6, lr}
 80095d0:	4d06      	ldr	r5, [pc, #24]	@ (80095ec <_fstat_r+0x20>)
 80095d2:	0004      	movs	r4, r0
 80095d4:	0008      	movs	r0, r1
 80095d6:	0011      	movs	r1, r2
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	f7f8 fdd4 	bl	8002186 <_fstat>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d103      	bne.n	80095ea <_fstat_r+0x1e>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d000      	beq.n	80095ea <_fstat_r+0x1e>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd70      	pop	{r4, r5, r6, pc}
 80095ec:	200008d8 	.word	0x200008d8

080095f0 <_isatty_r>:
 80095f0:	2300      	movs	r3, #0
 80095f2:	b570      	push	{r4, r5, r6, lr}
 80095f4:	4d06      	ldr	r5, [pc, #24]	@ (8009610 <_isatty_r+0x20>)
 80095f6:	0004      	movs	r4, r0
 80095f8:	0008      	movs	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f8 fdd1 	bl	80021a2 <_isatty>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d103      	bne.n	800960c <_isatty_r+0x1c>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d000      	beq.n	800960c <_isatty_r+0x1c>
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	bd70      	pop	{r4, r5, r6, pc}
 800960e:	46c0      	nop			@ (mov r8, r8)
 8009610:	200008d8 	.word	0x200008d8

08009614 <_sbrk_r>:
 8009614:	2300      	movs	r3, #0
 8009616:	b570      	push	{r4, r5, r6, lr}
 8009618:	4d06      	ldr	r5, [pc, #24]	@ (8009634 <_sbrk_r+0x20>)
 800961a:	0004      	movs	r4, r0
 800961c:	0008      	movs	r0, r1
 800961e:	602b      	str	r3, [r5, #0]
 8009620:	f7f8 fdd4 	bl	80021cc <_sbrk>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d103      	bne.n	8009630 <_sbrk_r+0x1c>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d000      	beq.n	8009630 <_sbrk_r+0x1c>
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	46c0      	nop			@ (mov r8, r8)
 8009634:	200008d8 	.word	0x200008d8

08009638 <memchr>:
 8009638:	b2c9      	uxtb	r1, r1
 800963a:	1882      	adds	r2, r0, r2
 800963c:	4290      	cmp	r0, r2
 800963e:	d101      	bne.n	8009644 <memchr+0xc>
 8009640:	2000      	movs	r0, #0
 8009642:	4770      	bx	lr
 8009644:	7803      	ldrb	r3, [r0, #0]
 8009646:	428b      	cmp	r3, r1
 8009648:	d0fb      	beq.n	8009642 <memchr+0xa>
 800964a:	3001      	adds	r0, #1
 800964c:	e7f6      	b.n	800963c <memchr+0x4>
	...

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	46c0      	nop			@ (mov r8, r8)
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
