
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08008998  08008998  00009998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  0000a0cc  2**0
                  CONTENTS
  4 .ARM          00000000  08008edc  08008edc  0000a0cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008edc  08008edc  0000a0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00009edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00009ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08008ee4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  200000cc  08008fb0  0000a0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08008fb0  0000a8e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee3  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003364  00000000  00000000  00022fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00026340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a9  00000000  00000000  00027af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019965  00000000  00000000  00028d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5e7  00000000  00000000  000426fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e389  00000000  00000000  0005ece5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd06e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f68  00000000  00000000  000fd0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010301c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008980 	.word	0x08008980

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	08008980 	.word	0x08008980

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <bno055_setPage>:
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

extern uint16_t holding_register_database[NUM_HOLDING_REGISTERS];

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	0019      	movs	r1, r3
 800041a:	2007      	movs	r0, #7
 800041c:	f000 f8e8 	bl	80005f0 <bno055_writeData>
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	701a      	strb	r2, [r3, #0]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	0019      	movs	r1, r3
 800043a:	203d      	movs	r0, #61	@ 0x3d
 800043c:	f000 f8d8 	bl	80005f0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG)
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d103      	bne.n	8000450 <bno055_setOperationMode+0x28>
  {
    bno055_delay(19);
 8000448:	2013      	movs	r0, #19
 800044a:	f000 f8c5 	bl	80005d8 <bno055_delay>
  }
  else
  {
    bno055_delay(7);
  }
}
 800044e:	e002      	b.n	8000456 <bno055_setOperationMode+0x2e>
    bno055_delay(7);
 8000450:	2007      	movs	r0, #7
 8000452:	f000 f8c1 	bl	80005d8 <bno055_delay>
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}

0800045e <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig()
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000462:	2000      	movs	r0, #0
 8000464:	f7ff ffe0 	bl	8000428 <bno055_setOperationMode>
}
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF()
{
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000472:	200c      	movs	r0, #12
 8000474:	f7ff ffd8 	bl	8000428 <bno055_setOperationMode>
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <bno055_reset>:

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset()
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000482:	2120      	movs	r1, #32
 8000484:	203f      	movs	r0, #63	@ 0x3f
 8000486:	f000 f8b3 	bl	80005f0 <bno055_writeData>
  bno055_delay(700);
 800048a:	23af      	movs	r3, #175	@ 0xaf
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 f8a2 	bl	80005d8 <bno055_delay>
}
 8000494:	46c0      	nop			@ (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  bno055_reset();
 80004a2:	f7ff ffec 	bl	800047e <bno055_reset>

  uint8_t id = 0;
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	2201      	movs	r2, #1
 80004b0:	0019      	movs	r1, r3
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 f9ae 	bl	8000814 <bno055_readData>
  if (id != BNO055_ID)
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80004be:	d007      	beq.n	80004d0 <bno055_setup+0x34>
  {
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	001a      	movs	r2, r3
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <bno055_setup+0x54>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f007 fb52 	bl	8007b74 <iprintf>
  }
  bno055_setPage(0);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff ff99 	bl	8000408 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0); // TODO: change to external oscillator
 80004d6:	2100      	movs	r1, #0
 80004d8:	203f      	movs	r0, #63	@ 0x3f
 80004da:	f000 f889 	bl	80005f0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80004de:	f7ff ffbe 	bl	800045e <bno055_setOperationModeConfig>
  bno055_delay(10);
 80004e2:	200a      	movs	r0, #10
 80004e4:	f000 f878 	bl	80005d8 <bno055_delay>
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	08008998 	.word	0x08008998

080004f4 <bno055_get_all_values>:

  return xyz;
}

void bno055_get_all_values()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af00      	add	r7, sp, #0
	uint8_t buffer[44];    // Quaternion needs 8 bytes
	bno055_readData(BNO055_VECTOR_ACCELEROMETER, buffer, 6);
 80004fa:	003b      	movs	r3, r7
 80004fc:	2206      	movs	r2, #6
 80004fe:	0019      	movs	r1, r3
 8000500:	2008      	movs	r0, #8
 8000502:	f000 f987 	bl	8000814 <bno055_readData>
	bno055_readData(BNO055_VECTOR_MAGNETOMETER, &buffer[6], 6);
 8000506:	003b      	movs	r3, r7
 8000508:	3306      	adds	r3, #6
 800050a:	2206      	movs	r2, #6
 800050c:	0019      	movs	r1, r3
 800050e:	200e      	movs	r0, #14
 8000510:	f000 f980 	bl	8000814 <bno055_readData>
	bno055_readData(BNO055_VECTOR_GYROSCOPE, &buffer[6*2], 6);
 8000514:	003b      	movs	r3, r7
 8000516:	330c      	adds	r3, #12
 8000518:	2206      	movs	r2, #6
 800051a:	0019      	movs	r1, r3
 800051c:	2014      	movs	r0, #20
 800051e:	f000 f979 	bl	8000814 <bno055_readData>
	bno055_readData(BNO055_VECTOR_EULER, &buffer[6*3], 6);
 8000522:	003b      	movs	r3, r7
 8000524:	3312      	adds	r3, #18
 8000526:	2206      	movs	r2, #6
 8000528:	0019      	movs	r1, r3
 800052a:	201a      	movs	r0, #26
 800052c:	f000 f972 	bl	8000814 <bno055_readData>
	bno055_readData(BNO055_VECTOR_LINEARACCEL, &buffer[6*4], 6);
 8000530:	003b      	movs	r3, r7
 8000532:	3318      	adds	r3, #24
 8000534:	2206      	movs	r2, #6
 8000536:	0019      	movs	r1, r3
 8000538:	2028      	movs	r0, #40	@ 0x28
 800053a:	f000 f96b 	bl	8000814 <bno055_readData>
	bno055_readData(BNO055_VECTOR_GRAVITY, &buffer[6*5], 6);
 800053e:	003b      	movs	r3, r7
 8000540:	331e      	adds	r3, #30
 8000542:	2206      	movs	r2, #6
 8000544:	0019      	movs	r1, r3
 8000546:	202e      	movs	r0, #46	@ 0x2e
 8000548:	f000 f964 	bl	8000814 <bno055_readData>
	bno055_readData(BNO055_VECTOR_QUATERNION, &buffer[6*6], 8);
 800054c:	003b      	movs	r3, r7
 800054e:	3324      	adds	r3, #36	@ 0x24
 8000550:	2208      	movs	r2, #8
 8000552:	0019      	movs	r1, r3
 8000554:	2020      	movs	r0, #32
 8000556:	f000 f95d 	bl	8000814 <bno055_readData>

	for(uint8_t i = 0; i < 22; i++)
 800055a:	232f      	movs	r3, #47	@ 0x2f
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e01e      	b.n	80005a2 <bno055_get_all_values+0xae>
	{
		holding_register_database[12 + i] = (buffer[2*i + 1] << 8) | buffer[2*i];
 8000564:	212f      	movs	r1, #47	@ 0x2f
 8000566:	187b      	adds	r3, r7, r1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	3301      	adds	r3, #1
 800056e:	003a      	movs	r2, r7
 8000570:	5cd3      	ldrb	r3, [r2, r3]
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	b21a      	sxth	r2, r3
 8000576:	0008      	movs	r0, r1
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	0039      	movs	r1, r7
 8000580:	5ccb      	ldrb	r3, [r1, r3]
 8000582:	b21b      	sxth	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	b219      	sxth	r1, r3
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	330c      	adds	r3, #12
 800058e:	001a      	movs	r2, r3
 8000590:	b289      	uxth	r1, r1
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <bno055_get_all_values+0xc4>)
 8000594:	0052      	lsls	r2, r2, #1
 8000596:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 22; i++)
 8000598:	183b      	adds	r3, r7, r0
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	183b      	adds	r3, r7, r0
 800059e:	3201      	adds	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	232f      	movs	r3, #47	@ 0x2f
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b15      	cmp	r3, #21
 80005aa:	d9db      	bls.n	8000564 <bno055_get_all_values+0x70>
	}
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b00c      	add	sp, #48	@ 0x30
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	20000000 	.word	0x20000000

080005bc <bno055_assignI2C>:
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <bno055_assignI2C+0x18>)
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	200000e8 	.word	0x200000e8

080005d8 <bno055_delay>:

void bno055_delay(int time)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fec0 	bl	8002368 <HAL_Delay>
#endif
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	0002      	movs	r2, r0
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	1c0a      	adds	r2, r1, #0
 8000600:	701a      	strb	r2, [r3, #0]
  uint8_t txdata[2] = {reg, data};
 8000602:	210c      	movs	r1, #12
 8000604:	187b      	adds	r3, r7, r1
 8000606:	1dfa      	adds	r2, r7, #7
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	187b      	adds	r3, r7, r1
 800060e:	1dba      	adds	r2, r7, #6
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	705a      	strb	r2, [r3, #1]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 8000614:	4b6c      	ldr	r3, [pc, #432]	@ (80007c8 <bno055_writeData+0x1d8>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	2517      	movs	r5, #23
 800061a:	197c      	adds	r4, r7, r5
 800061c:	187a      	adds	r2, r7, r1
 800061e:	230a      	movs	r3, #10
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2302      	movs	r3, #2
 8000624:	2150      	movs	r1, #80	@ 0x50
 8000626:	f003 f981 	bl	800392c <HAL_I2C_Master_Transmit>
 800062a:	0003      	movs	r3, r0
 800062c:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800062e:	197b      	adds	r3, r7, r5
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d100      	bne.n	8000638 <bno055_writeData+0x48>
 8000636:	e0c0      	b.n	80007ba <bno055_writeData+0x1ca>
  {
    return;
  }

  if (status == HAL_ERROR)
 8000638:	197b      	adds	r3, r7, r5
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d104      	bne.n	800064a <bno055_writeData+0x5a>
  {
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000640:	4b62      	ldr	r3, [pc, #392]	@ (80007cc <bno055_writeData+0x1dc>)
 8000642:	0018      	movs	r0, r3
 8000644:	f007 fafc 	bl	8007c40 <puts>
 8000648:	e01b      	b.n	8000682 <bno055_writeData+0x92>
  }
  else if (status == HAL_TIMEOUT)
 800064a:	2317      	movs	r3, #23
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d104      	bne.n	800065e <bno055_writeData+0x6e>
  {
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000654:	4b5e      	ldr	r3, [pc, #376]	@ (80007d0 <bno055_writeData+0x1e0>)
 8000656:	0018      	movs	r0, r3
 8000658:	f007 faf2 	bl	8007c40 <puts>
 800065c:	e011      	b.n	8000682 <bno055_writeData+0x92>
  }
  else if (status == HAL_BUSY)
 800065e:	2317      	movs	r3, #23
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d104      	bne.n	8000672 <bno055_writeData+0x82>
  {
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000668:	4b5a      	ldr	r3, [pc, #360]	@ (80007d4 <bno055_writeData+0x1e4>)
 800066a:	0018      	movs	r0, r3
 800066c:	f007 fae8 	bl	8007c40 <puts>
 8000670:	e007      	b.n	8000682 <bno055_writeData+0x92>
  }
  else
  {
    printf("Unknown status data %d", status);
 8000672:	2317      	movs	r3, #23
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	4b57      	ldr	r3, [pc, #348]	@ (80007d8 <bno055_writeData+0x1e8>)
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f007 fa79 	bl	8007b74 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000682:	4b51      	ldr	r3, [pc, #324]	@ (80007c8 <bno055_writeData+0x1d8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	0018      	movs	r0, r3
 8000688:	f003 fb8e 	bl	8003da8 <HAL_I2C_GetError>
 800068c:	0003      	movs	r3, r0
 800068e:	613b      	str	r3, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE)
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d100      	bne.n	8000698 <bno055_writeData+0xa8>
 8000696:	e092      	b.n	80007be <bno055_writeData+0x1ce>
  {
    return;
  }
  else if (error == HAL_I2C_ERROR_BERR)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d104      	bne.n	80006a8 <bno055_writeData+0xb8>
  {
    printf("HAL_I2C_ERROR_BERR\r\n");
 800069e:	4b4f      	ldr	r3, [pc, #316]	@ (80007dc <bno055_writeData+0x1ec>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f007 facd 	bl	8007c40 <puts>
 80006a6:	e026      	b.n	80006f6 <bno055_writeData+0x106>
  }
  else if (error == HAL_I2C_ERROR_ARLO)
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d104      	bne.n	80006b8 <bno055_writeData+0xc8>
  {
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80006ae:	4b4c      	ldr	r3, [pc, #304]	@ (80007e0 <bno055_writeData+0x1f0>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f007 fac5 	bl	8007c40 <puts>
 80006b6:	e01e      	b.n	80006f6 <bno055_writeData+0x106>
  }
  else if (error == HAL_I2C_ERROR_AF)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d104      	bne.n	80006c8 <bno055_writeData+0xd8>
  {
    printf("HAL_I2C_ERROR_AF\r\n");
 80006be:	4b49      	ldr	r3, [pc, #292]	@ (80007e4 <bno055_writeData+0x1f4>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f007 fabd 	bl	8007c40 <puts>
 80006c6:	e016      	b.n	80006f6 <bno055_writeData+0x106>
  }
  else if (error == HAL_I2C_ERROR_OVR)
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	2b08      	cmp	r3, #8
 80006cc:	d104      	bne.n	80006d8 <bno055_writeData+0xe8>
  {
    printf("HAL_I2C_ERROR_OVR\r\n");
 80006ce:	4b46      	ldr	r3, [pc, #280]	@ (80007e8 <bno055_writeData+0x1f8>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f007 fab5 	bl	8007c40 <puts>
 80006d6:	e00e      	b.n	80006f6 <bno055_writeData+0x106>
  }
  else if (error == HAL_I2C_ERROR_DMA)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	2b10      	cmp	r3, #16
 80006dc:	d104      	bne.n	80006e8 <bno055_writeData+0xf8>
  {
    printf("HAL_I2C_ERROR_DMA\r\n");
 80006de:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <bno055_writeData+0x1fc>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f007 faad 	bl	8007c40 <puts>
 80006e6:	e006      	b.n	80006f6 <bno055_writeData+0x106>
  }
  else if (error == HAL_I2C_ERROR_TIMEOUT)
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	2b20      	cmp	r3, #32
 80006ec:	d103      	bne.n	80006f6 <bno055_writeData+0x106>
  {
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80006ee:	4b40      	ldr	r3, [pc, #256]	@ (80007f0 <bno055_writeData+0x200>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f007 faa5 	bl	8007c40 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <bno055_writeData+0x1d8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	250f      	movs	r5, #15
 80006fc:	197c      	adds	r4, r7, r5
 80006fe:	0018      	movs	r0, r3
 8000700:	f003 fb46 	bl	8003d90 <HAL_I2C_GetState>
 8000704:	0003      	movs	r3, r0
 8000706:	7023      	strb	r3, [r4, #0]
  if (state == HAL_I2C_STATE_RESET)
 8000708:	197b      	adds	r3, r7, r5
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d104      	bne.n	800071a <bno055_writeData+0x12a>
  {
    printf("HAL_I2C_STATE_RESET\r\n");
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <bno055_writeData+0x204>)
 8000712:	0018      	movs	r0, r3
 8000714:	f007 fa94 	bl	8007c40 <puts>
 8000718:	e052      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_READY)
 800071a:	230f      	movs	r3, #15
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b20      	cmp	r3, #32
 8000722:	d104      	bne.n	800072e <bno055_writeData+0x13e>
  {
    printf("HAL_I2C_STATE_RESET\r\n");
 8000724:	4b33      	ldr	r3, [pc, #204]	@ (80007f4 <bno055_writeData+0x204>)
 8000726:	0018      	movs	r0, r3
 8000728:	f007 fa8a 	bl	8007c40 <puts>
 800072c:	e048      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_BUSY)
 800072e:	230f      	movs	r3, #15
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b24      	cmp	r3, #36	@ 0x24
 8000736:	d104      	bne.n	8000742 <bno055_writeData+0x152>
  {
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000738:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <bno055_writeData+0x208>)
 800073a:	0018      	movs	r0, r3
 800073c:	f007 fa80 	bl	8007c40 <puts>
 8000740:	e03e      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_BUSY_TX)
 8000742:	230f      	movs	r3, #15
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b21      	cmp	r3, #33	@ 0x21
 800074a:	d104      	bne.n	8000756 <bno055_writeData+0x166>
  {
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800074c:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <bno055_writeData+0x20c>)
 800074e:	0018      	movs	r0, r3
 8000750:	f007 fa76 	bl	8007c40 <puts>
 8000754:	e034      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_BUSY_RX)
 8000756:	230f      	movs	r3, #15
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b22      	cmp	r3, #34	@ 0x22
 800075e:	d104      	bne.n	800076a <bno055_writeData+0x17a>
  {
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <bno055_writeData+0x210>)
 8000762:	0018      	movs	r0, r3
 8000764:	f007 fa6c 	bl	8007c40 <puts>
 8000768:	e02a      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_LISTEN)
 800076a:	230f      	movs	r3, #15
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b28      	cmp	r3, #40	@ 0x28
 8000772:	d104      	bne.n	800077e <bno055_writeData+0x18e>
  {
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <bno055_writeData+0x214>)
 8000776:	0018      	movs	r0, r3
 8000778:	f007 fa62 	bl	8007c40 <puts>
 800077c:	e020      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800077e:	230f      	movs	r3, #15
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b29      	cmp	r3, #41	@ 0x29
 8000786:	d104      	bne.n	8000792 <bno055_writeData+0x1a2>
  {
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <bno055_writeData+0x218>)
 800078a:	0018      	movs	r0, r3
 800078c:	f007 fa58 	bl	8007c40 <puts>
 8000790:	e016      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000792:	230f      	movs	r3, #15
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b2a      	cmp	r3, #42	@ 0x2a
 800079a:	d104      	bne.n	80007a6 <bno055_writeData+0x1b6>
  {
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <bno055_writeData+0x21c>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f007 fa4e 	bl	8007c40 <puts>
 80007a4:	e00c      	b.n	80007c0 <bno055_writeData+0x1d0>
  }
  else if (state == HAL_I2C_STATE_ABORT)
 80007a6:	230f      	movs	r3, #15
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b60      	cmp	r3, #96	@ 0x60
 80007ae:	d107      	bne.n	80007c0 <bno055_writeData+0x1d0>
  {
    printf("HAL_I2C_STATE_ABORT\r\n");
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <bno055_writeData+0x220>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f007 fa44 	bl	8007c40 <puts>
 80007b8:	e002      	b.n	80007c0 <bno055_writeData+0x1d0>
    return;
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e000      	b.n	80007c0 <bno055_writeData+0x1d0>
    return;
 80007be:	46c0      	nop			@ (mov r8, r8)
    printf("HAL_I2C_STATE_ERROR\r\n");
  }
  */
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b006      	add	sp, #24
 80007c4:	bdb0      	pop	{r4, r5, r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	200000e8 	.word	0x200000e8
 80007cc:	080089d4 	.word	0x080089d4
 80007d0:	080089f8 	.word	0x080089f8
 80007d4:	08008a20 	.word	0x08008a20
 80007d8:	08008a44 	.word	0x08008a44
 80007dc:	08008a5c 	.word	0x08008a5c
 80007e0:	08008a70 	.word	0x08008a70
 80007e4:	08008a84 	.word	0x08008a84
 80007e8:	08008a98 	.word	0x08008a98
 80007ec:	08008aac 	.word	0x08008aac
 80007f0:	08008ac0 	.word	0x08008ac0
 80007f4:	08008ad8 	.word	0x08008ad8
 80007f8:	08008af0 	.word	0x08008af0
 80007fc:	08008b04 	.word	0x08008b04
 8000800:	08008b1c 	.word	0x08008b1c
 8000804:	08008b34 	.word	0x08008b34
 8000808:	08008b4c 	.word	0x08008b4c
 800080c:	08008b6c 	.word	0x08008b6c
 8000810:	08008b8c 	.word	0x08008b8c

08000814 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000814:	b5b0      	push	{r4, r5, r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	6039      	str	r1, [r7, #0]
 800081c:	0011      	movs	r1, r2
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	1c02      	adds	r2, r0, #0
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	1c0a      	adds	r2, r1, #0
 8000828:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800082a:	250f      	movs	r5, #15
 800082c:	197b      	adds	r3, r7, r5
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1, 100);
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <bno055_readData+0x5c>)
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	197c      	adds	r4, r7, r5
 8000838:	1dfa      	adds	r2, r7, #7
 800083a:	2364      	movs	r3, #100	@ 0x64
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	2150      	movs	r1, #80	@ 0x50
 8000842:	f003 f873 	bl	800392c <HAL_I2C_Master_Transmit>
 8000846:	0003      	movs	r3, r0
 8000848:	7023      	strb	r3, [r4, #0]
  status = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len, 100);
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <bno055_readData+0x5c>)
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	1dbb      	adds	r3, r7, #6
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	197c      	adds	r4, r7, r5
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	2164      	movs	r1, #100	@ 0x64
 800085a:	9100      	str	r1, [sp, #0]
 800085c:	2150      	movs	r1, #80	@ 0x50
 800085e:	f003 f98f 	bl	8003b80 <HAL_I2C_Master_Receive>
 8000862:	0003      	movs	r3, r0
 8000864:	7023      	strb	r3, [r4, #0]

//   status = HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
//   I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b004      	add	sp, #16
 800086c:	bdb0      	pop	{r4, r5, r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	200000e8 	.word	0x200000e8

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087a:	f001 fcf8 	bl	800226e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087e:	f000 f8c1 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000882:	f000 fba3 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000886:	f000 fb73 	bl	8000f70 <MX_DMA_Init>
  MX_ADC1_Init();
 800088a:	f000 f8f9 	bl	8000a80 <MX_ADC1_Init>
  MX_I2C1_Init();
 800088e:	f000 f9d1 	bl	8000c34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000892:	f000 fa0f 	bl	8000cb4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000896:	f000 fa4b 	bl	8000d30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800089a:	f000 fb19 	bl	8000ed0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800089e:	f000 faf1 	bl	8000e84 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80008a2:	4b50      	ldr	r3, [pc, #320]	@ (80009e4 <main+0x170>)
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80008aa:	4b4e      	ldr	r3, [pc, #312]	@ (80009e4 <main+0x170>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80008b2:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <main+0x170>)
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	809a      	strh	r2, [r3, #4]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 80008b8:	4b4b      	ldr	r3, [pc, #300]	@ (80009e8 <main+0x174>)
 80008ba:	22fe      	movs	r2, #254	@ 0xfe
 80008bc:	0592      	lsls	r2, r2, #22
 80008be:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 80008c0:	4b49      	ldr	r3, [pc, #292]	@ (80009e8 <main+0x174>)
 80008c2:	4a4a      	ldr	r2, [pc, #296]	@ (80009ec <main+0x178>)
 80008c4:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80008c6:	4b48      	ldr	r3, [pc, #288]	@ (80009e8 <main+0x174>)
 80008c8:	4a49      	ldr	r2, [pc, #292]	@ (80009f0 <main+0x17c>)
 80008ca:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80008cc:	4b46      	ldr	r3, [pc, #280]	@ (80009e8 <main+0x174>)
 80008ce:	4a47      	ldr	r2, [pc, #284]	@ (80009ec <main+0x178>)
 80008d0:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 80008d2:	4b45      	ldr	r3, [pc, #276]	@ (80009e8 <main+0x174>)
 80008d4:	22fe      	movs	r2, #254	@ 0xfe
 80008d6:	0592      	lsls	r2, r2, #22
 80008d8:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 80008da:	4b43      	ldr	r3, [pc, #268]	@ (80009e8 <main+0x174>)
 80008dc:	4a45      	ldr	r2, [pc, #276]	@ (80009f4 <main+0x180>)
 80008de:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 80008e0:	4b41      	ldr	r3, [pc, #260]	@ (80009e8 <main+0x174>)
 80008e2:	4a44      	ldr	r2, [pc, #272]	@ (80009f4 <main+0x180>)
 80008e4:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 80008e6:	4b40      	ldr	r3, [pc, #256]	@ (80009e8 <main+0x174>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 80008ec:	4b3e      	ldr	r3, [pc, #248]	@ (80009e8 <main+0x174>)
 80008ee:	4a42      	ldr	r2, [pc, #264]	@ (80009f8 <main+0x184>)
 80008f0:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 80008f2:	4b3d      	ldr	r3, [pc, #244]	@ (80009e8 <main+0x174>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 80008f8:	4b3b      	ldr	r3, [pc, #236]	@ (80009e8 <main+0x174>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 80008fe:	4b3a      	ldr	r3, [pc, #232]	@ (80009e8 <main+0x174>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8000904:	4b38      	ldr	r3, [pc, #224]	@ (80009e8 <main+0x174>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 800090a:	4b37      	ldr	r3, [pc, #220]	@ (80009e8 <main+0x174>)
 800090c:	2200      	movs	r2, #0
 800090e:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8000910:	f000 ffa0 	bl	8001854 <modbus_set_rx>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <main+0xa8>
  {
	  Error_Handler();
 8000918:	f000 fbd4 	bl	80010c4 <Error_Handler>
//  if(HAL_ADC_Start_DMA(&hadc1, raw_data, 9) != HAL_OK)
//  {
//	  Error_Handler();
//  }

  bno055_assignI2C(&hi2c1);
 800091c:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <main+0x188>)
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fe4c 	bl	80005bc <bno055_assignI2C>
  bno055_setup();
 8000924:	f7ff fdba 	bl	800049c <bno055_setup>
  bno055_setOperationModeNDOF();
 8000928:	f7ff fda1 	bl	800046e <bno055_setOperationModeNDOF>
   */
//  uint8_t target_actuator = 0;

  while (1)
  {
	  if(modbus_rx())
 800092c:	f000 ff7c 	bl	8001828 <modbus_rx>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d054      	beq.n	80009de <main+0x16a>
	  {
		  int8_t status = 0;
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fcb4 	bl	80012a8 <get_rx_buffer>
 8000940:	0003      	movs	r3, r0
 8000942:	001a      	movs	r2, r3
 8000944:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <main+0x18c>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	d11b      	bne.n	8000984 <main+0x110>
		  {
			  switch(get_rx_buffer(1))
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fcab 	bl	80012a8 <get_rx_buffer>
 8000952:	0003      	movs	r3, r0
 8000954:	2b03      	cmp	r3, #3
 8000956:	d002      	beq.n	800095e <main+0xea>
 8000958:	2b10      	cmp	r3, #16
 800095a:	d006      	beq.n	800096a <main+0xf6>
 800095c:	e00b      	b.n	8000976 <main+0x102>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 800095e:	1dfc      	adds	r4, r7, #7
 8000960:	f000 fcda 	bl	8001318 <return_holding_registers>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]
					  break;
 8000968:	e034      	b.n	80009d4 <main+0x160>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 800096a:	1dfc      	adds	r4, r7, #7
 800096c:	f000 fd70 	bl	8001450 <edit_multiple_registers>
 8000970:	0003      	movs	r3, r0
 8000972:	7023      	strb	r3, [r4, #0]
					  break;
 8000974:	e02e      	b.n	80009d4 <main+0x160>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 8000976:	1dfc      	adds	r4, r7, #7
 8000978:	2004      	movs	r0, #4
 800097a:	f000 fe57 	bl	800162c <modbus_exception>
 800097e:	0003      	movs	r3, r0
 8000980:	7023      	strb	r3, [r4, #0]
					  break;
 8000982:	e027      	b.n	80009d4 <main+0x160>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000984:	2000      	movs	r0, #0
 8000986:	f000 fc8f 	bl	80012a8 <get_rx_buffer>
 800098a:	0003      	movs	r3, r0
 800098c:	2bff      	cmp	r3, #255	@ 0xff
 800098e:	d121      	bne.n	80009d4 <main+0x160>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fc89 	bl	80012a8 <get_rx_buffer>
 8000996:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000998:	2b03      	cmp	r3, #3
 800099a:	d11b      	bne.n	80009d4 <main+0x160>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800099c:	2002      	movs	r0, #2
 800099e:	f000 fc83 	bl	80012a8 <get_rx_buffer>
 80009a2:	0003      	movs	r3, r0
 80009a4:	021c      	lsls	r4, r3, #8
 80009a6:	2003      	movs	r0, #3
 80009a8:	f000 fc7e 	bl	80012a8 <get_rx_buffer>
 80009ac:	0003      	movs	r3, r0
 80009ae:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80009b0:	d110      	bne.n	80009d4 <main+0x160>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 80009b2:	2004      	movs	r0, #4
 80009b4:	f000 fc78 	bl	80012a8 <get_rx_buffer>
 80009b8:	0003      	movs	r3, r0
 80009ba:	021c      	lsls	r4, r3, #8
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 fc73 	bl	80012a8 <get_rx_buffer>
 80009c2:	0003      	movs	r3, r0
 80009c4:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d104      	bne.n	80009d4 <main+0x160>
		  {

			  status = return_holding_registers();
 80009ca:	1dfc      	adds	r4, r7, #7
 80009cc:	f000 fca4 	bl	8001318 <return_holding_registers>
 80009d0:	0003      	movs	r3, r0
 80009d2:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 80009d4:	1dfc      	adds	r4, r7, #7
 80009d6:	f000 ff3d 	bl	8001854 <modbus_set_rx>
 80009da:	0003      	movs	r3, r0
 80009dc:	7023      	strb	r3, [r4, #0]
			  // log error in a queue
			  //Error_Handler();
		  }
	  }

	  bno055_get_all_values();
 80009de:	f7ff fd89 	bl	80004f4 <bno055_get_all_values>
	  if(modbus_rx())
 80009e2:	e7a3      	b.n	800092c <main+0xb8>
 80009e4:	20000480 	.word	0x20000480
 80009e8:	20000448 	.word	0x20000448
 80009ec:	3dcccccd 	.word	0x3dcccccd
 80009f0:	40a00000 	.word	0x40a00000
 80009f4:	42c80000 	.word	0x42c80000
 80009f8:	42200000 	.word	0x42200000
 80009fc:	200001ac 	.word	0x200001ac
 8000a00:	20000000 	.word	0x20000000

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08f      	sub	sp, #60	@ 0x3c
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	2418      	movs	r4, #24
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2320      	movs	r3, #32
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f007 fa09 	bl	8007e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f007 fa02 	bl	8007e2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2280      	movs	r2, #128	@ 0x80
 8000a32:	0252      	lsls	r2, r2, #9
 8000a34:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f003 fd2b 	bl	8004494 <HAL_RCC_OscConfig>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000a42:	f000 fb3f 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2100      	movs	r1, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f003 ff39 	bl	80048e0 <HAL_RCC_ClockConfig>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a72:	f000 fb27 	bl	80010c4 <Error_Handler>
  }
}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b00f      	add	sp, #60	@ 0x3c
 8000a7c:	bd90      	pop	{r4, r7, pc}
	...

08000a80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f007 f9cc 	bl	8007e2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a94:	4b5d      	ldr	r3, [pc, #372]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000a96:	4a5e      	ldr	r2, [pc, #376]	@ (8000c10 <MX_ADC1_Init+0x190>)
 8000a98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000a9c:	22c0      	movs	r2, #192	@ 0xc0
 8000a9e:	0612      	lsls	r2, r2, #24
 8000aa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa8:	4b58      	ldr	r3, [pc, #352]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000aae:	4b57      	ldr	r3, [pc, #348]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	0612      	lsls	r2, r2, #24
 8000ab4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab6:	4b55      	ldr	r3, [pc, #340]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000abc:	4b53      	ldr	r3, [pc, #332]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000ac2:	4b52      	ldr	r3, [pc, #328]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ac8:	4b50      	ldr	r3, [pc, #320]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8000ace:	4b4f      	ldr	r3, [pc, #316]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ada:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ae0:	4b4a      	ldr	r3, [pc, #296]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000ae2:	222c      	movs	r2, #44	@ 0x2c
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae8:	4b48      	ldr	r3, [pc, #288]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000aee:	4b47      	ldr	r3, [pc, #284]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000af4:	4b45      	ldr	r3, [pc, #276]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000af6:	223c      	movs	r2, #60	@ 0x3c
 8000af8:	2100      	movs	r1, #0
 8000afa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000afc:	4b43      	ldr	r3, [pc, #268]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b02:	4b42      	ldr	r3, [pc, #264]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 fd51 	bl	80025ac <HAL_ADC_Init>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b0e:	f000 fad9 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1e:	1d3a      	adds	r2, r7, #4
 8000b20:	4b3a      	ldr	r3, [pc, #232]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fee7 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b2e:	f000 fac9 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4a37      	ldr	r2, [pc, #220]	@ (8000c14 <MX_ADC1_Init+0x194>)
 8000b36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	1d3a      	adds	r2, r7, #4
 8000b3a:	4b34      	ldr	r3, [pc, #208]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 feda 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000b48:	f000 fabc 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4a32      	ldr	r2, [pc, #200]	@ (8000c18 <MX_ADC1_Init+0x198>)
 8000b50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b52:	1d3a      	adds	r2, r7, #4
 8000b54:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f001 fecd 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000b62:	f000 faaf 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4a2c      	ldr	r2, [pc, #176]	@ (8000c1c <MX_ADC1_Init+0x19c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	1d3a      	adds	r2, r7, #4
 8000b6e:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000b70:	0011      	movs	r1, r2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fec0 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b7c:	f000 faa2 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4a27      	ldr	r2, [pc, #156]	@ (8000c20 <MX_ADC1_Init+0x1a0>)
 8000b84:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b86:	1d3a      	adds	r2, r7, #4
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 feb3 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000b96:	f000 fa95 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4a21      	ldr	r2, [pc, #132]	@ (8000c24 <MX_ADC1_Init+0x1a4>)
 8000b9e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	1d3a      	adds	r2, r7, #4
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 fea6 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000bb0:	f000 fa88 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <MX_ADC1_Init+0x1a8>)
 8000bb8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	1d3a      	adds	r2, r7, #4
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 fe99 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000bca:	f000 fa7b 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <MX_ADC1_Init+0x1ac>)
 8000bd2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd4:	1d3a      	adds	r2, r7, #4
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 fe8c 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000be4:	f000 fa6e 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4a11      	ldr	r2, [pc, #68]	@ (8000c30 <MX_ADC1_Init+0x1b0>)
 8000bec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bee:	1d3a      	adds	r2, r7, #4
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_ADC1_Init+0x18c>)
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fe7f 	bl	80028f8 <HAL_ADC_ConfigChannel>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8000bfe:	f000 fa61 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	200000ec 	.word	0x200000ec
 8000c10:	40012400 	.word	0x40012400
 8000c14:	04000002 	.word	0x04000002
 8000c18:	08000004 	.word	0x08000004
 8000c1c:	0c000008 	.word	0x0c000008
 8000c20:	10000010 	.word	0x10000010
 8000c24:	14000020 	.word	0x14000020
 8000c28:	18000040 	.word	0x18000040
 8000c2c:	1c000080 	.word	0x1c000080
 8000c30:	20000100 	.word	0x20000100

08000c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <MX_I2C1_Init+0x78>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2C;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <MX_I2C1_Init+0x7c>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f002 fdb5 	bl	80037e0 <HAL_I2C_Init>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c7a:	f000 fa23 	bl	80010c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f003 fb6e 	bl	8004364 <HAL_I2CEx_ConfigAnalogFilter>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 fa1a 	bl	80010c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	0018      	movs	r0, r3
 8000c96:	f003 fbb1 	bl	80043fc <HAL_I2CEx_ConfigDigitalFilter>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 fa11 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200001ac 	.word	0x200001ac
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	00201d2c 	.word	0x00201d2c

08000cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <MX_SPI1_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cc0:	2282      	movs	r2, #130	@ 0x82
 8000cc2:	0052      	lsls	r2, r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cce:	22e0      	movs	r2, #224	@ 0xe0
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000ce2:	2280      	movs	r2, #128	@ 0x80
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <MX_SPI1_Init+0x74>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f004 f885 	bl	8004e24 <HAL_SPI_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 f9d1 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000025c 	.word	0x2000025c
 8000d2c:	40013000 	.word	0x40013000

08000d30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b098      	sub	sp, #96	@ 0x60
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	2354      	movs	r3, #84	@ 0x54
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f007 f873 	bl	8007e2c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	2338      	movs	r3, #56	@ 0x38
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	231c      	movs	r3, #28
 8000d4e:	001a      	movs	r2, r3
 8000d50:	2100      	movs	r1, #0
 8000d52:	f007 f86b 	bl	8007e2c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2334      	movs	r3, #52	@ 0x34
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f007 f864 	bl	8007e2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d64:	4b45      	ldr	r3, [pc, #276]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d66:	4a46      	ldr	r2, [pc, #280]	@ (8000e80 <MX_TIM1_Init+0x150>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000d6a:	4b44      	ldr	r3, [pc, #272]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d6c:	220b      	movs	r2, #11
 8000d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000d76:	4b41      	ldr	r3, [pc, #260]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d78:	2263      	movs	r2, #99	@ 0x63
 8000d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d82:	4b3e      	ldr	r3, [pc, #248]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d88:	4b3c      	ldr	r3, [pc, #240]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f004 f957 	bl	8005044 <HAL_TIM_PWM_Init>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f993 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2154      	movs	r1, #84	@ 0x54
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db2:	187a      	adds	r2, r7, r1
 8000db4:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f004 fdbb 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dc2:	f000 f97f 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc6:	2138      	movs	r1, #56	@ 0x38
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2260      	movs	r2, #96	@ 0x60
 8000dcc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f004 f97b 	bl	80050f4 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e02:	f000 f95f 	bl	80010c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	0192      	lsls	r2, r2, #6
 8000e2a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2280      	movs	r2, #128	@ 0x80
 8000e42:	0492      	lsls	r2, r2, #18
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e58:	1d3a      	adds	r2, r7, #4
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f004 fdd0 	bl	8005a04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000e68:	f000 f92c 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <MX_TIM1_Init+0x14c>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 ffc2 	bl	8001df8 <HAL_TIM_MspPostInit>

}
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b018      	add	sp, #96	@ 0x60
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200002c0 	.word	0x200002c0
 8000e80:	40012c00 	.word	0x40012c00

08000e84 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <MX_TIM14_Init+0x44>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e90:	220b      	movs	r2, #11
 8000e92:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <MX_TIM14_Init+0x48>)
 8000e9e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <MX_TIM14_Init+0x40>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f004 f870 	bl	8004f94 <HAL_TIM_Base_Init>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000eb8:	f000 f904 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	2000030c 	.word	0x2000030c
 8000ec8:	40002000 	.word	0x40002000
 8000ecc:	0000ffff 	.word	0x0000ffff

08000ed0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000ed6:	4a25      	ldr	r2, [pc, #148]	@ (8000f6c <MX_USART1_UART_Init+0x9c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000edc:	2296      	movs	r2, #150	@ 0x96
 8000ede:	0192      	lsls	r2, r2, #6
 8000ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000f18:	4813      	ldr	r0, [pc, #76]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f006 fb58 	bl	80075d4 <HAL_RS485Ex_Init>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f000 f8cc 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	0018      	movs	r0, r3
 8000f32:	f006 fc13 	bl	800775c <HAL_UARTEx_SetTxFifoThreshold>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 f8c3 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f006 fc4a 	bl	80077dc <HAL_UARTEx_SetRxFifoThreshold>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000f4c:	f000 f8ba 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <MX_USART1_UART_Init+0x98>)
 8000f52:	0018      	movs	r0, r3
 8000f54:	f006 fbc8 	bl	80076e8 <HAL_UARTEx_DisableFifoMode>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f000 f8b2 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	20000358 	.word	0x20000358
 8000f6c:	40013800 	.word	0x40013800

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_DMA_Init+0x58>)
 8000f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <MX_DMA_Init+0x58>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_DMA_Init+0x58>)
 8000f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f86:	2201      	movs	r2, #1
 8000f88:	4013      	ands	r3, r2
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2009      	movs	r0, #9
 8000f94:	f001 ff32 	bl	8002dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f98:	2009      	movs	r0, #9
 8000f9a:	f001 ff44 	bl	8002e26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f001 ff2a 	bl	8002dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 ff3c 	bl	8002e26 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200b      	movs	r0, #11
 8000fb4:	f001 ff22 	bl	8002dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8000fb8:	200b      	movs	r0, #11
 8000fba:	f001 ff34 	bl	8002e26 <HAL_NVIC_EnableIRQ>

}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	40021000 	.word	0x40021000

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b08b      	sub	sp, #44	@ 0x2c
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	2414      	movs	r4, #20
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2314      	movs	r3, #20
 8000fda:	001a      	movs	r2, r3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f006 ff25 	bl	8007e2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b35      	ldr	r3, [pc, #212]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe6:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8000fe8:	2104      	movs	r1, #4
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fee:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8000ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001000:	2120      	movs	r1, #32
 8001002:	430a      	orrs	r2, r1
 8001004:	635a      	str	r2, [r3, #52]	@ 0x34
 8001006:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100a:	2220      	movs	r2, #32
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001016:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001018:	2101      	movs	r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	@ 0x34
 800101e:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <MX_GPIO_Init+0xec>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001030:	2102      	movs	r1, #2
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800103a:	2202      	movs	r2, #2
 800103c:	4013      	ands	r3, r2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001048:	2108      	movs	r1, #8
 800104a:	430a      	orrs	r2, r1
 800104c:	635a      	str	r2, [r3, #52]	@ 0x34
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_GPIO_Init+0xec>)
 8001050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001052:	2208      	movs	r2, #8
 8001054:	4013      	ands	r3, r2
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin, GPIO_PIN_RESET);
 800105a:	23e0      	movs	r3, #224	@ 0xe0
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4817      	ldr	r0, [pc, #92]	@ (80010bc <MX_GPIO_Init+0xf0>)
 8001060:	2200      	movs	r2, #0
 8001062:	0019      	movs	r1, r3
 8001064:	f002 fb9e 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2206      	movs	r2, #6
 800106c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	193b      	adds	r3, r7, r4
 800107c:	4a10      	ldr	r2, [pc, #64]	@ (80010c0 <MX_GPIO_Init+0xf4>)
 800107e:	0019      	movs	r1, r3
 8001080:	0010      	movs	r0, r2
 8001082:	f002 fa1d 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_C_EN_Pin Actuator_B_EN_Pin Actuator_A_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin;
 8001086:	0021      	movs	r1, r4
 8001088:	187b      	adds	r3, r7, r1
 800108a:	22e0      	movs	r2, #224	@ 0xe0
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2201      	movs	r2, #1
 8001094:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <MX_GPIO_Init+0xf0>)
 80010a6:	0019      	movs	r1, r3
 80010a8:	0010      	movs	r0, r2
 80010aa:	f002 fa09 	bl	80034c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b00b      	add	sp, #44	@ 0x2c
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	40021000 	.word	0x40021000
 80010bc:	50000400 	.word	0x50000400
 80010c0:	50000c00 	.word	0x50000c00

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	e7fd      	b.n	80010cc <Error_Handler+0x8>

080010d0 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	000a      	movs	r2, r1
 80010da:	1cbb      	adds	r3, r7, #2
 80010dc:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a45      	ldr	r2, [pc, #276]	@ (80011f8 <HAL_UARTEx_RxEventCallback+0x128>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d000      	beq.n	80010ea <HAL_UARTEx_RxEventCallback+0x1a>
 80010e8:	e081      	b.n	80011ee <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 80010ea:	4b44      	ldr	r3, [pc, #272]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x12c>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b43      	ldr	r3, [pc, #268]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x130>)
 80010f2:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 80010f4:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x130>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	001a      	movs	r2, r3
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	18d2      	adds	r2, r2, r3
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	429a      	cmp	r2, r3
 8001108:	dd29      	ble.n	800115e <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 800110a:	4b3d      	ldr	r3, [pc, #244]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x130>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29a      	uxth	r2, r3
 8001110:	240e      	movs	r4, #14
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	0049      	lsls	r1, r1, #1
 8001118:	1a8a      	subs	r2, r1, r2
 800111a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 800111c:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x130>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	001a      	movs	r2, r3
 8001124:	4b37      	ldr	r3, [pc, #220]	@ (8001204 <HAL_UARTEx_RxEventCallback+0x134>)
 8001126:	18d0      	adds	r0, r2, r3
 8001128:	193b      	adds	r3, r7, r4
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x138>)
 800112e:	0019      	movs	r1, r3
 8001130:	f006 feff 	bl	8007f32 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8001134:	1cba      	adds	r2, r7, #2
 8001136:	193b      	adds	r3, r7, r4
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x12c>)
 8001142:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8001144:	193b      	adds	r3, r7, r4
 8001146:	881a      	ldrh	r2, [r3, #0]
 8001148:	4b2f      	ldr	r3, [pc, #188]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x138>)
 800114a:	18d1      	adds	r1, r2, r3
 800114c:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x12c>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	001a      	movs	r2, r3
 8001154:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <HAL_UARTEx_RxEventCallback+0x134>)
 8001156:	0018      	movs	r0, r3
 8001158:	f006 feeb 	bl	8007f32 <memcpy>
 800115c:	e014      	b.n	8001188 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x130>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	001a      	movs	r2, r3
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <HAL_UARTEx_RxEventCallback+0x134>)
 8001168:	18d0      	adds	r0, r2, r3
 800116a:	1cbb      	adds	r3, r7, #2
 800116c:	881a      	ldrh	r2, [r3, #0]
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x138>)
 8001170:	0019      	movs	r1, r3
 8001172:	f006 fede 	bl	8007f32 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x130>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	b29a      	uxth	r2, r3
 800117c:	1cbb      	adds	r3, r7, #2
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	18d3      	adds	r3, r2, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x12c>)
 8001186:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_UARTEx_RxEventCallback+0x13c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d027      	beq.n	80011e2 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8001192:	f001 f8df 	bl	8002354 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <HAL_UARTEx_RxEventCallback+0x140>)
 800119a:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x130>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <HAL_UARTEx_RxEventCallback+0x144>)
 80011a4:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_UARTEx_RxEventCallback+0x13c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x138>)
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x138>)
 80011b4:	7952      	ldrb	r2, [r2, #5]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	18db      	adds	r3, r3, r3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4910      	ldr	r1, [pc, #64]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x138>)
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_UARTEx_RxEventCallback+0x148>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f006 fb48 	bl	8007860 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_UARTEx_RxEventCallback+0x14c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_UARTEx_RxEventCallback+0x14c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2104      	movs	r1, #4
 80011dc:	438a      	bics	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 80011e0:	e005      	b.n	80011ee <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_UARTEx_RxEventCallback+0x13c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_UARTEx_RxEventCallback+0x150>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b005      	add	sp, #20
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	40013800 	.word	0x40013800
 80011fc:	20000790 	.word	0x20000790
 8001200:	2000078e 	.word	0x2000078e
 8001204:	20000488 	.word	0x20000488
 8001208:	20000688 	.word	0x20000688
 800120c:	20000062 	.word	0x20000062
 8001210:	20000788 	.word	0x20000788
 8001214:	2000078c 	.word	0x2000078c
 8001218:	20000358 	.word	0x20000358
 800121c:	200003ec 	.word	0x200003ec
 8001220:	20000792 	.word	0x20000792

08001224 <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <HAL_UART_TxCpltCallback+0x18>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	20000793 	.word	0x20000793

08001240 <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <handle_chunk_miss+0x5c>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d120      	bne.n	8001292 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8001250:	f001 f880 	bl	8002354 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <handle_chunk_miss+0x60>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b0a      	cmp	r3, #10
 800125e:	d918      	bls.n	8001292 <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <handle_chunk_miss+0x5c>)
 8001262:	2201      	movs	r2, #1
 8001264:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <handle_chunk_miss+0x64>)
 8001268:	0018      	movs	r0, r3
 800126a:	f004 fd0f 	bl	8005c8c <HAL_UART_Abort_IT>
 800126e:	0003      	movs	r3, r0
 8001270:	001a      	movs	r2, r3
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8001280:	1dfc      	adds	r4, r7, #7
 8001282:	f000 fae7 	bl	8001854 <modbus_set_rx>
 8001286:	0003      	movs	r3, r0
 8001288:	7023      	strb	r3, [r4, #0]
			}
			return status;
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	e000      	b.n	8001294 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b003      	add	sp, #12
 800129a:	bd90      	pop	{r4, r7, pc}
 800129c:	20000062 	.word	0x20000062
 80012a0:	20000788 	.word	0x20000788
 80012a4:	20000358 	.word	0x20000358

080012a8 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2bff      	cmp	r3, #255	@ 0xff
 80012ba:	d023      	beq.n	8001304 <get_rx_buffer+0x5c>
	{
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <get_rx_buffer+0x68>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	001a      	movs	r2, r3
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	2bff      	cmp	r3, #255	@ 0xff
 80012cc:	dd0b      	ble.n	80012e6 <get_rx_buffer+0x3e>
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <get_rx_buffer+0x68>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	001a      	movs	r2, r3
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	18d3      	adds	r3, r2, r3
 80012dc:	3b01      	subs	r3, #1
 80012de:	3bff      	subs	r3, #255	@ 0xff
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80012e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <get_rx_buffer+0x6c>)
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	e008      	b.n	80012f8 <get_rx_buffer+0x50>
				modbus_rx_buffer[start_index + index];
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <get_rx_buffer+0x68>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	001a      	movs	r2, r3
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	18d3      	adds	r3, r2, r3
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80012f4:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <get_rx_buffer+0x6c>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	210f      	movs	r1, #15
 80012fa:	187a      	adds	r2, r7, r1
 80012fc:	7013      	strb	r3, [r2, #0]
		return value;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	e000      	b.n	8001306 <get_rx_buffer+0x5e>
	}
	return 0xFF;
 8001304:	23ff      	movs	r3, #255	@ 0xff
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	2000078c 	.word	0x2000078c
 8001314:	20000488 	.word	0x20000488

08001318 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff ffc2 	bl	80012a8 <get_rx_buffer>
 8001324:	0003      	movs	r3, r0
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21c      	sxth	r4, r3
 800132a:	2003      	movs	r0, #3
 800132c:	f7ff ffbc 	bl	80012a8 <get_rx_buffer>
 8001330:	0003      	movs	r3, r0
 8001332:	b21b      	sxth	r3, r3
 8001334:	4323      	orrs	r3, r4
 8001336:	b21a      	sxth	r2, r3
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 800133c:	2004      	movs	r0, #4
 800133e:	f7ff ffb3 	bl	80012a8 <get_rx_buffer>
 8001342:	0003      	movs	r3, r0
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21c      	sxth	r4, r3
 8001348:	2005      	movs	r0, #5
 800134a:	f7ff ffad 	bl	80012a8 <get_rx_buffer>
 800134e:	0003      	movs	r3, r0
 8001350:	b21b      	sxth	r3, r3
 8001352:	4323      	orrs	r3, r4
 8001354:	b21a      	sxth	r2, r3
 8001356:	1cbb      	adds	r3, r7, #2
 8001358:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 800135a:	1cbb      	adds	r3, r7, #2
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001360:	d803      	bhi.n	800136a <return_holding_registers+0x52>
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d104      	bne.n	8001374 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 800136a:	2006      	movs	r0, #6
 800136c:	f000 f95e 	bl	800162c <modbus_exception>
 8001370:	0003      	movs	r3, r0
 8001372:	e065      	b.n	8001440 <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001374:	1cba      	adds	r2, r7, #2
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	003b      	movs	r3, r7
 8001382:	3a01      	subs	r2, #1
 8001384:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001386:	003b      	movs	r3, r7
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	2b31      	cmp	r3, #49	@ 0x31
 800138c:	d904      	bls.n	8001398 <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800138e:	2005      	movs	r0, #5
 8001390:	f000 f94c 	bl	800162c <modbus_exception>
 8001394:	0003      	movs	r3, r0
 8001396:	e053      	b.n	8001440 <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff ff85 	bl	80012a8 <get_rx_buffer>
 800139e:	0003      	movs	r3, r0
 80013a0:	001a      	movs	r2, r3
 80013a2:	4b29      	ldr	r3, [pc, #164]	@ (8001448 <return_holding_registers+0x130>)
 80013a4:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff ff7e 	bl	80012a8 <get_rx_buffer>
 80013ac:	0003      	movs	r3, r0
 80013ae:	001a      	movs	r2, r3
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <return_holding_registers+0x130>)
 80013b2:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 80013b4:	1cbb      	adds	r3, r7, #2
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	18db      	adds	r3, r3, r3
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <return_holding_registers+0x130>)
 80013c0:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	2203      	movs	r2, #3
 80013c6:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 80013c8:	1dbb      	adds	r3, r7, #6
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e028      	b.n	8001422 <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	1dbb      	adds	r3, r7, #6
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	18d2      	adds	r2, r2, r3
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <return_holding_registers+0x134>)
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	5ad3      	ldrh	r3, [r2, r3]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	b299      	uxth	r1, r3
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	1dfa      	adds	r2, r7, #7
 80013ea:	1c58      	adds	r0, r3, #1
 80013ec:	7010      	strb	r0, [r2, #0]
 80013ee:	001a      	movs	r2, r3
 80013f0:	b2c9      	uxtb	r1, r1
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <return_holding_registers+0x130>)
 80013f4:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	18d2      	adds	r2, r2, r3
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <return_holding_registers+0x134>)
 8001402:	0052      	lsls	r2, r2, #1
 8001404:	5ad1      	ldrh	r1, [r2, r3]
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	1dfa      	adds	r2, r7, #7
 800140c:	1c58      	adds	r0, r3, #1
 800140e:	7010      	strb	r0, [r2, #0]
 8001410:	001a      	movs	r2, r3
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <return_holding_registers+0x130>)
 8001416:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	1dbb      	adds	r3, r7, #6
 800141e:	3201      	adds	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	1dbb      	adds	r3, r7, #6
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	1cba      	adds	r2, r7, #2
 800142a:	8812      	ldrh	r2, [r2, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8cf      	bhi.n	80013d0 <return_holding_registers+0xb8>
	}

	return modbus_send(modbus_tx_buffer, index);
 8001430:	1dfb      	adds	r3, r7, #7
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <return_holding_registers+0x130>)
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f000 f98d 	bl	8001758 <modbus_send>
 800143e:	0003      	movs	r3, r0
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b003      	add	sp, #12
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	20000588 	.word	0x20000588
 800144c:	20000000 	.word	0x20000000

08001450 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001456:	2002      	movs	r0, #2
 8001458:	f7ff ff26 	bl	80012a8 <get_rx_buffer>
 800145c:	0003      	movs	r3, r0
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21c      	sxth	r4, r3
 8001462:	2003      	movs	r0, #3
 8001464:	f7ff ff20 	bl	80012a8 <get_rx_buffer>
 8001468:	0003      	movs	r3, r0
 800146a:	b21b      	sxth	r3, r3
 800146c:	4323      	orrs	r3, r4
 800146e:	b21a      	sxth	r2, r3
 8001470:	230c      	movs	r3, #12
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001476:	2004      	movs	r0, #4
 8001478:	f7ff ff16 	bl	80012a8 <get_rx_buffer>
 800147c:	0003      	movs	r3, r0
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21c      	sxth	r4, r3
 8001482:	2005      	movs	r0, #5
 8001484:	f7ff ff10 	bl	80012a8 <get_rx_buffer>
 8001488:	0003      	movs	r3, r0
 800148a:	b21b      	sxth	r3, r3
 800148c:	4323      	orrs	r3, r4
 800148e:	b21a      	sxth	r2, r3
 8001490:	210a      	movs	r1, #10
 8001492:	187b      	adds	r3, r7, r1
 8001494:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001496:	000a      	movs	r2, r1
 8001498:	18bb      	adds	r3, r7, r2
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b7d      	cmp	r3, #125	@ 0x7d
 800149e:	d803      	bhi.n	80014a8 <edit_multiple_registers+0x58>
 80014a0:	18bb      	adds	r3, r7, r2
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d104      	bne.n	80014b2 <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80014a8:	2006      	movs	r0, #6
 80014aa:	f000 f8bf 	bl	800162c <modbus_exception>
 80014ae:	0003      	movs	r3, r0
 80014b0:	e0b4      	b.n	800161c <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80014b2:	230a      	movs	r3, #10
 80014b4:	18fa      	adds	r2, r7, r3
 80014b6:	230c      	movs	r3, #12
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	18d3      	adds	r3, r2, r3
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	2108      	movs	r1, #8
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	3a01      	subs	r2, #1
 80014c8:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b31      	cmp	r3, #49	@ 0x31
 80014d0:	d904      	bls.n	80014dc <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80014d2:	2005      	movs	r0, #5
 80014d4:	f000 f8aa 	bl	800162c <modbus_exception>
 80014d8:	0003      	movs	r3, r0
 80014da:	e09f      	b.n	800161c <edit_multiple_registers+0x1cc>
	}

	if((first_register_address >= 3 && last_register_address <= 33))
 80014dc:	230c      	movs	r3, #12
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d909      	bls.n	80014fa <edit_multiple_registers+0xaa>
 80014e6:	2308      	movs	r3, #8
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2b21      	cmp	r3, #33	@ 0x21
 80014ee:	d804      	bhi.n	80014fa <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 80014f0:	2004      	movs	r0, #4
 80014f2:	f000 f89b 	bl	800162c <modbus_exception>
 80014f6:	0003      	movs	r3, r0
 80014f8:	e090      	b.n	800161c <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff fed4 	bl	80012a8 <get_rx_buffer>
 8001500:	0003      	movs	r3, r0
 8001502:	001a      	movs	r2, r3
 8001504:	4b47      	ldr	r3, [pc, #284]	@ (8001624 <edit_multiple_registers+0x1d4>)
 8001506:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fecd 	bl	80012a8 <get_rx_buffer>
 800150e:	0003      	movs	r3, r0
 8001510:	001a      	movs	r2, r3
 8001512:	4b44      	ldr	r3, [pc, #272]	@ (8001624 <edit_multiple_registers+0x1d4>)
 8001514:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff fec6 	bl	80012a8 <get_rx_buffer>
 800151c:	0003      	movs	r3, r0
 800151e:	001a      	movs	r2, r3
 8001520:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <edit_multiple_registers+0x1d4>)
 8001522:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001524:	2003      	movs	r0, #3
 8001526:	f7ff febf 	bl	80012a8 <get_rx_buffer>
 800152a:	0003      	movs	r3, r0
 800152c:	001a      	movs	r2, r3
 800152e:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <edit_multiple_registers+0x1d4>)
 8001530:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8001532:	2004      	movs	r0, #4
 8001534:	f7ff feb8 	bl	80012a8 <get_rx_buffer>
 8001538:	0003      	movs	r3, r0
 800153a:	001a      	movs	r2, r3
 800153c:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <edit_multiple_registers+0x1d4>)
 800153e:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8001540:	2005      	movs	r0, #5
 8001542:	f7ff feb1 	bl	80012a8 <get_rx_buffer>
 8001546:	0003      	movs	r3, r0
 8001548:	001a      	movs	r2, r3
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <edit_multiple_registers+0x1d4>)
 800154c:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	2206      	movs	r2, #6
 8001552:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e032      	b.n	80015c4 <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 800155e:	250f      	movs	r5, #15
 8001560:	197b      	adds	r3, r7, r5
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	18db      	adds	r3, r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3307      	adds	r3, #7
 800156a:	b2db      	uxtb	r3, r3
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fe9b 	bl	80012a8 <get_rx_buffer>
 8001572:	0003      	movs	r3, r0
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21c      	sxth	r4, r3
 8001578:	197b      	adds	r3, r7, r5
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3304      	adds	r3, #4
 800157e:	b2db      	uxtb	r3, r3
 8001580:	18db      	adds	r3, r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fe8f 	bl	80012a8 <get_rx_buffer>
 800158a:	0003      	movs	r3, r0
 800158c:	b21b      	sxth	r3, r3
 800158e:	4323      	orrs	r3, r4
 8001590:	b219      	sxth	r1, r3
 8001592:	200c      	movs	r0, #12
 8001594:	183b      	adds	r3, r7, r0
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	197b      	adds	r3, r7, r5
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	18d2      	adds	r2, r2, r3
 800159e:	b289      	uxth	r1, r1
 80015a0:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <edit_multiple_registers+0x1d8>)
 80015a2:	0052      	lsls	r2, r2, #1
 80015a4:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 80015a6:	197b      	adds	r3, r7, r5
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	18d3      	adds	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 f863 	bl	8001680 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80015ba:	197b      	adds	r3, r7, r5
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	197b      	adds	r3, r7, r5
 80015c0:	3201      	adds	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	230f      	movs	r3, #15
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	220a      	movs	r2, #10
 80015ce:	18ba      	adds	r2, r7, r2
 80015d0:	8812      	ldrh	r2, [r2, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d8c3      	bhi.n	800155e <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f000 fec6 	bl	8002368 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 80015dc:	1dbc      	adds	r4, r7, #6
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <edit_multiple_registers+0x1d4>)
 80015e4:	0011      	movs	r1, r2
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 f8b6 	bl	8001758 <modbus_send>
 80015ec:	0003      	movs	r3, r0
 80015ee:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80015fa:	230c      	movs	r3, #12
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d808      	bhi.n	8001616 <edit_multiple_registers+0x1c6>
 8001604:	2308      	movs	r3, #8
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 800160e:	f000 f943 	bl	8001898 <modbus_change_baud_rate>
 8001612:	0003      	movs	r3, r0
 8001614:	e002      	b.n	800161c <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 8001616:	1dbb      	adds	r3, r7, #6
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b25b      	sxtb	r3, r3
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	20000588 	.word	0x20000588
 8001628:	20000000 	.word	0x20000000

0800162c <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	0002      	movs	r2, r0
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fe35 	bl	80012a8 <get_rx_buffer>
 800163e:	0003      	movs	r3, r0
 8001640:	001a      	movs	r2, r3
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <modbus_exception+0x50>)
 8001644:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fe2e 	bl	80012a8 <get_rx_buffer>
 800164c:	0003      	movs	r3, r0
 800164e:	001a      	movs	r2, r3
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	425b      	negs	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <modbus_exception+0x50>)
 800165a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3b03      	subs	r3, #3
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <modbus_exception+0x50>)
 8001666:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <modbus_exception+0x50>)
 800166a:	2103      	movs	r1, #3
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f873 	bl	8001758 <modbus_send>
 8001672:	0003      	movs	r3, r0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000588 	.word	0x20000588

08001680 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	0002      	movs	r2, r0
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 800168c:	1dbb      	adds	r3, r7, #6
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	2b24      	cmp	r3, #36	@ 0x24
 8001692:	dd00      	ble.n	8001696 <handle_range+0x16>
 8001694:	e058      	b.n	8001748 <handle_range+0xc8>
 8001696:	2b22      	cmp	r3, #34	@ 0x22
 8001698:	da3f      	bge.n	800171a <handle_range+0x9a>
 800169a:	2b02      	cmp	r3, #2
 800169c:	d02f      	beq.n	80016fe <handle_range+0x7e>
 800169e:	dc53      	bgt.n	8001748 <handle_range+0xc8>
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <handle_range+0x2a>
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d00e      	beq.n	80016c6 <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 80016a8:	e04e      	b.n	8001748 <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <handle_range+0xd0>)
 80016b0:	0052      	lsls	r2, r2, #1
 80016b2:	5ad3      	ldrh	r3, [r2, r3]
 80016b4:	2bff      	cmp	r3, #255	@ 0xff
 80016b6:	d940      	bls.n	800173a <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 80016b8:	1dbb      	adds	r3, r7, #6
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <handle_range+0xd0>)
 80016be:	0052      	lsls	r2, r2, #1
 80016c0:	21ff      	movs	r1, #255	@ 0xff
 80016c2:	52d1      	strh	r1, [r2, r3]
			break;
 80016c4:	e039      	b.n	800173a <handle_range+0xba>
			if(holding_register_database[holding_register] < 2)
 80016c6:	1dbb      	adds	r3, r7, #6
 80016c8:	881a      	ldrh	r2, [r3, #0]
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <handle_range+0xd0>)
 80016cc:	0052      	lsls	r2, r2, #1
 80016ce:	5ad3      	ldrh	r3, [r2, r3]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d806      	bhi.n	80016e2 <handle_range+0x62>
				holding_register_database[holding_register] = 2;
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <handle_range+0xd0>)
 80016da:	0052      	lsls	r2, r2, #1
 80016dc:	2102      	movs	r1, #2
 80016de:	52d1      	strh	r1, [r2, r3]
			break;
 80016e0:	e02d      	b.n	800173e <handle_range+0xbe>
			else if(holding_register_database[holding_register] > 9)
 80016e2:	1dbb      	adds	r3, r7, #6
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <handle_range+0xd0>)
 80016e8:	0052      	lsls	r2, r2, #1
 80016ea:	5ad3      	ldrh	r3, [r2, r3]
 80016ec:	2b09      	cmp	r3, #9
 80016ee:	d926      	bls.n	800173e <handle_range+0xbe>
				holding_register_database[holding_register] = 9;
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	881a      	ldrh	r2, [r3, #0]
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <handle_range+0xd0>)
 80016f6:	0052      	lsls	r2, r2, #1
 80016f8:	2109      	movs	r1, #9
 80016fa:	52d1      	strh	r1, [r2, r3]
			break;
 80016fc:	e01f      	b.n	800173e <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 80016fe:	1dbb      	adds	r3, r7, #6
 8001700:	881a      	ldrh	r2, [r3, #0]
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <handle_range+0xd0>)
 8001704:	0052      	lsls	r2, r2, #1
 8001706:	5ad3      	ldrh	r3, [r2, r3]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d91a      	bls.n	8001742 <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 800170c:	1dbb      	adds	r3, r7, #6
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <handle_range+0xd0>)
 8001712:	0052      	lsls	r2, r2, #1
 8001714:	2101      	movs	r1, #1
 8001716:	52d1      	strh	r1, [r2, r3]
			break;
 8001718:	e013      	b.n	8001742 <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 800171a:	1dbb      	adds	r3, r7, #6
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <handle_range+0xd0>)
 8001720:	0052      	lsls	r2, r2, #1
 8001722:	5ad2      	ldrh	r2, [r2, r3]
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	015b      	lsls	r3, r3, #5
 8001728:	429a      	cmp	r2, r3
 800172a:	d30c      	bcc.n	8001746 <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	881a      	ldrh	r2, [r3, #0]
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <handle_range+0xd0>)
 8001732:	0052      	lsls	r2, r2, #1
 8001734:	4907      	ldr	r1, [pc, #28]	@ (8001754 <handle_range+0xd4>)
 8001736:	52d1      	strh	r1, [r2, r3]
			break;
 8001738:	e005      	b.n	8001746 <handle_range+0xc6>
			break;
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	e004      	b.n	8001748 <handle_range+0xc8>
			break;
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	e002      	b.n	8001748 <handle_range+0xc8>
			break;
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	e000      	b.n	8001748 <handle_range+0xc8>
			break;
 8001746:	46c0      	nop			@ (mov r8, r8)
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	00000fff 	.word	0x00000fff

08001758 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	000a      	movs	r2, r1
 8001762:	1cfb      	adds	r3, r7, #3
 8001764:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8001766:	250e      	movs	r5, #14
 8001768:	197c      	adds	r4, r7, r5
 800176a:	1cfb      	adds	r3, r7, #3
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <modbus_send+0xc0>)
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f8f6 	bl	8001964 <crc_16>
 8001778:	0003      	movs	r3, r0
 800177a:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 800177c:	1cfb      	adds	r3, r7, #3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	197a      	adds	r2, r7, r5
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	b2d1      	uxtb	r1, r2
 8001786:	4a24      	ldr	r2, [pc, #144]	@ (8001818 <modbus_send+0xc0>)
 8001788:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 800178a:	197b      	adds	r3, r7, r5
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29a      	uxth	r2, r3
 8001792:	1cfb      	adds	r3, r7, #3
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	b2d1      	uxtb	r1, r2
 800179a:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <modbus_send+0xc0>)
 800179c:	54d1      	strb	r1, [r2, r3]

	int8_t status = HAL_OK;
 800179e:	240d      	movs	r4, #13
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, modbus_tx_buffer, size + 2);
 80017a6:	1cfb      	adds	r3, r7, #3
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3302      	adds	r3, #2
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4919      	ldr	r1, [pc, #100]	@ (8001818 <modbus_send+0xc0>)
 80017b2:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <modbus_send+0xc4>)
 80017b4:	0018      	movs	r0, r3
 80017b6:	f004 f9c1 	bl	8005b3c <HAL_UART_Transmit_IT>
 80017ba:	0003      	movs	r3, r0
 80017bc:	001a      	movs	r2, r3
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <modbus_send+0x7c>
	{
		return status;
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	e01d      	b.n	8001810 <modbus_send+0xb8>
	}
	time = HAL_GetTick();
 80017d4:	f000 fdbe 	bl	8002354 <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <modbus_send+0xc8>)
 80017dc:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <modbus_send+0xcc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <modbus_send+0xa2>
 80017ea:	f000 fdb3 	bl	8002354 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <modbus_send+0xc8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b63      	cmp	r3, #99	@ 0x63
 80017f8:	d9f2      	bls.n	80017e0 <modbus_send+0x88>
	if(tx_int)
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <modbus_send+0xcc>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <modbus_send+0xb6>
	{
		tx_int = 0;
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <modbus_send+0xcc>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <modbus_send+0xb8>
	}
	else
	{
		return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
	}
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bdb0      	pop	{r4, r5, r7, pc}
 8001818:	20000588 	.word	0x20000588
 800181c:	20000358 	.word	0x20000358
 8001820:	20000784 	.word	0x20000784
 8001824:	20000793 	.word	0x20000793

08001828 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	if(rx_int)
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <modbus_rx+0x28>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <modbus_rx+0x18>
	{
		rx_int = 0;
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <modbus_rx+0x28>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		return 1;
 800183c:	2301      	movs	r3, #1
 800183e:	e004      	b.n	800184a <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8001840:	f7ff fcfe 	bl	8001240 <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 8001844:	4b02      	ldr	r3, [pc, #8]	@ (8001850 <modbus_rx+0x28>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000792 	.word	0x20000792

08001854 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 800185a:	490c      	ldr	r1, [pc, #48]	@ (800188c <modbus_set_rx+0x38>)
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <modbus_set_rx+0x3c>)
 800185e:	2206      	movs	r2, #6
 8001860:	0018      	movs	r0, r3
 8001862:	f005 fffd 	bl	8007860 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001866:	0003      	movs	r3, r0
 8001868:	001a      	movs	r2, r3
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <modbus_set_rx+0x40>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <modbus_set_rx+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2104      	movs	r1, #4
 800187a:	438a      	bics	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

	return status;
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b25b      	sxtb	r3, r3
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000688 	.word	0x20000688
 8001890:	20000358 	.word	0x20000358
 8001894:	200003ec 	.word	0x200003ec

08001898 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 80018a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001958 <modbus_change_baud_rate+0xc0>)
 80018a6:	885b      	ldrh	r3, [r3, #2]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	d82c      	bhi.n	8001906 <modbus_change_baud_rate+0x6e>
 80018ac:	009a      	lsls	r2, r3, #2
 80018ae:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <modbus_change_baud_rate+0xc4>)
 80018b0:	18d3      	adds	r3, r2, r3
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018b8:	2296      	movs	r2, #150	@ 0x96
 80018ba:	0152      	lsls	r2, r2, #5
 80018bc:	605a      	str	r2, [r3, #4]
			break;
 80018be:	e033      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018c2:	2296      	movs	r2, #150	@ 0x96
 80018c4:	0192      	lsls	r2, r2, #6
 80018c6:	605a      	str	r2, [r3, #4]
			break;
 80018c8:	e02e      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018cc:	2296      	movs	r2, #150	@ 0x96
 80018ce:	01d2      	lsls	r2, r2, #7
 80018d0:	605a      	str	r2, [r3, #4]
			break;
 80018d2:	e029      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018d6:	2296      	movs	r2, #150	@ 0x96
 80018d8:	0212      	lsls	r2, r2, #8
 80018da:	605a      	str	r2, [r3, #4]
			break;
 80018dc:	e024      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018e0:	22e1      	movs	r2, #225	@ 0xe1
 80018e2:	0212      	lsls	r2, r2, #8
 80018e4:	605a      	str	r2, [r3, #4]
			break;
 80018e6:	e01f      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018ea:	22e1      	movs	r2, #225	@ 0xe1
 80018ec:	0252      	lsls	r2, r2, #9
 80018ee:	605a      	str	r2, [r3, #4]
			break;
 80018f0:	e01a      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018f4:	22fa      	movs	r2, #250	@ 0xfa
 80018f6:	0252      	lsls	r2, r2, #9
 80018f8:	605a      	str	r2, [r3, #4]
			break;
 80018fa:	e015      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 80018fe:	22fa      	movs	r2, #250	@ 0xfa
 8001900:	0292      	lsls	r2, r2, #10
 8001902:	605a      	str	r2, [r3, #4]
			break;
 8001904:	e010      	b.n	8001928 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <modbus_change_baud_rate+0xc0>)
 8001908:	2203      	movs	r2, #3
 800190a:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 800190e:	2296      	movs	r2, #150	@ 0x96
 8001910:	0192      	lsls	r2, r2, #6
 8001912:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 8001916:	0018      	movs	r0, r3
 8001918:	f004 fe52 	bl	80065c0 <UART_SetConfig>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 8001924:	2306      	movs	r3, #6
 8001926:	e013      	b.n	8001950 <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <modbus_change_baud_rate+0xc8>)
 800192a:	0018      	movs	r0, r3
 800192c:	f004 fe48 	bl	80065c0 <UART_SetConfig>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <modbus_change_baud_rate+0xb2>
	{
		return status;
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	e002      	b.n	8001950 <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25b      	sxtb	r3, r3
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000000 	.word	0x20000000
 800195c:	08008da4 	.word	0x08008da4
 8001960:	20000358 	.word	0x20000358

08001964 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	000a      	movs	r2, r1
 800196e:	1cfb      	adds	r3, r7, #3
 8001970:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8001972:	230f      	movs	r3, #15
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	22ff      	movs	r2, #255	@ 0xff
 8001978:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 800197a:	230e      	movs	r3, #14
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	22ff      	movs	r2, #255	@ 0xff
 8001980:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8001982:	e019      	b.n	80019b8 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	200e      	movs	r0, #14
 800198e:	183b      	adds	r3, r7, r0
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4053      	eors	r3, r2
 8001994:	b2db      	uxtb	r3, r3
 8001996:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8001998:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <crc_16+0x84>)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	7819      	ldrb	r1, [r3, #0]
 80019a0:	183b      	adds	r3, r7, r0
 80019a2:	200f      	movs	r0, #15
 80019a4:	183a      	adds	r2, r7, r0
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	404a      	eors	r2, r1
 80019aa:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 80019ac:	183b      	adds	r3, r7, r0
 80019ae:	490f      	ldr	r1, [pc, #60]	@ (80019ec <crc_16+0x88>)
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	188a      	adds	r2, r1, r2
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
	while (size--)
 80019b8:	1cfb      	adds	r3, r7, #3
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	1cfa      	adds	r2, r7, #3
 80019be:	1e59      	subs	r1, r3, #1
 80019c0:	7011      	strb	r1, [r2, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1de      	bne.n	8001984 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80019c6:	230f      	movs	r3, #15
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	230e      	movs	r3, #14
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b21b      	sxth	r3, r3
 80019dc:	b29b      	uxth	r3, r3
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	08008ba4 	.word	0x08008ba4
 80019ec:	08008ca4 	.word	0x08008ca4

080019f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_MspInit+0x44>)
 80019f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_MspInit+0x44>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	2201      	movs	r2, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	055b      	lsls	r3, r3, #21
 8001a24:	4013      	ands	r3, r2
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b093      	sub	sp, #76	@ 0x4c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	2334      	movs	r3, #52	@ 0x34
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	0018      	movs	r0, r3
 8001a46:	2314      	movs	r3, #20
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f006 f9ee 	bl	8007e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a50:	2414      	movs	r4, #20
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	0018      	movs	r0, r3
 8001a56:	2320      	movs	r3, #32
 8001a58:	001a      	movs	r2, r3
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f006 f9e6 	bl	8007e2c <memset>
  if(hadc->Instance==ADC1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a35      	ldr	r2, [pc, #212]	@ (8001b3c <HAL_ADC_MspInit+0x104>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d163      	bne.n	8001b32 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a76:	193b      	adds	r3, r7, r4
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f003 f8d7 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8001a82:	f7ff fb1f 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a86:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <HAL_ADC_MspInit+0x108>)
 8001a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_ADC_MspInit+0x108>)
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	0349      	lsls	r1, r1, #13
 8001a90:	430a      	orrs	r2, r1
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a94:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <HAL_ADC_MspInit+0x108>)
 8001a96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	035b      	lsls	r3, r3, #13
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_ADC_MspInit+0x108>)
 8001aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa6:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <HAL_ADC_MspInit+0x108>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_ADC_MspInit+0x108>)
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 8001aba:	2134      	movs	r1, #52	@ 0x34
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <HAL_ADC_MspInit+0x10c>)
 8001ac0:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	187a      	adds	r2, r7, r1
 8001ad0:	23a0      	movs	r3, #160	@ 0xa0
 8001ad2:	05db      	lsls	r3, r3, #23
 8001ad4:	0011      	movs	r1, r2
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f001 fcf2 	bl	80034c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001ade:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <HAL_ADC_MspInit+0x114>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001af6:	2280      	movs	r2, #128	@ 0x80
 8001af8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	0052      	lsls	r2, r2, #1
 8001b00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001b04:	2280      	movs	r2, #128	@ 0x80
 8001b06:	00d2      	lsls	r2, r2, #3
 8001b08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f001 f9a1 	bl	8002e60 <HAL_DMA_Init>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001b22:	f7ff facf 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a07      	ldr	r2, [pc, #28]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001b2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_ADC_MspInit+0x110>)
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b013      	add	sp, #76	@ 0x4c
 8001b38:	bd90      	pop	{r4, r7, pc}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	40021000 	.word	0x40021000
 8001b44:	000001ff 	.word	0x000001ff
 8001b48:	20000150 	.word	0x20000150
 8001b4c:	40020008 	.word	0x40020008

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b093      	sub	sp, #76	@ 0x4c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	2334      	movs	r3, #52	@ 0x34
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	2314      	movs	r3, #20
 8001b60:	001a      	movs	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	f006 f962 	bl	8007e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b68:	2414      	movs	r4, #20
 8001b6a:	193b      	adds	r3, r7, r4
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	2320      	movs	r3, #32
 8001b70:	001a      	movs	r2, r3
 8001b72:	2100      	movs	r1, #0
 8001b74:	f006 f95a 	bl	8007e2c <memset>
  if(hi2c->Instance==I2C1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a37      	ldr	r2, [pc, #220]	@ (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d168      	bne.n	8001c54 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	0018      	movs	r0, r3
 8001b92:	f003 f84b 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b9a:	f7ff fa93 	bl	80010c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <HAL_I2C_MspInit+0x110>)
 8001ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <HAL_I2C_MspInit+0x110>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001baa:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_I2C_MspInit+0x110>)
 8001bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bb6:	2134      	movs	r1, #52	@ 0x34
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	22c0      	movs	r2, #192	@ 0xc0
 8001bbc:	00d2      	lsls	r2, r2, #3
 8001bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2212      	movs	r2, #18
 8001bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2206      	movs	r2, #6
 8001bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	187a      	adds	r2, r7, r1
 8001bda:	23a0      	movs	r3, #160	@ 0xa0
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f001 fc6d 	bl	80034c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <HAL_I2C_MspInit+0x110>)
 8001be8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bea:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <HAL_I2C_MspInit+0x110>)
 8001bec:	2180      	movs	r1, #128	@ 0x80
 8001bee:	0389      	lsls	r1, r1, #14
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <HAL_I2C_MspInit+0x110>)
 8001bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf8:	2380      	movs	r3, #128	@ 0x80
 8001bfa:	039b      	lsls	r3, r3, #14
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c04:	4a18      	ldr	r2, [pc, #96]	@ (8001c68 <HAL_I2C_MspInit+0x118>)
 8001c06:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001c08:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c0a:	220a      	movs	r2, #10
 8001c0c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c20:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f001 f910 	bl	8002e60 <HAL_DMA_Init>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 8001c44:	f7ff fa3e 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a06      	ldr	r2, [pc, #24]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c4e:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_I2C_MspInit+0x114>)
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c54:	46c0      	nop			@ (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b013      	add	sp, #76	@ 0x4c
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	20000200 	.word	0x20000200
 8001c68:	4002001c 	.word	0x4002001c

08001c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b093      	sub	sp, #76	@ 0x4c
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	2334      	movs	r3, #52	@ 0x34
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	0018      	movs	r0, r3
 8001c7a:	2314      	movs	r3, #20
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f006 f8d4 	bl	8007e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c84:	2414      	movs	r4, #20
 8001c86:	193b      	adds	r3, r7, r4
 8001c88:	0018      	movs	r0, r3
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f006 f8cc 	bl	8007e2c <memset>
  if(hspi->Instance==SPI1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a34      	ldr	r2, [pc, #208]	@ (8001d6c <HAL_SPI_MspInit+0x100>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d162      	bne.n	8001d64 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001ca4:	193b      	adds	r3, r7, r4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001caa:	193b      	adds	r3, r7, r4
 8001cac:	0018      	movs	r0, r3
 8001cae:	f002 ffbd 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	1e03      	subs	r3, r0, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001cb6:	f7ff fa05 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cba:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	0149      	lsls	r1, r1, #5
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cc8:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	015b      	lsls	r3, r3, #5
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cda:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce2:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <HAL_SPI_MspInit+0x104>)
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d06:	2134      	movs	r1, #52	@ 0x34
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2280      	movs	r2, #128	@ 0x80
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	000c      	movs	r4, r1
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	2202      	movs	r2, #2
 8001d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	193a      	adds	r2, r7, r4
 8001d2c:	23a0      	movs	r3, #160	@ 0xa0
 8001d2e:	05db      	lsls	r3, r3, #23
 8001d30:	0011      	movs	r1, r2
 8001d32:	0018      	movs	r0, r3
 8001d34:	f001 fbc4 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001d38:	0021      	movs	r1, r4
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2228      	movs	r2, #40	@ 0x28
 8001d3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	2202      	movs	r2, #2
 8001d44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <HAL_SPI_MspInit+0x108>)
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	0010      	movs	r0, r2
 8001d60:	f001 fbae 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b013      	add	sp, #76	@ 0x4c
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	40013000 	.word	0x40013000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	50000400 	.word	0x50000400

08001d78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_TIM_PWM_MspInit+0x38>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10d      	bne.n	8001da6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	0109      	lsls	r1, r1, #4
 8001d94:	430a      	orrs	r2, r1
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b004      	add	sp, #16
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	40012c00 	.word	0x40012c00
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <HAL_TIM_Base_MspInit+0x38>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10d      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001dca:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	0209      	lsls	r1, r1, #8
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_TIM_Base_MspInit+0x3c>)
 8001dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	40002000 	.word	0x40002000
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	240c      	movs	r4, #12
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	0018      	movs	r0, r3
 8001e06:	2314      	movs	r3, #20
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f006 f80e 	bl	8007e2c <memset>
  if(htim->Instance==TIM1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a15      	ldr	r2, [pc, #84]	@ (8001e6c <HAL_TIM_MspPostInit+0x74>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d123      	bne.n	8001e62 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_TIM_MspPostInit+0x78>)
 8001e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_TIM_MspPostInit+0x78>)
 8001e20:	2101      	movs	r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_TIM_MspPostInit+0x78>)
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8001e32:	193b      	adds	r3, r7, r4
 8001e34:	2280      	movs	r2, #128	@ 0x80
 8001e36:	0212      	lsls	r2, r2, #8
 8001e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	0021      	movs	r1, r4
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2202      	movs	r2, #2
 8001e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2202      	movs	r2, #2
 8001e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e54:	187a      	adds	r2, r7, r1
 8001e56:	23a0      	movs	r3, #160	@ 0xa0
 8001e58:	05db      	lsls	r3, r3, #23
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f001 fb2f 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b009      	add	sp, #36	@ 0x24
 8001e68:	bd90      	pop	{r4, r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	40012c00 	.word	0x40012c00
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b095      	sub	sp, #84	@ 0x54
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	233c      	movs	r3, #60	@ 0x3c
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	0018      	movs	r0, r3
 8001e82:	2314      	movs	r3, #20
 8001e84:	001a      	movs	r2, r3
 8001e86:	2100      	movs	r1, #0
 8001e88:	f005 ffd0 	bl	8007e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e8c:	241c      	movs	r4, #28
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	0018      	movs	r0, r3
 8001e92:	2320      	movs	r3, #32
 8001e94:	001a      	movs	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	f005 ffc8 	bl	8007e2c <memset>
  if(huart->Instance==USART1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5f      	ldr	r2, [pc, #380]	@ (8002020 <HAL_UART_MspInit+0x1ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d000      	beq.n	8001ea8 <HAL_UART_MspInit+0x34>
 8001ea6:	e0b6      	b.n	8002016 <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	193b      	adds	r3, r7, r4
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f002 feb8 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ec0:	f7ff f900 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec4:	4b57      	ldr	r3, [pc, #348]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ec8:	4b56      	ldr	r3, [pc, #344]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001eca:	2180      	movs	r1, #128	@ 0x80
 8001ecc:	01c9      	lsls	r1, r1, #7
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ed2:	4b54      	ldr	r3, [pc, #336]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	01db      	lsls	r3, r3, #7
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	4b50      	ldr	r3, [pc, #320]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eec:	4b4d      	ldr	r3, [pc, #308]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efc:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001efe:	2102      	movs	r1, #2
 8001f00:	430a      	orrs	r2, r1
 8001f02:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f04:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b44      	ldr	r3, [pc, #272]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f14:	4b43      	ldr	r3, [pc, #268]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f1c:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <HAL_UART_MspInit+0x1b0>)
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f28:	213c      	movs	r1, #60	@ 0x3c
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	01d2      	lsls	r2, r2, #7
 8001f30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	000c      	movs	r4, r1
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	2202      	movs	r2, #2
 8001f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001f46:	193b      	adds	r3, r7, r4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	4a36      	ldr	r2, [pc, #216]	@ (8002028 <HAL_UART_MspInit+0x1b4>)
 8001f50:	0019      	movs	r1, r3
 8001f52:	0010      	movs	r0, r2
 8001f54:	f001 fab4 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f58:	193b      	adds	r3, r7, r4
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	193b      	adds	r3, r7, r4
 8001f60:	2202      	movs	r2, #2
 8001f62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	193b      	adds	r3, r7, r4
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	193b      	adds	r3, r7, r4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001f70:	193b      	adds	r3, r7, r4
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	193b      	adds	r3, r7, r4
 8001f78:	4a2c      	ldr	r2, [pc, #176]	@ (800202c <HAL_UART_MspInit+0x1b8>)
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	f001 fa9f 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f82:	0021      	movs	r1, r4
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	0152      	lsls	r2, r2, #5
 8001f8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2202      	movs	r2, #2
 8001f90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	187a      	adds	r2, r7, r1
 8001fa6:	23a0      	movs	r3, #160	@ 0xa0
 8001fa8:	05db      	lsls	r3, r3, #23
 8001faa:	0011      	movs	r1, r2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f001 fa87 	bl	80034c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <HAL_UART_MspInit+0x1c0>)
 8001fb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fba:	2232      	movs	r2, #50	@ 0x32
 8001fbc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 ff38 	bl	8002e60 <HAL_DMA_Init>
 8001ff0:	1e03      	subs	r3, r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001ff4:	f7ff f866 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2180      	movs	r1, #128	@ 0x80
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8001ffe:	505a      	str	r2, [r3, r1]
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_UART_MspInit+0x1bc>)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	201b      	movs	r0, #27
 800200c:	f000 fef6 	bl	8002dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002010:	201b      	movs	r0, #27
 8002012:	f000 ff08 	bl	8002e26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b015      	add	sp, #84	@ 0x54
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	40013800 	.word	0x40013800
 8002024:	40021000 	.word	0x40021000
 8002028:	50000800 	.word	0x50000800
 800202c:	50000400 	.word	0x50000400
 8002030:	200003ec 	.word	0x200003ec
 8002034:	40020044 	.word	0x40020044

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	e7fd      	b.n	800203c <NMI_Handler+0x4>

08002040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002044:	46c0      	nop			@ (mov r8, r8)
 8002046:	e7fd      	b.n	8002044 <HardFault_Handler+0x4>

08002048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002060:	f000 f966 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <DMA1_Channel1_IRQHandler+0x14>)
 8002072:	0018      	movs	r0, r3
 8002074:	f001 f8e2 	bl	800323c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	20000150 	.word	0x20000150

08002084 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <DMA1_Channel2_3_IRQHandler+0x14>)
 800208a:	0018      	movs	r0, r3
 800208c:	f001 f8d6 	bl	800323c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	20000200 	.word	0x20000200

0800209c <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x14>)
 80020a2:	0018      	movs	r0, r3
 80020a4:	f001 f8ca 	bl	800323c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 80020a8:	46c0      	nop			@ (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	200003ec 	.word	0x200003ec

080020b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <USART1_IRQHandler+0x14>)
 80020ba:	0018      	movs	r0, r3
 80020bc:	f003 ff1a 	bl	8005ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020c0:	46c0      	nop			@ (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	20000358 	.word	0x20000358

080020cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00a      	b.n	80020f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020de:	e000      	b.n	80020e2 <_read+0x16>
 80020e0:	bf00      	nop
 80020e2:	0001      	movs	r1, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf0      	blt.n	80020de <_read+0x12>
  }

  return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b006      	add	sp, #24
 8002104:	bd80      	pop	{r7, pc}

08002106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e009      	b.n	800212c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	0018      	movs	r0, r3
 8002122:	e000      	b.n	8002126 <_write+0x20>
 8002124:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf1      	blt.n	8002118 <_write+0x12>
  }
  return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b006      	add	sp, #24
 800213c:	bd80      	pop	{r7, pc}

0800213e <_close>:

int _close(int file)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002146:	2301      	movs	r3, #1
 8002148:	425b      	negs	r3, r3
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b002      	add	sp, #8
 8002150:	bd80      	pop	{r7, pc}

08002152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2280      	movs	r2, #128	@ 0x80
 8002160:	0192      	lsls	r2, r2, #6
 8002162:	605a      	str	r2, [r3, #4]
  return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}

0800216e <_isatty>:

int _isatty(int file)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002176:	2301      	movs	r3, #1
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f005 fe86 	bl	8007ed8 <__errno>
 80021cc:	0003      	movs	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	425b      	negs	r3, r3
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	18d2      	adds	r2, r2, r3
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <_sbrk+0x64>)
 80021e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b006      	add	sp, #24
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20006000 	.word	0x20006000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	20000794 	.word	0x20000794
 8002200:	200008e8 	.word	0x200008e8

08002204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <SystemInit+0x14>)
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	0512      	lsls	r2, r2, #20
 800220e:	609a      	str	r2, [r3, #8]
#endif
}
 8002210:	46c0      	nop			@ (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800221c:	480d      	ldr	r0, [pc, #52]	@ (8002254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800221e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002220:	f7ff fff0 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002224:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002226:	e003      	b.n	8002230 <LoopCopyDataInit>

08002228 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800222a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800222c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800222e:	3104      	adds	r1, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002230:	480a      	ldr	r0, [pc, #40]	@ (800225c <LoopForever+0xa>)
  ldr r3, =_edata
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <LoopForever+0xe>)
  adds r2, r0, r1
 8002234:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002236:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002238:	d3f6      	bcc.n	8002228 <CopyDataInit>
  ldr r2, =_sbss
 800223a:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <LoopForever+0x12>)
  b LoopFillZerobss
 800223c:	e002      	b.n	8002244 <LoopFillZerobss>

0800223e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002240:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002242:	3204      	adds	r2, #4

08002244 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <LoopForever+0x16>)
  cmp r2, r3
 8002246:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002248:	d3f9      	bcc.n	800223e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800224a:	f005 fe4b 	bl	8007ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800224e:	f7fe fb11 	bl	8000874 <main>

08002252 <LoopForever>:

LoopForever:
    b LoopForever
 8002252:	e7fe      	b.n	8002252 <LoopForever>
  ldr   r0, =_estack
 8002254:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8002258:	08008ee4 	.word	0x08008ee4
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002260:	200000cc 	.word	0x200000cc
  ldr r2, =_sbss
 8002264:	200000cc 	.word	0x200000cc
  ldr r3, = _ebss
 8002268:	200008e8 	.word	0x200008e8

0800226c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC1_IRQHandler>

0800226e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227a:	2003      	movs	r0, #3
 800227c:	f000 f80e 	bl	800229c <HAL_InitTick>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d003      	beq.n	800228c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e001      	b.n	8002290 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800228c:	f7ff fbb0 	bl	80019f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	781b      	ldrb	r3, [r3, #0]
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022a4:	230f      	movs	r3, #15
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_InitTick+0x88>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02b      	beq.n	800230c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80022b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <HAL_InitTick+0x8c>)
 80022b6:	681c      	ldr	r4, [r3, #0]
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <HAL_InitTick+0x88>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	0019      	movs	r1, r3
 80022be:	23fa      	movs	r3, #250	@ 0xfa
 80022c0:	0098      	lsls	r0, r3, #2
 80022c2:	f7fd ff2b 	bl	800011c <__udivsi3>
 80022c6:	0003      	movs	r3, r0
 80022c8:	0019      	movs	r1, r3
 80022ca:	0020      	movs	r0, r4
 80022cc:	f7fd ff26 	bl	800011c <__udivsi3>
 80022d0:	0003      	movs	r3, r0
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 fdb7 	bl	8002e46 <HAL_SYSTICK_Config>
 80022d8:	1e03      	subs	r3, r0, #0
 80022da:	d112      	bne.n	8002302 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d80a      	bhi.n	80022f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	2301      	movs	r3, #1
 80022e6:	425b      	negs	r3, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 fd86 	bl	8002dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_InitTick+0x90>)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e00d      	b.n	8002314 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80022f8:	230f      	movs	r3, #15
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e008      	b.n	8002314 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002302:	230f      	movs	r3, #15
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e003      	b.n	8002314 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002314:	230f      	movs	r3, #15
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b005      	add	sp, #20
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	2000006c 	.word	0x2000006c
 8002328:	20000064 	.word	0x20000064
 800232c:	20000068 	.word	0x20000068

08002330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_IncTick+0x1c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	001a      	movs	r2, r3
 800233a:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <HAL_IncTick+0x20>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	18d2      	adds	r2, r2, r3
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <HAL_IncTick+0x20>)
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	46c0      	nop			@ (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	2000006c 	.word	0x2000006c
 8002350:	20000798 	.word	0x20000798

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b02      	ldr	r3, [pc, #8]	@ (8002364 <HAL_GetTick+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	20000798 	.word	0x20000798

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fff0 	bl	8002354 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3301      	adds	r3, #1
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	001a      	movs	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	189b      	adds	r3, r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	f7ff ffe0 	bl	8002354 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	2000006c 	.word	0x2000006c

080023b0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a05      	ldr	r2, [pc, #20]	@ (80023d4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80023c0:	401a      	ands	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	ff3fffff 	.word	0xff3fffff

080023d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	23c0      	movs	r3, #192	@ 0xc0
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	4013      	ands	r3, r2
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	2104      	movs	r1, #4
 8002406:	400a      	ands	r2, r1
 8002408:	2107      	movs	r1, #7
 800240a:	4091      	lsls	r1, r2
 800240c:	000a      	movs	r2, r1
 800240e:	43d2      	mvns	r2, r2
 8002410:	401a      	ands	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2104      	movs	r1, #4
 8002416:	400b      	ands	r3, r1
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4099      	lsls	r1, r3
 800241c:	000b      	movs	r3, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}

0800242c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	2104      	movs	r1, #4
 800243e:	400a      	ands	r2, r1
 8002440:	2107      	movs	r1, #7
 8002442:	4091      	lsls	r1, r2
 8002444:	000a      	movs	r2, r1
 8002446:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2104      	movs	r1, #4
 800244c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800244e:	40da      	lsrs	r2, r3
 8002450:	0013      	movs	r3, r2
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}

0800245a <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	211f      	movs	r1, #31
 800246e:	400a      	ands	r2, r1
 8002470:	210f      	movs	r1, #15
 8002472:	4091      	lsls	r1, r2
 8002474:	000a      	movs	r2, r1
 8002476:	43d2      	mvns	r2, r2
 8002478:	401a      	ands	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	210f      	movs	r1, #15
 8002480:	4019      	ands	r1, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	201f      	movs	r0, #31
 8002486:	4003      	ands	r3, r0
 8002488:	4099      	lsls	r1, r3
 800248a:	000b      	movs	r3, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}

0800249a <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	025b      	lsls	r3, r3, #9
 80024ac:	0a5b      	lsrs	r3, r3, #9
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024b4:	46c0      	nop			@ (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	0252      	lsls	r2, r2, #9
 80024ce:	0a52      	lsrs	r2, r2, #9
 80024d0:	43d2      	mvns	r2, r2
 80024d2:	401a      	ands	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024d8:	46c0      	nop			@ (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	0212      	lsls	r2, r2, #8
 80024f4:	43d2      	mvns	r2, r2
 80024f6:	401a      	ands	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	400b      	ands	r3, r1
 8002500:	4904      	ldr	r1, [pc, #16]	@ (8002514 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002502:	400b      	ands	r3, r1
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	7fffff00 	.word	0x7fffff00

08002518 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a05      	ldr	r2, [pc, #20]	@ (800253c <LL_ADC_EnableInternalRegulator+0x24>)
 8002526:	4013      	ands	r3, r2
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	0552      	lsls	r2, r2, #21
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	6fffffe8 	.word	0x6fffffe8

08002540 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	055b      	lsls	r3, r3, #21
 8002550:	401a      	ands	r2, r3
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	055b      	lsls	r3, r3, #21
 8002556:	429a      	cmp	r2, r3
 8002558:	d101      	bne.n	800255e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800255e:	2300      	movs	r3, #0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <LL_ADC_IsEnabled+0x18>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <LL_ADC_IsEnabled+0x1a>
 8002580:	2300      	movs	r3, #0
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b002      	add	sp, #8
 8002588:	bd80      	pop	{r7, pc}

0800258a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	2b04      	cmp	r3, #4
 800259c:	d101      	bne.n	80025a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b4:	231f      	movs	r3, #31
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e17e      	b.n	80028d0 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff fa2b 	bl	8001a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2254      	movs	r2, #84	@ 0x54
 80025ec:	2100      	movs	r1, #0
 80025ee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff ffa3 	bl	8002540 <LL_ADC_IsInternalRegulatorEnabled>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d114      	bne.n	8002628 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0018      	movs	r0, r3
 8002604:	f7ff ff88 	bl	8002518 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002608:	4bb3      	ldr	r3, [pc, #716]	@ (80028d8 <HAL_ADC_Init+0x32c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	49b3      	ldr	r1, [pc, #716]	@ (80028dc <HAL_ADC_Init+0x330>)
 800260e:	0018      	movs	r0, r3
 8002610:	f7fd fd84 	bl	800011c <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800261a:	e002      	b.n	8002622 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3b01      	subs	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f9      	bne.n	800261c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff ff87 	bl	8002540 <LL_ADC_IsInternalRegulatorEnabled>
 8002632:	1e03      	subs	r3, r0, #0
 8002634:	d10f      	bne.n	8002656 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	2210      	movs	r2, #16
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2201      	movs	r2, #1
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800264e:	231f      	movs	r3, #31
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff ff95 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 8002660:	0003      	movs	r3, r0
 8002662:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	2210      	movs	r2, #16
 800266a:	4013      	ands	r3, r2
 800266c:	d000      	beq.n	8002670 <HAL_ADC_Init+0xc4>
 800266e:	e122      	b.n	80028b6 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d000      	beq.n	8002678 <HAL_ADC_Init+0xcc>
 8002676:	e11e      	b.n	80028b6 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	4a98      	ldr	r2, [pc, #608]	@ (80028e0 <HAL_ADC_Init+0x334>)
 800267e:	4013      	ands	r3, r2
 8002680:	2202      	movs	r2, #2
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff ff6b 	bl	8002568 <LL_ADC_IsEnabled>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d000      	beq.n	8002698 <HAL_ADC_Init+0xec>
 8002696:	e0ad      	b.n	80027f4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e1b      	ldrb	r3, [r3, #24]
 80026a0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026a2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7e5b      	ldrb	r3, [r3, #25]
 80026a8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80026aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7e9b      	ldrb	r3, [r3, #26]
 80026b0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026b2:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_ADC_Init+0x116>
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	015b      	lsls	r3, r3, #5
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_Init+0x118>
 80026c2:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026c4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026ca:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	da04      	bge.n	80026de <HAL_ADC_Init+0x132>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	e001      	b.n	80026e2 <HAL_ADC_Init+0x136>
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80026e2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	212c      	movs	r1, #44	@ 0x2c
 80026e8:	5c5b      	ldrb	r3, [r3, r1]
 80026ea:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026ec:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	5c9b      	ldrb	r3, [r3, r2]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d115      	bne.n	800272a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	7e9b      	ldrb	r3, [r3, #26]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d105      	bne.n	8002712 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	0252      	lsls	r2, r2, #9
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	e00b      	b.n	800272a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	2220      	movs	r2, #32
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	2201      	movs	r2, #1
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002736:	23e0      	movs	r3, #224	@ 0xe0
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002740:	4313      	orrs	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4a65      	ldr	r2, [pc, #404]	@ (80028e4 <HAL_ADC_Init+0x338>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	430a      	orrs	r2, r1
 800275c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0f9b      	lsrs	r3, r3, #30
 8002764:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800276a:	4313      	orrs	r3, r2
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223c      	movs	r2, #60	@ 0x3c
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d111      	bne.n	80027a0 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0f9b      	lsrs	r3, r3, #30
 8002782:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002788:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800278e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002794:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	2201      	movs	r2, #1
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	4a50      	ldr	r2, [pc, #320]	@ (80028e8 <HAL_ADC_Init+0x33c>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	23c0      	movs	r3, #192	@ 0xc0
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	429a      	cmp	r2, r3
 80027c0:	d018      	beq.n	80027f4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d012      	beq.n	80027f4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d00c      	beq.n	80027f4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80027da:	4b44      	ldr	r3, [pc, #272]	@ (80028ec <HAL_ADC_Init+0x340>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a44      	ldr	r2, [pc, #272]	@ (80028f0 <HAL_ADC_Init+0x344>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	23f0      	movs	r3, #240	@ 0xf0
 80027ea:	039b      	lsls	r3, r3, #14
 80027ec:	401a      	ands	r2, r3
 80027ee:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <HAL_ADC_Init+0x340>)
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	001a      	movs	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	f7ff fdf7 	bl	80023f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	4939      	ldr	r1, [pc, #228]	@ (80028f4 <HAL_ADC_Init+0x348>)
 800280e:	001a      	movs	r2, r3
 8002810:	f7ff fdef 	bl	80023f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2110      	movs	r1, #16
 8002828:	4249      	negs	r1, r1
 800282a:	430a      	orrs	r2, r1
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
 800282e:	e018      	b.n	8002862 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	039b      	lsls	r3, r3, #14
 8002838:	429a      	cmp	r2, r3
 800283a:	d112      	bne.n	8002862 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	3b01      	subs	r3, #1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	221c      	movs	r2, #28
 800284c:	4013      	ands	r3, r2
 800284e:	2210      	movs	r2, #16
 8002850:	4252      	negs	r2, r2
 8002852:	409a      	lsls	r2, r3
 8002854:	0011      	movs	r1, r2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2100      	movs	r1, #0
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff fddf 	bl	800242c <LL_ADC_GetSamplingTimeCommonChannels>
 800286e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002874:	429a      	cmp	r2, r3
 8002876:	d10b      	bne.n	8002890 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002882:	2203      	movs	r2, #3
 8002884:	4393      	bics	r3, r2
 8002886:	2201      	movs	r2, #1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800288e:	e01c      	b.n	80028ca <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	2212      	movs	r2, #18
 8002896:	4393      	bics	r3, r2
 8002898:	2210      	movs	r2, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	2201      	movs	r2, #1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80028ac:	231f      	movs	r3, #31
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028b4:	e009      	b.n	80028ca <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	2210      	movs	r2, #16
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028c2:	231f      	movs	r3, #31
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ca:	231f      	movs	r3, #31
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	781b      	ldrb	r3, [r3, #0]
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b008      	add	sp, #32
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000064 	.word	0x20000064
 80028dc:	00030d40 	.word	0x00030d40
 80028e0:	fffffefd 	.word	0xfffffefd
 80028e4:	ffde0201 	.word	0xffde0201
 80028e8:	1ffffc02 	.word	0x1ffffc02
 80028ec:	40012708 	.word	0x40012708
 80028f0:	ffc3ffff 	.word	0xffc3ffff
 80028f4:	7fffff04 	.word	0x7fffff04

080028f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002902:	2317      	movs	r3, #23
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2254      	movs	r2, #84	@ 0x54
 8002912:	5c9b      	ldrb	r3, [r3, r2]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x24>
 8002918:	2302      	movs	r3, #2
 800291a:	e1be      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x3a2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2254      	movs	r2, #84	@ 0x54
 8002920:	2101      	movs	r1, #1
 8002922:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff fe2e 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d000      	beq.n	8002934 <HAL_ADC_ConfigChannel+0x3c>
 8002932:	e1a1      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d100      	bne.n	800293e <HAL_ADC_ConfigChannel+0x46>
 800293c:	e152      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	2380      	movs	r3, #128	@ 0x80
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	429a      	cmp	r2, r3
 8002948:	d004      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800294e:	4ac2      	ldr	r2, [pc, #776]	@ (8002c58 <HAL_ADC_ConfigChannel+0x360>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d108      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0019      	movs	r1, r3
 800295e:	0010      	movs	r0, r2
 8002960:	f7ff fd9b 	bl	800249a <LL_ADC_REG_SetSequencerChAdd>
 8002964:	e0ed      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	211f      	movs	r1, #31
 8002970:	400b      	ands	r3, r1
 8002972:	210f      	movs	r1, #15
 8002974:	4099      	lsls	r1, r3
 8002976:	000b      	movs	r3, r1
 8002978:	43db      	mvns	r3, r3
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	025b      	lsls	r3, r3, #9
 8002984:	0a5b      	lsrs	r3, r3, #9
 8002986:	d105      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x9c>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	221f      	movs	r2, #31
 8002990:	4013      	ands	r3, r2
 8002992:	e0bc      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d000      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0xa8>
 800299e:	e0b5      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x214>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d000      	beq.n	80029ac <HAL_ADC_ConfigChannel+0xb4>
 80029aa:	e0ad      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x210>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2204      	movs	r2, #4
 80029b2:	4013      	ands	r3, r2
 80029b4:	d000      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0xc0>
 80029b6:	e0a5      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x20c>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2208      	movs	r2, #8
 80029be:	4013      	ands	r3, r2
 80029c0:	d000      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0xcc>
 80029c2:	e09d      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x208>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d000      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0xd8>
 80029ce:	e095      	b.n	8002afc <HAL_ADC_ConfigChannel+0x204>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2220      	movs	r2, #32
 80029d6:	4013      	ands	r3, r2
 80029d8:	d000      	beq.n	80029dc <HAL_ADC_ConfigChannel+0xe4>
 80029da:	e08d      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x200>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2240      	movs	r2, #64	@ 0x40
 80029e2:	4013      	ands	r3, r2
 80029e4:	d000      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0xf0>
 80029e6:	e085      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x1fc>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	4013      	ands	r3, r2
 80029f0:	d000      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0xfc>
 80029f2:	e07d      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x1f8>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d000      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0x10a>
 8002a00:	e074      	b.n	8002aec <HAL_ADC_ConfigChannel+0x1f4>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d000      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0x118>
 8002a0e:	e06b      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x1f0>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d000      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x126>
 8002a1c:	e062      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x1ec>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	4013      	ands	r3, r2
 8002a28:	d000      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x134>
 8002a2a:	e059      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x1e8>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	015b      	lsls	r3, r3, #5
 8002a34:	4013      	ands	r3, r2
 8002a36:	d151      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x1e4>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	019b      	lsls	r3, r3, #6
 8002a40:	4013      	ands	r3, r2
 8002a42:	d149      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x1e0>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d141      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1dc>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d139      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1d8>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	025b      	lsls	r3, r3, #9
 8002a64:	4013      	ands	r3, r2
 8002a66:	d131      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1d4>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	4013      	ands	r3, r2
 8002a72:	d129      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1d0>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	02db      	lsls	r3, r3, #11
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d121      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1cc>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	031b      	lsls	r3, r3, #12
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d119      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1c8>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	035b      	lsls	r3, r3, #13
 8002a94:	4013      	ands	r3, r2
 8002a96:	d111      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1c4>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	039b      	lsls	r3, r3, #14
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x1c0>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	03db      	lsls	r3, r3, #15
 8002aac:	4013      	ands	r3, r2
 8002aae:	d001      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x1bc>
 8002ab0:	2316      	movs	r3, #22
 8002ab2:	e02c      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e02a      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ab8:	2315      	movs	r3, #21
 8002aba:	e028      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002abc:	2314      	movs	r3, #20
 8002abe:	e026      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ac0:	2313      	movs	r3, #19
 8002ac2:	e024      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ac4:	2312      	movs	r3, #18
 8002ac6:	e022      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ac8:	2311      	movs	r3, #17
 8002aca:	e020      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002acc:	2310      	movs	r3, #16
 8002ace:	e01e      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	e01c      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ad4:	230e      	movs	r3, #14
 8002ad6:	e01a      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ad8:	230d      	movs	r3, #13
 8002ada:	e018      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002adc:	230c      	movs	r3, #12
 8002ade:	e016      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ae0:	230b      	movs	r3, #11
 8002ae2:	e014      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	e012      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002ae8:	2309      	movs	r3, #9
 8002aea:	e010      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002aec:	2308      	movs	r3, #8
 8002aee:	e00e      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002af0:	2307      	movs	r3, #7
 8002af2:	e00c      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002af4:	2306      	movs	r3, #6
 8002af6:	e00a      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002af8:	2305      	movs	r3, #5
 8002afa:	e008      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002afc:	2304      	movs	r3, #4
 8002afe:	e006      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002b00:	2303      	movs	r3, #3
 8002b02:	e004      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e002      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x216>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	6852      	ldr	r2, [r2, #4]
 8002b12:	201f      	movs	r0, #31
 8002b14:	4002      	ands	r2, r0
 8002b16:	4093      	lsls	r3, r2
 8002b18:	000a      	movs	r2, r1
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d808      	bhi.n	8002b42 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	f7ff fc8c 	bl	800245a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	f7ff fcc6 	bl	80024e0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db00      	blt.n	8002b5e <HAL_ADC_ConfigChannel+0x266>
 8002b5c:	e096      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c5c <HAL_ADC_ConfigChannel+0x364>)
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fc39 	bl	80023d8 <LL_ADC_GetCommonPathInternalCh>
 8002b66:	0003      	movs	r3, r0
 8002b68:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c60 <HAL_ADC_ConfigChannel+0x368>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d123      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b7c:	d11e      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2280      	movs	r2, #128	@ 0x80
 8002b82:	0412      	lsls	r2, r2, #16
 8002b84:	4313      	orrs	r3, r2
 8002b86:	4a35      	ldr	r2, [pc, #212]	@ (8002c5c <HAL_ADC_ConfigChannel+0x364>)
 8002b88:	0019      	movs	r1, r3
 8002b8a:	0010      	movs	r0, r2
 8002b8c:	f7ff fc10 	bl	80023b0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002b90:	4b34      	ldr	r3, [pc, #208]	@ (8002c64 <HAL_ADC_ConfigChannel+0x36c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4934      	ldr	r1, [pc, #208]	@ (8002c68 <HAL_ADC_ConfigChannel+0x370>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fd fac0 	bl	800011c <__udivsi3>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bac:	e002      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bba:	e067      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c6c <HAL_ADC_ConfigChannel+0x374>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d162      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	03db      	lsls	r3, r3, #15
 8002bcc:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002bce:	d15d      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	03d2      	lsls	r2, r2, #15
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	4a20      	ldr	r2, [pc, #128]	@ (8002c5c <HAL_ADC_ConfigChannel+0x364>)
 8002bda:	0019      	movs	r1, r3
 8002bdc:	0010      	movs	r0, r2
 8002bde:	f7ff fbe7 	bl	80023b0 <LL_ADC_SetCommonPathInternalCh>
 8002be2:	e053      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bf4:	4a18      	ldr	r2, [pc, #96]	@ (8002c58 <HAL_ADC_ConfigChannel+0x360>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d107      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f7ff fc59 	bl	80024bc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da3c      	bge.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_ADC_ConfigChannel+0x364>)
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff fbdf 	bl	80023d8 <LL_ADC_GetCommonPathInternalCh>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a0f      	ldr	r2, [pc, #60]	@ (8002c60 <HAL_ADC_ConfigChannel+0x368>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d108      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4a11      	ldr	r2, [pc, #68]	@ (8002c70 <HAL_ADC_ConfigChannel+0x378>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <HAL_ADC_ConfigChannel+0x364>)
 8002c30:	0019      	movs	r1, r3
 8002c32:	0010      	movs	r0, r2
 8002c34:	f7ff fbbc 	bl	80023b0 <LL_ADC_SetCommonPathInternalCh>
 8002c38:	e028      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c6c <HAL_ADC_ConfigChannel+0x374>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d123      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4a0b      	ldr	r2, [pc, #44]	@ (8002c74 <HAL_ADC_ConfigChannel+0x37c>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_ADC_ConfigChannel+0x364>)
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f7ff fbae 	bl	80023b0 <LL_ADC_SetCommonPathInternalCh>
 8002c54:	e01a      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x394>
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	80000004 	.word	0x80000004
 8002c5c:	40012708 	.word	0x40012708
 8002c60:	a4000200 	.word	0xa4000200
 8002c64:	20000064 	.word	0x20000064
 8002c68:	00030d40 	.word	0x00030d40
 8002c6c:	a8000400 	.word	0xa8000400
 8002c70:	ff7fffff 	.word	0xff7fffff
 8002c74:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c84:	2317      	movs	r3, #23
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2254      	movs	r2, #84	@ 0x54
 8002c90:	2100      	movs	r1, #0
 8002c92:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002c94:	2317      	movs	r3, #23
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			@ (mov r8, r8)

08002ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	0002      	movs	r2, r0
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cb6:	d809      	bhi.n	8002ccc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb8:	1dfb      	adds	r3, r7, #7
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	231f      	movs	r3, #31
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	4b04      	ldr	r3, [pc, #16]	@ (8002cd4 <__NVIC_EnableIRQ+0x30>)
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4091      	lsls	r1, r2
 8002cc8:	000a      	movs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	0002      	movs	r2, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cec:	d828      	bhi.n	8002d40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cee:	4a2f      	ldr	r2, [pc, #188]	@ (8002dac <__NVIC_SetPriority+0xd4>)
 8002cf0:	1dfb      	adds	r3, r7, #7
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	33c0      	adds	r3, #192	@ 0xc0
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	589b      	ldr	r3, [r3, r2]
 8002cfe:	1dfa      	adds	r2, r7, #7
 8002d00:	7812      	ldrb	r2, [r2, #0]
 8002d02:	0011      	movs	r1, r2
 8002d04:	2203      	movs	r2, #3
 8002d06:	400a      	ands	r2, r1
 8002d08:	00d2      	lsls	r2, r2, #3
 8002d0a:	21ff      	movs	r1, #255	@ 0xff
 8002d0c:	4091      	lsls	r1, r2
 8002d0e:	000a      	movs	r2, r1
 8002d10:	43d2      	mvns	r2, r2
 8002d12:	401a      	ands	r2, r3
 8002d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	22ff      	movs	r2, #255	@ 0xff
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0018      	movs	r0, r3
 8002d24:	2303      	movs	r3, #3
 8002d26:	4003      	ands	r3, r0
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d2c:	481f      	ldr	r0, [pc, #124]	@ (8002dac <__NVIC_SetPriority+0xd4>)
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	430a      	orrs	r2, r1
 8002d38:	33c0      	adds	r3, #192	@ 0xc0
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d3e:	e031      	b.n	8002da4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d40:	4a1b      	ldr	r2, [pc, #108]	@ (8002db0 <__NVIC_SetPriority+0xd8>)
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	0019      	movs	r1, r3
 8002d48:	230f      	movs	r3, #15
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	3b08      	subs	r3, #8
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3306      	adds	r3, #6
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	3304      	adds	r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1dfa      	adds	r2, r7, #7
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	0011      	movs	r1, r2
 8002d60:	2203      	movs	r2, #3
 8002d62:	400a      	ands	r2, r1
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	21ff      	movs	r1, #255	@ 0xff
 8002d68:	4091      	lsls	r1, r2
 8002d6a:	000a      	movs	r2, r1
 8002d6c:	43d2      	mvns	r2, r2
 8002d6e:	401a      	ands	r2, r3
 8002d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	22ff      	movs	r2, #255	@ 0xff
 8002d78:	401a      	ands	r2, r3
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	2303      	movs	r3, #3
 8002d82:	4003      	ands	r3, r0
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d88:	4809      	ldr	r0, [pc, #36]	@ (8002db0 <__NVIC_SetPriority+0xd8>)
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	001c      	movs	r4, r3
 8002d90:	230f      	movs	r3, #15
 8002d92:	4023      	ands	r3, r4
 8002d94:	3b08      	subs	r3, #8
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	3306      	adds	r3, #6
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	18c3      	adds	r3, r0, r3
 8002da0:	3304      	adds	r3, #4
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b003      	add	sp, #12
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	045b      	lsls	r3, r3, #17
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d301      	bcc.n	8002dcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e010      	b.n	8002dee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <SysTick_Config+0x44>)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	425b      	negs	r3, r3
 8002dd8:	2103      	movs	r1, #3
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7ff ff7c 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <SysTick_Config+0x44>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <SysTick_Config+0x44>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	210f      	movs	r1, #15
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	1c02      	adds	r2, r0, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff ff5d 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b004      	add	sp, #16
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff ff33 	bl	8002ca4 <__NVIC_EnableIRQ>
}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b002      	add	sp, #8
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff ffaf 	bl	8002db4 <SysTick_Config>
 8002e56:	0003      	movs	r3, r0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e077      	b.n	8002f62 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3d      	ldr	r2, [pc, #244]	@ (8002f6c <HAL_DMA_Init+0x10c>)
 8002e78:	4694      	mov	ip, r2
 8002e7a:	4463      	add	r3, ip
 8002e7c:	2114      	movs	r1, #20
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7fd f94c 	bl	800011c <__udivsi3>
 8002e84:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002e86:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2225      	movs	r2, #37	@ 0x25
 8002e90:	2102      	movs	r1, #2
 8002e92:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4934      	ldr	r1, [pc, #208]	@ (8002f70 <HAL_DMA_Init+0x110>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 fa9f 	bl	8003420 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	01db      	lsls	r3, r3, #7
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d102      	bne.n	8002ef4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	21ff      	movs	r1, #255	@ 0xff
 8002efe:	400a      	ands	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f0a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <HAL_DMA_Init+0xd8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d80d      	bhi.n	8002f38 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 faaa 	bl	8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e008      	b.n	8002f4a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2225      	movs	r2, #37	@ 0x25
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b002      	add	sp, #8
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	bffdfff8 	.word	0xbffdfff8
 8002f70:	ffff800f 	.word	0xffff800f

08002f74 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2317      	movs	r3, #23
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2224      	movs	r2, #36	@ 0x24
 8002f8e:	5c9b      	ldrb	r3, [r3, r2]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_DMA_Start_IT+0x24>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e070      	b.n	800307a <HAL_DMA_Start_IT+0x106>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2224      	movs	r2, #36	@ 0x24
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2225      	movs	r2, #37	@ 0x25
 8002fa4:	5c9b      	ldrb	r3, [r3, r2]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d157      	bne.n	800305c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2225      	movs	r2, #37	@ 0x25
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f9e5 	bl	80033a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	210e      	movs	r1, #14
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e00f      	b.n	8003010 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	210a      	movs	r1, #10
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2380      	movs	r3, #128	@ 0x80
 8003018:	025b      	lsls	r3, r3, #9
 800301a:	4013      	ands	r3, r2
 800301c:	d008      	beq.n	8003030 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	2180      	movs	r1, #128	@ 0x80
 800302a:	0049      	lsls	r1, r1, #1
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003042:	2180      	movs	r1, #128	@ 0x80
 8003044:	0049      	lsls	r1, r1, #1
 8003046:	430a      	orrs	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003064:	2317      	movs	r3, #23
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2202      	movs	r2, #2
 800306a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2224      	movs	r2, #36	@ 0x24
 8003070:	2100      	movs	r1, #0
 8003072:	5499      	strb	r1, [r3, r2]

  return status;
 8003074:	2317      	movs	r3, #23
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	781b      	ldrb	r3, [r3, #0]
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b006      	add	sp, #24
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e050      	b.n	8003138 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2225      	movs	r2, #37	@ 0x25
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d008      	beq.n	80030b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e041      	b.n	8003138 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	210e      	movs	r1, #14
 80030c0:	438a      	bics	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	491c      	ldr	r1, [pc, #112]	@ (8003140 <HAL_DMA_Abort+0xbc>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80030e4:	4b17      	ldr	r3, [pc, #92]	@ (8003144 <HAL_DMA_Abort+0xc0>)
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	221c      	movs	r2, #28
 80030ee:	4013      	ands	r3, r2
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <HAL_DMA_Abort+0xc0>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003102:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00c      	beq.n	8003126 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003116:	490a      	ldr	r1, [pc, #40]	@ (8003140 <HAL_DMA_Abort+0xbc>)
 8003118:	400a      	ands	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003124:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2225      	movs	r2, #37	@ 0x25
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2224      	movs	r2, #36	@ 0x24
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}
 8003140:	fffffeff 	.word	0xfffffeff
 8003144:	40020000 	.word	0x40020000

08003148 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	@ 0x24
 800315c:	2100      	movs	r1, #0
 800315e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	@ 0x24
 8003164:	5c9b      	ldrb	r3, [r3, r2]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_DMA_Abort_IT+0x26>
 800316a:	2302      	movs	r3, #2
 800316c:	e05e      	b.n	800322c <HAL_DMA_Abort_IT+0xe4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2224      	movs	r2, #36	@ 0x24
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2225      	movs	r2, #37	@ 0x25
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d007      	beq.n	8003192 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003188:	230f      	movs	r3, #15
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e049      	b.n	8003226 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	210e      	movs	r1, #14
 800319e:	438a      	bics	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2101      	movs	r1, #1
 80031ae:	438a      	bics	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	491d      	ldr	r1, [pc, #116]	@ (8003234 <HAL_DMA_Abort_IT+0xec>)
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80031c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <HAL_DMA_Abort_IT+0xf0>)
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	221c      	movs	r2, #28
 80031cc:	4013      	ands	r3, r2
 80031ce:	2201      	movs	r2, #1
 80031d0:	409a      	lsls	r2, r3
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_DMA_Abort_IT+0xf0>)
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f4:	490f      	ldr	r1, [pc, #60]	@ (8003234 <HAL_DMA_Abort_IT+0xec>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003202:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2225      	movs	r2, #37	@ 0x25
 8003208:	2101      	movs	r1, #1
 800320a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	@ 0x24
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	0010      	movs	r0, r2
 8003224:	4798      	blx	r3
    }
  }
  return status;
 8003226:	230f      	movs	r3, #15
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	781b      	ldrb	r3, [r3, #0]
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}
 8003234:	fffffeff 	.word	0xfffffeff
 8003238:	40020000 	.word	0x40020000

0800323c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003244:	4b55      	ldr	r3, [pc, #340]	@ (800339c <HAL_DMA_IRQHandler+0x160>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	221c      	movs	r2, #28
 8003258:	4013      	ands	r3, r2
 800325a:	2204      	movs	r2, #4
 800325c:	409a      	lsls	r2, r3
 800325e:	0013      	movs	r3, r2
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	d027      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x7a>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2204      	movs	r2, #4
 800326a:	4013      	ands	r3, r2
 800326c:	d023      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2220      	movs	r2, #32
 8003276:	4013      	ands	r3, r2
 8003278:	d107      	bne.n	800328a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2104      	movs	r1, #4
 8003286:	438a      	bics	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800328a:	4b44      	ldr	r3, [pc, #272]	@ (800339c <HAL_DMA_IRQHandler+0x160>)
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	221c      	movs	r2, #28
 8003294:	4013      	ands	r3, r2
 8003296:	2204      	movs	r2, #4
 8003298:	409a      	lsls	r2, r3
 800329a:	4b40      	ldr	r3, [pc, #256]	@ (800339c <HAL_DMA_IRQHandler+0x160>)
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d100      	bne.n	80032aa <HAL_DMA_IRQHandler+0x6e>
 80032a8:	e073      	b.n	8003392 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	0010      	movs	r0, r2
 80032b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032b4:	e06d      	b.n	8003392 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	221c      	movs	r2, #28
 80032bc:	4013      	ands	r3, r2
 80032be:	2202      	movs	r2, #2
 80032c0:	409a      	lsls	r2, r3
 80032c2:	0013      	movs	r3, r2
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4013      	ands	r3, r2
 80032c8:	d02e      	beq.n	8003328 <HAL_DMA_IRQHandler+0xec>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d02a      	beq.n	8003328 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2220      	movs	r2, #32
 80032da:	4013      	ands	r3, r2
 80032dc:	d10b      	bne.n	80032f6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	210a      	movs	r1, #10
 80032ea:	438a      	bics	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2225      	movs	r2, #37	@ 0x25
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80032f6:	4b29      	ldr	r3, [pc, #164]	@ (800339c <HAL_DMA_IRQHandler+0x160>)
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	221c      	movs	r2, #28
 8003300:	4013      	ands	r3, r2
 8003302:	2202      	movs	r2, #2
 8003304:	409a      	lsls	r2, r3
 8003306:	4b25      	ldr	r3, [pc, #148]	@ (800339c <HAL_DMA_IRQHandler+0x160>)
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d03a      	beq.n	8003392 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	0010      	movs	r0, r2
 8003324:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003326:	e034      	b.n	8003392 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	221c      	movs	r2, #28
 800332e:	4013      	ands	r3, r2
 8003330:	2208      	movs	r2, #8
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	d02b      	beq.n	8003394 <HAL_DMA_IRQHandler+0x158>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2208      	movs	r2, #8
 8003340:	4013      	ands	r3, r2
 8003342:	d027      	beq.n	8003394 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	210e      	movs	r1, #14
 8003350:	438a      	bics	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_DMA_IRQHandler+0x160>)
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	221c      	movs	r2, #28
 800335e:	4013      	ands	r3, r2
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <HAL_DMA_IRQHandler+0x160>)
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2225      	movs	r2, #37	@ 0x25
 8003374:	2101      	movs	r1, #1
 8003376:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	@ 0x24
 800337c:	2100      	movs	r1, #0
 800337e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	0010      	movs	r0, r2
 8003390:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46c0      	nop			@ (mov r8, r8)
}
 8003396:	46bd      	mov	sp, r7
 8003398:	b004      	add	sp, #16
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40020000 	.word	0x40020000

080033a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80033c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <DMA_SetConfig+0x7c>)
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	221c      	movs	r2, #28
 80033d4:	4013      	ands	r3, r2
 80033d6:	2201      	movs	r2, #1
 80033d8:	409a      	lsls	r2, r3
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <DMA_SetConfig+0x7c>)
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d108      	bne.n	8003402 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003400:	e007      	b.n	8003412 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	60da      	str	r2, [r3, #12]
}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b004      	add	sp, #16
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	40020000 	.word	0x40020000

08003420 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	001a      	movs	r2, r3
 800342e:	23ff      	movs	r3, #255	@ 0xff
 8003430:	4013      	ands	r3, r2
 8003432:	3b08      	subs	r3, #8
 8003434:	2114      	movs	r1, #20
 8003436:	0018      	movs	r0, r3
 8003438:	f7fc fe70 	bl	800011c <__udivsi3>
 800343c:	0003      	movs	r3, r0
 800343e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003446:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003448:	4694      	mov	ip, r2
 800344a:	4463      	add	r3, ip
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	001a      	movs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a07      	ldr	r2, [pc, #28]	@ (8003474 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003458:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	221c      	movs	r2, #28
 800345e:	4013      	ands	r3, r2
 8003460:	2201      	movs	r2, #1
 8003462:	409a      	lsls	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003468:	46c0      	nop			@ (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}
 8003470:	10008200 	.word	0x10008200
 8003474:	40020880 	.word	0x40020880

08003478 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	22ff      	movs	r2, #255	@ 0xff
 8003486:	4013      	ands	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800348e:	4694      	mov	ip, r2
 8003490:	4463      	add	r3, ip
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	001a      	movs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a07      	ldr	r2, [pc, #28]	@ (80034bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	4013      	ands	r3, r2
 80034a8:	2201      	movs	r2, #1
 80034aa:	409a      	lsls	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b004      	add	sp, #16
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	1000823f 	.word	0x1000823f
 80034bc:	40020940 	.word	0x40020940

080034c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80034ce:	e153      	b.n	8003778 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4091      	lsls	r1, r2
 80034da:	000a      	movs	r2, r1
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d100      	bne.n	80034e8 <HAL_GPIO_Init+0x28>
 80034e6:	e144      	b.n	8003772 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x38>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b12      	cmp	r3, #18
 80034f6:	d125      	bne.n	8003544 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	08da      	lsrs	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3208      	adds	r2, #8
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	58d3      	ldr	r3, [r2, r3]
 8003504:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2207      	movs	r2, #7
 800350a:	4013      	ands	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	220f      	movs	r2, #15
 8003510:	409a      	lsls	r2, r3
 8003512:	0013      	movs	r3, r2
 8003514:	43da      	mvns	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4013      	ands	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	220f      	movs	r2, #15
 8003522:	401a      	ands	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2107      	movs	r1, #7
 8003528:	400b      	ands	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	409a      	lsls	r2, r3
 800352e:	0013      	movs	r3, r2
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	0092      	lsls	r2, r2, #2
 8003540:	6979      	ldr	r1, [r7, #20]
 8003542:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	409a      	lsls	r2, r3
 8003552:	0013      	movs	r3, r2
 8003554:	43da      	mvns	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	401a      	ands	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	409a      	lsls	r2, r3
 800356a:	0013      	movs	r3, r2
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d00b      	beq.n	8003598 <HAL_GPIO_Init+0xd8>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d007      	beq.n	8003598 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800358c:	2b11      	cmp	r3, #17
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d130      	bne.n	80035fa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	2203      	movs	r2, #3
 80035a4:	409a      	lsls	r2, r3
 80035a6:	0013      	movs	r3, r2
 80035a8:	43da      	mvns	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	4013      	ands	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	0013      	movs	r3, r2
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ce:	2201      	movs	r2, #1
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	409a      	lsls	r2, r3
 80035d4:	0013      	movs	r3, r2
 80035d6:	43da      	mvns	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4013      	ands	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	2201      	movs	r2, #1
 80035e6:	401a      	ands	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	409a      	lsls	r2, r3
 80035ec:	0013      	movs	r3, r2
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d017      	beq.n	8003632 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	409a      	lsls	r2, r3
 8003610:	0013      	movs	r3, r2
 8003612:	43da      	mvns	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4013      	ands	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	409a      	lsls	r2, r3
 8003624:	0013      	movs	r3, r2
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	055b      	lsls	r3, r3, #21
 800363a:	4013      	ands	r3, r2
 800363c:	d100      	bne.n	8003640 <HAL_GPIO_Init+0x180>
 800363e:	e098      	b.n	8003772 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003640:	4a53      	ldr	r2, [pc, #332]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3318      	adds	r3, #24
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	589b      	ldr	r3, [r3, r2]
 800364c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2203      	movs	r2, #3
 8003652:	4013      	ands	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	220f      	movs	r2, #15
 8003658:	409a      	lsls	r2, r3
 800365a:	0013      	movs	r3, r2
 800365c:	43da      	mvns	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4013      	ands	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	23a0      	movs	r3, #160	@ 0xa0
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	429a      	cmp	r2, r3
 800366c:	d019      	beq.n	80036a2 <HAL_GPIO_Init+0x1e2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a48      	ldr	r2, [pc, #288]	@ (8003794 <HAL_GPIO_Init+0x2d4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0x1de>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a47      	ldr	r2, [pc, #284]	@ (8003798 <HAL_GPIO_Init+0x2d8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00d      	beq.n	800369a <HAL_GPIO_Init+0x1da>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a46      	ldr	r2, [pc, #280]	@ (800379c <HAL_GPIO_Init+0x2dc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x1d6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a45      	ldr	r2, [pc, #276]	@ (80037a0 <HAL_GPIO_Init+0x2e0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_GPIO_Init+0x1d2>
 800368e:	2305      	movs	r3, #5
 8003690:	e008      	b.n	80036a4 <HAL_GPIO_Init+0x1e4>
 8003692:	2306      	movs	r3, #6
 8003694:	e006      	b.n	80036a4 <HAL_GPIO_Init+0x1e4>
 8003696:	2303      	movs	r3, #3
 8003698:	e004      	b.n	80036a4 <HAL_GPIO_Init+0x1e4>
 800369a:	2302      	movs	r3, #2
 800369c:	e002      	b.n	80036a4 <HAL_GPIO_Init+0x1e4>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_GPIO_Init+0x1e4>
 80036a2:	2300      	movs	r3, #0
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	2103      	movs	r1, #3
 80036a8:	400a      	ands	r2, r1
 80036aa:	00d2      	lsls	r2, r2, #3
 80036ac:	4093      	lsls	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80036b4:	4936      	ldr	r1, [pc, #216]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3318      	adds	r3, #24
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80036c2:	4a33      	ldr	r2, [pc, #204]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	58d3      	ldr	r3, [r2, r3]
 80036c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43da      	mvns	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4013      	ands	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	2380      	movs	r3, #128	@ 0x80
 80036da:	025b      	lsls	r3, r3, #9
 80036dc:	4013      	ands	r3, r2
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80036e8:	4929      	ldr	r1, [pc, #164]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036ea:	2280      	movs	r2, #128	@ 0x80
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80036f0:	4a27      	ldr	r2, [pc, #156]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 80036f2:	2384      	movs	r3, #132	@ 0x84
 80036f4:	58d3      	ldr	r3, [r2, r3]
 80036f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	43da      	mvns	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4013      	ands	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	029b      	lsls	r3, r3, #10
 800370a:	4013      	ands	r3, r2
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003716:	491e      	ldr	r1, [pc, #120]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003718:	2284      	movs	r2, #132	@ 0x84
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800371e:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	43da      	mvns	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	4013      	ands	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	035b      	lsls	r3, r3, #13
 8003736:	4013      	ands	r3, r2
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003742:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003748:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	43da      	mvns	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4013      	ands	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	039b      	lsls	r3, r3, #14
 8003760:	4013      	ands	r3, r2
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800376c:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <HAL_GPIO_Init+0x2d0>)
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	3301      	adds	r3, #1
 8003776:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	40da      	lsrs	r2, r3
 8003780:	1e13      	subs	r3, r2, #0
 8003782:	d000      	beq.n	8003786 <HAL_GPIO_Init+0x2c6>
 8003784:	e6a4      	b.n	80034d0 <HAL_GPIO_Init+0x10>
  }
}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b006      	add	sp, #24
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021800 	.word	0x40021800
 8003794:	50000400 	.word	0x50000400
 8003798:	50000800 	.word	0x50000800
 800379c:	50000c00 	.word	0x50000c00
 80037a0:	50001400 	.word	0x50001400

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	0008      	movs	r0, r1
 80037ae:	0011      	movs	r1, r2
 80037b0:	1cbb      	adds	r3, r7, #2
 80037b2:	1c02      	adds	r2, r0, #0
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	1c7b      	adds	r3, r7, #1
 80037b8:	1c0a      	adds	r2, r1, #0
 80037ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037bc:	1c7b      	adds	r3, r7, #1
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037c4:	1cbb      	adds	r3, r7, #2
 80037c6:	881a      	ldrh	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037cc:	e003      	b.n	80037d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ce:	1cbb      	adds	r3, r7, #2
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e08f      	b.n	8003912 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2241      	movs	r2, #65	@ 0x41
 80037f6:	5c9b      	ldrb	r3, [r3, r2]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	@ 0x40
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f7fe f9a1 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2241      	movs	r2, #65	@ 0x41
 8003812:	2124      	movs	r1, #36	@ 0x24
 8003814:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2101      	movs	r1, #1
 8003822:	438a      	bics	r2, r1
 8003824:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	493b      	ldr	r1, [pc, #236]	@ (800391c <HAL_I2C_Init+0x13c>)
 8003830:	400a      	ands	r2, r1
 8003832:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4938      	ldr	r1, [pc, #224]	@ (8003920 <HAL_I2C_Init+0x140>)
 8003840:	400a      	ands	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2180      	movs	r1, #128	@ 0x80
 8003856:	0209      	lsls	r1, r1, #8
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e007      	b.n	800386e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2184      	movs	r1, #132	@ 0x84
 8003868:	0209      	lsls	r1, r1, #8
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d109      	bne.n	800388a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2180      	movs	r1, #128	@ 0x80
 8003882:	0109      	lsls	r1, r1, #4
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	e007      	b.n	800389a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4923      	ldr	r1, [pc, #140]	@ (8003924 <HAL_I2C_Init+0x144>)
 8003896:	400a      	ands	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4920      	ldr	r1, [pc, #128]	@ (8003928 <HAL_I2C_Init+0x148>)
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	491a      	ldr	r1, [pc, #104]	@ (8003920 <HAL_I2C_Init+0x140>)
 80038b6:	400a      	ands	r2, r1
 80038b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69d9      	ldr	r1, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2101      	movs	r1, #1
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2241      	movs	r2, #65	@ 0x41
 80038fe:	2120      	movs	r1, #32
 8003900:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2242      	movs	r2, #66	@ 0x42
 800390c:	2100      	movs	r1, #0
 800390e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	0018      	movs	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	f0ffffff 	.word	0xf0ffffff
 8003920:	ffff7fff 	.word	0xffff7fff
 8003924:	fffff7ff 	.word	0xfffff7ff
 8003928:	02008000 	.word	0x02008000

0800392c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b089      	sub	sp, #36	@ 0x24
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	0008      	movs	r0, r1
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	0019      	movs	r1, r3
 800393a:	230a      	movs	r3, #10
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	1c02      	adds	r2, r0, #0
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	2308      	movs	r3, #8
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	1c0a      	adds	r2, r1, #0
 8003948:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2241      	movs	r2, #65	@ 0x41
 800394e:	5c9b      	ldrb	r3, [r3, r2]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b20      	cmp	r3, #32
 8003954:	d000      	beq.n	8003958 <HAL_I2C_Master_Transmit+0x2c>
 8003956:	e10a      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2240      	movs	r2, #64	@ 0x40
 800395c:	5c9b      	ldrb	r3, [r3, r2]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_I2C_Master_Transmit+0x3a>
 8003962:	2302      	movs	r3, #2
 8003964:	e104      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x244>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2240      	movs	r2, #64	@ 0x40
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800396e:	f7fe fcf1 	bl	8002354 <HAL_GetTick>
 8003972:	0003      	movs	r3, r0
 8003974:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	0219      	lsls	r1, r3, #8
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2319      	movs	r3, #25
 8003982:	2201      	movs	r2, #1
 8003984:	f000 fa3c 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0ef      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2241      	movs	r2, #65	@ 0x41
 8003994:	2121      	movs	r1, #33	@ 0x21
 8003996:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2242      	movs	r2, #66	@ 0x42
 800399c:	2110      	movs	r1, #16
 800399e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2208      	movs	r2, #8
 80039b0:	18ba      	adds	r2, r7, r2
 80039b2:	8812      	ldrh	r2, [r2, #0]
 80039b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2bff      	cmp	r3, #255	@ 0xff
 80039c4:	d906      	bls.n	80039d4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	045b      	lsls	r3, r3, #17
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e007      	b.n	80039e4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	049b      	lsls	r3, r3, #18
 80039e2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d027      	beq.n	8003a3c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	781a      	ldrb	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	697c      	ldr	r4, [r7, #20]
 8003a28:	230a      	movs	r3, #10
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	8819      	ldrh	r1, [r3, #0]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <HAL_I2C_Master_Transmit+0x24c>)
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	0023      	movs	r3, r4
 8003a36:	f000 fc5b 	bl	80042f0 <I2C_TransferConfig>
 8003a3a:	e06f      	b.n	8003b1c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	697c      	ldr	r4, [r7, #20]
 8003a44:	230a      	movs	r3, #10
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	8819      	ldrh	r1, [r3, #0]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b78 <HAL_I2C_Master_Transmit+0x24c>)
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	0023      	movs	r3, r4
 8003a52:	f000 fc4d 	bl	80042f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a56:	e061      	b.n	8003b1c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 fa26 	bl	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a64:	1e03      	subs	r3, r0, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e081      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d03a      	beq.n	8003b1c <HAL_I2C_Master_Transmit+0x1f0>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d136      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	0013      	movs	r3, r2
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	@ 0x80
 8003abc:	f000 f9a0 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003ac0:	1e03      	subs	r3, r0, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e053      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2bff      	cmp	r3, #255	@ 0xff
 8003ad0:	d911      	bls.n	8003af6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	22ff      	movs	r2, #255	@ 0xff
 8003ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	2380      	movs	r3, #128	@ 0x80
 8003ae0:	045c      	lsls	r4, r3, #17
 8003ae2:	230a      	movs	r3, #10
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	8819      	ldrh	r1, [r3, #0]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	0023      	movs	r3, r4
 8003af0:	f000 fbfe 	bl	80042f0 <I2C_TransferConfig>
 8003af4:	e012      	b.n	8003b1c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	049c      	lsls	r4, r3, #18
 8003b0a:	230a      	movs	r3, #10
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	8819      	ldrh	r1, [r3, #0]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	0023      	movs	r3, r4
 8003b18:	f000 fbea 	bl	80042f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d198      	bne.n	8003a58 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 fa05 	bl	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e01a      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	490b      	ldr	r1, [pc, #44]	@ (8003b7c <HAL_I2C_Master_Transmit+0x250>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2241      	movs	r2, #65	@ 0x41
 8003b56:	2120      	movs	r1, #32
 8003b58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2242      	movs	r2, #66	@ 0x42
 8003b5e:	2100      	movs	r1, #0
 8003b60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2240      	movs	r2, #64	@ 0x40
 8003b66:	2100      	movs	r1, #0
 8003b68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b007      	add	sp, #28
 8003b76:	bd90      	pop	{r4, r7, pc}
 8003b78:	80002000 	.word	0x80002000
 8003b7c:	fe00e800 	.word	0xfe00e800

08003b80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	0008      	movs	r0, r1
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	230a      	movs	r3, #10
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	1c02      	adds	r2, r0, #0
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	2308      	movs	r3, #8
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	1c0a      	adds	r2, r1, #0
 8003b9c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2241      	movs	r2, #65	@ 0x41
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d000      	beq.n	8003bac <HAL_I2C_Master_Receive+0x2c>
 8003baa:	e0e8      	b.n	8003d7e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2240      	movs	r2, #64	@ 0x40
 8003bb0:	5c9b      	ldrb	r3, [r3, r2]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Master_Receive+0x3a>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0e2      	b.n	8003d80 <HAL_I2C_Master_Receive+0x200>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2240      	movs	r2, #64	@ 0x40
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bc2:	f7fe fbc7 	bl	8002354 <HAL_GetTick>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	0219      	lsls	r1, r3, #8
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2319      	movs	r3, #25
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f000 f912 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0cd      	b.n	8003d80 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2241      	movs	r2, #65	@ 0x41
 8003be8:	2122      	movs	r1, #34	@ 0x22
 8003bea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2242      	movs	r2, #66	@ 0x42
 8003bf0:	2110      	movs	r1, #16
 8003bf2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2208      	movs	r2, #8
 8003c04:	18ba      	adds	r2, r7, r2
 8003c06:	8812      	ldrh	r2, [r2, #0]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2bff      	cmp	r3, #255	@ 0xff
 8003c18:	d911      	bls.n	8003c3e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	22ff      	movs	r2, #255	@ 0xff
 8003c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	2380      	movs	r3, #128	@ 0x80
 8003c28:	045c      	lsls	r4, r3, #17
 8003c2a:	230a      	movs	r3, #10
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	8819      	ldrh	r1, [r3, #0]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	4b55      	ldr	r3, [pc, #340]	@ (8003d88 <HAL_I2C_Master_Receive+0x208>)
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	0023      	movs	r3, r4
 8003c38:	f000 fb5a 	bl	80042f0 <I2C_TransferConfig>
 8003c3c:	e076      	b.n	8003d2c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	2380      	movs	r3, #128	@ 0x80
 8003c50:	049c      	lsls	r4, r3, #18
 8003c52:	230a      	movs	r3, #10
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	8819      	ldrh	r1, [r3, #0]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d88 <HAL_I2C_Master_Receive+0x208>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	0023      	movs	r3, r4
 8003c60:	f000 fb46 	bl	80042f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003c64:	e062      	b.n	8003d2c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 f9a9 	bl	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c72:	1e03      	subs	r3, r0, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e082      	b.n	8003d80 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03a      	beq.n	8003d2c <HAL_I2C_Master_Receive+0x1ac>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d136      	bne.n	8003d2c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	0013      	movs	r3, r2
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2180      	movs	r1, #128	@ 0x80
 8003ccc:	f000 f898 	bl	8003e00 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	1e03      	subs	r3, r0, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e053      	b.n	8003d80 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2bff      	cmp	r3, #255	@ 0xff
 8003ce0:	d911      	bls.n	8003d06 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	22ff      	movs	r2, #255	@ 0xff
 8003ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	2380      	movs	r3, #128	@ 0x80
 8003cf0:	045c      	lsls	r4, r3, #17
 8003cf2:	230a      	movs	r3, #10
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	8819      	ldrh	r1, [r3, #0]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	0023      	movs	r3, r4
 8003d00:	f000 faf6 	bl	80042f0 <I2C_TransferConfig>
 8003d04:	e012      	b.n	8003d2c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	2380      	movs	r3, #128	@ 0x80
 8003d18:	049c      	lsls	r4, r3, #18
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	8819      	ldrh	r1, [r3, #0]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	0023      	movs	r3, r4
 8003d28:	f000 fae2 	bl	80042f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d197      	bne.n	8003c66 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 f8fd 	bl	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d42:	1e03      	subs	r3, r0, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e01a      	b.n	8003d80 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	490b      	ldr	r1, [pc, #44]	@ (8003d8c <HAL_I2C_Master_Receive+0x20c>)
 8003d5e:	400a      	ands	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2241      	movs	r2, #65	@ 0x41
 8003d66:	2120      	movs	r1, #32
 8003d68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2242      	movs	r2, #66	@ 0x42
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2240      	movs	r2, #64	@ 0x40
 8003d76:	2100      	movs	r1, #0
 8003d78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b007      	add	sp, #28
 8003d86:	bd90      	pop	{r4, r7, pc}
 8003d88:	80002400 	.word	0x80002400
 8003d8c:	fe00e800 	.word	0xfe00e800

08003d90 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2241      	movs	r2, #65	@ 0x41
 8003d9c:	5c9b      	ldrb	r3, [r3, r2]
 8003d9e:	b2db      	uxtb	r3, r3
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d103      	bne.n	8003dda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2201      	movs	r2, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d007      	beq.n	8003df8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2101      	movs	r1, #1
 8003df4:	430a      	orrs	r2, r1
 8003df6:	619a      	str	r2, [r3, #24]
  }
}
 8003df8:	46c0      	nop			@ (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	1dfb      	adds	r3, r7, #7
 8003e0e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e10:	e03a      	b.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 f971 	bl	8004100 <I2C_IsErrorOccurred>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d001      	beq.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e040      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	d02d      	beq.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2c:	f7fe fa92 	bl	8002354 <HAL_GetTick>
 8003e30:	0002      	movs	r2, r0
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d302      	bcc.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d122      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	425a      	negs	r2, r3
 8003e52:	4153      	adcs	r3, r2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	001a      	movs	r2, r3
 8003e58:	1dfb      	adds	r3, r7, #7
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d113      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e64:	2220      	movs	r2, #32
 8003e66:	431a      	orrs	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2241      	movs	r2, #65	@ 0x41
 8003e70:	2120      	movs	r1, #32
 8003e72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2242      	movs	r2, #66	@ 0x42
 8003e78:	2100      	movs	r1, #0
 8003e7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2240      	movs	r2, #64	@ 0x40
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e00f      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	425a      	negs	r2, r3
 8003e98:	4153      	adcs	r3, r2
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d0b5      	beq.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ebc:	e032      	b.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 f91b 	bl	8004100 <I2C_IsErrorOccurred>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e030      	b.n	8003f34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	d025      	beq.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed8:	f7fe fa3c 	bl	8002354 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11a      	bne.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d013      	beq.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	2220      	movs	r2, #32
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2241      	movs	r2, #65	@ 0x41
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2242      	movs	r2, #66	@ 0x42
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e007      	b.n	8003f34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d1c5      	bne.n	8003ebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b004      	add	sp, #16
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f48:	e02f      	b.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f8d5 	bl	8004100 <I2C_IsErrorOccurred>
 8003f56:	1e03      	subs	r3, r0, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e02d      	b.n	8003fba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7fe f9f9 	bl	8002354 <HAL_GetTick>
 8003f62:	0002      	movs	r2, r0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d11a      	bne.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d013      	beq.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	2220      	movs	r2, #32
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2241      	movs	r2, #65	@ 0x41
 8003f92:	2120      	movs	r1, #32
 8003f94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2242      	movs	r2, #66	@ 0x42
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2240      	movs	r2, #64	@ 0x40
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e007      	b.n	8003fba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d1c8      	bne.n	8003f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2317      	movs	r3, #23
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003fd8:	e07b      	b.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 f88d 	bl	8004100 <I2C_IsErrorOccurred>
 8003fe6:	1e03      	subs	r3, r0, #0
 8003fe8:	d003      	beq.n	8003ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003fea:	2317      	movs	r3, #23
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d140      	bne.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004000:	2117      	movs	r1, #23
 8004002:	187b      	adds	r3, r7, r1
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d13b      	bne.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2204      	movs	r2, #4
 8004012:	4013      	ands	r3, r2
 8004014:	2b04      	cmp	r3, #4
 8004016:	d106      	bne.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004020:	187b      	adds	r3, r7, r1
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2210      	movs	r2, #16
 800402e:	4013      	ands	r3, r2
 8004030:	2b10      	cmp	r3, #16
 8004032:	d123      	bne.n	800407c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2210      	movs	r2, #16
 800403a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2204      	movs	r2, #4
 8004040:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2220      	movs	r2, #32
 8004048:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4929      	ldr	r1, [pc, #164]	@ (80040fc <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004056:	400a      	ands	r2, r1
 8004058:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2241      	movs	r2, #65	@ 0x41
 800405e:	2120      	movs	r1, #32
 8004060:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2242      	movs	r2, #66	@ 0x42
 8004066:	2100      	movs	r1, #0
 8004068:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2240      	movs	r2, #64	@ 0x40
 800406e:	2100      	movs	r1, #0
 8004070:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004072:	2317      	movs	r3, #23
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e002      	b.n	8004082 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004082:	f7fe f967 	bl	8002354 <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11c      	bne.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004098:	2017      	movs	r0, #23
 800409a:	183b      	adds	r3, r7, r0
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d117      	bne.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2204      	movs	r2, #4
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d010      	beq.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	2220      	movs	r2, #32
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2241      	movs	r2, #65	@ 0x41
 80040c0:	2120      	movs	r1, #32
 80040c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2240      	movs	r2, #64	@ 0x40
 80040c8:	2100      	movs	r1, #0
 80040ca:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80040cc:	183b      	adds	r3, r7, r0
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2204      	movs	r2, #4
 80040da:	4013      	ands	r3, r2
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d005      	beq.n	80040ec <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80040e0:	2317      	movs	r3, #23
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d100      	bne.n	80040ec <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80040ea:	e776      	b.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80040ec:	2317      	movs	r3, #23
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	781b      	ldrb	r3, [r3, #0]
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b006      	add	sp, #24
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	fe00e800 	.word	0xfe00e800

08004100 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800410c:	2327      	movs	r3, #39	@ 0x27
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2210      	movs	r2, #16
 8004128:	4013      	ands	r3, r2
 800412a:	d100      	bne.n	800412e <I2C_IsErrorOccurred+0x2e>
 800412c:	e079      	b.n	8004222 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2210      	movs	r2, #16
 8004134:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004136:	e057      	b.n	80041e8 <I2C_IsErrorOccurred+0xe8>
 8004138:	2227      	movs	r2, #39	@ 0x27
 800413a:	18bb      	adds	r3, r7, r2
 800413c:	18ba      	adds	r2, r7, r2
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3301      	adds	r3, #1
 8004146:	d04f      	beq.n	80041e8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fe f904 	bl	8002354 <HAL_GetTick>
 800414c:	0002      	movs	r2, r0
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <I2C_IsErrorOccurred+0x5e>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d144      	bne.n	80041e8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	4013      	ands	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800416c:	2013      	movs	r0, #19
 800416e:	183b      	adds	r3, r7, r0
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	2142      	movs	r1, #66	@ 0x42
 8004174:	5c52      	ldrb	r2, [r2, r1]
 8004176:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	2380      	movs	r3, #128	@ 0x80
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	401a      	ands	r2, r3
 8004184:	2380      	movs	r3, #128	@ 0x80
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	429a      	cmp	r2, r3
 800418a:	d126      	bne.n	80041da <I2C_IsErrorOccurred+0xda>
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	429a      	cmp	r2, r3
 8004194:	d021      	beq.n	80041da <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004196:	183b      	adds	r3, r7, r0
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b20      	cmp	r3, #32
 800419c:	d01d      	beq.n	80041da <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2180      	movs	r1, #128	@ 0x80
 80041aa:	01c9      	lsls	r1, r1, #7
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041b0:	f7fe f8d0 	bl	8002354 <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b8:	e00f      	b.n	80041da <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041ba:	f7fe f8cb 	bl	8002354 <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b19      	cmp	r3, #25
 80041c6:	d908      	bls.n	80041da <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	2220      	movs	r2, #32
 80041cc:	4313      	orrs	r3, r2
 80041ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80041d0:	2327      	movs	r3, #39	@ 0x27
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]

              break;
 80041d8:	e006      	b.n	80041e8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2220      	movs	r2, #32
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d1e8      	bne.n	80041ba <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2220      	movs	r2, #32
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d004      	beq.n	8004200 <I2C_IsErrorOccurred+0x100>
 80041f6:	2327      	movs	r3, #39	@ 0x27
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d09b      	beq.n	8004138 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004200:	2327      	movs	r3, #39	@ 0x27
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2220      	movs	r2, #32
 8004210:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	2204      	movs	r2, #4
 8004216:	4313      	orrs	r3, r2
 8004218:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800421a:	2327      	movs	r3, #39	@ 0x27
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4013      	ands	r3, r2
 8004232:	d00c      	beq.n	800424e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2201      	movs	r2, #1
 8004238:	4313      	orrs	r3, r2
 800423a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2280      	movs	r2, #128	@ 0x80
 8004242:	0052      	lsls	r2, r2, #1
 8004244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004246:	2327      	movs	r3, #39	@ 0x27
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4013      	ands	r3, r2
 8004256:	d00c      	beq.n	8004272 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	2208      	movs	r2, #8
 800425c:	4313      	orrs	r3, r2
 800425e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2280      	movs	r2, #128	@ 0x80
 8004266:	00d2      	lsls	r2, r2, #3
 8004268:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800426a:	2327      	movs	r3, #39	@ 0x27
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4013      	ands	r3, r2
 800427a:	d00c      	beq.n	8004296 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	2202      	movs	r2, #2
 8004280:	4313      	orrs	r3, r2
 8004282:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2280      	movs	r2, #128	@ 0x80
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800428e:	2327      	movs	r3, #39	@ 0x27
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004296:	2327      	movs	r3, #39	@ 0x27
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01d      	beq.n	80042dc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7ff fd8a 	bl	8003dbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	490e      	ldr	r1, [pc, #56]	@ (80042ec <I2C_IsErrorOccurred+0x1ec>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2241      	movs	r2, #65	@ 0x41
 80042c8:	2120      	movs	r1, #32
 80042ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2242      	movs	r2, #66	@ 0x42
 80042d0:	2100      	movs	r1, #0
 80042d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2240      	movs	r2, #64	@ 0x40
 80042d8:	2100      	movs	r1, #0
 80042da:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80042dc:	2327      	movs	r3, #39	@ 0x27
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	781b      	ldrb	r3, [r3, #0]
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b00a      	add	sp, #40	@ 0x28
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	fe00e800 	.word	0xfe00e800

080042f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	0008      	movs	r0, r1
 80042fa:	0011      	movs	r1, r2
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	240a      	movs	r4, #10
 8004300:	193b      	adds	r3, r7, r4
 8004302:	1c02      	adds	r2, r0, #0
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	2009      	movs	r0, #9
 8004308:	183b      	adds	r3, r7, r0
 800430a:	1c0a      	adds	r2, r1, #0
 800430c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800430e:	193b      	adds	r3, r7, r4
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	059b      	lsls	r3, r3, #22
 8004314:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004316:	183b      	adds	r3, r7, r0
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	0419      	lsls	r1, r3, #16
 800431c:	23ff      	movs	r3, #255	@ 0xff
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004322:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	4313      	orrs	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800433a:	0d51      	lsrs	r1, r2, #21
 800433c:	2280      	movs	r2, #128	@ 0x80
 800433e:	00d2      	lsls	r2, r2, #3
 8004340:	400a      	ands	r2, r1
 8004342:	4907      	ldr	r1, [pc, #28]	@ (8004360 <I2C_TransferConfig+0x70>)
 8004344:	430a      	orrs	r2, r1
 8004346:	43d2      	mvns	r2, r2
 8004348:	401a      	ands	r2, r3
 800434a:	0011      	movs	r1, r2
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b007      	add	sp, #28
 800435c:	bd90      	pop	{r4, r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	03ff63ff 	.word	0x03ff63ff

08004364 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2241      	movs	r2, #65	@ 0x41
 8004372:	5c9b      	ldrb	r3, [r3, r2]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b20      	cmp	r3, #32
 8004378:	d138      	bne.n	80043ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004384:	2302      	movs	r3, #2
 8004386:	e032      	b.n	80043ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2241      	movs	r2, #65	@ 0x41
 8004394:	2124      	movs	r1, #36	@ 0x24
 8004396:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	438a      	bics	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4911      	ldr	r1, [pc, #68]	@ (80043f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2241      	movs	r2, #65	@ 0x41
 80043dc:	2120      	movs	r1, #32
 80043de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2240      	movs	r2, #64	@ 0x40
 80043e4:	2100      	movs	r1, #0
 80043e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b002      	add	sp, #8
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	ffffefff 	.word	0xffffefff

080043fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2241      	movs	r2, #65	@ 0x41
 800440a:	5c9b      	ldrb	r3, [r3, r2]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b20      	cmp	r3, #32
 8004410:	d139      	bne.n	8004486 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2240      	movs	r2, #64	@ 0x40
 8004416:	5c9b      	ldrb	r3, [r3, r2]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800441c:	2302      	movs	r3, #2
 800441e:	e033      	b.n	8004488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2240      	movs	r2, #64	@ 0x40
 8004424:	2101      	movs	r1, #1
 8004426:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2241      	movs	r2, #65	@ 0x41
 800442c:	2124      	movs	r1, #36	@ 0x24
 800442e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2101      	movs	r1, #1
 800443c:	438a      	bics	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2101      	movs	r1, #1
 800446e:	430a      	orrs	r2, r1
 8004470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2241      	movs	r2, #65	@ 0x41
 8004476:	2120      	movs	r1, #32
 8004478:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2240      	movs	r2, #64	@ 0x40
 800447e:	2100      	movs	r1, #0
 8004480:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b004      	add	sp, #16
 800448e:	bd80      	pop	{r7, pc}
 8004490:	fffff0ff 	.word	0xfffff0ff

08004494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e20f      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	4013      	ands	r3, r2
 80044ae:	d100      	bne.n	80044b2 <HAL_RCC_OscConfig+0x1e>
 80044b0:	e069      	b.n	8004586 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b2:	4bc8      	ldr	r3, [pc, #800]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2238      	movs	r2, #56	@ 0x38
 80044b8:	4013      	ands	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d105      	bne.n	80044ce <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d15d      	bne.n	8004586 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1fb      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	2380      	movs	r3, #128	@ 0x80
 80044d4:	025b      	lsls	r3, r3, #9
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_OscConfig+0x56>
 80044da:	4bbe      	ldr	r3, [pc, #760]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4bbd      	ldr	r3, [pc, #756]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80044e0:	2180      	movs	r1, #128	@ 0x80
 80044e2:	0249      	lsls	r1, r1, #9
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e020      	b.n	800452c <HAL_RCC_OscConfig+0x98>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	23a0      	movs	r3, #160	@ 0xa0
 80044f0:	02db      	lsls	r3, r3, #11
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d10e      	bne.n	8004514 <HAL_RCC_OscConfig+0x80>
 80044f6:	4bb7      	ldr	r3, [pc, #732]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4bb6      	ldr	r3, [pc, #728]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80044fc:	2180      	movs	r1, #128	@ 0x80
 80044fe:	02c9      	lsls	r1, r1, #11
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	4bb3      	ldr	r3, [pc, #716]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4bb2      	ldr	r3, [pc, #712]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800450a:	2180      	movs	r1, #128	@ 0x80
 800450c:	0249      	lsls	r1, r1, #9
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0x98>
 8004514:	4baf      	ldr	r3, [pc, #700]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4bae      	ldr	r3, [pc, #696]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800451a:	49af      	ldr	r1, [pc, #700]	@ (80047d8 <HAL_RCC_OscConfig+0x344>)
 800451c:	400a      	ands	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	4bac      	ldr	r3, [pc, #688]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4bab      	ldr	r3, [pc, #684]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004526:	49ad      	ldr	r1, [pc, #692]	@ (80047dc <HAL_RCC_OscConfig+0x348>)
 8004528:	400a      	ands	r2, r1
 800452a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d014      	beq.n	800455e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd ff0e 	bl	8002354 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800453e:	f7fd ff09 	bl	8002354 <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b64      	cmp	r3, #100	@ 0x64
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1ba      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004550:	4ba0      	ldr	r3, [pc, #640]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	029b      	lsls	r3, r3, #10
 8004558:	4013      	ands	r3, r2
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0xaa>
 800455c:	e013      	b.n	8004586 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fd fef9 	bl	8002354 <HAL_GetTick>
 8004562:	0003      	movs	r3, r0
 8004564:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004568:	f7fd fef4 	bl	8002354 <HAL_GetTick>
 800456c:	0002      	movs	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	@ 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1a5      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457a:	4b96      	ldr	r3, [pc, #600]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	2380      	movs	r3, #128	@ 0x80
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	4013      	ands	r3, r2
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2202      	movs	r2, #2
 800458c:	4013      	ands	r3, r2
 800458e:	d100      	bne.n	8004592 <HAL_RCC_OscConfig+0xfe>
 8004590:	e086      	b.n	80046a0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004592:	4b90      	ldr	r3, [pc, #576]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2238      	movs	r2, #56	@ 0x38
 8004598:	4013      	ands	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d12f      	bne.n	8004602 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e18b      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	4b89      	ldr	r3, [pc, #548]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4a8b      	ldr	r2, [pc, #556]	@ (80047e0 <HAL_RCC_OscConfig+0x34c>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	021a      	lsls	r2, r3, #8
 80045be:	4b85      	ldr	r3, [pc, #532]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d112      	bne.n	80045f0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045ca:	4b82      	ldr	r3, [pc, #520]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a85      	ldr	r2, [pc, #532]	@ (80047e4 <HAL_RCC_OscConfig+0x350>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	0019      	movs	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	4b7e      	ldr	r3, [pc, #504]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80045da:	430a      	orrs	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80045de:	4b7d      	ldr	r3, [pc, #500]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	0adb      	lsrs	r3, r3, #11
 80045e4:	2207      	movs	r2, #7
 80045e6:	4013      	ands	r3, r2
 80045e8:	4a7f      	ldr	r2, [pc, #508]	@ (80047e8 <HAL_RCC_OscConfig+0x354>)
 80045ea:	40da      	lsrs	r2, r3
 80045ec:	4b7f      	ldr	r3, [pc, #508]	@ (80047ec <HAL_RCC_OscConfig+0x358>)
 80045ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045f0:	4b7f      	ldr	r3, [pc, #508]	@ (80047f0 <HAL_RCC_OscConfig+0x35c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7fd fe51 	bl	800229c <HAL_InitTick>
 80045fa:	1e03      	subs	r3, r0, #0
 80045fc:	d050      	beq.n	80046a0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e161      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d030      	beq.n	800466c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800460a:	4b72      	ldr	r3, [pc, #456]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a75      	ldr	r2, [pc, #468]	@ (80047e4 <HAL_RCC_OscConfig+0x350>)
 8004610:	4013      	ands	r3, r2
 8004612:	0019      	movs	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	4b6e      	ldr	r3, [pc, #440]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800461e:	4b6d      	ldr	r3, [pc, #436]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b6c      	ldr	r3, [pc, #432]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004624:	2180      	movs	r1, #128	@ 0x80
 8004626:	0049      	lsls	r1, r1, #1
 8004628:	430a      	orrs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fe92 	bl	8002354 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004636:	f7fd fe8d 	bl	8002354 <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e13e      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004648:	4b62      	ldr	r3, [pc, #392]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4013      	ands	r3, r2
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4b5f      	ldr	r3, [pc, #380]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a61      	ldr	r2, [pc, #388]	@ (80047e0 <HAL_RCC_OscConfig+0x34c>)
 800465a:	4013      	ands	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	4b5b      	ldr	r3, [pc, #364]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	e019      	b.n	80046a0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800466c:	4b59      	ldr	r3, [pc, #356]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4b58      	ldr	r3, [pc, #352]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004672:	4960      	ldr	r1, [pc, #384]	@ (80047f4 <HAL_RCC_OscConfig+0x360>)
 8004674:	400a      	ands	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd fe6c 	bl	8002354 <HAL_GetTick>
 800467c:	0003      	movs	r3, r0
 800467e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004682:	f7fd fe67 	bl	8002354 <HAL_GetTick>
 8004686:	0002      	movs	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e118      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004694:	4b4f      	ldr	r3, [pc, #316]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2380      	movs	r3, #128	@ 0x80
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4013      	ands	r3, r2
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2208      	movs	r2, #8
 80046a6:	4013      	ands	r3, r2
 80046a8:	d042      	beq.n	8004730 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80046aa:	4b4a      	ldr	r3, [pc, #296]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2238      	movs	r2, #56	@ 0x38
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b18      	cmp	r3, #24
 80046b4:	d105      	bne.n	80046c2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d138      	bne.n	8004730 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e101      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d019      	beq.n	80046fe <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80046ca:	4b42      	ldr	r3, [pc, #264]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80046cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046ce:	4b41      	ldr	r3, [pc, #260]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80046d0:	2101      	movs	r1, #1
 80046d2:	430a      	orrs	r2, r1
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fe3d 	bl	8002354 <HAL_GetTick>
 80046da:	0003      	movs	r3, r0
 80046dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80046e0:	f7fd fe38 	bl	8002354 <HAL_GetTick>
 80046e4:	0002      	movs	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0e9      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80046f2:	4b38      	ldr	r3, [pc, #224]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	2202      	movs	r2, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	d0f1      	beq.n	80046e0 <HAL_RCC_OscConfig+0x24c>
 80046fc:	e018      	b.n	8004730 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80046fe:	4b35      	ldr	r3, [pc, #212]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004700:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004702:	4b34      	ldr	r3, [pc, #208]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004704:	2101      	movs	r1, #1
 8004706:	438a      	bics	r2, r1
 8004708:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fd fe23 	bl	8002354 <HAL_GetTick>
 800470e:	0003      	movs	r3, r0
 8004710:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004714:	f7fd fe1e 	bl	8002354 <HAL_GetTick>
 8004718:	0002      	movs	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0cf      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004726:	4b2b      	ldr	r3, [pc, #172]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	d1f1      	bne.n	8004714 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2204      	movs	r2, #4
 8004736:	4013      	ands	r3, r2
 8004738:	d100      	bne.n	800473c <HAL_RCC_OscConfig+0x2a8>
 800473a:	e084      	b.n	8004846 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473c:	230f      	movs	r3, #15
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004744:	4b23      	ldr	r3, [pc, #140]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2238      	movs	r2, #56	@ 0x38
 800474a:	4013      	ands	r3, r2
 800474c:	2b20      	cmp	r3, #32
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d000      	beq.n	800475a <HAL_RCC_OscConfig+0x2c6>
 8004758:	e075      	b.n	8004846 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e0b3      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d106      	bne.n	8004774 <HAL_RCC_OscConfig+0x2e0>
 8004766:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004768:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800476a:	4b1a      	ldr	r3, [pc, #104]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800476c:	2101      	movs	r1, #1
 800476e:	430a      	orrs	r2, r1
 8004770:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004772:	e01c      	b.n	80047ae <HAL_RCC_OscConfig+0x31a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b05      	cmp	r3, #5
 800477a:	d10c      	bne.n	8004796 <HAL_RCC_OscConfig+0x302>
 800477c:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800477e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004780:	4b14      	ldr	r3, [pc, #80]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004782:	2104      	movs	r1, #4
 8004784:	430a      	orrs	r2, r1
 8004786:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004788:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800478a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800478c:	4b11      	ldr	r3, [pc, #68]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004794:	e00b      	b.n	80047ae <HAL_RCC_OscConfig+0x31a>
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 8004798:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800479a:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 800479c:	2101      	movs	r1, #1
 800479e:	438a      	bics	r2, r1
 80047a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047a2:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80047a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047a6:	4b0b      	ldr	r3, [pc, #44]	@ (80047d4 <HAL_RCC_OscConfig+0x340>)
 80047a8:	2104      	movs	r1, #4
 80047aa:	438a      	bics	r2, r1
 80047ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d028      	beq.n	8004808 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd fdcd 	bl	8002354 <HAL_GetTick>
 80047ba:	0003      	movs	r3, r0
 80047bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80047be:	e01d      	b.n	80047fc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fd fdc8 	bl	8002354 <HAL_GetTick>
 80047c4:	0002      	movs	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <HAL_RCC_OscConfig+0x364>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d915      	bls.n	80047fc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e078      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
 80047d4:	40021000 	.word	0x40021000
 80047d8:	fffeffff 	.word	0xfffeffff
 80047dc:	fffbffff 	.word	0xfffbffff
 80047e0:	ffff80ff 	.word	0xffff80ff
 80047e4:	ffffc7ff 	.word	0xffffc7ff
 80047e8:	02dc6c00 	.word	0x02dc6c00
 80047ec:	20000064 	.word	0x20000064
 80047f0:	20000068 	.word	0x20000068
 80047f4:	fffffeff 	.word	0xfffffeff
 80047f8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80047fc:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	2202      	movs	r2, #2
 8004802:	4013      	ands	r3, r2
 8004804:	d0dc      	beq.n	80047c0 <HAL_RCC_OscConfig+0x32c>
 8004806:	e013      	b.n	8004830 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd fda4 	bl	8002354 <HAL_GetTick>
 800480c:	0003      	movs	r3, r0
 800480e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004810:	e009      	b.n	8004826 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fd fd9f 	bl	8002354 <HAL_GetTick>
 8004816:	0002      	movs	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	4a2d      	ldr	r2, [pc, #180]	@ (80048d4 <HAL_RCC_OscConfig+0x440>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e04f      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004826:	4b2a      	ldr	r3, [pc, #168]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 8004828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004830:	230f      	movs	r3, #15
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b25      	ldr	r3, [pc, #148]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 800483c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 8004840:	4925      	ldr	r1, [pc, #148]	@ (80048d8 <HAL_RCC_OscConfig+0x444>)
 8004842:	400a      	ands	r2, r1
 8004844:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2210      	movs	r2, #16
 800484c:	4013      	ands	r3, r2
 800484e:	d039      	beq.n	80048c4 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004858:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b1c      	ldr	r3, [pc, #112]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 800485e:	2180      	movs	r1, #128	@ 0x80
 8004860:	03c9      	lsls	r1, r1, #15
 8004862:	430a      	orrs	r2, r1
 8004864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004866:	f7fd fd75 	bl	8002354 <HAL_GetTick>
 800486a:	0003      	movs	r3, r0
 800486c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004870:	f7fd fd70 	bl	8002354 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e021      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004882:	4b13      	ldr	r3, [pc, #76]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	2380      	movs	r3, #128	@ 0x80
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	4013      	ands	r3, r2
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x3dc>
 800488e:	e019      	b.n	80048c4 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4b0e      	ldr	r3, [pc, #56]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 8004896:	4911      	ldr	r1, [pc, #68]	@ (80048dc <HAL_RCC_OscConfig+0x448>)
 8004898:	400a      	ands	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fd fd5a 	bl	8002354 <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a6:	f7fd fd55 	bl	8002354 <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e006      	b.n	80048c6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80048b8:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <HAL_RCC_OscConfig+0x43c>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	4013      	ands	r3, r2
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	0018      	movs	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b006      	add	sp, #24
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	40021000 	.word	0x40021000
 80048d4:	00001388 	.word	0x00001388
 80048d8:	efffffff 	.word	0xefffffff
 80048dc:	ffbfffff 	.word	0xffbfffff

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0f6      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	4b7d      	ldr	r3, [pc, #500]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2207      	movs	r2, #7
 80048fa:	4013      	ands	r3, r2
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d91e      	bls.n	8004940 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b7a      	ldr	r3, [pc, #488]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2207      	movs	r2, #7
 8004908:	4393      	bics	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	4b77      	ldr	r3, [pc, #476]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004914:	f7fd fd1e 	bl	8002354 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800491c:	e009      	b.n	8004932 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800491e:	f7fd fd19 	bl	8002354 <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	4a71      	ldr	r2, [pc, #452]	@ (8004af0 <HAL_RCC_ClockConfig+0x210>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0d7      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004932:	4b6e      	ldr	r3, [pc, #440]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2207      	movs	r2, #7
 8004938:	4013      	ands	r3, r2
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2202      	movs	r2, #2
 8004946:	4013      	ands	r3, r2
 8004948:	d017      	beq.n	800497a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2204      	movs	r2, #4
 8004950:	4013      	ands	r3, r2
 8004952:	d008      	beq.n	8004966 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004954:	4b67      	ldr	r3, [pc, #412]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a67      	ldr	r2, [pc, #412]	@ (8004af8 <HAL_RCC_ClockConfig+0x218>)
 800495a:	401a      	ands	r2, r3
 800495c:	4b65      	ldr	r3, [pc, #404]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 800495e:	21b0      	movs	r1, #176	@ 0xb0
 8004960:	0109      	lsls	r1, r1, #4
 8004962:	430a      	orrs	r2, r1
 8004964:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004966:	4b63      	ldr	r3, [pc, #396]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4a64      	ldr	r2, [pc, #400]	@ (8004afc <HAL_RCC_ClockConfig+0x21c>)
 800496c:	4013      	ands	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	4b5f      	ldr	r3, [pc, #380]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2201      	movs	r2, #1
 8004980:	4013      	ands	r3, r2
 8004982:	d100      	bne.n	8004986 <HAL_RCC_ClockConfig+0xa6>
 8004984:	e061      	b.n	8004a4a <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	221c      	movs	r2, #28
 800498c:	4393      	bics	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	4b57      	ldr	r3, [pc, #348]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a2:	4b54      	ldr	r3, [pc, #336]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	@ 0x80
 80049a8:	029b      	lsls	r3, r3, #10
 80049aa:	4013      	ands	r3, r2
 80049ac:	d12b      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e097      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ba:	4b4e      	ldr	r3, [pc, #312]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	@ 0x80
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4013      	ands	r3, r2
 80049c4:	d11f      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e08b      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80049d2:	4b48      	ldr	r3, [pc, #288]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	4013      	ands	r3, r2
 80049dc:	d113      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e07f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80049ea:	4b42      	ldr	r3, [pc, #264]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	2202      	movs	r2, #2
 80049f0:	4013      	ands	r3, r2
 80049f2:	d108      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e074      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80049f8:	4b3e      	ldr	r3, [pc, #248]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 80049fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fc:	2202      	movs	r2, #2
 80049fe:	4013      	ands	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06d      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a06:	4b3b      	ldr	r3, [pc, #236]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2207      	movs	r2, #7
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	4b37      	ldr	r3, [pc, #220]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fd fc9b 	bl	8002354 <HAL_GetTick>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	e009      	b.n	8004a38 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fd fc96 	bl	8002354 <HAL_GetTick>
 8004a28:	0002      	movs	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	4a30      	ldr	r2, [pc, #192]	@ (8004af0 <HAL_RCC_ClockConfig+0x210>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e054      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a38:	4b2e      	ldr	r3, [pc, #184]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2238      	movs	r2, #56	@ 0x38
 8004a3e:	401a      	ands	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d1ec      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a4a:	4b28      	ldr	r3, [pc, #160]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2207      	movs	r2, #7
 8004a50:	4013      	ands	r3, r2
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d21e      	bcs.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a58:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	4393      	bics	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a6a:	f7fd fc73 	bl	8002354 <HAL_GetTick>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a72:	e009      	b.n	8004a88 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fd fc6e 	bl	8002354 <HAL_GetTick>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004af0 <HAL_RCC_ClockConfig+0x210>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e02c      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a88:	4b18      	ldr	r3, [pc, #96]	@ (8004aec <HAL_RCC_ClockConfig+0x20c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2207      	movs	r2, #7
 8004a8e:	4013      	ands	r3, r2
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d1ee      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa0:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a16      	ldr	r2, [pc, #88]	@ (8004b00 <HAL_RCC_ClockConfig+0x220>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004ab4:	f000 f82c 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 8004ab8:	0001      	movs	r1, r0
 8004aba:	4b0e      	ldr	r3, [pc, #56]	@ (8004af4 <HAL_RCC_ClockConfig+0x214>)
 8004abc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	220f      	movs	r2, #15
 8004ac2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <HAL_RCC_ClockConfig+0x224>)
 8004ac6:	0092      	lsls	r2, r2, #2
 8004ac8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004aca:	221f      	movs	r2, #31
 8004acc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004ace:	000a      	movs	r2, r1
 8004ad0:	40da      	lsrs	r2, r3
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <HAL_RCC_ClockConfig+0x228>)
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b0c <HAL_RCC_ClockConfig+0x22c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7fd fbde 	bl	800229c <HAL_InitTick>
 8004ae0:	0003      	movs	r3, r0
}
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b004      	add	sp, #16
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	40022000 	.word	0x40022000
 8004af0:	00001388 	.word	0x00001388
 8004af4:	40021000 	.word	0x40021000
 8004af8:	ffff84ff 	.word	0xffff84ff
 8004afc:	fffff0ff 	.word	0xfffff0ff
 8004b00:	ffff8fff 	.word	0xffff8fff
 8004b04:	08008dcc 	.word	0x08008dcc
 8004b08:	20000064 	.word	0x20000064
 8004b0c:	20000068 	.word	0x20000068

08004b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8004b16:	4b27      	ldr	r3, [pc, #156]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	4013      	ands	r3, r2
 8004b20:	3301      	adds	r3, #1
 8004b22:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b24:	4b23      	ldr	r3, [pc, #140]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2238      	movs	r2, #56	@ 0x38
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d10f      	bne.n	8004b4e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b2e:	4b21      	ldr	r3, [pc, #132]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	0adb      	lsrs	r3, r3, #11
 8004b34:	2207      	movs	r2, #7
 8004b36:	4013      	ands	r3, r2
 8004b38:	2201      	movs	r2, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	0013      	movs	r3, r2
 8004b3e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	481d      	ldr	r0, [pc, #116]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004b44:	f7fb faea 	bl	800011c <__udivsi3>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	e027      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b4e:	4b19      	ldr	r3, [pc, #100]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2238      	movs	r2, #56	@ 0x38
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d102      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b5a:	4b18      	ldr	r3, [pc, #96]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0xac>)
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e01e      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004b60:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2238      	movs	r2, #56	@ 0x38
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d103      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004b74:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2238      	movs	r2, #56	@ 0x38
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b18      	cmp	r3, #24
 8004b7e:	d103      	bne.n	8004b88 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b80:	23fa      	movs	r3, #250	@ 0xfa
 8004b82:	01db      	lsls	r3, r3, #7
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8004b88:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2238      	movs	r2, #56	@ 0x38
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d102      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8004b94:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e001      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7fb fabb 	bl	800011c <__udivsi3>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	0018      	movs	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b004      	add	sp, #16
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	02dc6c00 	.word	0x02dc6c00
 8004bbc:	007a1200 	.word	0x007a1200

08004bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004bc4:	f7ff ffa4 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 8004bc8:	0001      	movs	r1, r0
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCC_GetHCLKFreq+0x30>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004bd4:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <HAL_RCC_GetHCLKFreq+0x34>)
 8004bd6:	0092      	lsls	r2, r2, #2
 8004bd8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004bda:	221f      	movs	r2, #31
 8004bdc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004bde:	000a      	movs	r2, r1
 8004be0:	40da      	lsrs	r2, r3
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_GetHCLKFreq+0x38>)
 8004be4:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004be6:	4b04      	ldr	r3, [pc, #16]	@ (8004bf8 <HAL_RCC_GetHCLKFreq+0x38>)
 8004be8:	681b      	ldr	r3, [r3, #0]
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	08008dcc 	.word	0x08008dcc
 8004bf8:	20000064 	.word	0x20000064

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004c00:	f7ff ffde 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8004c04:	0001      	movs	r1, r0
 8004c06:	4b07      	ldr	r3, [pc, #28]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	0b1b      	lsrs	r3, r3, #12
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	401a      	ands	r2, r3
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004c12:	0092      	lsls	r2, r2, #2
 8004c14:	58d3      	ldr	r3, [r2, r3]
 8004c16:	221f      	movs	r2, #31
 8004c18:	4013      	ands	r3, r2
 8004c1a:	40d9      	lsrs	r1, r3
 8004c1c:	000b      	movs	r3, r1
}
 8004c1e:	0018      	movs	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000
 8004c28:	08008e0c 	.word	0x08008e0c

08004c2c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c34:	2313      	movs	r3, #19
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c3c:	2312      	movs	r3, #18
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2240      	movs	r2, #64	@ 0x40
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d100      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004c4e:	e079      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c50:	2011      	movs	r0, #17
 8004c52:	183b      	adds	r3, r7, r0
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c58:	4b6a      	ldr	r3, [pc, #424]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5c:	2380      	movs	r3, #128	@ 0x80
 8004c5e:	055b      	lsls	r3, r3, #21
 8004c60:	4013      	ands	r3, r2
 8004c62:	d110      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c64:	4b67      	ldr	r3, [pc, #412]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c68:	4b66      	ldr	r3, [pc, #408]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c6a:	2180      	movs	r1, #128	@ 0x80
 8004c6c:	0549      	lsls	r1, r1, #21
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c72:	4b64      	ldr	r3, [pc, #400]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c76:	2380      	movs	r3, #128	@ 0x80
 8004c78:	055b      	lsls	r3, r3, #21
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	183b      	adds	r3, r7, r0
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004c86:	4b5f      	ldr	r3, [pc, #380]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c8a:	23c0      	movs	r3, #192	@ 0xc0
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4013      	ands	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d019      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d014      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004ca2:	4b58      	ldr	r3, [pc, #352]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca6:	4a58      	ldr	r2, [pc, #352]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cac:	4b55      	ldr	r3, [pc, #340]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cb0:	4b54      	ldr	r3, [pc, #336]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cb2:	2180      	movs	r1, #128	@ 0x80
 8004cb4:	0249      	lsls	r1, r1, #9
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cba:	4b52      	ldr	r3, [pc, #328]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cbe:	4b51      	ldr	r3, [pc, #324]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cc0:	4952      	ldr	r1, [pc, #328]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cc2:	400a      	ands	r2, r1
 8004cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d016      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd fb3e 	bl	8002354 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004cdc:	e00c      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fd fb39 	bl	8002354 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	4a49      	ldr	r2, [pc, #292]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d904      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8004cee:	2313      	movs	r3, #19
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	701a      	strb	r2, [r3, #0]
          break;
 8004cf6:	e004      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004cf8:	4b42      	ldr	r3, [pc, #264]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d0ed      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8004d02:	2313      	movs	r3, #19
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d10:	4a3d      	ldr	r2, [pc, #244]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d22:	2312      	movs	r3, #18
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2213      	movs	r2, #19
 8004d28:	18ba      	adds	r2, r7, r2
 8004d2a:	7812      	ldrb	r2, [r2, #0]
 8004d2c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d2e:	2311      	movs	r3, #17
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d38:	4b32      	ldr	r3, [pc, #200]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d3c:	4b31      	ldr	r3, [pc, #196]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d3e:	4935      	ldr	r1, [pc, #212]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d40:	400a      	ands	r2, r1
 8004d42:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d52:	2203      	movs	r2, #3
 8004d54:	4393      	bics	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	4b29      	ldr	r3, [pc, #164]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2202      	movs	r2, #2
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d6c:	4b25      	ldr	r3, [pc, #148]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d70:	4a29      	ldr	r2, [pc, #164]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	0019      	movs	r1, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	4b22      	ldr	r3, [pc, #136]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2220      	movs	r2, #32
 8004d86:	4013      	ands	r3, r2
 8004d88:	d008      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	0899      	lsrs	r1, r3, #2
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2208      	movs	r2, #8
 8004da2:	4013      	ands	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004da6:	4b17      	ldr	r3, [pc, #92]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	4a1c      	ldr	r2, [pc, #112]	@ (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	0019      	movs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	4b13      	ldr	r3, [pc, #76]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004db6:	430a      	orrs	r2, r1
 8004db8:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc8:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	0019      	movs	r1, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2280      	movs	r2, #128	@ 0x80
 8004dde:	4013      	ands	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004de2:	4b08      	ldr	r3, [pc, #32]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	22e0      	movs	r2, #224	@ 0xe0
 8004de8:	4393      	bics	r3, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004df6:	2312      	movs	r3, #18
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
}
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b006      	add	sp, #24
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000
 8004e08:	fffffcff 	.word	0xfffffcff
 8004e0c:	fffeffff 	.word	0xfffeffff
 8004e10:	00001388 	.word	0x00001388
 8004e14:	efffffff 	.word	0xefffffff
 8004e18:	ffffcfff 	.word	0xffffcfff
 8004e1c:	ffffefff 	.word	0xffffefff
 8004e20:	ffff3fff 	.word	0xffff3fff

08004e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0a8      	b.n	8004f88 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	2382      	movs	r3, #130	@ 0x82
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d009      	beq.n	8004e5e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	61da      	str	r2, [r3, #28]
 8004e50:	e005      	b.n	8004e5e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	225d      	movs	r2, #93	@ 0x5d
 8004e68:	5c9b      	ldrb	r3, [r3, r2]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	225c      	movs	r2, #92	@ 0x5c
 8004e74:	2100      	movs	r1, #0
 8004e76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7fc fef6 	bl	8001c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	225d      	movs	r2, #93	@ 0x5d
 8004e84:	2102      	movs	r1, #2
 8004e86:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2140      	movs	r1, #64	@ 0x40
 8004e94:	438a      	bics	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	23e0      	movs	r3, #224	@ 0xe0
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d902      	bls.n	8004eaa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e002      	b.n	8004eb0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004eaa:	2380      	movs	r3, #128	@ 0x80
 8004eac:	015b      	lsls	r3, r3, #5
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	23f0      	movs	r3, #240	@ 0xf0
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d008      	beq.n	8004ece <HAL_SPI_Init+0xaa>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	23e0      	movs	r3, #224	@ 0xe0
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d002      	beq.n	8004ece <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	2382      	movs	r3, #130	@ 0x82
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6899      	ldr	r1, [r3, #8]
 8004edc:	2384      	movs	r3, #132	@ 0x84
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	400b      	ands	r3, r1
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2102      	movs	r1, #2
 8004eea:	400b      	ands	r3, r1
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	400b      	ands	r3, r1
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6999      	ldr	r1, [r3, #24]
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	400b      	ands	r3, r1
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2138      	movs	r1, #56	@ 0x38
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	400b      	ands	r3, r1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	0011      	movs	r1, r2
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f1e:	2380      	movs	r3, #128	@ 0x80
 8004f20:	019b      	lsls	r3, r3, #6
 8004f22:	401a      	ands	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	2204      	movs	r2, #4
 8004f34:	401a      	ands	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	2110      	movs	r1, #16
 8004f3c:	400b      	ands	r3, r1
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f44:	2108      	movs	r1, #8
 8004f46:	400b      	ands	r3, r1
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68d9      	ldr	r1, [r3, #12]
 8004f4e:	23f0      	movs	r3, #240	@ 0xf0
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	400b      	ands	r3, r1
 8004f54:	431a      	orrs	r2, r3
 8004f56:	0011      	movs	r1, r2
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	2380      	movs	r3, #128	@ 0x80
 8004f5c:	015b      	lsls	r3, r3, #5
 8004f5e:	401a      	ands	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4907      	ldr	r1, [pc, #28]	@ (8004f90 <HAL_SPI_Init+0x16c>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	225d      	movs	r2, #93	@ 0x5d
 8004f82:	2101      	movs	r1, #1
 8004f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b004      	add	sp, #16
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	fffff7ff 	.word	0xfffff7ff

08004f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e04a      	b.n	800503c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	223d      	movs	r2, #61	@ 0x3d
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d107      	bne.n	8004fc2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	223c      	movs	r2, #60	@ 0x3c
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f7fc fefb 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	223d      	movs	r2, #61	@ 0x3d
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	0010      	movs	r0, r2
 8004fd6:	f000 f98d 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2248      	movs	r2, #72	@ 0x48
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	223e      	movs	r2, #62	@ 0x3e
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	223f      	movs	r2, #63	@ 0x3f
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2240      	movs	r2, #64	@ 0x40
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2241      	movs	r2, #65	@ 0x41
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2242      	movs	r2, #66	@ 0x42
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2243      	movs	r2, #67	@ 0x43
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2244      	movs	r2, #68	@ 0x44
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2245      	movs	r2, #69	@ 0x45
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2246      	movs	r2, #70	@ 0x46
 8005026:	2101      	movs	r1, #1
 8005028:	5499      	strb	r1, [r3, r2]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2247      	movs	r2, #71	@ 0x47
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	223d      	movs	r2, #61	@ 0x3d
 8005036:	2101      	movs	r1, #1
 8005038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	0018      	movs	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	b002      	add	sp, #8
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e04a      	b.n	80050ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	223d      	movs	r2, #61	@ 0x3d
 800505a:	5c9b      	ldrb	r3, [r3, r2]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d107      	bne.n	8005072 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	223c      	movs	r2, #60	@ 0x3c
 8005066:	2100      	movs	r1, #0
 8005068:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	0018      	movs	r0, r3
 800506e:	f7fc fe83 	bl	8001d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	223d      	movs	r2, #61	@ 0x3d
 8005076:	2102      	movs	r1, #2
 8005078:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	0019      	movs	r1, r3
 8005084:	0010      	movs	r0, r2
 8005086:	f000 f935 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2248      	movs	r2, #72	@ 0x48
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	223e      	movs	r2, #62	@ 0x3e
 8005096:	2101      	movs	r1, #1
 8005098:	5499      	strb	r1, [r3, r2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	223f      	movs	r2, #63	@ 0x3f
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2240      	movs	r2, #64	@ 0x40
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2241      	movs	r2, #65	@ 0x41
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2242      	movs	r2, #66	@ 0x42
 80050b6:	2101      	movs	r1, #1
 80050b8:	5499      	strb	r1, [r3, r2]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2243      	movs	r2, #67	@ 0x43
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2244      	movs	r2, #68	@ 0x44
 80050c6:	2101      	movs	r1, #1
 80050c8:	5499      	strb	r1, [r3, r2]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2245      	movs	r2, #69	@ 0x45
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2246      	movs	r2, #70	@ 0x46
 80050d6:	2101      	movs	r1, #1
 80050d8:	5499      	strb	r1, [r3, r2]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2247      	movs	r2, #71	@ 0x47
 80050de:	2101      	movs	r1, #1
 80050e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	223d      	movs	r2, #61	@ 0x3d
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005100:	2317      	movs	r3, #23
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	223c      	movs	r2, #60	@ 0x3c
 800510c:	5c9b      	ldrb	r3, [r3, r2]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005112:	2302      	movs	r3, #2
 8005114:	e0e5      	b.n	80052e2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	223c      	movs	r2, #60	@ 0x3c
 800511a:	2101      	movs	r1, #1
 800511c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b14      	cmp	r3, #20
 8005122:	d900      	bls.n	8005126 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005124:	e0d1      	b.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	009a      	lsls	r2, r3, #2
 800512a:	4b70      	ldr	r3, [pc, #448]	@ (80052ec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0011      	movs	r1, r2
 800513a:	0018      	movs	r0, r3
 800513c:	f000 f95e 	bl	80053fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2108      	movs	r1, #8
 800514c:	430a      	orrs	r2, r1
 800514e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2104      	movs	r1, #4
 800515c:	438a      	bics	r2, r1
 800515e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	619a      	str	r2, [r3, #24]
      break;
 8005172:	e0af      	b.n	80052d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	0011      	movs	r1, r2
 800517c:	0018      	movs	r0, r3
 800517e:	f000 f9bd 	bl	80054fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2180      	movs	r1, #128	@ 0x80
 800518e:	0109      	lsls	r1, r1, #4
 8005190:	430a      	orrs	r2, r1
 8005192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4954      	ldr	r1, [pc, #336]	@ (80052f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80051a0:	400a      	ands	r2, r1
 80051a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6999      	ldr	r1, [r3, #24]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	619a      	str	r2, [r3, #24]
      break;
 80051b8:	e08c      	b.n	80052d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	0011      	movs	r1, r2
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 fa18 	bl	80055f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2108      	movs	r1, #8
 80051d4:	430a      	orrs	r2, r1
 80051d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2104      	movs	r1, #4
 80051e4:	438a      	bics	r2, r1
 80051e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69d9      	ldr	r1, [r3, #28]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	61da      	str	r2, [r3, #28]
      break;
 80051fa:	e06b      	b.n	80052d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	0011      	movs	r1, r2
 8005204:	0018      	movs	r0, r3
 8005206:	f000 fa79 	bl	80056fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2180      	movs	r1, #128	@ 0x80
 8005216:	0109      	lsls	r1, r1, #4
 8005218:	430a      	orrs	r2, r1
 800521a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4932      	ldr	r1, [pc, #200]	@ (80052f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005228:	400a      	ands	r2, r1
 800522a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69d9      	ldr	r1, [r3, #28]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	021a      	lsls	r2, r3, #8
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	61da      	str	r2, [r3, #28]
      break;
 8005240:	e048      	b.n	80052d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	0011      	movs	r1, r2
 800524a:	0018      	movs	r0, r3
 800524c:	f000 faba 	bl	80057c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2108      	movs	r1, #8
 800525c:	430a      	orrs	r2, r1
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2104      	movs	r1, #4
 800526c:	438a      	bics	r2, r1
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005282:	e027      	b.n	80052d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	0011      	movs	r1, r2
 800528c:	0018      	movs	r0, r3
 800528e:	f000 faf3 	bl	8005878 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2180      	movs	r1, #128	@ 0x80
 800529e:	0109      	lsls	r1, r1, #4
 80052a0:	430a      	orrs	r2, r1
 80052a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4910      	ldr	r1, [pc, #64]	@ (80052f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052c8:	e004      	b.n	80052d4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80052ca:	2317      	movs	r3, #23
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	223c      	movs	r2, #60	@ 0x3c
 80052d8:	2100      	movs	r1, #0
 80052da:	5499      	strb	r1, [r3, r2]

  return status;
 80052dc:	2317      	movs	r3, #23
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	781b      	ldrb	r3, [r3, #0]
}
 80052e2:	0018      	movs	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b006      	add	sp, #24
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	08008e2c 	.word	0x08008e2c
 80052f0:	fffffbff 	.word	0xfffffbff

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a37      	ldr	r2, [pc, #220]	@ (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d008      	beq.n	800531e <TIM_Base_SetConfig+0x2a>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	2380      	movs	r3, #128	@ 0x80
 8005310:	05db      	lsls	r3, r3, #23
 8005312:	429a      	cmp	r2, r3
 8005314:	d003      	beq.n	800531e <TIM_Base_SetConfig+0x2a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a33      	ldr	r2, [pc, #204]	@ (80053e8 <TIM_Base_SetConfig+0xf4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d108      	bne.n	8005330 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2270      	movs	r2, #112	@ 0x70
 8005322:	4393      	bics	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a2c      	ldr	r2, [pc, #176]	@ (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d014      	beq.n	8005362 <TIM_Base_SetConfig+0x6e>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	2380      	movs	r3, #128	@ 0x80
 800533c:	05db      	lsls	r3, r3, #23
 800533e:	429a      	cmp	r2, r3
 8005340:	d00f      	beq.n	8005362 <TIM_Base_SetConfig+0x6e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a28      	ldr	r2, [pc, #160]	@ (80053e8 <TIM_Base_SetConfig+0xf4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00b      	beq.n	8005362 <TIM_Base_SetConfig+0x6e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a27      	ldr	r2, [pc, #156]	@ (80053ec <TIM_Base_SetConfig+0xf8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d007      	beq.n	8005362 <TIM_Base_SetConfig+0x6e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <TIM_Base_SetConfig+0xfc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d003      	beq.n	8005362 <TIM_Base_SetConfig+0x6e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a25      	ldr	r2, [pc, #148]	@ (80053f4 <TIM_Base_SetConfig+0x100>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d108      	bne.n	8005374 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a24      	ldr	r2, [pc, #144]	@ (80053f8 <TIM_Base_SetConfig+0x104>)
 8005366:	4013      	ands	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2280      	movs	r2, #128	@ 0x80
 8005378:	4393      	bics	r3, r2
 800537a:	001a      	movs	r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a11      	ldr	r2, [pc, #68]	@ (80053e4 <TIM_Base_SetConfig+0xf0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_Base_SetConfig+0xbe>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a12      	ldr	r2, [pc, #72]	@ (80053f0 <TIM_Base_SetConfig+0xfc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_Base_SetConfig+0xbe>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a11      	ldr	r2, [pc, #68]	@ (80053f4 <TIM_Base_SetConfig+0x100>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d103      	bne.n	80053ba <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d106      	bne.n	80053da <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2201      	movs	r2, #1
 80053d2:	4393      	bics	r3, r2
 80053d4:	001a      	movs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]
  }
}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	46bd      	mov	sp, r7
 80053de:	b004      	add	sp, #16
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40002000 	.word	0x40002000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800
 80053f8:	fffffcff 	.word	0xfffffcff

080053fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	2201      	movs	r2, #1
 8005412:	4393      	bics	r3, r2
 8005414:	001a      	movs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a2e      	ldr	r2, [pc, #184]	@ (80054e4 <TIM_OC1_SetConfig+0xe8>)
 800542a:	4013      	ands	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2203      	movs	r2, #3
 8005432:	4393      	bics	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2202      	movs	r2, #2
 8005444:	4393      	bics	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a24      	ldr	r2, [pc, #144]	@ (80054e8 <TIM_OC1_SetConfig+0xec>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <TIM_OC1_SetConfig+0x6e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a23      	ldr	r2, [pc, #140]	@ (80054ec <TIM_OC1_SetConfig+0xf0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_OC1_SetConfig+0x6e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a22      	ldr	r2, [pc, #136]	@ (80054f0 <TIM_OC1_SetConfig+0xf4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10c      	bne.n	8005484 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2208      	movs	r2, #8
 800546e:	4393      	bics	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2204      	movs	r2, #4
 8005480:	4393      	bics	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a18      	ldr	r2, [pc, #96]	@ (80054e8 <TIM_OC1_SetConfig+0xec>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_OC1_SetConfig+0xa0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a17      	ldr	r2, [pc, #92]	@ (80054ec <TIM_OC1_SetConfig+0xf0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC1_SetConfig+0xa0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <TIM_OC1_SetConfig+0xf4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d111      	bne.n	80054c0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4a15      	ldr	r2, [pc, #84]	@ (80054f4 <TIM_OC1_SetConfig+0xf8>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4a14      	ldr	r2, [pc, #80]	@ (80054f8 <TIM_OC1_SetConfig+0xfc>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	46bd      	mov	sp, r7
 80054de:	b006      	add	sp, #24
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	fffeff8f 	.word	0xfffeff8f
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800
 80054f4:	fffffeff 	.word	0xfffffeff
 80054f8:	fffffdff 	.word	0xfffffdff

080054fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	2210      	movs	r2, #16
 8005512:	4393      	bics	r3, r2
 8005514:	001a      	movs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a2c      	ldr	r2, [pc, #176]	@ (80055dc <TIM_OC2_SetConfig+0xe0>)
 800552a:	4013      	ands	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a2b      	ldr	r2, [pc, #172]	@ (80055e0 <TIM_OC2_SetConfig+0xe4>)
 8005532:	4013      	ands	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2220      	movs	r2, #32
 8005546:	4393      	bics	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a22      	ldr	r2, [pc, #136]	@ (80055e4 <TIM_OC2_SetConfig+0xe8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10d      	bne.n	800557a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2280      	movs	r2, #128	@ 0x80
 8005562:	4393      	bics	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2240      	movs	r2, #64	@ 0x40
 8005576:	4393      	bics	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a19      	ldr	r2, [pc, #100]	@ (80055e4 <TIM_OC2_SetConfig+0xe8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_OC2_SetConfig+0x96>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a18      	ldr	r2, [pc, #96]	@ (80055e8 <TIM_OC2_SetConfig+0xec>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_OC2_SetConfig+0x96>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a17      	ldr	r2, [pc, #92]	@ (80055ec <TIM_OC2_SetConfig+0xf0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d113      	bne.n	80055ba <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4a16      	ldr	r2, [pc, #88]	@ (80055f0 <TIM_OC2_SetConfig+0xf4>)
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4a15      	ldr	r2, [pc, #84]	@ (80055f4 <TIM_OC2_SetConfig+0xf8>)
 800559e:	4013      	ands	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	46c0      	nop			@ (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b006      	add	sp, #24
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	feff8fff 	.word	0xfeff8fff
 80055e0:	fffffcff 	.word	0xfffffcff
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800
 80055f0:	fffffbff 	.word	0xfffffbff
 80055f4:	fffff7ff 	.word	0xfffff7ff

080055f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	4a31      	ldr	r2, [pc, #196]	@ (80056d4 <TIM_OC3_SetConfig+0xdc>)
 800560e:	401a      	ands	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a2d      	ldr	r2, [pc, #180]	@ (80056d8 <TIM_OC3_SetConfig+0xe0>)
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2203      	movs	r2, #3
 800562c:	4393      	bics	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4a27      	ldr	r2, [pc, #156]	@ (80056dc <TIM_OC3_SetConfig+0xe4>)
 800563e:	4013      	ands	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a23      	ldr	r2, [pc, #140]	@ (80056e0 <TIM_OC3_SetConfig+0xe8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d10d      	bne.n	8005672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4a22      	ldr	r2, [pc, #136]	@ (80056e4 <TIM_OC3_SetConfig+0xec>)
 800565a:	4013      	ands	r3, r2
 800565c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4a1e      	ldr	r2, [pc, #120]	@ (80056e8 <TIM_OC3_SetConfig+0xf0>)
 800566e:	4013      	ands	r3, r2
 8005670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1a      	ldr	r2, [pc, #104]	@ (80056e0 <TIM_OC3_SetConfig+0xe8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_OC3_SetConfig+0x92>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a1b      	ldr	r2, [pc, #108]	@ (80056ec <TIM_OC3_SetConfig+0xf4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_OC3_SetConfig+0x92>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a1a      	ldr	r2, [pc, #104]	@ (80056f0 <TIM_OC3_SetConfig+0xf8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d113      	bne.n	80056b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4a19      	ldr	r2, [pc, #100]	@ (80056f4 <TIM_OC3_SetConfig+0xfc>)
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4a18      	ldr	r2, [pc, #96]	@ (80056f8 <TIM_OC3_SetConfig+0x100>)
 8005696:	4013      	ands	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	46c0      	nop			@ (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b006      	add	sp, #24
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	fffffeff 	.word	0xfffffeff
 80056d8:	fffeff8f 	.word	0xfffeff8f
 80056dc:	fffffdff 	.word	0xfffffdff
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	fffff7ff 	.word	0xfffff7ff
 80056e8:	fffffbff 	.word	0xfffffbff
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800
 80056f4:	ffffefff 	.word	0xffffefff
 80056f8:	ffffdfff 	.word	0xffffdfff

080056fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <TIM_OC4_SetConfig+0xa8>)
 8005712:	401a      	ands	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a20      	ldr	r2, [pc, #128]	@ (80057a8 <TIM_OC4_SetConfig+0xac>)
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a1f      	ldr	r2, [pc, #124]	@ (80057ac <TIM_OC4_SetConfig+0xb0>)
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <TIM_OC4_SetConfig+0xb4>)
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	031b      	lsls	r3, r3, #12
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a17      	ldr	r2, [pc, #92]	@ (80057b4 <TIM_OC4_SetConfig+0xb8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <TIM_OC4_SetConfig+0x70>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a16      	ldr	r2, [pc, #88]	@ (80057b8 <TIM_OC4_SetConfig+0xbc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC4_SetConfig+0x70>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a15      	ldr	r2, [pc, #84]	@ (80057bc <TIM_OC4_SetConfig+0xc0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d109      	bne.n	8005780 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	4a14      	ldr	r2, [pc, #80]	@ (80057c0 <TIM_OC4_SetConfig+0xc4>)
 8005770:	4013      	ands	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	019b      	lsls	r3, r3, #6
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	46c0      	nop			@ (mov r8, r8)
 800579c:	46bd      	mov	sp, r7
 800579e:	b006      	add	sp, #24
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	ffffefff 	.word	0xffffefff
 80057a8:	feff8fff 	.word	0xfeff8fff
 80057ac:	fffffcff 	.word	0xfffffcff
 80057b0:	ffffdfff 	.word	0xffffdfff
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800
 80057c0:	ffffbfff 	.word	0xffffbfff

080057c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	4a21      	ldr	r2, [pc, #132]	@ (8005860 <TIM_OC5_SetConfig+0x9c>)
 80057da:	401a      	ands	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005864 <TIM_OC5_SetConfig+0xa0>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4a19      	ldr	r2, [pc, #100]	@ (8005868 <TIM_OC5_SetConfig+0xa4>)
 8005802:	4013      	ands	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a15      	ldr	r2, [pc, #84]	@ (800586c <TIM_OC5_SetConfig+0xa8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_OC5_SetConfig+0x66>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a14      	ldr	r2, [pc, #80]	@ (8005870 <TIM_OC5_SetConfig+0xac>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_OC5_SetConfig+0x66>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a13      	ldr	r2, [pc, #76]	@ (8005874 <TIM_OC5_SetConfig+0xb0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d109      	bne.n	800583e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4a0c      	ldr	r2, [pc, #48]	@ (8005860 <TIM_OC5_SetConfig+0x9c>)
 800582e:	4013      	ands	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	46c0      	nop			@ (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b006      	add	sp, #24
 800585e:	bd80      	pop	{r7, pc}
 8005860:	fffeffff 	.word	0xfffeffff
 8005864:	fffeff8f 	.word	0xfffeff8f
 8005868:	fffdffff 	.word	0xfffdffff
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800

08005878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	4a22      	ldr	r2, [pc, #136]	@ (8005918 <TIM_OC6_SetConfig+0xa0>)
 800588e:	401a      	ands	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	@ (800591c <TIM_OC6_SetConfig+0xa4>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005920 <TIM_OC6_SetConfig+0xa8>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	051b      	lsls	r3, r3, #20
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <TIM_OC6_SetConfig+0xac>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_OC6_SetConfig+0x68>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a15      	ldr	r2, [pc, #84]	@ (8005928 <TIM_OC6_SetConfig+0xb0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC6_SetConfig+0x68>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a14      	ldr	r2, [pc, #80]	@ (800592c <TIM_OC6_SetConfig+0xb4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d109      	bne.n	80058f4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	4a13      	ldr	r2, [pc, #76]	@ (8005930 <TIM_OC6_SetConfig+0xb8>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	029b      	lsls	r3, r3, #10
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	46bd      	mov	sp, r7
 8005912:	b006      	add	sp, #24
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	ffefffff 	.word	0xffefffff
 800591c:	feff8fff 	.word	0xfeff8fff
 8005920:	ffdfffff 	.word	0xffdfffff
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800
 8005930:	fffbffff 	.word	0xfffbffff

08005934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	223c      	movs	r2, #60	@ 0x3c
 8005942:	5c9b      	ldrb	r3, [r3, r2]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e050      	b.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	223c      	movs	r2, #60	@ 0x3c
 8005950:	2101      	movs	r1, #1
 8005952:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	223d      	movs	r2, #61	@ 0x3d
 8005958:	2102      	movs	r1, #2
 800595a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a21      	ldr	r2, [pc, #132]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d108      	bne.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4a20      	ldr	r2, [pc, #128]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800597a:	4013      	ands	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2270      	movs	r2, #112	@ 0x70
 800598c:	4393      	bics	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a14      	ldr	r2, [pc, #80]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00a      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	05db      	lsls	r3, r3, #23
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a10      	ldr	r2, [pc, #64]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10c      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2280      	movs	r2, #128	@ 0x80
 80059c6:	4393      	bics	r3, r2
 80059c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223d      	movs	r2, #61	@ 0x3d
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	223c      	movs	r2, #60	@ 0x3c
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b004      	add	sp, #16
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	ff0fffff 	.word	0xff0fffff
 8005a00:	40000400 	.word	0x40000400

08005a04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	223c      	movs	r2, #60	@ 0x3c
 8005a16:	5c9b      	ldrb	r3, [r3, r2]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e06f      	b.n	8005b00 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	223c      	movs	r2, #60	@ 0x3c
 8005a24:	2101      	movs	r1, #1
 8005a26:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22ff      	movs	r2, #255	@ 0xff
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	001a      	movs	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a33      	ldr	r2, [pc, #204]	@ (8005b08 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005a3c:	401a      	ands	r2, r3
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4a30      	ldr	r2, [pc, #192]	@ (8005b0c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a2e      	ldr	r2, [pc, #184]	@ (8005b10 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005a58:	401a      	ands	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a2b      	ldr	r2, [pc, #172]	@ (8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005a66:	401a      	ands	r2, r3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a29      	ldr	r2, [pc, #164]	@ (8005b18 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005a74:	401a      	ands	r2, r3
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a26      	ldr	r2, [pc, #152]	@ (8005b1c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005a82:	401a      	ands	r2, r3
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a24      	ldr	r2, [pc, #144]	@ (8005b20 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005a90:	401a      	ands	r2, r3
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a21      	ldr	r2, [pc, #132]	@ (8005b24 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1e      	ldr	r2, [pc, #120]	@ (8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d11c      	bne.n	8005aee <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005ab8:	401a      	ands	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	051b      	lsls	r3, r3, #20
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b30 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005ac8:	401a      	ands	r2, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	@ (8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	@ (8005b38 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	223c      	movs	r2, #60	@ 0x3c
 8005afa:	2100      	movs	r1, #0
 8005afc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b004      	add	sp, #16
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	fffffcff 	.word	0xfffffcff
 8005b0c:	fffffbff 	.word	0xfffffbff
 8005b10:	fffff7ff 	.word	0xfffff7ff
 8005b14:	ffffefff 	.word	0xffffefff
 8005b18:	ffffdfff 	.word	0xffffdfff
 8005b1c:	ffffbfff 	.word	0xffffbfff
 8005b20:	fff0ffff 	.word	0xfff0ffff
 8005b24:	efffffff 	.word	0xefffffff
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	ff0fffff 	.word	0xff0fffff
 8005b30:	feffffff 	.word	0xfeffffff
 8005b34:	fdffffff 	.word	0xfdffffff
 8005b38:	dfffffff 	.word	0xdfffffff

08005b3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08c      	sub	sp, #48	@ 0x30
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	1dbb      	adds	r3, r7, #6
 8005b48:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2288      	movs	r2, #136	@ 0x88
 8005b4e:	589b      	ldr	r3, [r3, r2]
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d000      	beq.n	8005b56 <HAL_UART_Transmit_IT+0x1a>
 8005b54:	e08d      	b.n	8005c72 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_UART_Transmit_IT+0x28>
 8005b5c:	1dbb      	adds	r3, r7, #6
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e085      	b.n	8005c74 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	2380      	movs	r3, #128	@ 0x80
 8005b6e:	015b      	lsls	r3, r3, #5
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d109      	bne.n	8005b88 <HAL_UART_Transmit_IT+0x4c>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4013      	ands	r3, r2
 8005b82:	d001      	beq.n	8005b88 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e075      	b.n	8005c74 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1dba      	adds	r2, r7, #6
 8005b92:	2154      	movs	r1, #84	@ 0x54
 8005b94:	8812      	ldrh	r2, [r2, #0]
 8005b96:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	1dba      	adds	r2, r7, #6
 8005b9c:	2156      	movs	r1, #86	@ 0x56
 8005b9e:	8812      	ldrh	r2, [r2, #0]
 8005ba0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2290      	movs	r2, #144	@ 0x90
 8005bac:	2100      	movs	r1, #0
 8005bae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2288      	movs	r2, #136	@ 0x88
 8005bb4:	2121      	movs	r1, #33	@ 0x21
 8005bb6:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005bbc:	2380      	movs	r3, #128	@ 0x80
 8005bbe:	059b      	lsls	r3, r3, #22
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d12a      	bne.n	8005c1a <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	2380      	movs	r3, #128	@ 0x80
 8005bca:	015b      	lsls	r3, r3, #5
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d107      	bne.n	8005be0 <HAL_UART_Transmit_IT+0xa4>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a28      	ldr	r2, [pc, #160]	@ (8005c7c <HAL_UART_Transmit_IT+0x140>)
 8005bdc:	679a      	str	r2, [r3, #120]	@ 0x78
 8005bde:	e002      	b.n	8005be6 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a27      	ldr	r2, [pc, #156]	@ (8005c80 <HAL_UART_Transmit_IT+0x144>)
 8005be4:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005be6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bea:	61fb      	str	r3, [r7, #28]
  return(result);
 8005bec:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	f383 8810 	msr	PRIMASK, r3
}
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2180      	movs	r1, #128	@ 0x80
 8005c08:	0409      	lsls	r1, r1, #16
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	f383 8810 	msr	PRIMASK, r3
}
 8005c18:	e029      	b.n	8005c6e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	2380      	movs	r3, #128	@ 0x80
 8005c20:	015b      	lsls	r3, r3, #5
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d107      	bne.n	8005c36 <HAL_UART_Transmit_IT+0xfa>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a14      	ldr	r2, [pc, #80]	@ (8005c84 <HAL_UART_Transmit_IT+0x148>)
 8005c32:	679a      	str	r2, [r3, #120]	@ 0x78
 8005c34:	e002      	b.n	8005c3c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a13      	ldr	r2, [pc, #76]	@ (8005c88 <HAL_UART_Transmit_IT+0x14c>)
 8005c3a:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c40:	613b      	str	r3, [r7, #16]
  return(result);
 8005c42:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c46:	2301      	movs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f383 8810 	msr	PRIMASK, r3
}
 8005c50:	46c0      	nop			@ (mov r8, r8)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2180      	movs	r1, #128	@ 0x80
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f383 8810 	msr	PRIMASK, r3
}
 8005c6c:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005c72:	2302      	movs	r3, #2
  }
}
 8005c74:	0018      	movs	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b00c      	add	sp, #48	@ 0x30
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08007489 	.word	0x08007489
 8005c80:	0800739d 	.word	0x0800739d
 8005c84:	080072dd 	.word	0x080072dd
 8005c88:	08007229 	.word	0x08007229

08005c8c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b098      	sub	sp, #96	@ 0x60
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8005c94:	2301      	movs	r3, #1
 8005c96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c98:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8005ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca8:	f383 8810 	msr	PRIMASK, r3
}
 8005cac:	46c0      	nop			@ (mov r8, r8)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	498a      	ldr	r1, [pc, #552]	@ (8005ee4 <HAL_UART_Abort_IT+0x258>)
 8005cba:	400a      	ands	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cca:	f3ef 8310 	mrs	r3, PRIMASK
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8005cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cda:	f383 8810 	msr	PRIMASK, r3
}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	497f      	ldr	r1, [pc, #508]	@ (8005ee8 <HAL_UART_Abort_IT+0x25c>)
 8005cec:	400a      	ands	r2, r1
 8005cee:	609a      	str	r2, [r3, #8]
 8005cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d118      	bne.n	8005d36 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d04:	f3ef 8310 	mrs	r3, PRIMASK
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d0e:	2301      	movs	r3, #1
 8005d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			@ (mov r8, r8)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2110      	movs	r1, #16
 8005d26:	438a      	bics	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d30:	f383 8810 	msr	PRIMASK, r3
}
 8005d34:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00f      	beq.n	8005d5e <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2280      	movs	r2, #128	@ 0x80
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b80      	cmp	r3, #128	@ 0x80
 8005d4a:	d104      	bne.n	8005d56 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d50:	4a66      	ldr	r2, [pc, #408]	@ (8005eec <HAL_UART_Abort_IT+0x260>)
 8005d52:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d54:	e003      	b.n	8005d5e <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2280      	movs	r2, #128	@ 0x80
 8005d62:	589b      	ldr	r3, [r3, r2]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d011      	beq.n	8005d8c <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2240      	movs	r2, #64	@ 0x40
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d105      	bne.n	8005d82 <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2280      	movs	r2, #128	@ 0x80
 8005d7a:	589b      	ldr	r3, [r3, r2]
 8005d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ef0 <HAL_UART_Abort_IT+0x264>)
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d80:	e004      	b.n	8005d8c <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2280      	movs	r2, #128	@ 0x80
 8005d86:	589b      	ldr	r3, [r3, r2]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2280      	movs	r2, #128	@ 0x80
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b80      	cmp	r3, #128	@ 0x80
 8005d98:	d12a      	bne.n	8005df0 <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005da0:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da4:	2301      	movs	r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f383 8810 	msr	PRIMASK, r3
}
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00d      	beq.n	8005df0 <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7fd f9b5 	bl	8003148 <HAL_DMA_Abort_IT>
 8005dde:	1e03      	subs	r3, r0, #0
 8005de0:	d004      	beq.n	8005dec <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005de6:	2200      	movs	r2, #0
 8005de8:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dea:	e001      	b.n	8005df0 <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2240      	movs	r2, #64	@ 0x40
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b40      	cmp	r3, #64	@ 0x40
 8005dfc:	d12f      	bne.n	8005e5e <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e04:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e08:	2301      	movs	r3, #1
 8005e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f383 8810 	msr	PRIMASK, r3
}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2140      	movs	r1, #64	@ 0x40
 8005e20:	438a      	bics	r2, r1
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2280      	movs	r2, #128	@ 0x80
 8005e34:	589b      	ldr	r3, [r3, r2]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2280      	movs	r2, #128	@ 0x80
 8005e3e:	589b      	ldr	r3, [r3, r2]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f7fd f981 	bl	8003148 <HAL_DMA_Abort_IT>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d007      	beq.n	8005e5a <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2280      	movs	r2, #128	@ 0x80
 8005e4e:	589b      	ldr	r3, [r3, r2]
 8005e50:	2200      	movs	r2, #0
 8005e52:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8005e54:	2301      	movs	r3, #1
 8005e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e58:	e001      	b.n	8005e5e <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8005e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d13a      	bne.n	8005eda <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2256      	movs	r2, #86	@ 0x56
 8005e68:	2100      	movs	r1, #0
 8005e6a:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	225e      	movs	r2, #94	@ 0x5e
 8005e70:	2100      	movs	r1, #0
 8005e72:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2290      	movs	r2, #144	@ 0x90
 8005e84:	2100      	movs	r1, #0
 8005e86:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005e94:	2380      	movs	r3, #128	@ 0x80
 8005e96:	059b      	lsls	r3, r3, #22
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d107      	bne.n	8005eac <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2110      	movs	r1, #16
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2108      	movs	r1, #8
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2288      	movs	r2, #136	@ 0x88
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	228c      	movs	r2, #140	@ 0x8c
 8005ec8:	2120      	movs	r1, #32
 8005eca:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 fb6b 	bl	80065b0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	0018      	movs	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b018      	add	sp, #96	@ 0x60
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	fffffe1f 	.word	0xfffffe1f
 8005ee8:	ef7ffffe 	.word	0xef7ffffe
 8005eec:	08007117 	.word	0x08007117
 8005ef0:	080071a7 	.word	0x080071a7

08005ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef4:	b5b0      	push	{r4, r5, r7, lr}
 8005ef6:	b0aa      	sub	sp, #168	@ 0xa8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	22a4      	movs	r2, #164	@ 0xa4
 8005f04:	18b9      	adds	r1, r7, r2
 8005f06:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	20a0      	movs	r0, #160	@ 0xa0
 8005f10:	1839      	adds	r1, r7, r0
 8005f12:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	249c      	movs	r4, #156	@ 0x9c
 8005f1c:	1939      	adds	r1, r7, r4
 8005f1e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f20:	0011      	movs	r1, r2
 8005f22:	18bb      	adds	r3, r7, r2
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4aa2      	ldr	r2, [pc, #648]	@ (80061b0 <HAL_UART_IRQHandler+0x2bc>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2298      	movs	r2, #152	@ 0x98
 8005f2c:	18bd      	adds	r5, r7, r2
 8005f2e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005f30:	18bb      	adds	r3, r7, r2
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11a      	bne.n	8005f6e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d015      	beq.n	8005f6e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f42:	183b      	adds	r3, r7, r0
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2220      	movs	r2, #32
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d105      	bne.n	8005f58 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f4c:	193b      	adds	r3, r7, r4
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	2380      	movs	r3, #128	@ 0x80
 8005f52:	055b      	lsls	r3, r3, #21
 8005f54:	4013      	ands	r3, r2
 8005f56:	d00a      	beq.n	8005f6e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d100      	bne.n	8005f62 <HAL_UART_IRQHandler+0x6e>
 8005f60:	e2fb      	b.n	800655a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	0010      	movs	r0, r2
 8005f6a:	4798      	blx	r3
      }
      return;
 8005f6c:	e2f5      	b.n	800655a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f6e:	2398      	movs	r3, #152	@ 0x98
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d100      	bne.n	8005f7a <HAL_UART_IRQHandler+0x86>
 8005f78:	e122      	b.n	80061c0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f7a:	239c      	movs	r3, #156	@ 0x9c
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a8c      	ldr	r2, [pc, #560]	@ (80061b4 <HAL_UART_IRQHandler+0x2c0>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	d106      	bne.n	8005f94 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f86:	23a0      	movs	r3, #160	@ 0xa0
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a8a      	ldr	r2, [pc, #552]	@ (80061b8 <HAL_UART_IRQHandler+0x2c4>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d100      	bne.n	8005f94 <HAL_UART_IRQHandler+0xa0>
 8005f92:	e115      	b.n	80061c0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f94:	23a4      	movs	r3, #164	@ 0xa4
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d012      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xd2>
 8005fa0:	23a0      	movs	r3, #160	@ 0xa0
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4013      	ands	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2290      	movs	r2, #144	@ 0x90
 8005fba:	589b      	ldr	r3, [r3, r2]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2190      	movs	r1, #144	@ 0x90
 8005fc4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc6:	23a4      	movs	r3, #164	@ 0xa4
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d011      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x102>
 8005fd2:	239c      	movs	r3, #156	@ 0x9c
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2290      	movs	r2, #144	@ 0x90
 8005fea:	589b      	ldr	r3, [r3, r2]
 8005fec:	2204      	movs	r2, #4
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2190      	movs	r1, #144	@ 0x90
 8005ff4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ff6:	23a4      	movs	r3, #164	@ 0xa4
 8005ff8:	18fb      	adds	r3, r7, r3
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	4013      	ands	r3, r2
 8006000:	d011      	beq.n	8006026 <HAL_UART_IRQHandler+0x132>
 8006002:	239c      	movs	r3, #156	@ 0x9c
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2201      	movs	r2, #1
 800600a:	4013      	ands	r3, r2
 800600c:	d00b      	beq.n	8006026 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2204      	movs	r2, #4
 8006014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2290      	movs	r2, #144	@ 0x90
 800601a:	589b      	ldr	r3, [r3, r2]
 800601c:	2202      	movs	r2, #2
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2190      	movs	r1, #144	@ 0x90
 8006024:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006026:	23a4      	movs	r3, #164	@ 0xa4
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2208      	movs	r2, #8
 800602e:	4013      	ands	r3, r2
 8006030:	d017      	beq.n	8006062 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006032:	23a0      	movs	r3, #160	@ 0xa0
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2220      	movs	r2, #32
 800603a:	4013      	ands	r3, r2
 800603c:	d105      	bne.n	800604a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800603e:	239c      	movs	r3, #156	@ 0x9c
 8006040:	18fb      	adds	r3, r7, r3
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a5b      	ldr	r2, [pc, #364]	@ (80061b4 <HAL_UART_IRQHandler+0x2c0>)
 8006046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006048:	d00b      	beq.n	8006062 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2208      	movs	r2, #8
 8006050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2290      	movs	r2, #144	@ 0x90
 8006056:	589b      	ldr	r3, [r3, r2]
 8006058:	2208      	movs	r2, #8
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2190      	movs	r1, #144	@ 0x90
 8006060:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006062:	23a4      	movs	r3, #164	@ 0xa4
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	4013      	ands	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_UART_IRQHandler+0x1a4>
 8006070:	23a0      	movs	r3, #160	@ 0xa0
 8006072:	18fb      	adds	r3, r7, r3
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	2380      	movs	r3, #128	@ 0x80
 8006078:	04db      	lsls	r3, r3, #19
 800607a:	4013      	ands	r3, r2
 800607c:	d00c      	beq.n	8006098 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2280      	movs	r2, #128	@ 0x80
 8006084:	0112      	lsls	r2, r2, #4
 8006086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2290      	movs	r2, #144	@ 0x90
 800608c:	589b      	ldr	r3, [r3, r2]
 800608e:	2220      	movs	r2, #32
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2190      	movs	r1, #144	@ 0x90
 8006096:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2290      	movs	r2, #144	@ 0x90
 800609c:	589b      	ldr	r3, [r3, r2]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d100      	bne.n	80060a4 <HAL_UART_IRQHandler+0x1b0>
 80060a2:	e25c      	b.n	800655e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060a4:	23a4      	movs	r3, #164	@ 0xa4
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2220      	movs	r2, #32
 80060ac:	4013      	ands	r3, r2
 80060ae:	d015      	beq.n	80060dc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060b0:	23a0      	movs	r3, #160	@ 0xa0
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2220      	movs	r2, #32
 80060b8:	4013      	ands	r3, r2
 80060ba:	d106      	bne.n	80060ca <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060bc:	239c      	movs	r3, #156	@ 0x9c
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	2380      	movs	r3, #128	@ 0x80
 80060c4:	055b      	lsls	r3, r3, #21
 80060c6:	4013      	ands	r3, r2
 80060c8:	d008      	beq.n	80060dc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	0010      	movs	r0, r2
 80060da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2290      	movs	r2, #144	@ 0x90
 80060e0:	589b      	ldr	r3, [r3, r2]
 80060e2:	2194      	movs	r1, #148	@ 0x94
 80060e4:	187a      	adds	r2, r7, r1
 80060e6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2240      	movs	r2, #64	@ 0x40
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b40      	cmp	r3, #64	@ 0x40
 80060f4:	d004      	beq.n	8006100 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060f6:	187b      	adds	r3, r7, r1
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2228      	movs	r2, #40	@ 0x28
 80060fc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060fe:	d04c      	beq.n	800619a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 fe8e 	bl	8006e24 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2240      	movs	r2, #64	@ 0x40
 8006110:	4013      	ands	r3, r2
 8006112:	2b40      	cmp	r3, #64	@ 0x40
 8006114:	d13c      	bne.n	8006190 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006116:	f3ef 8310 	mrs	r3, PRIMASK
 800611a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800611c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	2090      	movs	r0, #144	@ 0x90
 8006120:	183a      	adds	r2, r7, r0
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	2301      	movs	r3, #1
 8006126:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800612a:	f383 8810 	msr	PRIMASK, r3
}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2140      	movs	r1, #64	@ 0x40
 800613c:	438a      	bics	r2, r1
 800613e:	609a      	str	r2, [r3, #8]
 8006140:	183b      	adds	r3, r7, r0
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006148:	f383 8810 	msr	PRIMASK, r3
}
 800614c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2280      	movs	r2, #128	@ 0x80
 8006152:	589b      	ldr	r3, [r3, r2]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d016      	beq.n	8006186 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2280      	movs	r2, #128	@ 0x80
 800615c:	589b      	ldr	r3, [r3, r2]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <HAL_UART_IRQHandler+0x2c8>)
 8006160:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2280      	movs	r2, #128	@ 0x80
 8006166:	589b      	ldr	r3, [r3, r2]
 8006168:	0018      	movs	r0, r3
 800616a:	f7fc ffed 	bl	8003148 <HAL_DMA_Abort_IT>
 800616e:	1e03      	subs	r3, r0, #0
 8006170:	d01c      	beq.n	80061ac <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2280      	movs	r2, #128	@ 0x80
 8006176:	589b      	ldr	r3, [r3, r2]
 8006178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	2180      	movs	r1, #128	@ 0x80
 800617e:	5852      	ldr	r2, [r2, r1]
 8006180:	0010      	movs	r0, r2
 8006182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006184:	e012      	b.n	80061ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	0018      	movs	r0, r3
 800618a:	f000 fa09 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618e:	e00d      	b.n	80061ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0018      	movs	r0, r3
 8006194:	f000 fa04 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	e008      	b.n	80061ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f9ff 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2290      	movs	r2, #144	@ 0x90
 80061a6:	2100      	movs	r1, #0
 80061a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80061aa:	e1d8      	b.n	800655e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	46c0      	nop			@ (mov r8, r8)
    return;
 80061ae:	e1d6      	b.n	800655e <HAL_UART_IRQHandler+0x66a>
 80061b0:	0000080f 	.word	0x0000080f
 80061b4:	10000001 	.word	0x10000001
 80061b8:	04000120 	.word	0x04000120
 80061bc:	080070e9 	.word	0x080070e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d000      	beq.n	80061ca <HAL_UART_IRQHandler+0x2d6>
 80061c8:	e15d      	b.n	8006486 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061ca:	23a4      	movs	r3, #164	@ 0xa4
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	4013      	ands	r3, r2
 80061d4:	d100      	bne.n	80061d8 <HAL_UART_IRQHandler+0x2e4>
 80061d6:	e156      	b.n	8006486 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061d8:	23a0      	movs	r3, #160	@ 0xa0
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2210      	movs	r2, #16
 80061e0:	4013      	ands	r3, r2
 80061e2:	d100      	bne.n	80061e6 <HAL_UART_IRQHandler+0x2f2>
 80061e4:	e14f      	b.n	8006486 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2210      	movs	r2, #16
 80061ec:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2240      	movs	r2, #64	@ 0x40
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b40      	cmp	r3, #64	@ 0x40
 80061fa:	d000      	beq.n	80061fe <HAL_UART_IRQHandler+0x30a>
 80061fc:	e0c3      	b.n	8006386 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2280      	movs	r2, #128	@ 0x80
 8006202:	589b      	ldr	r3, [r3, r2]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	217e      	movs	r1, #126	@ 0x7e
 800620a:	187b      	adds	r3, r7, r1
 800620c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800620e:	187b      	adds	r3, r7, r1
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d100      	bne.n	8006218 <HAL_UART_IRQHandler+0x324>
 8006216:	e097      	b.n	8006348 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	225c      	movs	r2, #92	@ 0x5c
 800621c:	5a9b      	ldrh	r3, [r3, r2]
 800621e:	187a      	adds	r2, r7, r1
 8006220:	8812      	ldrh	r2, [r2, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d300      	bcc.n	8006228 <HAL_UART_IRQHandler+0x334>
 8006226:	e08f      	b.n	8006348 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	187a      	adds	r2, r7, r1
 800622c:	215e      	movs	r1, #94	@ 0x5e
 800622e:	8812      	ldrh	r2, [r2, #0]
 8006230:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2280      	movs	r2, #128	@ 0x80
 8006236:	589b      	ldr	r3, [r3, r2]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2220      	movs	r2, #32
 800623e:	4013      	ands	r3, r2
 8006240:	d170      	bne.n	8006324 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006242:	f3ef 8310 	mrs	r3, PRIMASK
 8006246:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800624a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800624c:	2301      	movs	r3, #1
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006252:	f383 8810 	msr	PRIMASK, r3
}
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	49c4      	ldr	r1, [pc, #784]	@ (8006574 <HAL_UART_IRQHandler+0x680>)
 8006264:	400a      	ands	r2, r1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	f383 8810 	msr	PRIMASK, r3
}
 8006272:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006274:	f3ef 8310 	mrs	r3, PRIMASK
 8006278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800627a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627c:	677b      	str	r3, [r7, #116]	@ 0x74
 800627e:	2301      	movs	r3, #1
 8006280:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006284:	f383 8810 	msr	PRIMASK, r3
}
 8006288:	46c0      	nop			@ (mov r8, r8)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2101      	movs	r1, #1
 8006296:	438a      	bics	r2, r1
 8006298:	609a      	str	r2, [r3, #8]
 800629a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800629c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a0:	f383 8810 	msr	PRIMASK, r3
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80062a6:	f3ef 8310 	mrs	r3, PRIMASK
 80062aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80062ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80062b0:	2301      	movs	r3, #1
 80062b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062b6:	f383 8810 	msr	PRIMASK, r3
}
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2140      	movs	r1, #64	@ 0x40
 80062c8:	438a      	bics	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062ce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062d2:	f383 8810 	msr	PRIMASK, r3
}
 80062d6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	228c      	movs	r2, #140	@ 0x8c
 80062dc:	2120      	movs	r1, #32
 80062de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80062e6:	f3ef 8310 	mrs	r3, PRIMASK
 80062ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80062ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062f0:	2301      	movs	r3, #1
 80062f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062f6:	f383 8810 	msr	PRIMASK, r3
}
 80062fa:	46c0      	nop			@ (mov r8, r8)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2110      	movs	r1, #16
 8006308:	438a      	bics	r2, r1
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800630e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006312:	f383 8810 	msr	PRIMASK, r3
}
 8006316:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2280      	movs	r2, #128	@ 0x80
 800631c:	589b      	ldr	r3, [r3, r2]
 800631e:	0018      	movs	r0, r3
 8006320:	f7fc feb0 	bl	8003084 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	225c      	movs	r2, #92	@ 0x5c
 800632e:	5a9a      	ldrh	r2, [r3, r2]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	215e      	movs	r1, #94	@ 0x5e
 8006334:	5a5b      	ldrh	r3, [r3, r1]
 8006336:	b29b      	uxth	r3, r3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0011      	movs	r1, r2
 8006340:	0018      	movs	r0, r3
 8006342:	f7fa fec5 	bl	80010d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006346:	e10c      	b.n	8006562 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	225c      	movs	r2, #92	@ 0x5c
 800634c:	5a9b      	ldrh	r3, [r3, r2]
 800634e:	227e      	movs	r2, #126	@ 0x7e
 8006350:	18ba      	adds	r2, r7, r2
 8006352:	8812      	ldrh	r2, [r2, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d000      	beq.n	800635a <HAL_UART_IRQHandler+0x466>
 8006358:	e103      	b.n	8006562 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2280      	movs	r2, #128	@ 0x80
 800635e:	589b      	ldr	r3, [r3, r2]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2220      	movs	r2, #32
 8006366:	4013      	ands	r3, r2
 8006368:	2b20      	cmp	r3, #32
 800636a:	d000      	beq.n	800636e <HAL_UART_IRQHandler+0x47a>
 800636c:	e0f9      	b.n	8006562 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	225c      	movs	r2, #92	@ 0x5c
 8006378:	5a9a      	ldrh	r2, [r3, r2]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0011      	movs	r1, r2
 800637e:	0018      	movs	r0, r3
 8006380:	f7fa fea6 	bl	80010d0 <HAL_UARTEx_RxEventCallback>
      return;
 8006384:	e0ed      	b.n	8006562 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	225c      	movs	r2, #92	@ 0x5c
 800638a:	5a99      	ldrh	r1, [r3, r2]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	225e      	movs	r2, #94	@ 0x5e
 8006390:	5a9b      	ldrh	r3, [r3, r2]
 8006392:	b29a      	uxth	r2, r3
 8006394:	208e      	movs	r0, #142	@ 0x8e
 8006396:	183b      	adds	r3, r7, r0
 8006398:	1a8a      	subs	r2, r1, r2
 800639a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	225e      	movs	r2, #94	@ 0x5e
 80063a0:	5a9b      	ldrh	r3, [r3, r2]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d100      	bne.n	80063aa <HAL_UART_IRQHandler+0x4b6>
 80063a8:	e0dd      	b.n	8006566 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80063aa:	183b      	adds	r3, r7, r0
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d100      	bne.n	80063b4 <HAL_UART_IRQHandler+0x4c0>
 80063b2:	e0d8      	b.n	8006566 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063b4:	f3ef 8310 	mrs	r3, PRIMASK
 80063b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063bc:	2488      	movs	r4, #136	@ 0x88
 80063be:	193a      	adds	r2, r7, r4
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	2301      	movs	r3, #1
 80063c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f383 8810 	msr	PRIMASK, r3
}
 80063cc:	46c0      	nop			@ (mov r8, r8)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4967      	ldr	r1, [pc, #412]	@ (8006578 <HAL_UART_IRQHandler+0x684>)
 80063da:	400a      	ands	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	193b      	adds	r3, r7, r4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f383 8810 	msr	PRIMASK, r3
}
 80063ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063ec:	f3ef 8310 	mrs	r3, PRIMASK
 80063f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80063f2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063f4:	2484      	movs	r4, #132	@ 0x84
 80063f6:	193a      	adds	r2, r7, r4
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	2301      	movs	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f383 8810 	msr	PRIMASK, r3
}
 8006404:	46c0      	nop			@ (mov r8, r8)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	495a      	ldr	r1, [pc, #360]	@ (800657c <HAL_UART_IRQHandler+0x688>)
 8006412:	400a      	ands	r2, r1
 8006414:	609a      	str	r2, [r3, #8]
 8006416:	193b      	adds	r3, r7, r4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f383 8810 	msr	PRIMASK, r3
}
 8006422:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	228c      	movs	r2, #140	@ 0x8c
 8006428:	2120      	movs	r1, #32
 800642a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006438:	f3ef 8310 	mrs	r3, PRIMASK
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006440:	2480      	movs	r4, #128	@ 0x80
 8006442:	193a      	adds	r2, r7, r4
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	2301      	movs	r3, #1
 8006448:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	f383 8810 	msr	PRIMASK, r3
}
 8006450:	46c0      	nop			@ (mov r8, r8)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2110      	movs	r1, #16
 800645e:	438a      	bics	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	193b      	adds	r3, r7, r4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646a:	f383 8810 	msr	PRIMASK, r3
}
 800646e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006476:	183b      	adds	r3, r7, r0
 8006478:	881a      	ldrh	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	0011      	movs	r1, r2
 800647e:	0018      	movs	r0, r3
 8006480:	f7fa fe26 	bl	80010d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006484:	e06f      	b.n	8006566 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006486:	23a4      	movs	r3, #164	@ 0xa4
 8006488:	18fb      	adds	r3, r7, r3
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	2380      	movs	r3, #128	@ 0x80
 800648e:	035b      	lsls	r3, r3, #13
 8006490:	4013      	ands	r3, r2
 8006492:	d010      	beq.n	80064b6 <HAL_UART_IRQHandler+0x5c2>
 8006494:	239c      	movs	r3, #156	@ 0x9c
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	2380      	movs	r3, #128	@ 0x80
 800649c:	03db      	lsls	r3, r3, #15
 800649e:	4013      	ands	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2280      	movs	r2, #128	@ 0x80
 80064a8:	0352      	lsls	r2, r2, #13
 80064aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	0018      	movs	r0, r3
 80064b0:	f001 f902 	bl	80076b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064b4:	e05a      	b.n	800656c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064b6:	23a4      	movs	r3, #164	@ 0xa4
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2280      	movs	r2, #128	@ 0x80
 80064be:	4013      	ands	r3, r2
 80064c0:	d016      	beq.n	80064f0 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064c2:	23a0      	movs	r3, #160	@ 0xa0
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2280      	movs	r2, #128	@ 0x80
 80064ca:	4013      	ands	r3, r2
 80064cc:	d106      	bne.n	80064dc <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064ce:	239c      	movs	r3, #156	@ 0x9c
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	2380      	movs	r3, #128	@ 0x80
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	4013      	ands	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d042      	beq.n	800656a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	0010      	movs	r0, r2
 80064ec:	4798      	blx	r3
    }
    return;
 80064ee:	e03c      	b.n	800656a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064f0:	23a4      	movs	r3, #164	@ 0xa4
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2240      	movs	r2, #64	@ 0x40
 80064f8:	4013      	ands	r3, r2
 80064fa:	d00a      	beq.n	8006512 <HAL_UART_IRQHandler+0x61e>
 80064fc:	23a0      	movs	r3, #160	@ 0xa0
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2240      	movs	r2, #64	@ 0x40
 8006504:	4013      	ands	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	0018      	movs	r0, r3
 800650c:	f001 f836 	bl	800757c <UART_EndTransmit_IT>
    return;
 8006510:	e02c      	b.n	800656c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006512:	23a4      	movs	r3, #164	@ 0xa4
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	2380      	movs	r3, #128	@ 0x80
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	4013      	ands	r3, r2
 800651e:	d00b      	beq.n	8006538 <HAL_UART_IRQHandler+0x644>
 8006520:	23a0      	movs	r3, #160	@ 0xa0
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	2380      	movs	r3, #128	@ 0x80
 8006528:	05db      	lsls	r3, r3, #23
 800652a:	4013      	ands	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	0018      	movs	r0, r3
 8006532:	f001 f8d1 	bl	80076d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006536:	e019      	b.n	800656c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006538:	23a4      	movs	r3, #164	@ 0xa4
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	045b      	lsls	r3, r3, #17
 8006542:	4013      	ands	r3, r2
 8006544:	d012      	beq.n	800656c <HAL_UART_IRQHandler+0x678>
 8006546:	23a0      	movs	r3, #160	@ 0xa0
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	da0d      	bge.n	800656c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	0018      	movs	r0, r3
 8006554:	f001 f8b8 	bl	80076c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006558:	e008      	b.n	800656c <HAL_UART_IRQHandler+0x678>
      return;
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	e006      	b.n	800656c <HAL_UART_IRQHandler+0x678>
    return;
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	e004      	b.n	800656c <HAL_UART_IRQHandler+0x678>
      return;
 8006562:	46c0      	nop			@ (mov r8, r8)
 8006564:	e002      	b.n	800656c <HAL_UART_IRQHandler+0x678>
      return;
 8006566:	46c0      	nop			@ (mov r8, r8)
 8006568:	e000      	b.n	800656c <HAL_UART_IRQHandler+0x678>
    return;
 800656a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800656c:	46bd      	mov	sp, r7
 800656e:	b02a      	add	sp, #168	@ 0xa8
 8006570:	bdb0      	pop	{r4, r5, r7, pc}
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	fffffeff 	.word	0xfffffeff
 8006578:	fffffedf 	.word	0xfffffedf
 800657c:	effffffe 	.word	0xeffffffe

08006580 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006588:	46c0      	nop			@ (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b002      	add	sp, #8
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065a8:	46c0      	nop			@ (mov r8, r8)
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b002      	add	sp, #8
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80065b8:	46c0      	nop			@ (mov r8, r8)
 80065ba:	46bd      	mov	sp, r7
 80065bc:	b002      	add	sp, #8
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065c8:	231e      	movs	r3, #30
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4aab      	ldr	r2, [pc, #684]	@ (800689c <UART_SetConfig+0x2dc>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	0019      	movs	r1, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4aa6      	ldr	r2, [pc, #664]	@ (80068a0 <UART_SetConfig+0x2e0>)
 8006606:	4013      	ands	r3, r2
 8006608:	0019      	movs	r1, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	4a9d      	ldr	r2, [pc, #628]	@ (80068a4 <UART_SetConfig+0x2e4>)
 800662e:	4013      	ands	r3, r2
 8006630:	0019      	movs	r1, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	430a      	orrs	r2, r1
 800663a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	220f      	movs	r2, #15
 8006644:	4393      	bics	r3, r2
 8006646:	0019      	movs	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a93      	ldr	r2, [pc, #588]	@ (80068a8 <UART_SetConfig+0x2e8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d127      	bne.n	80066ae <UART_SetConfig+0xee>
 800665e:	4b93      	ldr	r3, [pc, #588]	@ (80068ac <UART_SetConfig+0x2ec>)
 8006660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006662:	2203      	movs	r2, #3
 8006664:	4013      	ands	r3, r2
 8006666:	2b03      	cmp	r3, #3
 8006668:	d017      	beq.n	800669a <UART_SetConfig+0xda>
 800666a:	d81b      	bhi.n	80066a4 <UART_SetConfig+0xe4>
 800666c:	2b02      	cmp	r3, #2
 800666e:	d00a      	beq.n	8006686 <UART_SetConfig+0xc6>
 8006670:	d818      	bhi.n	80066a4 <UART_SetConfig+0xe4>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <UART_SetConfig+0xbc>
 8006676:	2b01      	cmp	r3, #1
 8006678:	d00a      	beq.n	8006690 <UART_SetConfig+0xd0>
 800667a:	e013      	b.n	80066a4 <UART_SetConfig+0xe4>
 800667c:	231f      	movs	r3, #31
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e021      	b.n	80066ca <UART_SetConfig+0x10a>
 8006686:	231f      	movs	r3, #31
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e01c      	b.n	80066ca <UART_SetConfig+0x10a>
 8006690:	231f      	movs	r3, #31
 8006692:	18fb      	adds	r3, r7, r3
 8006694:	2204      	movs	r2, #4
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e017      	b.n	80066ca <UART_SetConfig+0x10a>
 800669a:	231f      	movs	r3, #31
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	2208      	movs	r2, #8
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e012      	b.n	80066ca <UART_SetConfig+0x10a>
 80066a4:	231f      	movs	r3, #31
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	2210      	movs	r2, #16
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	e00d      	b.n	80066ca <UART_SetConfig+0x10a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7f      	ldr	r2, [pc, #508]	@ (80068b0 <UART_SetConfig+0x2f0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d104      	bne.n	80066c2 <UART_SetConfig+0x102>
 80066b8:	231f      	movs	r3, #31
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	e003      	b.n	80066ca <UART_SetConfig+0x10a>
 80066c2:	231f      	movs	r3, #31
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	2210      	movs	r2, #16
 80066c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	2380      	movs	r3, #128	@ 0x80
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d000      	beq.n	80066d8 <UART_SetConfig+0x118>
 80066d6:	e06f      	b.n	80067b8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80066d8:	231f      	movs	r3, #31
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d01f      	beq.n	8006722 <UART_SetConfig+0x162>
 80066e2:	dc22      	bgt.n	800672a <UART_SetConfig+0x16a>
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d017      	beq.n	8006718 <UART_SetConfig+0x158>
 80066e8:	dc1f      	bgt.n	800672a <UART_SetConfig+0x16a>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <UART_SetConfig+0x134>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d005      	beq.n	80066fe <UART_SetConfig+0x13e>
 80066f2:	e01a      	b.n	800672a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe fa82 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 80066f8:	0003      	movs	r3, r0
 80066fa:	61bb      	str	r3, [r7, #24]
        break;
 80066fc:	e01c      	b.n	8006738 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80066fe:	4b6b      	ldr	r3, [pc, #428]	@ (80068ac <UART_SetConfig+0x2ec>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	095b      	lsrs	r3, r3, #5
 8006704:	2207      	movs	r2, #7
 8006706:	4013      	ands	r3, r2
 8006708:	3301      	adds	r3, #1
 800670a:	0019      	movs	r1, r3
 800670c:	4869      	ldr	r0, [pc, #420]	@ (80068b4 <UART_SetConfig+0x2f4>)
 800670e:	f7f9 fd05 	bl	800011c <__udivsi3>
 8006712:	0003      	movs	r3, r0
 8006714:	61bb      	str	r3, [r7, #24]
        break;
 8006716:	e00f      	b.n	8006738 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006718:	f7fe f9fa 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 800671c:	0003      	movs	r3, r0
 800671e:	61bb      	str	r3, [r7, #24]
        break;
 8006720:	e00a      	b.n	8006738 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006722:	2380      	movs	r3, #128	@ 0x80
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	61bb      	str	r3, [r7, #24]
        break;
 8006728:	e006      	b.n	8006738 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800672e:	231e      	movs	r3, #30
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	2201      	movs	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
        break;
 8006736:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d100      	bne.n	8006740 <UART_SetConfig+0x180>
 800673e:	e097      	b.n	8006870 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006744:	4b5c      	ldr	r3, [pc, #368]	@ (80068b8 <UART_SetConfig+0x2f8>)
 8006746:	0052      	lsls	r2, r2, #1
 8006748:	5ad3      	ldrh	r3, [r2, r3]
 800674a:	0019      	movs	r1, r3
 800674c:	69b8      	ldr	r0, [r7, #24]
 800674e:	f7f9 fce5 	bl	800011c <__udivsi3>
 8006752:	0003      	movs	r3, r0
 8006754:	005a      	lsls	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	18d2      	adds	r2, r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	0019      	movs	r1, r3
 8006764:	0010      	movs	r0, r2
 8006766:	f7f9 fcd9 	bl	800011c <__udivsi3>
 800676a:	0003      	movs	r3, r0
 800676c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b0f      	cmp	r3, #15
 8006772:	d91c      	bls.n	80067ae <UART_SetConfig+0x1ee>
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	025b      	lsls	r3, r3, #9
 800677a:	429a      	cmp	r2, r3
 800677c:	d217      	bcs.n	80067ae <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	b29a      	uxth	r2, r3
 8006782:	200e      	movs	r0, #14
 8006784:	183b      	adds	r3, r7, r0
 8006786:	210f      	movs	r1, #15
 8006788:	438a      	bics	r2, r1
 800678a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	2207      	movs	r2, #7
 8006794:	4013      	ands	r3, r2
 8006796:	b299      	uxth	r1, r3
 8006798:	183b      	adds	r3, r7, r0
 800679a:	183a      	adds	r2, r7, r0
 800679c:	8812      	ldrh	r2, [r2, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	183a      	adds	r2, r7, r0
 80067a8:	8812      	ldrh	r2, [r2, #0]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e060      	b.n	8006870 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80067ae:	231e      	movs	r3, #30
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	2201      	movs	r2, #1
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e05b      	b.n	8006870 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067b8:	231f      	movs	r3, #31
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d01f      	beq.n	8006802 <UART_SetConfig+0x242>
 80067c2:	dc22      	bgt.n	800680a <UART_SetConfig+0x24a>
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d017      	beq.n	80067f8 <UART_SetConfig+0x238>
 80067c8:	dc1f      	bgt.n	800680a <UART_SetConfig+0x24a>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <UART_SetConfig+0x214>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d005      	beq.n	80067de <UART_SetConfig+0x21e>
 80067d2:	e01a      	b.n	800680a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fe fa12 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 80067d8:	0003      	movs	r3, r0
 80067da:	61bb      	str	r3, [r7, #24]
        break;
 80067dc:	e01c      	b.n	8006818 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80067de:	4b33      	ldr	r3, [pc, #204]	@ (80068ac <UART_SetConfig+0x2ec>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2207      	movs	r2, #7
 80067e6:	4013      	ands	r3, r2
 80067e8:	3301      	adds	r3, #1
 80067ea:	0019      	movs	r1, r3
 80067ec:	4831      	ldr	r0, [pc, #196]	@ (80068b4 <UART_SetConfig+0x2f4>)
 80067ee:	f7f9 fc95 	bl	800011c <__udivsi3>
 80067f2:	0003      	movs	r3, r0
 80067f4:	61bb      	str	r3, [r7, #24]
        break;
 80067f6:	e00f      	b.n	8006818 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f8:	f7fe f98a 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 80067fc:	0003      	movs	r3, r0
 80067fe:	61bb      	str	r3, [r7, #24]
        break;
 8006800:	e00a      	b.n	8006818 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006802:	2380      	movs	r3, #128	@ 0x80
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	61bb      	str	r3, [r7, #24]
        break;
 8006808:	e006      	b.n	8006818 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800680e:	231e      	movs	r3, #30
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
        break;
 8006816:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d028      	beq.n	8006870 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006822:	4b25      	ldr	r3, [pc, #148]	@ (80068b8 <UART_SetConfig+0x2f8>)
 8006824:	0052      	lsls	r2, r2, #1
 8006826:	5ad3      	ldrh	r3, [r2, r3]
 8006828:	0019      	movs	r1, r3
 800682a:	69b8      	ldr	r0, [r7, #24]
 800682c:	f7f9 fc76 	bl	800011c <__udivsi3>
 8006830:	0003      	movs	r3, r0
 8006832:	001a      	movs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	18d2      	adds	r2, r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	0019      	movs	r1, r3
 8006842:	0010      	movs	r0, r2
 8006844:	f7f9 fc6a 	bl	800011c <__udivsi3>
 8006848:	0003      	movs	r3, r0
 800684a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b0f      	cmp	r3, #15
 8006850:	d90a      	bls.n	8006868 <UART_SetConfig+0x2a8>
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	2380      	movs	r3, #128	@ 0x80
 8006856:	025b      	lsls	r3, r3, #9
 8006858:	429a      	cmp	r2, r3
 800685a:	d205      	bcs.n	8006868 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	e003      	b.n	8006870 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006868:	231e      	movs	r3, #30
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	226a      	movs	r2, #106	@ 0x6a
 8006874:	2101      	movs	r1, #1
 8006876:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2268      	movs	r2, #104	@ 0x68
 800687c:	2101      	movs	r1, #1
 800687e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800688c:	231e      	movs	r3, #30
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	781b      	ldrb	r3, [r3, #0]
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b008      	add	sp, #32
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	cfff69f3 	.word	0xcfff69f3
 80068a0:	ffffcfff 	.word	0xffffcfff
 80068a4:	11fff4ff 	.word	0x11fff4ff
 80068a8:	40013800 	.word	0x40013800
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40004400 	.word	0x40004400
 80068b4:	02dc6c00 	.word	0x02dc6c00
 80068b8:	08008e80 	.word	0x08008e80

080068bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c8:	2208      	movs	r2, #8
 80068ca:	4013      	ands	r3, r2
 80068cc:	d00b      	beq.n	80068e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006a00 <UART_AdvFeatureConfig+0x144>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	0019      	movs	r1, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	2201      	movs	r2, #1
 80068ec:	4013      	ands	r3, r2
 80068ee:	d00b      	beq.n	8006908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	4a43      	ldr	r2, [pc, #268]	@ (8006a04 <UART_AdvFeatureConfig+0x148>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	0019      	movs	r1, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690c:	2202      	movs	r2, #2
 800690e:	4013      	ands	r3, r2
 8006910:	d00b      	beq.n	800692a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a3b      	ldr	r2, [pc, #236]	@ (8006a08 <UART_AdvFeatureConfig+0x14c>)
 800691a:	4013      	ands	r3, r2
 800691c:	0019      	movs	r1, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	2204      	movs	r2, #4
 8006930:	4013      	ands	r3, r2
 8006932:	d00b      	beq.n	800694c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4a34      	ldr	r2, [pc, #208]	@ (8006a0c <UART_AdvFeatureConfig+0x150>)
 800693c:	4013      	ands	r3, r2
 800693e:	0019      	movs	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	2210      	movs	r2, #16
 8006952:	4013      	ands	r3, r2
 8006954:	d00b      	beq.n	800696e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a10 <UART_AdvFeatureConfig+0x154>)
 800695e:	4013      	ands	r3, r2
 8006960:	0019      	movs	r1, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006972:	2220      	movs	r2, #32
 8006974:	4013      	ands	r3, r2
 8006976:	d00b      	beq.n	8006990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	4a25      	ldr	r2, [pc, #148]	@ (8006a14 <UART_AdvFeatureConfig+0x158>)
 8006980:	4013      	ands	r3, r2
 8006982:	0019      	movs	r1, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	2240      	movs	r2, #64	@ 0x40
 8006996:	4013      	ands	r3, r2
 8006998:	d01d      	beq.n	80069d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a18 <UART_AdvFeatureConfig+0x15c>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	0019      	movs	r1, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b6:	2380      	movs	r3, #128	@ 0x80
 80069b8:	035b      	lsls	r3, r3, #13
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d10b      	bne.n	80069d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <UART_AdvFeatureConfig+0x160>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	2280      	movs	r2, #128	@ 0x80
 80069dc:	4013      	ands	r3, r2
 80069de:	d00b      	beq.n	80069f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006a20 <UART_AdvFeatureConfig+0x164>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	0019      	movs	r1, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }
}
 80069f8:	46c0      	nop			@ (mov r8, r8)
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b002      	add	sp, #8
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	ffff7fff 	.word	0xffff7fff
 8006a04:	fffdffff 	.word	0xfffdffff
 8006a08:	fffeffff 	.word	0xfffeffff
 8006a0c:	fffbffff 	.word	0xfffbffff
 8006a10:	ffffefff 	.word	0xffffefff
 8006a14:	ffffdfff 	.word	0xffffdfff
 8006a18:	ffefffff 	.word	0xffefffff
 8006a1c:	ff9fffff 	.word	0xff9fffff
 8006a20:	fff7ffff 	.word	0xfff7ffff

08006a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b092      	sub	sp, #72	@ 0x48
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2290      	movs	r2, #144	@ 0x90
 8006a30:	2100      	movs	r1, #0
 8006a32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a34:	f7fb fc8e 	bl	8002354 <HAL_GetTick>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2208      	movs	r2, #8
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	d12d      	bne.n	8006aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4c:	2280      	movs	r2, #128	@ 0x80
 8006a4e:	0391      	lsls	r1, r2, #14
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4a47      	ldr	r2, [pc, #284]	@ (8006b70 <UART_CheckIdleState+0x14c>)
 8006a54:	9200      	str	r2, [sp, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f000 f88e 	bl	8006b78 <UART_WaitOnFlagUntilTimeout>
 8006a5c:	1e03      	subs	r3, r0, #0
 8006a5e:	d022      	beq.n	8006aa6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006a60:	f3ef 8310 	mrs	r3, PRIMASK
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	f383 8810 	msr	PRIMASK, r3
}
 8006a74:	46c0      	nop			@ (mov r8, r8)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2180      	movs	r1, #128	@ 0x80
 8006a82:	438a      	bics	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	f383 8810 	msr	PRIMASK, r3
}
 8006a90:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2288      	movs	r2, #136	@ 0x88
 8006a96:	2120      	movs	r1, #32
 8006a98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2284      	movs	r2, #132	@ 0x84
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e060      	b.n	8006b68 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2204      	movs	r2, #4
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d146      	bne.n	8006b42 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab6:	2280      	movs	r2, #128	@ 0x80
 8006ab8:	03d1      	lsls	r1, r2, #15
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4a2c      	ldr	r2, [pc, #176]	@ (8006b70 <UART_CheckIdleState+0x14c>)
 8006abe:	9200      	str	r2, [sp, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f000 f859 	bl	8006b78 <UART_WaitOnFlagUntilTimeout>
 8006ac6:	1e03      	subs	r3, r0, #0
 8006ac8:	d03b      	beq.n	8006b42 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006aca:	f3ef 8310 	mrs	r3, PRIMASK
 8006ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f383 8810 	msr	PRIMASK, r3
}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4922      	ldr	r1, [pc, #136]	@ (8006b74 <UART_CheckIdleState+0x150>)
 8006aec:	400a      	ands	r2, r1
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f383 8810 	msr	PRIMASK, r3
}
 8006afa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006afc:	f3ef 8310 	mrs	r3, PRIMASK
 8006b00:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b02:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b06:	2301      	movs	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f383 8810 	msr	PRIMASK, r3
}
 8006b10:	46c0      	nop			@ (mov r8, r8)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	438a      	bics	r2, r1
 8006b20:	609a      	str	r2, [r3, #8]
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f383 8810 	msr	PRIMASK, r3
}
 8006b2c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	228c      	movs	r2, #140	@ 0x8c
 8006b32:	2120      	movs	r1, #32
 8006b34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2284      	movs	r2, #132	@ 0x84
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e012      	b.n	8006b68 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2288      	movs	r2, #136	@ 0x88
 8006b46:	2120      	movs	r1, #32
 8006b48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	228c      	movs	r2, #140	@ 0x8c
 8006b4e:	2120      	movs	r1, #32
 8006b50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2284      	movs	r2, #132	@ 0x84
 8006b62:	2100      	movs	r1, #0
 8006b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	0018      	movs	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b010      	add	sp, #64	@ 0x40
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	01ffffff 	.word	0x01ffffff
 8006b74:	fffffedf 	.word	0xfffffedf

08006b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	1dfb      	adds	r3, r7, #7
 8006b86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b88:	e051      	b.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	d04e      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b90:	f7fb fbe0 	bl	8002354 <HAL_GetTick>
 8006b94:	0002      	movs	r2, r0
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e051      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	d03b      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b80      	cmp	r3, #128	@ 0x80
 8006bba:	d038      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b40      	cmp	r3, #64	@ 0x40
 8006bc0:	d035      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d111      	bne.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f000 f922 	bl	8006e24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2290      	movs	r2, #144	@ 0x90
 8006be4:	2108      	movs	r1, #8
 8006be6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2284      	movs	r2, #132	@ 0x84
 8006bec:	2100      	movs	r1, #0
 8006bee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e02c      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69da      	ldr	r2, [r3, #28]
 8006bfa:	2380      	movs	r3, #128	@ 0x80
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	401a      	ands	r2, r3
 8006c00:	2380      	movs	r3, #128	@ 0x80
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d112      	bne.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2280      	movs	r2, #128	@ 0x80
 8006c0e:	0112      	lsls	r2, r2, #4
 8006c10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f000 f905 	bl	8006e24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2290      	movs	r2, #144	@ 0x90
 8006c1e:	2120      	movs	r1, #32
 8006c20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2284      	movs	r2, #132	@ 0x84
 8006c26:	2100      	movs	r1, #0
 8006c28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e00f      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	425a      	negs	r2, r3
 8006c3e:	4153      	adcs	r3, r2
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	001a      	movs	r2, r3
 8006c44:	1dfb      	adds	r3, r7, #7
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d09e      	beq.n	8006b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	0018      	movs	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b004      	add	sp, #16
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b090      	sub	sp, #64	@ 0x40
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	1dbb      	adds	r3, r7, #6
 8006c64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	1dba      	adds	r2, r7, #6
 8006c70:	215c      	movs	r1, #92	@ 0x5c
 8006c72:	8812      	ldrh	r2, [r2, #0]
 8006c74:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2290      	movs	r2, #144	@ 0x90
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	228c      	movs	r2, #140	@ 0x8c
 8006c82:	2122      	movs	r1, #34	@ 0x22
 8006c84:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2280      	movs	r2, #128	@ 0x80
 8006c8a:	589b      	ldr	r3, [r3, r2]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d02d      	beq.n	8006cec <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2280      	movs	r2, #128	@ 0x80
 8006c94:	589b      	ldr	r3, [r3, r2]
 8006c96:	4a40      	ldr	r2, [pc, #256]	@ (8006d98 <UART_Start_Receive_DMA+0x140>)
 8006c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2280      	movs	r2, #128	@ 0x80
 8006c9e:	589b      	ldr	r3, [r3, r2]
 8006ca0:	4a3e      	ldr	r2, [pc, #248]	@ (8006d9c <UART_Start_Receive_DMA+0x144>)
 8006ca2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	589b      	ldr	r3, [r3, r2]
 8006caa:	4a3d      	ldr	r2, [pc, #244]	@ (8006da0 <UART_Start_Receive_DMA+0x148>)
 8006cac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2280      	movs	r2, #128	@ 0x80
 8006cb2:	589b      	ldr	r3, [r3, r2]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2280      	movs	r2, #128	@ 0x80
 8006cbc:	5898      	ldr	r0, [r3, r2]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3324      	adds	r3, #36	@ 0x24
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cca:	001a      	movs	r2, r3
 8006ccc:	1dbb      	adds	r3, r7, #6
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	f7fc f950 	bl	8002f74 <HAL_DMA_Start_IT>
 8006cd4:	1e03      	subs	r3, r0, #0
 8006cd6:	d009      	beq.n	8006cec <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2290      	movs	r2, #144	@ 0x90
 8006cdc:	2110      	movs	r1, #16
 8006cde:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	228c      	movs	r2, #140	@ 0x8c
 8006ce4:	2120      	movs	r1, #32
 8006ce6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e050      	b.n	8006d8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d019      	beq.n	8006d28 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cfe:	2301      	movs	r3, #1
 8006d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d04:	f383 8810 	msr	PRIMASK, r3
}
 8006d08:	46c0      	nop			@ (mov r8, r8)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2180      	movs	r1, #128	@ 0x80
 8006d16:	0049      	lsls	r1, r1, #1
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	f383 8810 	msr	PRIMASK, r3
}
 8006d26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d28:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2c:	613b      	str	r3, [r7, #16]
  return(result);
 8006d2e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d32:	2301      	movs	r3, #1
 8006d34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f383 8810 	msr	PRIMASK, r3
}
 8006d3c:	46c0      	nop			@ (mov r8, r8)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2101      	movs	r1, #1
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	f383 8810 	msr	PRIMASK, r3
}
 8006d58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d60:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d64:	2301      	movs	r3, #1
 8006d66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	f383 8810 	msr	PRIMASK, r3
}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2140      	movs	r1, #64	@ 0x40
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	f383 8810 	msr	PRIMASK, r3
}
 8006d8a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	0018      	movs	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b010      	add	sp, #64	@ 0x40
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	08006ef1 	.word	0x08006ef1
 8006d9c:	08007021 	.word	0x08007021
 8006da0:	08007063 	.word	0x08007063

08006da4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08a      	sub	sp, #40	@ 0x28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006dac:	f3ef 8310 	mrs	r3, PRIMASK
 8006db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006db2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db6:	2301      	movs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f383 8810 	msr	PRIMASK, r3
}
 8006dc0:	46c0      	nop			@ (mov r8, r8)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	21c0      	movs	r1, #192	@ 0xc0
 8006dce:	438a      	bics	r2, r1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f383 8810 	msr	PRIMASK, r3
}
 8006ddc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006dde:	f3ef 8310 	mrs	r3, PRIMASK
 8006de2:	617b      	str	r3, [r7, #20]
  return(result);
 8006de4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	2301      	movs	r3, #1
 8006dea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f383 8810 	msr	PRIMASK, r3
}
 8006df2:	46c0      	nop			@ (mov r8, r8)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4908      	ldr	r1, [pc, #32]	@ (8006e20 <UART_EndTxTransfer+0x7c>)
 8006e00:	400a      	ands	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f383 8810 	msr	PRIMASK, r3
}
 8006e0e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2288      	movs	r2, #136	@ 0x88
 8006e14:	2120      	movs	r1, #32
 8006e16:	5099      	str	r1, [r3, r2]
}
 8006e18:	46c0      	nop			@ (mov r8, r8)
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b00a      	add	sp, #40	@ 0x28
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	ff7fffff 	.word	0xff7fffff

08006e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08e      	sub	sp, #56	@ 0x38
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e30:	617b      	str	r3, [r7, #20]
  return(result);
 8006e32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e36:	2301      	movs	r3, #1
 8006e38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	f383 8810 	msr	PRIMASK, r3
}
 8006e40:	46c0      	nop			@ (mov r8, r8)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4926      	ldr	r1, [pc, #152]	@ (8006ee8 <UART_EndRxTransfer+0xc4>)
 8006e4e:	400a      	ands	r2, r1
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f383 8810 	msr	PRIMASK, r3
}
 8006e5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e62:	623b      	str	r3, [r7, #32]
  return(result);
 8006e64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e68:	2301      	movs	r3, #1
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	f383 8810 	msr	PRIMASK, r3
}
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	491b      	ldr	r1, [pc, #108]	@ (8006eec <UART_EndRxTransfer+0xc8>)
 8006e80:	400a      	ands	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8a:	f383 8810 	msr	PRIMASK, r3
}
 8006e8e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d118      	bne.n	8006eca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e98:	f3ef 8310 	mrs	r3, PRIMASK
 8006e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f383 8810 	msr	PRIMASK, r3
}
 8006eac:	46c0      	nop			@ (mov r8, r8)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2110      	movs	r1, #16
 8006eba:	438a      	bics	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f383 8810 	msr	PRIMASK, r3
}
 8006ec8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	228c      	movs	r2, #140	@ 0x8c
 8006ece:	2120      	movs	r1, #32
 8006ed0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ede:	46c0      	nop			@ (mov r8, r8)
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	b00e      	add	sp, #56	@ 0x38
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	46c0      	nop			@ (mov r8, r8)
 8006ee8:	fffffedf 	.word	0xfffffedf
 8006eec:	effffffe 	.word	0xeffffffe

08006ef0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b094      	sub	sp, #80	@ 0x50
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2220      	movs	r2, #32
 8006f06:	4013      	ands	r3, r2
 8006f08:	d16f      	bne.n	8006fea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f0c:	225e      	movs	r2, #94	@ 0x5e
 8006f0e:	2100      	movs	r1, #0
 8006f10:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f12:	f3ef 8310 	mrs	r3, PRIMASK
 8006f16:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f18:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f383 8810 	msr	PRIMASK, r3
}
 8006f26:	46c0      	nop			@ (mov r8, r8)
 8006f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	493a      	ldr	r1, [pc, #232]	@ (800701c <UART_DMAReceiveCplt+0x12c>)
 8006f34:	400a      	ands	r2, r1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	f383 8810 	msr	PRIMASK, r3
}
 8006f42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4e:	2301      	movs	r3, #1
 8006f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	f383 8810 	msr	PRIMASK, r3
}
 8006f58:	46c0      	nop			@ (mov r8, r8)
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2101      	movs	r1, #1
 8006f66:	438a      	bics	r2, r1
 8006f68:	609a      	str	r2, [r3, #8]
 8006f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	f383 8810 	msr	PRIMASK, r3
}
 8006f74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f76:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f80:	2301      	movs	r3, #1
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	46c0      	nop			@ (mov r8, r8)
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2140      	movs	r1, #64	@ 0x40
 8006f98:	438a      	bics	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	f383 8810 	msr	PRIMASK, r3
}
 8006fa6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006faa:	228c      	movs	r2, #140	@ 0x8c
 8006fac:	2120      	movs	r1, #32
 8006fae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d118      	bne.n	8006fea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f383 8810 	msr	PRIMASK, r3
}
 8006fcc:	46c0      	nop			@ (mov r8, r8)
 8006fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2110      	movs	r1, #16
 8006fda:	438a      	bics	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f383 8810 	msr	PRIMASK, r3
}
 8006fe8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fec:	2200      	movs	r2, #0
 8006fee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d108      	bne.n	800700a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ffa:	225c      	movs	r2, #92	@ 0x5c
 8006ffc:	5a9a      	ldrh	r2, [r3, r2]
 8006ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007000:	0011      	movs	r1, r2
 8007002:	0018      	movs	r0, r3
 8007004:	f7fa f864 	bl	80010d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007008:	e003      	b.n	8007012 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800700a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700c:	0018      	movs	r0, r3
 800700e:	f7ff fab7 	bl	8006580 <HAL_UART_RxCpltCallback>
}
 8007012:	46c0      	nop			@ (mov r8, r8)
 8007014:	46bd      	mov	sp, r7
 8007016:	b014      	add	sp, #80	@ 0x50
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	fffffeff 	.word	0xfffffeff

08007020 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d10a      	bne.n	8007052 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	225c      	movs	r2, #92	@ 0x5c
 8007040:	5a9b      	ldrh	r3, [r3, r2]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	0011      	movs	r1, r2
 800704a:	0018      	movs	r0, r3
 800704c:	f7fa f840 	bl	80010d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007050:	e003      	b.n	800705a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	0018      	movs	r0, r3
 8007056:	f7ff fa9b 	bl	8006590 <HAL_UART_RxHalfCpltCallback>
}
 800705a:	46c0      	nop			@ (mov r8, r8)
 800705c:	46bd      	mov	sp, r7
 800705e:	b004      	add	sp, #16
 8007060:	bd80      	pop	{r7, pc}

08007062 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2288      	movs	r2, #136	@ 0x88
 8007074:	589b      	ldr	r3, [r3, r2]
 8007076:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	228c      	movs	r2, #140	@ 0x8c
 800707c:	589b      	ldr	r3, [r3, r2]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2280      	movs	r2, #128	@ 0x80
 8007088:	4013      	ands	r3, r2
 800708a:	2b80      	cmp	r3, #128	@ 0x80
 800708c:	d10a      	bne.n	80070a4 <UART_DMAError+0x42>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b21      	cmp	r3, #33	@ 0x21
 8007092:	d107      	bne.n	80070a4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2256      	movs	r2, #86	@ 0x56
 8007098:	2100      	movs	r1, #0
 800709a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	0018      	movs	r0, r3
 80070a0:	f7ff fe80 	bl	8006da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2240      	movs	r2, #64	@ 0x40
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b40      	cmp	r3, #64	@ 0x40
 80070b0:	d10a      	bne.n	80070c8 <UART_DMAError+0x66>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b22      	cmp	r3, #34	@ 0x22
 80070b6:	d107      	bne.n	80070c8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	225e      	movs	r2, #94	@ 0x5e
 80070bc:	2100      	movs	r1, #0
 80070be:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	0018      	movs	r0, r3
 80070c4:	f7ff feae 	bl	8006e24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2290      	movs	r2, #144	@ 0x90
 80070cc:	589b      	ldr	r3, [r3, r2]
 80070ce:	2210      	movs	r2, #16
 80070d0:	431a      	orrs	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2190      	movs	r1, #144	@ 0x90
 80070d6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	0018      	movs	r0, r3
 80070dc:	f7ff fa60 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e0:	46c0      	nop			@ (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b006      	add	sp, #24
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	225e      	movs	r2, #94	@ 0x5e
 80070fa:	2100      	movs	r1, #0
 80070fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2256      	movs	r2, #86	@ 0x56
 8007102:	2100      	movs	r1, #0
 8007104:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff fa49 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710e:	46c0      	nop			@ (mov r8, r8)
 8007110:	46bd      	mov	sp, r7
 8007112:	b004      	add	sp, #16
 8007114:	bd80      	pop	{r7, pc}

08007116 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007122:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007128:	2200      	movs	r2, #0
 800712a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2280      	movs	r2, #128	@ 0x80
 8007130:	589b      	ldr	r3, [r3, r2]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2280      	movs	r2, #128	@ 0x80
 800713a:	589b      	ldr	r3, [r3, r2]
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	2b00      	cmp	r3, #0
 8007140:	d12d      	bne.n	800719e <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2256      	movs	r2, #86	@ 0x56
 8007146:	2100      	movs	r1, #0
 8007148:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	225e      	movs	r2, #94	@ 0x5e
 800714e:	2100      	movs	r1, #0
 8007150:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2290      	movs	r2, #144	@ 0x90
 8007156:	2100      	movs	r1, #0
 8007158:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	220f      	movs	r2, #15
 8007160:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007166:	2380      	movs	r3, #128	@ 0x80
 8007168:	059b      	lsls	r3, r3, #22
 800716a:	429a      	cmp	r2, r3
 800716c:	d107      	bne.n	800717e <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	699a      	ldr	r2, [r3, #24]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2110      	movs	r1, #16
 800717a:	430a      	orrs	r2, r1
 800717c:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2288      	movs	r2, #136	@ 0x88
 8007182:	2120      	movs	r1, #32
 8007184:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	228c      	movs	r2, #140	@ 0x8c
 800718a:	2120      	movs	r1, #32
 800718c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	0018      	movs	r0, r3
 8007198:	f7ff fa0a 	bl	80065b0 <HAL_UART_AbortCpltCallback>
 800719c:	e000      	b.n	80071a0 <UART_DMATxAbortCallback+0x8a>
      return;
 800719e:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b004      	add	sp, #16
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2280      	movs	r2, #128	@ 0x80
 80071b8:	589b      	ldr	r3, [r3, r2]
 80071ba:	2200      	movs	r2, #0
 80071bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d127      	bne.n	8007220 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2256      	movs	r2, #86	@ 0x56
 80071d4:	2100      	movs	r1, #0
 80071d6:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	225e      	movs	r2, #94	@ 0x5e
 80071dc:	2100      	movs	r1, #0
 80071de:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2290      	movs	r2, #144	@ 0x90
 80071e4:	2100      	movs	r1, #0
 80071e6:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	220f      	movs	r2, #15
 80071ee:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2108      	movs	r1, #8
 80071fc:	430a      	orrs	r2, r1
 80071fe:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2288      	movs	r2, #136	@ 0x88
 8007204:	2120      	movs	r1, #32
 8007206:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	228c      	movs	r2, #140	@ 0x8c
 800720c:	2120      	movs	r1, #32
 800720e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	0018      	movs	r0, r3
 800721a:	f7ff f9c9 	bl	80065b0 <HAL_UART_AbortCpltCallback>
 800721e:	e000      	b.n	8007222 <UART_DMARxAbortCallback+0x7c>
      return;
 8007220:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007222:	46bd      	mov	sp, r7
 8007224:	b004      	add	sp, #16
 8007226:	bd80      	pop	{r7, pc}

08007228 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	@ 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2288      	movs	r2, #136	@ 0x88
 8007234:	589b      	ldr	r3, [r3, r2]
 8007236:	2b21      	cmp	r3, #33	@ 0x21
 8007238:	d14c      	bne.n	80072d4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2256      	movs	r2, #86	@ 0x56
 800723e:	5a9b      	ldrh	r3, [r3, r2]
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d132      	bne.n	80072ac <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007246:	f3ef 8310 	mrs	r3, PRIMASK
 800724a:	60bb      	str	r3, [r7, #8]
  return(result);
 800724c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800724e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007250:	2301      	movs	r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f383 8810 	msr	PRIMASK, r3
}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2180      	movs	r1, #128	@ 0x80
 8007268:	438a      	bics	r2, r1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f383 8810 	msr	PRIMASK, r3
}
 8007276:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007278:	f3ef 8310 	mrs	r3, PRIMASK
 800727c:	617b      	str	r3, [r7, #20]
  return(result);
 800727e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007280:	623b      	str	r3, [r7, #32]
 8007282:	2301      	movs	r3, #1
 8007284:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	f383 8810 	msr	PRIMASK, r3
}
 800728c:	46c0      	nop			@ (mov r8, r8)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2140      	movs	r1, #64	@ 0x40
 800729a:	430a      	orrs	r2, r1
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	f383 8810 	msr	PRIMASK, r3
}
 80072a8:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80072aa:	e013      	b.n	80072d4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2256      	movs	r2, #86	@ 0x56
 80072c6:	5a9b      	ldrh	r3, [r3, r2]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b299      	uxth	r1, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2256      	movs	r2, #86	@ 0x56
 80072d2:	5299      	strh	r1, [r3, r2]
}
 80072d4:	46c0      	nop			@ (mov r8, r8)
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b00a      	add	sp, #40	@ 0x28
 80072da:	bd80      	pop	{r7, pc}

080072dc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	@ 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2288      	movs	r2, #136	@ 0x88
 80072e8:	589b      	ldr	r3, [r3, r2]
 80072ea:	2b21      	cmp	r3, #33	@ 0x21
 80072ec:	d151      	bne.n	8007392 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2256      	movs	r2, #86	@ 0x56
 80072f2:	5a9b      	ldrh	r3, [r3, r2]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d132      	bne.n	8007360 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072fa:	f3ef 8310 	mrs	r3, PRIMASK
 80072fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007300:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007304:	2301      	movs	r3, #1
 8007306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f383 8810 	msr	PRIMASK, r3
}
 800730e:	46c0      	nop			@ (mov r8, r8)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2180      	movs	r1, #128	@ 0x80
 800731c:	438a      	bics	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f383 8810 	msr	PRIMASK, r3
}
 800732a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800732c:	f3ef 8310 	mrs	r3, PRIMASK
 8007330:	61bb      	str	r3, [r7, #24]
  return(result);
 8007332:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007334:	627b      	str	r3, [r7, #36]	@ 0x24
 8007336:	2301      	movs	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f383 8810 	msr	PRIMASK, r3
}
 8007340:	46c0      	nop			@ (mov r8, r8)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2140      	movs	r1, #64	@ 0x40
 800734e:	430a      	orrs	r2, r1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f383 8810 	msr	PRIMASK, r3
}
 800735c:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800735e:	e018      	b.n	8007392 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	001a      	movs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	05d2      	lsls	r2, r2, #23
 8007372:	0dd2      	lsrs	r2, r2, #23
 8007374:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2256      	movs	r2, #86	@ 0x56
 8007384:	5a9b      	ldrh	r3, [r3, r2]
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b299      	uxth	r1, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2256      	movs	r2, #86	@ 0x56
 8007390:	5299      	strh	r1, [r3, r2]
}
 8007392:	46c0      	nop			@ (mov r8, r8)
 8007394:	46bd      	mov	sp, r7
 8007396:	b00c      	add	sp, #48	@ 0x30
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08c      	sub	sp, #48	@ 0x30
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2288      	movs	r2, #136	@ 0x88
 80073a8:	589b      	ldr	r3, [r3, r2]
 80073aa:	2b21      	cmp	r3, #33	@ 0x21
 80073ac:	d165      	bne.n	800747a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80073ae:	232e      	movs	r3, #46	@ 0x2e
 80073b0:	18fb      	adds	r3, r7, r3
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	216a      	movs	r1, #106	@ 0x6a
 80073b6:	5a52      	ldrh	r2, [r2, r1]
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e059      	b.n	8007470 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2256      	movs	r2, #86	@ 0x56
 80073c0:	5a9b      	ldrh	r3, [r3, r2]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d133      	bne.n	8007430 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073c8:	f3ef 8310 	mrs	r3, PRIMASK
 80073cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80073ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80073d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073d2:	2301      	movs	r3, #1
 80073d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f383 8810 	msr	PRIMASK, r3
}
 80073dc:	46c0      	nop			@ (mov r8, r8)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4926      	ldr	r1, [pc, #152]	@ (8007484 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	609a      	str	r2, [r3, #8]
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f383 8810 	msr	PRIMASK, r3
}
 80073f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073fa:	f3ef 8310 	mrs	r3, PRIMASK
 80073fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8007400:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
 8007404:	2301      	movs	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f383 8810 	msr	PRIMASK, r3
}
 800740e:	46c0      	nop			@ (mov r8, r8)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2140      	movs	r1, #64	@ 0x40
 800741c:	430a      	orrs	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	f383 8810 	msr	PRIMASK, r3
}
 800742a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800742c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800742e:	e024      	b.n	800747a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	2280      	movs	r2, #128	@ 0x80
 8007438:	4013      	ands	r3, r2
 800743a:	d013      	beq.n	8007464 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2256      	movs	r2, #86	@ 0x56
 8007456:	5a9b      	ldrh	r3, [r3, r2]
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b299      	uxth	r1, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2256      	movs	r2, #86	@ 0x56
 8007462:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007464:	212e      	movs	r1, #46	@ 0x2e
 8007466:	187b      	adds	r3, r7, r1
 8007468:	881a      	ldrh	r2, [r3, #0]
 800746a:	187b      	adds	r3, r7, r1
 800746c:	3a01      	subs	r2, #1
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	232e      	movs	r3, #46	@ 0x2e
 8007472:	18fb      	adds	r3, r7, r3
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1a0      	bne.n	80073bc <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800747a:	46c0      	nop			@ (mov r8, r8)
 800747c:	46bd      	mov	sp, r7
 800747e:	b00c      	add	sp, #48	@ 0x30
 8007480:	bd80      	pop	{r7, pc}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	ff7fffff 	.word	0xff7fffff

08007488 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08c      	sub	sp, #48	@ 0x30
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2288      	movs	r2, #136	@ 0x88
 8007494:	589b      	ldr	r3, [r3, r2]
 8007496:	2b21      	cmp	r3, #33	@ 0x21
 8007498:	d16a      	bne.n	8007570 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800749a:	232e      	movs	r3, #46	@ 0x2e
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	216a      	movs	r1, #106	@ 0x6a
 80074a2:	5a52      	ldrh	r2, [r2, r1]
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	e05e      	b.n	8007566 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2256      	movs	r2, #86	@ 0x56
 80074ac:	5a9b      	ldrh	r3, [r3, r2]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d133      	bne.n	800751c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074b4:	f3ef 8310 	mrs	r3, PRIMASK
 80074b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ba:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80074be:	2301      	movs	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f383 8810 	msr	PRIMASK, r3
}
 80074c8:	46c0      	nop			@ (mov r8, r8)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4928      	ldr	r1, [pc, #160]	@ (8007578 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80074d6:	400a      	ands	r2, r1
 80074d8:	609a      	str	r2, [r3, #8]
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f383 8810 	msr	PRIMASK, r3
}
 80074e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074e6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ea:	617b      	str	r3, [r7, #20]
  return(result);
 80074ec:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ee:	623b      	str	r3, [r7, #32]
 80074f0:	2301      	movs	r3, #1
 80074f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f383 8810 	msr	PRIMASK, r3
}
 80074fa:	46c0      	nop			@ (mov r8, r8)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2140      	movs	r1, #64	@ 0x40
 8007508:	430a      	orrs	r2, r1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f383 8810 	msr	PRIMASK, r3
}
 8007516:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8007518:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800751a:	e029      	b.n	8007570 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	2280      	movs	r2, #128	@ 0x80
 8007524:	4013      	ands	r3, r2
 8007526:	d018      	beq.n	800755a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800752c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	001a      	movs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	05d2      	lsls	r2, r2, #23
 800753a:	0dd2      	lsrs	r2, r2, #23
 800753c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007542:	1c9a      	adds	r2, r3, #2
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2256      	movs	r2, #86	@ 0x56
 800754c:	5a9b      	ldrh	r3, [r3, r2]
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b299      	uxth	r1, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2256      	movs	r2, #86	@ 0x56
 8007558:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800755a:	212e      	movs	r1, #46	@ 0x2e
 800755c:	187b      	adds	r3, r7, r1
 800755e:	881a      	ldrh	r2, [r3, #0]
 8007560:	187b      	adds	r3, r7, r1
 8007562:	3a01      	subs	r2, #1
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	232e      	movs	r3, #46	@ 0x2e
 8007568:	18fb      	adds	r3, r7, r3
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d19b      	bne.n	80074a8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8007570:	46c0      	nop			@ (mov r8, r8)
 8007572:	46bd      	mov	sp, r7
 8007574:	b00c      	add	sp, #48	@ 0x30
 8007576:	bd80      	pop	{r7, pc}
 8007578:	ff7fffff 	.word	0xff7fffff

0800757c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007584:	f3ef 8310 	mrs	r3, PRIMASK
 8007588:	60bb      	str	r3, [r7, #8]
  return(result);
 800758a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	2301      	movs	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f383 8810 	msr	PRIMASK, r3
}
 8007598:	46c0      	nop			@ (mov r8, r8)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2140      	movs	r1, #64	@ 0x40
 80075a6:	438a      	bics	r2, r1
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f383 8810 	msr	PRIMASK, r3
}
 80075b4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2288      	movs	r2, #136	@ 0x88
 80075ba:	2120      	movs	r1, #32
 80075bc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	0018      	movs	r0, r3
 80075c8:	f7f9 fe2c 	bl	8001224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075cc:	46c0      	nop			@ (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b006      	add	sp, #24
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e05d      	b.n	80076a8 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2288      	movs	r2, #136	@ 0x88
 80075f0:	589b      	ldr	r3, [r3, r2]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2284      	movs	r2, #132	@ 0x84
 80075fa:	2100      	movs	r1, #0
 80075fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	0018      	movs	r0, r3
 8007602:	f7fa fc37 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2288      	movs	r2, #136	@ 0x88
 800760a:	2124      	movs	r1, #36	@ 0x24
 800760c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2101      	movs	r1, #1
 800761a:	438a      	bics	r2, r1
 800761c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	0018      	movs	r0, r3
 800762a:	f7ff f947 	bl	80068bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	0018      	movs	r0, r3
 8007632:	f7fe ffc5 	bl	80065c0 <UART_SetConfig>
 8007636:	0003      	movs	r3, r0
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e033      	b.n	80076a8 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2180      	movs	r1, #128	@ 0x80
 800764c:	01c9      	lsls	r1, r1, #7
 800764e:	430a      	orrs	r2, r1
 8007650:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	4a15      	ldr	r2, [pc, #84]	@ (80076b0 <HAL_RS485Ex_Init+0xdc>)
 800765a:	4013      	ands	r3, r2
 800765c:	0019      	movs	r1, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	430a      	orrs	r2, r1
 8007666:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	055b      	lsls	r3, r3, #21
 800766c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	041b      	lsls	r3, r3, #16
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a0d      	ldr	r2, [pc, #52]	@ (80076b4 <HAL_RS485Ex_Init+0xe0>)
 8007680:	4013      	ands	r3, r2
 8007682:	0019      	movs	r1, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	430a      	orrs	r2, r1
 800768c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2101      	movs	r1, #1
 800769a:	430a      	orrs	r2, r1
 800769c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	0018      	movs	r0, r3
 80076a2:	f7ff f9bf 	bl	8006a24 <UART_CheckIdleState>
 80076a6:	0003      	movs	r3, r0
}
 80076a8:	0018      	movs	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	b006      	add	sp, #24
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	ffff7fff 	.word	0xffff7fff
 80076b4:	fc00ffff 	.word	0xfc00ffff

080076b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076c0:	46c0      	nop			@ (mov r8, r8)
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b002      	add	sp, #8
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076d0:	46c0      	nop			@ (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80076e0:	46c0      	nop			@ (mov r8, r8)
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b002      	add	sp, #8
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2284      	movs	r2, #132	@ 0x84
 80076f4:	5c9b      	ldrb	r3, [r3, r2]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_UARTEx_DisableFifoMode+0x16>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e027      	b.n	800774e <HAL_UARTEx_DisableFifoMode+0x66>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2284      	movs	r2, #132	@ 0x84
 8007702:	2101      	movs	r1, #1
 8007704:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2288      	movs	r2, #136	@ 0x88
 800770a:	2124      	movs	r1, #36	@ 0x24
 800770c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2101      	movs	r1, #1
 8007722:	438a      	bics	r2, r1
 8007724:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a0b      	ldr	r2, [pc, #44]	@ (8007758 <HAL_UARTEx_DisableFifoMode+0x70>)
 800772a:	4013      	ands	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2288      	movs	r2, #136	@ 0x88
 8007740:	2120      	movs	r1, #32
 8007742:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2284      	movs	r2, #132	@ 0x84
 8007748:	2100      	movs	r1, #0
 800774a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	0018      	movs	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	b004      	add	sp, #16
 8007754:	bd80      	pop	{r7, pc}
 8007756:	46c0      	nop			@ (mov r8, r8)
 8007758:	dfffffff 	.word	0xdfffffff

0800775c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2284      	movs	r2, #132	@ 0x84
 800776a:	5c9b      	ldrb	r3, [r3, r2]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007770:	2302      	movs	r3, #2
 8007772:	e02e      	b.n	80077d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2284      	movs	r2, #132	@ 0x84
 8007778:	2101      	movs	r1, #1
 800777a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2288      	movs	r2, #136	@ 0x88
 8007780:	2124      	movs	r1, #36	@ 0x24
 8007782:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2101      	movs	r1, #1
 8007798:	438a      	bics	r2, r1
 800779a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	08d9      	lsrs	r1, r3, #3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	0018      	movs	r0, r3
 80077b4:	f000 f8bc 	bl	8007930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2288      	movs	r2, #136	@ 0x88
 80077c4:	2120      	movs	r1, #32
 80077c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2284      	movs	r2, #132	@ 0x84
 80077cc:	2100      	movs	r1, #0
 80077ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	0018      	movs	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b004      	add	sp, #16
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2284      	movs	r2, #132	@ 0x84
 80077ea:	5c9b      	ldrb	r3, [r3, r2]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e02f      	b.n	8007854 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2284      	movs	r2, #132	@ 0x84
 80077f8:	2101      	movs	r1, #1
 80077fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2288      	movs	r2, #136	@ 0x88
 8007800:	2124      	movs	r1, #36	@ 0x24
 8007802:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2101      	movs	r1, #1
 8007818:	438a      	bics	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	4a0e      	ldr	r2, [pc, #56]	@ (800785c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007824:	4013      	ands	r3, r2
 8007826:	0019      	movs	r1, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	0018      	movs	r0, r3
 8007836:	f000 f87b 	bl	8007930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2288      	movs	r2, #136	@ 0x88
 8007846:	2120      	movs	r1, #32
 8007848:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2284      	movs	r2, #132	@ 0x84
 800784e:	2100      	movs	r1, #0
 8007850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b004      	add	sp, #16
 800785a:	bd80      	pop	{r7, pc}
 800785c:	f1ffffff 	.word	0xf1ffffff

08007860 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007860:	b5b0      	push	{r4, r5, r7, lr}
 8007862:	b08a      	sub	sp, #40	@ 0x28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	1dbb      	adds	r3, r7, #6
 800786c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	228c      	movs	r2, #140	@ 0x8c
 8007872:	589b      	ldr	r3, [r3, r2]
 8007874:	2b20      	cmp	r3, #32
 8007876:	d156      	bne.n	8007926 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800787e:	1dbb      	adds	r3, r7, #6
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e04e      	b.n	8007928 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	2380      	movs	r3, #128	@ 0x80
 8007890:	015b      	lsls	r3, r3, #5
 8007892:	429a      	cmp	r2, r3
 8007894:	d109      	bne.n	80078aa <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2201      	movs	r2, #1
 80078a2:	4013      	ands	r3, r2
 80078a4:	d001      	beq.n	80078aa <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e03e      	b.n	8007928 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80078b6:	2527      	movs	r5, #39	@ 0x27
 80078b8:	197c      	adds	r4, r7, r5
 80078ba:	1dbb      	adds	r3, r7, #6
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0018      	movs	r0, r3
 80078c4:	f7ff f9c8 	bl	8006c58 <UART_Start_Receive_DMA>
 80078c8:	0003      	movs	r3, r0
 80078ca:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80078cc:	197b      	adds	r3, r7, r5
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d124      	bne.n	800791e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d11c      	bne.n	8007916 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2210      	movs	r2, #16
 80078e2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80078e4:	f3ef 8310 	mrs	r3, PRIMASK
 80078e8:	617b      	str	r3, [r7, #20]
  return(result);
 80078ea:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ec:	623b      	str	r3, [r7, #32]
 80078ee:	2301      	movs	r3, #1
 80078f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	f383 8810 	msr	PRIMASK, r3
}
 80078f8:	46c0      	nop			@ (mov r8, r8)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2110      	movs	r1, #16
 8007906:	430a      	orrs	r2, r1
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f383 8810 	msr	PRIMASK, r3
}
 8007914:	e003      	b.n	800791e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007916:	2327      	movs	r3, #39	@ 0x27
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	2201      	movs	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800791e:	2327      	movs	r3, #39	@ 0x27
 8007920:	18fb      	adds	r3, r7, r3
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	e000      	b.n	8007928 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007926:	2302      	movs	r3, #2
  }
}
 8007928:	0018      	movs	r0, r3
 800792a:	46bd      	mov	sp, r7
 800792c:	b00a      	add	sp, #40	@ 0x28
 800792e:	bdb0      	pop	{r4, r5, r7, pc}

08007930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800793c:	2b00      	cmp	r3, #0
 800793e:	d108      	bne.n	8007952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	226a      	movs	r2, #106	@ 0x6a
 8007944:	2101      	movs	r1, #1
 8007946:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2268      	movs	r2, #104	@ 0x68
 800794c:	2101      	movs	r1, #1
 800794e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007950:	e043      	b.n	80079da <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007952:	260f      	movs	r6, #15
 8007954:	19bb      	adds	r3, r7, r6
 8007956:	2208      	movs	r2, #8
 8007958:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800795a:	200e      	movs	r0, #14
 800795c:	183b      	adds	r3, r7, r0
 800795e:	2208      	movs	r2, #8
 8007960:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	0e5b      	lsrs	r3, r3, #25
 800796a:	b2da      	uxtb	r2, r3
 800796c:	240d      	movs	r4, #13
 800796e:	193b      	adds	r3, r7, r4
 8007970:	2107      	movs	r1, #7
 8007972:	400a      	ands	r2, r1
 8007974:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	0f5b      	lsrs	r3, r3, #29
 800797e:	b2da      	uxtb	r2, r3
 8007980:	250c      	movs	r5, #12
 8007982:	197b      	adds	r3, r7, r5
 8007984:	2107      	movs	r1, #7
 8007986:	400a      	ands	r2, r1
 8007988:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800798a:	183b      	adds	r3, r7, r0
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	197a      	adds	r2, r7, r5
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	4914      	ldr	r1, [pc, #80]	@ (80079e4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007994:	5c8a      	ldrb	r2, [r1, r2]
 8007996:	435a      	muls	r2, r3
 8007998:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800799a:	197b      	adds	r3, r7, r5
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	4a12      	ldr	r2, [pc, #72]	@ (80079e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80079a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079a2:	0019      	movs	r1, r3
 80079a4:	f7f8 fc44 	bl	8000230 <__divsi3>
 80079a8:	0003      	movs	r3, r0
 80079aa:	b299      	uxth	r1, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	226a      	movs	r2, #106	@ 0x6a
 80079b0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079b2:	19bb      	adds	r3, r7, r6
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	193a      	adds	r2, r7, r4
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	490a      	ldr	r1, [pc, #40]	@ (80079e4 <UARTEx_SetNbDataToProcess+0xb4>)
 80079bc:	5c8a      	ldrb	r2, [r1, r2]
 80079be:	435a      	muls	r2, r3
 80079c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80079c2:	193b      	adds	r3, r7, r4
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	4a08      	ldr	r2, [pc, #32]	@ (80079e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80079c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079ca:	0019      	movs	r1, r3
 80079cc:	f7f8 fc30 	bl	8000230 <__divsi3>
 80079d0:	0003      	movs	r3, r0
 80079d2:	b299      	uxth	r1, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2268      	movs	r2, #104	@ 0x68
 80079d8:	5299      	strh	r1, [r3, r2]
}
 80079da:	46c0      	nop			@ (mov r8, r8)
 80079dc:	46bd      	mov	sp, r7
 80079de:	b005      	add	sp, #20
 80079e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	08008e98 	.word	0x08008e98
 80079e8:	08008ea0 	.word	0x08008ea0

080079ec <std>:
 80079ec:	2300      	movs	r3, #0
 80079ee:	b510      	push	{r4, lr}
 80079f0:	0004      	movs	r4, r0
 80079f2:	6003      	str	r3, [r0, #0]
 80079f4:	6043      	str	r3, [r0, #4]
 80079f6:	6083      	str	r3, [r0, #8]
 80079f8:	8181      	strh	r1, [r0, #12]
 80079fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80079fc:	81c2      	strh	r2, [r0, #14]
 80079fe:	6103      	str	r3, [r0, #16]
 8007a00:	6143      	str	r3, [r0, #20]
 8007a02:	6183      	str	r3, [r0, #24]
 8007a04:	0019      	movs	r1, r3
 8007a06:	2208      	movs	r2, #8
 8007a08:	305c      	adds	r0, #92	@ 0x5c
 8007a0a:	f000 fa0f 	bl	8007e2c <memset>
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a3c <std+0x50>)
 8007a10:	6224      	str	r4, [r4, #32]
 8007a12:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a14:	4b0a      	ldr	r3, [pc, #40]	@ (8007a40 <std+0x54>)
 8007a16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a18:	4b0a      	ldr	r3, [pc, #40]	@ (8007a44 <std+0x58>)
 8007a1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a48 <std+0x5c>)
 8007a1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a20:	4b0a      	ldr	r3, [pc, #40]	@ (8007a4c <std+0x60>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d005      	beq.n	8007a32 <std+0x46>
 8007a26:	4b0a      	ldr	r3, [pc, #40]	@ (8007a50 <std+0x64>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	d002      	beq.n	8007a32 <std+0x46>
 8007a2c:	4b09      	ldr	r3, [pc, #36]	@ (8007a54 <std+0x68>)
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	d103      	bne.n	8007a3a <std+0x4e>
 8007a32:	0020      	movs	r0, r4
 8007a34:	3058      	adds	r0, #88	@ 0x58
 8007a36:	f000 fa79 	bl	8007f2c <__retarget_lock_init_recursive>
 8007a3a:	bd10      	pop	{r4, pc}
 8007a3c:	08007c55 	.word	0x08007c55
 8007a40:	08007c7d 	.word	0x08007c7d
 8007a44:	08007cb5 	.word	0x08007cb5
 8007a48:	08007ce1 	.word	0x08007ce1
 8007a4c:	2000079c 	.word	0x2000079c
 8007a50:	20000804 	.word	0x20000804
 8007a54:	2000086c 	.word	0x2000086c

08007a58 <stdio_exit_handler>:
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	4a03      	ldr	r2, [pc, #12]	@ (8007a68 <stdio_exit_handler+0x10>)
 8007a5c:	4903      	ldr	r1, [pc, #12]	@ (8007a6c <stdio_exit_handler+0x14>)
 8007a5e:	4804      	ldr	r0, [pc, #16]	@ (8007a70 <stdio_exit_handler+0x18>)
 8007a60:	f000 f86c 	bl	8007b3c <_fwalk_sglue>
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	20000070 	.word	0x20000070
 8007a6c:	080087cd 	.word	0x080087cd
 8007a70:	20000080 	.word	0x20000080

08007a74 <cleanup_stdio>:
 8007a74:	6841      	ldr	r1, [r0, #4]
 8007a76:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <cleanup_stdio+0x30>)
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	0004      	movs	r4, r0
 8007a7c:	4299      	cmp	r1, r3
 8007a7e:	d001      	beq.n	8007a84 <cleanup_stdio+0x10>
 8007a80:	f000 fea4 	bl	80087cc <_fflush_r>
 8007a84:	68a1      	ldr	r1, [r4, #8]
 8007a86:	4b08      	ldr	r3, [pc, #32]	@ (8007aa8 <cleanup_stdio+0x34>)
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	d002      	beq.n	8007a92 <cleanup_stdio+0x1e>
 8007a8c:	0020      	movs	r0, r4
 8007a8e:	f000 fe9d 	bl	80087cc <_fflush_r>
 8007a92:	68e1      	ldr	r1, [r4, #12]
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <cleanup_stdio+0x38>)
 8007a96:	4299      	cmp	r1, r3
 8007a98:	d002      	beq.n	8007aa0 <cleanup_stdio+0x2c>
 8007a9a:	0020      	movs	r0, r4
 8007a9c:	f000 fe96 	bl	80087cc <_fflush_r>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	46c0      	nop			@ (mov r8, r8)
 8007aa4:	2000079c 	.word	0x2000079c
 8007aa8:	20000804 	.word	0x20000804
 8007aac:	2000086c 	.word	0x2000086c

08007ab0 <global_stdio_init.part.0>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4b09      	ldr	r3, [pc, #36]	@ (8007ad8 <global_stdio_init.part.0+0x28>)
 8007ab4:	4a09      	ldr	r2, [pc, #36]	@ (8007adc <global_stdio_init.part.0+0x2c>)
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	4809      	ldr	r0, [pc, #36]	@ (8007ae0 <global_stdio_init.part.0+0x30>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	f7ff ff95 	bl	80079ec <std>
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	2109      	movs	r1, #9
 8007ac6:	4807      	ldr	r0, [pc, #28]	@ (8007ae4 <global_stdio_init.part.0+0x34>)
 8007ac8:	f7ff ff90 	bl	80079ec <std>
 8007acc:	2202      	movs	r2, #2
 8007ace:	2112      	movs	r1, #18
 8007ad0:	4805      	ldr	r0, [pc, #20]	@ (8007ae8 <global_stdio_init.part.0+0x38>)
 8007ad2:	f7ff ff8b 	bl	80079ec <std>
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	200008d4 	.word	0x200008d4
 8007adc:	08007a59 	.word	0x08007a59
 8007ae0:	2000079c 	.word	0x2000079c
 8007ae4:	20000804 	.word	0x20000804
 8007ae8:	2000086c 	.word	0x2000086c

08007aec <__sfp_lock_acquire>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	4802      	ldr	r0, [pc, #8]	@ (8007af8 <__sfp_lock_acquire+0xc>)
 8007af0:	f000 fa1d 	bl	8007f2e <__retarget_lock_acquire_recursive>
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	46c0      	nop			@ (mov r8, r8)
 8007af8:	200008dd 	.word	0x200008dd

08007afc <__sfp_lock_release>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	4802      	ldr	r0, [pc, #8]	@ (8007b08 <__sfp_lock_release+0xc>)
 8007b00:	f000 fa16 	bl	8007f30 <__retarget_lock_release_recursive>
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	46c0      	nop			@ (mov r8, r8)
 8007b08:	200008dd 	.word	0x200008dd

08007b0c <__sinit>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	0004      	movs	r4, r0
 8007b10:	f7ff ffec 	bl	8007aec <__sfp_lock_acquire>
 8007b14:	6a23      	ldr	r3, [r4, #32]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <__sinit+0x14>
 8007b1a:	f7ff ffef 	bl	8007afc <__sfp_lock_release>
 8007b1e:	bd10      	pop	{r4, pc}
 8007b20:	4b04      	ldr	r3, [pc, #16]	@ (8007b34 <__sinit+0x28>)
 8007b22:	6223      	str	r3, [r4, #32]
 8007b24:	4b04      	ldr	r3, [pc, #16]	@ (8007b38 <__sinit+0x2c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f6      	bne.n	8007b1a <__sinit+0xe>
 8007b2c:	f7ff ffc0 	bl	8007ab0 <global_stdio_init.part.0>
 8007b30:	e7f3      	b.n	8007b1a <__sinit+0xe>
 8007b32:	46c0      	nop			@ (mov r8, r8)
 8007b34:	08007a75 	.word	0x08007a75
 8007b38:	200008d4 	.word	0x200008d4

08007b3c <_fwalk_sglue>:
 8007b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b3e:	0014      	movs	r4, r2
 8007b40:	2600      	movs	r6, #0
 8007b42:	9000      	str	r0, [sp, #0]
 8007b44:	9101      	str	r1, [sp, #4]
 8007b46:	68a5      	ldr	r5, [r4, #8]
 8007b48:	6867      	ldr	r7, [r4, #4]
 8007b4a:	3f01      	subs	r7, #1
 8007b4c:	d504      	bpl.n	8007b58 <_fwalk_sglue+0x1c>
 8007b4e:	6824      	ldr	r4, [r4, #0]
 8007b50:	2c00      	cmp	r4, #0
 8007b52:	d1f8      	bne.n	8007b46 <_fwalk_sglue+0xa>
 8007b54:	0030      	movs	r0, r6
 8007b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b58:	89ab      	ldrh	r3, [r5, #12]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d908      	bls.n	8007b70 <_fwalk_sglue+0x34>
 8007b5e:	220e      	movs	r2, #14
 8007b60:	5eab      	ldrsh	r3, [r5, r2]
 8007b62:	3301      	adds	r3, #1
 8007b64:	d004      	beq.n	8007b70 <_fwalk_sglue+0x34>
 8007b66:	0029      	movs	r1, r5
 8007b68:	9800      	ldr	r0, [sp, #0]
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	4798      	blx	r3
 8007b6e:	4306      	orrs	r6, r0
 8007b70:	3568      	adds	r5, #104	@ 0x68
 8007b72:	e7ea      	b.n	8007b4a <_fwalk_sglue+0xe>

08007b74 <iprintf>:
 8007b74:	b40f      	push	{r0, r1, r2, r3}
 8007b76:	b507      	push	{r0, r1, r2, lr}
 8007b78:	4905      	ldr	r1, [pc, #20]	@ (8007b90 <iprintf+0x1c>)
 8007b7a:	ab04      	add	r3, sp, #16
 8007b7c:	6808      	ldr	r0, [r1, #0]
 8007b7e:	cb04      	ldmia	r3!, {r2}
 8007b80:	6881      	ldr	r1, [r0, #8]
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	f000 fb02 	bl	800818c <_vfiprintf_r>
 8007b88:	b003      	add	sp, #12
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	b004      	add	sp, #16
 8007b8e:	4718      	bx	r3
 8007b90:	2000007c 	.word	0x2000007c

08007b94 <_puts_r>:
 8007b94:	6a03      	ldr	r3, [r0, #32]
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	0005      	movs	r5, r0
 8007b9a:	000e      	movs	r6, r1
 8007b9c:	6884      	ldr	r4, [r0, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <_puts_r+0x12>
 8007ba2:	f7ff ffb3 	bl	8007b0c <__sinit>
 8007ba6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ba8:	07db      	lsls	r3, r3, #31
 8007baa:	d405      	bmi.n	8007bb8 <_puts_r+0x24>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	059b      	lsls	r3, r3, #22
 8007bb0:	d402      	bmi.n	8007bb8 <_puts_r+0x24>
 8007bb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bb4:	f000 f9bb 	bl	8007f2e <__retarget_lock_acquire_recursive>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	071b      	lsls	r3, r3, #28
 8007bbc:	d502      	bpl.n	8007bc4 <_puts_r+0x30>
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d11f      	bne.n	8007c04 <_puts_r+0x70>
 8007bc4:	0021      	movs	r1, r4
 8007bc6:	0028      	movs	r0, r5
 8007bc8:	f000 f8d2 	bl	8007d70 <__swsetup_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d019      	beq.n	8007c04 <_puts_r+0x70>
 8007bd0:	2501      	movs	r5, #1
 8007bd2:	426d      	negs	r5, r5
 8007bd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bd6:	07db      	lsls	r3, r3, #31
 8007bd8:	d405      	bmi.n	8007be6 <_puts_r+0x52>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	059b      	lsls	r3, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_puts_r+0x52>
 8007be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007be2:	f000 f9a5 	bl	8007f30 <__retarget_lock_release_recursive>
 8007be6:	0028      	movs	r0, r5
 8007be8:	bd70      	pop	{r4, r5, r6, pc}
 8007bea:	3601      	adds	r6, #1
 8007bec:	60a3      	str	r3, [r4, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da04      	bge.n	8007bfc <_puts_r+0x68>
 8007bf2:	69a2      	ldr	r2, [r4, #24]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	dc16      	bgt.n	8007c26 <_puts_r+0x92>
 8007bf8:	290a      	cmp	r1, #10
 8007bfa:	d014      	beq.n	8007c26 <_puts_r+0x92>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	7019      	strb	r1, [r3, #0]
 8007c04:	68a3      	ldr	r3, [r4, #8]
 8007c06:	7831      	ldrb	r1, [r6, #0]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	2900      	cmp	r1, #0
 8007c0c:	d1ed      	bne.n	8007bea <_puts_r+0x56>
 8007c0e:	60a3      	str	r3, [r4, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da0f      	bge.n	8007c34 <_puts_r+0xa0>
 8007c14:	0022      	movs	r2, r4
 8007c16:	0028      	movs	r0, r5
 8007c18:	310a      	adds	r1, #10
 8007c1a:	f000 f867 	bl	8007cec <__swbuf_r>
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d0d6      	beq.n	8007bd0 <_puts_r+0x3c>
 8007c22:	250a      	movs	r5, #10
 8007c24:	e7d6      	b.n	8007bd4 <_puts_r+0x40>
 8007c26:	0022      	movs	r2, r4
 8007c28:	0028      	movs	r0, r5
 8007c2a:	f000 f85f 	bl	8007cec <__swbuf_r>
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d1e8      	bne.n	8007c04 <_puts_r+0x70>
 8007c32:	e7cd      	b.n	8007bd0 <_puts_r+0x3c>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	6022      	str	r2, [r4, #0]
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e7f0      	b.n	8007c22 <_puts_r+0x8e>

08007c40 <puts>:
 8007c40:	b510      	push	{r4, lr}
 8007c42:	4b03      	ldr	r3, [pc, #12]	@ (8007c50 <puts+0x10>)
 8007c44:	0001      	movs	r1, r0
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	f7ff ffa4 	bl	8007b94 <_puts_r>
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	2000007c 	.word	0x2000007c

08007c54 <__sread>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	000c      	movs	r4, r1
 8007c58:	250e      	movs	r5, #14
 8007c5a:	5f49      	ldrsh	r1, [r1, r5]
 8007c5c:	f000 f914 	bl	8007e88 <_read_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	db03      	blt.n	8007c6c <__sread+0x18>
 8007c64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007c66:	181b      	adds	r3, r3, r0
 8007c68:	6563      	str	r3, [r4, #84]	@ 0x54
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	4a02      	ldr	r2, [pc, #8]	@ (8007c78 <__sread+0x24>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	e7f9      	b.n	8007c6a <__sread+0x16>
 8007c76:	46c0      	nop			@ (mov r8, r8)
 8007c78:	ffffefff 	.word	0xffffefff

08007c7c <__swrite>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	001f      	movs	r7, r3
 8007c80:	898b      	ldrh	r3, [r1, #12]
 8007c82:	0005      	movs	r5, r0
 8007c84:	000c      	movs	r4, r1
 8007c86:	0016      	movs	r6, r2
 8007c88:	05db      	lsls	r3, r3, #23
 8007c8a:	d505      	bpl.n	8007c98 <__swrite+0x1c>
 8007c8c:	230e      	movs	r3, #14
 8007c8e:	5ec9      	ldrsh	r1, [r1, r3]
 8007c90:	2200      	movs	r2, #0
 8007c92:	2302      	movs	r3, #2
 8007c94:	f000 f8e4 	bl	8007e60 <_lseek_r>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	4a05      	ldr	r2, [pc, #20]	@ (8007cb0 <__swrite+0x34>)
 8007c9c:	0028      	movs	r0, r5
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	81a3      	strh	r3, [r4, #12]
 8007ca2:	0032      	movs	r2, r6
 8007ca4:	230e      	movs	r3, #14
 8007ca6:	5ee1      	ldrsh	r1, [r4, r3]
 8007ca8:	003b      	movs	r3, r7
 8007caa:	f000 f901 	bl	8007eb0 <_write_r>
 8007cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb0:	ffffefff 	.word	0xffffefff

08007cb4 <__sseek>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	000c      	movs	r4, r1
 8007cb8:	250e      	movs	r5, #14
 8007cba:	5f49      	ldrsh	r1, [r1, r5]
 8007cbc:	f000 f8d0 	bl	8007e60 <_lseek_r>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	1c42      	adds	r2, r0, #1
 8007cc4:	d103      	bne.n	8007cce <__sseek+0x1a>
 8007cc6:	4a05      	ldr	r2, [pc, #20]	@ (8007cdc <__sseek+0x28>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	81a3      	strh	r3, [r4, #12]
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	2280      	movs	r2, #128	@ 0x80
 8007cd0:	0152      	lsls	r2, r2, #5
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cd8:	e7f8      	b.n	8007ccc <__sseek+0x18>
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	ffffefff 	.word	0xffffefff

08007ce0 <__sclose>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	230e      	movs	r3, #14
 8007ce4:	5ec9      	ldrsh	r1, [r1, r3]
 8007ce6:	f000 f8a9 	bl	8007e3c <_close_r>
 8007cea:	bd10      	pop	{r4, pc}

08007cec <__swbuf_r>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	0006      	movs	r6, r0
 8007cf0:	000d      	movs	r5, r1
 8007cf2:	0014      	movs	r4, r2
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d004      	beq.n	8007d02 <__swbuf_r+0x16>
 8007cf8:	6a03      	ldr	r3, [r0, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <__swbuf_r+0x16>
 8007cfe:	f7ff ff05 	bl	8007b0c <__sinit>
 8007d02:	69a3      	ldr	r3, [r4, #24]
 8007d04:	60a3      	str	r3, [r4, #8]
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	071b      	lsls	r3, r3, #28
 8007d0a:	d502      	bpl.n	8007d12 <__swbuf_r+0x26>
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <__swbuf_r+0x3a>
 8007d12:	0021      	movs	r1, r4
 8007d14:	0030      	movs	r0, r6
 8007d16:	f000 f82b 	bl	8007d70 <__swsetup_r>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d003      	beq.n	8007d26 <__swbuf_r+0x3a>
 8007d1e:	2501      	movs	r5, #1
 8007d20:	426d      	negs	r5, r5
 8007d22:	0028      	movs	r0, r5
 8007d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	6820      	ldr	r0, [r4, #0]
 8007d2a:	b2ef      	uxtb	r7, r5
 8007d2c:	1ac0      	subs	r0, r0, r3
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	b2ed      	uxtb	r5, r5
 8007d32:	4283      	cmp	r3, r0
 8007d34:	dc05      	bgt.n	8007d42 <__swbuf_r+0x56>
 8007d36:	0021      	movs	r1, r4
 8007d38:	0030      	movs	r0, r6
 8007d3a:	f000 fd47 	bl	80087cc <_fflush_r>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d1ed      	bne.n	8007d1e <__swbuf_r+0x32>
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	3001      	adds	r0, #1
 8007d46:	3b01      	subs	r3, #1
 8007d48:	60a3      	str	r3, [r4, #8]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	6022      	str	r2, [r4, #0]
 8007d50:	701f      	strb	r7, [r3, #0]
 8007d52:	6963      	ldr	r3, [r4, #20]
 8007d54:	4283      	cmp	r3, r0
 8007d56:	d004      	beq.n	8007d62 <__swbuf_r+0x76>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d5e1      	bpl.n	8007d22 <__swbuf_r+0x36>
 8007d5e:	2d0a      	cmp	r5, #10
 8007d60:	d1df      	bne.n	8007d22 <__swbuf_r+0x36>
 8007d62:	0021      	movs	r1, r4
 8007d64:	0030      	movs	r0, r6
 8007d66:	f000 fd31 	bl	80087cc <_fflush_r>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d0d9      	beq.n	8007d22 <__swbuf_r+0x36>
 8007d6e:	e7d6      	b.n	8007d1e <__swbuf_r+0x32>

08007d70 <__swsetup_r>:
 8007d70:	4b2d      	ldr	r3, [pc, #180]	@ (8007e28 <__swsetup_r+0xb8>)
 8007d72:	b570      	push	{r4, r5, r6, lr}
 8007d74:	0005      	movs	r5, r0
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	000c      	movs	r4, r1
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d004      	beq.n	8007d88 <__swsetup_r+0x18>
 8007d7e:	6a03      	ldr	r3, [r0, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <__swsetup_r+0x18>
 8007d84:	f7ff fec2 	bl	8007b0c <__sinit>
 8007d88:	230c      	movs	r3, #12
 8007d8a:	5ee2      	ldrsh	r2, [r4, r3]
 8007d8c:	0713      	lsls	r3, r2, #28
 8007d8e:	d423      	bmi.n	8007dd8 <__swsetup_r+0x68>
 8007d90:	06d3      	lsls	r3, r2, #27
 8007d92:	d407      	bmi.n	8007da4 <__swsetup_r+0x34>
 8007d94:	2309      	movs	r3, #9
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	2340      	movs	r3, #64	@ 0x40
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	4240      	negs	r0, r0
 8007da2:	e03a      	b.n	8007e1a <__swsetup_r+0xaa>
 8007da4:	0752      	lsls	r2, r2, #29
 8007da6:	d513      	bpl.n	8007dd0 <__swsetup_r+0x60>
 8007da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d008      	beq.n	8007dc0 <__swsetup_r+0x50>
 8007dae:	0023      	movs	r3, r4
 8007db0:	3344      	adds	r3, #68	@ 0x44
 8007db2:	4299      	cmp	r1, r3
 8007db4:	d002      	beq.n	8007dbc <__swsetup_r+0x4c>
 8007db6:	0028      	movs	r0, r5
 8007db8:	f000 f8c4 	bl	8007f44 <_free_r>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dc0:	2224      	movs	r2, #36	@ 0x24
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	4393      	bics	r3, r2
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	6063      	str	r3, [r4, #4]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	6023      	str	r3, [r4, #0]
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	89a2      	ldrh	r2, [r4, #12]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <__swsetup_r+0x86>
 8007dde:	21a0      	movs	r1, #160	@ 0xa0
 8007de0:	2280      	movs	r2, #128	@ 0x80
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	0089      	lsls	r1, r1, #2
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	400b      	ands	r3, r1
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d003      	beq.n	8007df6 <__swsetup_r+0x86>
 8007dee:	0021      	movs	r1, r4
 8007df0:	0028      	movs	r0, r5
 8007df2:	f000 fd41 	bl	8008878 <__smakebuf_r>
 8007df6:	230c      	movs	r3, #12
 8007df8:	5ee2      	ldrsh	r2, [r4, r3]
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	0013      	movs	r3, r2
 8007dfe:	400b      	ands	r3, r1
 8007e00:	420a      	tst	r2, r1
 8007e02:	d00b      	beq.n	8007e1c <__swsetup_r+0xac>
 8007e04:	2300      	movs	r3, #0
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	6963      	ldr	r3, [r4, #20]
 8007e0a:	425b      	negs	r3, r3
 8007e0c:	61a3      	str	r3, [r4, #24]
 8007e0e:	2000      	movs	r0, #0
 8007e10:	6923      	ldr	r3, [r4, #16]
 8007e12:	4283      	cmp	r3, r0
 8007e14:	d101      	bne.n	8007e1a <__swsetup_r+0xaa>
 8007e16:	0613      	lsls	r3, r2, #24
 8007e18:	d4be      	bmi.n	8007d98 <__swsetup_r+0x28>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	0791      	lsls	r1, r2, #30
 8007e1e:	d400      	bmi.n	8007e22 <__swsetup_r+0xb2>
 8007e20:	6963      	ldr	r3, [r4, #20]
 8007e22:	60a3      	str	r3, [r4, #8]
 8007e24:	e7f3      	b.n	8007e0e <__swsetup_r+0x9e>
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	2000007c 	.word	0x2000007c

08007e2c <memset>:
 8007e2c:	0003      	movs	r3, r0
 8007e2e:	1882      	adds	r2, r0, r2
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d100      	bne.n	8007e36 <memset+0xa>
 8007e34:	4770      	bx	lr
 8007e36:	7019      	strb	r1, [r3, #0]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	e7f9      	b.n	8007e30 <memset+0x4>

08007e3c <_close_r>:
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	b570      	push	{r4, r5, r6, lr}
 8007e40:	4d06      	ldr	r5, [pc, #24]	@ (8007e5c <_close_r+0x20>)
 8007e42:	0004      	movs	r4, r0
 8007e44:	0008      	movs	r0, r1
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	f7fa f979 	bl	800213e <_close>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d103      	bne.n	8007e58 <_close_r+0x1c>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d000      	beq.n	8007e58 <_close_r+0x1c>
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
 8007e5a:	46c0      	nop			@ (mov r8, r8)
 8007e5c:	200008d8 	.word	0x200008d8

08007e60 <_lseek_r>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	0004      	movs	r4, r0
 8007e64:	0008      	movs	r0, r1
 8007e66:	0011      	movs	r1, r2
 8007e68:	001a      	movs	r2, r3
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4d05      	ldr	r5, [pc, #20]	@ (8007e84 <_lseek_r+0x24>)
 8007e6e:	602b      	str	r3, [r5, #0]
 8007e70:	f7fa f986 	bl	8002180 <_lseek>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d103      	bne.n	8007e80 <_lseek_r+0x20>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d000      	beq.n	8007e80 <_lseek_r+0x20>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	46c0      	nop			@ (mov r8, r8)
 8007e84:	200008d8 	.word	0x200008d8

08007e88 <_read_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	0004      	movs	r4, r0
 8007e8c:	0008      	movs	r0, r1
 8007e8e:	0011      	movs	r1, r2
 8007e90:	001a      	movs	r2, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	4d05      	ldr	r5, [pc, #20]	@ (8007eac <_read_r+0x24>)
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7fa f918 	bl	80020cc <_read>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d103      	bne.n	8007ea8 <_read_r+0x20>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d000      	beq.n	8007ea8 <_read_r+0x20>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	46c0      	nop			@ (mov r8, r8)
 8007eac:	200008d8 	.word	0x200008d8

08007eb0 <_write_r>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	0004      	movs	r4, r0
 8007eb4:	0008      	movs	r0, r1
 8007eb6:	0011      	movs	r1, r2
 8007eb8:	001a      	movs	r2, r3
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4d05      	ldr	r5, [pc, #20]	@ (8007ed4 <_write_r+0x24>)
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	f7fa f921 	bl	8002106 <_write>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d103      	bne.n	8007ed0 <_write_r+0x20>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d000      	beq.n	8007ed0 <_write_r+0x20>
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	46c0      	nop			@ (mov r8, r8)
 8007ed4:	200008d8 	.word	0x200008d8

08007ed8 <__errno>:
 8007ed8:	4b01      	ldr	r3, [pc, #4]	@ (8007ee0 <__errno+0x8>)
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	4770      	bx	lr
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	2000007c 	.word	0x2000007c

08007ee4 <__libc_init_array>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	4c0c      	ldr	r4, [pc, #48]	@ (8007f1c <__libc_init_array+0x38>)
 8007eea:	4d0d      	ldr	r5, [pc, #52]	@ (8007f20 <__libc_init_array+0x3c>)
 8007eec:	1b64      	subs	r4, r4, r5
 8007eee:	10a4      	asrs	r4, r4, #2
 8007ef0:	42a6      	cmp	r6, r4
 8007ef2:	d109      	bne.n	8007f08 <__libc_init_array+0x24>
 8007ef4:	2600      	movs	r6, #0
 8007ef6:	f000 fd43 	bl	8008980 <_init>
 8007efa:	4c0a      	ldr	r4, [pc, #40]	@ (8007f24 <__libc_init_array+0x40>)
 8007efc:	4d0a      	ldr	r5, [pc, #40]	@ (8007f28 <__libc_init_array+0x44>)
 8007efe:	1b64      	subs	r4, r4, r5
 8007f00:	10a4      	asrs	r4, r4, #2
 8007f02:	42a6      	cmp	r6, r4
 8007f04:	d105      	bne.n	8007f12 <__libc_init_array+0x2e>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	00b3      	lsls	r3, r6, #2
 8007f0a:	58eb      	ldr	r3, [r5, r3]
 8007f0c:	4798      	blx	r3
 8007f0e:	3601      	adds	r6, #1
 8007f10:	e7ee      	b.n	8007ef0 <__libc_init_array+0xc>
 8007f12:	00b3      	lsls	r3, r6, #2
 8007f14:	58eb      	ldr	r3, [r5, r3]
 8007f16:	4798      	blx	r3
 8007f18:	3601      	adds	r6, #1
 8007f1a:	e7f2      	b.n	8007f02 <__libc_init_array+0x1e>
 8007f1c:	08008edc 	.word	0x08008edc
 8007f20:	08008edc 	.word	0x08008edc
 8007f24:	08008ee0 	.word	0x08008ee0
 8007f28:	08008edc 	.word	0x08008edc

08007f2c <__retarget_lock_init_recursive>:
 8007f2c:	4770      	bx	lr

08007f2e <__retarget_lock_acquire_recursive>:
 8007f2e:	4770      	bx	lr

08007f30 <__retarget_lock_release_recursive>:
 8007f30:	4770      	bx	lr

08007f32 <memcpy>:
 8007f32:	2300      	movs	r3, #0
 8007f34:	b510      	push	{r4, lr}
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d100      	bne.n	8007f3c <memcpy+0xa>
 8007f3a:	bd10      	pop	{r4, pc}
 8007f3c:	5ccc      	ldrb	r4, [r1, r3]
 8007f3e:	54c4      	strb	r4, [r0, r3]
 8007f40:	3301      	adds	r3, #1
 8007f42:	e7f8      	b.n	8007f36 <memcpy+0x4>

08007f44 <_free_r>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	0005      	movs	r5, r0
 8007f48:	1e0c      	subs	r4, r1, #0
 8007f4a:	d010      	beq.n	8007f6e <_free_r+0x2a>
 8007f4c:	3c04      	subs	r4, #4
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	da00      	bge.n	8007f56 <_free_r+0x12>
 8007f54:	18e4      	adds	r4, r4, r3
 8007f56:	0028      	movs	r0, r5
 8007f58:	f000 f8e0 	bl	800811c <__malloc_lock>
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd4 <_free_r+0x90>)
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <_free_r+0x2c>
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6014      	str	r4, [r2, #0]
 8007f68:	0028      	movs	r0, r5
 8007f6a:	f000 f8df 	bl	800812c <__malloc_unlock>
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	d908      	bls.n	8007f86 <_free_r+0x42>
 8007f74:	6820      	ldr	r0, [r4, #0]
 8007f76:	1821      	adds	r1, r4, r0
 8007f78:	428b      	cmp	r3, r1
 8007f7a:	d1f3      	bne.n	8007f64 <_free_r+0x20>
 8007f7c:	6819      	ldr	r1, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	1809      	adds	r1, r1, r0
 8007f82:	6021      	str	r1, [r4, #0]
 8007f84:	e7ee      	b.n	8007f64 <_free_r+0x20>
 8007f86:	001a      	movs	r2, r3
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <_free_r+0x4e>
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	d9f9      	bls.n	8007f86 <_free_r+0x42>
 8007f92:	6811      	ldr	r1, [r2, #0]
 8007f94:	1850      	adds	r0, r2, r1
 8007f96:	42a0      	cmp	r0, r4
 8007f98:	d10b      	bne.n	8007fb2 <_free_r+0x6e>
 8007f9a:	6820      	ldr	r0, [r4, #0]
 8007f9c:	1809      	adds	r1, r1, r0
 8007f9e:	1850      	adds	r0, r2, r1
 8007fa0:	6011      	str	r1, [r2, #0]
 8007fa2:	4283      	cmp	r3, r0
 8007fa4:	d1e0      	bne.n	8007f68 <_free_r+0x24>
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	1841      	adds	r1, r0, r1
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	6053      	str	r3, [r2, #4]
 8007fb0:	e7da      	b.n	8007f68 <_free_r+0x24>
 8007fb2:	42a0      	cmp	r0, r4
 8007fb4:	d902      	bls.n	8007fbc <_free_r+0x78>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	e7d5      	b.n	8007f68 <_free_r+0x24>
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	1821      	adds	r1, r4, r0
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	d103      	bne.n	8007fcc <_free_r+0x88>
 8007fc4:	6819      	ldr	r1, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	1809      	adds	r1, r1, r0
 8007fca:	6021      	str	r1, [r4, #0]
 8007fcc:	6063      	str	r3, [r4, #4]
 8007fce:	6054      	str	r4, [r2, #4]
 8007fd0:	e7ca      	b.n	8007f68 <_free_r+0x24>
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	200008e4 	.word	0x200008e4

08007fd8 <sbrk_aligned>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4e0f      	ldr	r6, [pc, #60]	@ (8008018 <sbrk_aligned+0x40>)
 8007fdc:	000d      	movs	r5, r1
 8007fde:	6831      	ldr	r1, [r6, #0]
 8007fe0:	0004      	movs	r4, r0
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d102      	bne.n	8007fec <sbrk_aligned+0x14>
 8007fe6:	f000 fcad 	bl	8008944 <_sbrk_r>
 8007fea:	6030      	str	r0, [r6, #0]
 8007fec:	0029      	movs	r1, r5
 8007fee:	0020      	movs	r0, r4
 8007ff0:	f000 fca8 	bl	8008944 <_sbrk_r>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d103      	bne.n	8008000 <sbrk_aligned+0x28>
 8007ff8:	2501      	movs	r5, #1
 8007ffa:	426d      	negs	r5, r5
 8007ffc:	0028      	movs	r0, r5
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	2303      	movs	r3, #3
 8008002:	1cc5      	adds	r5, r0, #3
 8008004:	439d      	bics	r5, r3
 8008006:	42a8      	cmp	r0, r5
 8008008:	d0f8      	beq.n	8007ffc <sbrk_aligned+0x24>
 800800a:	1a29      	subs	r1, r5, r0
 800800c:	0020      	movs	r0, r4
 800800e:	f000 fc99 	bl	8008944 <_sbrk_r>
 8008012:	3001      	adds	r0, #1
 8008014:	d1f2      	bne.n	8007ffc <sbrk_aligned+0x24>
 8008016:	e7ef      	b.n	8007ff8 <sbrk_aligned+0x20>
 8008018:	200008e0 	.word	0x200008e0

0800801c <_malloc_r>:
 800801c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800801e:	2203      	movs	r2, #3
 8008020:	1ccb      	adds	r3, r1, #3
 8008022:	4393      	bics	r3, r2
 8008024:	3308      	adds	r3, #8
 8008026:	0005      	movs	r5, r0
 8008028:	001f      	movs	r7, r3
 800802a:	2b0c      	cmp	r3, #12
 800802c:	d234      	bcs.n	8008098 <_malloc_r+0x7c>
 800802e:	270c      	movs	r7, #12
 8008030:	42b9      	cmp	r1, r7
 8008032:	d833      	bhi.n	800809c <_malloc_r+0x80>
 8008034:	0028      	movs	r0, r5
 8008036:	f000 f871 	bl	800811c <__malloc_lock>
 800803a:	4e37      	ldr	r6, [pc, #220]	@ (8008118 <_malloc_r+0xfc>)
 800803c:	6833      	ldr	r3, [r6, #0]
 800803e:	001c      	movs	r4, r3
 8008040:	2c00      	cmp	r4, #0
 8008042:	d12f      	bne.n	80080a4 <_malloc_r+0x88>
 8008044:	0039      	movs	r1, r7
 8008046:	0028      	movs	r0, r5
 8008048:	f7ff ffc6 	bl	8007fd8 <sbrk_aligned>
 800804c:	0004      	movs	r4, r0
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	d15f      	bne.n	8008112 <_malloc_r+0xf6>
 8008052:	6834      	ldr	r4, [r6, #0]
 8008054:	9400      	str	r4, [sp, #0]
 8008056:	9b00      	ldr	r3, [sp, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d14a      	bne.n	80080f2 <_malloc_r+0xd6>
 800805c:	2c00      	cmp	r4, #0
 800805e:	d052      	beq.n	8008106 <_malloc_r+0xea>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	0028      	movs	r0, r5
 8008064:	18e3      	adds	r3, r4, r3
 8008066:	9900      	ldr	r1, [sp, #0]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	f000 fc6b 	bl	8008944 <_sbrk_r>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	4283      	cmp	r3, r0
 8008072:	d148      	bne.n	8008106 <_malloc_r+0xea>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	0028      	movs	r0, r5
 8008078:	1aff      	subs	r7, r7, r3
 800807a:	0039      	movs	r1, r7
 800807c:	f7ff ffac 	bl	8007fd8 <sbrk_aligned>
 8008080:	3001      	adds	r0, #1
 8008082:	d040      	beq.n	8008106 <_malloc_r+0xea>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	19db      	adds	r3, r3, r7
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	6833      	ldr	r3, [r6, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	2a00      	cmp	r2, #0
 8008090:	d133      	bne.n	80080fa <_malloc_r+0xde>
 8008092:	9b00      	ldr	r3, [sp, #0]
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	e019      	b.n	80080cc <_malloc_r+0xb0>
 8008098:	2b00      	cmp	r3, #0
 800809a:	dac9      	bge.n	8008030 <_malloc_r+0x14>
 800809c:	230c      	movs	r3, #12
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	2000      	movs	r0, #0
 80080a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080a4:	6821      	ldr	r1, [r4, #0]
 80080a6:	1bc9      	subs	r1, r1, r7
 80080a8:	d420      	bmi.n	80080ec <_malloc_r+0xd0>
 80080aa:	290b      	cmp	r1, #11
 80080ac:	d90a      	bls.n	80080c4 <_malloc_r+0xa8>
 80080ae:	19e2      	adds	r2, r4, r7
 80080b0:	6027      	str	r7, [r4, #0]
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	d104      	bne.n	80080c0 <_malloc_r+0xa4>
 80080b6:	6032      	str	r2, [r6, #0]
 80080b8:	6863      	ldr	r3, [r4, #4]
 80080ba:	6011      	str	r1, [r2, #0]
 80080bc:	6053      	str	r3, [r2, #4]
 80080be:	e005      	b.n	80080cc <_malloc_r+0xb0>
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	e7f9      	b.n	80080b8 <_malloc_r+0x9c>
 80080c4:	6862      	ldr	r2, [r4, #4]
 80080c6:	42a3      	cmp	r3, r4
 80080c8:	d10e      	bne.n	80080e8 <_malloc_r+0xcc>
 80080ca:	6032      	str	r2, [r6, #0]
 80080cc:	0028      	movs	r0, r5
 80080ce:	f000 f82d 	bl	800812c <__malloc_unlock>
 80080d2:	0020      	movs	r0, r4
 80080d4:	2207      	movs	r2, #7
 80080d6:	300b      	adds	r0, #11
 80080d8:	1d23      	adds	r3, r4, #4
 80080da:	4390      	bics	r0, r2
 80080dc:	1ac2      	subs	r2, r0, r3
 80080de:	4298      	cmp	r0, r3
 80080e0:	d0df      	beq.n	80080a2 <_malloc_r+0x86>
 80080e2:	1a1b      	subs	r3, r3, r0
 80080e4:	50a3      	str	r3, [r4, r2]
 80080e6:	e7dc      	b.n	80080a2 <_malloc_r+0x86>
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	e7ef      	b.n	80080cc <_malloc_r+0xb0>
 80080ec:	0023      	movs	r3, r4
 80080ee:	6864      	ldr	r4, [r4, #4]
 80080f0:	e7a6      	b.n	8008040 <_malloc_r+0x24>
 80080f2:	9c00      	ldr	r4, [sp, #0]
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	e7ad      	b.n	8008056 <_malloc_r+0x3a>
 80080fa:	001a      	movs	r2, r3
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	42a3      	cmp	r3, r4
 8008100:	d1fb      	bne.n	80080fa <_malloc_r+0xde>
 8008102:	2300      	movs	r3, #0
 8008104:	e7da      	b.n	80080bc <_malloc_r+0xa0>
 8008106:	230c      	movs	r3, #12
 8008108:	0028      	movs	r0, r5
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f000 f80e 	bl	800812c <__malloc_unlock>
 8008110:	e7c6      	b.n	80080a0 <_malloc_r+0x84>
 8008112:	6007      	str	r7, [r0, #0]
 8008114:	e7da      	b.n	80080cc <_malloc_r+0xb0>
 8008116:	46c0      	nop			@ (mov r8, r8)
 8008118:	200008e4 	.word	0x200008e4

0800811c <__malloc_lock>:
 800811c:	b510      	push	{r4, lr}
 800811e:	4802      	ldr	r0, [pc, #8]	@ (8008128 <__malloc_lock+0xc>)
 8008120:	f7ff ff05 	bl	8007f2e <__retarget_lock_acquire_recursive>
 8008124:	bd10      	pop	{r4, pc}
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	200008dc 	.word	0x200008dc

0800812c <__malloc_unlock>:
 800812c:	b510      	push	{r4, lr}
 800812e:	4802      	ldr	r0, [pc, #8]	@ (8008138 <__malloc_unlock+0xc>)
 8008130:	f7ff fefe 	bl	8007f30 <__retarget_lock_release_recursive>
 8008134:	bd10      	pop	{r4, pc}
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	200008dc 	.word	0x200008dc

0800813c <__sfputc_r>:
 800813c:	6893      	ldr	r3, [r2, #8]
 800813e:	b510      	push	{r4, lr}
 8008140:	3b01      	subs	r3, #1
 8008142:	6093      	str	r3, [r2, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	da04      	bge.n	8008152 <__sfputc_r+0x16>
 8008148:	6994      	ldr	r4, [r2, #24]
 800814a:	42a3      	cmp	r3, r4
 800814c:	db07      	blt.n	800815e <__sfputc_r+0x22>
 800814e:	290a      	cmp	r1, #10
 8008150:	d005      	beq.n	800815e <__sfputc_r+0x22>
 8008152:	6813      	ldr	r3, [r2, #0]
 8008154:	1c58      	adds	r0, r3, #1
 8008156:	6010      	str	r0, [r2, #0]
 8008158:	7019      	strb	r1, [r3, #0]
 800815a:	0008      	movs	r0, r1
 800815c:	bd10      	pop	{r4, pc}
 800815e:	f7ff fdc5 	bl	8007cec <__swbuf_r>
 8008162:	0001      	movs	r1, r0
 8008164:	e7f9      	b.n	800815a <__sfputc_r+0x1e>

08008166 <__sfputs_r>:
 8008166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008168:	0006      	movs	r6, r0
 800816a:	000f      	movs	r7, r1
 800816c:	0014      	movs	r4, r2
 800816e:	18d5      	adds	r5, r2, r3
 8008170:	42ac      	cmp	r4, r5
 8008172:	d101      	bne.n	8008178 <__sfputs_r+0x12>
 8008174:	2000      	movs	r0, #0
 8008176:	e007      	b.n	8008188 <__sfputs_r+0x22>
 8008178:	7821      	ldrb	r1, [r4, #0]
 800817a:	003a      	movs	r2, r7
 800817c:	0030      	movs	r0, r6
 800817e:	f7ff ffdd 	bl	800813c <__sfputc_r>
 8008182:	3401      	adds	r4, #1
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d1f3      	bne.n	8008170 <__sfputs_r+0xa>
 8008188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800818c <_vfiprintf_r>:
 800818c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800818e:	b0a1      	sub	sp, #132	@ 0x84
 8008190:	000f      	movs	r7, r1
 8008192:	0015      	movs	r5, r2
 8008194:	001e      	movs	r6, r3
 8008196:	9003      	str	r0, [sp, #12]
 8008198:	2800      	cmp	r0, #0
 800819a:	d004      	beq.n	80081a6 <_vfiprintf_r+0x1a>
 800819c:	6a03      	ldr	r3, [r0, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <_vfiprintf_r+0x1a>
 80081a2:	f7ff fcb3 	bl	8007b0c <__sinit>
 80081a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081a8:	07db      	lsls	r3, r3, #31
 80081aa:	d405      	bmi.n	80081b8 <_vfiprintf_r+0x2c>
 80081ac:	89bb      	ldrh	r3, [r7, #12]
 80081ae:	059b      	lsls	r3, r3, #22
 80081b0:	d402      	bmi.n	80081b8 <_vfiprintf_r+0x2c>
 80081b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80081b4:	f7ff febb 	bl	8007f2e <__retarget_lock_acquire_recursive>
 80081b8:	89bb      	ldrh	r3, [r7, #12]
 80081ba:	071b      	lsls	r3, r3, #28
 80081bc:	d502      	bpl.n	80081c4 <_vfiprintf_r+0x38>
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d113      	bne.n	80081ec <_vfiprintf_r+0x60>
 80081c4:	0039      	movs	r1, r7
 80081c6:	9803      	ldr	r0, [sp, #12]
 80081c8:	f7ff fdd2 	bl	8007d70 <__swsetup_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d00d      	beq.n	80081ec <_vfiprintf_r+0x60>
 80081d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081d2:	07db      	lsls	r3, r3, #31
 80081d4:	d503      	bpl.n	80081de <_vfiprintf_r+0x52>
 80081d6:	2001      	movs	r0, #1
 80081d8:	4240      	negs	r0, r0
 80081da:	b021      	add	sp, #132	@ 0x84
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081de:	89bb      	ldrh	r3, [r7, #12]
 80081e0:	059b      	lsls	r3, r3, #22
 80081e2:	d4f8      	bmi.n	80081d6 <_vfiprintf_r+0x4a>
 80081e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80081e6:	f7ff fea3 	bl	8007f30 <__retarget_lock_release_recursive>
 80081ea:	e7f4      	b.n	80081d6 <_vfiprintf_r+0x4a>
 80081ec:	2300      	movs	r3, #0
 80081ee:	ac08      	add	r4, sp, #32
 80081f0:	6163      	str	r3, [r4, #20]
 80081f2:	3320      	adds	r3, #32
 80081f4:	7663      	strb	r3, [r4, #25]
 80081f6:	3310      	adds	r3, #16
 80081f8:	76a3      	strb	r3, [r4, #26]
 80081fa:	9607      	str	r6, [sp, #28]
 80081fc:	002e      	movs	r6, r5
 80081fe:	7833      	ldrb	r3, [r6, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <_vfiprintf_r+0x7c>
 8008204:	2b25      	cmp	r3, #37	@ 0x25
 8008206:	d148      	bne.n	800829a <_vfiprintf_r+0x10e>
 8008208:	1b73      	subs	r3, r6, r5
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	42ae      	cmp	r6, r5
 800820e:	d00b      	beq.n	8008228 <_vfiprintf_r+0x9c>
 8008210:	002a      	movs	r2, r5
 8008212:	0039      	movs	r1, r7
 8008214:	9803      	ldr	r0, [sp, #12]
 8008216:	f7ff ffa6 	bl	8008166 <__sfputs_r>
 800821a:	3001      	adds	r0, #1
 800821c:	d100      	bne.n	8008220 <_vfiprintf_r+0x94>
 800821e:	e0ae      	b.n	800837e <_vfiprintf_r+0x1f2>
 8008220:	6963      	ldr	r3, [r4, #20]
 8008222:	9a05      	ldr	r2, [sp, #20]
 8008224:	189b      	adds	r3, r3, r2
 8008226:	6163      	str	r3, [r4, #20]
 8008228:	7833      	ldrb	r3, [r6, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d100      	bne.n	8008230 <_vfiprintf_r+0xa4>
 800822e:	e0a6      	b.n	800837e <_vfiprintf_r+0x1f2>
 8008230:	2201      	movs	r2, #1
 8008232:	2300      	movs	r3, #0
 8008234:	4252      	negs	r2, r2
 8008236:	6062      	str	r2, [r4, #4]
 8008238:	a904      	add	r1, sp, #16
 800823a:	3254      	adds	r2, #84	@ 0x54
 800823c:	1852      	adds	r2, r2, r1
 800823e:	1c75      	adds	r5, r6, #1
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	60e3      	str	r3, [r4, #12]
 8008244:	60a3      	str	r3, [r4, #8]
 8008246:	7013      	strb	r3, [r2, #0]
 8008248:	65a3      	str	r3, [r4, #88]	@ 0x58
 800824a:	4b59      	ldr	r3, [pc, #356]	@ (80083b0 <_vfiprintf_r+0x224>)
 800824c:	2205      	movs	r2, #5
 800824e:	0018      	movs	r0, r3
 8008250:	7829      	ldrb	r1, [r5, #0]
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	f000 fb88 	bl	8008968 <memchr>
 8008258:	1c6e      	adds	r6, r5, #1
 800825a:	2800      	cmp	r0, #0
 800825c:	d11f      	bne.n	800829e <_vfiprintf_r+0x112>
 800825e:	6822      	ldr	r2, [r4, #0]
 8008260:	06d3      	lsls	r3, r2, #27
 8008262:	d504      	bpl.n	800826e <_vfiprintf_r+0xe2>
 8008264:	2353      	movs	r3, #83	@ 0x53
 8008266:	a904      	add	r1, sp, #16
 8008268:	185b      	adds	r3, r3, r1
 800826a:	2120      	movs	r1, #32
 800826c:	7019      	strb	r1, [r3, #0]
 800826e:	0713      	lsls	r3, r2, #28
 8008270:	d504      	bpl.n	800827c <_vfiprintf_r+0xf0>
 8008272:	2353      	movs	r3, #83	@ 0x53
 8008274:	a904      	add	r1, sp, #16
 8008276:	185b      	adds	r3, r3, r1
 8008278:	212b      	movs	r1, #43	@ 0x2b
 800827a:	7019      	strb	r1, [r3, #0]
 800827c:	782b      	ldrb	r3, [r5, #0]
 800827e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008280:	d016      	beq.n	80082b0 <_vfiprintf_r+0x124>
 8008282:	002e      	movs	r6, r5
 8008284:	2100      	movs	r1, #0
 8008286:	200a      	movs	r0, #10
 8008288:	68e3      	ldr	r3, [r4, #12]
 800828a:	7832      	ldrb	r2, [r6, #0]
 800828c:	1c75      	adds	r5, r6, #1
 800828e:	3a30      	subs	r2, #48	@ 0x30
 8008290:	2a09      	cmp	r2, #9
 8008292:	d950      	bls.n	8008336 <_vfiprintf_r+0x1aa>
 8008294:	2900      	cmp	r1, #0
 8008296:	d111      	bne.n	80082bc <_vfiprintf_r+0x130>
 8008298:	e017      	b.n	80082ca <_vfiprintf_r+0x13e>
 800829a:	3601      	adds	r6, #1
 800829c:	e7af      	b.n	80081fe <_vfiprintf_r+0x72>
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	6822      	ldr	r2, [r4, #0]
 80082a2:	1ac0      	subs	r0, r0, r3
 80082a4:	2301      	movs	r3, #1
 80082a6:	4083      	lsls	r3, r0
 80082a8:	4313      	orrs	r3, r2
 80082aa:	0035      	movs	r5, r6
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	e7cc      	b.n	800824a <_vfiprintf_r+0xbe>
 80082b0:	9b07      	ldr	r3, [sp, #28]
 80082b2:	1d19      	adds	r1, r3, #4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	9107      	str	r1, [sp, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	db01      	blt.n	80082c0 <_vfiprintf_r+0x134>
 80082bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082be:	e004      	b.n	80082ca <_vfiprintf_r+0x13e>
 80082c0:	425b      	negs	r3, r3
 80082c2:	60e3      	str	r3, [r4, #12]
 80082c4:	2302      	movs	r3, #2
 80082c6:	4313      	orrs	r3, r2
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	7833      	ldrb	r3, [r6, #0]
 80082cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80082ce:	d10c      	bne.n	80082ea <_vfiprintf_r+0x15e>
 80082d0:	7873      	ldrb	r3, [r6, #1]
 80082d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d4:	d134      	bne.n	8008340 <_vfiprintf_r+0x1b4>
 80082d6:	9b07      	ldr	r3, [sp, #28]
 80082d8:	3602      	adds	r6, #2
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9207      	str	r2, [sp, #28]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	da01      	bge.n	80082e8 <_vfiprintf_r+0x15c>
 80082e4:	2301      	movs	r3, #1
 80082e6:	425b      	negs	r3, r3
 80082e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ea:	4d32      	ldr	r5, [pc, #200]	@ (80083b4 <_vfiprintf_r+0x228>)
 80082ec:	2203      	movs	r2, #3
 80082ee:	0028      	movs	r0, r5
 80082f0:	7831      	ldrb	r1, [r6, #0]
 80082f2:	f000 fb39 	bl	8008968 <memchr>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d006      	beq.n	8008308 <_vfiprintf_r+0x17c>
 80082fa:	2340      	movs	r3, #64	@ 0x40
 80082fc:	1b40      	subs	r0, r0, r5
 80082fe:	4083      	lsls	r3, r0
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	3601      	adds	r6, #1
 8008304:	4313      	orrs	r3, r2
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	7831      	ldrb	r1, [r6, #0]
 800830a:	2206      	movs	r2, #6
 800830c:	482a      	ldr	r0, [pc, #168]	@ (80083b8 <_vfiprintf_r+0x22c>)
 800830e:	1c75      	adds	r5, r6, #1
 8008310:	7621      	strb	r1, [r4, #24]
 8008312:	f000 fb29 	bl	8008968 <memchr>
 8008316:	2800      	cmp	r0, #0
 8008318:	d040      	beq.n	800839c <_vfiprintf_r+0x210>
 800831a:	4b28      	ldr	r3, [pc, #160]	@ (80083bc <_vfiprintf_r+0x230>)
 800831c:	2b00      	cmp	r3, #0
 800831e:	d122      	bne.n	8008366 <_vfiprintf_r+0x1da>
 8008320:	2207      	movs	r2, #7
 8008322:	9b07      	ldr	r3, [sp, #28]
 8008324:	3307      	adds	r3, #7
 8008326:	4393      	bics	r3, r2
 8008328:	3308      	adds	r3, #8
 800832a:	9307      	str	r3, [sp, #28]
 800832c:	6963      	ldr	r3, [r4, #20]
 800832e:	9a04      	ldr	r2, [sp, #16]
 8008330:	189b      	adds	r3, r3, r2
 8008332:	6163      	str	r3, [r4, #20]
 8008334:	e762      	b.n	80081fc <_vfiprintf_r+0x70>
 8008336:	4343      	muls	r3, r0
 8008338:	002e      	movs	r6, r5
 800833a:	2101      	movs	r1, #1
 800833c:	189b      	adds	r3, r3, r2
 800833e:	e7a4      	b.n	800828a <_vfiprintf_r+0xfe>
 8008340:	2300      	movs	r3, #0
 8008342:	200a      	movs	r0, #10
 8008344:	0019      	movs	r1, r3
 8008346:	3601      	adds	r6, #1
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	7832      	ldrb	r2, [r6, #0]
 800834c:	1c75      	adds	r5, r6, #1
 800834e:	3a30      	subs	r2, #48	@ 0x30
 8008350:	2a09      	cmp	r2, #9
 8008352:	d903      	bls.n	800835c <_vfiprintf_r+0x1d0>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0c8      	beq.n	80082ea <_vfiprintf_r+0x15e>
 8008358:	9109      	str	r1, [sp, #36]	@ 0x24
 800835a:	e7c6      	b.n	80082ea <_vfiprintf_r+0x15e>
 800835c:	4341      	muls	r1, r0
 800835e:	002e      	movs	r6, r5
 8008360:	2301      	movs	r3, #1
 8008362:	1889      	adds	r1, r1, r2
 8008364:	e7f1      	b.n	800834a <_vfiprintf_r+0x1be>
 8008366:	aa07      	add	r2, sp, #28
 8008368:	9200      	str	r2, [sp, #0]
 800836a:	0021      	movs	r1, r4
 800836c:	003a      	movs	r2, r7
 800836e:	4b14      	ldr	r3, [pc, #80]	@ (80083c0 <_vfiprintf_r+0x234>)
 8008370:	9803      	ldr	r0, [sp, #12]
 8008372:	e000      	b.n	8008376 <_vfiprintf_r+0x1ea>
 8008374:	bf00      	nop
 8008376:	9004      	str	r0, [sp, #16]
 8008378:	9b04      	ldr	r3, [sp, #16]
 800837a:	3301      	adds	r3, #1
 800837c:	d1d6      	bne.n	800832c <_vfiprintf_r+0x1a0>
 800837e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008380:	07db      	lsls	r3, r3, #31
 8008382:	d405      	bmi.n	8008390 <_vfiprintf_r+0x204>
 8008384:	89bb      	ldrh	r3, [r7, #12]
 8008386:	059b      	lsls	r3, r3, #22
 8008388:	d402      	bmi.n	8008390 <_vfiprintf_r+0x204>
 800838a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800838c:	f7ff fdd0 	bl	8007f30 <__retarget_lock_release_recursive>
 8008390:	89bb      	ldrh	r3, [r7, #12]
 8008392:	065b      	lsls	r3, r3, #25
 8008394:	d500      	bpl.n	8008398 <_vfiprintf_r+0x20c>
 8008396:	e71e      	b.n	80081d6 <_vfiprintf_r+0x4a>
 8008398:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800839a:	e71e      	b.n	80081da <_vfiprintf_r+0x4e>
 800839c:	aa07      	add	r2, sp, #28
 800839e:	9200      	str	r2, [sp, #0]
 80083a0:	0021      	movs	r1, r4
 80083a2:	003a      	movs	r2, r7
 80083a4:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <_vfiprintf_r+0x234>)
 80083a6:	9803      	ldr	r0, [sp, #12]
 80083a8:	f000 f87c 	bl	80084a4 <_printf_i>
 80083ac:	e7e3      	b.n	8008376 <_vfiprintf_r+0x1ea>
 80083ae:	46c0      	nop			@ (mov r8, r8)
 80083b0:	08008ea8 	.word	0x08008ea8
 80083b4:	08008eae 	.word	0x08008eae
 80083b8:	08008eb2 	.word	0x08008eb2
 80083bc:	00000000 	.word	0x00000000
 80083c0:	08008167 	.word	0x08008167

080083c4 <_printf_common>:
 80083c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083c6:	0016      	movs	r6, r2
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	688a      	ldr	r2, [r1, #8]
 80083cc:	690b      	ldr	r3, [r1, #16]
 80083ce:	000c      	movs	r4, r1
 80083d0:	9000      	str	r0, [sp, #0]
 80083d2:	4293      	cmp	r3, r2
 80083d4:	da00      	bge.n	80083d8 <_printf_common+0x14>
 80083d6:	0013      	movs	r3, r2
 80083d8:	0022      	movs	r2, r4
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	3243      	adds	r2, #67	@ 0x43
 80083de:	7812      	ldrb	r2, [r2, #0]
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	d001      	beq.n	80083e8 <_printf_common+0x24>
 80083e4:	3301      	adds	r3, #1
 80083e6:	6033      	str	r3, [r6, #0]
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	069b      	lsls	r3, r3, #26
 80083ec:	d502      	bpl.n	80083f4 <_printf_common+0x30>
 80083ee:	6833      	ldr	r3, [r6, #0]
 80083f0:	3302      	adds	r3, #2
 80083f2:	6033      	str	r3, [r6, #0]
 80083f4:	6822      	ldr	r2, [r4, #0]
 80083f6:	2306      	movs	r3, #6
 80083f8:	0015      	movs	r5, r2
 80083fa:	401d      	ands	r5, r3
 80083fc:	421a      	tst	r2, r3
 80083fe:	d027      	beq.n	8008450 <_printf_common+0x8c>
 8008400:	0023      	movs	r3, r4
 8008402:	3343      	adds	r3, #67	@ 0x43
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	1e5a      	subs	r2, r3, #1
 8008408:	4193      	sbcs	r3, r2
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	0692      	lsls	r2, r2, #26
 800840e:	d430      	bmi.n	8008472 <_printf_common+0xae>
 8008410:	0022      	movs	r2, r4
 8008412:	9901      	ldr	r1, [sp, #4]
 8008414:	9800      	ldr	r0, [sp, #0]
 8008416:	9d08      	ldr	r5, [sp, #32]
 8008418:	3243      	adds	r2, #67	@ 0x43
 800841a:	47a8      	blx	r5
 800841c:	3001      	adds	r0, #1
 800841e:	d025      	beq.n	800846c <_printf_common+0xa8>
 8008420:	2206      	movs	r2, #6
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	2500      	movs	r5, #0
 8008426:	4013      	ands	r3, r2
 8008428:	2b04      	cmp	r3, #4
 800842a:	d105      	bne.n	8008438 <_printf_common+0x74>
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	68e5      	ldr	r5, [r4, #12]
 8008430:	1aed      	subs	r5, r5, r3
 8008432:	43eb      	mvns	r3, r5
 8008434:	17db      	asrs	r3, r3, #31
 8008436:	401d      	ands	r5, r3
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	6922      	ldr	r2, [r4, #16]
 800843c:	4293      	cmp	r3, r2
 800843e:	dd01      	ble.n	8008444 <_printf_common+0x80>
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	18ed      	adds	r5, r5, r3
 8008444:	2600      	movs	r6, #0
 8008446:	42b5      	cmp	r5, r6
 8008448:	d120      	bne.n	800848c <_printf_common+0xc8>
 800844a:	2000      	movs	r0, #0
 800844c:	e010      	b.n	8008470 <_printf_common+0xac>
 800844e:	3501      	adds	r5, #1
 8008450:	68e3      	ldr	r3, [r4, #12]
 8008452:	6832      	ldr	r2, [r6, #0]
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	42ab      	cmp	r3, r5
 8008458:	ddd2      	ble.n	8008400 <_printf_common+0x3c>
 800845a:	0022      	movs	r2, r4
 800845c:	2301      	movs	r3, #1
 800845e:	9901      	ldr	r1, [sp, #4]
 8008460:	9800      	ldr	r0, [sp, #0]
 8008462:	9f08      	ldr	r7, [sp, #32]
 8008464:	3219      	adds	r2, #25
 8008466:	47b8      	blx	r7
 8008468:	3001      	adds	r0, #1
 800846a:	d1f0      	bne.n	800844e <_printf_common+0x8a>
 800846c:	2001      	movs	r0, #1
 800846e:	4240      	negs	r0, r0
 8008470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008472:	2030      	movs	r0, #48	@ 0x30
 8008474:	18e1      	adds	r1, r4, r3
 8008476:	3143      	adds	r1, #67	@ 0x43
 8008478:	7008      	strb	r0, [r1, #0]
 800847a:	0021      	movs	r1, r4
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	3145      	adds	r1, #69	@ 0x45
 8008480:	7809      	ldrb	r1, [r1, #0]
 8008482:	18a2      	adds	r2, r4, r2
 8008484:	3243      	adds	r2, #67	@ 0x43
 8008486:	3302      	adds	r3, #2
 8008488:	7011      	strb	r1, [r2, #0]
 800848a:	e7c1      	b.n	8008410 <_printf_common+0x4c>
 800848c:	0022      	movs	r2, r4
 800848e:	2301      	movs	r3, #1
 8008490:	9901      	ldr	r1, [sp, #4]
 8008492:	9800      	ldr	r0, [sp, #0]
 8008494:	9f08      	ldr	r7, [sp, #32]
 8008496:	321a      	adds	r2, #26
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	d0e6      	beq.n	800846c <_printf_common+0xa8>
 800849e:	3601      	adds	r6, #1
 80084a0:	e7d1      	b.n	8008446 <_printf_common+0x82>
	...

080084a4 <_printf_i>:
 80084a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a6:	b08b      	sub	sp, #44	@ 0x2c
 80084a8:	9206      	str	r2, [sp, #24]
 80084aa:	000a      	movs	r2, r1
 80084ac:	3243      	adds	r2, #67	@ 0x43
 80084ae:	9307      	str	r3, [sp, #28]
 80084b0:	9005      	str	r0, [sp, #20]
 80084b2:	9203      	str	r2, [sp, #12]
 80084b4:	7e0a      	ldrb	r2, [r1, #24]
 80084b6:	000c      	movs	r4, r1
 80084b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084ba:	2a78      	cmp	r2, #120	@ 0x78
 80084bc:	d809      	bhi.n	80084d2 <_printf_i+0x2e>
 80084be:	2a62      	cmp	r2, #98	@ 0x62
 80084c0:	d80b      	bhi.n	80084da <_printf_i+0x36>
 80084c2:	2a00      	cmp	r2, #0
 80084c4:	d100      	bne.n	80084c8 <_printf_i+0x24>
 80084c6:	e0bc      	b.n	8008642 <_printf_i+0x19e>
 80084c8:	497b      	ldr	r1, [pc, #492]	@ (80086b8 <_printf_i+0x214>)
 80084ca:	9104      	str	r1, [sp, #16]
 80084cc:	2a58      	cmp	r2, #88	@ 0x58
 80084ce:	d100      	bne.n	80084d2 <_printf_i+0x2e>
 80084d0:	e090      	b.n	80085f4 <_printf_i+0x150>
 80084d2:	0025      	movs	r5, r4
 80084d4:	3542      	adds	r5, #66	@ 0x42
 80084d6:	702a      	strb	r2, [r5, #0]
 80084d8:	e022      	b.n	8008520 <_printf_i+0x7c>
 80084da:	0010      	movs	r0, r2
 80084dc:	3863      	subs	r0, #99	@ 0x63
 80084de:	2815      	cmp	r0, #21
 80084e0:	d8f7      	bhi.n	80084d2 <_printf_i+0x2e>
 80084e2:	f7f7 fe11 	bl	8000108 <__gnu_thumb1_case_shi>
 80084e6:	0016      	.short	0x0016
 80084e8:	fff6001f 	.word	0xfff6001f
 80084ec:	fff6fff6 	.word	0xfff6fff6
 80084f0:	001ffff6 	.word	0x001ffff6
 80084f4:	fff6fff6 	.word	0xfff6fff6
 80084f8:	fff6fff6 	.word	0xfff6fff6
 80084fc:	003600a1 	.word	0x003600a1
 8008500:	fff60080 	.word	0xfff60080
 8008504:	00b2fff6 	.word	0x00b2fff6
 8008508:	0036fff6 	.word	0x0036fff6
 800850c:	fff6fff6 	.word	0xfff6fff6
 8008510:	0084      	.short	0x0084
 8008512:	0025      	movs	r5, r4
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	3542      	adds	r5, #66	@ 0x42
 8008518:	1d11      	adds	r1, r2, #4
 800851a:	6019      	str	r1, [r3, #0]
 800851c:	6813      	ldr	r3, [r2, #0]
 800851e:	702b      	strb	r3, [r5, #0]
 8008520:	2301      	movs	r3, #1
 8008522:	e0a0      	b.n	8008666 <_printf_i+0x1c2>
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	6809      	ldr	r1, [r1, #0]
 8008528:	1d02      	adds	r2, r0, #4
 800852a:	060d      	lsls	r5, r1, #24
 800852c:	d50b      	bpl.n	8008546 <_printf_i+0xa2>
 800852e:	6806      	ldr	r6, [r0, #0]
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	2e00      	cmp	r6, #0
 8008534:	da03      	bge.n	800853e <_printf_i+0x9a>
 8008536:	232d      	movs	r3, #45	@ 0x2d
 8008538:	9a03      	ldr	r2, [sp, #12]
 800853a:	4276      	negs	r6, r6
 800853c:	7013      	strb	r3, [r2, #0]
 800853e:	4b5e      	ldr	r3, [pc, #376]	@ (80086b8 <_printf_i+0x214>)
 8008540:	270a      	movs	r7, #10
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	e018      	b.n	8008578 <_printf_i+0xd4>
 8008546:	6806      	ldr	r6, [r0, #0]
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	0649      	lsls	r1, r1, #25
 800854c:	d5f1      	bpl.n	8008532 <_printf_i+0x8e>
 800854e:	b236      	sxth	r6, r6
 8008550:	e7ef      	b.n	8008532 <_printf_i+0x8e>
 8008552:	6808      	ldr	r0, [r1, #0]
 8008554:	6819      	ldr	r1, [r3, #0]
 8008556:	c940      	ldmia	r1!, {r6}
 8008558:	0605      	lsls	r5, r0, #24
 800855a:	d402      	bmi.n	8008562 <_printf_i+0xbe>
 800855c:	0640      	lsls	r0, r0, #25
 800855e:	d500      	bpl.n	8008562 <_printf_i+0xbe>
 8008560:	b2b6      	uxth	r6, r6
 8008562:	6019      	str	r1, [r3, #0]
 8008564:	4b54      	ldr	r3, [pc, #336]	@ (80086b8 <_printf_i+0x214>)
 8008566:	270a      	movs	r7, #10
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	2a6f      	cmp	r2, #111	@ 0x6f
 800856c:	d100      	bne.n	8008570 <_printf_i+0xcc>
 800856e:	3f02      	subs	r7, #2
 8008570:	0023      	movs	r3, r4
 8008572:	2200      	movs	r2, #0
 8008574:	3343      	adds	r3, #67	@ 0x43
 8008576:	701a      	strb	r2, [r3, #0]
 8008578:	6863      	ldr	r3, [r4, #4]
 800857a:	60a3      	str	r3, [r4, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	db03      	blt.n	8008588 <_printf_i+0xe4>
 8008580:	2104      	movs	r1, #4
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	438a      	bics	r2, r1
 8008586:	6022      	str	r2, [r4, #0]
 8008588:	2e00      	cmp	r6, #0
 800858a:	d102      	bne.n	8008592 <_printf_i+0xee>
 800858c:	9d03      	ldr	r5, [sp, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00c      	beq.n	80085ac <_printf_i+0x108>
 8008592:	9d03      	ldr	r5, [sp, #12]
 8008594:	0030      	movs	r0, r6
 8008596:	0039      	movs	r1, r7
 8008598:	f7f7 fe46 	bl	8000228 <__aeabi_uidivmod>
 800859c:	9b04      	ldr	r3, [sp, #16]
 800859e:	3d01      	subs	r5, #1
 80085a0:	5c5b      	ldrb	r3, [r3, r1]
 80085a2:	702b      	strb	r3, [r5, #0]
 80085a4:	0033      	movs	r3, r6
 80085a6:	0006      	movs	r6, r0
 80085a8:	429f      	cmp	r7, r3
 80085aa:	d9f3      	bls.n	8008594 <_printf_i+0xf0>
 80085ac:	2f08      	cmp	r7, #8
 80085ae:	d109      	bne.n	80085c4 <_printf_i+0x120>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	07db      	lsls	r3, r3, #31
 80085b4:	d506      	bpl.n	80085c4 <_printf_i+0x120>
 80085b6:	6862      	ldr	r2, [r4, #4]
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	dc02      	bgt.n	80085c4 <_printf_i+0x120>
 80085be:	2330      	movs	r3, #48	@ 0x30
 80085c0:	3d01      	subs	r5, #1
 80085c2:	702b      	strb	r3, [r5, #0]
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	1b5b      	subs	r3, r3, r5
 80085c8:	6123      	str	r3, [r4, #16]
 80085ca:	9b07      	ldr	r3, [sp, #28]
 80085cc:	0021      	movs	r1, r4
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	9805      	ldr	r0, [sp, #20]
 80085d2:	9b06      	ldr	r3, [sp, #24]
 80085d4:	aa09      	add	r2, sp, #36	@ 0x24
 80085d6:	f7ff fef5 	bl	80083c4 <_printf_common>
 80085da:	3001      	adds	r0, #1
 80085dc:	d148      	bne.n	8008670 <_printf_i+0x1cc>
 80085de:	2001      	movs	r0, #1
 80085e0:	4240      	negs	r0, r0
 80085e2:	b00b      	add	sp, #44	@ 0x2c
 80085e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e6:	2220      	movs	r2, #32
 80085e8:	6809      	ldr	r1, [r1, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	6022      	str	r2, [r4, #0]
 80085ee:	2278      	movs	r2, #120	@ 0x78
 80085f0:	4932      	ldr	r1, [pc, #200]	@ (80086bc <_printf_i+0x218>)
 80085f2:	9104      	str	r1, [sp, #16]
 80085f4:	0021      	movs	r1, r4
 80085f6:	3145      	adds	r1, #69	@ 0x45
 80085f8:	700a      	strb	r2, [r1, #0]
 80085fa:	6819      	ldr	r1, [r3, #0]
 80085fc:	6822      	ldr	r2, [r4, #0]
 80085fe:	c940      	ldmia	r1!, {r6}
 8008600:	0610      	lsls	r0, r2, #24
 8008602:	d402      	bmi.n	800860a <_printf_i+0x166>
 8008604:	0650      	lsls	r0, r2, #25
 8008606:	d500      	bpl.n	800860a <_printf_i+0x166>
 8008608:	b2b6      	uxth	r6, r6
 800860a:	6019      	str	r1, [r3, #0]
 800860c:	07d3      	lsls	r3, r2, #31
 800860e:	d502      	bpl.n	8008616 <_printf_i+0x172>
 8008610:	2320      	movs	r3, #32
 8008612:	4313      	orrs	r3, r2
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	2e00      	cmp	r6, #0
 8008618:	d001      	beq.n	800861e <_printf_i+0x17a>
 800861a:	2710      	movs	r7, #16
 800861c:	e7a8      	b.n	8008570 <_printf_i+0xcc>
 800861e:	2220      	movs	r2, #32
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	4393      	bics	r3, r2
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	e7f8      	b.n	800861a <_printf_i+0x176>
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	680d      	ldr	r5, [r1, #0]
 800862c:	1d10      	adds	r0, r2, #4
 800862e:	6949      	ldr	r1, [r1, #20]
 8008630:	6018      	str	r0, [r3, #0]
 8008632:	6813      	ldr	r3, [r2, #0]
 8008634:	062e      	lsls	r6, r5, #24
 8008636:	d501      	bpl.n	800863c <_printf_i+0x198>
 8008638:	6019      	str	r1, [r3, #0]
 800863a:	e002      	b.n	8008642 <_printf_i+0x19e>
 800863c:	066d      	lsls	r5, r5, #25
 800863e:	d5fb      	bpl.n	8008638 <_printf_i+0x194>
 8008640:	8019      	strh	r1, [r3, #0]
 8008642:	2300      	movs	r3, #0
 8008644:	9d03      	ldr	r5, [sp, #12]
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	e7bf      	b.n	80085ca <_printf_i+0x126>
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	1d11      	adds	r1, r2, #4
 800864e:	6019      	str	r1, [r3, #0]
 8008650:	6815      	ldr	r5, [r2, #0]
 8008652:	2100      	movs	r1, #0
 8008654:	0028      	movs	r0, r5
 8008656:	6862      	ldr	r2, [r4, #4]
 8008658:	f000 f986 	bl	8008968 <memchr>
 800865c:	2800      	cmp	r0, #0
 800865e:	d001      	beq.n	8008664 <_printf_i+0x1c0>
 8008660:	1b40      	subs	r0, r0, r5
 8008662:	6060      	str	r0, [r4, #4]
 8008664:	6863      	ldr	r3, [r4, #4]
 8008666:	6123      	str	r3, [r4, #16]
 8008668:	2300      	movs	r3, #0
 800866a:	9a03      	ldr	r2, [sp, #12]
 800866c:	7013      	strb	r3, [r2, #0]
 800866e:	e7ac      	b.n	80085ca <_printf_i+0x126>
 8008670:	002a      	movs	r2, r5
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	9906      	ldr	r1, [sp, #24]
 8008676:	9805      	ldr	r0, [sp, #20]
 8008678:	9d07      	ldr	r5, [sp, #28]
 800867a:	47a8      	blx	r5
 800867c:	3001      	adds	r0, #1
 800867e:	d0ae      	beq.n	80085de <_printf_i+0x13a>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	079b      	lsls	r3, r3, #30
 8008684:	d415      	bmi.n	80086b2 <_printf_i+0x20e>
 8008686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008688:	68e0      	ldr	r0, [r4, #12]
 800868a:	4298      	cmp	r0, r3
 800868c:	daa9      	bge.n	80085e2 <_printf_i+0x13e>
 800868e:	0018      	movs	r0, r3
 8008690:	e7a7      	b.n	80085e2 <_printf_i+0x13e>
 8008692:	0022      	movs	r2, r4
 8008694:	2301      	movs	r3, #1
 8008696:	9906      	ldr	r1, [sp, #24]
 8008698:	9805      	ldr	r0, [sp, #20]
 800869a:	9e07      	ldr	r6, [sp, #28]
 800869c:	3219      	adds	r2, #25
 800869e:	47b0      	blx	r6
 80086a0:	3001      	adds	r0, #1
 80086a2:	d09c      	beq.n	80085de <_printf_i+0x13a>
 80086a4:	3501      	adds	r5, #1
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dcf0      	bgt.n	8008692 <_printf_i+0x1ee>
 80086b0:	e7e9      	b.n	8008686 <_printf_i+0x1e2>
 80086b2:	2500      	movs	r5, #0
 80086b4:	e7f7      	b.n	80086a6 <_printf_i+0x202>
 80086b6:	46c0      	nop			@ (mov r8, r8)
 80086b8:	08008eb9 	.word	0x08008eb9
 80086bc:	08008eca 	.word	0x08008eca

080086c0 <__sflush_r>:
 80086c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086c2:	220c      	movs	r2, #12
 80086c4:	5e8b      	ldrsh	r3, [r1, r2]
 80086c6:	0005      	movs	r5, r0
 80086c8:	000c      	movs	r4, r1
 80086ca:	071a      	lsls	r2, r3, #28
 80086cc:	d456      	bmi.n	800877c <__sflush_r+0xbc>
 80086ce:	684a      	ldr	r2, [r1, #4]
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	dc02      	bgt.n	80086da <__sflush_r+0x1a>
 80086d4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	dd4e      	ble.n	8008778 <__sflush_r+0xb8>
 80086da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80086dc:	2f00      	cmp	r7, #0
 80086de:	d04b      	beq.n	8008778 <__sflush_r+0xb8>
 80086e0:	2200      	movs	r2, #0
 80086e2:	2080      	movs	r0, #128	@ 0x80
 80086e4:	682e      	ldr	r6, [r5, #0]
 80086e6:	602a      	str	r2, [r5, #0]
 80086e8:	001a      	movs	r2, r3
 80086ea:	0140      	lsls	r0, r0, #5
 80086ec:	6a21      	ldr	r1, [r4, #32]
 80086ee:	4002      	ands	r2, r0
 80086f0:	4203      	tst	r3, r0
 80086f2:	d033      	beq.n	800875c <__sflush_r+0x9c>
 80086f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	075b      	lsls	r3, r3, #29
 80086fa:	d506      	bpl.n	800870a <__sflush_r+0x4a>
 80086fc:	6863      	ldr	r3, [r4, #4]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <__sflush_r+0x4a>
 8008706:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008708:	1ad2      	subs	r2, r2, r3
 800870a:	2300      	movs	r3, #0
 800870c:	0028      	movs	r0, r5
 800870e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008710:	6a21      	ldr	r1, [r4, #32]
 8008712:	47b8      	blx	r7
 8008714:	89a2      	ldrh	r2, [r4, #12]
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	d106      	bne.n	8008728 <__sflush_r+0x68>
 800871a:	6829      	ldr	r1, [r5, #0]
 800871c:	291d      	cmp	r1, #29
 800871e:	d846      	bhi.n	80087ae <__sflush_r+0xee>
 8008720:	4b29      	ldr	r3, [pc, #164]	@ (80087c8 <__sflush_r+0x108>)
 8008722:	410b      	asrs	r3, r1
 8008724:	07db      	lsls	r3, r3, #31
 8008726:	d442      	bmi.n	80087ae <__sflush_r+0xee>
 8008728:	2300      	movs	r3, #0
 800872a:	6063      	str	r3, [r4, #4]
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	04d2      	lsls	r2, r2, #19
 8008732:	d505      	bpl.n	8008740 <__sflush_r+0x80>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <__sflush_r+0x7e>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d100      	bne.n	8008740 <__sflush_r+0x80>
 800873e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008742:	602e      	str	r6, [r5, #0]
 8008744:	2900      	cmp	r1, #0
 8008746:	d017      	beq.n	8008778 <__sflush_r+0xb8>
 8008748:	0023      	movs	r3, r4
 800874a:	3344      	adds	r3, #68	@ 0x44
 800874c:	4299      	cmp	r1, r3
 800874e:	d002      	beq.n	8008756 <__sflush_r+0x96>
 8008750:	0028      	movs	r0, r5
 8008752:	f7ff fbf7 	bl	8007f44 <_free_r>
 8008756:	2300      	movs	r3, #0
 8008758:	6363      	str	r3, [r4, #52]	@ 0x34
 800875a:	e00d      	b.n	8008778 <__sflush_r+0xb8>
 800875c:	2301      	movs	r3, #1
 800875e:	0028      	movs	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	0002      	movs	r2, r0
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d1c6      	bne.n	80086f6 <__sflush_r+0x36>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0c3      	beq.n	80086f6 <__sflush_r+0x36>
 800876e:	2b1d      	cmp	r3, #29
 8008770:	d001      	beq.n	8008776 <__sflush_r+0xb6>
 8008772:	2b16      	cmp	r3, #22
 8008774:	d11a      	bne.n	80087ac <__sflush_r+0xec>
 8008776:	602e      	str	r6, [r5, #0]
 8008778:	2000      	movs	r0, #0
 800877a:	e01e      	b.n	80087ba <__sflush_r+0xfa>
 800877c:	690e      	ldr	r6, [r1, #16]
 800877e:	2e00      	cmp	r6, #0
 8008780:	d0fa      	beq.n	8008778 <__sflush_r+0xb8>
 8008782:	680f      	ldr	r7, [r1, #0]
 8008784:	600e      	str	r6, [r1, #0]
 8008786:	1bba      	subs	r2, r7, r6
 8008788:	9201      	str	r2, [sp, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	079b      	lsls	r3, r3, #30
 800878e:	d100      	bne.n	8008792 <__sflush_r+0xd2>
 8008790:	694a      	ldr	r2, [r1, #20]
 8008792:	60a2      	str	r2, [r4, #8]
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	ddee      	ble.n	8008778 <__sflush_r+0xb8>
 800879a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800879c:	0032      	movs	r2, r6
 800879e:	001f      	movs	r7, r3
 80087a0:	0028      	movs	r0, r5
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	6a21      	ldr	r1, [r4, #32]
 80087a6:	47b8      	blx	r7
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dc07      	bgt.n	80087bc <__sflush_r+0xfc>
 80087ac:	89a2      	ldrh	r2, [r4, #12]
 80087ae:	2340      	movs	r3, #64	@ 0x40
 80087b0:	2001      	movs	r0, #1
 80087b2:	4313      	orrs	r3, r2
 80087b4:	b21b      	sxth	r3, r3
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	4240      	negs	r0, r0
 80087ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	1836      	adds	r6, r6, r0
 80087c0:	1a1b      	subs	r3, r3, r0
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	e7e6      	b.n	8008794 <__sflush_r+0xd4>
 80087c6:	46c0      	nop			@ (mov r8, r8)
 80087c8:	dfbffffe 	.word	0xdfbffffe

080087cc <_fflush_r>:
 80087cc:	690b      	ldr	r3, [r1, #16]
 80087ce:	b570      	push	{r4, r5, r6, lr}
 80087d0:	0005      	movs	r5, r0
 80087d2:	000c      	movs	r4, r1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <_fflush_r+0x12>
 80087d8:	2500      	movs	r5, #0
 80087da:	0028      	movs	r0, r5
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	2800      	cmp	r0, #0
 80087e0:	d004      	beq.n	80087ec <_fflush_r+0x20>
 80087e2:	6a03      	ldr	r3, [r0, #32]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <_fflush_r+0x20>
 80087e8:	f7ff f990 	bl	8007b0c <__sinit>
 80087ec:	220c      	movs	r2, #12
 80087ee:	5ea3      	ldrsh	r3, [r4, r2]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f1      	beq.n	80087d8 <_fflush_r+0xc>
 80087f4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087f6:	07d2      	lsls	r2, r2, #31
 80087f8:	d404      	bmi.n	8008804 <_fflush_r+0x38>
 80087fa:	059b      	lsls	r3, r3, #22
 80087fc:	d402      	bmi.n	8008804 <_fflush_r+0x38>
 80087fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008800:	f7ff fb95 	bl	8007f2e <__retarget_lock_acquire_recursive>
 8008804:	0028      	movs	r0, r5
 8008806:	0021      	movs	r1, r4
 8008808:	f7ff ff5a 	bl	80086c0 <__sflush_r>
 800880c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800880e:	0005      	movs	r5, r0
 8008810:	07db      	lsls	r3, r3, #31
 8008812:	d4e2      	bmi.n	80087da <_fflush_r+0xe>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	059b      	lsls	r3, r3, #22
 8008818:	d4df      	bmi.n	80087da <_fflush_r+0xe>
 800881a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800881c:	f7ff fb88 	bl	8007f30 <__retarget_lock_release_recursive>
 8008820:	e7db      	b.n	80087da <_fflush_r+0xe>
	...

08008824 <__swhatbuf_r>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	000e      	movs	r6, r1
 8008828:	001d      	movs	r5, r3
 800882a:	230e      	movs	r3, #14
 800882c:	5ec9      	ldrsh	r1, [r1, r3]
 800882e:	0014      	movs	r4, r2
 8008830:	b096      	sub	sp, #88	@ 0x58
 8008832:	2900      	cmp	r1, #0
 8008834:	da0c      	bge.n	8008850 <__swhatbuf_r+0x2c>
 8008836:	89b2      	ldrh	r2, [r6, #12]
 8008838:	2380      	movs	r3, #128	@ 0x80
 800883a:	0011      	movs	r1, r2
 800883c:	4019      	ands	r1, r3
 800883e:	421a      	tst	r2, r3
 8008840:	d114      	bne.n	800886c <__swhatbuf_r+0x48>
 8008842:	2380      	movs	r3, #128	@ 0x80
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	2000      	movs	r0, #0
 8008848:	6029      	str	r1, [r5, #0]
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	b016      	add	sp, #88	@ 0x58
 800884e:	bd70      	pop	{r4, r5, r6, pc}
 8008850:	466a      	mov	r2, sp
 8008852:	f000 f853 	bl	80088fc <_fstat_r>
 8008856:	2800      	cmp	r0, #0
 8008858:	dbed      	blt.n	8008836 <__swhatbuf_r+0x12>
 800885a:	23f0      	movs	r3, #240	@ 0xf0
 800885c:	9901      	ldr	r1, [sp, #4]
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	4019      	ands	r1, r3
 8008862:	4b04      	ldr	r3, [pc, #16]	@ (8008874 <__swhatbuf_r+0x50>)
 8008864:	18c9      	adds	r1, r1, r3
 8008866:	424b      	negs	r3, r1
 8008868:	4159      	adcs	r1, r3
 800886a:	e7ea      	b.n	8008842 <__swhatbuf_r+0x1e>
 800886c:	2100      	movs	r1, #0
 800886e:	2340      	movs	r3, #64	@ 0x40
 8008870:	e7e9      	b.n	8008846 <__swhatbuf_r+0x22>
 8008872:	46c0      	nop			@ (mov r8, r8)
 8008874:	ffffe000 	.word	0xffffe000

08008878 <__smakebuf_r>:
 8008878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887a:	2602      	movs	r6, #2
 800887c:	898b      	ldrh	r3, [r1, #12]
 800887e:	0005      	movs	r5, r0
 8008880:	000c      	movs	r4, r1
 8008882:	b085      	sub	sp, #20
 8008884:	4233      	tst	r3, r6
 8008886:	d007      	beq.n	8008898 <__smakebuf_r+0x20>
 8008888:	0023      	movs	r3, r4
 800888a:	3347      	adds	r3, #71	@ 0x47
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	2301      	movs	r3, #1
 8008892:	6163      	str	r3, [r4, #20]
 8008894:	b005      	add	sp, #20
 8008896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008898:	ab03      	add	r3, sp, #12
 800889a:	aa02      	add	r2, sp, #8
 800889c:	f7ff ffc2 	bl	8008824 <__swhatbuf_r>
 80088a0:	9f02      	ldr	r7, [sp, #8]
 80088a2:	9001      	str	r0, [sp, #4]
 80088a4:	0039      	movs	r1, r7
 80088a6:	0028      	movs	r0, r5
 80088a8:	f7ff fbb8 	bl	800801c <_malloc_r>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d108      	bne.n	80088c2 <__smakebuf_r+0x4a>
 80088b0:	220c      	movs	r2, #12
 80088b2:	5ea3      	ldrsh	r3, [r4, r2]
 80088b4:	059a      	lsls	r2, r3, #22
 80088b6:	d4ed      	bmi.n	8008894 <__smakebuf_r+0x1c>
 80088b8:	2203      	movs	r2, #3
 80088ba:	4393      	bics	r3, r2
 80088bc:	431e      	orrs	r6, r3
 80088be:	81a6      	strh	r6, [r4, #12]
 80088c0:	e7e2      	b.n	8008888 <__smakebuf_r+0x10>
 80088c2:	2380      	movs	r3, #128	@ 0x80
 80088c4:	89a2      	ldrh	r2, [r4, #12]
 80088c6:	6020      	str	r0, [r4, #0]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	6120      	str	r0, [r4, #16]
 80088d0:	6167      	str	r7, [r4, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <__smakebuf_r+0x78>
 80088d6:	0028      	movs	r0, r5
 80088d8:	230e      	movs	r3, #14
 80088da:	5ee1      	ldrsh	r1, [r4, r3]
 80088dc:	f000 f820 	bl	8008920 <_isatty_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d005      	beq.n	80088f0 <__smakebuf_r+0x78>
 80088e4:	2303      	movs	r3, #3
 80088e6:	89a2      	ldrh	r2, [r4, #12]
 80088e8:	439a      	bics	r2, r3
 80088ea:	3b02      	subs	r3, #2
 80088ec:	4313      	orrs	r3, r2
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	9a01      	ldr	r2, [sp, #4]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	e7cc      	b.n	8008894 <__smakebuf_r+0x1c>
	...

080088fc <_fstat_r>:
 80088fc:	2300      	movs	r3, #0
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	4d06      	ldr	r5, [pc, #24]	@ (800891c <_fstat_r+0x20>)
 8008902:	0004      	movs	r4, r0
 8008904:	0008      	movs	r0, r1
 8008906:	0011      	movs	r1, r2
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	f7f9 fc22 	bl	8002152 <_fstat>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d103      	bne.n	800891a <_fstat_r+0x1e>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d000      	beq.n	800891a <_fstat_r+0x1e>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	200008d8 	.word	0x200008d8

08008920 <_isatty_r>:
 8008920:	2300      	movs	r3, #0
 8008922:	b570      	push	{r4, r5, r6, lr}
 8008924:	4d06      	ldr	r5, [pc, #24]	@ (8008940 <_isatty_r+0x20>)
 8008926:	0004      	movs	r4, r0
 8008928:	0008      	movs	r0, r1
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	f7f9 fc1f 	bl	800216e <_isatty>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d103      	bne.n	800893c <_isatty_r+0x1c>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d000      	beq.n	800893c <_isatty_r+0x1c>
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	bd70      	pop	{r4, r5, r6, pc}
 800893e:	46c0      	nop			@ (mov r8, r8)
 8008940:	200008d8 	.word	0x200008d8

08008944 <_sbrk_r>:
 8008944:	2300      	movs	r3, #0
 8008946:	b570      	push	{r4, r5, r6, lr}
 8008948:	4d06      	ldr	r5, [pc, #24]	@ (8008964 <_sbrk_r+0x20>)
 800894a:	0004      	movs	r4, r0
 800894c:	0008      	movs	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7f9 fc22 	bl	8002198 <_sbrk>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d103      	bne.n	8008960 <_sbrk_r+0x1c>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d000      	beq.n	8008960 <_sbrk_r+0x1c>
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	200008d8 	.word	0x200008d8

08008968 <memchr>:
 8008968:	b2c9      	uxtb	r1, r1
 800896a:	1882      	adds	r2, r0, r2
 800896c:	4290      	cmp	r0, r2
 800896e:	d101      	bne.n	8008974 <memchr+0xc>
 8008970:	2000      	movs	r0, #0
 8008972:	4770      	bx	lr
 8008974:	7803      	ldrb	r3, [r0, #0]
 8008976:	428b      	cmp	r3, r1
 8008978:	d0fb      	beq.n	8008972 <memchr+0xa>
 800897a:	3001      	adds	r0, #1
 800897c:	e7f6      	b.n	800896c <memchr+0x4>
	...

08008980 <_init>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	46c0      	nop			@ (mov r8, r8)
 8008984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008986:	bc08      	pop	{r3}
 8008988:	469e      	mov	lr, r3
 800898a:	4770      	bx	lr

0800898c <_fini>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	46c0      	nop			@ (mov r8, r8)
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr
