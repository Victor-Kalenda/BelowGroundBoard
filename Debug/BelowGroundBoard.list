
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004ee8  08004ee8  00005ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc4  08004fc4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fc4  08004fc4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fc4  08004fc4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc4  08004fc4  00005fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004fcc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000000c  08004fd8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08004fd8  000063b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160be  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a62  00000000  00000000  0001c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0001eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001031  00000000  00000000  0001ffc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a49  00000000  00000000  00020ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ea9  00000000  00000000  00036a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd76  00000000  00000000  0004f8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  000db6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e0298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ed0 	.word	0x08004ed0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004ed0 	.word	0x08004ed0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fe7c 	bl	80010f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f833 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 facd 	bl	80009a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000406:	f000 f873 	bl	80004f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800040a:	f000 f94f 	bl	80006ac <MX_I2C1_Init>
  MX_SPI1_Init();
 800040e:	f000 f98d 	bl	800072c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000412:	f000 f9c9 	bl	80007a8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000416:	f000 fa73 	bl	8000900 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  modbus_setup_rx(12);
 800041a:	200c      	movs	r0, #12
 800041c:	f000 fb7e 	bl	8000b1c <modbus_setup_rx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(modbus_rx())
 8000420:	f000 fb94 	bl	8000b4c <modbus_rx>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d0fb      	beq.n	8000420 <main+0x2c>
	  {
		  uint16_t buffer[12];
		  for(uint8_t i = 0; i < 12; i++)
 8000428:	231f      	movs	r3, #31
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
 8000430:	e011      	b.n	8000456 <main+0x62>
		  {
			  buffer[i] = get_response_buffer(i);
 8000432:	251f      	movs	r5, #31
 8000434:	197b      	adds	r3, r7, r5
 8000436:	781c      	ldrb	r4, [r3, #0]
 8000438:	197b      	adds	r3, r7, r5
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fb53 	bl	8000ae8 <get_response_buffer>
 8000442:	0003      	movs	r3, r0
 8000444:	0019      	movs	r1, r3
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	0062      	lsls	r2, r4, #1
 800044a:	52d1      	strh	r1, [r2, r3]
		  for(uint8_t i = 0; i < 12; i++)
 800044c:	197b      	adds	r3, r7, r5
 800044e:	781a      	ldrb	r2, [r3, #0]
 8000450:	197b      	adds	r3, r7, r5
 8000452:	3201      	adds	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	231f      	movs	r3, #31
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b0b      	cmp	r3, #11
 800045e:	d9e8      	bls.n	8000432 <main+0x3e>
		  }
		  modbus_setup_rx(12);
 8000460:	200c      	movs	r0, #12
 8000462:	f000 fb5b 	bl	8000b1c <modbus_setup_rx>
	  if(modbus_rx())
 8000466:	e7db      	b.n	8000420 <main+0x2c>

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b08d      	sub	sp, #52	@ 0x34
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	2414      	movs	r4, #20
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	231c      	movs	r3, #28
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f004 fcfd 	bl	8004e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047e:	003b      	movs	r3, r7
 8000480:	0018      	movs	r0, r3
 8000482:	2314      	movs	r3, #20
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f004 fcf6 	bl	8004e78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2202      	movs	r2, #2
 8000490:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2280      	movs	r2, #128	@ 0x80
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	0152      	lsls	r2, r2, #5
 80004a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2240      	movs	r2, #64	@ 0x40
 80004a6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fe9c 	bl	80021e8 <HAL_RCC_OscConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004b4:	f000 fb04 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	003b      	movs	r3, r7
 80004ba:	2207      	movs	r2, #7
 80004bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004be:	003b      	movs	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	003b      	movs	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004ca:	003b      	movs	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d6:	003b      	movs	r3, r7
 80004d8:	2100      	movs	r1, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f868 	bl	80025b0 <HAL_RCC_ClockConfig>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004e4:	f000 faec 	bl	8000ac0 <Error_Handler>
  }
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b00d      	add	sp, #52	@ 0x34
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	230c      	movs	r3, #12
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f004 fcba 	bl	8004e78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000504:	4b5f      	ldr	r3, [pc, #380]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000506:	4a60      	ldr	r2, [pc, #384]	@ (8000688 <MX_ADC1_Init+0x198>)
 8000508:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800050a:	4b5e      	ldr	r3, [pc, #376]	@ (8000684 <MX_ADC1_Init+0x194>)
 800050c:	22c0      	movs	r2, #192	@ 0xc0
 800050e:	0612      	lsls	r2, r2, #24
 8000510:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000512:	4b5c      	ldr	r3, [pc, #368]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000518:	4b5a      	ldr	r3, [pc, #360]	@ (8000684 <MX_ADC1_Init+0x194>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800051e:	4b59      	ldr	r3, [pc, #356]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	0612      	lsls	r2, r2, #24
 8000524:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b57      	ldr	r3, [pc, #348]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000528:	2204      	movs	r2, #4
 800052a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800052c:	4b55      	ldr	r3, [pc, #340]	@ (8000684 <MX_ADC1_Init+0x194>)
 800052e:	2200      	movs	r2, #0
 8000530:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000532:	4b54      	ldr	r3, [pc, #336]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000534:	2200      	movs	r2, #0
 8000536:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000538:	4b52      	ldr	r3, [pc, #328]	@ (8000684 <MX_ADC1_Init+0x194>)
 800053a:	2200      	movs	r2, #0
 800053c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800053e:	4b51      	ldr	r3, [pc, #324]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000544:	4b4f      	ldr	r3, [pc, #316]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000546:	2220      	movs	r2, #32
 8000548:	2100      	movs	r1, #0
 800054a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054c:	4b4d      	ldr	r3, [pc, #308]	@ (8000684 <MX_ADC1_Init+0x194>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000552:	4b4c      	ldr	r3, [pc, #304]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000554:	2200      	movs	r2, #0
 8000556:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000558:	4b4a      	ldr	r3, [pc, #296]	@ (8000684 <MX_ADC1_Init+0x194>)
 800055a:	222c      	movs	r2, #44	@ 0x2c
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000560:	4b48      	ldr	r3, [pc, #288]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000562:	2200      	movs	r2, #0
 8000564:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000566:	4b47      	ldr	r3, [pc, #284]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000568:	2200      	movs	r2, #0
 800056a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800056c:	4b45      	ldr	r3, [pc, #276]	@ (8000684 <MX_ADC1_Init+0x194>)
 800056e:	223c      	movs	r2, #60	@ 0x3c
 8000570:	2100      	movs	r1, #0
 8000572:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000574:	4b43      	ldr	r3, [pc, #268]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000576:	2200      	movs	r2, #0
 8000578:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057a:	4b42      	ldr	r3, [pc, #264]	@ (8000684 <MX_ADC1_Init+0x194>)
 800057c:	0018      	movs	r0, r3
 800057e:	f000 ff35 	bl	80013ec <HAL_ADC_Init>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000586:	f000 fa9b 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2201      	movs	r2, #1
 800058e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2201      	movs	r2, #1
 8000594:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	1d3a      	adds	r2, r7, #4
 8000598:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <MX_ADC1_Init+0x194>)
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f001 f8cb 	bl	8001738 <HAL_ADC_ConfigChannel>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80005a6:	f000 fa8b 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4a37      	ldr	r2, [pc, #220]	@ (800068c <MX_ADC1_Init+0x19c>)
 80005ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	1d3a      	adds	r2, r7, #4
 80005b2:	4b34      	ldr	r3, [pc, #208]	@ (8000684 <MX_ADC1_Init+0x194>)
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f8be 	bl	8001738 <HAL_ADC_ConfigChannel>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005c0:	f000 fa7e 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4a32      	ldr	r2, [pc, #200]	@ (8000690 <MX_ADC1_Init+0x1a0>)
 80005c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ca:	1d3a      	adds	r2, r7, #4
 80005cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <MX_ADC1_Init+0x194>)
 80005ce:	0011      	movs	r1, r2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 f8b1 	bl	8001738 <HAL_ADC_ConfigChannel>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005da:	f000 fa71 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000694 <MX_ADC1_Init+0x1a4>)
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	1d3a      	adds	r2, r7, #4
 80005e6:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <MX_ADC1_Init+0x194>)
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f8a4 	bl	8001738 <HAL_ADC_ConfigChannel>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80005f4:	f000 fa64 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <MX_ADC1_Init+0x1a8>)
 80005fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fe:	1d3a      	adds	r2, r7, #4
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f001 f897 	bl	8001738 <HAL_ADC_ConfigChannel>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800060e:	f000 fa57 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <MX_ADC1_Init+0x1ac>)
 8000616:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	1d3a      	adds	r2, r7, #4
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_ADC1_Init+0x194>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f001 f88a 	bl	8001738 <HAL_ADC_ConfigChannel>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000628:	f000 fa4a 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_ADC1_Init+0x1b0>)
 8000630:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3a      	adds	r2, r7, #4
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f001 f87d 	bl	8001738 <HAL_ADC_ConfigChannel>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000642:	f000 fa3d 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4a16      	ldr	r2, [pc, #88]	@ (80006a4 <MX_ADC1_Init+0x1b4>)
 800064a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	1d3a      	adds	r2, r7, #4
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <MX_ADC1_Init+0x194>)
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f001 f870 	bl	8001738 <HAL_ADC_ConfigChannel>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800065c:	f000 fa30 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4a11      	ldr	r2, [pc, #68]	@ (80006a8 <MX_ADC1_Init+0x1b8>)
 8000664:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_ADC1_Init+0x194>)
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f863 	bl	8001738 <HAL_ADC_ConfigChannel>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000676:	f000 fa23 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b004      	add	sp, #16
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000028 	.word	0x20000028
 8000688:	40012400 	.word	0x40012400
 800068c:	04000002 	.word	0x04000002
 8000690:	08000004 	.word	0x08000004
 8000694:	0c000008 	.word	0x0c000008
 8000698:	10000010 	.word	0x10000010
 800069c:	14000020 	.word	0x14000020
 80006a0:	18000040 	.word	0x18000040
 80006a4:	1c000080 	.word	0x1c000080
 80006a8:	20000100 	.word	0x20000100

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <MX_I2C1_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <MX_I2C1_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fc3f 	bl	8001f6c <HAL_I2C_Init>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 f9e5 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 fcdc 	bl	80020b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 f9dc 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <MX_I2C1_Init+0x74>)
 800070a:	2100      	movs	r1, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fd1f 	bl	8002150 <HAL_I2CEx_ConfigDigitalFilter>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f9d3 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000008c 	.word	0x2000008c
 8000724:	40005400 	.word	0x40005400
 8000728:	00402d41 	.word	0x00402d41

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_SPI1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000738:	2282      	movs	r2, #130	@ 0x82
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000746:	22e0      	movs	r2, #224	@ 0xe0
 8000748:	00d2      	lsls	r2, r2, #3
 800074a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800077a:	2207      	movs	r2, #7
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000786:	2208      	movs	r2, #8
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f002 f98b 	bl	8002aa8 <HAL_SPI_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f993 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000e0 	.word	0x200000e0
 80007a4:	40013000 	.word	0x40013000

080007a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b098      	sub	sp, #96	@ 0x60
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	2354      	movs	r3, #84	@ 0x54
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	0018      	movs	r0, r3
 80007b4:	230c      	movs	r3, #12
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f004 fb5d 	bl	8004e78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	2338      	movs	r3, #56	@ 0x38
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	0018      	movs	r0, r3
 80007c4:	231c      	movs	r3, #28
 80007c6:	001a      	movs	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f004 fb55 	bl	8004e78 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2334      	movs	r3, #52	@ 0x34
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f004 fb4e 	bl	8004e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007dc:	4b45      	ldr	r3, [pc, #276]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80007de:	4a46      	ldr	r2, [pc, #280]	@ (80008f8 <MX_TIM1_Init+0x150>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007e2:	4b44      	ldr	r3, [pc, #272]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b42      	ldr	r3, [pc, #264]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007ee:	4b41      	ldr	r3, [pc, #260]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80007f0:	4a42      	ldr	r2, [pc, #264]	@ (80008fc <MX_TIM1_Init+0x154>)
 80007f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fa:	4b3e      	ldr	r3, [pc, #248]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b3c      	ldr	r3, [pc, #240]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000806:	4b3b      	ldr	r3, [pc, #236]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 8000808:	0018      	movs	r0, r3
 800080a:	f002 fa05 	bl	8002c18 <HAL_TIM_PWM_Init>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f955 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2154      	movs	r1, #84	@ 0x54
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082a:	187a      	adds	r2, r7, r1
 800082c:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f002 fe5f 	bl	80034f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800083a:	f000 f941 	bl	8000ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083e:	2138      	movs	r1, #56	@ 0x38
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2260      	movs	r2, #96	@ 0x60
 8000844:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086a:	1879      	adds	r1, r7, r1
 800086c:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 800086e:	2200      	movs	r2, #0
 8000870:	0018      	movs	r0, r3
 8000872:	f002 fa29 	bl	8002cc8 <HAL_TIM_PWM_ConfigChannel>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800087a:	f000 f921 	bl	8000ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2280      	movs	r2, #128	@ 0x80
 80008a0:	0192      	lsls	r2, r2, #6
 80008a2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	0492      	lsls	r2, r2, #18
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d0:	1d3a      	adds	r2, r7, #4
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fe6e 	bl	80035b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80008e0:	f000 f8ee 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e4:	4b03      	ldr	r3, [pc, #12]	@ (80008f4 <MX_TIM1_Init+0x14c>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 facc 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b018      	add	sp, #96	@ 0x60
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000144 	.word	0x20000144
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	0000ffff 	.word	0x0000ffff

08000900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000906:	4a25      	ldr	r2, [pc, #148]	@ (800099c <MX_USART1_UART_Init+0x9c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 800090c:	22e1      	movs	r2, #225	@ 0xe1
 800090e:	0252      	lsls	r2, r2, #9
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000948:	4813      	ldr	r0, [pc, #76]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	f004 f906 	bl	8004b60 <HAL_RS485Ex_Init>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 f8b2 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f004 f9a9 	bl	8004cb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 f8a9 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000970:	2100      	movs	r1, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f004 f9e0 	bl	8004d38 <HAL_UARTEx_SetRxFifoThreshold>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800097c:	f000 f8a0 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <MX_USART1_UART_Init+0x98>)
 8000982:	0018      	movs	r0, r3
 8000984:	f004 f95e 	bl	8004c44 <HAL_UARTEx_DisableFifoMode>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800098c:	f000 f898 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	20000190 	.word	0x20000190
 800099c:	40013800 	.word	0x40013800

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b08b      	sub	sp, #44	@ 0x2c
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	2414      	movs	r4, #20
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2314      	movs	r3, #20
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f004 fa61 	bl	8004e78 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ba:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009bc:	2104      	movs	r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c6:	2204      	movs	r2, #4
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	4b38      	ldr	r3, [pc, #224]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009d2:	4b37      	ldr	r3, [pc, #220]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009d4:	2120      	movs	r1, #32
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009da:	4b35      	ldr	r3, [pc, #212]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009de:	2220      	movs	r2, #32
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b32      	ldr	r3, [pc, #200]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ea:	4b31      	ldr	r3, [pc, #196]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a02:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0a:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a1a:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a22:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <MX_GPIO_Init+0x110>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a26:	2208      	movs	r2, #8
 8000a28:	4013      	ands	r3, r2
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_C_Pin|SS_A_Pin, GPIO_PIN_RESET);
 8000a2e:	23a0      	movs	r3, #160	@ 0xa0
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4820      	ldr	r0, [pc, #128]	@ (8000ab4 <MX_GPIO_Init+0x114>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	0019      	movs	r1, r3
 8000a38:	f001 fa7a 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2206      	movs	r2, #6
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	4a19      	ldr	r2, [pc, #100]	@ (8000ab8 <MX_GPIO_Init+0x118>)
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f001 f8f9 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_C_Pin SS_A_Pin */
  GPIO_InitStruct.Pin = SS_C_Pin|SS_A_Pin;
 8000a5a:	0021      	movs	r1, r4
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	22a0      	movs	r2, #160	@ 0xa0
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	000c      	movs	r4, r1
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2201      	movs	r2, #1
 8000a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab4 <MX_GPIO_Init+0x114>)
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	0010      	movs	r0, r2
 8000a80:	f001 f8e4 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_B_Pin */
  GPIO_InitStruct.Pin = SS_B_Pin;
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <MX_GPIO_Init+0x11c>)
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SS_B_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <MX_GPIO_Init+0x114>)
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	f001 f8d3 	bl	8001c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b00b      	add	sp, #44	@ 0x2c
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	50000400 	.word	0x50000400
 8000ab8:	50000c00 	.word	0x50000c00
 8000abc:	10110000 	.word	0x10110000

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_UART_RxCpltCallback>:

	return (crc_hi << 8 | crc_low);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x18>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	200003a8 	.word	0x200003a8

08000ae8 <get_response_buffer>:
@see ModbusMaster::clearResponseBuffer()
@param u8Index index of response buffer array (0x00..0x3F)
@return value in position u8Index of response buffer (0x0000..0xFFFF)
*/
uint16_t get_response_buffer(uint8_t u8Index)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	0002      	movs	r2, r0
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	701a      	strb	r2, [r3, #0]
	if (u8Index < RX_BUFFER_SIZE)
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b41      	cmp	r3, #65	@ 0x41
 8000afa:	d805      	bhi.n	8000b08 <get_response_buffer+0x20>
	{
		// get the value in the uart recieve buffer
		return rx_buffer[u8Index];
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <get_response_buffer+0x2c>)
 8000b02:	0052      	lsls	r2, r2, #1
 8000b04:	5ad3      	ldrh	r3, [r2, r3]
 8000b06:	e000      	b.n	8000b0a <get_response_buffer+0x22>
	}
	else
	{
		return 0xFFFF;
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <get_response_buffer+0x30>)
	}
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	20000324 	.word	0x20000324
 8000b18:	0000ffff 	.word	0x0000ffff

08000b1c <modbus_setup_rx>:
		return HAL_TIMEOUT;
	}
}

int8_t modbus_setup_rx(uint8_t size)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	0002      	movs	r2, r0
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4905      	ldr	r1, [pc, #20]	@ (8000b44 <modbus_setup_rx+0x28>)
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <modbus_setup_rx+0x2c>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 fddc 	bl	80036f0 <HAL_UART_Receive_IT>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	b25b      	sxtb	r3, r3
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000224 	.word	0x20000224
 8000b48:	20000190 	.word	0x20000190

08000b4c <modbus_rx>:

uint8_t modbus_rx()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	if(rx_int)
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <modbus_rx+0x24>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d004      	beq.n	8000b64 <modbus_rx+0x18>
	{
		rx_int = 0;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <modbus_rx+0x24>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e002      	b.n	8000b6a <modbus_rx+0x1e>
	}
	return rx_int;
 8000b64:	4b02      	ldr	r3, [pc, #8]	@ (8000b70 <modbus_rx+0x24>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200003a8 	.word	0x200003a8

08000b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	2180      	movs	r1, #128	@ 0x80
 8000b9a:	0549      	lsls	r1, r1, #21
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ba4:	2380      	movs	r3, #128	@ 0x80
 8000ba6:	055b      	lsls	r3, r3, #21
 8000ba8:	4013      	ands	r3, r2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b091      	sub	sp, #68	@ 0x44
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	232c      	movs	r3, #44	@ 0x2c
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2314      	movs	r3, #20
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f004 f952 	bl	8004e78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	2410      	movs	r4, #16
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	231c      	movs	r3, #28
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f004 f94a 	bl	8004e78 <memset>
  if(hadc->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c68 <HAL_ADC_MspInit+0xac>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d138      	bne.n	8000c60 <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 fe67 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000c06:	f7ff ff5b 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <HAL_ADC_MspInit+0xb0>)
 8000c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c0e:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <HAL_ADC_MspInit+0xb0>)
 8000c10:	2180      	movs	r1, #128	@ 0x80
 8000c12:	0349      	lsls	r1, r1, #13
 8000c14:	430a      	orrs	r2, r1
 8000c16:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c18:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <HAL_ADC_MspInit+0xb0>)
 8000c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	035b      	lsls	r3, r3, #13
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_ADC_MspInit+0xb0>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_ADC_MspInit+0xb0>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_ADC_MspInit+0xb0>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sense_A_Pin|Thrust_Sense_B_Pin|Thrust_Sense_C_Pin|Motor_Temp_Pin
 8000c3e:	212c      	movs	r1, #44	@ 0x2c
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <HAL_ADC_MspInit+0xb4>)
 8000c44:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_Pos_C_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	187a      	adds	r2, r7, r1
 8000c54:	23a0      	movs	r3, #160	@ 0xa0
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fff6 	bl	8001c4c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b011      	add	sp, #68	@ 0x44
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	40012400 	.word	0x40012400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	000001ff 	.word	0x000001ff

08000c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b091      	sub	sp, #68	@ 0x44
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	232c      	movs	r3, #44	@ 0x2c
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	0018      	movs	r0, r3
 8000c82:	2314      	movs	r3, #20
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f004 f8f6 	bl	8004e78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	2410      	movs	r4, #16
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	231c      	movs	r3, #28
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f004 f8ee 	bl	8004e78 <memset>
  if(hi2c->Instance==I2C1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a23      	ldr	r2, [pc, #140]	@ (8000d30 <HAL_I2C_MspInit+0xbc>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d13f      	bne.n	8000d26 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2202      	movs	r2, #2
 8000caa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 fe0b 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f7ff feff 	bl	8000ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cda:	212c      	movs	r1, #44	@ 0x2c
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	22c0      	movs	r2, #192	@ 0xc0
 8000ce0:	00d2      	lsls	r2, r2, #3
 8000ce2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2212      	movs	r2, #18
 8000ce8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2206      	movs	r2, #6
 8000cfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	187a      	adds	r2, r7, r1
 8000cfe:	23a0      	movs	r3, #160	@ 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 ffa1 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0389      	lsls	r1, r1, #14
 8000d14:	430a      	orrs	r2, r1
 8000d16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_I2C_MspInit+0xc0>)
 8000d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d1c:	2380      	movs	r3, #128	@ 0x80
 8000d1e:	039b      	lsls	r3, r3, #14
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b011      	add	sp, #68	@ 0x44
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b093      	sub	sp, #76	@ 0x4c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	2334      	movs	r3, #52	@ 0x34
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	0018      	movs	r0, r3
 8000d46:	2314      	movs	r3, #20
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f004 f894 	bl	8004e78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	2418      	movs	r4, #24
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	0018      	movs	r0, r3
 8000d56:	231c      	movs	r3, #28
 8000d58:	001a      	movs	r2, r3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f004 f88c 	bl	8004e78 <memset>
  if(hspi->Instance==SPI1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a34      	ldr	r2, [pc, #208]	@ (8000e38 <HAL_SPI_MspInit+0x100>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d162      	bne.n	8000e30 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f001 fda9 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000d82:	f7ff fe9d 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d86:	4b2d      	ldr	r3, [pc, #180]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000d88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000d8c:	2180      	movs	r1, #128	@ 0x80
 8000d8e:	0149      	lsls	r1, r1, #5
 8000d90:	430a      	orrs	r2, r1
 8000d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d94:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	015b      	lsls	r3, r3, #5
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000da6:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000da8:	2101      	movs	r1, #1
 8000daa:	430a      	orrs	r2, r1
 8000dac:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dae:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <HAL_SPI_MspInit+0x104>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dd2:	2134      	movs	r1, #52	@ 0x34
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	000c      	movs	r4, r1
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	193a      	adds	r2, r7, r4
 8000df8:	23a0      	movs	r3, #160	@ 0xa0
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 ff24 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2228      	movs	r2, #40	@ 0x28
 8000e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2202      	movs	r2, #2
 8000e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <HAL_SPI_MspInit+0x108>)
 8000e28:	0019      	movs	r1, r3
 8000e2a:	0010      	movs	r0, r2
 8000e2c:	f000 ff0e 	bl	8001c4c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b013      	add	sp, #76	@ 0x4c
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	40013000 	.word	0x40013000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	50000400 	.word	0x50000400

08000e44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_TIM_PWM_MspInit+0x38>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e5c:	2180      	movs	r1, #128	@ 0x80
 8000e5e:	0109      	lsls	r1, r1, #4
 8000e60:	430a      	orrs	r2, r1
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	40012c00 	.word	0x40012c00
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	240c      	movs	r4, #12
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	0018      	movs	r0, r3
 8000e92:	2314      	movs	r3, #20
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f003 ffee 	bl	8004e78 <memset>
  if(htim->Instance==TIM1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <HAL_TIM_MspPostInit+0x74>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d123      	bne.n	8000eee <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_TIM_MspPostInit+0x78>)
 8000ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_TIM_MspPostInit+0x78>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_TIM_MspPostInit+0x78>)
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	0212      	lsls	r2, r2, #8
 8000ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2202      	movs	r2, #2
 8000ecc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2202      	movs	r2, #2
 8000ede:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	187a      	adds	r2, r7, r1
 8000ee2:	23a0      	movs	r3, #160	@ 0xa0
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 feaf 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b009      	add	sp, #36	@ 0x24
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	40012c00 	.word	0x40012c00
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b093      	sub	sp, #76	@ 0x4c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	2334      	movs	r3, #52	@ 0x34
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	2314      	movs	r3, #20
 8000f10:	001a      	movs	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f003 ffb0 	bl	8004e78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	2418      	movs	r4, #24
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	231c      	movs	r3, #28
 8000f20:	001a      	movs	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f003 ffa8 	bl	8004e78 <memset>
  if(huart->Instance==USART1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	@ (8001048 <HAL_UART_MspInit+0x148>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d000      	beq.n	8000f34 <HAL_UART_MspInit+0x34>
 8000f32:	e084      	b.n	800103e <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 fcc4 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000f4c:	f7ff fdb8 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f50:	4b3e      	ldr	r3, [pc, #248]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f54:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	01c9      	lsls	r1, r1, #7
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f62:	2380      	movs	r3, #128	@ 0x80
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	4013      	ands	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6c:	4b37      	ldr	r3, [pc, #220]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f72:	2104      	movs	r1, #4
 8000f74:	430a      	orrs	r2, r1
 8000f76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f78:	4b34      	ldr	r3, [pc, #208]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b31      	ldr	r3, [pc, #196]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f88:	4b30      	ldr	r3, [pc, #192]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f94:	2202      	movs	r2, #2
 8000f96:	4013      	ands	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <HAL_UART_MspInit+0x14c>)
 8000faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fac:	2201      	movs	r2, #1
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000fb4:	2134      	movs	r1, #52	@ 0x34
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	01d2      	lsls	r2, r2, #7
 8000fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	000c      	movs	r4, r1
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	4a1d      	ldr	r2, [pc, #116]	@ (8001050 <HAL_UART_MspInit+0x150>)
 8000fdc:	0019      	movs	r1, r3
 8000fde:	0010      	movs	r0, r2
 8000fe0:	f000 fe34 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	2202      	movs	r2, #2
 8000fee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	193b      	adds	r3, r7, r4
 8001004:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <HAL_UART_MspInit+0x154>)
 8001006:	0019      	movs	r1, r3
 8001008:	0010      	movs	r0, r2
 800100a:	f000 fe1f 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800100e:	0021      	movs	r1, r4
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2280      	movs	r2, #128	@ 0x80
 8001014:	0152      	lsls	r2, r2, #5
 8001016:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2202      	movs	r2, #2
 800101c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2201      	movs	r2, #1
 800102e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	187a      	adds	r2, r7, r1
 8001032:	23a0      	movs	r3, #160	@ 0xa0
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	0011      	movs	r1, r2
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fe07 	bl	8001c4c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b013      	add	sp, #76	@ 0x4c
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	40013800 	.word	0x40013800
 800104c:	40021000 	.word	0x40021000
 8001050:	50000800 	.word	0x50000800
 8001054:	50000400 	.word	0x50000400

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	e7fd      	b.n	800105c <NMI_Handler+0x4>

08001060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	e7fd      	b.n	8001064 <HardFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f89a 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <SystemInit+0x14>)
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	0512      	lsls	r2, r2, #20
 8001096:	609a      	str	r2, [r3, #8]
#endif
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a8:	f7ff fff0 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010ae:	e003      	b.n	80010b8 <LoopCopyDataInit>

080010b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80010b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010b6:	3104      	adds	r1, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010b8:	480a      	ldr	r0, [pc, #40]	@ (80010e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80010bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010c0:	d3f6      	bcc.n	80010b0 <CopyDataInit>
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <LoopForever+0x12>)
  b LoopFillZerobss
 80010c4:	e002      	b.n	80010cc <LoopFillZerobss>

080010c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80010c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ca:	3204      	adds	r2, #4

080010cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <LoopForever+0x16>)
  cmp r2, r3
 80010ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010d0:	d3f9      	bcc.n	80010c6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80010d2:	f003 fed9 	bl	8004e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d6:	f7ff f98d 	bl	80003f4 <main>

080010da <LoopForever>:

LoopForever:
    b LoopForever
 80010da:	e7fe      	b.n	80010da <LoopForever>
  ldr   r0, =_estack
 80010dc:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80010e0:	08004fcc 	.word	0x08004fcc
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80010ec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80010f0:	200003b0 	.word	0x200003b0

080010f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_IRQHandler>

080010f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f80e 	bl	8001124 <HAL_InitTick>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d003      	beq.n	8001114 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e001      	b.n	8001118 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001114:	f7ff fd2e 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001134:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <HAL_InitTick+0x88>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d02b      	beq.n	8001194 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800113c:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_InitTick+0x8c>)
 800113e:	681c      	ldr	r4, [r3, #0]
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_InitTick+0x88>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	0019      	movs	r1, r3
 8001146:	23fa      	movs	r3, #250	@ 0xfa
 8001148:	0098      	lsls	r0, r3, #2
 800114a:	f7fe ffdd 	bl	8000108 <__udivsi3>
 800114e:	0003      	movs	r3, r0
 8001150:	0019      	movs	r1, r3
 8001152:	0020      	movs	r0, r4
 8001154:	f7fe ffd8 	bl	8000108 <__udivsi3>
 8001158:	0003      	movs	r3, r0
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fd69 	bl	8001c32 <HAL_SYSTICK_Config>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d112      	bne.n	800118a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d80a      	bhi.n	8001180 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2301      	movs	r3, #1
 800116e:	425b      	negs	r3, r3
 8001170:	2200      	movs	r2, #0
 8001172:	0018      	movs	r0, r3
 8001174:	f000 fd48 	bl	8001c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_InitTick+0x90>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00d      	b.n	800119c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e008      	b.n	800119c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118a:	230f      	movs	r3, #15
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e003      	b.n	800119c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001194:	230f      	movs	r3, #15
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	781b      	ldrb	r3, [r3, #0]
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b005      	add	sp, #20
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_IncTick+0x1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	001a      	movs	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_IncTick+0x20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	18d2      	adds	r2, r2, r3
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_IncTick+0x20>)
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000008 	.word	0x20000008
 80011d8:	200003ac 	.word	0x200003ac

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b02      	ldr	r3, [pc, #8]	@ (80011ec <HAL_GetTick+0x10>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	200003ac 	.word	0x200003ac

080011f0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001200:	401a      	ands	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	ff3fffff 	.word	0xff3fffff

08001218 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	23c0      	movs	r3, #192	@ 0xc0
 8001226:	041b      	lsls	r3, r3, #16
 8001228:	4013      	ands	r3, r2
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}

08001232 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	2104      	movs	r1, #4
 8001246:	400a      	ands	r2, r1
 8001248:	2107      	movs	r1, #7
 800124a:	4091      	lsls	r1, r2
 800124c:	000a      	movs	r2, r1
 800124e:	43d2      	mvns	r2, r2
 8001250:	401a      	ands	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2104      	movs	r1, #4
 8001256:	400b      	ands	r3, r1
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4099      	lsls	r1, r3
 800125c:	000b      	movs	r3, r1
 800125e:	431a      	orrs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}

0800126c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	2104      	movs	r1, #4
 800127e:	400a      	ands	r2, r1
 8001280:	2107      	movs	r1, #7
 8001282:	4091      	lsls	r1, r2
 8001284:	000a      	movs	r2, r1
 8001286:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2104      	movs	r1, #4
 800128c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800128e:	40da      	lsrs	r2, r3
 8001290:	0013      	movs	r3, r2
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	211f      	movs	r1, #31
 80012ae:	400a      	ands	r2, r1
 80012b0:	210f      	movs	r1, #15
 80012b2:	4091      	lsls	r1, r2
 80012b4:	000a      	movs	r2, r1
 80012b6:	43d2      	mvns	r2, r2
 80012b8:	401a      	ands	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0e9b      	lsrs	r3, r3, #26
 80012be:	210f      	movs	r1, #15
 80012c0:	4019      	ands	r1, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	201f      	movs	r0, #31
 80012c6:	4003      	ands	r3, r0
 80012c8:	4099      	lsls	r1, r3
 80012ca:	000b      	movs	r3, r1
 80012cc:	431a      	orrs	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}

080012da <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	025b      	lsls	r3, r3, #9
 80012ec:	0a5b      	lsrs	r3, r3, #9
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	0252      	lsls	r2, r2, #9
 800130e:	0a52      	lsrs	r2, r2, #9
 8001310:	43d2      	mvns	r2, r2
 8001312:	401a      	ands	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	0212      	lsls	r2, r2, #8
 8001334:	43d2      	mvns	r2, r2
 8001336:	401a      	ands	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	400b      	ands	r3, r1
 8001340:	4904      	ldr	r1, [pc, #16]	@ (8001354 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001342:	400b      	ands	r3, r1
 8001344:	431a      	orrs	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b004      	add	sp, #16
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	7fffff00 	.word	0x7fffff00

08001358 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a05      	ldr	r2, [pc, #20]	@ (800137c <LL_ADC_EnableInternalRegulator+0x24>)
 8001366:	4013      	ands	r3, r2
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	0552      	lsls	r2, r2, #21
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	6fffffe8 	.word	0x6fffffe8

08001380 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	055b      	lsls	r3, r3, #21
 8001390:	401a      	ands	r2, r3
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	055b      	lsls	r3, r3, #21
 8001396:	429a      	cmp	r2, r3
 8001398:	d101      	bne.n	800139e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <LL_ADC_IsEnabled+0x18>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <LL_ADC_IsEnabled+0x1a>
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}

080013ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2204      	movs	r2, #4
 80013d8:	4013      	ands	r3, r2
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d101      	bne.n	80013e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	231f      	movs	r3, #31
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e17e      	b.n	8001710 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10a      	bne.n	8001430 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fbcd 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2254      	movs	r2, #84	@ 0x54
 800142c:	2100      	movs	r1, #0
 800142e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ffa3 	bl	8001380 <LL_ADC_IsInternalRegulatorEnabled>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d114      	bne.n	8001468 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ff88 	bl	8001358 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001448:	4bb3      	ldr	r3, [pc, #716]	@ (8001718 <HAL_ADC_Init+0x32c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	49b3      	ldr	r1, [pc, #716]	@ (800171c <HAL_ADC_Init+0x330>)
 800144e:	0018      	movs	r0, r3
 8001450:	f7fe fe5a 	bl	8000108 <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800145a:	e002      	b.n	8001462 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b01      	subs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff ff87 	bl	8001380 <LL_ADC_IsInternalRegulatorEnabled>
 8001472:	1e03      	subs	r3, r0, #0
 8001474:	d10f      	bne.n	8001496 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	2210      	movs	r2, #16
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001486:	2201      	movs	r2, #1
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800148e:	231f      	movs	r3, #31
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0018      	movs	r0, r3
 800149c:	f7ff ff95 	bl	80013ca <LL_ADC_REG_IsConversionOngoing>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a8:	2210      	movs	r2, #16
 80014aa:	4013      	ands	r3, r2
 80014ac:	d000      	beq.n	80014b0 <HAL_ADC_Init+0xc4>
 80014ae:	e122      	b.n	80016f6 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d000      	beq.n	80014b8 <HAL_ADC_Init+0xcc>
 80014b6:	e11e      	b.n	80016f6 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014bc:	4a98      	ldr	r2, [pc, #608]	@ (8001720 <HAL_ADC_Init+0x334>)
 80014be:	4013      	ands	r3, r2
 80014c0:	2202      	movs	r2, #2
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff6b 	bl	80013a8 <LL_ADC_IsEnabled>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d000      	beq.n	80014d8 <HAL_ADC_Init+0xec>
 80014d6:	e0ad      	b.n	8001634 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e1b      	ldrb	r3, [r3, #24]
 80014e0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014e2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7e5b      	ldrb	r3, [r3, #25]
 80014e8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014ea:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e9b      	ldrb	r3, [r3, #26]
 80014f0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014f2:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <HAL_ADC_Init+0x116>
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	e000      	b.n	8001504 <HAL_ADC_Init+0x118>
 8001502:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001504:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800150a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	da04      	bge.n	800151e <HAL_ADC_Init+0x132>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	085b      	lsrs	r3, r3, #1
 800151c:	e001      	b.n	8001522 <HAL_ADC_Init+0x136>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001522:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	212c      	movs	r1, #44	@ 0x2c
 8001528:	5c5b      	ldrb	r3, [r3, r1]
 800152a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800152c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	5c9b      	ldrb	r3, [r3, r2]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d115      	bne.n	800156a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7e9b      	ldrb	r3, [r3, #26]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2280      	movs	r2, #128	@ 0x80
 800154a:	0252      	lsls	r2, r2, #9
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	e00b      	b.n	800156a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	2220      	movs	r2, #32
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001562:	2201      	movs	r2, #1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001576:	23e0      	movs	r3, #224	@ 0xe0
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001580:	4313      	orrs	r3, r2
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4a65      	ldr	r2, [pc, #404]	@ (8001724 <HAL_ADC_Init+0x338>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	430a      	orrs	r2, r1
 800159c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	0f9b      	lsrs	r3, r3, #30
 80015a4:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	223c      	movs	r2, #60	@ 0x3c
 80015b6:	5c9b      	ldrb	r3, [r3, r2]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d111      	bne.n	80015e0 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	0f9b      	lsrs	r3, r3, #30
 80015c2:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015c8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80015ce:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80015d4:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	2201      	movs	r2, #1
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4a50      	ldr	r2, [pc, #320]	@ (8001728 <HAL_ADC_Init+0x33c>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	23c0      	movs	r3, #192	@ 0xc0
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	429a      	cmp	r2, r3
 8001600:	d018      	beq.n	8001634 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	429a      	cmp	r2, r3
 800160c:	d012      	beq.n	8001634 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	429a      	cmp	r2, r3
 8001618:	d00c      	beq.n	8001634 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <HAL_ADC_Init+0x340>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a44      	ldr	r2, [pc, #272]	@ (8001730 <HAL_ADC_Init+0x344>)
 8001620:	4013      	ands	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	23f0      	movs	r3, #240	@ 0xf0
 800162a:	039b      	lsls	r3, r3, #14
 800162c:	401a      	ands	r2, r3
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <HAL_ADC_Init+0x340>)
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163c:	001a      	movs	r2, r3
 800163e:	2100      	movs	r1, #0
 8001640:	f7ff fdf7 	bl	8001232 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164c:	4939      	ldr	r1, [pc, #228]	@ (8001734 <HAL_ADC_Init+0x348>)
 800164e:	001a      	movs	r2, r3
 8001650:	f7ff fdef 	bl	8001232 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2110      	movs	r1, #16
 8001668:	4249      	negs	r1, r1
 800166a:	430a      	orrs	r2, r1
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
 800166e:	e018      	b.n	80016a2 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	039b      	lsls	r3, r3, #14
 8001678:	429a      	cmp	r2, r3
 800167a:	d112      	bne.n	80016a2 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	3b01      	subs	r3, #1
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	221c      	movs	r2, #28
 800168c:	4013      	ands	r3, r2
 800168e:	2210      	movs	r2, #16
 8001690:	4252      	negs	r2, r2
 8001692:	409a      	lsls	r2, r3
 8001694:	0011      	movs	r1, r2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2100      	movs	r1, #0
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fddf 	bl	800126c <LL_ADC_GetSamplingTimeCommonChannels>
 80016ae:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d10b      	bne.n	80016d0 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	2203      	movs	r2, #3
 80016c4:	4393      	bics	r3, r2
 80016c6:	2201      	movs	r2, #1
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016ce:	e01c      	b.n	800170a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	2212      	movs	r2, #18
 80016d6:	4393      	bics	r3, r2
 80016d8:	2210      	movs	r2, #16
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e4:	2201      	movs	r2, #1
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80016ec:	231f      	movs	r3, #31
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016f4:	e009      	b.n	800170a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	2210      	movs	r2, #16
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001702:	231f      	movs	r3, #31
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800170a:	231f      	movs	r3, #31
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b008      	add	sp, #32
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	00030d40 	.word	0x00030d40
 8001720:	fffffefd 	.word	0xfffffefd
 8001724:	ffde0201 	.word	0xffde0201
 8001728:	1ffffc02 	.word	0x1ffffc02
 800172c:	40012708 	.word	0x40012708
 8001730:	ffc3ffff 	.word	0xffc3ffff
 8001734:	7fffff04 	.word	0x7fffff04

08001738 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001742:	2317      	movs	r3, #23
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2254      	movs	r2, #84	@ 0x54
 8001752:	5c9b      	ldrb	r3, [r3, r2]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_ADC_ConfigChannel+0x24>
 8001758:	2302      	movs	r3, #2
 800175a:	e1be      	b.n	8001ada <HAL_ADC_ConfigChannel+0x3a2>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2254      	movs	r2, #84	@ 0x54
 8001760:	2101      	movs	r1, #1
 8001762:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff fe2e 	bl	80013ca <LL_ADC_REG_IsConversionOngoing>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d000      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x3c>
 8001772:	e1a1      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d100      	bne.n	800177e <HAL_ADC_ConfigChannel+0x46>
 800177c:	e152      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	2380      	movs	r3, #128	@ 0x80
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	429a      	cmp	r2, r3
 8001788:	d004      	beq.n	8001794 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800178e:	4ac2      	ldr	r2, [pc, #776]	@ (8001a98 <HAL_ADC_ConfigChannel+0x360>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d108      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0019      	movs	r1, r3
 800179e:	0010      	movs	r0, r2
 80017a0:	f7ff fd9b 	bl	80012da <LL_ADC_REG_SetSequencerChAdd>
 80017a4:	e0ed      	b.n	8001982 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	211f      	movs	r1, #31
 80017b0:	400b      	ands	r3, r1
 80017b2:	210f      	movs	r1, #15
 80017b4:	4099      	lsls	r1, r3
 80017b6:	000b      	movs	r3, r1
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	d105      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x9c>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0e9b      	lsrs	r3, r3, #26
 80017ce:	221f      	movs	r2, #31
 80017d0:	4013      	ands	r3, r2
 80017d2:	e0bc      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	d000      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0xa8>
 80017de:	e0b5      	b.n	800194c <HAL_ADC_ConfigChannel+0x214>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d000      	beq.n	80017ec <HAL_ADC_ConfigChannel+0xb4>
 80017ea:	e0ad      	b.n	8001948 <HAL_ADC_ConfigChannel+0x210>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2204      	movs	r2, #4
 80017f2:	4013      	ands	r3, r2
 80017f4:	d000      	beq.n	80017f8 <HAL_ADC_ConfigChannel+0xc0>
 80017f6:	e0a5      	b.n	8001944 <HAL_ADC_ConfigChannel+0x20c>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2208      	movs	r2, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	d000      	beq.n	8001804 <HAL_ADC_ConfigChannel+0xcc>
 8001802:	e09d      	b.n	8001940 <HAL_ADC_ConfigChannel+0x208>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2210      	movs	r2, #16
 800180a:	4013      	ands	r3, r2
 800180c:	d000      	beq.n	8001810 <HAL_ADC_ConfigChannel+0xd8>
 800180e:	e095      	b.n	800193c <HAL_ADC_ConfigChannel+0x204>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2220      	movs	r2, #32
 8001816:	4013      	ands	r3, r2
 8001818:	d000      	beq.n	800181c <HAL_ADC_ConfigChannel+0xe4>
 800181a:	e08d      	b.n	8001938 <HAL_ADC_ConfigChannel+0x200>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2240      	movs	r2, #64	@ 0x40
 8001822:	4013      	ands	r3, r2
 8001824:	d000      	beq.n	8001828 <HAL_ADC_ConfigChannel+0xf0>
 8001826:	e085      	b.n	8001934 <HAL_ADC_ConfigChannel+0x1fc>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2280      	movs	r2, #128	@ 0x80
 800182e:	4013      	ands	r3, r2
 8001830:	d000      	beq.n	8001834 <HAL_ADC_ConfigChannel+0xfc>
 8001832:	e07d      	b.n	8001930 <HAL_ADC_ConfigChannel+0x1f8>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4013      	ands	r3, r2
 800183e:	d000      	beq.n	8001842 <HAL_ADC_ConfigChannel+0x10a>
 8001840:	e074      	b.n	800192c <HAL_ADC_ConfigChannel+0x1f4>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	@ 0x80
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d000      	beq.n	8001850 <HAL_ADC_ConfigChannel+0x118>
 800184e:	e06b      	b.n	8001928 <HAL_ADC_ConfigChannel+0x1f0>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4013      	ands	r3, r2
 800185a:	d000      	beq.n	800185e <HAL_ADC_ConfigChannel+0x126>
 800185c:	e062      	b.n	8001924 <HAL_ADC_ConfigChannel+0x1ec>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4013      	ands	r3, r2
 8001868:	d000      	beq.n	800186c <HAL_ADC_ConfigChannel+0x134>
 800186a:	e059      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1e8>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	015b      	lsls	r3, r3, #5
 8001874:	4013      	ands	r3, r2
 8001876:	d151      	bne.n	800191c <HAL_ADC_ConfigChannel+0x1e4>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	019b      	lsls	r3, r3, #6
 8001880:	4013      	ands	r3, r2
 8001882:	d149      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1e0>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	01db      	lsls	r3, r3, #7
 800188c:	4013      	ands	r3, r2
 800188e:	d141      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1dc>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	4013      	ands	r3, r2
 800189a:	d139      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d8>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	025b      	lsls	r3, r3, #9
 80018a4:	4013      	ands	r3, r2
 80018a6:	d131      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1d4>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	4013      	ands	r3, r2
 80018b2:	d129      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x1d0>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	02db      	lsls	r3, r3, #11
 80018bc:	4013      	ands	r3, r2
 80018be:	d121      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1cc>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	031b      	lsls	r3, r3, #12
 80018c8:	4013      	ands	r3, r2
 80018ca:	d119      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1c8>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	@ 0x80
 80018d2:	035b      	lsls	r3, r3, #13
 80018d4:	4013      	ands	r3, r2
 80018d6:	d111      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1c4>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	039b      	lsls	r3, r3, #14
 80018e0:	4013      	ands	r3, r2
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1c0>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	03db      	lsls	r3, r3, #15
 80018ec:	4013      	ands	r3, r2
 80018ee:	d001      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x1bc>
 80018f0:	2316      	movs	r3, #22
 80018f2:	e02c      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 80018f4:	2300      	movs	r3, #0
 80018f6:	e02a      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 80018f8:	2315      	movs	r3, #21
 80018fa:	e028      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 80018fc:	2314      	movs	r3, #20
 80018fe:	e026      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001900:	2313      	movs	r3, #19
 8001902:	e024      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001904:	2312      	movs	r3, #18
 8001906:	e022      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001908:	2311      	movs	r3, #17
 800190a:	e020      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 800190c:	2310      	movs	r3, #16
 800190e:	e01e      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001910:	230f      	movs	r3, #15
 8001912:	e01c      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001914:	230e      	movs	r3, #14
 8001916:	e01a      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001918:	230d      	movs	r3, #13
 800191a:	e018      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 800191c:	230c      	movs	r3, #12
 800191e:	e016      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001920:	230b      	movs	r3, #11
 8001922:	e014      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001924:	230a      	movs	r3, #10
 8001926:	e012      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001928:	2309      	movs	r3, #9
 800192a:	e010      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 800192c:	2308      	movs	r3, #8
 800192e:	e00e      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001930:	2307      	movs	r3, #7
 8001932:	e00c      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001934:	2306      	movs	r3, #6
 8001936:	e00a      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001938:	2305      	movs	r3, #5
 800193a:	e008      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 800193c:	2304      	movs	r3, #4
 800193e:	e006      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001940:	2303      	movs	r3, #3
 8001942:	e004      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_ADC_ConfigChannel+0x216>
 800194c:	2300      	movs	r3, #0
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	6852      	ldr	r2, [r2, #4]
 8001952:	201f      	movs	r0, #31
 8001954:	4002      	ands	r2, r0
 8001956:	4093      	lsls	r3, r2
 8001958:	000a      	movs	r2, r1
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	429a      	cmp	r2, r3
 800196e:	d808      	bhi.n	8001982 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	001a      	movs	r2, r3
 800197e:	f7ff fc8c 	bl	800129a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6819      	ldr	r1, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	001a      	movs	r2, r3
 8001990:	f7ff fcc6 	bl	8001320 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db00      	blt.n	800199e <HAL_ADC_ConfigChannel+0x266>
 800199c:	e096      	b.n	8001acc <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <HAL_ADC_ConfigChannel+0x364>)
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff fc39 	bl	8001218 <LL_ADC_GetCommonPathInternalCh>
 80019a6:	0003      	movs	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x368>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d123      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019bc:	d11e      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	0412      	lsls	r2, r2, #16
 80019c4:	4313      	orrs	r3, r2
 80019c6:	4a35      	ldr	r2, [pc, #212]	@ (8001a9c <HAL_ADC_ConfigChannel+0x364>)
 80019c8:	0019      	movs	r1, r3
 80019ca:	0010      	movs	r0, r2
 80019cc:	f7ff fc10 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80019d0:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x36c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4934      	ldr	r1, [pc, #208]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x370>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7fe fb96 	bl	8000108 <__udivsi3>
 80019dc:	0003      	movs	r3, r0
 80019de:	001a      	movs	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	189b      	adds	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019fa:	e067      	b.n	8001acc <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2a      	ldr	r2, [pc, #168]	@ (8001aac <HAL_ADC_ConfigChannel+0x374>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d162      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	03db      	lsls	r3, r3, #15
 8001a0c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a0e:	d15d      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	03d2      	lsls	r2, r2, #15
 8001a16:	4313      	orrs	r3, r2
 8001a18:	4a20      	ldr	r2, [pc, #128]	@ (8001a9c <HAL_ADC_ConfigChannel+0x364>)
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	0010      	movs	r0, r2
 8001a1e:	f7ff fbe7 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001a22:	e053      	b.n	8001acc <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	061b      	lsls	r3, r3, #24
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d004      	beq.n	8001a3a <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a34:	4a18      	ldr	r2, [pc, #96]	@ (8001a98 <HAL_ADC_ConfigChannel+0x360>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d107      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0019      	movs	r1, r3
 8001a44:	0010      	movs	r0, r2
 8001a46:	f7ff fc59 	bl	80012fc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da3c      	bge.n	8001acc <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_ADC_ConfigChannel+0x364>)
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff fbdf 	bl	8001218 <LL_ADC_GetCommonPathInternalCh>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x368>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d108      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x378>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <HAL_ADC_ConfigChannel+0x364>)
 8001a70:	0019      	movs	r1, r3
 8001a72:	0010      	movs	r0, r2
 8001a74:	f7ff fbbc 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001a78:	e028      	b.n	8001acc <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001aac <HAL_ADC_ConfigChannel+0x374>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d123      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x37c>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <HAL_ADC_ConfigChannel+0x364>)
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	0010      	movs	r0, r2
 8001a90:	f7ff fbae 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001a94:	e01a      	b.n	8001acc <HAL_ADC_ConfigChannel+0x394>
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	80000004 	.word	0x80000004
 8001a9c:	40012708 	.word	0x40012708
 8001aa0:	a4000200 	.word	0xa4000200
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	00030d40 	.word	0x00030d40
 8001aac:	a8000400 	.word	0xa8000400
 8001ab0:	ff7fffff 	.word	0xff7fffff
 8001ab4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abc:	2220      	movs	r2, #32
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ac4:	2317      	movs	r3, #23
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2254      	movs	r2, #84	@ 0x54
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	2317      	movs	r3, #23
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b006      	add	sp, #24
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	0002      	movs	r2, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001af8:	d828      	bhi.n	8001b4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afa:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb8 <__NVIC_SetPriority+0xd4>)
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	33c0      	adds	r3, #192	@ 0xc0
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	589b      	ldr	r3, [r3, r2]
 8001b0a:	1dfa      	adds	r2, r7, #7
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	0011      	movs	r1, r2
 8001b10:	2203      	movs	r2, #3
 8001b12:	400a      	ands	r2, r1
 8001b14:	00d2      	lsls	r2, r2, #3
 8001b16:	21ff      	movs	r1, #255	@ 0xff
 8001b18:	4091      	lsls	r1, r2
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	43d2      	mvns	r2, r2
 8001b1e:	401a      	ands	r2, r3
 8001b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	22ff      	movs	r2, #255	@ 0xff
 8001b28:	401a      	ands	r2, r3
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	2303      	movs	r3, #3
 8001b32:	4003      	ands	r3, r0
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b38:	481f      	ldr	r0, [pc, #124]	@ (8001bb8 <__NVIC_SetPriority+0xd4>)
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	430a      	orrs	r2, r1
 8001b44:	33c0      	adds	r3, #192	@ 0xc0
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b4a:	e031      	b.n	8001bb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <__NVIC_SetPriority+0xd8>)
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	0019      	movs	r1, r3
 8001b54:	230f      	movs	r3, #15
 8001b56:	400b      	ands	r3, r1
 8001b58:	3b08      	subs	r3, #8
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3306      	adds	r3, #6
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	18d3      	adds	r3, r2, r3
 8001b62:	3304      	adds	r3, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	1dfa      	adds	r2, r7, #7
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	400a      	ands	r2, r1
 8001b70:	00d2      	lsls	r2, r2, #3
 8001b72:	21ff      	movs	r1, #255	@ 0xff
 8001b74:	4091      	lsls	r1, r2
 8001b76:	000a      	movs	r2, r1
 8001b78:	43d2      	mvns	r2, r2
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	22ff      	movs	r2, #255	@ 0xff
 8001b84:	401a      	ands	r2, r3
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	4003      	ands	r3, r0
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <__NVIC_SetPriority+0xd8>)
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	001c      	movs	r4, r3
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	4023      	ands	r3, r4
 8001ba0:	3b08      	subs	r3, #8
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	18c3      	adds	r3, r0, r3
 8001bac:	3304      	adds	r3, #4
 8001bae:	601a      	str	r2, [r3, #0]
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b003      	add	sp, #12
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1e5a      	subs	r2, r3, #1
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	045b      	lsls	r3, r3, #17
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d301      	bcc.n	8001bd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e010      	b.n	8001bfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <SysTick_Config+0x44>)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be0:	2301      	movs	r3, #1
 8001be2:	425b      	negs	r3, r3
 8001be4:	2103      	movs	r1, #3
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff ff7c 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x44>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x44>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	210f      	movs	r1, #15
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	1c02      	adds	r2, r0, #0
 8001c18:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b004      	add	sp, #16
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff ffbf 	bl	8001bc0 <SysTick_Config>
 8001c42:	0003      	movs	r3, r0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c5a:	e153      	b.n	8001f04 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2101      	movs	r1, #1
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4091      	lsls	r1, r2
 8001c66:	000a      	movs	r2, r1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d100      	bne.n	8001c74 <HAL_GPIO_Init+0x28>
 8001c72:	e144      	b.n	8001efe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x38>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	d125      	bne.n	8001cd0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	58d3      	ldr	r3, [r2, r3]
 8001c90:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2207      	movs	r2, #7
 8001c96:	4013      	ands	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	0013      	movs	r3, r2
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	220f      	movs	r2, #15
 8001cae:	401a      	ands	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2107      	movs	r1, #7
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	0013      	movs	r3, r2
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d00b      	beq.n	8001d24 <HAL_GPIO_Init+0xd8>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d007      	beq.n	8001d24 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d18:	2b11      	cmp	r3, #17
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d130      	bne.n	8001d86 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
 8001d34:	43da      	mvns	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	409a      	lsls	r2, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	43da      	mvns	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4013      	ands	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	2201      	movs	r2, #1
 8001d72:	401a      	ands	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d017      	beq.n	8001dbe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4013      	ands	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	055b      	lsls	r3, r3, #21
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d100      	bne.n	8001dcc <HAL_GPIO_Init+0x180>
 8001dca:	e098      	b.n	8001efe <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001dcc:	4a53      	ldr	r2, [pc, #332]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	589b      	ldr	r3, [r3, r2]
 8001dd8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4013      	ands	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	220f      	movs	r2, #15
 8001de4:	409a      	lsls	r2, r3
 8001de6:	0013      	movs	r3, r2
 8001de8:	43da      	mvns	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4013      	ands	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	23a0      	movs	r3, #160	@ 0xa0
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x1e2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	@ (8001f20 <HAL_GPIO_Init+0x2d4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x1de>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a47      	ldr	r2, [pc, #284]	@ (8001f24 <HAL_GPIO_Init+0x2d8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x1da>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a46      	ldr	r2, [pc, #280]	@ (8001f28 <HAL_GPIO_Init+0x2dc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x1d6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a45      	ldr	r2, [pc, #276]	@ (8001f2c <HAL_GPIO_Init+0x2e0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x1d2>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x1e4>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x1e4>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x1e4>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x1e4>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x1e4>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	2103      	movs	r1, #3
 8001e34:	400a      	ands	r2, r1
 8001e36:	00d2      	lsls	r2, r2, #3
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e40:	4936      	ldr	r1, [pc, #216]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3318      	adds	r3, #24
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001e4e:	4a33      	ldr	r2, [pc, #204]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	58d3      	ldr	r3, [r2, r3]
 8001e54:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e74:	4929      	ldr	r1, [pc, #164]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e76:	2280      	movs	r2, #128	@ 0x80
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001e7c:	4a27      	ldr	r2, [pc, #156]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001e7e:	2384      	movs	r3, #132	@ 0x84
 8001e80:	58d3      	ldr	r3, [r2, r3]
 8001e82:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	029b      	lsls	r3, r3, #10
 8001e96:	4013      	ands	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ea2:	491e      	ldr	r1, [pc, #120]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ea4:	2284      	movs	r2, #132	@ 0x84
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	035b      	lsls	r3, r3, #13
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43da      	mvns	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	039b      	lsls	r3, r3, #14
 8001eec:	4013      	ands	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_GPIO_Init+0x2d0>)
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	3301      	adds	r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	40da      	lsrs	r2, r3
 8001f0c:	1e13      	subs	r3, r2, #0
 8001f0e:	d000      	beq.n	8001f12 <HAL_GPIO_Init+0x2c6>
 8001f10:	e6a4      	b.n	8001c5c <HAL_GPIO_Init+0x10>
  }
}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b006      	add	sp, #24
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021800 	.word	0x40021800
 8001f20:	50000400 	.word	0x50000400
 8001f24:	50000800 	.word	0x50000800
 8001f28:	50000c00 	.word	0x50000c00
 8001f2c:	50001400 	.word	0x50001400

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	0008      	movs	r0, r1
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	1cbb      	adds	r3, r7, #2
 8001f3e:	1c02      	adds	r2, r0, #0
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	1c7b      	adds	r3, r7, #1
 8001f44:	1c0a      	adds	r2, r1, #0
 8001f46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f48:	1c7b      	adds	r3, r7, #1
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f50:	1cbb      	adds	r3, r7, #2
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e003      	b.n	8001f62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	1cbb      	adds	r3, r7, #2
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e08f      	b.n	800209e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2241      	movs	r2, #65	@ 0x41
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2240      	movs	r2, #64	@ 0x40
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7fe fe6d 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2241      	movs	r2, #65	@ 0x41
 8001f9e:	2124      	movs	r1, #36	@ 0x24
 8001fa0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	438a      	bics	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	493b      	ldr	r1, [pc, #236]	@ (80020a8 <HAL_I2C_Init+0x13c>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4938      	ldr	r1, [pc, #224]	@ (80020ac <HAL_I2C_Init+0x140>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d108      	bne.n	8001fea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	0209      	lsls	r1, r1, #8
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e007      	b.n	8001ffa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2184      	movs	r1, #132	@ 0x84
 8001ff4:	0209      	lsls	r1, r1, #8
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d109      	bne.n	8002016 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	0109      	lsls	r1, r1, #4
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	e007      	b.n	8002026 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4923      	ldr	r1, [pc, #140]	@ (80020b0 <HAL_I2C_Init+0x144>)
 8002022:	400a      	ands	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4920      	ldr	r1, [pc, #128]	@ (80020b4 <HAL_I2C_Init+0x148>)
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	491a      	ldr	r1, [pc, #104]	@ (80020ac <HAL_I2C_Init+0x140>)
 8002042:	400a      	ands	r2, r1
 8002044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	431a      	orrs	r2, r3
 8002050:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69d9      	ldr	r1, [r3, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2241      	movs	r2, #65	@ 0x41
 800208a:	2120      	movs	r1, #32
 800208c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2242      	movs	r2, #66	@ 0x42
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	f0ffffff 	.word	0xf0ffffff
 80020ac:	ffff7fff 	.word	0xffff7fff
 80020b0:	fffff7ff 	.word	0xfffff7ff
 80020b4:	02008000 	.word	0x02008000

080020b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2241      	movs	r2, #65	@ 0x41
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d138      	bne.n	8002140 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2240      	movs	r2, #64	@ 0x40
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020d8:	2302      	movs	r3, #2
 80020da:	e032      	b.n	8002142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2240      	movs	r2, #64	@ 0x40
 80020e0:	2101      	movs	r1, #1
 80020e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2241      	movs	r2, #65	@ 0x41
 80020e8:	2124      	movs	r1, #36	@ 0x24
 80020ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2101      	movs	r1, #1
 80020f8:	438a      	bics	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4911      	ldr	r1, [pc, #68]	@ (800214c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002108:	400a      	ands	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2241      	movs	r2, #65	@ 0x41
 8002130:	2120      	movs	r1, #32
 8002132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2240      	movs	r2, #64	@ 0x40
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	e000      	b.n	8002142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
  }
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b002      	add	sp, #8
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	ffffefff 	.word	0xffffefff

08002150 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2241      	movs	r2, #65	@ 0x41
 800215e:	5c9b      	ldrb	r3, [r3, r2]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	d139      	bne.n	80021da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2240      	movs	r2, #64	@ 0x40
 800216a:	5c9b      	ldrb	r3, [r3, r2]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002170:	2302      	movs	r3, #2
 8002172:	e033      	b.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2241      	movs	r2, #65	@ 0x41
 8002180:	2124      	movs	r1, #36	@ 0x24
 8002182:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a11      	ldr	r2, [pc, #68]	@ (80021e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2241      	movs	r2, #65	@ 0x41
 80021ca:	2120      	movs	r1, #32
 80021cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2240      	movs	r2, #64	@ 0x40
 80021d2:	2100      	movs	r1, #0
 80021d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
  }
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	fffff0ff 	.word	0xfffff0ff

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e1d0      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	4013      	ands	r3, r2
 8002202:	d100      	bne.n	8002206 <HAL_RCC_OscConfig+0x1e>
 8002204:	e069      	b.n	80022da <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4bc8      	ldr	r3, [pc, #800]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2238      	movs	r2, #56	@ 0x38
 800220c:	4013      	ands	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b08      	cmp	r3, #8
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d15d      	bne.n	80022da <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e1bc      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	429a      	cmp	r2, r3
 800222c:	d107      	bne.n	800223e <HAL_RCC_OscConfig+0x56>
 800222e:	4bbe      	ldr	r3, [pc, #760]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4bbd      	ldr	r3, [pc, #756]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	0249      	lsls	r1, r1, #9
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e020      	b.n	8002280 <HAL_RCC_OscConfig+0x98>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	23a0      	movs	r3, #160	@ 0xa0
 8002244:	02db      	lsls	r3, r3, #11
 8002246:	429a      	cmp	r2, r3
 8002248:	d10e      	bne.n	8002268 <HAL_RCC_OscConfig+0x80>
 800224a:	4bb7      	ldr	r3, [pc, #732]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4bb6      	ldr	r3, [pc, #728]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002250:	2180      	movs	r1, #128	@ 0x80
 8002252:	02c9      	lsls	r1, r1, #11
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	4bb3      	ldr	r3, [pc, #716]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4bb2      	ldr	r3, [pc, #712]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800225e:	2180      	movs	r1, #128	@ 0x80
 8002260:	0249      	lsls	r1, r1, #9
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0x98>
 8002268:	4baf      	ldr	r3, [pc, #700]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4bae      	ldr	r3, [pc, #696]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800226e:	49af      	ldr	r1, [pc, #700]	@ (800252c <HAL_RCC_OscConfig+0x344>)
 8002270:	400a      	ands	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	4bac      	ldr	r3, [pc, #688]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4bab      	ldr	r3, [pc, #684]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800227a:	49ad      	ldr	r1, [pc, #692]	@ (8002530 <HAL_RCC_OscConfig+0x348>)
 800227c:	400a      	ands	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d014      	beq.n	80022b2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe ffa8 	bl	80011dc <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002292:	f7fe ffa3 	bl	80011dc <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	@ 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e17b      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	4013      	ands	r3, r2
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0xaa>
 80022b0:	e013      	b.n	80022da <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe ff93 	bl	80011dc <HAL_GetTick>
 80022b6:	0003      	movs	r3, r0
 80022b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80022bc:	f7fe ff8e 	bl	80011dc <HAL_GetTick>
 80022c0:	0002      	movs	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e166      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ce:	4b96      	ldr	r3, [pc, #600]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	@ 0x80
 80022d4:	029b      	lsls	r3, r3, #10
 80022d6:	4013      	ands	r3, r2
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d100      	bne.n	80022e6 <HAL_RCC_OscConfig+0xfe>
 80022e4:	e086      	b.n	80023f4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e6:	4b90      	ldr	r3, [pc, #576]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2238      	movs	r2, #56	@ 0x38
 80022ec:	4013      	ands	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d12f      	bne.n	8002356 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e14c      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b89      	ldr	r3, [pc, #548]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a8b      	ldr	r2, [pc, #556]	@ (8002534 <HAL_RCC_OscConfig+0x34c>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	021a      	lsls	r2, r3, #8
 8002312:	4b85      	ldr	r3, [pc, #532]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800231e:	4b82      	ldr	r3, [pc, #520]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a85      	ldr	r2, [pc, #532]	@ (8002538 <HAL_RCC_OscConfig+0x350>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	4b7e      	ldr	r3, [pc, #504]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002332:	4b7d      	ldr	r3, [pc, #500]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0adb      	lsrs	r3, r3, #11
 8002338:	2207      	movs	r2, #7
 800233a:	4013      	ands	r3, r2
 800233c:	4a7f      	ldr	r2, [pc, #508]	@ (800253c <HAL_RCC_OscConfig+0x354>)
 800233e:	40da      	lsrs	r2, r3
 8002340:	4b7f      	ldr	r3, [pc, #508]	@ (8002540 <HAL_RCC_OscConfig+0x358>)
 8002342:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002344:	4b7f      	ldr	r3, [pc, #508]	@ (8002544 <HAL_RCC_OscConfig+0x35c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0018      	movs	r0, r3
 800234a:	f7fe feeb 	bl	8001124 <HAL_InitTick>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d050      	beq.n	80023f4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e122      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d030      	beq.n	80023c0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800235e:	4b72      	ldr	r3, [pc, #456]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_RCC_OscConfig+0x350>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b6e      	ldr	r3, [pc, #440]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b6c      	ldr	r3, [pc, #432]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002378:	2180      	movs	r1, #128	@ 0x80
 800237a:	0049      	lsls	r1, r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe ff2c 	bl	80011dc <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800238a:	f7fe ff27 	bl	80011dc <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0ff      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	4b62      	ldr	r3, [pc, #392]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4013      	ands	r3, r2
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a61      	ldr	r2, [pc, #388]	@ (8002534 <HAL_RCC_OscConfig+0x34c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	021a      	lsls	r2, r3, #8
 80023b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	e019      	b.n	80023f4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80023c0:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b58      	ldr	r3, [pc, #352]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80023c6:	4960      	ldr	r1, [pc, #384]	@ (8002548 <HAL_RCC_OscConfig+0x360>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ff06 	bl	80011dc <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023d6:	f7fe ff01 	bl	80011dc <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0d9      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4013      	ands	r3, r2
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2208      	movs	r2, #8
 80023fa:	4013      	ands	r3, r2
 80023fc:	d042      	beq.n	8002484 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80023fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2238      	movs	r2, #56	@ 0x38
 8002404:	4013      	ands	r3, r2
 8002406:	2b18      	cmp	r3, #24
 8002408:	d105      	bne.n	8002416 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d138      	bne.n	8002484 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0c2      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d019      	beq.n	8002452 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800241e:	4b42      	ldr	r3, [pc, #264]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002420:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002424:	2101      	movs	r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe fed7 	bl	80011dc <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002434:	f7fe fed2 	bl	80011dc <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0aa      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	2202      	movs	r2, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d0f1      	beq.n	8002434 <HAL_RCC_OscConfig+0x24c>
 8002450:	e018      	b.n	8002484 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002452:	4b35      	ldr	r3, [pc, #212]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002454:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002456:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 8002458:	2101      	movs	r1, #1
 800245a:	438a      	bics	r2, r1
 800245c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe febd 	bl	80011dc <HAL_GetTick>
 8002462:	0003      	movs	r3, r0
 8002464:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002468:	f7fe feb8 	bl	80011dc <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e090      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800247a:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800247c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247e:	2202      	movs	r2, #2
 8002480:	4013      	ands	r3, r2
 8002482:	d1f1      	bne.n	8002468 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	d100      	bne.n	8002490 <HAL_RCC_OscConfig+0x2a8>
 800248e:	e084      	b.n	800259a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002490:	230f      	movs	r3, #15
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002498:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2238      	movs	r2, #56	@ 0x38
 800249e:	4013      	ands	r3, r2
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d000      	beq.n	80024ae <HAL_RCC_OscConfig+0x2c6>
 80024ac:	e075      	b.n	800259a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e074      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2e0>
 80024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024c6:	e01c      	b.n	8002502 <HAL_RCC_OscConfig+0x31a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_OscConfig+0x302>
 80024d0:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024d6:	2104      	movs	r1, #4
 80024d8:	430a      	orrs	r2, r1
 80024da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024dc:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x31a>
 80024ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	438a      	bics	r2, r1
 80024f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x340>)
 80024fc:	2104      	movs	r1, #4
 80024fe:	438a      	bics	r2, r1
 8002500:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d028      	beq.n	800255c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fe67 	bl	80011dc <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fe62 	bl	80011dc <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	4a0b      	ldr	r2, [pc, #44]	@ (800254c <HAL_RCC_OscConfig+0x364>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d915      	bls.n	8002550 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e039      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
 8002528:	40021000 	.word	0x40021000
 800252c:	fffeffff 	.word	0xfffeffff
 8002530:	fffbffff 	.word	0xfffbffff
 8002534:	ffff80ff 	.word	0xffff80ff
 8002538:	ffffc7ff 	.word	0xffffc7ff
 800253c:	02dc6c00 	.word	0x02dc6c00
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004
 8002548:	fffffeff 	.word	0xfffffeff
 800254c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <HAL_RCC_OscConfig+0x3bc>)
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d0dc      	beq.n	8002514 <HAL_RCC_OscConfig+0x32c>
 800255a:	e013      	b.n	8002584 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fe3e 	bl	80011dc <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002564:	e009      	b.n	800257a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fe39 	bl	80011dc <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RCC_OscConfig+0x3c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e010      	b.n	800259c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_RCC_OscConfig+0x3bc>)
 800257c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002584:	230f      	movs	r3, #15
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_OscConfig+0x3bc>)
 8002590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_RCC_OscConfig+0x3bc>)
 8002594:	4905      	ldr	r1, [pc, #20]	@ (80025ac <HAL_RCC_OscConfig+0x3c4>)
 8002596:	400a      	ands	r2, r1
 8002598:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b006      	add	sp, #24
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	00001388 	.word	0x00001388
 80025ac:	efffffff 	.word	0xefffffff

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0e9      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b76      	ldr	r3, [pc, #472]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2207      	movs	r2, #7
 80025ca:	4013      	ands	r3, r2
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d91e      	bls.n	8002610 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b73      	ldr	r3, [pc, #460]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2207      	movs	r2, #7
 80025d8:	4393      	bics	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	4b70      	ldr	r3, [pc, #448]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fdfa 	bl	80011dc <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ec:	e009      	b.n	8002602 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025ee:	f7fe fdf5 	bl	80011dc <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	4a6a      	ldr	r2, [pc, #424]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0ca      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002602:	4b67      	ldr	r3, [pc, #412]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2207      	movs	r2, #7
 8002608:	4013      	ands	r3, r2
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d1ee      	bne.n	80025ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2202      	movs	r2, #2
 8002616:	4013      	ands	r3, r2
 8002618:	d017      	beq.n	800264a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2204      	movs	r2, #4
 8002620:	4013      	ands	r3, r2
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002624:	4b60      	ldr	r3, [pc, #384]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a60      	ldr	r2, [pc, #384]	@ (80027ac <HAL_RCC_ClockConfig+0x1fc>)
 800262a:	401a      	ands	r2, r3
 800262c:	4b5e      	ldr	r3, [pc, #376]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 800262e:	21b0      	movs	r1, #176	@ 0xb0
 8002630:	0109      	lsls	r1, r1, #4
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002636:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a5d      	ldr	r2, [pc, #372]	@ (80027b0 <HAL_RCC_ClockConfig+0x200>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b58      	ldr	r3, [pc, #352]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	4013      	ands	r3, r2
 8002652:	d055      	beq.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002654:	4b54      	ldr	r3, [pc, #336]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	221c      	movs	r2, #28
 800265a:	4393      	bics	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	4b51      	ldr	r3, [pc, #324]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002670:	4b4d      	ldr	r3, [pc, #308]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	4013      	ands	r3, r2
 800267a:	d11f      	bne.n	80026bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e08b      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002688:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4013      	ands	r3, r2
 8002692:	d113      	bne.n	80026bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e07f      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80026a0:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 80026a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a4:	2202      	movs	r2, #2
 80026a6:	4013      	ands	r3, r2
 80026a8:	d108      	bne.n	80026bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e074      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2202      	movs	r2, #2
 80026b4:	4013      	ands	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e06d      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026bc:	4b3a      	ldr	r3, [pc, #232]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2207      	movs	r2, #7
 80026c2:	4393      	bics	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4b37      	ldr	r3, [pc, #220]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7fe fd84 	bl	80011dc <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d8:	e009      	b.n	80026ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7fe fd7f 	bl	80011dc <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a2f      	ldr	r2, [pc, #188]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e054      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2238      	movs	r2, #56	@ 0x38
 80026f4:	401a      	ands	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1ec      	bne.n	80026da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2207      	movs	r2, #7
 8002706:	4013      	ands	r3, r2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d21e      	bcs.n	800274c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2207      	movs	r2, #7
 8002714:	4393      	bics	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002720:	f7fe fd5c 	bl	80011dc <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002728:	e009      	b.n	800273e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800272a:	f7fe fd57 	bl	80011dc <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	4a1b      	ldr	r2, [pc, #108]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e02c      	b.n	8002798 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800273e:	4b18      	ldr	r3, [pc, #96]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2207      	movs	r2, #7
 8002744:	4013      	ands	r3, r2
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d1ee      	bne.n	800272a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2204      	movs	r2, #4
 8002752:	4013      	ands	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4a16      	ldr	r2, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x204>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800276a:	f000 f82b 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800276e:	0001      	movs	r1, r0
 8002770:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002772:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	220f      	movs	r2, #15
 8002778:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800277a:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <HAL_RCC_ClockConfig+0x208>)
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002780:	221f      	movs	r2, #31
 8002782:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002784:	000a      	movs	r2, r1
 8002786:	40da      	lsrs	r2, r3
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <HAL_RCC_ClockConfig+0x20c>)
 800278a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <HAL_RCC_ClockConfig+0x210>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0018      	movs	r0, r3
 8002792:	f7fe fcc7 	bl	8001124 <HAL_InitTick>
 8002796:	0003      	movs	r3, r0
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40022000 	.word	0x40022000
 80027a4:	00001388 	.word	0x00001388
 80027a8:	40021000 	.word	0x40021000
 80027ac:	ffff84ff 	.word	0xffff84ff
 80027b0:	fffff0ff 	.word	0xfffff0ff
 80027b4:	ffff8fff 	.word	0xffff8fff
 80027b8:	08004ee8 	.word	0x08004ee8
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	2207      	movs	r2, #7
 80027d2:	4013      	ands	r3, r2
 80027d4:	3301      	adds	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2238      	movs	r2, #56	@ 0x38
 80027de:	4013      	ands	r3, r2
 80027e0:	d10f      	bne.n	8002802 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0adb      	lsrs	r3, r3, #11
 80027e8:	2207      	movs	r2, #7
 80027ea:	4013      	ands	r3, r2
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	0013      	movs	r3, r2
 80027f2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4819      	ldr	r0, [pc, #100]	@ (800285c <HAL_RCC_GetSysClockFreq+0x98>)
 80027f8:	f7fd fc86 	bl	8000108 <__udivsi3>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e01e      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2238      	movs	r2, #56	@ 0x38
 8002808:	4013      	ands	r3, r2
 800280a:	2b08      	cmp	r3, #8
 800280c:	d102      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800280e:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e015      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002814:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2238      	movs	r2, #56	@ 0x38
 800281a:	4013      	ands	r3, r2
 800281c:	2b20      	cmp	r3, #32
 800281e:	d103      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2238      	movs	r2, #56	@ 0x38
 800282e:	4013      	ands	r3, r2
 8002830:	2b18      	cmp	r3, #24
 8002832:	d103      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002834:	23fa      	movs	r3, #250	@ 0xfa
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e001      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7fd fc60 	bl	8000108 <__udivsi3>
 8002848:	0003      	movs	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	02dc6c00 	.word	0x02dc6c00
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002868:	f7ff ffac 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800286c:	0001      	movs	r1, r0
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_GetHCLKFreq+0x30>)
 8002870:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	220f      	movs	r2, #15
 8002876:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002878:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x34>)
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800287e:	221f      	movs	r2, #31
 8002880:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002882:	000a      	movs	r2, r1
 8002884:	40da      	lsrs	r2, r3
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_RCC_GetHCLKFreq+0x38>)
 8002888:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800288a:	4b04      	ldr	r3, [pc, #16]	@ (800289c <HAL_RCC_GetHCLKFreq+0x38>)
 800288c:	681b      	ldr	r3, [r3, #0]
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	08004ee8 	.word	0x08004ee8
 800289c:	20000000 	.word	0x20000000

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80028a4:	f7ff ffde 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028a8:	0001      	movs	r1, r0
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0b1b      	lsrs	r3, r3, #12
 80028b0:	2207      	movs	r2, #7
 80028b2:	401a      	ands	r2, r3
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	58d3      	ldr	r3, [r2, r3]
 80028ba:	221f      	movs	r2, #31
 80028bc:	4013      	ands	r3, r2
 80028be:	40d9      	lsrs	r1, r3
 80028c0:	000b      	movs	r3, r1
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08004f28 	.word	0x08004f28

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028d8:	2313      	movs	r3, #19
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e0:	2312      	movs	r3, #18
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2240      	movs	r2, #64	@ 0x40
 80028ee:	4013      	ands	r3, r2
 80028f0:	d100      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80028f2:	e079      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f4:	2011      	movs	r0, #17
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fc:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	055b      	lsls	r3, r3, #21
 8002904:	4013      	ands	r3, r2
 8002906:	d110      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b60      	ldr	r3, [pc, #384]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800290a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800290c:	4b5f      	ldr	r3, [pc, #380]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800290e:	2180      	movs	r1, #128	@ 0x80
 8002910:	0549      	lsls	r1, r1, #21
 8002912:	430a      	orrs	r2, r1
 8002914:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002916:	4b5d      	ldr	r3, [pc, #372]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	055b      	lsls	r3, r3, #21
 800291e:	4013      	ands	r3, r2
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002924:	183b      	adds	r3, r7, r0
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800292a:	4b58      	ldr	r3, [pc, #352]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800292c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800292e:	23c0      	movs	r3, #192	@ 0xc0
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4013      	ands	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d019      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	429a      	cmp	r2, r3
 8002944:	d014      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002946:	4b51      	ldr	r3, [pc, #324]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	4a51      	ldr	r2, [pc, #324]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800294c:	4013      	ands	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002950:	4b4e      	ldr	r3, [pc, #312]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002952:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002954:	4b4d      	ldr	r3, [pc, #308]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002956:	2180      	movs	r1, #128	@ 0x80
 8002958:	0249      	lsls	r1, r1, #9
 800295a:	430a      	orrs	r2, r1
 800295c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800295e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002962:	4b4a      	ldr	r3, [pc, #296]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002964:	494b      	ldr	r1, [pc, #300]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002966:	400a      	ands	r2, r1
 8002968:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800296a:	4b48      	ldr	r3, [pc, #288]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2201      	movs	r2, #1
 8002974:	4013      	ands	r3, r2
 8002976:	d016      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fc30 	bl	80011dc <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002980:	e00c      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe fc2b 	bl	80011dc <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a42      	ldr	r2, [pc, #264]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d904      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002992:	2313      	movs	r3, #19
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	2203      	movs	r2, #3
 8002998:	701a      	strb	r2, [r3, #0]
          break;
 800299a:	e004      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800299c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	2202      	movs	r2, #2
 80029a2:	4013      	ands	r3, r2
 80029a4:	d0ed      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80029a6:	2313      	movs	r3, #19
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b0:	4b36      	ldr	r3, [pc, #216]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	4a36      	ldr	r2, [pc, #216]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	4b33      	ldr	r3, [pc, #204]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029c0:	430a      	orrs	r2, r1
 80029c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029c4:	e005      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c6:	2312      	movs	r3, #18
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2213      	movs	r2, #19
 80029cc:	18ba      	adds	r2, r7, r2
 80029ce:	7812      	ldrb	r2, [r2, #0]
 80029d0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d2:	2311      	movs	r3, #17
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029e0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029e2:	492e      	ldr	r1, [pc, #184]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4013      	ands	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f2:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	2203      	movs	r2, #3
 80029f8:	4393      	bics	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a10:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	0899      	lsrs	r1, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2204      	movs	r2, #4
 8002a46:	4013      	ands	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2280      	movs	r2, #128	@ 0x80
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002a68:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	22e0      	movs	r2, #224	@ 0xe0
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002a7c:	2312      	movs	r3, #18
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b006      	add	sp, #24
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	fffffcff 	.word	0xfffffcff
 8002a94:	fffeffff 	.word	0xfffeffff
 8002a98:	00001388 	.word	0x00001388
 8002a9c:	efffffff 	.word	0xefffffff
 8002aa0:	ffffcfff 	.word	0xffffcfff
 8002aa4:	ffff3fff 	.word	0xffff3fff

08002aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0a8      	b.n	8002c0c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	2382      	movs	r3, #130	@ 0x82
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d009      	beq.n	8002ae2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61da      	str	r2, [r3, #28]
 8002ad4:	e005      	b.n	8002ae2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	225d      	movs	r2, #93	@ 0x5d
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d107      	bne.n	8002b04 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	225c      	movs	r2, #92	@ 0x5c
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7fe f91a 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	225d      	movs	r2, #93	@ 0x5d
 8002b08:	2102      	movs	r1, #2
 8002b0a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2140      	movs	r1, #64	@ 0x40
 8002b18:	438a      	bics	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	23e0      	movs	r3, #224	@ 0xe0
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d902      	bls.n	8002b2e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e002      	b.n	8002b34 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	015b      	lsls	r3, r3, #5
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	23f0      	movs	r3, #240	@ 0xf0
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d008      	beq.n	8002b52 <HAL_SPI_Init+0xaa>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	23e0      	movs	r3, #224	@ 0xe0
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	2382      	movs	r3, #130	@ 0x82
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	2384      	movs	r3, #132	@ 0x84
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	400b      	ands	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	400b      	ands	r3, r1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2101      	movs	r1, #1
 8002b78:	400b      	ands	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6999      	ldr	r1, [r3, #24]
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	400b      	ands	r3, r1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2138      	movs	r1, #56	@ 0x38
 8002b8e:	400b      	ands	r3, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	2180      	movs	r1, #128	@ 0x80
 8002b98:	400b      	ands	r3, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	0011      	movs	r1, r2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc8:	2108      	movs	r1, #8
 8002bca:	400b      	ands	r3, r1
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68d9      	ldr	r1, [r3, #12]
 8002bd2:	23f0      	movs	r3, #240	@ 0xf0
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	0011      	movs	r1, r2
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	015b      	lsls	r3, r3, #5
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4907      	ldr	r1, [pc, #28]	@ (8002c14 <HAL_SPI_Init+0x16c>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	225d      	movs	r2, #93	@ 0x5d
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b004      	add	sp, #16
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fffff7ff 	.word	0xfffff7ff

08002c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e04a      	b.n	8002cc0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223d      	movs	r2, #61	@ 0x3d
 8002c2e:	5c9b      	ldrb	r3, [r3, r2]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	223c      	movs	r2, #60	@ 0x3c
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fe f8ff 	bl	8000e44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223d      	movs	r2, #61	@ 0x3d
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f000 f935 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2248      	movs	r2, #72	@ 0x48
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	223e      	movs	r2, #62	@ 0x3e
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	223f      	movs	r2, #63	@ 0x3f
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2240      	movs	r2, #64	@ 0x40
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2241      	movs	r2, #65	@ 0x41
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2242      	movs	r2, #66	@ 0x42
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2243      	movs	r2, #67	@ 0x43
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2244      	movs	r2, #68	@ 0x44
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2245      	movs	r2, #69	@ 0x45
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2246      	movs	r2, #70	@ 0x46
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2247      	movs	r2, #71	@ 0x47
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	223d      	movs	r2, #61	@ 0x3d
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	2317      	movs	r3, #23
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	223c      	movs	r2, #60	@ 0x3c
 8002ce0:	5c9b      	ldrb	r3, [r3, r2]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x22>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0e5      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	223c      	movs	r2, #60	@ 0x3c
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b14      	cmp	r3, #20
 8002cf6:	d900      	bls.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x32>
 8002cf8:	e0d1      	b.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	4b70      	ldr	r3, [pc, #448]	@ (8002ec0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d00:	18d3      	adds	r3, r2, r3
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	0011      	movs	r1, r2
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 f954 	bl	8002fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2108      	movs	r1, #8
 8002d20:	430a      	orrs	r2, r1
 8002d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2104      	movs	r1, #4
 8002d30:	438a      	bics	r2, r1
 8002d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6999      	ldr	r1, [r3, #24]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	619a      	str	r2, [r3, #24]
      break;
 8002d46:	e0af      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f9b3 	bl	80030bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2180      	movs	r1, #128	@ 0x80
 8002d62:	0109      	lsls	r1, r1, #4
 8002d64:	430a      	orrs	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4954      	ldr	r1, [pc, #336]	@ (8002ec4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6999      	ldr	r1, [r3, #24]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	619a      	str	r2, [r3, #24]
      break;
 8002d8c:	e08c      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 fa0e 	bl	80031b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2108      	movs	r1, #8
 8002da8:	430a      	orrs	r2, r1
 8002daa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2104      	movs	r1, #4
 8002db8:	438a      	bics	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69d9      	ldr	r1, [r3, #28]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	61da      	str	r2, [r3, #28]
      break;
 8002dce:	e06b      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 fa6f 	bl	80032bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	0109      	lsls	r1, r1, #4
 8002dec:	430a      	orrs	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4932      	ldr	r1, [pc, #200]	@ (8002ec4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69d9      	ldr	r1, [r3, #28]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	021a      	lsls	r2, r3, #8
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
      break;
 8002e14:	e048      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 fab0 	bl	8003384 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2108      	movs	r1, #8
 8002e30:	430a      	orrs	r2, r1
 8002e32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2104      	movs	r1, #4
 8002e40:	438a      	bics	r2, r1
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e56:	e027      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 fae9 	bl	8003438 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2180      	movs	r1, #128	@ 0x80
 8002e72:	0109      	lsls	r1, r1, #4
 8002e74:	430a      	orrs	r2, r1
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4910      	ldr	r1, [pc, #64]	@ (8002ec4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	021a      	lsls	r2, r3, #8
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e9c:	e004      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002e9e:	2317      	movs	r3, #23
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
      break;
 8002ea6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	223c      	movs	r2, #60	@ 0x3c
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

  return status;
 8002eb0:	2317      	movs	r3, #23
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	781b      	ldrb	r3, [r3, #0]
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b006      	add	sp, #24
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	08004f48 	.word	0x08004f48
 8002ec4:	fffffbff 	.word	0xfffffbff

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a32      	ldr	r2, [pc, #200]	@ (8002fa4 <TIM_Base_SetConfig+0xdc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0x20>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a31      	ldr	r2, [pc, #196]	@ (8002fa8 <TIM_Base_SetConfig+0xe0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2270      	movs	r2, #112	@ 0x70
 8002eec:	4393      	bics	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a29      	ldr	r2, [pc, #164]	@ (8002fa4 <TIM_Base_SetConfig+0xdc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_Base_SetConfig+0x5a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a28      	ldr	r2, [pc, #160]	@ (8002fa8 <TIM_Base_SetConfig+0xe0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x5a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a27      	ldr	r2, [pc, #156]	@ (8002fac <TIM_Base_SetConfig+0xe4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x5a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a26      	ldr	r2, [pc, #152]	@ (8002fb0 <TIM_Base_SetConfig+0xe8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x5a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <TIM_Base_SetConfig+0xec>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <TIM_Base_SetConfig+0xf0>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	4393      	bics	r3, r2
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <TIM_Base_SetConfig+0xdc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_Base_SetConfig+0xaa>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a12      	ldr	r2, [pc, #72]	@ (8002fb0 <TIM_Base_SetConfig+0xe8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_Base_SetConfig+0xaa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a11      	ldr	r2, [pc, #68]	@ (8002fb4 <TIM_Base_SetConfig+0xec>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d103      	bne.n	8002f7a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2201      	movs	r2, #1
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2201      	movs	r2, #1
 8002f92:	4393      	bics	r3, r2
 8002f94:	001a      	movs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]
  }
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40002000 	.word	0x40002000
 8002fb0:	40014400 	.word	0x40014400
 8002fb4:	40014800 	.word	0x40014800
 8002fb8:	fffffcff 	.word	0xfffffcff

08002fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80030a4 <TIM_OC1_SetConfig+0xe8>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4393      	bics	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2202      	movs	r2, #2
 8003004:	4393      	bics	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a24      	ldr	r2, [pc, #144]	@ (80030a8 <TIM_OC1_SetConfig+0xec>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <TIM_OC1_SetConfig+0x6e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a23      	ldr	r2, [pc, #140]	@ (80030ac <TIM_OC1_SetConfig+0xf0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_OC1_SetConfig+0x6e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a22      	ldr	r2, [pc, #136]	@ (80030b0 <TIM_OC1_SetConfig+0xf4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10c      	bne.n	8003044 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2208      	movs	r2, #8
 800302e:	4393      	bics	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2204      	movs	r2, #4
 8003040:	4393      	bics	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a18      	ldr	r2, [pc, #96]	@ (80030a8 <TIM_OC1_SetConfig+0xec>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <TIM_OC1_SetConfig+0xa0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a17      	ldr	r2, [pc, #92]	@ (80030ac <TIM_OC1_SetConfig+0xf0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_OC1_SetConfig+0xa0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a16      	ldr	r2, [pc, #88]	@ (80030b0 <TIM_OC1_SetConfig+0xf4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d111      	bne.n	8003080 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4a15      	ldr	r2, [pc, #84]	@ (80030b4 <TIM_OC1_SetConfig+0xf8>)
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4a14      	ldr	r2, [pc, #80]	@ (80030b8 <TIM_OC1_SetConfig+0xfc>)
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	b006      	add	sp, #24
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	fffeff8f 	.word	0xfffeff8f
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800
 80030b4:	fffffeff 	.word	0xfffffeff
 80030b8:	fffffdff 	.word	0xfffffdff

080030bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	2210      	movs	r2, #16
 80030d2:	4393      	bics	r3, r2
 80030d4:	001a      	movs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <TIM_OC2_SetConfig+0xe0>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a2b      	ldr	r2, [pc, #172]	@ (80031a0 <TIM_OC2_SetConfig+0xe4>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2220      	movs	r2, #32
 8003106:	4393      	bics	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <TIM_OC2_SetConfig+0xe8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10d      	bne.n	800313a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	4393      	bics	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2240      	movs	r2, #64	@ 0x40
 8003136:	4393      	bics	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <TIM_OC2_SetConfig+0xe8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_OC2_SetConfig+0x96>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <TIM_OC2_SetConfig+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_OC2_SetConfig+0x96>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a17      	ldr	r2, [pc, #92]	@ (80031ac <TIM_OC2_SetConfig+0xf0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d113      	bne.n	800317a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4a16      	ldr	r2, [pc, #88]	@ (80031b0 <TIM_OC2_SetConfig+0xf4>)
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <TIM_OC2_SetConfig+0xf8>)
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	feff8fff 	.word	0xfeff8fff
 80031a0:	fffffcff 	.word	0xfffffcff
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800
 80031b0:	fffffbff 	.word	0xfffffbff
 80031b4:	fffff7ff 	.word	0xfffff7ff

080031b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a31      	ldr	r2, [pc, #196]	@ (8003294 <TIM_OC3_SetConfig+0xdc>)
 80031ce:	401a      	ands	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <TIM_OC3_SetConfig+0xe0>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2203      	movs	r2, #3
 80031ec:	4393      	bics	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	4a27      	ldr	r2, [pc, #156]	@ (800329c <TIM_OC3_SetConfig+0xe4>)
 80031fe:	4013      	ands	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <TIM_OC3_SetConfig+0xe8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10d      	bne.n	8003232 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <TIM_OC3_SetConfig+0xec>)
 800321a:	4013      	ands	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4a1e      	ldr	r2, [pc, #120]	@ (80032a8 <TIM_OC3_SetConfig+0xf0>)
 800322e:	4013      	ands	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1a      	ldr	r2, [pc, #104]	@ (80032a0 <TIM_OC3_SetConfig+0xe8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d007      	beq.n	800324a <TIM_OC3_SetConfig+0x92>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <TIM_OC3_SetConfig+0xf4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d003      	beq.n	800324a <TIM_OC3_SetConfig+0x92>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1a      	ldr	r2, [pc, #104]	@ (80032b0 <TIM_OC3_SetConfig+0xf8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d113      	bne.n	8003272 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4a19      	ldr	r2, [pc, #100]	@ (80032b4 <TIM_OC3_SetConfig+0xfc>)
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4a18      	ldr	r2, [pc, #96]	@ (80032b8 <TIM_OC3_SetConfig+0x100>)
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	621a      	str	r2, [r3, #32]
}
 800328c:	46c0      	nop			@ (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b006      	add	sp, #24
 8003292:	bd80      	pop	{r7, pc}
 8003294:	fffffeff 	.word	0xfffffeff
 8003298:	fffeff8f 	.word	0xfffeff8f
 800329c:	fffffdff 	.word	0xfffffdff
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	fffff7ff 	.word	0xfffff7ff
 80032a8:	fffffbff 	.word	0xfffffbff
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800
 80032b4:	ffffefff 	.word	0xffffefff
 80032b8:	ffffdfff 	.word	0xffffdfff

080032bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <TIM_OC4_SetConfig+0xa8>)
 80032d2:	401a      	ands	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a20      	ldr	r2, [pc, #128]	@ (8003368 <TIM_OC4_SetConfig+0xac>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a1f      	ldr	r2, [pc, #124]	@ (800336c <TIM_OC4_SetConfig+0xb0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <TIM_OC4_SetConfig+0xb4>)
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	031b      	lsls	r3, r3, #12
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <TIM_OC4_SetConfig+0xb8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d007      	beq.n	800332c <TIM_OC4_SetConfig+0x70>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <TIM_OC4_SetConfig+0xbc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_OC4_SetConfig+0x70>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a15      	ldr	r2, [pc, #84]	@ (800337c <TIM_OC4_SetConfig+0xc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d109      	bne.n	8003340 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4a14      	ldr	r2, [pc, #80]	@ (8003380 <TIM_OC4_SetConfig+0xc4>)
 8003330:	4013      	ands	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	ffffefff 	.word	0xffffefff
 8003368:	feff8fff 	.word	0xfeff8fff
 800336c:	fffffcff 	.word	0xfffffcff
 8003370:	ffffdfff 	.word	0xffffdfff
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800
 8003380:	ffffbfff 	.word	0xffffbfff

08003384 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a21      	ldr	r2, [pc, #132]	@ (8003420 <TIM_OC5_SetConfig+0x9c>)
 800339a:	401a      	ands	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003424 <TIM_OC5_SetConfig+0xa0>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4a19      	ldr	r2, [pc, #100]	@ (8003428 <TIM_OC5_SetConfig+0xa4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a15      	ldr	r2, [pc, #84]	@ (800342c <TIM_OC5_SetConfig+0xa8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_OC5_SetConfig+0x66>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a14      	ldr	r2, [pc, #80]	@ (8003430 <TIM_OC5_SetConfig+0xac>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_OC5_SetConfig+0x66>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <TIM_OC5_SetConfig+0xb0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d109      	bne.n	80033fe <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003420 <TIM_OC5_SetConfig+0x9c>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	46c0      	nop			@ (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b006      	add	sp, #24
 800341e:	bd80      	pop	{r7, pc}
 8003420:	fffeffff 	.word	0xfffeffff
 8003424:	fffeff8f 	.word	0xfffeff8f
 8003428:	fffdffff 	.word	0xfffdffff
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800

08003438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a22      	ldr	r2, [pc, #136]	@ (80034d8 <TIM_OC6_SetConfig+0xa0>)
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a1e      	ldr	r2, [pc, #120]	@ (80034dc <TIM_OC6_SetConfig+0xa4>)
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <TIM_OC6_SetConfig+0xa8>)
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	051b      	lsls	r3, r3, #20
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <TIM_OC6_SetConfig+0xac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_OC6_SetConfig+0x68>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <TIM_OC6_SetConfig+0xb0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_OC6_SetConfig+0x68>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <TIM_OC6_SetConfig+0xb4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d109      	bne.n	80034b4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4a13      	ldr	r2, [pc, #76]	@ (80034f0 <TIM_OC6_SetConfig+0xb8>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	029b      	lsls	r3, r3, #10
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	621a      	str	r2, [r3, #32]
}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b006      	add	sp, #24
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	ffefffff 	.word	0xffefffff
 80034dc:	feff8fff 	.word	0xfeff8fff
 80034e0:	ffdfffff 	.word	0xffdfffff
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	fffbffff 	.word	0xfffbffff

080034f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223c      	movs	r2, #60	@ 0x3c
 8003502:	5c9b      	ldrb	r3, [r3, r2]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003508:	2302      	movs	r3, #2
 800350a:	e04a      	b.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	223c      	movs	r2, #60	@ 0x3c
 8003510:	2101      	movs	r1, #1
 8003512:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	223d      	movs	r2, #61	@ 0x3d
 8003518:	2102      	movs	r1, #2
 800351a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d108      	bne.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a1d      	ldr	r2, [pc, #116]	@ (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2270      	movs	r2, #112	@ 0x70
 800354c:	4393      	bics	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a11      	ldr	r2, [pc, #68]	@ (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10c      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2280      	movs	r2, #128	@ 0x80
 800357a:	4393      	bics	r3, r2
 800357c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	223d      	movs	r2, #61	@ 0x3d
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223c      	movs	r2, #60	@ 0x3c
 800359c:	2100      	movs	r1, #0
 800359e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b004      	add	sp, #16
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	ff0fffff 	.word	0xff0fffff
 80035b4:	40000400 	.word	0x40000400

080035b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223c      	movs	r2, #60	@ 0x3c
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e06f      	b.n	80036b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	223c      	movs	r2, #60	@ 0x3c
 80035d8:	2101      	movs	r1, #1
 80035da:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	22ff      	movs	r2, #255	@ 0xff
 80035e0:	4393      	bics	r3, r2
 80035e2:	001a      	movs	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a33      	ldr	r2, [pc, #204]	@ (80036bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80035f0:	401a      	ands	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a30      	ldr	r2, [pc, #192]	@ (80036c0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80035fe:	401a      	ands	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a2e      	ldr	r2, [pc, #184]	@ (80036c4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800360c:	401a      	ands	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a2b      	ldr	r2, [pc, #172]	@ (80036c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800361a:	401a      	ands	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a29      	ldr	r2, [pc, #164]	@ (80036cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003628:	401a      	ands	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a26      	ldr	r2, [pc, #152]	@ (80036d0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003636:	401a      	ands	r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a24      	ldr	r2, [pc, #144]	@ (80036d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003644:	401a      	ands	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a21      	ldr	r2, [pc, #132]	@ (80036d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003654:	401a      	ands	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d11c      	bne.n	80036a2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a1d      	ldr	r2, [pc, #116]	@ (80036e0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800366c:	401a      	ands	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	051b      	lsls	r3, r3, #20
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a1a      	ldr	r2, [pc, #104]	@ (80036e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800367c:	401a      	ands	r2, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800368a:	401a      	ands	r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a15      	ldr	r2, [pc, #84]	@ (80036ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003698:	401a      	ands	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	223c      	movs	r2, #60	@ 0x3c
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b004      	add	sp, #16
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	fffffcff 	.word	0xfffffcff
 80036c0:	fffffbff 	.word	0xfffffbff
 80036c4:	fffff7ff 	.word	0xfffff7ff
 80036c8:	ffffefff 	.word	0xffffefff
 80036cc:	ffffdfff 	.word	0xffffdfff
 80036d0:	ffffbfff 	.word	0xffffbfff
 80036d4:	fff0ffff 	.word	0xfff0ffff
 80036d8:	efffffff 	.word	0xefffffff
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	ff0fffff 	.word	0xff0fffff
 80036e4:	feffffff 	.word	0xfeffffff
 80036e8:	fdffffff 	.word	0xfdffffff
 80036ec:	dfffffff 	.word	0xdfffffff

080036f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	1dbb      	adds	r3, r7, #6
 80036fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	228c      	movs	r2, #140	@ 0x8c
 8003702:	589b      	ldr	r3, [r3, r2]
 8003704:	2b20      	cmp	r3, #32
 8003706:	d145      	bne.n	8003794 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_UART_Receive_IT+0x26>
 800370e:	1dbb      	adds	r3, r7, #6
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e03d      	b.n	8003796 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	2380      	movs	r3, #128	@ 0x80
 8003720:	015b      	lsls	r3, r3, #5
 8003722:	429a      	cmp	r2, r3
 8003724:	d109      	bne.n	800373a <HAL_UART_Receive_IT+0x4a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2201      	movs	r2, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d001      	beq.n	800373a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e02d      	b.n	8003796 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	2380      	movs	r3, #128	@ 0x80
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	4013      	ands	r3, r2
 800374c:	d019      	beq.n	8003782 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800374e:	f3ef 8310 	mrs	r3, PRIMASK
 8003752:	613b      	str	r3, [r7, #16]
  return(result);
 8003754:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2180      	movs	r1, #128	@ 0x80
 8003770:	04c9      	lsls	r1, r1, #19
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003782:	1dbb      	adds	r3, r7, #6
 8003784:	881a      	ldrh	r2, [r3, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	0018      	movs	r0, r3
 800378c:	f000 fb66 	bl	8003e5c <UART_Start_Receive_IT>
 8003790:	0003      	movs	r3, r0
 8003792:	e000      	b.n	8003796 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b008      	add	sp, #32
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	000a      	movs	r2, r1
 80037b8:	1cbb      	adds	r3, r7, #2
 80037ba:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037cc:	231e      	movs	r3, #30
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4aab      	ldr	r2, [pc, #684]	@ (8003aa0 <UART_SetConfig+0x2dc>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4aa6      	ldr	r2, [pc, #664]	@ (8003aa4 <UART_SetConfig+0x2e0>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a9d      	ldr	r2, [pc, #628]	@ (8003aa8 <UART_SetConfig+0x2e4>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	220f      	movs	r2, #15
 8003848:	4393      	bics	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a93      	ldr	r2, [pc, #588]	@ (8003aac <UART_SetConfig+0x2e8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d127      	bne.n	80038b2 <UART_SetConfig+0xee>
 8003862:	4b93      	ldr	r3, [pc, #588]	@ (8003ab0 <UART_SetConfig+0x2ec>)
 8003864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003866:	2203      	movs	r2, #3
 8003868:	4013      	ands	r3, r2
 800386a:	2b03      	cmp	r3, #3
 800386c:	d017      	beq.n	800389e <UART_SetConfig+0xda>
 800386e:	d81b      	bhi.n	80038a8 <UART_SetConfig+0xe4>
 8003870:	2b02      	cmp	r3, #2
 8003872:	d00a      	beq.n	800388a <UART_SetConfig+0xc6>
 8003874:	d818      	bhi.n	80038a8 <UART_SetConfig+0xe4>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <UART_SetConfig+0xbc>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d00a      	beq.n	8003894 <UART_SetConfig+0xd0>
 800387e:	e013      	b.n	80038a8 <UART_SetConfig+0xe4>
 8003880:	231f      	movs	r3, #31
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e021      	b.n	80038ce <UART_SetConfig+0x10a>
 800388a:	231f      	movs	r3, #31
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2202      	movs	r2, #2
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e01c      	b.n	80038ce <UART_SetConfig+0x10a>
 8003894:	231f      	movs	r3, #31
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2204      	movs	r2, #4
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e017      	b.n	80038ce <UART_SetConfig+0x10a>
 800389e:	231f      	movs	r3, #31
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2208      	movs	r2, #8
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e012      	b.n	80038ce <UART_SetConfig+0x10a>
 80038a8:	231f      	movs	r3, #31
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2210      	movs	r2, #16
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e00d      	b.n	80038ce <UART_SetConfig+0x10a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab4 <UART_SetConfig+0x2f0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d104      	bne.n	80038c6 <UART_SetConfig+0x102>
 80038bc:	231f      	movs	r3, #31
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	e003      	b.n	80038ce <UART_SetConfig+0x10a>
 80038c6:	231f      	movs	r3, #31
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2210      	movs	r2, #16
 80038cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d000      	beq.n	80038dc <UART_SetConfig+0x118>
 80038da:	e06f      	b.n	80039bc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80038dc:	231f      	movs	r3, #31
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d01f      	beq.n	8003926 <UART_SetConfig+0x162>
 80038e6:	dc22      	bgt.n	800392e <UART_SetConfig+0x16a>
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d017      	beq.n	800391c <UART_SetConfig+0x158>
 80038ec:	dc1f      	bgt.n	800392e <UART_SetConfig+0x16a>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <UART_SetConfig+0x134>
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d005      	beq.n	8003902 <UART_SetConfig+0x13e>
 80038f6:	e01a      	b.n	800392e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe ffd2 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 80038fc:	0003      	movs	r3, r0
 80038fe:	61bb      	str	r3, [r7, #24]
        break;
 8003900:	e01c      	b.n	800393c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003902:	4b6b      	ldr	r3, [pc, #428]	@ (8003ab0 <UART_SetConfig+0x2ec>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2207      	movs	r2, #7
 800390a:	4013      	ands	r3, r2
 800390c:	3301      	adds	r3, #1
 800390e:	0019      	movs	r1, r3
 8003910:	4869      	ldr	r0, [pc, #420]	@ (8003ab8 <UART_SetConfig+0x2f4>)
 8003912:	f7fc fbf9 	bl	8000108 <__udivsi3>
 8003916:	0003      	movs	r3, r0
 8003918:	61bb      	str	r3, [r7, #24]
        break;
 800391a:	e00f      	b.n	800393c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391c:	f7fe ff52 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8003920:	0003      	movs	r3, r0
 8003922:	61bb      	str	r3, [r7, #24]
        break;
 8003924:	e00a      	b.n	800393c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	61bb      	str	r3, [r7, #24]
        break;
 800392c:	e006      	b.n	800393c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003932:	231e      	movs	r3, #30
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
        break;
 800393a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d100      	bne.n	8003944 <UART_SetConfig+0x180>
 8003942:	e097      	b.n	8003a74 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003948:	4b5c      	ldr	r3, [pc, #368]	@ (8003abc <UART_SetConfig+0x2f8>)
 800394a:	0052      	lsls	r2, r2, #1
 800394c:	5ad3      	ldrh	r3, [r2, r3]
 800394e:	0019      	movs	r1, r3
 8003950:	69b8      	ldr	r0, [r7, #24]
 8003952:	f7fc fbd9 	bl	8000108 <__udivsi3>
 8003956:	0003      	movs	r3, r0
 8003958:	005a      	lsls	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	18d2      	adds	r2, r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0019      	movs	r1, r3
 8003968:	0010      	movs	r0, r2
 800396a:	f7fc fbcd 	bl	8000108 <__udivsi3>
 800396e:	0003      	movs	r3, r0
 8003970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d91c      	bls.n	80039b2 <UART_SetConfig+0x1ee>
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	429a      	cmp	r2, r3
 8003980:	d217      	bcs.n	80039b2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	b29a      	uxth	r2, r3
 8003986:	200e      	movs	r0, #14
 8003988:	183b      	adds	r3, r7, r0
 800398a:	210f      	movs	r1, #15
 800398c:	438a      	bics	r2, r1
 800398e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	b29b      	uxth	r3, r3
 8003996:	2207      	movs	r2, #7
 8003998:	4013      	ands	r3, r2
 800399a:	b299      	uxth	r1, r3
 800399c:	183b      	adds	r3, r7, r0
 800399e:	183a      	adds	r2, r7, r0
 80039a0:	8812      	ldrh	r2, [r2, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	183a      	adds	r2, r7, r0
 80039ac:	8812      	ldrh	r2, [r2, #0]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	e060      	b.n	8003a74 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80039b2:	231e      	movs	r3, #30
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e05b      	b.n	8003a74 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039bc:	231f      	movs	r3, #31
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d01f      	beq.n	8003a06 <UART_SetConfig+0x242>
 80039c6:	dc22      	bgt.n	8003a0e <UART_SetConfig+0x24a>
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d017      	beq.n	80039fc <UART_SetConfig+0x238>
 80039cc:	dc1f      	bgt.n	8003a0e <UART_SetConfig+0x24a>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <UART_SetConfig+0x214>
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d005      	beq.n	80039e2 <UART_SetConfig+0x21e>
 80039d6:	e01a      	b.n	8003a0e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d8:	f7fe ff62 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 80039dc:	0003      	movs	r3, r0
 80039de:	61bb      	str	r3, [r7, #24]
        break;
 80039e0:	e01c      	b.n	8003a1c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80039e2:	4b33      	ldr	r3, [pc, #204]	@ (8003ab0 <UART_SetConfig+0x2ec>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2207      	movs	r2, #7
 80039ea:	4013      	ands	r3, r2
 80039ec:	3301      	adds	r3, #1
 80039ee:	0019      	movs	r1, r3
 80039f0:	4831      	ldr	r0, [pc, #196]	@ (8003ab8 <UART_SetConfig+0x2f4>)
 80039f2:	f7fc fb89 	bl	8000108 <__udivsi3>
 80039f6:	0003      	movs	r3, r0
 80039f8:	61bb      	str	r3, [r7, #24]
        break;
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fc:	f7fe fee2 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8003a00:	0003      	movs	r3, r0
 8003a02:	61bb      	str	r3, [r7, #24]
        break;
 8003a04:	e00a      	b.n	8003a1c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	61bb      	str	r3, [r7, #24]
        break;
 8003a0c:	e006      	b.n	8003a1c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a12:	231e      	movs	r3, #30
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
        break;
 8003a1a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d028      	beq.n	8003a74 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a26:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <UART_SetConfig+0x2f8>)
 8003a28:	0052      	lsls	r2, r2, #1
 8003a2a:	5ad3      	ldrh	r3, [r2, r3]
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	69b8      	ldr	r0, [r7, #24]
 8003a30:	f7fc fb6a 	bl	8000108 <__udivsi3>
 8003a34:	0003      	movs	r3, r0
 8003a36:	001a      	movs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	18d2      	adds	r2, r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0019      	movs	r1, r3
 8003a46:	0010      	movs	r0, r2
 8003a48:	f7fc fb5e 	bl	8000108 <__udivsi3>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0f      	cmp	r3, #15
 8003a54:	d90a      	bls.n	8003a6c <UART_SetConfig+0x2a8>
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	025b      	lsls	r3, r3, #9
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d205      	bcs.n	8003a6c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e003      	b.n	8003a74 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6c:	231e      	movs	r3, #30
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	226a      	movs	r2, #106	@ 0x6a
 8003a78:	2101      	movs	r1, #1
 8003a7a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2268      	movs	r2, #104	@ 0x68
 8003a80:	2101      	movs	r1, #1
 8003a82:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a90:	231e      	movs	r3, #30
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	781b      	ldrb	r3, [r3, #0]
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b008      	add	sp, #32
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	cfff69f3 	.word	0xcfff69f3
 8003aa4:	ffffcfff 	.word	0xffffcfff
 8003aa8:	11fff4ff 	.word	0x11fff4ff
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40004400 	.word	0x40004400
 8003ab8:	02dc6c00 	.word	0x02dc6c00
 8003abc:	08004f9c 	.word	0x08004f9c

08003ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	2208      	movs	r2, #8
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8003c04 <UART_AdvFeatureConfig+0x144>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	0019      	movs	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aee:	2201      	movs	r2, #1
 8003af0:	4013      	ands	r3, r2
 8003af2:	d00b      	beq.n	8003b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a43      	ldr	r2, [pc, #268]	@ (8003c08 <UART_AdvFeatureConfig+0x148>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	2202      	movs	r2, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c0c <UART_AdvFeatureConfig+0x14c>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	2204      	movs	r2, #4
 8003b34:	4013      	ands	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a34      	ldr	r2, [pc, #208]	@ (8003c10 <UART_AdvFeatureConfig+0x150>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	2210      	movs	r2, #16
 8003b56:	4013      	ands	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	@ (8003c14 <UART_AdvFeatureConfig+0x154>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	2220      	movs	r2, #32
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4a25      	ldr	r2, [pc, #148]	@ (8003c18 <UART_AdvFeatureConfig+0x158>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	2240      	movs	r2, #64	@ 0x40
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d01d      	beq.n	8003bda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c1c <UART_AdvFeatureConfig+0x15c>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	0019      	movs	r1, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bba:	2380      	movs	r3, #128	@ 0x80
 8003bbc:	035b      	lsls	r3, r3, #13
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10b      	bne.n	8003bda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	@ (8003c20 <UART_AdvFeatureConfig+0x160>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	2280      	movs	r2, #128	@ 0x80
 8003be0:	4013      	ands	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a0e      	ldr	r2, [pc, #56]	@ (8003c24 <UART_AdvFeatureConfig+0x164>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	ffff7fff 	.word	0xffff7fff
 8003c08:	fffdffff 	.word	0xfffdffff
 8003c0c:	fffeffff 	.word	0xfffeffff
 8003c10:	fffbffff 	.word	0xfffbffff
 8003c14:	ffffefff 	.word	0xffffefff
 8003c18:	ffffdfff 	.word	0xffffdfff
 8003c1c:	ffefffff 	.word	0xffefffff
 8003c20:	ff9fffff 	.word	0xff9fffff
 8003c24:	fff7ffff 	.word	0xfff7ffff

08003c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b092      	sub	sp, #72	@ 0x48
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2290      	movs	r2, #144	@ 0x90
 8003c34:	2100      	movs	r1, #0
 8003c36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c38:	f7fd fad0 	bl	80011dc <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2208      	movs	r2, #8
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d12d      	bne.n	8003caa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c50:	2280      	movs	r2, #128	@ 0x80
 8003c52:	0391      	lsls	r1, r2, #14
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4a47      	ldr	r2, [pc, #284]	@ (8003d74 <UART_CheckIdleState+0x14c>)
 8003c58:	9200      	str	r2, [sp, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f000 f88e 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d022      	beq.n	8003caa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c64:	f3ef 8310 	mrs	r3, PRIMASK
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c6e:	2301      	movs	r3, #1
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c74:	f383 8810 	msr	PRIMASK, r3
}
 8003c78:	46c0      	nop			@ (mov r8, r8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2180      	movs	r1, #128	@ 0x80
 8003c86:	438a      	bics	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2288      	movs	r2, #136	@ 0x88
 8003c9a:	2120      	movs	r1, #32
 8003c9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2284      	movs	r2, #132	@ 0x84
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e060      	b.n	8003d6c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d146      	bne.n	8003d46 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cba:	2280      	movs	r2, #128	@ 0x80
 8003cbc:	03d1      	lsls	r1, r2, #15
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d74 <UART_CheckIdleState+0x14c>)
 8003cc2:	9200      	str	r2, [sp, #0]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f000 f859 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d03b      	beq.n	8003d46 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cce:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f383 8810 	msr	PRIMASK, r3
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4922      	ldr	r1, [pc, #136]	@ (8003d78 <UART_CheckIdleState+0x150>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f383 8810 	msr	PRIMASK, r3
}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d00:	f3ef 8310 	mrs	r3, PRIMASK
 8003d04:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d06:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			@ (mov r8, r8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	438a      	bics	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f383 8810 	msr	PRIMASK, r3
}
 8003d30:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	228c      	movs	r2, #140	@ 0x8c
 8003d36:	2120      	movs	r1, #32
 8003d38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2284      	movs	r2, #132	@ 0x84
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e012      	b.n	8003d6c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2288      	movs	r2, #136	@ 0x88
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	228c      	movs	r2, #140	@ 0x8c
 8003d52:	2120      	movs	r1, #32
 8003d54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2284      	movs	r2, #132	@ 0x84
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b010      	add	sp, #64	@ 0x40
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	01ffffff 	.word	0x01ffffff
 8003d78:	fffffedf 	.word	0xfffffedf

08003d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	e051      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d04e      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7fd fa22 	bl	80011dc <HAL_GetTick>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e051      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2204      	movs	r2, #4
 8003db6:	4013      	ands	r3, r2
 8003db8:	d03b      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b80      	cmp	r3, #128	@ 0x80
 8003dbe:	d038      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b40      	cmp	r3, #64	@ 0x40
 8003dc4:	d035      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d111      	bne.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 f960 	bl	80040a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2290      	movs	r2, #144	@ 0x90
 8003de8:	2108      	movs	r1, #8
 8003dea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2284      	movs	r2, #132	@ 0x84
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e02c      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	401a      	ands	r2, r3
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d112      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 f943 	bl	80040a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2290      	movs	r2, #144	@ 0x90
 8003e22:	2120      	movs	r1, #32
 8003e24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2284      	movs	r2, #132	@ 0x84
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e00f      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	425a      	negs	r2, r3
 8003e42:	4153      	adcs	r3, r2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	001a      	movs	r2, r3
 8003e48:	1dfb      	adds	r3, r7, #7
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d09e      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b098      	sub	sp, #96	@ 0x60
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	1dbb      	adds	r3, r7, #6
 8003e68:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1dba      	adds	r2, r7, #6
 8003e74:	215c      	movs	r1, #92	@ 0x5c
 8003e76:	8812      	ldrh	r2, [r2, #0]
 8003e78:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1dba      	adds	r2, r7, #6
 8003e7e:	215e      	movs	r1, #94	@ 0x5e
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	015b      	lsls	r3, r3, #5
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d10d      	bne.n	8003eb2 <UART_Start_Receive_IT+0x56>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <UART_Start_Receive_IT+0x4c>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2260      	movs	r2, #96	@ 0x60
 8003ea2:	497b      	ldr	r1, [pc, #492]	@ (8004090 <UART_Start_Receive_IT+0x234>)
 8003ea4:	5299      	strh	r1, [r3, r2]
 8003ea6:	e02e      	b.n	8003f06 <UART_Start_Receive_IT+0xaa>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2260      	movs	r2, #96	@ 0x60
 8003eac:	21ff      	movs	r1, #255	@ 0xff
 8003eae:	5299      	strh	r1, [r3, r2]
 8003eb0:	e029      	b.n	8003f06 <UART_Start_Receive_IT+0xaa>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <UART_Start_Receive_IT+0x7a>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <UART_Start_Receive_IT+0x70>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2260      	movs	r2, #96	@ 0x60
 8003ec6:	21ff      	movs	r1, #255	@ 0xff
 8003ec8:	5299      	strh	r1, [r3, r2]
 8003eca:	e01c      	b.n	8003f06 <UART_Start_Receive_IT+0xaa>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2260      	movs	r2, #96	@ 0x60
 8003ed0:	217f      	movs	r1, #127	@ 0x7f
 8003ed2:	5299      	strh	r1, [r3, r2]
 8003ed4:	e017      	b.n	8003f06 <UART_Start_Receive_IT+0xaa>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	055b      	lsls	r3, r3, #21
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10d      	bne.n	8003efe <UART_Start_Receive_IT+0xa2>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <UART_Start_Receive_IT+0x98>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2260      	movs	r2, #96	@ 0x60
 8003eee:	217f      	movs	r1, #127	@ 0x7f
 8003ef0:	5299      	strh	r1, [r3, r2]
 8003ef2:	e008      	b.n	8003f06 <UART_Start_Receive_IT+0xaa>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2260      	movs	r2, #96	@ 0x60
 8003ef8:	213f      	movs	r1, #63	@ 0x3f
 8003efa:	5299      	strh	r1, [r3, r2]
 8003efc:	e003      	b.n	8003f06 <UART_Start_Receive_IT+0xaa>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2260      	movs	r2, #96	@ 0x60
 8003f02:	2100      	movs	r1, #0
 8003f04:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2290      	movs	r2, #144	@ 0x90
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	228c      	movs	r2, #140	@ 0x8c
 8003f12:	2122      	movs	r1, #34	@ 0x22
 8003f14:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f16:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1a:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f20:	2301      	movs	r3, #1
 8003f22:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2101      	movs	r1, #1
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f4c:	2380      	movs	r3, #128	@ 0x80
 8003f4e:	059b      	lsls	r3, r3, #22
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d150      	bne.n	8003ff6 <UART_Start_Receive_IT+0x19a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2268      	movs	r2, #104	@ 0x68
 8003f58:	5a9b      	ldrh	r3, [r3, r2]
 8003f5a:	1dba      	adds	r2, r7, #6
 8003f5c:	8812      	ldrh	r2, [r2, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d349      	bcc.n	8003ff6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	015b      	lsls	r3, r3, #5
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d107      	bne.n	8003f7e <UART_Start_Receive_IT+0x122>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a46      	ldr	r2, [pc, #280]	@ (8004094 <UART_Start_Receive_IT+0x238>)
 8003f7a:	675a      	str	r2, [r3, #116]	@ 0x74
 8003f7c:	e002      	b.n	8003f84 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a45      	ldr	r2, [pc, #276]	@ (8004098 <UART_Start_Receive_IT+0x23c>)
 8003f82:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d019      	beq.n	8003fc0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f96:	2301      	movs	r3, #1
 8003f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	f383 8810 	msr	PRIMASK, r3
}
 8003fa0:	46c0      	nop			@ (mov r8, r8)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2180      	movs	r1, #128	@ 0x80
 8003fae:	0049      	lsls	r1, r1, #1
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fca:	2301      	movs	r3, #1
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2180      	movs	r1, #128	@ 0x80
 8003fe2:	0549      	lsls	r1, r1, #21
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	f383 8810 	msr	PRIMASK, r3
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	e047      	b.n	8004086 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	015b      	lsls	r3, r3, #5
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d107      	bne.n	8004012 <UART_Start_Receive_IT+0x1b6>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a23      	ldr	r2, [pc, #140]	@ (800409c <UART_Start_Receive_IT+0x240>)
 800400e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004010:	e002      	b.n	8004018 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a22      	ldr	r2, [pc, #136]	@ (80040a0 <UART_Start_Receive_IT+0x244>)
 8004016:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d019      	beq.n	8004054 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004020:	f3ef 8310 	mrs	r3, PRIMASK
 8004024:	61fb      	str	r3, [r7, #28]
  return(result);
 8004026:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402a:	2301      	movs	r3, #1
 800402c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2190      	movs	r1, #144	@ 0x90
 8004042:	0049      	lsls	r1, r1, #1
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	f383 8810 	msr	PRIMASK, r3
}
 8004052:	e018      	b.n	8004086 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004054:	f3ef 8310 	mrs	r3, PRIMASK
 8004058:	613b      	str	r3, [r7, #16]
  return(result);
 800405a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800405c:	653b      	str	r3, [r7, #80]	@ 0x50
 800405e:	2301      	movs	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f383 8810 	msr	PRIMASK, r3
}
 8004068:	46c0      	nop			@ (mov r8, r8)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2120      	movs	r1, #32
 8004076:	430a      	orrs	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800407c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f383 8810 	msr	PRIMASK, r3
}
 8004084:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b018      	add	sp, #96	@ 0x60
 800408e:	bd80      	pop	{r7, pc}
 8004090:	000001ff 	.word	0x000001ff
 8004094:	08004815 	.word	0x08004815
 8004098:	080044e1 	.word	0x080044e1
 800409c:	08004329 	.word	0x08004329
 80040a0:	08004171 	.word	0x08004171

080040a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08e      	sub	sp, #56	@ 0x38
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040ac:	f3ef 8310 	mrs	r3, PRIMASK
 80040b0:	617b      	str	r3, [r7, #20]
  return(result);
 80040b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f383 8810 	msr	PRIMASK, r3
}
 80040c0:	46c0      	nop			@ (mov r8, r8)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4926      	ldr	r1, [pc, #152]	@ (8004168 <UART_EndRxTransfer+0xc4>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f383 8810 	msr	PRIMASK, r3
}
 80040dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040de:	f3ef 8310 	mrs	r3, PRIMASK
 80040e2:	623b      	str	r3, [r7, #32]
  return(result);
 80040e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e8:	2301      	movs	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	f383 8810 	msr	PRIMASK, r3
}
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	491b      	ldr	r1, [pc, #108]	@ (800416c <UART_EndRxTransfer+0xc8>)
 8004100:	400a      	ands	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	f383 8810 	msr	PRIMASK, r3
}
 800410e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d118      	bne.n	800414a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004118:	f3ef 8310 	mrs	r3, PRIMASK
 800411c:	60bb      	str	r3, [r7, #8]
  return(result);
 800411e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004122:	2301      	movs	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			@ (mov r8, r8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2110      	movs	r1, #16
 800413a:	438a      	bics	r2, r1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	228c      	movs	r2, #140	@ 0x8c
 800414e:	2120      	movs	r1, #32
 8004150:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b00e      	add	sp, #56	@ 0x38
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	fffffedf 	.word	0xfffffedf
 800416c:	effffffe 	.word	0xeffffffe

08004170 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b094      	sub	sp, #80	@ 0x50
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004178:	204e      	movs	r0, #78	@ 0x4e
 800417a:	183b      	adds	r3, r7, r0
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	2160      	movs	r1, #96	@ 0x60
 8004180:	5a52      	ldrh	r2, [r2, r1]
 8004182:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	228c      	movs	r2, #140	@ 0x8c
 8004188:	589b      	ldr	r3, [r3, r2]
 800418a:	2b22      	cmp	r3, #34	@ 0x22
 800418c:	d000      	beq.n	8004190 <UART_RxISR_8BIT+0x20>
 800418e:	e0ba      	b.n	8004306 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004196:	214c      	movs	r1, #76	@ 0x4c
 8004198:	187b      	adds	r3, r7, r1
 800419a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800419c:	187b      	adds	r3, r7, r1
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	183b      	adds	r3, r7, r0
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b2d9      	uxtb	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ac:	400a      	ands	r2, r1
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	225e      	movs	r2, #94	@ 0x5e
 80041c0:	5a9b      	ldrh	r3, [r3, r2]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b299      	uxth	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	225e      	movs	r2, #94	@ 0x5e
 80041cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	225e      	movs	r2, #94	@ 0x5e
 80041d2:	5a9b      	ldrh	r3, [r3, r2]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d000      	beq.n	80041dc <UART_RxISR_8BIT+0x6c>
 80041da:	e09c      	b.n	8004316 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041dc:	f3ef 8310 	mrs	r3, PRIMASK
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041e6:	2301      	movs	r3, #1
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4948      	ldr	r1, [pc, #288]	@ (8004320 <UART_RxISR_8BIT+0x1b0>)
 80041fe:	400a      	ands	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800420e:	f3ef 8310 	mrs	r3, PRIMASK
 8004212:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	647b      	str	r3, [r7, #68]	@ 0x44
 8004218:	2301      	movs	r3, #1
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	f383 8810 	msr	PRIMASK, r3
}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2101      	movs	r1, #1
 8004230:	438a      	bics	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004236:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	228c      	movs	r2, #140	@ 0x8c
 8004244:	2120      	movs	r1, #32
 8004246:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	4013      	ands	r3, r2
 8004260:	d018      	beq.n	8004294 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004262:	f3ef 8310 	mrs	r3, PRIMASK
 8004266:	61bb      	str	r3, [r7, #24]
  return(result);
 8004268:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800426a:	643b      	str	r3, [r7, #64]	@ 0x40
 800426c:	2301      	movs	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f383 8810 	msr	PRIMASK, r3
}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4928      	ldr	r1, [pc, #160]	@ (8004324 <UART_RxISR_8BIT+0x1b4>)
 8004284:	400a      	ands	r2, r1
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f383 8810 	msr	PRIMASK, r3
}
 8004292:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d12f      	bne.n	80042fc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042a2:	f3ef 8310 	mrs	r3, PRIMASK
 80042a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80042a8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ac:	2301      	movs	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2110      	movs	r1, #16
 80042c4:	438a      	bics	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2210      	movs	r2, #16
 80042dc:	4013      	ands	r3, r2
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d103      	bne.n	80042ea <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2210      	movs	r2, #16
 80042e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	225c      	movs	r2, #92	@ 0x5c
 80042ee:	5a9a      	ldrh	r2, [r3, r2]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0011      	movs	r1, r2
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7ff fa5a 	bl	80037ae <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042fa:	e00c      	b.n	8004316 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0018      	movs	r0, r3
 8004300:	f7fc fbe4 	bl	8000acc <HAL_UART_RxCpltCallback>
}
 8004304:	e007      	b.n	8004316 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2108      	movs	r1, #8
 8004312:	430a      	orrs	r2, r1
 8004314:	619a      	str	r2, [r3, #24]
}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b014      	add	sp, #80	@ 0x50
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	fffffedf 	.word	0xfffffedf
 8004324:	fbffffff 	.word	0xfbffffff

08004328 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b094      	sub	sp, #80	@ 0x50
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004330:	204e      	movs	r0, #78	@ 0x4e
 8004332:	183b      	adds	r3, r7, r0
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	2160      	movs	r1, #96	@ 0x60
 8004338:	5a52      	ldrh	r2, [r2, r1]
 800433a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	228c      	movs	r2, #140	@ 0x8c
 8004340:	589b      	ldr	r3, [r3, r2]
 8004342:	2b22      	cmp	r3, #34	@ 0x22
 8004344:	d000      	beq.n	8004348 <UART_RxISR_16BIT+0x20>
 8004346:	e0ba      	b.n	80044be <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800434e:	214c      	movs	r1, #76	@ 0x4c
 8004350:	187b      	adds	r3, r7, r1
 8004352:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800435a:	187b      	adds	r3, r7, r1
 800435c:	183a      	adds	r2, r7, r0
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	4013      	ands	r3, r2
 8004364:	b29a      	uxth	r2, r3
 8004366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004368:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	225e      	movs	r2, #94	@ 0x5e
 8004378:	5a9b      	ldrh	r3, [r3, r2]
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b299      	uxth	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	225e      	movs	r2, #94	@ 0x5e
 8004384:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	225e      	movs	r2, #94	@ 0x5e
 800438a:	5a9b      	ldrh	r3, [r3, r2]
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d000      	beq.n	8004394 <UART_RxISR_16BIT+0x6c>
 8004392:	e09c      	b.n	80044ce <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	623b      	str	r3, [r7, #32]
  return(result);
 800439a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800439c:	647b      	str	r3, [r7, #68]	@ 0x44
 800439e:	2301      	movs	r3, #1
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4948      	ldr	r1, [pc, #288]	@ (80044d8 <UART_RxISR_16BIT+0x1b0>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d0:	2301      	movs	r3, #1
 80043d2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2101      	movs	r1, #1
 80043e8:	438a      	bics	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f2:	f383 8810 	msr	PRIMASK, r3
}
 80043f6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	228c      	movs	r2, #140	@ 0x8c
 80043fc:	2120      	movs	r1, #32
 80043fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	2380      	movs	r3, #128	@ 0x80
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	4013      	ands	r3, r2
 8004418:	d018      	beq.n	800444c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800441a:	f3ef 8310 	mrs	r3, PRIMASK
 800441e:	617b      	str	r3, [r7, #20]
  return(result);
 8004420:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004424:	2301      	movs	r3, #1
 8004426:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4928      	ldr	r1, [pc, #160]	@ (80044dc <UART_RxISR_16BIT+0x1b4>)
 800443c:	400a      	ands	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004442:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f383 8810 	msr	PRIMASK, r3
}
 800444a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d12f      	bne.n	80044b4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800445a:	f3ef 8310 	mrs	r3, PRIMASK
 800445e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004460:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004462:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004464:	2301      	movs	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f383 8810 	msr	PRIMASK, r3
}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2110      	movs	r1, #16
 800447c:	438a      	bics	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f383 8810 	msr	PRIMASK, r3
}
 800448a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	2210      	movs	r2, #16
 8004494:	4013      	ands	r3, r2
 8004496:	2b10      	cmp	r3, #16
 8004498:	d103      	bne.n	80044a2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2210      	movs	r2, #16
 80044a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	225c      	movs	r2, #92	@ 0x5c
 80044a6:	5a9a      	ldrh	r2, [r3, r2]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0011      	movs	r1, r2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7ff f97e 	bl	80037ae <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044b2:	e00c      	b.n	80044ce <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7fc fb08 	bl	8000acc <HAL_UART_RxCpltCallback>
}
 80044bc:	e007      	b.n	80044ce <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699a      	ldr	r2, [r3, #24]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2108      	movs	r1, #8
 80044ca:	430a      	orrs	r2, r1
 80044cc:	619a      	str	r2, [r3, #24]
}
 80044ce:	46c0      	nop			@ (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b014      	add	sp, #80	@ 0x50
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	fffffedf 	.word	0xfffffedf
 80044dc:	fbffffff 	.word	0xfbffffff

080044e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b0a0      	sub	sp, #128	@ 0x80
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80044e8:	237a      	movs	r3, #122	@ 0x7a
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	2160      	movs	r1, #96	@ 0x60
 80044f0:	5a52      	ldrh	r2, [r2, r1]
 80044f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	228c      	movs	r2, #140	@ 0x8c
 8004510:	589b      	ldr	r3, [r3, r2]
 8004512:	2b22      	cmp	r3, #34	@ 0x22
 8004514:	d000      	beq.n	8004518 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004516:	e166      	b.n	80047e6 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004518:	236e      	movs	r3, #110	@ 0x6e
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	2168      	movs	r1, #104	@ 0x68
 8004520:	5a52      	ldrh	r2, [r2, r1]
 8004522:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004524:	e10d      	b.n	8004742 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800452c:	216c      	movs	r1, #108	@ 0x6c
 800452e:	187b      	adds	r3, r7, r1
 8004530:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004532:	187b      	adds	r3, r7, r1
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	237a      	movs	r3, #122	@ 0x7a
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b2d9      	uxtb	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004544:	400a      	ands	r2, r1
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	225e      	movs	r2, #94	@ 0x5e
 8004558:	5a9b      	ldrh	r3, [r3, r2]
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b299      	uxth	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	225e      	movs	r2, #94	@ 0x5e
 8004564:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800456e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004570:	2207      	movs	r2, #7
 8004572:	4013      	ands	r3, r2
 8004574:	d049      	beq.n	800460a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004578:	2201      	movs	r2, #1
 800457a:	4013      	ands	r3, r2
 800457c:	d010      	beq.n	80045a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800457e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004580:	2380      	movs	r3, #128	@ 0x80
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4013      	ands	r3, r2
 8004586:	d00b      	beq.n	80045a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2201      	movs	r2, #1
 800458e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2290      	movs	r2, #144	@ 0x90
 8004594:	589b      	ldr	r3, [r3, r2]
 8004596:	2201      	movs	r2, #1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2190      	movs	r1, #144	@ 0x90
 800459e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045a2:	2202      	movs	r2, #2
 80045a4:	4013      	ands	r3, r2
 80045a6:	d00f      	beq.n	80045c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80045a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045aa:	2201      	movs	r2, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2202      	movs	r2, #2
 80045b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2290      	movs	r2, #144	@ 0x90
 80045bc:	589b      	ldr	r3, [r3, r2]
 80045be:	2204      	movs	r2, #4
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2190      	movs	r1, #144	@ 0x90
 80045c6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ca:	2204      	movs	r2, #4
 80045cc:	4013      	ands	r3, r2
 80045ce:	d00f      	beq.n	80045f0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80045d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045d2:	2201      	movs	r2, #1
 80045d4:	4013      	ands	r3, r2
 80045d6:	d00b      	beq.n	80045f0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2204      	movs	r2, #4
 80045de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2290      	movs	r2, #144	@ 0x90
 80045e4:	589b      	ldr	r3, [r3, r2]
 80045e6:	2202      	movs	r2, #2
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2190      	movs	r1, #144	@ 0x90
 80045ee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2290      	movs	r2, #144	@ 0x90
 80045f4:	589b      	ldr	r3, [r3, r2]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff f8ce 	bl	800379e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2290      	movs	r2, #144	@ 0x90
 8004606:	2100      	movs	r1, #0
 8004608:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	225e      	movs	r2, #94	@ 0x5e
 800460e:	5a9b      	ldrh	r3, [r3, r2]
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d000      	beq.n	8004618 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004616:	e094      	b.n	8004742 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004618:	f3ef 8310 	mrs	r3, PRIMASK
 800461c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004622:	2301      	movs	r3, #1
 8004624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4971      	ldr	r1, [pc, #452]	@ (8004800 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800463a:	400a      	ands	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004640:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800464a:	f3ef 8310 	mrs	r3, PRIMASK
 800464e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004652:	667b      	str	r3, [r7, #100]	@ 0x64
 8004654:	2301      	movs	r3, #1
 8004656:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465a:	f383 8810 	msr	PRIMASK, r3
}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4966      	ldr	r1, [pc, #408]	@ (8004804 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800466c:	400a      	ands	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004676:	f383 8810 	msr	PRIMASK, r3
}
 800467a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	228c      	movs	r2, #140	@ 0x8c
 8004680:	2120      	movs	r1, #32
 8004682:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	4013      	ands	r3, r2
 800469c:	d018      	beq.n	80046d0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800469e:	f3ef 8310 	mrs	r3, PRIMASK
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80046a8:	2301      	movs	r3, #1
 80046aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4952      	ldr	r1, [pc, #328]	@ (8004808 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d12f      	bne.n	8004738 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	623b      	str	r3, [r7, #32]
  return(result);
 80046e4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046e8:	2301      	movs	r3, #1
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	f383 8810 	msr	PRIMASK, r3
}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2110      	movs	r1, #16
 8004700:	438a      	bics	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	2210      	movs	r2, #16
 8004718:	4013      	ands	r3, r2
 800471a:	2b10      	cmp	r3, #16
 800471c:	d103      	bne.n	8004726 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2210      	movs	r2, #16
 8004724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	225c      	movs	r2, #92	@ 0x5c
 800472a:	5a9a      	ldrh	r2, [r3, r2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0011      	movs	r1, r2
 8004730:	0018      	movs	r0, r3
 8004732:	f7ff f83c 	bl	80037ae <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004736:	e00e      	b.n	8004756 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	0018      	movs	r0, r3
 800473c:	f7fc f9c6 	bl	8000acc <HAL_UART_RxCpltCallback>
        break;
 8004740:	e009      	b.n	8004756 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004742:	236e      	movs	r3, #110	@ 0x6e
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <UART_RxISR_8BIT_FIFOEN+0x276>
 800474c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800474e:	2220      	movs	r2, #32
 8004750:	4013      	ands	r3, r2
 8004752:	d000      	beq.n	8004756 <UART_RxISR_8BIT_FIFOEN+0x276>
 8004754:	e6e7      	b.n	8004526 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004756:	205a      	movs	r0, #90	@ 0x5a
 8004758:	183b      	adds	r3, r7, r0
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	215e      	movs	r1, #94	@ 0x5e
 800475e:	5a52      	ldrh	r2, [r2, r1]
 8004760:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004762:	0001      	movs	r1, r0
 8004764:	187b      	adds	r3, r7, r1
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d044      	beq.n	80047f6 <UART_RxISR_8BIT_FIFOEN+0x316>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2268      	movs	r2, #104	@ 0x68
 8004770:	5a9b      	ldrh	r3, [r3, r2]
 8004772:	187a      	adds	r2, r7, r1
 8004774:	8812      	ldrh	r2, [r2, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d23d      	bcs.n	80047f6 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800477a:	f3ef 8310 	mrs	r3, PRIMASK
 800477e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004780:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004782:	657b      	str	r3, [r7, #84]	@ 0x54
 8004784:	2301      	movs	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f383 8810 	msr	PRIMASK, r3
}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	491c      	ldr	r1, [pc, #112]	@ (800480c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800479c:	400a      	ands	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f383 8810 	msr	PRIMASK, r3
}
 80047aa:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80047b0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047b2:	f3ef 8310 	mrs	r3, PRIMASK
 80047b6:	617b      	str	r3, [r7, #20]
  return(result);
 80047b8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80047bc:	2301      	movs	r3, #1
 80047be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f383 8810 	msr	PRIMASK, r3
}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2120      	movs	r1, #32
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f383 8810 	msr	PRIMASK, r3
}
 80047e2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047e4:	e007      	b.n	80047f6 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2108      	movs	r1, #8
 80047f2:	430a      	orrs	r2, r1
 80047f4:	619a      	str	r2, [r3, #24]
}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b020      	add	sp, #128	@ 0x80
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	fffffeff 	.word	0xfffffeff
 8004804:	effffffe 	.word	0xeffffffe
 8004808:	fbffffff 	.word	0xfbffffff
 800480c:	efffffff 	.word	0xefffffff
 8004810:	08004171 	.word	0x08004171

08004814 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b0a2      	sub	sp, #136	@ 0x88
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800481c:	2382      	movs	r3, #130	@ 0x82
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	2160      	movs	r1, #96	@ 0x60
 8004824:	5a52      	ldrh	r2, [r2, r1]
 8004826:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2284      	movs	r2, #132	@ 0x84
 8004830:	18ba      	adds	r2, r7, r2
 8004832:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	228c      	movs	r2, #140	@ 0x8c
 8004848:	589b      	ldr	r3, [r3, r2]
 800484a:	2b22      	cmp	r3, #34	@ 0x22
 800484c:	d000      	beq.n	8004850 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800484e:	e170      	b.n	8004b32 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004850:	2376      	movs	r3, #118	@ 0x76
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	2168      	movs	r1, #104	@ 0x68
 8004858:	5a52      	ldrh	r2, [r2, r1]
 800485a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800485c:	e115      	b.n	8004a8a <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004864:	2174      	movs	r1, #116	@ 0x74
 8004866:	187b      	adds	r3, r7, r1
 8004868:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8004870:	187b      	adds	r3, r7, r1
 8004872:	2282      	movs	r2, #130	@ 0x82
 8004874:	18ba      	adds	r2, r7, r2
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	8812      	ldrh	r2, [r2, #0]
 800487a:	4013      	ands	r3, r2
 800487c:	b29a      	uxth	r2, r3
 800487e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004880:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	1c9a      	adds	r2, r3, #2
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	225e      	movs	r2, #94	@ 0x5e
 8004890:	5a9b      	ldrh	r3, [r3, r2]
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b299      	uxth	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	225e      	movs	r2, #94	@ 0x5e
 800489c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	2184      	movs	r1, #132	@ 0x84
 80048a6:	187a      	adds	r2, r7, r1
 80048a8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80048aa:	187b      	adds	r3, r7, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	d04e      	beq.n	8004952 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	4013      	ands	r3, r2
 80048bc:	d010      	beq.n	80048e0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80048be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4013      	ands	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2290      	movs	r2, #144	@ 0x90
 80048d4:	589b      	ldr	r3, [r3, r2]
 80048d6:	2201      	movs	r2, #1
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2190      	movs	r1, #144	@ 0x90
 80048de:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048e0:	2384      	movs	r3, #132	@ 0x84
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2202      	movs	r2, #2
 80048e8:	4013      	ands	r3, r2
 80048ea:	d00f      	beq.n	800490c <UART_RxISR_16BIT_FIFOEN+0xf8>
 80048ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	d00b      	beq.n	800490c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2202      	movs	r2, #2
 80048fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2290      	movs	r2, #144	@ 0x90
 8004900:	589b      	ldr	r3, [r3, r2]
 8004902:	2204      	movs	r2, #4
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2190      	movs	r1, #144	@ 0x90
 800490a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800490c:	2384      	movs	r3, #132	@ 0x84
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2204      	movs	r2, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d00f      	beq.n	8004938 <UART_RxISR_16BIT_FIFOEN+0x124>
 8004918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800491a:	2201      	movs	r2, #1
 800491c:	4013      	ands	r3, r2
 800491e:	d00b      	beq.n	8004938 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2204      	movs	r2, #4
 8004926:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2290      	movs	r2, #144	@ 0x90
 800492c:	589b      	ldr	r3, [r3, r2]
 800492e:	2202      	movs	r2, #2
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2190      	movs	r1, #144	@ 0x90
 8004936:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2290      	movs	r2, #144	@ 0x90
 800493c:	589b      	ldr	r3, [r3, r2]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f7fe ff2a 	bl	800379e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2290      	movs	r2, #144	@ 0x90
 800494e:	2100      	movs	r1, #0
 8004950:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	225e      	movs	r2, #94	@ 0x5e
 8004956:	5a9b      	ldrh	r3, [r3, r2]
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d000      	beq.n	8004960 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800495e:	e094      	b.n	8004a8a <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004960:	f3ef 8310 	mrs	r3, PRIMASK
 8004964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004968:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800496a:	2301      	movs	r3, #1
 800496c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004970:	f383 8810 	msr	PRIMASK, r3
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4972      	ldr	r1, [pc, #456]	@ (8004b4c <UART_RxISR_16BIT_FIFOEN+0x338>)
 8004982:	400a      	ands	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004988:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004992:	f3ef 8310 	mrs	r3, PRIMASK
 8004996:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800499a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800499c:	2301      	movs	r3, #1
 800499e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a2:	f383 8810 	msr	PRIMASK, r3
}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4967      	ldr	r1, [pc, #412]	@ (8004b50 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 80049b4:	400a      	ands	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049ba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	228c      	movs	r2, #140	@ 0x8c
 80049c8:	2120      	movs	r1, #32
 80049ca:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	4013      	ands	r3, r2
 80049e4:	d018      	beq.n	8004a18 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049e6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80049f0:	2301      	movs	r3, #1
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f6:	f383 8810 	msr	PRIMASK, r3
}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4953      	ldr	r1, [pc, #332]	@ (8004b54 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d12f      	bne.n	8004a80 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a26:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a30:	2301      	movs	r3, #1
 8004a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a36:	f383 8810 	msr	PRIMASK, r3
}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2110      	movs	r1, #16
 8004a48:	438a      	bics	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d103      	bne.n	8004a6e <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	225c      	movs	r2, #92	@ 0x5c
 8004a72:	5a9a      	ldrh	r2, [r3, r2]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0011      	movs	r1, r2
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fe fe98 	bl	80037ae <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004a7e:	e010      	b.n	8004aa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7fc f822 	bl	8000acc <HAL_UART_RxCpltCallback>
        break;
 8004a88:	e00b      	b.n	8004aa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a8a:	2376      	movs	r3, #118	@ 0x76
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d006      	beq.n	8004aa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8004a94:	2384      	movs	r3, #132	@ 0x84
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d000      	beq.n	8004aa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8004aa0:	e6dd      	b.n	800485e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004aa2:	205e      	movs	r0, #94	@ 0x5e
 8004aa4:	183b      	adds	r3, r7, r0
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	215e      	movs	r1, #94	@ 0x5e
 8004aaa:	5a52      	ldrh	r2, [r2, r1]
 8004aac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004aae:	0001      	movs	r1, r0
 8004ab0:	187b      	adds	r3, r7, r1
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d044      	beq.n	8004b42 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2268      	movs	r2, #104	@ 0x68
 8004abc:	5a9b      	ldrh	r3, [r3, r2]
 8004abe:	187a      	adds	r2, r7, r1
 8004ac0:	8812      	ldrh	r2, [r2, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d23d      	bcs.n	8004b42 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8004acc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ace:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f383 8810 	msr	PRIMASK, r3
}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	491c      	ldr	r1, [pc, #112]	@ (8004b58 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <UART_RxISR_16BIT_FIFOEN+0x348>)
 8004afc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004afe:	f3ef 8310 	mrs	r3, PRIMASK
 8004b02:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b04:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b08:	2301      	movs	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f383 8810 	msr	PRIMASK, r3
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2120      	movs	r1, #32
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	f383 8810 	msr	PRIMASK, r3
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b30:	e007      	b.n	8004b42 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2108      	movs	r1, #8
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	619a      	str	r2, [r3, #24]
}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b022      	add	sp, #136	@ 0x88
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	fffffeff 	.word	0xfffffeff
 8004b50:	effffffe 	.word	0xeffffffe
 8004b54:	fbffffff 	.word	0xfbffffff
 8004b58:	efffffff 	.word	0xefffffff
 8004b5c:	08004329 	.word	0x08004329

08004b60 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e05d      	b.n	8004c34 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2288      	movs	r2, #136	@ 0x88
 8004b7c:	589b      	ldr	r3, [r3, r2]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d107      	bne.n	8004b92 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2284      	movs	r2, #132	@ 0x84
 8004b86:	2100      	movs	r1, #0
 8004b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fc f9b7 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2288      	movs	r2, #136	@ 0x88
 8004b96:	2124      	movs	r1, #36	@ 0x24
 8004b98:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	438a      	bics	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7fe ff83 	bl	8003ac0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7fe fe01 	bl	80037c4 <UART_SetConfig>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e033      	b.n	8004c34 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2180      	movs	r1, #128	@ 0x80
 8004bd8:	01c9      	lsls	r1, r1, #7
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a15      	ldr	r2, [pc, #84]	@ (8004c3c <HAL_RS485Ex_Init+0xdc>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	055b      	lsls	r3, r3, #21
 8004bf8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c40 <HAL_RS485Ex_Init+0xe0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fe fffb 	bl	8003c28 <UART_CheckIdleState>
 8004c32:	0003      	movs	r3, r0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b006      	add	sp, #24
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	ffff7fff 	.word	0xffff7fff
 8004c40:	fc00ffff 	.word	0xfc00ffff

08004c44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2284      	movs	r2, #132	@ 0x84
 8004c50:	5c9b      	ldrb	r3, [r3, r2]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_UARTEx_DisableFifoMode+0x16>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e027      	b.n	8004caa <HAL_UARTEx_DisableFifoMode+0x66>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2284      	movs	r2, #132	@ 0x84
 8004c5e:	2101      	movs	r1, #1
 8004c60:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2288      	movs	r2, #136	@ 0x88
 8004c66:	2124      	movs	r1, #36	@ 0x24
 8004c68:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	438a      	bics	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2288      	movs	r2, #136	@ 0x88
 8004c9c:	2120      	movs	r1, #32
 8004c9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2284      	movs	r2, #132	@ 0x84
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	0018      	movs	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b004      	add	sp, #16
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	dfffffff 	.word	0xdfffffff

08004cb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2284      	movs	r2, #132	@ 0x84
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e02e      	b.n	8004d2e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2284      	movs	r2, #132	@ 0x84
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2288      	movs	r2, #136	@ 0x88
 8004cdc:	2124      	movs	r1, #36	@ 0x24
 8004cde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	438a      	bics	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	08d9      	lsrs	r1, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f000 f854 	bl	8004dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2288      	movs	r2, #136	@ 0x88
 8004d20:	2120      	movs	r1, #32
 8004d22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2284      	movs	r2, #132	@ 0x84
 8004d28:	2100      	movs	r1, #0
 8004d2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2284      	movs	r2, #132	@ 0x84
 8004d46:	5c9b      	ldrb	r3, [r3, r2]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e02f      	b.n	8004db0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2284      	movs	r2, #132	@ 0x84
 8004d54:	2101      	movs	r1, #1
 8004d56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2288      	movs	r2, #136	@ 0x88
 8004d5c:	2124      	movs	r1, #36	@ 0x24
 8004d5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2101      	movs	r1, #1
 8004d74:	438a      	bics	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004db8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	0019      	movs	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 f813 	bl	8004dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2288      	movs	r2, #136	@ 0x88
 8004da2:	2120      	movs	r1, #32
 8004da4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2284      	movs	r2, #132	@ 0x84
 8004daa:	2100      	movs	r1, #0
 8004dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b004      	add	sp, #16
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	f1ffffff 	.word	0xf1ffffff

08004dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d108      	bne.n	8004dde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	226a      	movs	r2, #106	@ 0x6a
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2268      	movs	r2, #104	@ 0x68
 8004dd8:	2101      	movs	r1, #1
 8004dda:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ddc:	e043      	b.n	8004e66 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dde:	260f      	movs	r6, #15
 8004de0:	19bb      	adds	r3, r7, r6
 8004de2:	2208      	movs	r2, #8
 8004de4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004de6:	200e      	movs	r0, #14
 8004de8:	183b      	adds	r3, r7, r0
 8004dea:	2208      	movs	r2, #8
 8004dec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	0e5b      	lsrs	r3, r3, #25
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	240d      	movs	r4, #13
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	2107      	movs	r1, #7
 8004dfe:	400a      	ands	r2, r1
 8004e00:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	0f5b      	lsrs	r3, r3, #29
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	250c      	movs	r5, #12
 8004e0e:	197b      	adds	r3, r7, r5
 8004e10:	2107      	movs	r1, #7
 8004e12:	400a      	ands	r2, r1
 8004e14:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e16:	183b      	adds	r3, r7, r0
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	197a      	adds	r2, r7, r5
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	4914      	ldr	r1, [pc, #80]	@ (8004e70 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e20:	5c8a      	ldrb	r2, [r1, r2]
 8004e22:	435a      	muls	r2, r3
 8004e24:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e26:	197b      	adds	r3, r7, r5
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	@ (8004e74 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e2e:	0019      	movs	r1, r3
 8004e30:	f7fb f9f4 	bl	800021c <__divsi3>
 8004e34:	0003      	movs	r3, r0
 8004e36:	b299      	uxth	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	226a      	movs	r2, #106	@ 0x6a
 8004e3c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e3e:	19bb      	adds	r3, r7, r6
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	193a      	adds	r2, r7, r4
 8004e44:	7812      	ldrb	r2, [r2, #0]
 8004e46:	490a      	ldr	r1, [pc, #40]	@ (8004e70 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e48:	5c8a      	ldrb	r2, [r1, r2]
 8004e4a:	435a      	muls	r2, r3
 8004e4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e4e:	193b      	adds	r3, r7, r4
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	4a08      	ldr	r2, [pc, #32]	@ (8004e74 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e56:	0019      	movs	r1, r3
 8004e58:	f7fb f9e0 	bl	800021c <__divsi3>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	b299      	uxth	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2268      	movs	r2, #104	@ 0x68
 8004e64:	5299      	strh	r1, [r3, r2]
}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b005      	add	sp, #20
 8004e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	08004fb4 	.word	0x08004fb4
 8004e74:	08004fbc 	.word	0x08004fbc

08004e78 <memset>:
 8004e78:	0003      	movs	r3, r0
 8004e7a:	1882      	adds	r2, r0, r2
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <memset+0xa>
 8004e80:	4770      	bx	lr
 8004e82:	7019      	strb	r1, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	e7f9      	b.n	8004e7c <memset+0x4>

08004e88 <__libc_init_array>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec0 <__libc_init_array+0x38>)
 8004e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ec4 <__libc_init_array+0x3c>)
 8004e90:	1b64      	subs	r4, r4, r5
 8004e92:	10a4      	asrs	r4, r4, #2
 8004e94:	42a6      	cmp	r6, r4
 8004e96:	d109      	bne.n	8004eac <__libc_init_array+0x24>
 8004e98:	2600      	movs	r6, #0
 8004e9a:	f000 f819 	bl	8004ed0 <_init>
 8004e9e:	4c0a      	ldr	r4, [pc, #40]	@ (8004ec8 <__libc_init_array+0x40>)
 8004ea0:	4d0a      	ldr	r5, [pc, #40]	@ (8004ecc <__libc_init_array+0x44>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	42a6      	cmp	r6, r4
 8004ea8:	d105      	bne.n	8004eb6 <__libc_init_array+0x2e>
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	00b3      	lsls	r3, r6, #2
 8004eae:	58eb      	ldr	r3, [r5, r3]
 8004eb0:	4798      	blx	r3
 8004eb2:	3601      	adds	r6, #1
 8004eb4:	e7ee      	b.n	8004e94 <__libc_init_array+0xc>
 8004eb6:	00b3      	lsls	r3, r6, #2
 8004eb8:	58eb      	ldr	r3, [r5, r3]
 8004eba:	4798      	blx	r3
 8004ebc:	3601      	adds	r6, #1
 8004ebe:	e7f2      	b.n	8004ea6 <__libc_init_array+0x1e>
 8004ec0:	08004fc4 	.word	0x08004fc4
 8004ec4:	08004fc4 	.word	0x08004fc4
 8004ec8:	08004fc8 	.word	0x08004fc8
 8004ecc:	08004fc4 	.word	0x08004fc4

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
