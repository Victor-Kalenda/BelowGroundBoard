
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae3c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800aefc  0800aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b38c  0800b38c  0000d0d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b38c  0800b38c  0000d0d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b38c  0800b38c  0000d0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b38c  0800b38c  0000c38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b390  0800b390  0000c390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0800b394  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  200000d8  0800b46c  0000d0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  0800b46c  0000d908  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019189  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003182  00000000  00000000  00026289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00029410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001288  00000000  00000000  0002ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c66  00000000  00000000  0002be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb5d  00000000  00000000  00044a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d550  00000000  00000000  000605cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdb1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b78  00000000  00000000  000fdb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001036d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aee4 	.word	0x0800aee4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	0800aee4 	.word	0x0800aee4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb55 	bl	8000aac <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fad5 	bl	80009bc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb47 	bl	8000aac <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb3d 	bl	8000aac <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fae3 	bl	8000a0c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fad9 	bl	8000a0c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	46ce      	mov	lr, r9
 800046c:	4647      	mov	r7, r8
 800046e:	0243      	lsls	r3, r0, #9
 8000470:	0a5a      	lsrs	r2, r3, #9
 8000472:	024e      	lsls	r6, r1, #9
 8000474:	0045      	lsls	r5, r0, #1
 8000476:	0fc4      	lsrs	r4, r0, #31
 8000478:	0048      	lsls	r0, r1, #1
 800047a:	4691      	mov	r9, r2
 800047c:	0e2d      	lsrs	r5, r5, #24
 800047e:	0a72      	lsrs	r2, r6, #9
 8000480:	0e00      	lsrs	r0, r0, #24
 8000482:	4694      	mov	ip, r2
 8000484:	b580      	push	{r7, lr}
 8000486:	099b      	lsrs	r3, r3, #6
 8000488:	0fc9      	lsrs	r1, r1, #31
 800048a:	09b6      	lsrs	r6, r6, #6
 800048c:	1a2a      	subs	r2, r5, r0
 800048e:	428c      	cmp	r4, r1
 8000490:	d021      	beq.n	80004d6 <__aeabi_fadd+0x6e>
 8000492:	2a00      	cmp	r2, #0
 8000494:	dd0d      	ble.n	80004b2 <__aeabi_fadd+0x4a>
 8000496:	2800      	cmp	r0, #0
 8000498:	d12d      	bne.n	80004f6 <__aeabi_fadd+0x8e>
 800049a:	2e00      	cmp	r6, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fadd+0x38>
 800049e:	e08d      	b.n	80005bc <__aeabi_fadd+0x154>
 80004a0:	1e51      	subs	r1, r2, #1
 80004a2:	2a01      	cmp	r2, #1
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fadd+0x40>
 80004a6:	e11d      	b.n	80006e4 <__aeabi_fadd+0x27c>
 80004a8:	2aff      	cmp	r2, #255	@ 0xff
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x46>
 80004ac:	e0ab      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004ae:	000a      	movs	r2, r1
 80004b0:	e027      	b.n	8000502 <__aeabi_fadd+0x9a>
 80004b2:	2a00      	cmp	r2, #0
 80004b4:	d04d      	beq.n	8000552 <__aeabi_fadd+0xea>
 80004b6:	1b42      	subs	r2, r0, r5
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d000      	beq.n	80004be <__aeabi_fadd+0x56>
 80004bc:	e0cc      	b.n	8000658 <__aeabi_fadd+0x1f0>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fadd+0x5c>
 80004c2:	e079      	b.n	80005b8 <__aeabi_fadd+0x150>
 80004c4:	1e54      	subs	r4, r2, #1
 80004c6:	2a01      	cmp	r2, #1
 80004c8:	d100      	bne.n	80004cc <__aeabi_fadd+0x64>
 80004ca:	e128      	b.n	800071e <__aeabi_fadd+0x2b6>
 80004cc:	2aff      	cmp	r2, #255	@ 0xff
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0x6a>
 80004d0:	e097      	b.n	8000602 <__aeabi_fadd+0x19a>
 80004d2:	0022      	movs	r2, r4
 80004d4:	e0c5      	b.n	8000662 <__aeabi_fadd+0x1fa>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	dc00      	bgt.n	80004dc <__aeabi_fadd+0x74>
 80004da:	e096      	b.n	800060a <__aeabi_fadd+0x1a2>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d04f      	beq.n	8000580 <__aeabi_fadd+0x118>
 80004e0:	2dff      	cmp	r5, #255	@ 0xff
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x7e>
 80004e4:	e08f      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	04c9      	lsls	r1, r1, #19
 80004ea:	430e      	orrs	r6, r1
 80004ec:	2a1b      	cmp	r2, #27
 80004ee:	dd51      	ble.n	8000594 <__aeabi_fadd+0x12c>
 80004f0:	002a      	movs	r2, r5
 80004f2:	3301      	adds	r3, #1
 80004f4:	e018      	b.n	8000528 <__aeabi_fadd+0xc0>
 80004f6:	2dff      	cmp	r5, #255	@ 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x94>
 80004fa:	e084      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004fc:	2180      	movs	r1, #128	@ 0x80
 80004fe:	04c9      	lsls	r1, r1, #19
 8000500:	430e      	orrs	r6, r1
 8000502:	2101      	movs	r1, #1
 8000504:	2a1b      	cmp	r2, #27
 8000506:	dc08      	bgt.n	800051a <__aeabi_fadd+0xb2>
 8000508:	0031      	movs	r1, r6
 800050a:	2020      	movs	r0, #32
 800050c:	40d1      	lsrs	r1, r2
 800050e:	1a82      	subs	r2, r0, r2
 8000510:	4096      	lsls	r6, r2
 8000512:	0032      	movs	r2, r6
 8000514:	1e50      	subs	r0, r2, #1
 8000516:	4182      	sbcs	r2, r0
 8000518:	4311      	orrs	r1, r2
 800051a:	1a5b      	subs	r3, r3, r1
 800051c:	015a      	lsls	r2, r3, #5
 800051e:	d459      	bmi.n	80005d4 <__aeabi_fadd+0x16c>
 8000520:	2107      	movs	r1, #7
 8000522:	002a      	movs	r2, r5
 8000524:	4019      	ands	r1, r3
 8000526:	d049      	beq.n	80005bc <__aeabi_fadd+0x154>
 8000528:	210f      	movs	r1, #15
 800052a:	4019      	ands	r1, r3
 800052c:	2904      	cmp	r1, #4
 800052e:	d000      	beq.n	8000532 <__aeabi_fadd+0xca>
 8000530:	3304      	adds	r3, #4
 8000532:	0159      	lsls	r1, r3, #5
 8000534:	d542      	bpl.n	80005bc <__aeabi_fadd+0x154>
 8000536:	1c50      	adds	r0, r2, #1
 8000538:	2afe      	cmp	r2, #254	@ 0xfe
 800053a:	d03a      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 800053c:	019b      	lsls	r3, r3, #6
 800053e:	b2c0      	uxtb	r0, r0
 8000540:	0a5b      	lsrs	r3, r3, #9
 8000542:	05c0      	lsls	r0, r0, #23
 8000544:	4318      	orrs	r0, r3
 8000546:	07e4      	lsls	r4, r4, #31
 8000548:	4320      	orrs	r0, r4
 800054a:	bcc0      	pop	{r6, r7}
 800054c:	46b9      	mov	r9, r7
 800054e:	46b0      	mov	r8, r6
 8000550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000552:	20fe      	movs	r0, #254	@ 0xfe
 8000554:	4680      	mov	r8, r0
 8000556:	1c6f      	adds	r7, r5, #1
 8000558:	0038      	movs	r0, r7
 800055a:	4647      	mov	r7, r8
 800055c:	4207      	tst	r7, r0
 800055e:	d000      	beq.n	8000562 <__aeabi_fadd+0xfa>
 8000560:	e08e      	b.n	8000680 <__aeabi_fadd+0x218>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x100>
 8000566:	e0b4      	b.n	80006d2 <__aeabi_fadd+0x26a>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x106>
 800056c:	e0db      	b.n	8000726 <__aeabi_fadd+0x2be>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d06c      	beq.n	800064c <__aeabi_fadd+0x1e4>
 8000572:	1b98      	subs	r0, r3, r6
 8000574:	0145      	lsls	r5, r0, #5
 8000576:	d400      	bmi.n	800057a <__aeabi_fadd+0x112>
 8000578:	e0f7      	b.n	800076a <__aeabi_fadd+0x302>
 800057a:	000c      	movs	r4, r1
 800057c:	1af3      	subs	r3, r6, r3
 800057e:	e03d      	b.n	80005fc <__aeabi_fadd+0x194>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d01b      	beq.n	80005bc <__aeabi_fadd+0x154>
 8000584:	1e51      	subs	r1, r2, #1
 8000586:	2a01      	cmp	r2, #1
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x124>
 800058a:	e082      	b.n	8000692 <__aeabi_fadd+0x22a>
 800058c:	2aff      	cmp	r2, #255	@ 0xff
 800058e:	d03a      	beq.n	8000606 <__aeabi_fadd+0x19e>
 8000590:	000a      	movs	r2, r1
 8000592:	e7ab      	b.n	80004ec <__aeabi_fadd+0x84>
 8000594:	0031      	movs	r1, r6
 8000596:	2020      	movs	r0, #32
 8000598:	40d1      	lsrs	r1, r2
 800059a:	1a82      	subs	r2, r0, r2
 800059c:	4096      	lsls	r6, r2
 800059e:	0032      	movs	r2, r6
 80005a0:	1e50      	subs	r0, r2, #1
 80005a2:	4182      	sbcs	r2, r0
 80005a4:	430a      	orrs	r2, r1
 80005a6:	189b      	adds	r3, r3, r2
 80005a8:	015a      	lsls	r2, r3, #5
 80005aa:	d5b9      	bpl.n	8000520 <__aeabi_fadd+0xb8>
 80005ac:	1c6a      	adds	r2, r5, #1
 80005ae:	2dfe      	cmp	r5, #254	@ 0xfe
 80005b0:	d175      	bne.n	800069e <__aeabi_fadd+0x236>
 80005b2:	20ff      	movs	r0, #255	@ 0xff
 80005b4:	2300      	movs	r3, #0
 80005b6:	e7c4      	b.n	8000542 <__aeabi_fadd+0xda>
 80005b8:	000c      	movs	r4, r1
 80005ba:	0033      	movs	r3, r6
 80005bc:	08db      	lsrs	r3, r3, #3
 80005be:	2aff      	cmp	r2, #255	@ 0xff
 80005c0:	d146      	bne.n	8000650 <__aeabi_fadd+0x1e8>
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f5      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	03d2      	lsls	r2, r2, #15
 80005ca:	4313      	orrs	r3, r2
 80005cc:	025b      	lsls	r3, r3, #9
 80005ce:	20ff      	movs	r0, #255	@ 0xff
 80005d0:	0a5b      	lsrs	r3, r3, #9
 80005d2:	e7b6      	b.n	8000542 <__aeabi_fadd+0xda>
 80005d4:	019f      	lsls	r7, r3, #6
 80005d6:	09bf      	lsrs	r7, r7, #6
 80005d8:	0038      	movs	r0, r7
 80005da:	f000 fdf9 	bl	80011d0 <__clzsi2>
 80005de:	3805      	subs	r0, #5
 80005e0:	4087      	lsls	r7, r0
 80005e2:	4285      	cmp	r5, r0
 80005e4:	dc24      	bgt.n	8000630 <__aeabi_fadd+0x1c8>
 80005e6:	003b      	movs	r3, r7
 80005e8:	2120      	movs	r1, #32
 80005ea:	1b42      	subs	r2, r0, r5
 80005ec:	3201      	adds	r2, #1
 80005ee:	40d3      	lsrs	r3, r2
 80005f0:	1a8a      	subs	r2, r1, r2
 80005f2:	4097      	lsls	r7, r2
 80005f4:	1e7a      	subs	r2, r7, #1
 80005f6:	4197      	sbcs	r7, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	433b      	orrs	r3, r7
 80005fc:	0759      	lsls	r1, r3, #29
 80005fe:	d193      	bne.n	8000528 <__aeabi_fadd+0xc0>
 8000600:	e797      	b.n	8000532 <__aeabi_fadd+0xca>
 8000602:	000c      	movs	r4, r1
 8000604:	0033      	movs	r3, r6
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	e7db      	b.n	80005c2 <__aeabi_fadd+0x15a>
 800060a:	2a00      	cmp	r2, #0
 800060c:	d014      	beq.n	8000638 <__aeabi_fadd+0x1d0>
 800060e:	1b42      	subs	r2, r0, r5
 8000610:	2d00      	cmp	r5, #0
 8000612:	d14b      	bne.n	80006ac <__aeabi_fadd+0x244>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0d0      	beq.n	80005ba <__aeabi_fadd+0x152>
 8000618:	1e51      	subs	r1, r2, #1
 800061a:	2a01      	cmp	r2, #1
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x1b8>
 800061e:	e09e      	b.n	800075e <__aeabi_fadd+0x2f6>
 8000620:	2aff      	cmp	r2, #255	@ 0xff
 8000622:	d0ef      	beq.n	8000604 <__aeabi_fadd+0x19c>
 8000624:	000a      	movs	r2, r1
 8000626:	2a1b      	cmp	r2, #27
 8000628:	dd5f      	ble.n	80006ea <__aeabi_fadd+0x282>
 800062a:	0002      	movs	r2, r0
 800062c:	1c73      	adds	r3, r6, #1
 800062e:	e77b      	b.n	8000528 <__aeabi_fadd+0xc0>
 8000630:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <__aeabi_fadd+0x30c>)
 8000632:	1a2a      	subs	r2, r5, r0
 8000634:	403b      	ands	r3, r7
 8000636:	e7e1      	b.n	80005fc <__aeabi_fadd+0x194>
 8000638:	21fe      	movs	r1, #254	@ 0xfe
 800063a:	1c6a      	adds	r2, r5, #1
 800063c:	4211      	tst	r1, r2
 800063e:	d13b      	bne.n	80006b8 <__aeabi_fadd+0x250>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d15d      	bne.n	8000700 <__aeabi_fadd+0x298>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d07f      	beq.n	8000748 <__aeabi_fadd+0x2e0>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d17f      	bne.n	800074c <__aeabi_fadd+0x2e4>
 800064c:	2200      	movs	r2, #0
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	b2d0      	uxtb	r0, r2
 8000656:	e774      	b.n	8000542 <__aeabi_fadd+0xda>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d0d2      	beq.n	8000602 <__aeabi_fadd+0x19a>
 800065c:	2480      	movs	r4, #128	@ 0x80
 800065e:	04e4      	lsls	r4, r4, #19
 8000660:	4323      	orrs	r3, r4
 8000662:	2401      	movs	r4, #1
 8000664:	2a1b      	cmp	r2, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x210>
 8000668:	001c      	movs	r4, r3
 800066a:	2520      	movs	r5, #32
 800066c:	40d4      	lsrs	r4, r2
 800066e:	1aaa      	subs	r2, r5, r2
 8000670:	4093      	lsls	r3, r2
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	4193      	sbcs	r3, r2
 8000676:	431c      	orrs	r4, r3
 8000678:	1b33      	subs	r3, r6, r4
 800067a:	0005      	movs	r5, r0
 800067c:	000c      	movs	r4, r1
 800067e:	e74d      	b.n	800051c <__aeabi_fadd+0xb4>
 8000680:	1b9f      	subs	r7, r3, r6
 8000682:	017a      	lsls	r2, r7, #5
 8000684:	d422      	bmi.n	80006cc <__aeabi_fadd+0x264>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d1a6      	bne.n	80005d8 <__aeabi_fadd+0x170>
 800068a:	2400      	movs	r4, #0
 800068c:	2000      	movs	r0, #0
 800068e:	2300      	movs	r3, #0
 8000690:	e757      	b.n	8000542 <__aeabi_fadd+0xda>
 8000692:	199b      	adds	r3, r3, r6
 8000694:	2501      	movs	r5, #1
 8000696:	3201      	adds	r2, #1
 8000698:	0159      	lsls	r1, r3, #5
 800069a:	d400      	bmi.n	800069e <__aeabi_fadd+0x236>
 800069c:	e740      	b.n	8000520 <__aeabi_fadd+0xb8>
 800069e:	2101      	movs	r1, #1
 80006a0:	4835      	ldr	r0, [pc, #212]	@ (8000778 <__aeabi_fadd+0x310>)
 80006a2:	4019      	ands	r1, r3
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	4003      	ands	r3, r0
 80006a8:	430b      	orrs	r3, r1
 80006aa:	e7a7      	b.n	80005fc <__aeabi_fadd+0x194>
 80006ac:	28ff      	cmp	r0, #255	@ 0xff
 80006ae:	d0a9      	beq.n	8000604 <__aeabi_fadd+0x19c>
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	04c9      	lsls	r1, r1, #19
 80006b4:	430b      	orrs	r3, r1
 80006b6:	e7b6      	b.n	8000626 <__aeabi_fadd+0x1be>
 80006b8:	2aff      	cmp	r2, #255	@ 0xff
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0x256>
 80006bc:	e779      	b.n	80005b2 <__aeabi_fadd+0x14a>
 80006be:	199b      	adds	r3, r3, r6
 80006c0:	085b      	lsrs	r3, r3, #1
 80006c2:	0759      	lsls	r1, r3, #29
 80006c4:	d000      	beq.n	80006c8 <__aeabi_fadd+0x260>
 80006c6:	e72f      	b.n	8000528 <__aeabi_fadd+0xc0>
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	e7c1      	b.n	8000650 <__aeabi_fadd+0x1e8>
 80006cc:	000c      	movs	r4, r1
 80006ce:	1af7      	subs	r7, r6, r3
 80006d0:	e782      	b.n	80005d8 <__aeabi_fadd+0x170>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d12c      	bne.n	8000730 <__aeabi_fadd+0x2c8>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d193      	bne.n	8000602 <__aeabi_fadd+0x19a>
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	2400      	movs	r4, #0
 80006de:	20ff      	movs	r0, #255	@ 0xff
 80006e0:	03db      	lsls	r3, r3, #15
 80006e2:	e72e      	b.n	8000542 <__aeabi_fadd+0xda>
 80006e4:	2501      	movs	r5, #1
 80006e6:	1b9b      	subs	r3, r3, r6
 80006e8:	e718      	b.n	800051c <__aeabi_fadd+0xb4>
 80006ea:	0019      	movs	r1, r3
 80006ec:	2520      	movs	r5, #32
 80006ee:	40d1      	lsrs	r1, r2
 80006f0:	1aaa      	subs	r2, r5, r2
 80006f2:	4093      	lsls	r3, r2
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	4193      	sbcs	r3, r2
 80006f8:	430b      	orrs	r3, r1
 80006fa:	0005      	movs	r5, r0
 80006fc:	199b      	adds	r3, r3, r6
 80006fe:	e753      	b.n	80005a8 <__aeabi_fadd+0x140>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_fadd+0x29e>
 8000704:	e77e      	b.n	8000604 <__aeabi_fadd+0x19c>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x2a4>
 800070a:	e77c      	b.n	8000606 <__aeabi_fadd+0x19e>
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	03d2      	lsls	r2, r2, #15
 8000710:	4591      	cmp	r9, r2
 8000712:	d302      	bcc.n	800071a <__aeabi_fadd+0x2b2>
 8000714:	4594      	cmp	ip, r2
 8000716:	d200      	bcs.n	800071a <__aeabi_fadd+0x2b2>
 8000718:	0033      	movs	r3, r6
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	e753      	b.n	80005c6 <__aeabi_fadd+0x15e>
 800071e:	000c      	movs	r4, r1
 8000720:	1af3      	subs	r3, r6, r3
 8000722:	3501      	adds	r5, #1
 8000724:	e6fa      	b.n	800051c <__aeabi_fadd+0xb4>
 8000726:	2e00      	cmp	r6, #0
 8000728:	d0af      	beq.n	800068a <__aeabi_fadd+0x222>
 800072a:	000c      	movs	r4, r1
 800072c:	0033      	movs	r3, r6
 800072e:	e78d      	b.n	800064c <__aeabi_fadd+0x1e4>
 8000730:	2e00      	cmp	r6, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2ce>
 8000734:	e767      	b.n	8000606 <__aeabi_fadd+0x19e>
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	03d2      	lsls	r2, r2, #15
 800073a:	4591      	cmp	r9, r2
 800073c:	d3ed      	bcc.n	800071a <__aeabi_fadd+0x2b2>
 800073e:	4594      	cmp	ip, r2
 8000740:	d2eb      	bcs.n	800071a <__aeabi_fadd+0x2b2>
 8000742:	000c      	movs	r4, r1
 8000744:	0033      	movs	r3, r6
 8000746:	e7e8      	b.n	800071a <__aeabi_fadd+0x2b2>
 8000748:	0033      	movs	r3, r6
 800074a:	e77f      	b.n	800064c <__aeabi_fadd+0x1e4>
 800074c:	199b      	adds	r3, r3, r6
 800074e:	2200      	movs	r2, #0
 8000750:	0159      	lsls	r1, r3, #5
 8000752:	d5b9      	bpl.n	80006c8 <__aeabi_fadd+0x260>
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <__aeabi_fadd+0x30c>)
 8000756:	4013      	ands	r3, r2
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	2201      	movs	r2, #1
 800075c:	e778      	b.n	8000650 <__aeabi_fadd+0x1e8>
 800075e:	199b      	adds	r3, r3, r6
 8000760:	3201      	adds	r2, #1
 8000762:	3501      	adds	r5, #1
 8000764:	0159      	lsls	r1, r3, #5
 8000766:	d49a      	bmi.n	800069e <__aeabi_fadd+0x236>
 8000768:	e6da      	b.n	8000520 <__aeabi_fadd+0xb8>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d08d      	beq.n	800068a <__aeabi_fadd+0x222>
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	e76e      	b.n	8000650 <__aeabi_fadd+0x1e8>
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	fbffffff 	.word	0xfbffffff
 8000778:	7dffffff 	.word	0x7dffffff

0800077c <__aeabi_fdiv>:
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	464f      	mov	r7, r9
 8000780:	4646      	mov	r6, r8
 8000782:	46d6      	mov	lr, sl
 8000784:	0244      	lsls	r4, r0, #9
 8000786:	b5c0      	push	{r6, r7, lr}
 8000788:	0047      	lsls	r7, r0, #1
 800078a:	1c0e      	adds	r6, r1, #0
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	0e3f      	lsrs	r7, r7, #24
 8000790:	0fc5      	lsrs	r5, r0, #31
 8000792:	2f00      	cmp	r7, #0
 8000794:	d03c      	beq.n	8000810 <__aeabi_fdiv+0x94>
 8000796:	2fff      	cmp	r7, #255	@ 0xff
 8000798:	d042      	beq.n	8000820 <__aeabi_fdiv+0xa4>
 800079a:	2300      	movs	r3, #0
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	4699      	mov	r9, r3
 80007a0:	469a      	mov	sl, r3
 80007a2:	00e4      	lsls	r4, r4, #3
 80007a4:	04d2      	lsls	r2, r2, #19
 80007a6:	4314      	orrs	r4, r2
 80007a8:	3f7f      	subs	r7, #127	@ 0x7f
 80007aa:	0273      	lsls	r3, r6, #9
 80007ac:	0a5b      	lsrs	r3, r3, #9
 80007ae:	4698      	mov	r8, r3
 80007b0:	0073      	lsls	r3, r6, #1
 80007b2:	0e1b      	lsrs	r3, r3, #24
 80007b4:	0ff6      	lsrs	r6, r6, #31
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d01b      	beq.n	80007f2 <__aeabi_fdiv+0x76>
 80007ba:	2bff      	cmp	r3, #255	@ 0xff
 80007bc:	d013      	beq.n	80007e6 <__aeabi_fdiv+0x6a>
 80007be:	4642      	mov	r2, r8
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	00d2      	lsls	r2, r2, #3
 80007c4:	04c9      	lsls	r1, r1, #19
 80007c6:	4311      	orrs	r1, r2
 80007c8:	4688      	mov	r8, r1
 80007ca:	2000      	movs	r0, #0
 80007cc:	3b7f      	subs	r3, #127	@ 0x7f
 80007ce:	0029      	movs	r1, r5
 80007d0:	1aff      	subs	r7, r7, r3
 80007d2:	464b      	mov	r3, r9
 80007d4:	4071      	eors	r1, r6
 80007d6:	b2c9      	uxtb	r1, r1
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d900      	bls.n	80007de <__aeabi_fdiv+0x62>
 80007dc:	e0b5      	b.n	800094a <__aeabi_fdiv+0x1ce>
 80007de:	4a74      	ldr	r2, [pc, #464]	@ (80009b0 <__aeabi_fdiv+0x234>)
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	58d3      	ldr	r3, [r2, r3]
 80007e4:	469f      	mov	pc, r3
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d13f      	bne.n	800086c <__aeabi_fdiv+0xf0>
 80007ec:	3fff      	subs	r7, #255	@ 0xff
 80007ee:	3302      	adds	r3, #2
 80007f0:	e003      	b.n	80007fa <__aeabi_fdiv+0x7e>
 80007f2:	4643      	mov	r3, r8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12d      	bne.n	8000854 <__aeabi_fdiv+0xd8>
 80007f8:	2301      	movs	r3, #1
 80007fa:	0029      	movs	r1, r5
 80007fc:	464a      	mov	r2, r9
 80007fe:	4071      	eors	r1, r6
 8000800:	b2c9      	uxtb	r1, r1
 8000802:	431a      	orrs	r2, r3
 8000804:	2a0e      	cmp	r2, #14
 8000806:	d838      	bhi.n	800087a <__aeabi_fdiv+0xfe>
 8000808:	486a      	ldr	r0, [pc, #424]	@ (80009b4 <__aeabi_fdiv+0x238>)
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	5882      	ldr	r2, [r0, r2]
 800080e:	4697      	mov	pc, r2
 8000810:	2c00      	cmp	r4, #0
 8000812:	d113      	bne.n	800083c <__aeabi_fdiv+0xc0>
 8000814:	2304      	movs	r3, #4
 8000816:	4699      	mov	r9, r3
 8000818:	3b03      	subs	r3, #3
 800081a:	2700      	movs	r7, #0
 800081c:	469a      	mov	sl, r3
 800081e:	e7c4      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d105      	bne.n	8000830 <__aeabi_fdiv+0xb4>
 8000824:	2308      	movs	r3, #8
 8000826:	4699      	mov	r9, r3
 8000828:	3b06      	subs	r3, #6
 800082a:	27ff      	movs	r7, #255	@ 0xff
 800082c:	469a      	mov	sl, r3
 800082e:	e7bc      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000830:	230c      	movs	r3, #12
 8000832:	4699      	mov	r9, r3
 8000834:	3b09      	subs	r3, #9
 8000836:	27ff      	movs	r7, #255	@ 0xff
 8000838:	469a      	mov	sl, r3
 800083a:	e7b6      	b.n	80007aa <__aeabi_fdiv+0x2e>
 800083c:	0020      	movs	r0, r4
 800083e:	f000 fcc7 	bl	80011d0 <__clzsi2>
 8000842:	2776      	movs	r7, #118	@ 0x76
 8000844:	1f43      	subs	r3, r0, #5
 8000846:	409c      	lsls	r4, r3
 8000848:	2300      	movs	r3, #0
 800084a:	427f      	negs	r7, r7
 800084c:	4699      	mov	r9, r3
 800084e:	469a      	mov	sl, r3
 8000850:	1a3f      	subs	r7, r7, r0
 8000852:	e7aa      	b.n	80007aa <__aeabi_fdiv+0x2e>
 8000854:	4640      	mov	r0, r8
 8000856:	f000 fcbb 	bl	80011d0 <__clzsi2>
 800085a:	4642      	mov	r2, r8
 800085c:	1f43      	subs	r3, r0, #5
 800085e:	409a      	lsls	r2, r3
 8000860:	2376      	movs	r3, #118	@ 0x76
 8000862:	425b      	negs	r3, r3
 8000864:	1a1b      	subs	r3, r3, r0
 8000866:	4690      	mov	r8, r2
 8000868:	2000      	movs	r0, #0
 800086a:	e7b0      	b.n	80007ce <__aeabi_fdiv+0x52>
 800086c:	2303      	movs	r3, #3
 800086e:	464a      	mov	r2, r9
 8000870:	431a      	orrs	r2, r3
 8000872:	4691      	mov	r9, r2
 8000874:	2003      	movs	r0, #3
 8000876:	33fc      	adds	r3, #252	@ 0xfc
 8000878:	e7a9      	b.n	80007ce <__aeabi_fdiv+0x52>
 800087a:	000d      	movs	r5, r1
 800087c:	20ff      	movs	r0, #255	@ 0xff
 800087e:	2200      	movs	r2, #0
 8000880:	05c0      	lsls	r0, r0, #23
 8000882:	07ed      	lsls	r5, r5, #31
 8000884:	4310      	orrs	r0, r2
 8000886:	4328      	orrs	r0, r5
 8000888:	bce0      	pop	{r5, r6, r7}
 800088a:	46ba      	mov	sl, r7
 800088c:	46b1      	mov	r9, r6
 800088e:	46a8      	mov	r8, r5
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000892:	000d      	movs	r5, r1
 8000894:	2000      	movs	r0, #0
 8000896:	2200      	movs	r2, #0
 8000898:	e7f2      	b.n	8000880 <__aeabi_fdiv+0x104>
 800089a:	4653      	mov	r3, sl
 800089c:	2b02      	cmp	r3, #2
 800089e:	d0ed      	beq.n	800087c <__aeabi_fdiv+0x100>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d033      	beq.n	800090c <__aeabi_fdiv+0x190>
 80008a4:	46a0      	mov	r8, r4
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d105      	bne.n	80008b6 <__aeabi_fdiv+0x13a>
 80008aa:	2000      	movs	r0, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	e7e7      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008b0:	0035      	movs	r5, r6
 80008b2:	2803      	cmp	r0, #3
 80008b4:	d07a      	beq.n	80009ac <__aeabi_fdiv+0x230>
 80008b6:	003b      	movs	r3, r7
 80008b8:	337f      	adds	r3, #127	@ 0x7f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	dd2d      	ble.n	800091a <__aeabi_fdiv+0x19e>
 80008be:	4642      	mov	r2, r8
 80008c0:	0752      	lsls	r2, r2, #29
 80008c2:	d007      	beq.n	80008d4 <__aeabi_fdiv+0x158>
 80008c4:	220f      	movs	r2, #15
 80008c6:	4641      	mov	r1, r8
 80008c8:	400a      	ands	r2, r1
 80008ca:	2a04      	cmp	r2, #4
 80008cc:	d002      	beq.n	80008d4 <__aeabi_fdiv+0x158>
 80008ce:	2204      	movs	r2, #4
 80008d0:	4694      	mov	ip, r2
 80008d2:	44e0      	add	r8, ip
 80008d4:	4642      	mov	r2, r8
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	d505      	bpl.n	80008e6 <__aeabi_fdiv+0x16a>
 80008da:	4642      	mov	r2, r8
 80008dc:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <__aeabi_fdiv+0x23c>)
 80008de:	401a      	ands	r2, r3
 80008e0:	003b      	movs	r3, r7
 80008e2:	4690      	mov	r8, r2
 80008e4:	3380      	adds	r3, #128	@ 0x80
 80008e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008e8:	dcc8      	bgt.n	800087c <__aeabi_fdiv+0x100>
 80008ea:	4642      	mov	r2, r8
 80008ec:	0192      	lsls	r2, r2, #6
 80008ee:	0a52      	lsrs	r2, r2, #9
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	e7c5      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	2500      	movs	r5, #0
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	03d2      	lsls	r2, r2, #15
 80008fc:	e7c0      	b.n	8000880 <__aeabi_fdiv+0x104>
 80008fe:	2280      	movs	r2, #128	@ 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4214      	tst	r4, r2
 8000904:	d002      	beq.n	800090c <__aeabi_fdiv+0x190>
 8000906:	4643      	mov	r3, r8
 8000908:	4213      	tst	r3, r2
 800090a:	d049      	beq.n	80009a0 <__aeabi_fdiv+0x224>
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	4322      	orrs	r2, r4
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	20ff      	movs	r0, #255	@ 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e7b2      	b.n	8000880 <__aeabi_fdiv+0x104>
 800091a:	2201      	movs	r2, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b1b      	cmp	r3, #27
 8000920:	dcc3      	bgt.n	80008aa <__aeabi_fdiv+0x12e>
 8000922:	4642      	mov	r2, r8
 8000924:	40da      	lsrs	r2, r3
 8000926:	4643      	mov	r3, r8
 8000928:	379e      	adds	r7, #158	@ 0x9e
 800092a:	40bb      	lsls	r3, r7
 800092c:	1e59      	subs	r1, r3, #1
 800092e:	418b      	sbcs	r3, r1
 8000930:	431a      	orrs	r2, r3
 8000932:	0753      	lsls	r3, r2, #29
 8000934:	d004      	beq.n	8000940 <__aeabi_fdiv+0x1c4>
 8000936:	230f      	movs	r3, #15
 8000938:	4013      	ands	r3, r2
 800093a:	2b04      	cmp	r3, #4
 800093c:	d000      	beq.n	8000940 <__aeabi_fdiv+0x1c4>
 800093e:	3204      	adds	r2, #4
 8000940:	0153      	lsls	r3, r2, #5
 8000942:	d529      	bpl.n	8000998 <__aeabi_fdiv+0x21c>
 8000944:	2001      	movs	r0, #1
 8000946:	2200      	movs	r2, #0
 8000948:	e79a      	b.n	8000880 <__aeabi_fdiv+0x104>
 800094a:	4642      	mov	r2, r8
 800094c:	0163      	lsls	r3, r4, #5
 800094e:	0155      	lsls	r5, r2, #5
 8000950:	42ab      	cmp	r3, r5
 8000952:	d215      	bcs.n	8000980 <__aeabi_fdiv+0x204>
 8000954:	201b      	movs	r0, #27
 8000956:	2200      	movs	r2, #0
 8000958:	3f01      	subs	r7, #1
 800095a:	2601      	movs	r6, #1
 800095c:	001c      	movs	r4, r3
 800095e:	0052      	lsls	r2, r2, #1
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2c00      	cmp	r4, #0
 8000964:	db01      	blt.n	800096a <__aeabi_fdiv+0x1ee>
 8000966:	429d      	cmp	r5, r3
 8000968:	d801      	bhi.n	800096e <__aeabi_fdiv+0x1f2>
 800096a:	1b5b      	subs	r3, r3, r5
 800096c:	4332      	orrs	r2, r6
 800096e:	3801      	subs	r0, #1
 8000970:	2800      	cmp	r0, #0
 8000972:	d1f3      	bne.n	800095c <__aeabi_fdiv+0x1e0>
 8000974:	1e58      	subs	r0, r3, #1
 8000976:	4183      	sbcs	r3, r0
 8000978:	4313      	orrs	r3, r2
 800097a:	4698      	mov	r8, r3
 800097c:	000d      	movs	r5, r1
 800097e:	e79a      	b.n	80008b6 <__aeabi_fdiv+0x13a>
 8000980:	201a      	movs	r0, #26
 8000982:	2201      	movs	r2, #1
 8000984:	1b5b      	subs	r3, r3, r5
 8000986:	e7e8      	b.n	800095a <__aeabi_fdiv+0x1de>
 8000988:	3b02      	subs	r3, #2
 800098a:	425a      	negs	r2, r3
 800098c:	4153      	adcs	r3, r2
 800098e:	425b      	negs	r3, r3
 8000990:	0035      	movs	r5, r6
 8000992:	2200      	movs	r2, #0
 8000994:	b2d8      	uxtb	r0, r3
 8000996:	e773      	b.n	8000880 <__aeabi_fdiv+0x104>
 8000998:	0192      	lsls	r2, r2, #6
 800099a:	2000      	movs	r0, #0
 800099c:	0a52      	lsrs	r2, r2, #9
 800099e:	e76f      	b.n	8000880 <__aeabi_fdiv+0x104>
 80009a0:	431a      	orrs	r2, r3
 80009a2:	0252      	lsls	r2, r2, #9
 80009a4:	0035      	movs	r5, r6
 80009a6:	20ff      	movs	r0, #255	@ 0xff
 80009a8:	0a52      	lsrs	r2, r2, #9
 80009aa:	e769      	b.n	8000880 <__aeabi_fdiv+0x104>
 80009ac:	4644      	mov	r4, r8
 80009ae:	e7ad      	b.n	800090c <__aeabi_fdiv+0x190>
 80009b0:	0800aefc 	.word	0x0800aefc
 80009b4:	0800af3c 	.word	0x0800af3c
 80009b8:	f7ffffff 	.word	0xf7ffffff

080009bc <__eqsf2>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	0042      	lsls	r2, r0, #1
 80009c0:	024e      	lsls	r6, r1, #9
 80009c2:	004c      	lsls	r4, r1, #1
 80009c4:	0245      	lsls	r5, r0, #9
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	0e12      	lsrs	r2, r2, #24
 80009ca:	0fc3      	lsrs	r3, r0, #31
 80009cc:	0a76      	lsrs	r6, r6, #9
 80009ce:	0e24      	lsrs	r4, r4, #24
 80009d0:	0fc9      	lsrs	r1, r1, #31
 80009d2:	2aff      	cmp	r2, #255	@ 0xff
 80009d4:	d010      	beq.n	80009f8 <__eqsf2+0x3c>
 80009d6:	2cff      	cmp	r4, #255	@ 0xff
 80009d8:	d00c      	beq.n	80009f4 <__eqsf2+0x38>
 80009da:	2001      	movs	r0, #1
 80009dc:	42a2      	cmp	r2, r4
 80009de:	d10a      	bne.n	80009f6 <__eqsf2+0x3a>
 80009e0:	42b5      	cmp	r5, r6
 80009e2:	d108      	bne.n	80009f6 <__eqsf2+0x3a>
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d00f      	beq.n	8000a08 <__eqsf2+0x4c>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d104      	bne.n	80009f6 <__eqsf2+0x3a>
 80009ec:	0028      	movs	r0, r5
 80009ee:	1e43      	subs	r3, r0, #1
 80009f0:	4198      	sbcs	r0, r3
 80009f2:	e000      	b.n	80009f6 <__eqsf2+0x3a>
 80009f4:	2001      	movs	r0, #1
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	2001      	movs	r0, #1
 80009fa:	2cff      	cmp	r4, #255	@ 0xff
 80009fc:	d1fb      	bne.n	80009f6 <__eqsf2+0x3a>
 80009fe:	4335      	orrs	r5, r6
 8000a00:	d1f9      	bne.n	80009f6 <__eqsf2+0x3a>
 8000a02:	404b      	eors	r3, r1
 8000a04:	0018      	movs	r0, r3
 8000a06:	e7f6      	b.n	80009f6 <__eqsf2+0x3a>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7f4      	b.n	80009f6 <__eqsf2+0x3a>

08000a0c <__gesf2>:
 8000a0c:	b530      	push	{r4, r5, lr}
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	0244      	lsls	r4, r0, #9
 8000a12:	024d      	lsls	r5, r1, #9
 8000a14:	0fc3      	lsrs	r3, r0, #31
 8000a16:	0048      	lsls	r0, r1, #1
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	0e12      	lsrs	r2, r2, #24
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	0e00      	lsrs	r0, r0, #24
 8000a20:	0fc9      	lsrs	r1, r1, #31
 8000a22:	2aff      	cmp	r2, #255	@ 0xff
 8000a24:	d019      	beq.n	8000a5a <__gesf2+0x4e>
 8000a26:	28ff      	cmp	r0, #255	@ 0xff
 8000a28:	d00b      	beq.n	8000a42 <__gesf2+0x36>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d11e      	bne.n	8000a6c <__gesf2+0x60>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d10b      	bne.n	8000a4a <__gesf2+0x3e>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d027      	beq.n	8000a86 <__gesf2+0x7a>
 8000a36:	2c00      	cmp	r4, #0
 8000a38:	d134      	bne.n	8000aa4 <__gesf2+0x98>
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	d02f      	beq.n	8000a9e <__gesf2+0x92>
 8000a3e:	0008      	movs	r0, r1
 8000a40:	bd30      	pop	{r4, r5, pc}
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d128      	bne.n	8000a98 <__gesf2+0x8c>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d101      	bne.n	8000a4e <__gesf2+0x42>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d0f5      	beq.n	8000a3a <__gesf2+0x2e>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d107      	bne.n	8000a62 <__gesf2+0x56>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d023      	beq.n	8000a9e <__gesf2+0x92>
 8000a56:	0018      	movs	r0, r3
 8000a58:	e7f2      	b.n	8000a40 <__gesf2+0x34>
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d11c      	bne.n	8000a98 <__gesf2+0x8c>
 8000a5e:	28ff      	cmp	r0, #255	@ 0xff
 8000a60:	d014      	beq.n	8000a8c <__gesf2+0x80>
 8000a62:	1e58      	subs	r0, r3, #1
 8000a64:	2302      	movs	r3, #2
 8000a66:	4018      	ands	r0, r3
 8000a68:	3801      	subs	r0, #1
 8000a6a:	e7e9      	b.n	8000a40 <__gesf2+0x34>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d0f8      	beq.n	8000a62 <__gesf2+0x56>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d1f6      	bne.n	8000a62 <__gesf2+0x56>
 8000a74:	4282      	cmp	r2, r0
 8000a76:	dcf4      	bgt.n	8000a62 <__gesf2+0x56>
 8000a78:	dbeb      	blt.n	8000a52 <__gesf2+0x46>
 8000a7a:	42ac      	cmp	r4, r5
 8000a7c:	d8f1      	bhi.n	8000a62 <__gesf2+0x56>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	42ac      	cmp	r4, r5
 8000a82:	d2dd      	bcs.n	8000a40 <__gesf2+0x34>
 8000a84:	e7e5      	b.n	8000a52 <__gesf2+0x46>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d0da      	beq.n	8000a40 <__gesf2+0x34>
 8000a8a:	e7ea      	b.n	8000a62 <__gesf2+0x56>
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d103      	bne.n	8000a98 <__gesf2+0x8c>
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d1e6      	bne.n	8000a62 <__gesf2+0x56>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7d3      	b.n	8000a40 <__gesf2+0x34>
 8000a98:	2002      	movs	r0, #2
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	e7d0      	b.n	8000a40 <__gesf2+0x34>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	e7cd      	b.n	8000a40 <__gesf2+0x34>
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d0e8      	beq.n	8000a7a <__gesf2+0x6e>
 8000aa8:	e7db      	b.n	8000a62 <__gesf2+0x56>
 8000aaa:	46c0      	nop			@ (mov r8, r8)

08000aac <__lesf2>:
 8000aac:	b530      	push	{r4, r5, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	0244      	lsls	r4, r0, #9
 8000ab2:	024d      	lsls	r5, r1, #9
 8000ab4:	0fc3      	lsrs	r3, r0, #31
 8000ab6:	0048      	lsls	r0, r1, #1
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	0e12      	lsrs	r2, r2, #24
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e00      	lsrs	r0, r0, #24
 8000ac0:	0fc9      	lsrs	r1, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d01a      	beq.n	8000afc <__lesf2+0x50>
 8000ac6:	28ff      	cmp	r0, #255	@ 0xff
 8000ac8:	d00e      	beq.n	8000ae8 <__lesf2+0x3c>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d11e      	bne.n	8000b0c <__lesf2+0x60>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d10e      	bne.n	8000af0 <__lesf2+0x44>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d02a      	beq.n	8000b2c <__lesf2+0x80>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d00c      	beq.n	8000af4 <__lesf2+0x48>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d01d      	beq.n	8000b1a <__lesf2+0x6e>
 8000ade:	1e58      	subs	r0, r3, #1
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	4018      	ands	r0, r3
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	e010      	b.n	8000b0a <__lesf2+0x5e>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d10d      	bne.n	8000b08 <__lesf2+0x5c>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d120      	bne.n	8000b32 <__lesf2+0x86>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d11e      	bne.n	8000b32 <__lesf2+0x86>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d023      	beq.n	8000b40 <__lesf2+0x94>
 8000af8:	0008      	movs	r0, r1
 8000afa:	e006      	b.n	8000b0a <__lesf2+0x5e>
 8000afc:	2c00      	cmp	r4, #0
 8000afe:	d103      	bne.n	8000b08 <__lesf2+0x5c>
 8000b00:	28ff      	cmp	r0, #255	@ 0xff
 8000b02:	d1ec      	bne.n	8000ade <__lesf2+0x32>
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d017      	beq.n	8000b38 <__lesf2+0x8c>
 8000b08:	2002      	movs	r0, #2
 8000b0a:	bd30      	pop	{r4, r5, pc}
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d0e6      	beq.n	8000ade <__lesf2+0x32>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d1e4      	bne.n	8000ade <__lesf2+0x32>
 8000b14:	4282      	cmp	r2, r0
 8000b16:	dce2      	bgt.n	8000ade <__lesf2+0x32>
 8000b18:	db04      	blt.n	8000b24 <__lesf2+0x78>
 8000b1a:	42ac      	cmp	r4, r5
 8000b1c:	d8df      	bhi.n	8000ade <__lesf2+0x32>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	42ac      	cmp	r4, r5
 8000b22:	d2f2      	bcs.n	8000b0a <__lesf2+0x5e>
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <__lesf2+0x94>
 8000b28:	0018      	movs	r0, r3
 8000b2a:	e7ee      	b.n	8000b0a <__lesf2+0x5e>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d0ec      	beq.n	8000b0a <__lesf2+0x5e>
 8000b30:	e7d5      	b.n	8000ade <__lesf2+0x32>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d1d3      	bne.n	8000ade <__lesf2+0x32>
 8000b36:	e7f5      	b.n	8000b24 <__lesf2+0x78>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d0e5      	beq.n	8000b0a <__lesf2+0x5e>
 8000b3e:	e7ce      	b.n	8000ade <__lesf2+0x32>
 8000b40:	2001      	movs	r0, #1
 8000b42:	4240      	negs	r0, r0
 8000b44:	e7e1      	b.n	8000b0a <__lesf2+0x5e>
 8000b46:	46c0      	nop			@ (mov r8, r8)

08000b48 <__aeabi_fmul>:
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	464f      	mov	r7, r9
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	0243      	lsls	r3, r0, #9
 8000b52:	0a5b      	lsrs	r3, r3, #9
 8000b54:	0045      	lsls	r5, r0, #1
 8000b56:	b5c0      	push	{r6, r7, lr}
 8000b58:	4699      	mov	r9, r3
 8000b5a:	1c0f      	adds	r7, r1, #0
 8000b5c:	0e2d      	lsrs	r5, r5, #24
 8000b5e:	0fc6      	lsrs	r6, r0, #31
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fmul+0x1e>
 8000b64:	e088      	b.n	8000c78 <__aeabi_fmul+0x130>
 8000b66:	2dff      	cmp	r5, #255	@ 0xff
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fmul+0x24>
 8000b6a:	e08d      	b.n	8000c88 <__aeabi_fmul+0x140>
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	04d2      	lsls	r2, r2, #19
 8000b72:	431a      	orrs	r2, r3
 8000b74:	2300      	movs	r3, #0
 8000b76:	4691      	mov	r9, r2
 8000b78:	4698      	mov	r8, r3
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	3d7f      	subs	r5, #127	@ 0x7f
 8000b7e:	027c      	lsls	r4, r7, #9
 8000b80:	007b      	lsls	r3, r7, #1
 8000b82:	0a64      	lsrs	r4, r4, #9
 8000b84:	0e1b      	lsrs	r3, r3, #24
 8000b86:	0fff      	lsrs	r7, r7, #31
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d068      	beq.n	8000c5e <__aeabi_fmul+0x116>
 8000b8c:	2bff      	cmp	r3, #255	@ 0xff
 8000b8e:	d021      	beq.n	8000bd4 <__aeabi_fmul+0x8c>
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	00e4      	lsls	r4, r4, #3
 8000b94:	04d2      	lsls	r2, r2, #19
 8000b96:	4314      	orrs	r4, r2
 8000b98:	4642      	mov	r2, r8
 8000b9a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b9c:	195b      	adds	r3, r3, r5
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	1c5d      	adds	r5, r3, #1
 8000ba2:	2a0a      	cmp	r2, #10
 8000ba4:	dc2e      	bgt.n	8000c04 <__aeabi_fmul+0xbc>
 8000ba6:	407e      	eors	r6, r7
 8000ba8:	4642      	mov	r2, r8
 8000baa:	2a02      	cmp	r2, #2
 8000bac:	dc23      	bgt.n	8000bf6 <__aeabi_fmul+0xae>
 8000bae:	3a01      	subs	r2, #1
 8000bb0:	2a01      	cmp	r2, #1
 8000bb2:	d900      	bls.n	8000bb6 <__aeabi_fmul+0x6e>
 8000bb4:	e0bd      	b.n	8000d32 <__aeabi_fmul+0x1ea>
 8000bb6:	2902      	cmp	r1, #2
 8000bb8:	d06e      	beq.n	8000c98 <__aeabi_fmul+0x150>
 8000bba:	2901      	cmp	r1, #1
 8000bbc:	d12c      	bne.n	8000c18 <__aeabi_fmul+0xd0>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	05c0      	lsls	r0, r0, #23
 8000bc4:	07f6      	lsls	r6, r6, #31
 8000bc6:	4310      	orrs	r0, r2
 8000bc8:	4330      	orrs	r0, r6
 8000bca:	bce0      	pop	{r5, r6, r7}
 8000bcc:	46ba      	mov	sl, r7
 8000bce:	46b1      	mov	r9, r6
 8000bd0:	46a8      	mov	r8, r5
 8000bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd4:	002b      	movs	r3, r5
 8000bd6:	33ff      	adds	r3, #255	@ 0xff
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d065      	beq.n	8000ca8 <__aeabi_fmul+0x160>
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4641      	mov	r1, r8
 8000be0:	4311      	orrs	r1, r2
 8000be2:	0032      	movs	r2, r6
 8000be4:	3501      	adds	r5, #1
 8000be6:	4688      	mov	r8, r1
 8000be8:	407a      	eors	r2, r7
 8000bea:	35ff      	adds	r5, #255	@ 0xff
 8000bec:	290a      	cmp	r1, #10
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_fmul+0xaa>
 8000bf0:	e0d8      	b.n	8000da4 <__aeabi_fmul+0x25c>
 8000bf2:	0016      	movs	r6, r2
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	4640      	mov	r0, r8
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4082      	lsls	r2, r0
 8000bfc:	20a6      	movs	r0, #166	@ 0xa6
 8000bfe:	00c0      	lsls	r0, r0, #3
 8000c00:	4202      	tst	r2, r0
 8000c02:	d020      	beq.n	8000c46 <__aeabi_fmul+0xfe>
 8000c04:	4653      	mov	r3, sl
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d046      	beq.n	8000c98 <__aeabi_fmul+0x150>
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fmul+0xc8>
 8000c0e:	e0bb      	b.n	8000d88 <__aeabi_fmul+0x240>
 8000c10:	4651      	mov	r1, sl
 8000c12:	464c      	mov	r4, r9
 8000c14:	2901      	cmp	r1, #1
 8000c16:	d0d2      	beq.n	8000bbe <__aeabi_fmul+0x76>
 8000c18:	002b      	movs	r3, r5
 8000c1a:	337f      	adds	r3, #127	@ 0x7f
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dd70      	ble.n	8000d02 <__aeabi_fmul+0x1ba>
 8000c20:	0762      	lsls	r2, r4, #29
 8000c22:	d004      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c24:	220f      	movs	r2, #15
 8000c26:	4022      	ands	r2, r4
 8000c28:	2a04      	cmp	r2, #4
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c2c:	3404      	adds	r4, #4
 8000c2e:	0122      	lsls	r2, r4, #4
 8000c30:	d503      	bpl.n	8000c3a <__aeabi_fmul+0xf2>
 8000c32:	4b63      	ldr	r3, [pc, #396]	@ (8000dc0 <__aeabi_fmul+0x278>)
 8000c34:	401c      	ands	r4, r3
 8000c36:	002b      	movs	r3, r5
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dc2c      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000c3e:	01a2      	lsls	r2, r4, #6
 8000c40:	0a52      	lsrs	r2, r2, #9
 8000c42:	b2d8      	uxtb	r0, r3
 8000c44:	e7bd      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000c46:	2090      	movs	r0, #144	@ 0x90
 8000c48:	0080      	lsls	r0, r0, #2
 8000c4a:	4202      	tst	r2, r0
 8000c4c:	d127      	bne.n	8000c9e <__aeabi_fmul+0x156>
 8000c4e:	38b9      	subs	r0, #185	@ 0xb9
 8000c50:	38ff      	subs	r0, #255	@ 0xff
 8000c52:	4210      	tst	r0, r2
 8000c54:	d06d      	beq.n	8000d32 <__aeabi_fmul+0x1ea>
 8000c56:	003e      	movs	r6, r7
 8000c58:	46a1      	mov	r9, r4
 8000c5a:	468a      	mov	sl, r1
 8000c5c:	e7d2      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d141      	bne.n	8000ce6 <__aeabi_fmul+0x19e>
 8000c62:	2301      	movs	r3, #1
 8000c64:	4642      	mov	r2, r8
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4690      	mov	r8, r2
 8000c6a:	002b      	movs	r3, r5
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	2101      	movs	r1, #1
 8000c70:	1c5d      	adds	r5, r3, #1
 8000c72:	2a0a      	cmp	r2, #10
 8000c74:	dd97      	ble.n	8000ba6 <__aeabi_fmul+0x5e>
 8000c76:	e7c5      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d126      	bne.n	8000cca <__aeabi_fmul+0x182>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	4698      	mov	r8, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469a      	mov	sl, r3
 8000c86:	e77a      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d118      	bne.n	8000cbe <__aeabi_fmul+0x176>
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	4698      	mov	r8, r3
 8000c90:	3b06      	subs	r3, #6
 8000c92:	25ff      	movs	r5, #255	@ 0xff
 8000c94:	469a      	mov	sl, r3
 8000c96:	e772      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000c98:	20ff      	movs	r0, #255	@ 0xff
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e791      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	20ff      	movs	r0, #255	@ 0xff
 8000ca4:	03d2      	lsls	r2, r2, #15
 8000ca6:	e78c      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000ca8:	4641      	mov	r1, r8
 8000caa:	2202      	movs	r2, #2
 8000cac:	3501      	adds	r5, #1
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	35ff      	adds	r5, #255	@ 0xff
 8000cb4:	290a      	cmp	r1, #10
 8000cb6:	dca5      	bgt.n	8000c04 <__aeabi_fmul+0xbc>
 8000cb8:	2102      	movs	r1, #2
 8000cba:	407e      	eors	r6, r7
 8000cbc:	e774      	b.n	8000ba8 <__aeabi_fmul+0x60>
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	3b09      	subs	r3, #9
 8000cc4:	25ff      	movs	r5, #255	@ 0xff
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	e759      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fa80 	bl	80011d0 <__clzsi2>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1f43      	subs	r3, r0, #5
 8000cd4:	2576      	movs	r5, #118	@ 0x76
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	426d      	negs	r5, r5
 8000cdc:	4691      	mov	r9, r2
 8000cde:	4698      	mov	r8, r3
 8000ce0:	469a      	mov	sl, r3
 8000ce2:	1a2d      	subs	r5, r5, r0
 8000ce4:	e74b      	b.n	8000b7e <__aeabi_fmul+0x36>
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f000 fa72 	bl	80011d0 <__clzsi2>
 8000cec:	4642      	mov	r2, r8
 8000cee:	1f43      	subs	r3, r0, #5
 8000cf0:	409c      	lsls	r4, r3
 8000cf2:	1a2b      	subs	r3, r5, r0
 8000cf4:	3b76      	subs	r3, #118	@ 0x76
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	1c5d      	adds	r5, r3, #1
 8000cfa:	2a0a      	cmp	r2, #10
 8000cfc:	dc00      	bgt.n	8000d00 <__aeabi_fmul+0x1b8>
 8000cfe:	e752      	b.n	8000ba6 <__aeabi_fmul+0x5e>
 8000d00:	e780      	b.n	8000c04 <__aeabi_fmul+0xbc>
 8000d02:	2201      	movs	r2, #1
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b1b      	cmp	r3, #27
 8000d08:	dd00      	ble.n	8000d0c <__aeabi_fmul+0x1c4>
 8000d0a:	e758      	b.n	8000bbe <__aeabi_fmul+0x76>
 8000d0c:	359e      	adds	r5, #158	@ 0x9e
 8000d0e:	0022      	movs	r2, r4
 8000d10:	40ac      	lsls	r4, r5
 8000d12:	40da      	lsrs	r2, r3
 8000d14:	1e63      	subs	r3, r4, #1
 8000d16:	419c      	sbcs	r4, r3
 8000d18:	4322      	orrs	r2, r4
 8000d1a:	0753      	lsls	r3, r2, #29
 8000d1c:	d004      	beq.n	8000d28 <__aeabi_fmul+0x1e0>
 8000d1e:	230f      	movs	r3, #15
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d000      	beq.n	8000d28 <__aeabi_fmul+0x1e0>
 8000d26:	3204      	adds	r2, #4
 8000d28:	0153      	lsls	r3, r2, #5
 8000d2a:	d537      	bpl.n	8000d9c <__aeabi_fmul+0x254>
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	e747      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000d32:	0c21      	lsrs	r1, r4, #16
 8000d34:	464a      	mov	r2, r9
 8000d36:	0424      	lsls	r4, r4, #16
 8000d38:	0c24      	lsrs	r4, r4, #16
 8000d3a:	0027      	movs	r7, r4
 8000d3c:	0c10      	lsrs	r0, r2, #16
 8000d3e:	0412      	lsls	r2, r2, #16
 8000d40:	0c12      	lsrs	r2, r2, #16
 8000d42:	4344      	muls	r4, r0
 8000d44:	4357      	muls	r7, r2
 8000d46:	4348      	muls	r0, r1
 8000d48:	4351      	muls	r1, r2
 8000d4a:	0c3a      	lsrs	r2, r7, #16
 8000d4c:	1909      	adds	r1, r1, r4
 8000d4e:	1852      	adds	r2, r2, r1
 8000d50:	4294      	cmp	r4, r2
 8000d52:	d903      	bls.n	8000d5c <__aeabi_fmul+0x214>
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	0249      	lsls	r1, r1, #9
 8000d58:	468c      	mov	ip, r1
 8000d5a:	4460      	add	r0, ip
 8000d5c:	043f      	lsls	r7, r7, #16
 8000d5e:	0411      	lsls	r1, r2, #16
 8000d60:	0c3f      	lsrs	r7, r7, #16
 8000d62:	19c9      	adds	r1, r1, r7
 8000d64:	018c      	lsls	r4, r1, #6
 8000d66:	1e67      	subs	r7, r4, #1
 8000d68:	41bc      	sbcs	r4, r7
 8000d6a:	0c12      	lsrs	r2, r2, #16
 8000d6c:	0e89      	lsrs	r1, r1, #26
 8000d6e:	1812      	adds	r2, r2, r0
 8000d70:	430c      	orrs	r4, r1
 8000d72:	0192      	lsls	r2, r2, #6
 8000d74:	4314      	orrs	r4, r2
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	d50e      	bpl.n	8000d98 <__aeabi_fmul+0x250>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	0862      	lsrs	r2, r4, #1
 8000d7e:	401c      	ands	r4, r3
 8000d80:	4314      	orrs	r4, r2
 8000d82:	e749      	b.n	8000c18 <__aeabi_fmul+0xd0>
 8000d84:	003e      	movs	r6, r7
 8000d86:	46a1      	mov	r9, r4
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	464b      	mov	r3, r9
 8000d8c:	03d2      	lsls	r2, r2, #15
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	0252      	lsls	r2, r2, #9
 8000d92:	20ff      	movs	r0, #255	@ 0xff
 8000d94:	0a52      	lsrs	r2, r2, #9
 8000d96:	e714      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000d98:	001d      	movs	r5, r3
 8000d9a:	e73d      	b.n	8000c18 <__aeabi_fmul+0xd0>
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a52      	lsrs	r2, r2, #9
 8000da2:	e70e      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000da4:	290f      	cmp	r1, #15
 8000da6:	d1ed      	bne.n	8000d84 <__aeabi_fmul+0x23c>
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	464b      	mov	r3, r9
 8000dac:	03d2      	lsls	r2, r2, #15
 8000dae:	4213      	tst	r3, r2
 8000db0:	d0ea      	beq.n	8000d88 <__aeabi_fmul+0x240>
 8000db2:	4214      	tst	r4, r2
 8000db4:	d1e8      	bne.n	8000d88 <__aeabi_fmul+0x240>
 8000db6:	003e      	movs	r6, r7
 8000db8:	20ff      	movs	r0, #255	@ 0xff
 8000dba:	4322      	orrs	r2, r4
 8000dbc:	e701      	b.n	8000bc2 <__aeabi_fmul+0x7a>
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	f7ffffff 	.word	0xf7ffffff

08000dc4 <__aeabi_fsub>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	024e      	lsls	r6, r1, #9
 8000dcc:	0243      	lsls	r3, r0, #9
 8000dce:	0045      	lsls	r5, r0, #1
 8000dd0:	0a72      	lsrs	r2, r6, #9
 8000dd2:	0fc4      	lsrs	r4, r0, #31
 8000dd4:	0048      	lsls	r0, r1, #1
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	4694      	mov	ip, r2
 8000dda:	0a5f      	lsrs	r7, r3, #9
 8000ddc:	0e2d      	lsrs	r5, r5, #24
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	0e00      	lsrs	r0, r0, #24
 8000de2:	0fc9      	lsrs	r1, r1, #31
 8000de4:	09b6      	lsrs	r6, r6, #6
 8000de6:	28ff      	cmp	r0, #255	@ 0xff
 8000de8:	d024      	beq.n	8000e34 <__aeabi_fsub+0x70>
 8000dea:	2201      	movs	r2, #1
 8000dec:	4051      	eors	r1, r2
 8000dee:	1a2a      	subs	r2, r5, r0
 8000df0:	428c      	cmp	r4, r1
 8000df2:	d00f      	beq.n	8000e14 <__aeabi_fsub+0x50>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_fsub+0x36>
 8000df8:	e16a      	b.n	80010d0 <__aeabi_fsub+0x30c>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d135      	bne.n	8000e6a <__aeabi_fsub+0xa6>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0x40>
 8000e02:	e0a2      	b.n	8000f4a <__aeabi_fsub+0x186>
 8000e04:	1e51      	subs	r1, r2, #1
 8000e06:	2a01      	cmp	r2, #1
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0x48>
 8000e0a:	e124      	b.n	8001056 <__aeabi_fsub+0x292>
 8000e0c:	2aff      	cmp	r2, #255	@ 0xff
 8000e0e:	d021      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e10:	000a      	movs	r2, r1
 8000e12:	e02f      	b.n	8000e74 <__aeabi_fsub+0xb0>
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	dc00      	bgt.n	8000e1a <__aeabi_fsub+0x56>
 8000e18:	e167      	b.n	80010ea <__aeabi_fsub+0x326>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d05e      	beq.n	8000edc <__aeabi_fsub+0x118>
 8000e1e:	2dff      	cmp	r5, #255	@ 0xff
 8000e20:	d018      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	04c9      	lsls	r1, r1, #19
 8000e26:	430e      	orrs	r6, r1
 8000e28:	2a1b      	cmp	r2, #27
 8000e2a:	dc00      	bgt.n	8000e2e <__aeabi_fsub+0x6a>
 8000e2c:	e076      	b.n	8000f1c <__aeabi_fsub+0x158>
 8000e2e:	002a      	movs	r2, r5
 8000e30:	3301      	adds	r3, #1
 8000e32:	e032      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8000e34:	002a      	movs	r2, r5
 8000e36:	3aff      	subs	r2, #255	@ 0xff
 8000e38:	4691      	mov	r9, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d042      	beq.n	8000ec4 <__aeabi_fsub+0x100>
 8000e3e:	428c      	cmp	r4, r1
 8000e40:	d055      	beq.n	8000eee <__aeabi_fsub+0x12a>
 8000e42:	464a      	mov	r2, r9
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	d100      	bne.n	8000e4a <__aeabi_fsub+0x86>
 8000e48:	e09c      	b.n	8000f84 <__aeabi_fsub+0x1c0>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x8c>
 8000e4e:	e077      	b.n	8000f40 <__aeabi_fsub+0x17c>
 8000e50:	000c      	movs	r4, r1
 8000e52:	0033      	movs	r3, r6
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_fsub+0x98>
 8000e5a:	e06e      	b.n	8000f3a <__aeabi_fsub+0x176>
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	03d2      	lsls	r2, r2, #15
 8000e60:	4313      	orrs	r3, r2
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	20ff      	movs	r0, #255	@ 0xff
 8000e66:	0a5b      	lsrs	r3, r3, #9
 8000e68:	e024      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000e6a:	2dff      	cmp	r5, #255	@ 0xff
 8000e6c:	d0f2      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	04c9      	lsls	r1, r1, #19
 8000e72:	430e      	orrs	r6, r1
 8000e74:	2101      	movs	r1, #1
 8000e76:	2a1b      	cmp	r2, #27
 8000e78:	dc08      	bgt.n	8000e8c <__aeabi_fsub+0xc8>
 8000e7a:	0031      	movs	r1, r6
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	40d1      	lsrs	r1, r2
 8000e80:	1a82      	subs	r2, r0, r2
 8000e82:	4096      	lsls	r6, r2
 8000e84:	0032      	movs	r2, r6
 8000e86:	1e50      	subs	r0, r2, #1
 8000e88:	4182      	sbcs	r2, r0
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	015a      	lsls	r2, r3, #5
 8000e90:	d460      	bmi.n	8000f54 <__aeabi_fsub+0x190>
 8000e92:	2107      	movs	r1, #7
 8000e94:	002a      	movs	r2, r5
 8000e96:	4019      	ands	r1, r3
 8000e98:	d057      	beq.n	8000f4a <__aeabi_fsub+0x186>
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	4019      	ands	r1, r3
 8000e9e:	2904      	cmp	r1, #4
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_fsub+0xe0>
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	0159      	lsls	r1, r3, #5
 8000ea6:	d550      	bpl.n	8000f4a <__aeabi_fsub+0x186>
 8000ea8:	1c50      	adds	r0, r2, #1
 8000eaa:	2afe      	cmp	r2, #254	@ 0xfe
 8000eac:	d045      	beq.n	8000f3a <__aeabi_fsub+0x176>
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	b2c0      	uxtb	r0, r0
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	05c0      	lsls	r0, r0, #23
 8000eb6:	4318      	orrs	r0, r3
 8000eb8:	07e4      	lsls	r4, r4, #31
 8000eba:	4320      	orrs	r0, r4
 8000ebc:	bcc0      	pop	{r6, r7}
 8000ebe:	46b9      	mov	r9, r7
 8000ec0:	46b0      	mov	r8, r6
 8000ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4051      	eors	r1, r2
 8000ec8:	428c      	cmp	r4, r1
 8000eca:	d1ba      	bne.n	8000e42 <__aeabi_fsub+0x7e>
 8000ecc:	464a      	mov	r2, r9
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d010      	beq.n	8000ef4 <__aeabi_fsub+0x130>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x114>
 8000ed6:	e098      	b.n	800100a <__aeabi_fsub+0x246>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e7bb      	b.n	8000e54 <__aeabi_fsub+0x90>
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d034      	beq.n	8000f4a <__aeabi_fsub+0x186>
 8000ee0:	1e51      	subs	r1, r2, #1
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	d06e      	beq.n	8000fc4 <__aeabi_fsub+0x200>
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d0b4      	beq.n	8000e54 <__aeabi_fsub+0x90>
 8000eea:	000a      	movs	r2, r1
 8000eec:	e79c      	b.n	8000e28 <__aeabi_fsub+0x64>
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_fsub+0x130>
 8000ef2:	e088      	b.n	8001006 <__aeabi_fsub+0x242>
 8000ef4:	20fe      	movs	r0, #254	@ 0xfe
 8000ef6:	1c6a      	adds	r2, r5, #1
 8000ef8:	4210      	tst	r0, r2
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0x13a>
 8000efc:	e092      	b.n	8001024 <__aeabi_fsub+0x260>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x140>
 8000f02:	e0a4      	b.n	800104e <__aeabi_fsub+0x28a>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x146>
 8000f08:	e0cb      	b.n	80010a2 <__aeabi_fsub+0x2de>
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0x14c>
 8000f0e:	e0ca      	b.n	80010a6 <__aeabi_fsub+0x2e2>
 8000f10:	2200      	movs	r2, #0
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	b2d0      	uxtb	r0, r2
 8000f1a:	e7cb      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000f1c:	0031      	movs	r1, r6
 8000f1e:	2020      	movs	r0, #32
 8000f20:	40d1      	lsrs	r1, r2
 8000f22:	1a82      	subs	r2, r0, r2
 8000f24:	4096      	lsls	r6, r2
 8000f26:	0032      	movs	r2, r6
 8000f28:	1e50      	subs	r0, r2, #1
 8000f2a:	4182      	sbcs	r2, r0
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	015a      	lsls	r2, r3, #5
 8000f32:	d5ae      	bpl.n	8000e92 <__aeabi_fsub+0xce>
 8000f34:	1c6a      	adds	r2, r5, #1
 8000f36:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f38:	d14a      	bne.n	8000fd0 <__aeabi_fsub+0x20c>
 8000f3a:	20ff      	movs	r0, #255	@ 0xff
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e7b9      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000f40:	22ff      	movs	r2, #255	@ 0xff
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d14b      	bne.n	8000fde <__aeabi_fsub+0x21a>
 8000f46:	000c      	movs	r4, r1
 8000f48:	0033      	movs	r3, r6
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	2aff      	cmp	r2, #255	@ 0xff
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x18e>
 8000f50:	e781      	b.n	8000e56 <__aeabi_fsub+0x92>
 8000f52:	e7df      	b.n	8000f14 <__aeabi_fsub+0x150>
 8000f54:	019f      	lsls	r7, r3, #6
 8000f56:	09bf      	lsrs	r7, r7, #6
 8000f58:	0038      	movs	r0, r7
 8000f5a:	f000 f939 	bl	80011d0 <__clzsi2>
 8000f5e:	3805      	subs	r0, #5
 8000f60:	4087      	lsls	r7, r0
 8000f62:	4285      	cmp	r5, r0
 8000f64:	dc21      	bgt.n	8000faa <__aeabi_fsub+0x1e6>
 8000f66:	003b      	movs	r3, r7
 8000f68:	2120      	movs	r1, #32
 8000f6a:	1b42      	subs	r2, r0, r5
 8000f6c:	3201      	adds	r2, #1
 8000f6e:	40d3      	lsrs	r3, r2
 8000f70:	1a8a      	subs	r2, r1, r2
 8000f72:	4097      	lsls	r7, r2
 8000f74:	1e7a      	subs	r2, r7, #1
 8000f76:	4197      	sbcs	r7, r2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	433b      	orrs	r3, r7
 8000f7c:	0759      	lsls	r1, r3, #29
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fsub+0x1be>
 8000f80:	e78b      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8000f82:	e78f      	b.n	8000ea4 <__aeabi_fsub+0xe0>
 8000f84:	20fe      	movs	r0, #254	@ 0xfe
 8000f86:	1c6a      	adds	r2, r5, #1
 8000f88:	4210      	tst	r0, r2
 8000f8a:	d112      	bne.n	8000fb2 <__aeabi_fsub+0x1ee>
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	d152      	bne.n	8001036 <__aeabi_fsub+0x272>
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d07c      	beq.n	800108e <__aeabi_fsub+0x2ca>
 8000f94:	2e00      	cmp	r6, #0
 8000f96:	d0bb      	beq.n	8000f10 <__aeabi_fsub+0x14c>
 8000f98:	1b9a      	subs	r2, r3, r6
 8000f9a:	0150      	lsls	r0, r2, #5
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_fsub+0x1dc>
 8000f9e:	e08b      	b.n	80010b8 <__aeabi_fsub+0x2f4>
 8000fa0:	2401      	movs	r4, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	1af3      	subs	r3, r6, r3
 8000fa6:	400c      	ands	r4, r1
 8000fa8:	e7e8      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000faa:	4b56      	ldr	r3, [pc, #344]	@ (8001104 <__aeabi_fsub+0x340>)
 8000fac:	1a2a      	subs	r2, r5, r0
 8000fae:	403b      	ands	r3, r7
 8000fb0:	e7e4      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000fb2:	1b9f      	subs	r7, r3, r6
 8000fb4:	017a      	lsls	r2, r7, #5
 8000fb6:	d446      	bmi.n	8001046 <__aeabi_fsub+0x282>
 8000fb8:	2f00      	cmp	r7, #0
 8000fba:	d1cd      	bne.n	8000f58 <__aeabi_fsub+0x194>
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e777      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 8000fc4:	199b      	adds	r3, r3, r6
 8000fc6:	2501      	movs	r5, #1
 8000fc8:	3201      	adds	r2, #1
 8000fca:	0159      	lsls	r1, r3, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x20c>
 8000fce:	e760      	b.n	8000e92 <__aeabi_fsub+0xce>
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	484d      	ldr	r0, [pc, #308]	@ (8001108 <__aeabi_fsub+0x344>)
 8000fd4:	4019      	ands	r1, r3
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	4003      	ands	r3, r0
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	e7ce      	b.n	8000f7c <__aeabi_fsub+0x1b8>
 8000fde:	1e57      	subs	r7, r2, #1
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d05a      	beq.n	800109a <__aeabi_fsub+0x2d6>
 8000fe4:	000c      	movs	r4, r1
 8000fe6:	2aff      	cmp	r2, #255	@ 0xff
 8000fe8:	d033      	beq.n	8001052 <__aeabi_fsub+0x28e>
 8000fea:	2201      	movs	r2, #1
 8000fec:	2f1b      	cmp	r7, #27
 8000fee:	dc07      	bgt.n	8001000 <__aeabi_fsub+0x23c>
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	1bc9      	subs	r1, r1, r7
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	408b      	lsls	r3, r1
 8000ff8:	40fa      	lsrs	r2, r7
 8000ffa:	1e59      	subs	r1, r3, #1
 8000ffc:	418b      	sbcs	r3, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	0005      	movs	r5, r0
 8001002:	1ab3      	subs	r3, r6, r2
 8001004:	e743      	b.n	8000e8e <__aeabi_fsub+0xca>
 8001006:	2d00      	cmp	r5, #0
 8001008:	d123      	bne.n	8001052 <__aeabi_fsub+0x28e>
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	2b00      	cmp	r3, #0
 800100e:	d09b      	beq.n	8000f48 <__aeabi_fsub+0x184>
 8001010:	1e51      	subs	r1, r2, #1
 8001012:	2a01      	cmp	r2, #1
 8001014:	d0d6      	beq.n	8000fc4 <__aeabi_fsub+0x200>
 8001016:	2aff      	cmp	r2, #255	@ 0xff
 8001018:	d01b      	beq.n	8001052 <__aeabi_fsub+0x28e>
 800101a:	291b      	cmp	r1, #27
 800101c:	dd2c      	ble.n	8001078 <__aeabi_fsub+0x2b4>
 800101e:	0002      	movs	r2, r0
 8001020:	1c73      	adds	r3, r6, #1
 8001022:	e73a      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8001024:	2aff      	cmp	r2, #255	@ 0xff
 8001026:	d088      	beq.n	8000f3a <__aeabi_fsub+0x176>
 8001028:	199b      	adds	r3, r3, r6
 800102a:	085b      	lsrs	r3, r3, #1
 800102c:	0759      	lsls	r1, r3, #29
 800102e:	d000      	beq.n	8001032 <__aeabi_fsub+0x26e>
 8001030:	e733      	b.n	8000e9a <__aeabi_fsub+0xd6>
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	e76e      	b.n	8000f14 <__aeabi_fsub+0x150>
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <__aeabi_fsub+0x298>
 800103a:	2e00      	cmp	r6, #0
 800103c:	d043      	beq.n	80010c6 <__aeabi_fsub+0x302>
 800103e:	2401      	movs	r4, #1
 8001040:	0033      	movs	r3, r6
 8001042:	400c      	ands	r4, r1
 8001044:	e706      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001046:	2401      	movs	r4, #1
 8001048:	1af7      	subs	r7, r6, r3
 800104a:	400c      	ands	r4, r1
 800104c:	e784      	b.n	8000f58 <__aeabi_fsub+0x194>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <__aeabi_fsub+0x298>
 8001052:	0033      	movs	r3, r6
 8001054:	e6fe      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001056:	2501      	movs	r5, #1
 8001058:	1b9b      	subs	r3, r3, r6
 800105a:	e718      	b.n	8000e8e <__aeabi_fsub+0xca>
 800105c:	2e00      	cmp	r6, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x29e>
 8001060:	e6f8      	b.n	8000e54 <__aeabi_fsub+0x90>
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	03d2      	lsls	r2, r2, #15
 8001066:	4297      	cmp	r7, r2
 8001068:	d304      	bcc.n	8001074 <__aeabi_fsub+0x2b0>
 800106a:	4594      	cmp	ip, r2
 800106c:	d202      	bcs.n	8001074 <__aeabi_fsub+0x2b0>
 800106e:	2401      	movs	r4, #1
 8001070:	0033      	movs	r3, r6
 8001072:	400c      	ands	r4, r1
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	e6f1      	b.n	8000e5c <__aeabi_fsub+0x98>
 8001078:	001a      	movs	r2, r3
 800107a:	2520      	movs	r5, #32
 800107c:	40ca      	lsrs	r2, r1
 800107e:	1a69      	subs	r1, r5, r1
 8001080:	408b      	lsls	r3, r1
 8001082:	1e59      	subs	r1, r3, #1
 8001084:	418b      	sbcs	r3, r1
 8001086:	4313      	orrs	r3, r2
 8001088:	0005      	movs	r5, r0
 800108a:	199b      	adds	r3, r3, r6
 800108c:	e750      	b.n	8000f30 <__aeabi_fsub+0x16c>
 800108e:	2e00      	cmp	r6, #0
 8001090:	d094      	beq.n	8000fbc <__aeabi_fsub+0x1f8>
 8001092:	2401      	movs	r4, #1
 8001094:	0033      	movs	r3, r6
 8001096:	400c      	ands	r4, r1
 8001098:	e73a      	b.n	8000f10 <__aeabi_fsub+0x14c>
 800109a:	000c      	movs	r4, r1
 800109c:	2501      	movs	r5, #1
 800109e:	1af3      	subs	r3, r6, r3
 80010a0:	e6f5      	b.n	8000e8e <__aeabi_fsub+0xca>
 80010a2:	0033      	movs	r3, r6
 80010a4:	e734      	b.n	8000f10 <__aeabi_fsub+0x14c>
 80010a6:	199b      	adds	r3, r3, r6
 80010a8:	2200      	movs	r2, #0
 80010aa:	0159      	lsls	r1, r3, #5
 80010ac:	d5c1      	bpl.n	8001032 <__aeabi_fsub+0x26e>
 80010ae:	4a15      	ldr	r2, [pc, #84]	@ (8001104 <__aeabi_fsub+0x340>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	2201      	movs	r2, #1
 80010b6:	e72d      	b.n	8000f14 <__aeabi_fsub+0x150>
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d100      	bne.n	80010be <__aeabi_fsub+0x2fa>
 80010bc:	e77e      	b.n	8000fbc <__aeabi_fsub+0x1f8>
 80010be:	0013      	movs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	e726      	b.n	8000f14 <__aeabi_fsub+0x150>
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	2400      	movs	r4, #0
 80010ca:	20ff      	movs	r0, #255	@ 0xff
 80010cc:	03db      	lsls	r3, r3, #15
 80010ce:	e6f1      	b.n	8000eb4 <__aeabi_fsub+0xf0>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x312>
 80010d4:	e756      	b.n	8000f84 <__aeabi_fsub+0x1c0>
 80010d6:	1b47      	subs	r7, r0, r5
 80010d8:	003a      	movs	r2, r7
 80010da:	2d00      	cmp	r5, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x31c>
 80010de:	e730      	b.n	8000f42 <__aeabi_fsub+0x17e>
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	04d2      	lsls	r2, r2, #19
 80010e4:	000c      	movs	r4, r1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	e77f      	b.n	8000fea <__aeabi_fsub+0x226>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_fsub+0x32c>
 80010ee:	e701      	b.n	8000ef4 <__aeabi_fsub+0x130>
 80010f0:	1b41      	subs	r1, r0, r5
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d101      	bne.n	80010fa <__aeabi_fsub+0x336>
 80010f6:	000a      	movs	r2, r1
 80010f8:	e788      	b.n	800100c <__aeabi_fsub+0x248>
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	04d2      	lsls	r2, r2, #19
 80010fe:	4313      	orrs	r3, r2
 8001100:	e78b      	b.n	800101a <__aeabi_fsub+0x256>
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	fbffffff 	.word	0xfbffffff
 8001108:	7dffffff 	.word	0x7dffffff

0800110c <__aeabi_fcmpun>:
 800110c:	0243      	lsls	r3, r0, #9
 800110e:	024a      	lsls	r2, r1, #9
 8001110:	0040      	lsls	r0, r0, #1
 8001112:	0049      	lsls	r1, r1, #1
 8001114:	0a5b      	lsrs	r3, r3, #9
 8001116:	0a52      	lsrs	r2, r2, #9
 8001118:	0e09      	lsrs	r1, r1, #24
 800111a:	0e00      	lsrs	r0, r0, #24
 800111c:	28ff      	cmp	r0, #255	@ 0xff
 800111e:	d006      	beq.n	800112e <__aeabi_fcmpun+0x22>
 8001120:	2000      	movs	r0, #0
 8001122:	29ff      	cmp	r1, #255	@ 0xff
 8001124:	d102      	bne.n	800112c <__aeabi_fcmpun+0x20>
 8001126:	1e53      	subs	r3, r2, #1
 8001128:	419a      	sbcs	r2, r3
 800112a:	0010      	movs	r0, r2
 800112c:	4770      	bx	lr
 800112e:	38fe      	subs	r0, #254	@ 0xfe
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1fb      	bne.n	800112c <__aeabi_fcmpun+0x20>
 8001134:	e7f4      	b.n	8001120 <__aeabi_fcmpun+0x14>
 8001136:	46c0      	nop			@ (mov r8, r8)

08001138 <__aeabi_i2f>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	2800      	cmp	r0, #0
 800113c:	d013      	beq.n	8001166 <__aeabi_i2f+0x2e>
 800113e:	17c3      	asrs	r3, r0, #31
 8001140:	18c5      	adds	r5, r0, r3
 8001142:	405d      	eors	r5, r3
 8001144:	0fc4      	lsrs	r4, r0, #31
 8001146:	0028      	movs	r0, r5
 8001148:	f000 f842 	bl	80011d0 <__clzsi2>
 800114c:	239e      	movs	r3, #158	@ 0x9e
 800114e:	0001      	movs	r1, r0
 8001150:	1a1b      	subs	r3, r3, r0
 8001152:	2b96      	cmp	r3, #150	@ 0x96
 8001154:	dc0f      	bgt.n	8001176 <__aeabi_i2f+0x3e>
 8001156:	2808      	cmp	r0, #8
 8001158:	d034      	beq.n	80011c4 <__aeabi_i2f+0x8c>
 800115a:	3908      	subs	r1, #8
 800115c:	408d      	lsls	r5, r1
 800115e:	026d      	lsls	r5, r5, #9
 8001160:	0a6d      	lsrs	r5, r5, #9
 8001162:	b2d8      	uxtb	r0, r3
 8001164:	e002      	b.n	800116c <__aeabi_i2f+0x34>
 8001166:	2400      	movs	r4, #0
 8001168:	2000      	movs	r0, #0
 800116a:	2500      	movs	r5, #0
 800116c:	05c0      	lsls	r0, r0, #23
 800116e:	4328      	orrs	r0, r5
 8001170:	07e4      	lsls	r4, r4, #31
 8001172:	4320      	orrs	r0, r4
 8001174:	bd70      	pop	{r4, r5, r6, pc}
 8001176:	2b99      	cmp	r3, #153	@ 0x99
 8001178:	dc16      	bgt.n	80011a8 <__aeabi_i2f+0x70>
 800117a:	1f42      	subs	r2, r0, #5
 800117c:	2805      	cmp	r0, #5
 800117e:	d000      	beq.n	8001182 <__aeabi_i2f+0x4a>
 8001180:	4095      	lsls	r5, r2
 8001182:	002a      	movs	r2, r5
 8001184:	4811      	ldr	r0, [pc, #68]	@ (80011cc <__aeabi_i2f+0x94>)
 8001186:	4002      	ands	r2, r0
 8001188:	076e      	lsls	r6, r5, #29
 800118a:	d009      	beq.n	80011a0 <__aeabi_i2f+0x68>
 800118c:	260f      	movs	r6, #15
 800118e:	4035      	ands	r5, r6
 8001190:	2d04      	cmp	r5, #4
 8001192:	d005      	beq.n	80011a0 <__aeabi_i2f+0x68>
 8001194:	3204      	adds	r2, #4
 8001196:	0155      	lsls	r5, r2, #5
 8001198:	d502      	bpl.n	80011a0 <__aeabi_i2f+0x68>
 800119a:	239f      	movs	r3, #159	@ 0x9f
 800119c:	4002      	ands	r2, r0
 800119e:	1a5b      	subs	r3, r3, r1
 80011a0:	0192      	lsls	r2, r2, #6
 80011a2:	0a55      	lsrs	r5, r2, #9
 80011a4:	b2d8      	uxtb	r0, r3
 80011a6:	e7e1      	b.n	800116c <__aeabi_i2f+0x34>
 80011a8:	2205      	movs	r2, #5
 80011aa:	1a12      	subs	r2, r2, r0
 80011ac:	0028      	movs	r0, r5
 80011ae:	40d0      	lsrs	r0, r2
 80011b0:	0002      	movs	r2, r0
 80011b2:	0008      	movs	r0, r1
 80011b4:	301b      	adds	r0, #27
 80011b6:	4085      	lsls	r5, r0
 80011b8:	0028      	movs	r0, r5
 80011ba:	1e45      	subs	r5, r0, #1
 80011bc:	41a8      	sbcs	r0, r5
 80011be:	4302      	orrs	r2, r0
 80011c0:	0015      	movs	r5, r2
 80011c2:	e7de      	b.n	8001182 <__aeabi_i2f+0x4a>
 80011c4:	026d      	lsls	r5, r5, #9
 80011c6:	2096      	movs	r0, #150	@ 0x96
 80011c8:	0a6d      	lsrs	r5, r5, #9
 80011ca:	e7cf      	b.n	800116c <__aeabi_i2f+0x34>
 80011cc:	fbffffff 	.word	0xfbffffff

080011d0 <__clzsi2>:
 80011d0:	211c      	movs	r1, #28
 80011d2:	2301      	movs	r3, #1
 80011d4:	041b      	lsls	r3, r3, #16
 80011d6:	4298      	cmp	r0, r3
 80011d8:	d301      	bcc.n	80011de <__clzsi2+0xe>
 80011da:	0c00      	lsrs	r0, r0, #16
 80011dc:	3910      	subs	r1, #16
 80011de:	0a1b      	lsrs	r3, r3, #8
 80011e0:	4298      	cmp	r0, r3
 80011e2:	d301      	bcc.n	80011e8 <__clzsi2+0x18>
 80011e4:	0a00      	lsrs	r0, r0, #8
 80011e6:	3908      	subs	r1, #8
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	4298      	cmp	r0, r3
 80011ec:	d301      	bcc.n	80011f2 <__clzsi2+0x22>
 80011ee:	0900      	lsrs	r0, r0, #4
 80011f0:	3904      	subs	r1, #4
 80011f2:	a202      	add	r2, pc, #8	@ (adr r2, 80011fc <__clzsi2+0x2c>)
 80011f4:	5c10      	ldrb	r0, [r2, r0]
 80011f6:	1840      	adds	r0, r0, r1
 80011f8:	4770      	bx	lr
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	02020304 	.word	0x02020304
 8001200:	01010101 	.word	0x01010101
	...

0800120c <waitInt>:

uint32_t counter;

// Wait for an interrupt to occur or timeout in 200ms // not used
static uint8_t waitInt(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint32_t timeOut = HAL_GetTick() + RESET_DELAY;
 8001212:	f002 fcb9 	bl	8003b88 <HAL_GetTick>
 8001216:	0003      	movs	r3, r0
 8001218:	33c8      	adds	r3, #200	@ 0xc8
 800121a:	607b      	str	r3, [r7, #4]
	while(timeOut > HAL_GetTick())
 800121c:	e009      	b.n	8001232 <waitInt+0x26>
	{
		if(BNO_Ready)
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <waitInt+0x3c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <waitInt+0x26>
		{
			BNO_Ready = 0;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <waitInt+0x3c>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
			return 1;
 800122e:	2301      	movs	r3, #1
 8001230:	e006      	b.n	8001240 <waitInt+0x34>
	while(timeOut > HAL_GetTick())
 8001232:	f002 fca9 	bl	8003b88 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4293      	cmp	r3, r2
 800123c:	d8ef      	bhi.n	800121e <waitInt+0x12>
		}
	}
	return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200005a0 	.word	0x200005a0

0800124c <delay_us>:

// Delay microseconds
static void delay_us(uint32_t t)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uint32_t now = (uint32_t)__HAL_TIM_GET_COUNTER(&htim14);
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <delay_us+0x34>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	60fb      	str	r3, [r7, #12]
	uint32_t start = now;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	60bb      	str	r3, [r7, #8]
	while ((now - start) < t)
 8001260:	e003      	b.n	800126a <delay_us+0x1e>
	{
		now = (uint32_t)__HAL_TIM_GET_COUNTER(&htim14);
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <delay_us+0x34>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001268:	60fb      	str	r3, [r7, #12]
	while ((now - start) < t)
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d8f5      	bhi.n	8001262 <delay_us+0x16>
	}
}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b004      	add	sp, #16
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200004c0 	.word	0x200004c0

08001284 <invSqrt>:

#ifdef USE_FOR_TELESCOPE
// get 1/sqrt(x)
static float invSqrt(const float x)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    float halfx = 0.5f * x;
 800128c:	21fc      	movs	r1, #252	@ 0xfc
 800128e:	0589      	lsls	r1, r1, #22
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fc59 	bl	8000b48 <__aeabi_fmul>
 8001296:	1c03      	adds	r3, r0, #0
 8001298:	617b      	str	r3, [r7, #20]
    float y = x;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	613b      	str	r3, [r7, #16]
    int i = *(int*)&y;  // Interpret float bits as integer
 800129e:	2310      	movs	r3, #16
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i >> 1);  // Magic number for fast approximation
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	105b      	asrs	r3, r3, #1
 80012aa:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <invSqrt+0x74>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	60fb      	str	r3, [r7, #12]
    y = *(float*)&i;
 80012b0:	230c      	movs	r3, #12
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));  // Refine approximation
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	1c18      	adds	r0, r3, #0
 80012be:	f7ff fc43 	bl	8000b48 <__aeabi_fmul>
 80012c2:	1c03      	adds	r3, r0, #0
 80012c4:	1c1a      	adds	r2, r3, #0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1c19      	adds	r1, r3, #0
 80012ca:	1c10      	adds	r0, r2, #0
 80012cc:	f7ff fc3c 	bl	8000b48 <__aeabi_fmul>
 80012d0:	1c03      	adds	r3, r0, #0
 80012d2:	1c19      	adds	r1, r3, #0
 80012d4:	20ff      	movs	r0, #255	@ 0xff
 80012d6:	0580      	lsls	r0, r0, #22
 80012d8:	f7ff fd74 	bl	8000dc4 <__aeabi_fsub>
 80012dc:	1c03      	adds	r3, r0, #0
 80012de:	1c1a      	adds	r2, r3, #0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1c19      	adds	r1, r3, #0
 80012e4:	1c10      	adds	r0, r2, #0
 80012e6:	f7ff fc2f 	bl	8000b48 <__aeabi_fmul>
 80012ea:	1c03      	adds	r3, r0, #0
 80012ec:	613b      	str	r3, [r7, #16]
    return y;
 80012ee:	693b      	ldr	r3, [r7, #16]
}
 80012f0:	1c18      	adds	r0, r3, #0
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b006      	add	sp, #24
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	5f3759df 	.word	0x5f3759df

080012fc <quaternionUpdate>:

// Update structures quatIJKR and angles
static void quaternionUpdate(const BNO_RotationVectorWAcc_t *inRotVector)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b093      	sub	sp, #76	@ 0x4c
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    // Normalize quaternion
    float norm = invSqrt(inRotVector->I * inRotVector->I +
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	7859      	ldrb	r1, [r3, #1]
 800130a:	0209      	lsls	r1, r1, #8
 800130c:	430a      	orrs	r2, r1
 800130e:	7899      	ldrb	r1, [r3, #2]
 8001310:	0409      	lsls	r1, r1, #16
 8001312:	430a      	orrs	r2, r1
 8001314:	78db      	ldrb	r3, [r3, #3]
 8001316:	061b      	lsls	r3, r3, #24
 8001318:	4313      	orrs	r3, r2
 800131a:	1c18      	adds	r0, r3, #0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	7859      	ldrb	r1, [r3, #1]
 8001322:	0209      	lsls	r1, r1, #8
 8001324:	430a      	orrs	r2, r1
 8001326:	7899      	ldrb	r1, [r3, #2]
 8001328:	0409      	lsls	r1, r1, #16
 800132a:	430a      	orrs	r2, r1
 800132c:	78db      	ldrb	r3, [r3, #3]
 800132e:	061b      	lsls	r3, r3, #24
 8001330:	4313      	orrs	r3, r2
 8001332:	1c19      	adds	r1, r3, #0
 8001334:	f7ff fc08 	bl	8000b48 <__aeabi_fmul>
 8001338:	1c03      	adds	r3, r0, #0
 800133a:	1c1c      	adds	r4, r3, #0
                         inRotVector->J * inRotVector->J +
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	791a      	ldrb	r2, [r3, #4]
 8001340:	7959      	ldrb	r1, [r3, #5]
 8001342:	0209      	lsls	r1, r1, #8
 8001344:	430a      	orrs	r2, r1
 8001346:	7999      	ldrb	r1, [r3, #6]
 8001348:	0409      	lsls	r1, r1, #16
 800134a:	430a      	orrs	r2, r1
 800134c:	79db      	ldrb	r3, [r3, #7]
 800134e:	061b      	lsls	r3, r3, #24
 8001350:	4313      	orrs	r3, r2
 8001352:	1c18      	adds	r0, r3, #0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791a      	ldrb	r2, [r3, #4]
 8001358:	7959      	ldrb	r1, [r3, #5]
 800135a:	0209      	lsls	r1, r1, #8
 800135c:	430a      	orrs	r2, r1
 800135e:	7999      	ldrb	r1, [r3, #6]
 8001360:	0409      	lsls	r1, r1, #16
 8001362:	430a      	orrs	r2, r1
 8001364:	79db      	ldrb	r3, [r3, #7]
 8001366:	061b      	lsls	r3, r3, #24
 8001368:	4313      	orrs	r3, r2
 800136a:	1c19      	adds	r1, r3, #0
 800136c:	f7ff fbec 	bl	8000b48 <__aeabi_fmul>
 8001370:	1c03      	adds	r3, r0, #0
    float norm = invSqrt(inRotVector->I * inRotVector->I +
 8001372:	1c19      	adds	r1, r3, #0
 8001374:	1c20      	adds	r0, r4, #0
 8001376:	f7ff f877 	bl	8000468 <__aeabi_fadd>
 800137a:	1c03      	adds	r3, r0, #0
 800137c:	1c1c      	adds	r4, r3, #0
                         inRotVector->K * inRotVector->K +
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7a1a      	ldrb	r2, [r3, #8]
 8001382:	7a59      	ldrb	r1, [r3, #9]
 8001384:	0209      	lsls	r1, r1, #8
 8001386:	430a      	orrs	r2, r1
 8001388:	7a99      	ldrb	r1, [r3, #10]
 800138a:	0409      	lsls	r1, r1, #16
 800138c:	430a      	orrs	r2, r1
 800138e:	7adb      	ldrb	r3, [r3, #11]
 8001390:	061b      	lsls	r3, r3, #24
 8001392:	4313      	orrs	r3, r2
 8001394:	1c18      	adds	r0, r3, #0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7a1a      	ldrb	r2, [r3, #8]
 800139a:	7a59      	ldrb	r1, [r3, #9]
 800139c:	0209      	lsls	r1, r1, #8
 800139e:	430a      	orrs	r2, r1
 80013a0:	7a99      	ldrb	r1, [r3, #10]
 80013a2:	0409      	lsls	r1, r1, #16
 80013a4:	430a      	orrs	r2, r1
 80013a6:	7adb      	ldrb	r3, [r3, #11]
 80013a8:	061b      	lsls	r3, r3, #24
 80013aa:	4313      	orrs	r3, r2
 80013ac:	1c19      	adds	r1, r3, #0
 80013ae:	f7ff fbcb 	bl	8000b48 <__aeabi_fmul>
 80013b2:	1c03      	adds	r3, r0, #0
                         inRotVector->J * inRotVector->J +
 80013b4:	1c19      	adds	r1, r3, #0
 80013b6:	1c20      	adds	r0, r4, #0
 80013b8:	f7ff f856 	bl	8000468 <__aeabi_fadd>
 80013bc:	1c03      	adds	r3, r0, #0
 80013be:	1c1c      	adds	r4, r3, #0
                         inRotVector->Real * inRotVector->Real);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b1a      	ldrb	r2, [r3, #12]
 80013c4:	7b59      	ldrb	r1, [r3, #13]
 80013c6:	0209      	lsls	r1, r1, #8
 80013c8:	430a      	orrs	r2, r1
 80013ca:	7b99      	ldrb	r1, [r3, #14]
 80013cc:	0409      	lsls	r1, r1, #16
 80013ce:	430a      	orrs	r2, r1
 80013d0:	7bdb      	ldrb	r3, [r3, #15]
 80013d2:	061b      	lsls	r3, r3, #24
 80013d4:	4313      	orrs	r3, r2
 80013d6:	1c18      	adds	r0, r3, #0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7b1a      	ldrb	r2, [r3, #12]
 80013dc:	7b59      	ldrb	r1, [r3, #13]
 80013de:	0209      	lsls	r1, r1, #8
 80013e0:	430a      	orrs	r2, r1
 80013e2:	7b99      	ldrb	r1, [r3, #14]
 80013e4:	0409      	lsls	r1, r1, #16
 80013e6:	430a      	orrs	r2, r1
 80013e8:	7bdb      	ldrb	r3, [r3, #15]
 80013ea:	061b      	lsls	r3, r3, #24
 80013ec:	4313      	orrs	r3, r2
 80013ee:	1c19      	adds	r1, r3, #0
 80013f0:	f7ff fbaa 	bl	8000b48 <__aeabi_fmul>
 80013f4:	1c03      	adds	r3, r0, #0
    float norm = invSqrt(inRotVector->I * inRotVector->I +
 80013f6:	1c19      	adds	r1, r3, #0
 80013f8:	1c20      	adds	r0, r4, #0
 80013fa:	f7ff f835 	bl	8000468 <__aeabi_fadd>
 80013fe:	1c03      	adds	r3, r0, #0
 8001400:	1c18      	adds	r0, r3, #0
 8001402:	f7ff ff3f 	bl	8001284 <invSqrt>
 8001406:	1c03      	adds	r3, r0, #0
 8001408:	647b      	str	r3, [r7, #68]	@ 0x44

    // Apply normalization to quaternion components
    float q1 = inRotVector->I * norm;  // x
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	7859      	ldrb	r1, [r3, #1]
 8001410:	0209      	lsls	r1, r1, #8
 8001412:	430a      	orrs	r2, r1
 8001414:	7899      	ldrb	r1, [r3, #2]
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	430a      	orrs	r2, r1
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	4313      	orrs	r3, r2
 8001420:	1c19      	adds	r1, r3, #0
 8001422:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001424:	f7ff fb90 	bl	8000b48 <__aeabi_fmul>
 8001428:	1c03      	adds	r3, r0, #0
 800142a:	643b      	str	r3, [r7, #64]	@ 0x40
    float q2 = inRotVector->J * norm;  // y
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	791a      	ldrb	r2, [r3, #4]
 8001430:	7959      	ldrb	r1, [r3, #5]
 8001432:	0209      	lsls	r1, r1, #8
 8001434:	430a      	orrs	r2, r1
 8001436:	7999      	ldrb	r1, [r3, #6]
 8001438:	0409      	lsls	r1, r1, #16
 800143a:	430a      	orrs	r2, r1
 800143c:	79db      	ldrb	r3, [r3, #7]
 800143e:	061b      	lsls	r3, r3, #24
 8001440:	4313      	orrs	r3, r2
 8001442:	1c19      	adds	r1, r3, #0
 8001444:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001446:	f7ff fb7f 	bl	8000b48 <__aeabi_fmul>
 800144a:	1c03      	adds	r3, r0, #0
 800144c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float q3 = inRotVector->K * norm;  // z
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7a1a      	ldrb	r2, [r3, #8]
 8001452:	7a59      	ldrb	r1, [r3, #9]
 8001454:	0209      	lsls	r1, r1, #8
 8001456:	430a      	orrs	r2, r1
 8001458:	7a99      	ldrb	r1, [r3, #10]
 800145a:	0409      	lsls	r1, r1, #16
 800145c:	430a      	orrs	r2, r1
 800145e:	7adb      	ldrb	r3, [r3, #11]
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	4313      	orrs	r3, r2
 8001464:	1c19      	adds	r1, r3, #0
 8001466:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001468:	f7ff fb6e 	bl	8000b48 <__aeabi_fmul>
 800146c:	1c03      	adds	r3, r0, #0
 800146e:	63bb      	str	r3, [r7, #56]	@ 0x38
    float q4 = inRotVector->Real * norm;  // w
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7b1a      	ldrb	r2, [r3, #12]
 8001474:	7b59      	ldrb	r1, [r3, #13]
 8001476:	0209      	lsls	r1, r1, #8
 8001478:	430a      	orrs	r2, r1
 800147a:	7b99      	ldrb	r1, [r3, #14]
 800147c:	0409      	lsls	r1, r1, #16
 800147e:	430a      	orrs	r2, r1
 8001480:	7bdb      	ldrb	r3, [r3, #15]
 8001482:	061b      	lsls	r3, r3, #24
 8001484:	4313      	orrs	r3, r2
 8001486:	1c19      	adds	r1, r3, #0
 8001488:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800148a:	f7ff fb5d 	bl	8000b48 <__aeabi_fmul>
 800148e:	1c03      	adds	r3, r0, #0
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34

    // Precompute repeated terms to save computation time
    float q1q1 = q1 * q1;
 8001492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001494:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001496:	f7ff fb57 	bl	8000b48 <__aeabi_fmul>
 800149a:	1c03      	adds	r3, r0, #0
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
    float q2q2 = q2 * q2;
 800149e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80014a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80014a2:	f7ff fb51 	bl	8000b48 <__aeabi_fmul>
 80014a6:	1c03      	adds	r3, r0, #0
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float q3q3 = q3 * q3;
 80014aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80014ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80014ae:	f7ff fb4b 	bl	8000b48 <__aeabi_fmul>
 80014b2:	1c03      	adds	r3, r0, #0
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    float q4q4 = q4 * q4;
 80014b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80014ba:	f7ff fb45 	bl	8000b48 <__aeabi_fmul>
 80014be:	1c03      	adds	r3, r0, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24

    float q2q3 = q2 * q3;
 80014c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80014c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80014c6:	f7ff fb3f 	bl	8000b48 <__aeabi_fmul>
 80014ca:	1c03      	adds	r3, r0, #0
 80014cc:	623b      	str	r3, [r7, #32]
    float q1q4 = q1 * q4;
 80014ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80014d2:	f7ff fb39 	bl	8000b48 <__aeabi_fmul>
 80014d6:	1c03      	adds	r3, r0, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    float q2q4 = q2 * q4;
 80014da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80014de:	f7ff fb33 	bl	8000b48 <__aeabi_fmul>
 80014e2:	1c03      	adds	r3, r0, #0
 80014e4:	61bb      	str	r3, [r7, #24]
    float q1q3 = q1 * q3;
 80014e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80014e8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80014ea:	f7ff fb2d 	bl	8000b48 <__aeabi_fmul>
 80014ee:	1c03      	adds	r3, r0, #0
 80014f0:	617b      	str	r3, [r7, #20]
    float q1q2 = q1 * q2;
 80014f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80014f4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80014f6:	f7ff fb27 	bl	8000b48 <__aeabi_fmul>
 80014fa:	1c03      	adds	r3, r0, #0
 80014fc:	613b      	str	r3, [r7, #16]
    float q3q4 = q3 * q4;
 80014fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001500:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001502:	f7ff fb21 	bl	8000b48 <__aeabi_fmul>
 8001506:	1c03      	adds	r3, r0, #0
 8001508:	60fb      	str	r3, [r7, #12]

    // Calculate roll, pitch, and yaw
    rpy.Pitch = atan2f(2.0f * (q2q3 + q1q4), q1q1 + q2q2 - q3q3 - q4q4);
 800150a:	69f9      	ldr	r1, [r7, #28]
 800150c:	6a38      	ldr	r0, [r7, #32]
 800150e:	f7fe ffab 	bl	8000468 <__aeabi_fadd>
 8001512:	1c03      	adds	r3, r0, #0
 8001514:	1c19      	adds	r1, r3, #0
 8001516:	1c18      	adds	r0, r3, #0
 8001518:	f7fe ffa6 	bl	8000468 <__aeabi_fadd>
 800151c:	1c03      	adds	r3, r0, #0
 800151e:	1c1c      	adds	r4, r3, #0
 8001520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001522:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001524:	f7fe ffa0 	bl	8000468 <__aeabi_fadd>
 8001528:	1c03      	adds	r3, r0, #0
 800152a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800152c:	1c18      	adds	r0, r3, #0
 800152e:	f7ff fc49 	bl	8000dc4 <__aeabi_fsub>
 8001532:	1c03      	adds	r3, r0, #0
 8001534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001536:	1c18      	adds	r0, r3, #0
 8001538:	f7ff fc44 	bl	8000dc4 <__aeabi_fsub>
 800153c:	1c03      	adds	r3, r0, #0
 800153e:	1c19      	adds	r1, r3, #0
 8001540:	1c20      	adds	r0, r4, #0
 8001542:	f009 f979 	bl	800a838 <atan2f>
 8001546:	1c02      	adds	r2, r0, #0
 8001548:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <quaternionUpdate+0x368>)
 800154a:	605a      	str	r2, [r3, #4]
    rpy.Roll  = -asinf(2.0f * (q2q4 - q1q3));
 800154c:	6979      	ldr	r1, [r7, #20]
 800154e:	69b8      	ldr	r0, [r7, #24]
 8001550:	f7ff fc38 	bl	8000dc4 <__aeabi_fsub>
 8001554:	1c03      	adds	r3, r0, #0
 8001556:	1c19      	adds	r1, r3, #0
 8001558:	1c18      	adds	r0, r3, #0
 800155a:	f7fe ff85 	bl	8000468 <__aeabi_fadd>
 800155e:	1c03      	adds	r3, r0, #0
 8001560:	1c18      	adds	r0, r3, #0
 8001562:	f009 f949 	bl	800a7f8 <asinf>
 8001566:	1c02      	adds	r2, r0, #0
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	061b      	lsls	r3, r3, #24
 800156c:	405a      	eors	r2, r3
 800156e:	4b3d      	ldr	r3, [pc, #244]	@ (8001664 <quaternionUpdate+0x368>)
 8001570:	601a      	str	r2, [r3, #0]
    rpy.Yaw   = atan2f(2.0f * (q1q2 + q3q4), q1q1 - q2q2 - q3q3 + q4q4);
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7fe ff77 	bl	8000468 <__aeabi_fadd>
 800157a:	1c03      	adds	r3, r0, #0
 800157c:	1c19      	adds	r1, r3, #0
 800157e:	1c18      	adds	r0, r3, #0
 8001580:	f7fe ff72 	bl	8000468 <__aeabi_fadd>
 8001584:	1c03      	adds	r3, r0, #0
 8001586:	1c1c      	adds	r4, r3, #0
 8001588:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800158a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800158c:	f7ff fc1a 	bl	8000dc4 <__aeabi_fsub>
 8001590:	1c03      	adds	r3, r0, #0
 8001592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001594:	1c18      	adds	r0, r3, #0
 8001596:	f7ff fc15 	bl	8000dc4 <__aeabi_fsub>
 800159a:	1c03      	adds	r3, r0, #0
 800159c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800159e:	1c18      	adds	r0, r3, #0
 80015a0:	f7fe ff62 	bl	8000468 <__aeabi_fadd>
 80015a4:	1c03      	adds	r3, r0, #0
 80015a6:	1c19      	adds	r1, r3, #0
 80015a8:	1c20      	adds	r0, r4, #0
 80015aa:	f009 f945 	bl	800a838 <atan2f>
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <quaternionUpdate+0x368>)
 80015b2:	609a      	str	r2, [r3, #8]

    // Convert to degrees
    rpy.Pitch *= _180_DIV_PI;
 80015b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <quaternionUpdate+0x368>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	492b      	ldr	r1, [pc, #172]	@ (8001668 <quaternionUpdate+0x36c>)
 80015ba:	1c18      	adds	r0, r3, #0
 80015bc:	f7ff fac4 	bl	8000b48 <__aeabi_fmul>
 80015c0:	1c03      	adds	r3, r0, #0
 80015c2:	1c1a      	adds	r2, r3, #0
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <quaternionUpdate+0x368>)
 80015c6:	605a      	str	r2, [r3, #4]
    rpy.Roll  *= _180_DIV_PI;
 80015c8:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <quaternionUpdate+0x368>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4926      	ldr	r1, [pc, #152]	@ (8001668 <quaternionUpdate+0x36c>)
 80015ce:	1c18      	adds	r0, r3, #0
 80015d0:	f7ff faba 	bl	8000b48 <__aeabi_fmul>
 80015d4:	1c03      	adds	r3, r0, #0
 80015d6:	1c1a      	adds	r2, r3, #0
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <quaternionUpdate+0x368>)
 80015da:	601a      	str	r2, [r3, #0]
    rpy.Yaw   *= _180_DIV_PI;
 80015dc:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <quaternionUpdate+0x368>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4921      	ldr	r1, [pc, #132]	@ (8001668 <quaternionUpdate+0x36c>)
 80015e2:	1c18      	adds	r0, r3, #0
 80015e4:	f7ff fab0 	bl	8000b48 <__aeabi_fmul>
 80015e8:	1c03      	adds	r3, r0, #0
 80015ea:	1c1a      	adds	r2, r3, #0
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <quaternionUpdate+0x368>)
 80015ee:	609a      	str	r2, [r3, #8]

    // Normalize yaw to the [0, 360) range
    rpy.Yaw = (rpy.Yaw >= 0.0f) ? 360.0f - rpy.Yaw : -rpy.Yaw;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <quaternionUpdate+0x368>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2100      	movs	r1, #0
 80015f6:	1c18      	adds	r0, r3, #0
 80015f8:	f7fe ff2c 	bl	8000454 <__aeabi_fcmpge>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d008      	beq.n	8001612 <quaternionUpdate+0x316>
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <quaternionUpdate+0x368>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	1c19      	adds	r1, r3, #0
 8001606:	4819      	ldr	r0, [pc, #100]	@ (800166c <quaternionUpdate+0x370>)
 8001608:	f7ff fbdc 	bl	8000dc4 <__aeabi_fsub>
 800160c:	1c03      	adds	r3, r0, #0
 800160e:	1c1a      	adds	r2, r3, #0
 8001610:	e004      	b.n	800161c <quaternionUpdate+0x320>
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <quaternionUpdate+0x368>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2280      	movs	r2, #128	@ 0x80
 8001618:	0612      	lsls	r2, r2, #24
 800161a:	405a      	eors	r2, r3
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <quaternionUpdate+0x368>)
 800161e:	609a      	str	r2, [r3, #8]

    // Normalize pitch to the [-180, 180] range
    rpy.Pitch = (rpy.Pitch >= 0.0f) ? 180.0f - rpy.Pitch : -(rpy.Pitch + 180.0f);
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <quaternionUpdate+0x368>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2100      	movs	r1, #0
 8001626:	1c18      	adds	r0, r3, #0
 8001628:	f7fe ff14 	bl	8000454 <__aeabi_fcmpge>
 800162c:	1e03      	subs	r3, r0, #0
 800162e:	d008      	beq.n	8001642 <quaternionUpdate+0x346>
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <quaternionUpdate+0x368>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	1c19      	adds	r1, r3, #0
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <quaternionUpdate+0x374>)
 8001638:	f7ff fbc4 	bl	8000dc4 <__aeabi_fsub>
 800163c:	1c03      	adds	r3, r0, #0
 800163e:	1c1a      	adds	r2, r3, #0
 8001640:	e00a      	b.n	8001658 <quaternionUpdate+0x35c>
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <quaternionUpdate+0x368>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	490a      	ldr	r1, [pc, #40]	@ (8001670 <quaternionUpdate+0x374>)
 8001648:	1c18      	adds	r0, r3, #0
 800164a:	f7fe ff0d 	bl	8000468 <__aeabi_fadd>
 800164e:	1c03      	adds	r3, r0, #0
 8001650:	1c1a      	adds	r2, r3, #0
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	405a      	eors	r2, r3
 8001658:	4b02      	ldr	r3, [pc, #8]	@ (8001664 <quaternionUpdate+0x368>)
 800165a:	605a      	str	r2, [r3, #4]
}
 800165c:	46c0      	nop			@ (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b013      	add	sp, #76	@ 0x4c
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	20000270 	.word	0x20000270
 8001668:	42652ee1 	.word	0x42652ee1
 800166c:	43b40000 	.word	0x43b40000
 8001670:	43340000 	.word	0x43340000

08001674 <resetHeader>:
#endif

// Sets to buffrIO first 21 bytes to 0
static void resetHeader(const uint8_t id)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	0002      	movs	r2, r0
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	701a      	strb	r2, [r3, #0]
	memset(bufferIO, 0, TX_PACKET_SIZE);
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <resetHeader+0x28>)
 8001682:	2215      	movs	r2, #21
 8001684:	2100      	movs	r1, #0
 8001686:	0018      	movs	r0, r3
 8001688:	f009 f87a 	bl	800a780 <memset>
	bufferIO[4] = id;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <resetHeader+0x28>)
 800168e:	1dfa      	adds	r2, r7, #7
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	711a      	strb	r2, [r3, #4]
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000f4 	.word	0x200000f4

080016a0 <sendPacket>:

// Send a packet data to BNO

static HAL_StatusTypeDef sendPacket(const uint8_t channelNumber)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	0002      	movs	r2, r0
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	701a      	strb	r2, [r3, #0]
    // dataLength includes the SHTP_HEADER_SIZE
    uint8_t dataLength = 0;
 80016ac:	240f      	movs	r4, #15
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    bufferIO[2] = channelNumber;
 80016b4:	4b31      	ldr	r3, [pc, #196]	@ (800177c <sendPacket+0xdc>)
 80016b6:	1dfa      	adds	r2, r7, #7
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	709a      	strb	r2, [r3, #2]
    bufferIO[3] = sequenceNumber[channelNumber]++;
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001780 <sendPacket+0xe0>)
 80016c2:	5cd2      	ldrb	r2, [r2, r3]
 80016c4:	1c51      	adds	r1, r2, #1
 80016c6:	b2c8      	uxtb	r0, r1
 80016c8:	492d      	ldr	r1, [pc, #180]	@ (8001780 <sendPacket+0xe0>)
 80016ca:	54c8      	strb	r0, [r1, r3]
 80016cc:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <sendPacket+0xdc>)
 80016ce:	70da      	strb	r2, [r3, #3]

    // Determine the data length based on the channel type and command
    if (bufferIO[2] == CHANNEL_EXECUTABLE)
 80016d0:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <sendPacket+0xdc>)
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d103      	bne.n	80016e0 <sendPacket+0x40>
    {
        dataLength = 5;
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	2205      	movs	r2, #5
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e028      	b.n	8001732 <sendPacket+0x92>
    } else {
        switch (bufferIO[4])
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <sendPacket+0xdc>)
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	2bfe      	cmp	r3, #254	@ 0xfe
 80016e6:	dc24      	bgt.n	8001732 <sendPacket+0x92>
 80016e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80016ea:	da06      	bge.n	80016fa <sendPacket+0x5a>
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d016      	beq.n	800171e <sendPacket+0x7e>
 80016f0:	db1f      	blt.n	8001732 <sendPacket+0x92>
 80016f2:	3b06      	subs	r3, #6
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d81c      	bhi.n	8001732 <sendPacket+0x92>
 80016f8:	e011      	b.n	800171e <sendPacket+0x7e>
 80016fa:	3bf0      	subs	r3, #240	@ 0xf0
 80016fc:	2b0e      	cmp	r3, #14
 80016fe:	d818      	bhi.n	8001732 <sendPacket+0x92>
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <sendPacket+0xe4>)
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	469f      	mov	pc, r3
        {
            case REPORT_SENSOR_FLUSH_REQUEST:
            case REPORT_GET_FEATURE_REQUEST:
            case REPORT_PRODUCT_ID_REQUEST:
                dataLength = 6;
 800170a:	230f      	movs	r3, #15
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2206      	movs	r2, #6
 8001710:	701a      	strb	r2, [r3, #0]
                break;
 8001712:	e00e      	b.n	8001732 <sendPacket+0x92>
            case REPORT_FRS_READ_REQUEST:
                dataLength = 12;
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	220c      	movs	r2, #12
 800171a:	701a      	strb	r2, [r3, #0]
                break;
 800171c:	e009      	b.n	8001732 <sendPacket+0x92>
            case COMMAND_ME_CALIBRATE:
            case COMMAND_TARE:
            case COMMAND_SAVE_DCD:
            case REPORT_COMMAND_REQUEST:
            case REPORT_FRS_WRITE_REQUEST:
                dataLength = 16;
 800171e:	230f      	movs	r3, #15
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	2210      	movs	r2, #16
 8001724:	701a      	strb	r2, [r3, #0]
                break;
 8001726:	e004      	b.n	8001732 <sendPacket+0x92>
            case REPORT_SET_FEATURE_COMMAND:
                dataLength = 21;
 8001728:	230f      	movs	r3, #15
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	2215      	movs	r2, #21
 800172e:	701a      	strb	r2, [r3, #0]
                break;
 8001730:	46c0      	nop			@ (mov r8, r8)
        }
    }

    bufferIO[0] = dataLength & 0xFF;
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <sendPacket+0xdc>)
 8001734:	210f      	movs	r1, #15
 8001736:	187a      	adds	r2, r7, r1
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	701a      	strb	r2, [r3, #0]
    bufferIO[1] = (dataLength >> 8) & 0x7F;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <sendPacket+0xdc>)
 800173e:	2200      	movs	r2, #0
 8001740:	705a      	strb	r2, [r3, #1]

    // Send packet to IMU
    #ifdef USE_I2C_DMA
        //i2c1_transfer_complete = 0;  // Reset DMA transfer complete flag
        if (HAL_I2C_Master_Transmit_DMA(&hi2c1, BNO_W_ADDR, bufferIO, dataLength) != HAL_OK)
 8001742:	187b      	adds	r3, r7, r1
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4a0c      	ldr	r2, [pc, #48]	@ (800177c <sendPacket+0xdc>)
 800174a:	480f      	ldr	r0, [pc, #60]	@ (8001788 <sendPacket+0xe8>)
 800174c:	2196      	movs	r1, #150	@ 0x96
 800174e:	f003 fea5 	bl	800549c <HAL_I2C_Master_Transmit_DMA>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <sendPacket+0xba>
        {
            return HAL_ERROR;  // Return error if DMA transmission fails
 8001756:	2301      	movs	r3, #1
 8001758:	e00b      	b.n	8001772 <sendPacket+0xd2>
        }
        // Wait for DMA transfer to complete
        //while (!i2c1_transfer_complete);
				while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) { }
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <sendPacket+0xe8>)
 800175e:	0018      	movs	r0, r3
 8001760:	f004 f91c 	bl	800599c <HAL_I2C_GetState>
 8001764:	0003      	movs	r3, r0
 8001766:	2b20      	cmp	r3, #32
 8001768:	d1f8      	bne.n	800175c <sendPacket+0xbc>
        {
            return HAL_ERROR;  // Return error if transmission fails
        }
    #endif

    delay_us(RESET_DELAY);  // Delay 200 microseconds before next I2C transmission
 800176a:	20c8      	movs	r0, #200	@ 0xc8
 800176c:	f7ff fd6e 	bl	800124c <delay_us>
    return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b005      	add	sp, #20
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	200000f4 	.word	0x200000f4
 8001780:	20000210 	.word	0x20000210
 8001784:	0800af78 	.word	0x0800af78
 8001788:	20000360 	.word	0x20000360

0800178c <receivePacket>:

// Get a data packet from BNO
static HAL_StatusTypeDef receivePacket(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
    // Reset interrupt status
    BNO_Ready = 0;
 8001792:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <receivePacket+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
    memset(bufferIO, 0, TX_PACKET_SIZE);  // Clear the buffer
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <receivePacket+0x9c>)
 800179a:	2215      	movs	r2, #21
 800179c:	2100      	movs	r1, #0
 800179e:	0018      	movs	r0, r3
 80017a0:	f008 ffee 	bl	800a780 <memset>

    // First, receive the header (4 bytes) to determine the full packet size
    #ifdef USE_I2C_DMA
        //i2c1_transfer_complete = 0;  // Reset DMA transfer complete flag
        if (HAL_I2C_Master_Receive_DMA(&hi2c1, BNO_R_ADDR, bufferIO, HEADER_SIZE) != HAL_OK)
 80017a4:	4a20      	ldr	r2, [pc, #128]	@ (8001828 <receivePacket+0x9c>)
 80017a6:	4821      	ldr	r0, [pc, #132]	@ (800182c <receivePacket+0xa0>)
 80017a8:	2304      	movs	r3, #4
 80017aa:	2197      	movs	r1, #151	@ 0x97
 80017ac:	f003 ffa0 	bl	80056f0 <HAL_I2C_Master_Receive_DMA>
 80017b0:	1e03      	subs	r3, r0, #0
 80017b2:	d001      	beq.n	80017b8 <receivePacket+0x2c>
        {
            return HAL_ERROR;  // Return error if DMA reception fails
 80017b4:	2301      	movs	r3, #1
 80017b6:	e031      	b.n	800181c <receivePacket+0x90>
        }
        // Wait for DMA transfer to complete
        //while (!i2c1_transfer_complete);
				while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) { }
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <receivePacket+0xa0>)
 80017bc:	0018      	movs	r0, r3
 80017be:	f004 f8ed 	bl	800599c <HAL_I2C_GetState>
 80017c2:	0003      	movs	r3, r0
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d1f8      	bne.n	80017ba <receivePacket+0x2e>
            return HAL_ERROR;  // Return error if reception fails
        }
    #endif

    // Calculate the number of data bytes in the packet
    uint16_t rxPacketLength = *(uint16_t *)&bufferIO;
 80017c8:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <receivePacket+0x9c>)
 80017ca:	1dbb      	adds	r3, r7, #6
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	801a      	strh	r2, [r3, #0]
    if (!rxPacketLength || rxPacketLength > RX_PACKET_SIZE)
 80017d0:	1dbb      	adds	r3, r7, #6
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <receivePacket+0x58>
 80017d8:	1dbb      	adds	r3, r7, #6
 80017da:	881a      	ldrh	r2, [r3, #0]
 80017dc:	238e      	movs	r3, #142	@ 0x8e
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d901      	bls.n	80017e8 <receivePacket+0x5c>
    {
        return HAL_ERROR;  // Invalid packet size
 80017e4:	2301      	movs	r3, #1
 80017e6:	e019      	b.n	800181c <receivePacket+0x90>
    }

    delay_us(RESET_DELAY);  // Delay 200 microseconds before receiving the rest of the packet
 80017e8:	20c8      	movs	r0, #200	@ 0xc8
 80017ea:	f7ff fd2f 	bl	800124c <delay_us>

    // Now, receive the full packet based on the calculated size
    #ifdef USE_I2C_DMA
        //i2c1_transfer_complete = 0;  // Reset DMA transfer complete flag
        if (HAL_I2C_Master_Receive_DMA(&hi2c1, BNO_R_ADDR, bufferIO, rxPacketLength) != HAL_OK)
 80017ee:	1dbb      	adds	r3, r7, #6
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <receivePacket+0x9c>)
 80017f4:	480d      	ldr	r0, [pc, #52]	@ (800182c <receivePacket+0xa0>)
 80017f6:	2197      	movs	r1, #151	@ 0x97
 80017f8:	f003 ff7a 	bl	80056f0 <HAL_I2C_Master_Receive_DMA>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <receivePacket+0x78>
        {
            return HAL_ERROR;  // Return error if DMA reception fails
 8001800:	2301      	movs	r3, #1
 8001802:	e00b      	b.n	800181c <receivePacket+0x90>
        }
        // Wait for DMA transfer to complete
        //while (!i2c1_transfer_complete);
				while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) { }
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <receivePacket+0xa0>)
 8001808:	0018      	movs	r0, r3
 800180a:	f004 f8c7 	bl	800599c <HAL_I2C_GetState>
 800180e:	0003      	movs	r3, r0
 8001810:	2b20      	cmp	r3, #32
 8001812:	d1f8      	bne.n	8001806 <receivePacket+0x7a>
        {
            return HAL_ERROR;  // Return error if reception fails
        }
    #endif

    delay_us(RESET_DELAY);  // Delay 200 microseconds after receiving the packet
 8001814:	20c8      	movs	r0, #200	@ 0xc8
 8001816:	f7ff fd19 	bl	800124c <delay_us>
    return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	b002      	add	sp, #8
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200005a0 	.word	0x200005a0
 8001828:	200000f4 	.word	0x200000f4
 800182c:	20000360 	.word	0x20000360

08001830 <sendExecutable>:


// Send a command on exe channel
static HAL_StatusTypeDef sendExecutable(const uint8_t cmd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	701a      	strb	r2, [r3, #0]
	resetHeader(cmd);
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff ff17 	bl	8001674 <resetHeader>
	return sendPacket(CHANNEL_EXECUTABLE);
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff ff2a 	bl	80016a0 <sendPacket>
 800184c:	0003      	movs	r3, r0
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <getSensorValue>:
//bufferIO - 4..8 Time stamp
//bufferIO - 9 Which sensor produced this event
//bufferIO - 10 Sequence number increments once for each report sent. Gaps in the sequence numbers indicate missing or dropped reports.
//bufferIO - 11 Status bits 7-5: reserved, 4-2: exponent delay, 1-0: Accuracy
static void getSensorValue(void)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	//int16_t dataLength = *(uint16_t *)&bufferIO - 4;
	sensorData.sensorId = bufferIO[9];
 800185c:	4be1      	ldr	r3, [pc, #900]	@ (8001be4 <getSensorValue+0x38c>)
 800185e:	7a5a      	ldrb	r2, [r3, #9]
 8001860:	4be1      	ldr	r3, [pc, #900]	@ (8001be8 <getSensorValue+0x390>)
 8001862:	701a      	strb	r2, [r3, #0]
	sensorData.timestamp = *(uint32_t *)&bufferIO[5];
 8001864:	4be1      	ldr	r3, [pc, #900]	@ (8001bec <getSensorValue+0x394>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0018      	movs	r0, r3
 800186a:	2300      	movs	r3, #0
 800186c:	0019      	movs	r1, r3
 800186e:	4bde      	ldr	r3, [pc, #888]	@ (8001be8 <getSensorValue+0x390>)
 8001870:	3303      	adds	r3, #3
 8001872:	22ff      	movs	r2, #255	@ 0xff
 8001874:	4002      	ands	r2, r0
 8001876:	0015      	movs	r5, r2
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	2400      	movs	r4, #0
 800187c:	4022      	ands	r2, r4
 800187e:	1c14      	adds	r4, r2, #0
 8001880:	1c2a      	adds	r2, r5, #0
 8001882:	4322      	orrs	r2, r4
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	0a02      	lsrs	r2, r0, #8
 8001888:	24ff      	movs	r4, #255	@ 0xff
 800188a:	4022      	ands	r2, r4
 800188c:	0015      	movs	r5, r2
 800188e:	785a      	ldrb	r2, [r3, #1]
 8001890:	2400      	movs	r4, #0
 8001892:	4022      	ands	r2, r4
 8001894:	1c14      	adds	r4, r2, #0
 8001896:	1c2a      	adds	r2, r5, #0
 8001898:	4322      	orrs	r2, r4
 800189a:	705a      	strb	r2, [r3, #1]
 800189c:	0c02      	lsrs	r2, r0, #16
 800189e:	24ff      	movs	r4, #255	@ 0xff
 80018a0:	4022      	ands	r2, r4
 80018a2:	0015      	movs	r5, r2
 80018a4:	789a      	ldrb	r2, [r3, #2]
 80018a6:	2400      	movs	r4, #0
 80018a8:	4022      	ands	r2, r4
 80018aa:	1c14      	adds	r4, r2, #0
 80018ac:	1c2a      	adds	r2, r5, #0
 80018ae:	4322      	orrs	r2, r4
 80018b0:	709a      	strb	r2, [r3, #2]
 80018b2:	0e05      	lsrs	r5, r0, #24
 80018b4:	78da      	ldrb	r2, [r3, #3]
 80018b6:	2400      	movs	r4, #0
 80018b8:	4022      	ands	r2, r4
 80018ba:	1c14      	adds	r4, r2, #0
 80018bc:	1c2a      	adds	r2, r5, #0
 80018be:	4322      	orrs	r2, r4
 80018c0:	70da      	strb	r2, [r3, #3]
 80018c2:	22ff      	movs	r2, #255	@ 0xff
 80018c4:	400a      	ands	r2, r1
 80018c6:	0015      	movs	r5, r2
 80018c8:	791a      	ldrb	r2, [r3, #4]
 80018ca:	2400      	movs	r4, #0
 80018cc:	4022      	ands	r2, r4
 80018ce:	1c14      	adds	r4, r2, #0
 80018d0:	1c2a      	adds	r2, r5, #0
 80018d2:	4322      	orrs	r2, r4
 80018d4:	711a      	strb	r2, [r3, #4]
 80018d6:	0a0a      	lsrs	r2, r1, #8
 80018d8:	24ff      	movs	r4, #255	@ 0xff
 80018da:	4022      	ands	r2, r4
 80018dc:	0015      	movs	r5, r2
 80018de:	795a      	ldrb	r2, [r3, #5]
 80018e0:	2400      	movs	r4, #0
 80018e2:	4022      	ands	r2, r4
 80018e4:	1c14      	adds	r4, r2, #0
 80018e6:	1c2a      	adds	r2, r5, #0
 80018e8:	4322      	orrs	r2, r4
 80018ea:	715a      	strb	r2, [r3, #5]
 80018ec:	0c0a      	lsrs	r2, r1, #16
 80018ee:	24ff      	movs	r4, #255	@ 0xff
 80018f0:	4022      	ands	r2, r4
 80018f2:	0015      	movs	r5, r2
 80018f4:	799a      	ldrb	r2, [r3, #6]
 80018f6:	2400      	movs	r4, #0
 80018f8:	4022      	ands	r2, r4
 80018fa:	1c14      	adds	r4, r2, #0
 80018fc:	1c2a      	adds	r2, r5, #0
 80018fe:	4322      	orrs	r2, r4
 8001900:	719a      	strb	r2, [r3, #6]
 8001902:	0e08      	lsrs	r0, r1, #24
 8001904:	79da      	ldrb	r2, [r3, #7]
 8001906:	2100      	movs	r1, #0
 8001908:	400a      	ands	r2, r1
 800190a:	1c11      	adds	r1, r2, #0
 800190c:	1c02      	adds	r2, r0, #0
 800190e:	430a      	orrs	r2, r1
 8001910:	71da      	strb	r2, [r3, #7]
	{
		sensorData.sequence = 0;
		sensorData.status = 0; //Get status bits
	}
	#else
		sensorData.sequence = bufferIO[10];
 8001912:	4bb4      	ldr	r3, [pc, #720]	@ (8001be4 <getSensorValue+0x38c>)
 8001914:	7a9a      	ldrb	r2, [r3, #10]
 8001916:	4bb4      	ldr	r3, [pc, #720]	@ (8001be8 <getSensorValue+0x390>)
 8001918:	705a      	strb	r2, [r3, #1]
		sensorData.status = bufferIO[11] & 0x03; //Get status bits
 800191a:	4bb2      	ldr	r3, [pc, #712]	@ (8001be4 <getSensorValue+0x38c>)
 800191c:	7adb      	ldrb	r3, [r3, #11]
 800191e:	2203      	movs	r2, #3
 8001920:	4013      	ands	r3, r2
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4bb0      	ldr	r3, [pc, #704]	@ (8001be8 <getSensorValue+0x390>)
 8001926:	709a      	strb	r2, [r3, #2]
	#endif


	switch(sensorData.sensorId)
 8001928:	4baf      	ldr	r3, [pc, #700]	@ (8001be8 <getSensorValue+0x390>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d901      	bls.n	8001934 <getSensorValue+0xdc>
 8001930:	f000 fc1b 	bl	800216a <getSensorValue+0x912>
 8001934:	009a      	lsls	r2, r3, #2
 8001936:	4bae      	ldr	r3, [pc, #696]	@ (8001bf0 <getSensorValue+0x398>)
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	469f      	mov	pc, r3
			sensorData.SenVal.RawAccelerometer.TimeStamp = *(uint32_t *)&bufferIO[21];
		break;
		#endif
		#ifdef ACCELEROMETER
		case ACCELEROMETER:
			sensorData.SenVal.Accelerometer.X = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q8;
 800193e:	4bad      	ldr	r3, [pc, #692]	@ (8001bf4 <getSensorValue+0x39c>)
 8001940:	2200      	movs	r2, #0
 8001942:	5e9b      	ldrsh	r3, [r3, r2]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fbf7 	bl	8001138 <__aeabi_i2f>
 800194a:	1c03      	adds	r3, r0, #0
 800194c:	21ee      	movs	r1, #238	@ 0xee
 800194e:	0589      	lsls	r1, r1, #22
 8001950:	1c18      	adds	r0, r3, #0
 8001952:	f7ff f8f9 	bl	8000b48 <__aeabi_fmul>
 8001956:	1c03      	adds	r3, r0, #0
 8001958:	1c1a      	adds	r2, r3, #0
 800195a:	4ba3      	ldr	r3, [pc, #652]	@ (8001be8 <getSensorValue+0x390>)
 800195c:	330f      	adds	r3, #15
 800195e:	21ff      	movs	r1, #255	@ 0xff
 8001960:	4011      	ands	r1, r2
 8001962:	000c      	movs	r4, r1
 8001964:	7819      	ldrb	r1, [r3, #0]
 8001966:	2000      	movs	r0, #0
 8001968:	4001      	ands	r1, r0
 800196a:	1c08      	adds	r0, r1, #0
 800196c:	1c21      	adds	r1, r4, #0
 800196e:	4301      	orrs	r1, r0
 8001970:	7019      	strb	r1, [r3, #0]
 8001972:	0a11      	lsrs	r1, r2, #8
 8001974:	20ff      	movs	r0, #255	@ 0xff
 8001976:	4001      	ands	r1, r0
 8001978:	000c      	movs	r4, r1
 800197a:	7859      	ldrb	r1, [r3, #1]
 800197c:	2000      	movs	r0, #0
 800197e:	4001      	ands	r1, r0
 8001980:	1c08      	adds	r0, r1, #0
 8001982:	1c21      	adds	r1, r4, #0
 8001984:	4301      	orrs	r1, r0
 8001986:	7059      	strb	r1, [r3, #1]
 8001988:	0c11      	lsrs	r1, r2, #16
 800198a:	20ff      	movs	r0, #255	@ 0xff
 800198c:	4001      	ands	r1, r0
 800198e:	000c      	movs	r4, r1
 8001990:	7899      	ldrb	r1, [r3, #2]
 8001992:	2000      	movs	r0, #0
 8001994:	4001      	ands	r1, r0
 8001996:	1c08      	adds	r0, r1, #0
 8001998:	1c21      	adds	r1, r4, #0
 800199a:	4301      	orrs	r1, r0
 800199c:	7099      	strb	r1, [r3, #2]
 800199e:	0e10      	lsrs	r0, r2, #24
 80019a0:	78da      	ldrb	r2, [r3, #3]
 80019a2:	2100      	movs	r1, #0
 80019a4:	400a      	ands	r2, r1
 80019a6:	1c11      	adds	r1, r2, #0
 80019a8:	1c02      	adds	r2, r0, #0
 80019aa:	430a      	orrs	r2, r1
 80019ac:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.Accelerometer.Y = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q8;
 80019ae:	4b92      	ldr	r3, [pc, #584]	@ (8001bf8 <getSensorValue+0x3a0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	5e9b      	ldrsh	r3, [r3, r2]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff fbbf 	bl	8001138 <__aeabi_i2f>
 80019ba:	1c03      	adds	r3, r0, #0
 80019bc:	21ee      	movs	r1, #238	@ 0xee
 80019be:	0589      	lsls	r1, r1, #22
 80019c0:	1c18      	adds	r0, r3, #0
 80019c2:	f7ff f8c1 	bl	8000b48 <__aeabi_fmul>
 80019c6:	1c03      	adds	r3, r0, #0
 80019c8:	1c1a      	adds	r2, r3, #0
 80019ca:	4b87      	ldr	r3, [pc, #540]	@ (8001be8 <getSensorValue+0x390>)
 80019cc:	3313      	adds	r3, #19
 80019ce:	21ff      	movs	r1, #255	@ 0xff
 80019d0:	4011      	ands	r1, r2
 80019d2:	000c      	movs	r4, r1
 80019d4:	7819      	ldrb	r1, [r3, #0]
 80019d6:	2000      	movs	r0, #0
 80019d8:	4001      	ands	r1, r0
 80019da:	1c08      	adds	r0, r1, #0
 80019dc:	1c21      	adds	r1, r4, #0
 80019de:	4301      	orrs	r1, r0
 80019e0:	7019      	strb	r1, [r3, #0]
 80019e2:	0a11      	lsrs	r1, r2, #8
 80019e4:	20ff      	movs	r0, #255	@ 0xff
 80019e6:	4001      	ands	r1, r0
 80019e8:	000c      	movs	r4, r1
 80019ea:	7859      	ldrb	r1, [r3, #1]
 80019ec:	2000      	movs	r0, #0
 80019ee:	4001      	ands	r1, r0
 80019f0:	1c08      	adds	r0, r1, #0
 80019f2:	1c21      	adds	r1, r4, #0
 80019f4:	4301      	orrs	r1, r0
 80019f6:	7059      	strb	r1, [r3, #1]
 80019f8:	0c11      	lsrs	r1, r2, #16
 80019fa:	20ff      	movs	r0, #255	@ 0xff
 80019fc:	4001      	ands	r1, r0
 80019fe:	000c      	movs	r4, r1
 8001a00:	7899      	ldrb	r1, [r3, #2]
 8001a02:	2000      	movs	r0, #0
 8001a04:	4001      	ands	r1, r0
 8001a06:	1c08      	adds	r0, r1, #0
 8001a08:	1c21      	adds	r1, r4, #0
 8001a0a:	4301      	orrs	r1, r0
 8001a0c:	7099      	strb	r1, [r3, #2]
 8001a0e:	0e10      	lsrs	r0, r2, #24
 8001a10:	78da      	ldrb	r2, [r3, #3]
 8001a12:	2100      	movs	r1, #0
 8001a14:	400a      	ands	r2, r1
 8001a16:	1c11      	adds	r1, r2, #0
 8001a18:	1c02      	adds	r2, r0, #0
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.Accelerometer.Z = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q8;
 8001a1e:	4b77      	ldr	r3, [pc, #476]	@ (8001bfc <getSensorValue+0x3a4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	5e9b      	ldrsh	r3, [r3, r2]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fb87 	bl	8001138 <__aeabi_i2f>
 8001a2a:	1c03      	adds	r3, r0, #0
 8001a2c:	21ee      	movs	r1, #238	@ 0xee
 8001a2e:	0589      	lsls	r1, r1, #22
 8001a30:	1c18      	adds	r0, r3, #0
 8001a32:	f7ff f889 	bl	8000b48 <__aeabi_fmul>
 8001a36:	1c03      	adds	r3, r0, #0
 8001a38:	1c1a      	adds	r2, r3, #0
 8001a3a:	4b6b      	ldr	r3, [pc, #428]	@ (8001be8 <getSensorValue+0x390>)
 8001a3c:	3317      	adds	r3, #23
 8001a3e:	21ff      	movs	r1, #255	@ 0xff
 8001a40:	4011      	ands	r1, r2
 8001a42:	000c      	movs	r4, r1
 8001a44:	7819      	ldrb	r1, [r3, #0]
 8001a46:	2000      	movs	r0, #0
 8001a48:	4001      	ands	r1, r0
 8001a4a:	1c08      	adds	r0, r1, #0
 8001a4c:	1c21      	adds	r1, r4, #0
 8001a4e:	4301      	orrs	r1, r0
 8001a50:	7019      	strb	r1, [r3, #0]
 8001a52:	0a11      	lsrs	r1, r2, #8
 8001a54:	20ff      	movs	r0, #255	@ 0xff
 8001a56:	4001      	ands	r1, r0
 8001a58:	000c      	movs	r4, r1
 8001a5a:	7859      	ldrb	r1, [r3, #1]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	4001      	ands	r1, r0
 8001a60:	1c08      	adds	r0, r1, #0
 8001a62:	1c21      	adds	r1, r4, #0
 8001a64:	4301      	orrs	r1, r0
 8001a66:	7059      	strb	r1, [r3, #1]
 8001a68:	0c11      	lsrs	r1, r2, #16
 8001a6a:	20ff      	movs	r0, #255	@ 0xff
 8001a6c:	4001      	ands	r1, r0
 8001a6e:	000c      	movs	r4, r1
 8001a70:	7899      	ldrb	r1, [r3, #2]
 8001a72:	2000      	movs	r0, #0
 8001a74:	4001      	ands	r1, r0
 8001a76:	1c08      	adds	r0, r1, #0
 8001a78:	1c21      	adds	r1, r4, #0
 8001a7a:	4301      	orrs	r1, r0
 8001a7c:	7099      	strb	r1, [r3, #2]
 8001a7e:	0e10      	lsrs	r0, r2, #24
 8001a80:	78da      	ldrb	r2, [r3, #3]
 8001a82:	2100      	movs	r1, #0
 8001a84:	400a      	ands	r2, r1
 8001a86:	1c11      	adds	r1, r2, #0
 8001a88:	1c02      	adds	r2, r0, #0
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	70da      	strb	r2, [r3, #3]
		break;
 8001a8e:	e36c      	b.n	800216a <getSensorValue+0x912>
			sensorData.SenVal.RawGyroscope.TimeStamp = *(uint32_t *)&bufferIO[21];
		break;
		#endif
		#ifdef GYROSCOPE_CALIBRATED
		case GYROSCOPE_CALIBRATED:
			sensorData.SenVal.Gyroscope.X = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q9;
 8001a90:	4b58      	ldr	r3, [pc, #352]	@ (8001bf4 <getSensorValue+0x39c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	5e9b      	ldrsh	r3, [r3, r2]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff fb4e 	bl	8001138 <__aeabi_i2f>
 8001a9c:	1c03      	adds	r3, r0, #0
 8001a9e:	21ec      	movs	r1, #236	@ 0xec
 8001aa0:	0589      	lsls	r1, r1, #22
 8001aa2:	1c18      	adds	r0, r3, #0
 8001aa4:	f7ff f850 	bl	8000b48 <__aeabi_fmul>
 8001aa8:	1c03      	adds	r3, r0, #0
 8001aaa:	1c1a      	adds	r2, r3, #0
 8001aac:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <getSensorValue+0x390>)
 8001aae:	330f      	adds	r3, #15
 8001ab0:	21ff      	movs	r1, #255	@ 0xff
 8001ab2:	4011      	ands	r1, r2
 8001ab4:	000c      	movs	r4, r1
 8001ab6:	7819      	ldrb	r1, [r3, #0]
 8001ab8:	2000      	movs	r0, #0
 8001aba:	4001      	ands	r1, r0
 8001abc:	1c08      	adds	r0, r1, #0
 8001abe:	1c21      	adds	r1, r4, #0
 8001ac0:	4301      	orrs	r1, r0
 8001ac2:	7019      	strb	r1, [r3, #0]
 8001ac4:	0a11      	lsrs	r1, r2, #8
 8001ac6:	20ff      	movs	r0, #255	@ 0xff
 8001ac8:	4001      	ands	r1, r0
 8001aca:	000c      	movs	r4, r1
 8001acc:	7859      	ldrb	r1, [r3, #1]
 8001ace:	2000      	movs	r0, #0
 8001ad0:	4001      	ands	r1, r0
 8001ad2:	1c08      	adds	r0, r1, #0
 8001ad4:	1c21      	adds	r1, r4, #0
 8001ad6:	4301      	orrs	r1, r0
 8001ad8:	7059      	strb	r1, [r3, #1]
 8001ada:	0c11      	lsrs	r1, r2, #16
 8001adc:	20ff      	movs	r0, #255	@ 0xff
 8001ade:	4001      	ands	r1, r0
 8001ae0:	000c      	movs	r4, r1
 8001ae2:	7899      	ldrb	r1, [r3, #2]
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	4001      	ands	r1, r0
 8001ae8:	1c08      	adds	r0, r1, #0
 8001aea:	1c21      	adds	r1, r4, #0
 8001aec:	4301      	orrs	r1, r0
 8001aee:	7099      	strb	r1, [r3, #2]
 8001af0:	0e10      	lsrs	r0, r2, #24
 8001af2:	78da      	ldrb	r2, [r3, #3]
 8001af4:	2100      	movs	r1, #0
 8001af6:	400a      	ands	r2, r1
 8001af8:	1c11      	adds	r1, r2, #0
 8001afa:	1c02      	adds	r2, r0, #0
 8001afc:	430a      	orrs	r2, r1
 8001afe:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.Gyroscope.Y = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q9;
 8001b00:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <getSensorValue+0x3a0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	5e9b      	ldrsh	r3, [r3, r2]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff fb16 	bl	8001138 <__aeabi_i2f>
 8001b0c:	1c03      	adds	r3, r0, #0
 8001b0e:	21ec      	movs	r1, #236	@ 0xec
 8001b10:	0589      	lsls	r1, r1, #22
 8001b12:	1c18      	adds	r0, r3, #0
 8001b14:	f7ff f818 	bl	8000b48 <__aeabi_fmul>
 8001b18:	1c03      	adds	r3, r0, #0
 8001b1a:	1c1a      	adds	r2, r3, #0
 8001b1c:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <getSensorValue+0x390>)
 8001b1e:	3313      	adds	r3, #19
 8001b20:	21ff      	movs	r1, #255	@ 0xff
 8001b22:	4011      	ands	r1, r2
 8001b24:	000c      	movs	r4, r1
 8001b26:	7819      	ldrb	r1, [r3, #0]
 8001b28:	2000      	movs	r0, #0
 8001b2a:	4001      	ands	r1, r0
 8001b2c:	1c08      	adds	r0, r1, #0
 8001b2e:	1c21      	adds	r1, r4, #0
 8001b30:	4301      	orrs	r1, r0
 8001b32:	7019      	strb	r1, [r3, #0]
 8001b34:	0a11      	lsrs	r1, r2, #8
 8001b36:	20ff      	movs	r0, #255	@ 0xff
 8001b38:	4001      	ands	r1, r0
 8001b3a:	000c      	movs	r4, r1
 8001b3c:	7859      	ldrb	r1, [r3, #1]
 8001b3e:	2000      	movs	r0, #0
 8001b40:	4001      	ands	r1, r0
 8001b42:	1c08      	adds	r0, r1, #0
 8001b44:	1c21      	adds	r1, r4, #0
 8001b46:	4301      	orrs	r1, r0
 8001b48:	7059      	strb	r1, [r3, #1]
 8001b4a:	0c11      	lsrs	r1, r2, #16
 8001b4c:	20ff      	movs	r0, #255	@ 0xff
 8001b4e:	4001      	ands	r1, r0
 8001b50:	000c      	movs	r4, r1
 8001b52:	7899      	ldrb	r1, [r3, #2]
 8001b54:	2000      	movs	r0, #0
 8001b56:	4001      	ands	r1, r0
 8001b58:	1c08      	adds	r0, r1, #0
 8001b5a:	1c21      	adds	r1, r4, #0
 8001b5c:	4301      	orrs	r1, r0
 8001b5e:	7099      	strb	r1, [r3, #2]
 8001b60:	0e10      	lsrs	r0, r2, #24
 8001b62:	78da      	ldrb	r2, [r3, #3]
 8001b64:	2100      	movs	r1, #0
 8001b66:	400a      	ands	r2, r1
 8001b68:	1c11      	adds	r1, r2, #0
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.Gyroscope.Z = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q9;
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <getSensorValue+0x3a4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	5e9b      	ldrsh	r3, [r3, r2]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fade 	bl	8001138 <__aeabi_i2f>
 8001b7c:	1c03      	adds	r3, r0, #0
 8001b7e:	21ec      	movs	r1, #236	@ 0xec
 8001b80:	0589      	lsls	r1, r1, #22
 8001b82:	1c18      	adds	r0, r3, #0
 8001b84:	f7fe ffe0 	bl	8000b48 <__aeabi_fmul>
 8001b88:	1c03      	adds	r3, r0, #0
 8001b8a:	1c1a      	adds	r2, r3, #0
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <getSensorValue+0x390>)
 8001b8e:	3317      	adds	r3, #23
 8001b90:	21ff      	movs	r1, #255	@ 0xff
 8001b92:	4011      	ands	r1, r2
 8001b94:	000c      	movs	r4, r1
 8001b96:	7819      	ldrb	r1, [r3, #0]
 8001b98:	2000      	movs	r0, #0
 8001b9a:	4001      	ands	r1, r0
 8001b9c:	1c08      	adds	r0, r1, #0
 8001b9e:	1c21      	adds	r1, r4, #0
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	7019      	strb	r1, [r3, #0]
 8001ba4:	0a11      	lsrs	r1, r2, #8
 8001ba6:	20ff      	movs	r0, #255	@ 0xff
 8001ba8:	4001      	ands	r1, r0
 8001baa:	000c      	movs	r4, r1
 8001bac:	7859      	ldrb	r1, [r3, #1]
 8001bae:	2000      	movs	r0, #0
 8001bb0:	4001      	ands	r1, r0
 8001bb2:	1c08      	adds	r0, r1, #0
 8001bb4:	1c21      	adds	r1, r4, #0
 8001bb6:	4301      	orrs	r1, r0
 8001bb8:	7059      	strb	r1, [r3, #1]
 8001bba:	0c11      	lsrs	r1, r2, #16
 8001bbc:	20ff      	movs	r0, #255	@ 0xff
 8001bbe:	4001      	ands	r1, r0
 8001bc0:	000c      	movs	r4, r1
 8001bc2:	7899      	ldrb	r1, [r3, #2]
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	4001      	ands	r1, r0
 8001bc8:	1c08      	adds	r0, r1, #0
 8001bca:	1c21      	adds	r1, r4, #0
 8001bcc:	4301      	orrs	r1, r0
 8001bce:	7099      	strb	r1, [r3, #2]
 8001bd0:	0e10      	lsrs	r0, r2, #24
 8001bd2:	78da      	ldrb	r2, [r3, #3]
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	1c11      	adds	r1, r2, #0
 8001bda:	1c02      	adds	r2, r0, #0
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	70da      	strb	r2, [r3, #3]
		break;
 8001be0:	e2c3      	b.n	800216a <getSensorValue+0x912>
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	200000f4 	.word	0x200000f4
 8001be8:	2000027c 	.word	0x2000027c
 8001bec:	200000f9 	.word	0x200000f9
 8001bf0:	0800afb4 	.word	0x0800afb4
 8001bf4:	20000101 	.word	0x20000101
 8001bf8:	20000103 	.word	0x20000103
 8001bfc:	20000105 	.word	0x20000105
			sensorData.SenVal.RawMagnetometer.TimeStamp = *(uint32_t *)&bufferIO[21];
		break;
		#endif
		#ifdef MAGNETIC_FIELD_CALIBRATED
		case MAGNETIC_FIELD_CALIBRATED:
			sensorData.SenVal.MagneticField.X = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q4;
 8001c00:	4be2      	ldr	r3, [pc, #904]	@ (8001f8c <getSensorValue+0x734>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	5e9b      	ldrsh	r3, [r3, r2]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff fa96 	bl	8001138 <__aeabi_i2f>
 8001c0c:	1c03      	adds	r3, r0, #0
 8001c0e:	21f6      	movs	r1, #246	@ 0xf6
 8001c10:	0589      	lsls	r1, r1, #22
 8001c12:	1c18      	adds	r0, r3, #0
 8001c14:	f7fe ff98 	bl	8000b48 <__aeabi_fmul>
 8001c18:	1c03      	adds	r3, r0, #0
 8001c1a:	1c1a      	adds	r2, r3, #0
 8001c1c:	4bdc      	ldr	r3, [pc, #880]	@ (8001f90 <getSensorValue+0x738>)
 8001c1e:	330f      	adds	r3, #15
 8001c20:	21ff      	movs	r1, #255	@ 0xff
 8001c22:	4011      	ands	r1, r2
 8001c24:	000c      	movs	r4, r1
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	2000      	movs	r0, #0
 8001c2a:	4001      	ands	r1, r0
 8001c2c:	1c08      	adds	r0, r1, #0
 8001c2e:	1c21      	adds	r1, r4, #0
 8001c30:	4301      	orrs	r1, r0
 8001c32:	7019      	strb	r1, [r3, #0]
 8001c34:	0a11      	lsrs	r1, r2, #8
 8001c36:	20ff      	movs	r0, #255	@ 0xff
 8001c38:	4001      	ands	r1, r0
 8001c3a:	000c      	movs	r4, r1
 8001c3c:	7859      	ldrb	r1, [r3, #1]
 8001c3e:	2000      	movs	r0, #0
 8001c40:	4001      	ands	r1, r0
 8001c42:	1c08      	adds	r0, r1, #0
 8001c44:	1c21      	adds	r1, r4, #0
 8001c46:	4301      	orrs	r1, r0
 8001c48:	7059      	strb	r1, [r3, #1]
 8001c4a:	0c11      	lsrs	r1, r2, #16
 8001c4c:	20ff      	movs	r0, #255	@ 0xff
 8001c4e:	4001      	ands	r1, r0
 8001c50:	000c      	movs	r4, r1
 8001c52:	7899      	ldrb	r1, [r3, #2]
 8001c54:	2000      	movs	r0, #0
 8001c56:	4001      	ands	r1, r0
 8001c58:	1c08      	adds	r0, r1, #0
 8001c5a:	1c21      	adds	r1, r4, #0
 8001c5c:	4301      	orrs	r1, r0
 8001c5e:	7099      	strb	r1, [r3, #2]
 8001c60:	0e10      	lsrs	r0, r2, #24
 8001c62:	78da      	ldrb	r2, [r3, #3]
 8001c64:	2100      	movs	r1, #0
 8001c66:	400a      	ands	r2, r1
 8001c68:	1c11      	adds	r1, r2, #0
 8001c6a:	1c02      	adds	r2, r0, #0
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.MagneticField.Y = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q4;
 8001c70:	4bc8      	ldr	r3, [pc, #800]	@ (8001f94 <getSensorValue+0x73c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	5e9b      	ldrsh	r3, [r3, r2]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff fa5e 	bl	8001138 <__aeabi_i2f>
 8001c7c:	1c03      	adds	r3, r0, #0
 8001c7e:	21f6      	movs	r1, #246	@ 0xf6
 8001c80:	0589      	lsls	r1, r1, #22
 8001c82:	1c18      	adds	r0, r3, #0
 8001c84:	f7fe ff60 	bl	8000b48 <__aeabi_fmul>
 8001c88:	1c03      	adds	r3, r0, #0
 8001c8a:	1c1a      	adds	r2, r3, #0
 8001c8c:	4bc0      	ldr	r3, [pc, #768]	@ (8001f90 <getSensorValue+0x738>)
 8001c8e:	3313      	adds	r3, #19
 8001c90:	21ff      	movs	r1, #255	@ 0xff
 8001c92:	4011      	ands	r1, r2
 8001c94:	000c      	movs	r4, r1
 8001c96:	7819      	ldrb	r1, [r3, #0]
 8001c98:	2000      	movs	r0, #0
 8001c9a:	4001      	ands	r1, r0
 8001c9c:	1c08      	adds	r0, r1, #0
 8001c9e:	1c21      	adds	r1, r4, #0
 8001ca0:	4301      	orrs	r1, r0
 8001ca2:	7019      	strb	r1, [r3, #0]
 8001ca4:	0a11      	lsrs	r1, r2, #8
 8001ca6:	20ff      	movs	r0, #255	@ 0xff
 8001ca8:	4001      	ands	r1, r0
 8001caa:	000c      	movs	r4, r1
 8001cac:	7859      	ldrb	r1, [r3, #1]
 8001cae:	2000      	movs	r0, #0
 8001cb0:	4001      	ands	r1, r0
 8001cb2:	1c08      	adds	r0, r1, #0
 8001cb4:	1c21      	adds	r1, r4, #0
 8001cb6:	4301      	orrs	r1, r0
 8001cb8:	7059      	strb	r1, [r3, #1]
 8001cba:	0c11      	lsrs	r1, r2, #16
 8001cbc:	20ff      	movs	r0, #255	@ 0xff
 8001cbe:	4001      	ands	r1, r0
 8001cc0:	000c      	movs	r4, r1
 8001cc2:	7899      	ldrb	r1, [r3, #2]
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	4001      	ands	r1, r0
 8001cc8:	1c08      	adds	r0, r1, #0
 8001cca:	1c21      	adds	r1, r4, #0
 8001ccc:	4301      	orrs	r1, r0
 8001cce:	7099      	strb	r1, [r3, #2]
 8001cd0:	0e10      	lsrs	r0, r2, #24
 8001cd2:	78da      	ldrb	r2, [r3, #3]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	1c11      	adds	r1, r2, #0
 8001cda:	1c02      	adds	r2, r0, #0
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.MagneticField.Z = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q4;
 8001ce0:	4bad      	ldr	r3, [pc, #692]	@ (8001f98 <getSensorValue+0x740>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	5e9b      	ldrsh	r3, [r3, r2]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff fa26 	bl	8001138 <__aeabi_i2f>
 8001cec:	1c03      	adds	r3, r0, #0
 8001cee:	21f6      	movs	r1, #246	@ 0xf6
 8001cf0:	0589      	lsls	r1, r1, #22
 8001cf2:	1c18      	adds	r0, r3, #0
 8001cf4:	f7fe ff28 	bl	8000b48 <__aeabi_fmul>
 8001cf8:	1c03      	adds	r3, r0, #0
 8001cfa:	1c1a      	adds	r2, r3, #0
 8001cfc:	4ba4      	ldr	r3, [pc, #656]	@ (8001f90 <getSensorValue+0x738>)
 8001cfe:	3317      	adds	r3, #23
 8001d00:	21ff      	movs	r1, #255	@ 0xff
 8001d02:	4011      	ands	r1, r2
 8001d04:	000c      	movs	r4, r1
 8001d06:	7819      	ldrb	r1, [r3, #0]
 8001d08:	2000      	movs	r0, #0
 8001d0a:	4001      	ands	r1, r0
 8001d0c:	1c08      	adds	r0, r1, #0
 8001d0e:	1c21      	adds	r1, r4, #0
 8001d10:	4301      	orrs	r1, r0
 8001d12:	7019      	strb	r1, [r3, #0]
 8001d14:	0a11      	lsrs	r1, r2, #8
 8001d16:	20ff      	movs	r0, #255	@ 0xff
 8001d18:	4001      	ands	r1, r0
 8001d1a:	000c      	movs	r4, r1
 8001d1c:	7859      	ldrb	r1, [r3, #1]
 8001d1e:	2000      	movs	r0, #0
 8001d20:	4001      	ands	r1, r0
 8001d22:	1c08      	adds	r0, r1, #0
 8001d24:	1c21      	adds	r1, r4, #0
 8001d26:	4301      	orrs	r1, r0
 8001d28:	7059      	strb	r1, [r3, #1]
 8001d2a:	0c11      	lsrs	r1, r2, #16
 8001d2c:	20ff      	movs	r0, #255	@ 0xff
 8001d2e:	4001      	ands	r1, r0
 8001d30:	000c      	movs	r4, r1
 8001d32:	7899      	ldrb	r1, [r3, #2]
 8001d34:	2000      	movs	r0, #0
 8001d36:	4001      	ands	r1, r0
 8001d38:	1c08      	adds	r0, r1, #0
 8001d3a:	1c21      	adds	r1, r4, #0
 8001d3c:	4301      	orrs	r1, r0
 8001d3e:	7099      	strb	r1, [r3, #2]
 8001d40:	0e10      	lsrs	r0, r2, #24
 8001d42:	78da      	ldrb	r2, [r3, #3]
 8001d44:	2100      	movs	r1, #0
 8001d46:	400a      	ands	r2, r1
 8001d48:	1c11      	adds	r1, r2, #0
 8001d4a:	1c02      	adds	r2, r0, #0
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	70da      	strb	r2, [r3, #3]
		break;
 8001d50:	e20b      	b.n	800216a <getSensorValue+0x912>
		break;
		#endif
		#ifdef ROTATION_VECTOR
		case ROTATION_VECTOR:
			#ifdef USE_FOR_TELESCOPE
			sensorData.SenVal.RotationVector.I = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q14;
 8001d52:	4b8e      	ldr	r3, [pc, #568]	@ (8001f8c <getSensorValue+0x734>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	5e9b      	ldrsh	r3, [r3, r2]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff f9ed 	bl	8001138 <__aeabi_i2f>
 8001d5e:	1c03      	adds	r3, r0, #0
 8001d60:	21e2      	movs	r1, #226	@ 0xe2
 8001d62:	0589      	lsls	r1, r1, #22
 8001d64:	1c18      	adds	r0, r3, #0
 8001d66:	f7fe feef 	bl	8000b48 <__aeabi_fmul>
 8001d6a:	1c03      	adds	r3, r0, #0
 8001d6c:	1c1a      	adds	r2, r3, #0
 8001d6e:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <getSensorValue+0x738>)
 8001d70:	330f      	adds	r3, #15
 8001d72:	21ff      	movs	r1, #255	@ 0xff
 8001d74:	4011      	ands	r1, r2
 8001d76:	000c      	movs	r4, r1
 8001d78:	7819      	ldrb	r1, [r3, #0]
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	4001      	ands	r1, r0
 8001d7e:	1c08      	adds	r0, r1, #0
 8001d80:	1c21      	adds	r1, r4, #0
 8001d82:	4301      	orrs	r1, r0
 8001d84:	7019      	strb	r1, [r3, #0]
 8001d86:	0a11      	lsrs	r1, r2, #8
 8001d88:	20ff      	movs	r0, #255	@ 0xff
 8001d8a:	4001      	ands	r1, r0
 8001d8c:	000c      	movs	r4, r1
 8001d8e:	7859      	ldrb	r1, [r3, #1]
 8001d90:	2000      	movs	r0, #0
 8001d92:	4001      	ands	r1, r0
 8001d94:	1c08      	adds	r0, r1, #0
 8001d96:	1c21      	adds	r1, r4, #0
 8001d98:	4301      	orrs	r1, r0
 8001d9a:	7059      	strb	r1, [r3, #1]
 8001d9c:	0c11      	lsrs	r1, r2, #16
 8001d9e:	20ff      	movs	r0, #255	@ 0xff
 8001da0:	4001      	ands	r1, r0
 8001da2:	000c      	movs	r4, r1
 8001da4:	7899      	ldrb	r1, [r3, #2]
 8001da6:	2000      	movs	r0, #0
 8001da8:	4001      	ands	r1, r0
 8001daa:	1c08      	adds	r0, r1, #0
 8001dac:	1c21      	adds	r1, r4, #0
 8001dae:	4301      	orrs	r1, r0
 8001db0:	7099      	strb	r1, [r3, #2]
 8001db2:	0e10      	lsrs	r0, r2, #24
 8001db4:	78da      	ldrb	r2, [r3, #3]
 8001db6:	2100      	movs	r1, #0
 8001db8:	400a      	ands	r2, r1
 8001dba:	1c11      	adds	r1, r2, #0
 8001dbc:	1c02      	adds	r2, r0, #0
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.RotationVector.J = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q14;
 8001dc2:	4b74      	ldr	r3, [pc, #464]	@ (8001f94 <getSensorValue+0x73c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	5e9b      	ldrsh	r3, [r3, r2]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff f9b5 	bl	8001138 <__aeabi_i2f>
 8001dce:	1c03      	adds	r3, r0, #0
 8001dd0:	21e2      	movs	r1, #226	@ 0xe2
 8001dd2:	0589      	lsls	r1, r1, #22
 8001dd4:	1c18      	adds	r0, r3, #0
 8001dd6:	f7fe feb7 	bl	8000b48 <__aeabi_fmul>
 8001dda:	1c03      	adds	r3, r0, #0
 8001ddc:	1c1a      	adds	r2, r3, #0
 8001dde:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <getSensorValue+0x738>)
 8001de0:	3313      	adds	r3, #19
 8001de2:	21ff      	movs	r1, #255	@ 0xff
 8001de4:	4011      	ands	r1, r2
 8001de6:	000c      	movs	r4, r1
 8001de8:	7819      	ldrb	r1, [r3, #0]
 8001dea:	2000      	movs	r0, #0
 8001dec:	4001      	ands	r1, r0
 8001dee:	1c08      	adds	r0, r1, #0
 8001df0:	1c21      	adds	r1, r4, #0
 8001df2:	4301      	orrs	r1, r0
 8001df4:	7019      	strb	r1, [r3, #0]
 8001df6:	0a11      	lsrs	r1, r2, #8
 8001df8:	20ff      	movs	r0, #255	@ 0xff
 8001dfa:	4001      	ands	r1, r0
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	7859      	ldrb	r1, [r3, #1]
 8001e00:	2000      	movs	r0, #0
 8001e02:	4001      	ands	r1, r0
 8001e04:	1c08      	adds	r0, r1, #0
 8001e06:	1c21      	adds	r1, r4, #0
 8001e08:	4301      	orrs	r1, r0
 8001e0a:	7059      	strb	r1, [r3, #1]
 8001e0c:	0c11      	lsrs	r1, r2, #16
 8001e0e:	20ff      	movs	r0, #255	@ 0xff
 8001e10:	4001      	ands	r1, r0
 8001e12:	000c      	movs	r4, r1
 8001e14:	7899      	ldrb	r1, [r3, #2]
 8001e16:	2000      	movs	r0, #0
 8001e18:	4001      	ands	r1, r0
 8001e1a:	1c08      	adds	r0, r1, #0
 8001e1c:	1c21      	adds	r1, r4, #0
 8001e1e:	4301      	orrs	r1, r0
 8001e20:	7099      	strb	r1, [r3, #2]
 8001e22:	0e10      	lsrs	r0, r2, #24
 8001e24:	78da      	ldrb	r2, [r3, #3]
 8001e26:	2100      	movs	r1, #0
 8001e28:	400a      	ands	r2, r1
 8001e2a:	1c11      	adds	r1, r2, #0
 8001e2c:	1c02      	adds	r2, r0, #0
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.RotationVector.K = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q14;
 8001e32:	4b59      	ldr	r3, [pc, #356]	@ (8001f98 <getSensorValue+0x740>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	5e9b      	ldrsh	r3, [r3, r2]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff f97d 	bl	8001138 <__aeabi_i2f>
 8001e3e:	1c03      	adds	r3, r0, #0
 8001e40:	21e2      	movs	r1, #226	@ 0xe2
 8001e42:	0589      	lsls	r1, r1, #22
 8001e44:	1c18      	adds	r0, r3, #0
 8001e46:	f7fe fe7f 	bl	8000b48 <__aeabi_fmul>
 8001e4a:	1c03      	adds	r3, r0, #0
 8001e4c:	1c1a      	adds	r2, r3, #0
 8001e4e:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <getSensorValue+0x738>)
 8001e50:	3317      	adds	r3, #23
 8001e52:	21ff      	movs	r1, #255	@ 0xff
 8001e54:	4011      	ands	r1, r2
 8001e56:	000c      	movs	r4, r1
 8001e58:	7819      	ldrb	r1, [r3, #0]
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	4001      	ands	r1, r0
 8001e5e:	1c08      	adds	r0, r1, #0
 8001e60:	1c21      	adds	r1, r4, #0
 8001e62:	4301      	orrs	r1, r0
 8001e64:	7019      	strb	r1, [r3, #0]
 8001e66:	0a11      	lsrs	r1, r2, #8
 8001e68:	20ff      	movs	r0, #255	@ 0xff
 8001e6a:	4001      	ands	r1, r0
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	7859      	ldrb	r1, [r3, #1]
 8001e70:	2000      	movs	r0, #0
 8001e72:	4001      	ands	r1, r0
 8001e74:	1c08      	adds	r0, r1, #0
 8001e76:	1c21      	adds	r1, r4, #0
 8001e78:	4301      	orrs	r1, r0
 8001e7a:	7059      	strb	r1, [r3, #1]
 8001e7c:	0c11      	lsrs	r1, r2, #16
 8001e7e:	20ff      	movs	r0, #255	@ 0xff
 8001e80:	4001      	ands	r1, r0
 8001e82:	000c      	movs	r4, r1
 8001e84:	7899      	ldrb	r1, [r3, #2]
 8001e86:	2000      	movs	r0, #0
 8001e88:	4001      	ands	r1, r0
 8001e8a:	1c08      	adds	r0, r1, #0
 8001e8c:	1c21      	adds	r1, r4, #0
 8001e8e:	4301      	orrs	r1, r0
 8001e90:	7099      	strb	r1, [r3, #2]
 8001e92:	0e10      	lsrs	r0, r2, #24
 8001e94:	78da      	ldrb	r2, [r3, #3]
 8001e96:	2100      	movs	r1, #0
 8001e98:	400a      	ands	r2, r1
 8001e9a:	1c11      	adds	r1, r2, #0
 8001e9c:	1c02      	adds	r2, r0, #0
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.RotationVector.Real = (float)(*(int16_t *)&bufferIO[19]) * SCALE_Q14;
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8001f9c <getSensorValue+0x744>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	5e9b      	ldrsh	r3, [r3, r2]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff f945 	bl	8001138 <__aeabi_i2f>
 8001eae:	1c03      	adds	r3, r0, #0
 8001eb0:	21e2      	movs	r1, #226	@ 0xe2
 8001eb2:	0589      	lsls	r1, r1, #22
 8001eb4:	1c18      	adds	r0, r3, #0
 8001eb6:	f7fe fe47 	bl	8000b48 <__aeabi_fmul>
 8001eba:	1c03      	adds	r3, r0, #0
 8001ebc:	1c1a      	adds	r2, r3, #0
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <getSensorValue+0x738>)
 8001ec0:	331b      	adds	r3, #27
 8001ec2:	21ff      	movs	r1, #255	@ 0xff
 8001ec4:	4011      	ands	r1, r2
 8001ec6:	000c      	movs	r4, r1
 8001ec8:	7819      	ldrb	r1, [r3, #0]
 8001eca:	2000      	movs	r0, #0
 8001ecc:	4001      	ands	r1, r0
 8001ece:	1c08      	adds	r0, r1, #0
 8001ed0:	1c21      	adds	r1, r4, #0
 8001ed2:	4301      	orrs	r1, r0
 8001ed4:	7019      	strb	r1, [r3, #0]
 8001ed6:	0a11      	lsrs	r1, r2, #8
 8001ed8:	20ff      	movs	r0, #255	@ 0xff
 8001eda:	4001      	ands	r1, r0
 8001edc:	000c      	movs	r4, r1
 8001ede:	7859      	ldrb	r1, [r3, #1]
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	4001      	ands	r1, r0
 8001ee4:	1c08      	adds	r0, r1, #0
 8001ee6:	1c21      	adds	r1, r4, #0
 8001ee8:	4301      	orrs	r1, r0
 8001eea:	7059      	strb	r1, [r3, #1]
 8001eec:	0c11      	lsrs	r1, r2, #16
 8001eee:	20ff      	movs	r0, #255	@ 0xff
 8001ef0:	4001      	ands	r1, r0
 8001ef2:	000c      	movs	r4, r1
 8001ef4:	7899      	ldrb	r1, [r3, #2]
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	4001      	ands	r1, r0
 8001efa:	1c08      	adds	r0, r1, #0
 8001efc:	1c21      	adds	r1, r4, #0
 8001efe:	4301      	orrs	r1, r0
 8001f00:	7099      	strb	r1, [r3, #2]
 8001f02:	0e10      	lsrs	r0, r2, #24
 8001f04:	78da      	ldrb	r2, [r3, #3]
 8001f06:	2100      	movs	r1, #0
 8001f08:	400a      	ands	r2, r1
 8001f0a:	1c11      	adds	r1, r2, #0
 8001f0c:	1c02      	adds	r2, r0, #0
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.RotationVector.Accuracy = (float)(*(int16_t *)&bufferIO[21]) * SCALE_Q14;
 8001f12:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <getSensorValue+0x748>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	5e9b      	ldrsh	r3, [r3, r2]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff f90d 	bl	8001138 <__aeabi_i2f>
 8001f1e:	1c03      	adds	r3, r0, #0
 8001f20:	21e2      	movs	r1, #226	@ 0xe2
 8001f22:	0589      	lsls	r1, r1, #22
 8001f24:	1c18      	adds	r0, r3, #0
 8001f26:	f7fe fe0f 	bl	8000b48 <__aeabi_fmul>
 8001f2a:	1c03      	adds	r3, r0, #0
 8001f2c:	1c1a      	adds	r2, r3, #0
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <getSensorValue+0x738>)
 8001f30:	331f      	adds	r3, #31
 8001f32:	21ff      	movs	r1, #255	@ 0xff
 8001f34:	4011      	ands	r1, r2
 8001f36:	000c      	movs	r4, r1
 8001f38:	7819      	ldrb	r1, [r3, #0]
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	4001      	ands	r1, r0
 8001f3e:	1c08      	adds	r0, r1, #0
 8001f40:	1c21      	adds	r1, r4, #0
 8001f42:	4301      	orrs	r1, r0
 8001f44:	7019      	strb	r1, [r3, #0]
 8001f46:	0a11      	lsrs	r1, r2, #8
 8001f48:	20ff      	movs	r0, #255	@ 0xff
 8001f4a:	4001      	ands	r1, r0
 8001f4c:	000c      	movs	r4, r1
 8001f4e:	7859      	ldrb	r1, [r3, #1]
 8001f50:	2000      	movs	r0, #0
 8001f52:	4001      	ands	r1, r0
 8001f54:	1c08      	adds	r0, r1, #0
 8001f56:	1c21      	adds	r1, r4, #0
 8001f58:	4301      	orrs	r1, r0
 8001f5a:	7059      	strb	r1, [r3, #1]
 8001f5c:	0c11      	lsrs	r1, r2, #16
 8001f5e:	20ff      	movs	r0, #255	@ 0xff
 8001f60:	4001      	ands	r1, r0
 8001f62:	000c      	movs	r4, r1
 8001f64:	7899      	ldrb	r1, [r3, #2]
 8001f66:	2000      	movs	r0, #0
 8001f68:	4001      	ands	r1, r0
 8001f6a:	1c08      	adds	r0, r1, #0
 8001f6c:	1c21      	adds	r1, r4, #0
 8001f6e:	4301      	orrs	r1, r0
 8001f70:	7099      	strb	r1, [r3, #2]
 8001f72:	0e10      	lsrs	r0, r2, #24
 8001f74:	78da      	ldrb	r2, [r3, #3]
 8001f76:	2100      	movs	r1, #0
 8001f78:	400a      	ands	r2, r1
 8001f7a:	1c11      	adds	r1, r2, #0
 8001f7c:	1c02      	adds	r2, r0, #0
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	70da      	strb	r2, [r3, #3]
			// Update Euler
			quaternionUpdate(&sensorData.SenVal.RotationVector);
 8001f82:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <getSensorValue+0x74c>)
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff f9b9 	bl	80012fc <quaternionUpdate>
			sensorData.SenVal.RotationVector.J = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q14;
			sensorData.SenVal.RotationVector.K = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q14;
			sensorData.SenVal.RotationVector.Real = (float)(*(int16_t *)&bufferIO[19]) * SCALE_Q14;
			sensorData.SenVal.RotationVector.Accuracy = (float)(*(int16_t *)&bufferIO[21]) * SCALE_Q14;
			#endif
		break;
 8001f8a:	e0ee      	b.n	800216a <getSensorValue+0x912>
 8001f8c:	20000101 	.word	0x20000101
 8001f90:	2000027c 	.word	0x2000027c
 8001f94:	20000103 	.word	0x20000103
 8001f98:	20000105 	.word	0x20000105
 8001f9c:	20000107 	.word	0x20000107
 8001fa0:	20000109 	.word	0x20000109
 8001fa4:	2000028b 	.word	0x2000028b
		#endif
		#ifdef GAME_ROTATION_VECTOR
			case GAME_ROTATION_VECTOR:
			sensorData.SenVal.GameRotationVector.I = (float)(*(int16_t *)&bufferIO[13]) * SCALE_Q14;
 8001fa8:	4b71      	ldr	r3, [pc, #452]	@ (8002170 <getSensorValue+0x918>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	5e9b      	ldrsh	r3, [r3, r2]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff f8c2 	bl	8001138 <__aeabi_i2f>
 8001fb4:	1c03      	adds	r3, r0, #0
 8001fb6:	21e2      	movs	r1, #226	@ 0xe2
 8001fb8:	0589      	lsls	r1, r1, #22
 8001fba:	1c18      	adds	r0, r3, #0
 8001fbc:	f7fe fdc4 	bl	8000b48 <__aeabi_fmul>
 8001fc0:	1c03      	adds	r3, r0, #0
 8001fc2:	1c1a      	adds	r2, r3, #0
 8001fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8002174 <getSensorValue+0x91c>)
 8001fc6:	330f      	adds	r3, #15
 8001fc8:	21ff      	movs	r1, #255	@ 0xff
 8001fca:	4011      	ands	r1, r2
 8001fcc:	000c      	movs	r4, r1
 8001fce:	7819      	ldrb	r1, [r3, #0]
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	4001      	ands	r1, r0
 8001fd4:	1c08      	adds	r0, r1, #0
 8001fd6:	1c21      	adds	r1, r4, #0
 8001fd8:	4301      	orrs	r1, r0
 8001fda:	7019      	strb	r1, [r3, #0]
 8001fdc:	0a11      	lsrs	r1, r2, #8
 8001fde:	20ff      	movs	r0, #255	@ 0xff
 8001fe0:	4001      	ands	r1, r0
 8001fe2:	000c      	movs	r4, r1
 8001fe4:	7859      	ldrb	r1, [r3, #1]
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	4001      	ands	r1, r0
 8001fea:	1c08      	adds	r0, r1, #0
 8001fec:	1c21      	adds	r1, r4, #0
 8001fee:	4301      	orrs	r1, r0
 8001ff0:	7059      	strb	r1, [r3, #1]
 8001ff2:	0c11      	lsrs	r1, r2, #16
 8001ff4:	20ff      	movs	r0, #255	@ 0xff
 8001ff6:	4001      	ands	r1, r0
 8001ff8:	000c      	movs	r4, r1
 8001ffa:	7899      	ldrb	r1, [r3, #2]
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	4001      	ands	r1, r0
 8002000:	1c08      	adds	r0, r1, #0
 8002002:	1c21      	adds	r1, r4, #0
 8002004:	4301      	orrs	r1, r0
 8002006:	7099      	strb	r1, [r3, #2]
 8002008:	0e10      	lsrs	r0, r2, #24
 800200a:	78da      	ldrb	r2, [r3, #3]
 800200c:	2100      	movs	r1, #0
 800200e:	400a      	ands	r2, r1
 8002010:	1c11      	adds	r1, r2, #0
 8002012:	1c02      	adds	r2, r0, #0
 8002014:	430a      	orrs	r2, r1
 8002016:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.GameRotationVector.J = (float)(*(int16_t *)&bufferIO[15]) * SCALE_Q14;
 8002018:	4b57      	ldr	r3, [pc, #348]	@ (8002178 <getSensorValue+0x920>)
 800201a:	2200      	movs	r2, #0
 800201c:	5e9b      	ldrsh	r3, [r3, r2]
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff f88a 	bl	8001138 <__aeabi_i2f>
 8002024:	1c03      	adds	r3, r0, #0
 8002026:	21e2      	movs	r1, #226	@ 0xe2
 8002028:	0589      	lsls	r1, r1, #22
 800202a:	1c18      	adds	r0, r3, #0
 800202c:	f7fe fd8c 	bl	8000b48 <__aeabi_fmul>
 8002030:	1c03      	adds	r3, r0, #0
 8002032:	1c1a      	adds	r2, r3, #0
 8002034:	4b4f      	ldr	r3, [pc, #316]	@ (8002174 <getSensorValue+0x91c>)
 8002036:	3313      	adds	r3, #19
 8002038:	21ff      	movs	r1, #255	@ 0xff
 800203a:	4011      	ands	r1, r2
 800203c:	000c      	movs	r4, r1
 800203e:	7819      	ldrb	r1, [r3, #0]
 8002040:	2000      	movs	r0, #0
 8002042:	4001      	ands	r1, r0
 8002044:	1c08      	adds	r0, r1, #0
 8002046:	1c21      	adds	r1, r4, #0
 8002048:	4301      	orrs	r1, r0
 800204a:	7019      	strb	r1, [r3, #0]
 800204c:	0a11      	lsrs	r1, r2, #8
 800204e:	20ff      	movs	r0, #255	@ 0xff
 8002050:	4001      	ands	r1, r0
 8002052:	000c      	movs	r4, r1
 8002054:	7859      	ldrb	r1, [r3, #1]
 8002056:	2000      	movs	r0, #0
 8002058:	4001      	ands	r1, r0
 800205a:	1c08      	adds	r0, r1, #0
 800205c:	1c21      	adds	r1, r4, #0
 800205e:	4301      	orrs	r1, r0
 8002060:	7059      	strb	r1, [r3, #1]
 8002062:	0c11      	lsrs	r1, r2, #16
 8002064:	20ff      	movs	r0, #255	@ 0xff
 8002066:	4001      	ands	r1, r0
 8002068:	000c      	movs	r4, r1
 800206a:	7899      	ldrb	r1, [r3, #2]
 800206c:	2000      	movs	r0, #0
 800206e:	4001      	ands	r1, r0
 8002070:	1c08      	adds	r0, r1, #0
 8002072:	1c21      	adds	r1, r4, #0
 8002074:	4301      	orrs	r1, r0
 8002076:	7099      	strb	r1, [r3, #2]
 8002078:	0e10      	lsrs	r0, r2, #24
 800207a:	78da      	ldrb	r2, [r3, #3]
 800207c:	2100      	movs	r1, #0
 800207e:	400a      	ands	r2, r1
 8002080:	1c11      	adds	r1, r2, #0
 8002082:	1c02      	adds	r2, r0, #0
 8002084:	430a      	orrs	r2, r1
 8002086:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.GameRotationVector.K = (float)(*(int16_t *)&bufferIO[17]) * SCALE_Q14;
 8002088:	4b3c      	ldr	r3, [pc, #240]	@ (800217c <getSensorValue+0x924>)
 800208a:	2200      	movs	r2, #0
 800208c:	5e9b      	ldrsh	r3, [r3, r2]
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff f852 	bl	8001138 <__aeabi_i2f>
 8002094:	1c03      	adds	r3, r0, #0
 8002096:	21e2      	movs	r1, #226	@ 0xe2
 8002098:	0589      	lsls	r1, r1, #22
 800209a:	1c18      	adds	r0, r3, #0
 800209c:	f7fe fd54 	bl	8000b48 <__aeabi_fmul>
 80020a0:	1c03      	adds	r3, r0, #0
 80020a2:	1c1a      	adds	r2, r3, #0
 80020a4:	4b33      	ldr	r3, [pc, #204]	@ (8002174 <getSensorValue+0x91c>)
 80020a6:	3317      	adds	r3, #23
 80020a8:	21ff      	movs	r1, #255	@ 0xff
 80020aa:	4011      	ands	r1, r2
 80020ac:	000c      	movs	r4, r1
 80020ae:	7819      	ldrb	r1, [r3, #0]
 80020b0:	2000      	movs	r0, #0
 80020b2:	4001      	ands	r1, r0
 80020b4:	1c08      	adds	r0, r1, #0
 80020b6:	1c21      	adds	r1, r4, #0
 80020b8:	4301      	orrs	r1, r0
 80020ba:	7019      	strb	r1, [r3, #0]
 80020bc:	0a11      	lsrs	r1, r2, #8
 80020be:	20ff      	movs	r0, #255	@ 0xff
 80020c0:	4001      	ands	r1, r0
 80020c2:	000c      	movs	r4, r1
 80020c4:	7859      	ldrb	r1, [r3, #1]
 80020c6:	2000      	movs	r0, #0
 80020c8:	4001      	ands	r1, r0
 80020ca:	1c08      	adds	r0, r1, #0
 80020cc:	1c21      	adds	r1, r4, #0
 80020ce:	4301      	orrs	r1, r0
 80020d0:	7059      	strb	r1, [r3, #1]
 80020d2:	0c11      	lsrs	r1, r2, #16
 80020d4:	20ff      	movs	r0, #255	@ 0xff
 80020d6:	4001      	ands	r1, r0
 80020d8:	000c      	movs	r4, r1
 80020da:	7899      	ldrb	r1, [r3, #2]
 80020dc:	2000      	movs	r0, #0
 80020de:	4001      	ands	r1, r0
 80020e0:	1c08      	adds	r0, r1, #0
 80020e2:	1c21      	adds	r1, r4, #0
 80020e4:	4301      	orrs	r1, r0
 80020e6:	7099      	strb	r1, [r3, #2]
 80020e8:	0e10      	lsrs	r0, r2, #24
 80020ea:	78da      	ldrb	r2, [r3, #3]
 80020ec:	2100      	movs	r1, #0
 80020ee:	400a      	ands	r2, r1
 80020f0:	1c11      	adds	r1, r2, #0
 80020f2:	1c02      	adds	r2, r0, #0
 80020f4:	430a      	orrs	r2, r1
 80020f6:	70da      	strb	r2, [r3, #3]
			sensorData.SenVal.GameRotationVector.Real = (float)(*(int16_t *)&bufferIO[19]) * SCALE_Q14;
 80020f8:	4b21      	ldr	r3, [pc, #132]	@ (8002180 <getSensorValue+0x928>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	5e9b      	ldrsh	r3, [r3, r2]
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff f81a 	bl	8001138 <__aeabi_i2f>
 8002104:	1c03      	adds	r3, r0, #0
 8002106:	21e2      	movs	r1, #226	@ 0xe2
 8002108:	0589      	lsls	r1, r1, #22
 800210a:	1c18      	adds	r0, r3, #0
 800210c:	f7fe fd1c 	bl	8000b48 <__aeabi_fmul>
 8002110:	1c03      	adds	r3, r0, #0
 8002112:	1c1a      	adds	r2, r3, #0
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <getSensorValue+0x91c>)
 8002116:	331b      	adds	r3, #27
 8002118:	21ff      	movs	r1, #255	@ 0xff
 800211a:	4011      	ands	r1, r2
 800211c:	000c      	movs	r4, r1
 800211e:	7819      	ldrb	r1, [r3, #0]
 8002120:	2000      	movs	r0, #0
 8002122:	4001      	ands	r1, r0
 8002124:	1c08      	adds	r0, r1, #0
 8002126:	1c21      	adds	r1, r4, #0
 8002128:	4301      	orrs	r1, r0
 800212a:	7019      	strb	r1, [r3, #0]
 800212c:	0a11      	lsrs	r1, r2, #8
 800212e:	20ff      	movs	r0, #255	@ 0xff
 8002130:	4001      	ands	r1, r0
 8002132:	000c      	movs	r4, r1
 8002134:	7859      	ldrb	r1, [r3, #1]
 8002136:	2000      	movs	r0, #0
 8002138:	4001      	ands	r1, r0
 800213a:	1c08      	adds	r0, r1, #0
 800213c:	1c21      	adds	r1, r4, #0
 800213e:	4301      	orrs	r1, r0
 8002140:	7059      	strb	r1, [r3, #1]
 8002142:	0c11      	lsrs	r1, r2, #16
 8002144:	20ff      	movs	r0, #255	@ 0xff
 8002146:	4001      	ands	r1, r0
 8002148:	000c      	movs	r4, r1
 800214a:	7899      	ldrb	r1, [r3, #2]
 800214c:	2000      	movs	r0, #0
 800214e:	4001      	ands	r1, r0
 8002150:	1c08      	adds	r0, r1, #0
 8002152:	1c21      	adds	r1, r4, #0
 8002154:	4301      	orrs	r1, r0
 8002156:	7099      	strb	r1, [r3, #2]
 8002158:	0e10      	lsrs	r0, r2, #24
 800215a:	78da      	ldrb	r2, [r3, #3]
 800215c:	2100      	movs	r1, #0
 800215e:	400a      	ands	r2, r1
 8002160:	1c11      	adds	r1, r2, #0
 8002162:	1c02      	adds	r2, r0, #0
 8002164:	430a      	orrs	r2, r1
 8002166:	70da      	strb	r2, [r3, #3]
		break;
 8002168:	46c0      	nop			@ (mov r8, r8)
			sensorData.SenVal.WheelEncoder.DataType = bufferIO[18];
			sensorData.SenVal.WheelEncoder.Data = *(int16_t *)&bufferIO[19];
		break;
		#endif
	}
}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	20000101 	.word	0x20000101
 8002174:	2000027c 	.word	0x2000027c
 8002178:	20000103 	.word	0x20000103
 800217c:	20000105 	.word	0x20000105
 8002180:	20000107 	.word	0x20000107

08002184 <processCommandResponse>:

// Process a command response
static HAL_StatusTypeDef processCommandResponse(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	// Reset complete
	switch(cmdResponse.command)
 8002188:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <processCommandResponse+0x8c>)
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b0d      	cmp	r3, #13
 800218e:	dc09      	bgt.n	80021a4 <processCommandResponse+0x20>
 8002190:	2b04      	cmp	r3, #4
 8002192:	db39      	blt.n	8002208 <processCommandResponse+0x84>
 8002194:	3b04      	subs	r3, #4
 8002196:	2b09      	cmp	r3, #9
 8002198:	d836      	bhi.n	8002208 <processCommandResponse+0x84>
 800219a:	009a      	lsls	r2, r3, #2
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <processCommandResponse+0x90>)
 800219e:	18d3      	adds	r3, r2, r3
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	469f      	mov	pc, r3
 80021a4:	2b84      	cmp	r3, #132	@ 0x84
 80021a6:	d12f      	bne.n	8002208 <processCommandResponse+0x84>
			return HAL_OK;
		break;
		#endif
		case COMMAND_UNSOLICITED_INITIALIZE: // 0x84 – Initialize (unsolicited)
		case COMMAND_INITIALIZE: // 0x04 – Initialize
			if (!bufferIO[9])
 80021a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <processCommandResponse+0x94>)
 80021aa:	7a5b      	ldrb	r3, [r3, #9]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d12a      	bne.n	8002206 <processCommandResponse+0x82>
			{
				resetOccurred = 1;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <processCommandResponse+0x98>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
				return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e027      	b.n	800220a <processCommandResponse+0x86>
			}
		break;
		case COMMAND_SAVE_DCD: // 0x06 – Save DCD
			saveDcdStatus = bufferIO[9];
 80021ba:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <processCommandResponse+0x94>)
 80021bc:	7a5a      	ldrb	r2, [r3, #9]
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <processCommandResponse+0x9c>)
 80021c0:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e021      	b.n	800220a <processCommandResponse+0x86>
		break;
		case COMMAND_ME_CALIBRATE: // 0x07 – Configure ME Calibration
			calibrationStatus = *(BNO_calibrationStat_t *)&bufferIO[9];
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <processCommandResponse+0xa0>)
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <processCommandResponse+0xa4>)
 80021ca:	0010      	movs	r0, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	2306      	movs	r3, #6
 80021d0:	001a      	movs	r2, r3
 80021d2:	f008 fb07 	bl	800a7e4 <memcpy>
			return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e017      	b.n	800220a <processCommandResponse+0x86>
		break;
		case COMMAND_OSCILLATOR: // 0x0A – Get Oscillator Type Command
			oscillatorType = bufferIO[9];
 80021da:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <processCommandResponse+0x94>)
 80021dc:	7a5a      	ldrb	r2, [r3, #9]
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <processCommandResponse+0xa8>)
 80021e0:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e011      	b.n	800220a <processCommandResponse+0x86>
		break;
		case COMMAND_TURNTABLE_CAL: // 0x0C – Turntable Calibration
			calibrationStatus.Status = bufferIO[9];
 80021e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <processCommandResponse+0x94>)
 80021e8:	7a5a      	ldrb	r2, [r3, #9]
 80021ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <processCommandResponse+0xa4>)
 80021ec:	701a      	strb	r2, [r3, #0]
			return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e00b      	b.n	800220a <processCommandResponse+0x86>
		break;
		case COMMAND_BOOTLOADER:// 0x0D – Bootloader command
			bootLoader = *(BNO_Boot_t *)&bufferIO[10];
 80021f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <processCommandResponse+0xac>)
 80021f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002234 <processCommandResponse+0xb0>)
 80021f6:	0010      	movs	r0, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	230a      	movs	r3, #10
 80021fc:	001a      	movs	r2, r3
 80021fe:	f008 faf1 	bl	800a7e4 <memcpy>
			return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e001      	b.n	800220a <processCommandResponse+0x86>
		break;
 8002206:	46c0      	nop			@ (mov r8, r8)
		break;
	}
	return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000250 	.word	0x20000250
 8002214:	0800afd8 	.word	0x0800afd8
 8002218:	200000f4 	.word	0x200000f4
 800221c:	20000216 	.word	0x20000216
 8002220:	20000000 	.word	0x20000000
 8002224:	200000fd 	.word	0x200000fd
 8002228:	20000228 	.word	0x20000228
 800222c:	20000241 	.word	0x20000241
 8002230:	200000fe 	.word	0x200000fe
 8002234:	20000244 	.word	0x20000244

08002238 <processResponse>:

// Process a response
static HAL_StatusTypeDef processResponse(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	switch(bufferIO[4]) {
 800223c:	4b36      	ldr	r3, [pc, #216]	@ (8002318 <processResponse+0xe0>)
 800223e:	791b      	ldrb	r3, [r3, #4]
 8002240:	2bfc      	cmp	r3, #252	@ 0xfc
 8002242:	dd00      	ble.n	8002246 <processResponse+0xe>
 8002244:	e063      	b.n	800230e <processResponse+0xd6>
 8002246:	2bef      	cmp	r3, #239	@ 0xef
 8002248:	da04      	bge.n	8002254 <processResponse+0x1c>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <processResponse+0x2c>
 800224e:	2b01      	cmp	r3, #1
 8002250:	d00e      	beq.n	8002270 <processResponse+0x38>
 8002252:	e05c      	b.n	800230e <processResponse+0xd6>
 8002254:	3bef      	subs	r3, #239	@ 0xef
 8002256:	2b0d      	cmp	r3, #13
 8002258:	d859      	bhi.n	800230e <processResponse+0xd6>
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <processResponse+0xe4>)
 800225e:	18d3      	adds	r3, r2, r3
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	469f      	mov	pc, r3
		case REPORT_UNSOLICITED_RESPONSE: // 0x00
			if(bufferIO[2] == CHANNEL_COMMAND) return HAL_OK;
 8002264:	4b2c      	ldr	r3, [pc, #176]	@ (8002318 <processResponse+0xe0>)
 8002266:	789b      	ldrb	r3, [r3, #2]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d14d      	bne.n	8002308 <processResponse+0xd0>
 800226c:	2300      	movs	r3, #0
 800226e:	e04f      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_UNSOLICITED_RESPONSE1: // 0x01
			if(bufferIO[2] == CHANNEL_EXECUTABLE) return HAL_OK;
 8002270:	4b29      	ldr	r3, [pc, #164]	@ (8002318 <processResponse+0xe0>)
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d149      	bne.n	800230c <processResponse+0xd4>
 8002278:	2300      	movs	r3, #0
 800227a:	e049      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_COMMAND_RESPONSE: // 0xF1
			cmdResponse = *(BNO_CommandResp_t *)&bufferIO[5];
 800227c:	4b28      	ldr	r3, [pc, #160]	@ (8002320 <processResponse+0xe8>)
 800227e:	4a29      	ldr	r2, [pc, #164]	@ (8002324 <processResponse+0xec>)
 8002280:	0010      	movs	r0, r2
 8002282:	0019      	movs	r1, r3
 8002284:	230f      	movs	r3, #15
 8002286:	001a      	movs	r2, r3
 8002288:	f008 faac 	bl	800a7e4 <memcpy>
			return processCommandResponse();
 800228c:	f7ff ff7a 	bl	8002184 <processCommandResponse>
 8002290:	0003      	movs	r3, r0
 8002292:	e03d      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_FRS_READ_RESPONSE: // 0xF3
			frsReadResponse = *(BNO_FrsReadResp_t *)&bufferIO[5];
 8002294:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <processResponse+0xe8>)
 8002296:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <processResponse+0xf0>)
 8002298:	0010      	movs	r0, r2
 800229a:	0019      	movs	r1, r3
 800229c:	230d      	movs	r3, #13
 800229e:	001a      	movs	r2, r3
 80022a0:	f008 faa0 	bl	800a7e4 <memcpy>
			return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e033      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_FRS_WRITE_RESPONSE: // 0xF5
			frsWriteResponse = *(BNO_FrsWriteResp_t *)&bufferIO[5];
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <processResponse+0xe8>)
 80022aa:	4a20      	ldr	r2, [pc, #128]	@ (800232c <processResponse+0xf4>)
 80022ac:	0010      	movs	r0, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	2303      	movs	r3, #3
 80022b2:	001a      	movs	r2, r3
 80022b4:	f008 fa96 	bl	800a7e4 <memcpy>
			return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e029      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_PRODUCT_ID_RESPONSE: // 0xF8
			myID = *(BNO_productID_t *)&bufferIO[5];
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <processResponse+0xe8>)
 80022be:	4a1c      	ldr	r2, [pc, #112]	@ (8002330 <processResponse+0xf8>)
 80022c0:	0010      	movs	r0, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	230d      	movs	r3, #13
 80022c6:	001a      	movs	r2, r3
 80022c8:	f008 fa8c 	bl	800a7e4 <memcpy>
			return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e01f      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_BASE_TIMESTAMP_REF: // 0xFB
			if(bufferIO[2] == CHANNEL_REPORTS)
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <processResponse+0xe0>)
 80022d2:	789b      	ldrb	r3, [r3, #2]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d103      	bne.n	80022e0 <processResponse+0xa8>
			{
				getSensorValue();
 80022d8:	f7ff fabe 	bl	8001858 <getSensorValue>
				return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e017      	b.n	8002310 <processResponse+0xd8>
			}
			return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e015      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_GET_FEATURE_RESPONSE: // 0xFC
			sensorFeartures = *(BNO_Feature_t *)&bufferIO[5];
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <processResponse+0xe8>)
 80022e6:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <processResponse+0xfc>)
 80022e8:	0010      	movs	r0, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	2310      	movs	r3, #16
 80022ee:	001a      	movs	r2, r3
 80022f0:	f008 fa78 	bl	800a7e4 <memcpy>
			return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e00b      	b.n	8002310 <processResponse+0xd8>
		break;
		case REPORT_SENSOR_FLUSH_RESPONSE: // 0xEF
			if(bufferIO[2] == CHANNEL_REPORTS)
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <processResponse+0xe0>)
 80022fa:	789b      	ldrb	r3, [r3, #2]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d101      	bne.n	8002304 <processResponse+0xcc>
			{
				// Not using them, so....
				return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e005      	b.n	8002310 <processResponse+0xd8>
			}
			return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e003      	b.n	8002310 <processResponse+0xd8>
		break;
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	e000      	b.n	800230e <processResponse+0xd6>
		break;
 800230c:	46c0      	nop			@ (mov r8, r8)
		break;
	}
	return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	200000f4 	.word	0x200000f4
 800231c:	0800b000 	.word	0x0800b000
 8002320:	200000f9 	.word	0x200000f9
 8002324:	20000250 	.word	0x20000250
 8002328:	20000234 	.word	0x20000234
 800232c:	20000230 	.word	0x20000230
 8002330:	20000218 	.word	0x20000218
 8002334:	20000260 	.word	0x20000260

08002338 <waitForPacket>:

// Wait to receive a packet from BNO
static HAL_StatusTypeDef waitForPacket(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	if(waitInt())
 800233c:	f7fe ff66 	bl	800120c <waitInt>
 8002340:	1e03      	subs	r3, r0, #0
 8002342:	d003      	beq.n	800234c <waitForPacket+0x14>
	{
		return receivePacket();
 8002344:	f7ff fa22 	bl	800178c <receivePacket>
 8002348:	0003      	movs	r3, r0
 800234a:	e000      	b.n	800234e <waitForPacket+0x16>
	}
	return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <waitForCommandResponse>:

// Wait for a response from sensor
static HAL_StatusTypeDef waitForCommandResponse(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
	uint8_t sendChannel = CHANNEL_CONTROL;
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2202      	movs	r2, #2
 800235e:	701a      	strb	r2, [r3, #0]
	uint8_t receiveChannel = CHANNEL_CONTROL;
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
	uint8_t expectedResponse = REPORT_COMMAND_RESPONSE;
 8002366:	1dbb      	adds	r3, r7, #6
 8002368:	22f1      	movs	r2, #241	@ 0xf1
 800236a:	701a      	strb	r2, [r3, #0]
	switch(bufferIO[4]) {
 800236c:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <waitForCommandResponse+0xb4>)
 800236e:	791b      	ldrb	r3, [r3, #4]
 8002370:	3bf0      	subs	r3, #240	@ 0xf0
 8002372:	2b0e      	cmp	r3, #14
 8002374:	d81b      	bhi.n	80023ae <waitForCommandResponse+0x5a>
 8002376:	009a      	lsls	r2, r3, #2
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <waitForCommandResponse+0xb8>)
 800237a:	18d3      	adds	r3, r2, r3
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	469f      	mov	pc, r3
		case REPORT_PRODUCT_ID_REQUEST:
			expectedResponse = REPORT_PRODUCT_ID_RESPONSE;
 8002380:	1dbb      	adds	r3, r7, #6
 8002382:	22f8      	movs	r2, #248	@ 0xf8
 8002384:	701a      	strb	r2, [r3, #0]
		break;
 8002386:	e012      	b.n	80023ae <waitForCommandResponse+0x5a>
		case REPORT_SENSOR_FLUSH_REQUEST:
			receiveChannel = CHANNEL_REPORTS;
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	2203      	movs	r2, #3
 800238c:	701a      	strb	r2, [r3, #0]
			expectedResponse = REPORT_SENSOR_FLUSH_RESPONSE;
 800238e:	1dbb      	adds	r3, r7, #6
 8002390:	22ef      	movs	r2, #239	@ 0xef
 8002392:	701a      	strb	r2, [r3, #0]
		break;
 8002394:	e00b      	b.n	80023ae <waitForCommandResponse+0x5a>
		case REPORT_GET_FEATURE_REQUEST:
			expectedResponse = REPORT_GET_FEATURE_RESPONSE;
 8002396:	1dbb      	adds	r3, r7, #6
 8002398:	22fc      	movs	r2, #252	@ 0xfc
 800239a:	701a      	strb	r2, [r3, #0]
		break;
 800239c:	e007      	b.n	80023ae <waitForCommandResponse+0x5a>
		case REPORT_FRS_WRITE_REQUEST:
			expectedResponse = REPORT_FRS_WRITE_RESPONSE;
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	22f5      	movs	r2, #245	@ 0xf5
 80023a2:	701a      	strb	r2, [r3, #0]
		break;
 80023a4:	e003      	b.n	80023ae <waitForCommandResponse+0x5a>
		case REPORT_FRS_READ_REQUEST:
			expectedResponse = REPORT_FRS_READ_RESPONSE;
 80023a6:	1dbb      	adds	r3, r7, #6
 80023a8:	22f3      	movs	r2, #243	@ 0xf3
 80023aa:	701a      	strb	r2, [r3, #0]
		break;
 80023ac:	46c0      	nop			@ (mov r8, r8)
	}
	if(sendPacket(sendChannel) == HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7ff f974 	bl	80016a0 <sendPacket>
 80023b8:	1e03      	subs	r3, r0, #0
 80023ba:	d120      	bne.n	80023fe <waitForCommandResponse+0xaa>
	{
		uint8_t retry = 5;
 80023bc:	1d7b      	adds	r3, r7, #5
 80023be:	2205      	movs	r2, #5
 80023c0:	701a      	strb	r2, [r3, #0]
		while(retry)
 80023c2:	e018      	b.n	80023f6 <waitForCommandResponse+0xa2>
		{
			if(waitForPacket() == HAL_OK)
 80023c4:	f7ff ffb8 	bl	8002338 <waitForPacket>
 80023c8:	1e03      	subs	r3, r0, #0
 80023ca:	d10f      	bne.n	80023ec <waitForCommandResponse+0x98>
			{
				if((bufferIO[2] == receiveChannel)  && (bufferIO[4] == expectedResponse))
 80023cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <waitForCommandResponse+0xb4>)
 80023ce:	789b      	ldrb	r3, [r3, #2]
 80023d0:	1dfa      	adds	r2, r7, #7
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d109      	bne.n	80023ec <waitForCommandResponse+0x98>
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <waitForCommandResponse+0xb4>)
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	1dba      	adds	r2, r7, #6
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d103      	bne.n	80023ec <waitForCommandResponse+0x98>
				{
					return processResponse(); // Found correct packet!
 80023e4:	f7ff ff28 	bl	8002238 <processResponse>
 80023e8:	0003      	movs	r3, r0
 80023ea:	e009      	b.n	8002400 <waitForCommandResponse+0xac>
				}
			}
			retry--;
 80023ec:	1d7b      	adds	r3, r7, #5
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	1d7b      	adds	r3, r7, #5
 80023f2:	3a01      	subs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
		while(retry)
 80023f6:	1d7b      	adds	r3, r7, #5
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e2      	bne.n	80023c4 <waitForCommandResponse+0x70>
		}
	}
	return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}
 8002408:	200000f4 	.word	0x200000f4
 800240c:	0800b038 	.word	0x0800b038

08002410 <getID>:

// Gets the sensor SW information
static HAL_StatusTypeDef getID(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	resetHeader(REPORT_PRODUCT_ID_REQUEST);
 8002414:	20f9      	movs	r0, #249	@ 0xf9
 8002416:	f7ff f92d 	bl	8001674 <resetHeader>
	return waitForCommandResponse();
 800241a:	f7ff ff9b 	bl	8002354 <waitForCommandResponse>
 800241e:	0003      	movs	r3, r0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <BNO_Init>:
// Initialize the sensor
// During reset or power-on sequence, the bootloader first checks the status of the BOOTN pin.
// If the pin is pulled low during reset or poweron, the BNO08X will enter the bootloader mode.
// If the BOOTN pin is pulled high, then the bootloader starts the application
HAL_StatusTypeDef BNO_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	// Start microsecond timer
	HAL_TIM_Base_Start(&htim14);
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <BNO_Init+0x38>)
 800242e:	0018      	movs	r0, r3
 8002430:	f005 fdba 	bl	8007fa8 <HAL_TIM_Base_Start>

	// If we got the initiat packet we make a soft reset
	//if(waitForPacket()) {
		if(processResponse() == HAL_OK)
 8002434:	f7ff ff00 	bl	8002238 <processResponse>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d10d      	bne.n	8002458 <BNO_Init+0x30>
		{
			// Wait for intterupt
			if(waitInt())
 800243c:	f7fe fee6 	bl	800120c <waitInt>
 8002440:	1e03      	subs	r3, r0, #0
 8002442:	d009      	beq.n	8002458 <BNO_Init+0x30>
			{
				if(BNO_Reset() == HAL_OK)
 8002444:	f000 f80e 	bl	8002464 <BNO_Reset>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d105      	bne.n	8002458 <BNO_Init+0x30>
				{
					// Finally, we want to interrogate the device about its model and version.
					BNO_On();
 800244c:	f000 f82c 	bl	80024a8 <BNO_On>
					return getID();
 8002450:	f7ff ffde 	bl	8002410 <getID>
 8002454:	0003      	movs	r3, r0
 8002456:	e000      	b.n	800245a <BNO_Init+0x32>
				}
			}
		}
	//}
	return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200004c0 	.word	0x200004c0

08002464 <BNO_Reset>:
	return sensorData.sensorId;
}

// Soft reset the sensor
HAL_StatusTypeDef BNO_Reset(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	if(sendExecutable(COMMAND_INITIALIZE_RESET) != HAL_OK)
 8002468:	2001      	movs	r0, #1
 800246a:	f7ff f9e1 	bl	8001830 <sendExecutable>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <BNO_Reset+0x12>
	{ // Write 1 byte to chan EXE
		return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e013      	b.n	800249e <BNO_Reset+0x3a>
	}
	HAL_Delay(700); // 700 millisecs for reboot
 8002476:	23af      	movs	r3, #175	@ 0xaf
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	0018      	movs	r0, r3
 800247c:	f001 fb8e 	bl	8003b9c <HAL_Delay>
	// 2 packet to be ignored after reset
	if(waitForCommandResponse() == HAL_OK)
 8002480:	f7ff ff68 	bl	8002354 <waitForCommandResponse>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d109      	bne.n	800249c <BNO_Reset+0x38>
	{
		if(resetOccurred)
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <BNO_Reset+0x40>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <BNO_Reset+0x34>
		{
			resetOccurred = 0;
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <BNO_Reset+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e001      	b.n	800249c <BNO_Reset+0x38>
		}
		else
		{
			return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <BNO_Reset+0x3a>
		}
	}
	return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000216 	.word	0x20000216

080024a8 <BNO_On>:

// Turn sensor ON
HAL_StatusTypeDef BNO_On(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	return sendExecutable(COMMAND_INITIALIZE_ON);
 80024ac:	2002      	movs	r0, #2
 80024ae:	f7ff f9bf 	bl	8001830 <sendExecutable>
 80024b2:	0003      	movs	r3, r0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <BNO_dataAvailable>:
    return HAL_ERROR;  // Return error if any step fails
}
#endif
// Check if we have new data
HAL_StatusTypeDef BNO_dataAvailable(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
	if(waitForPacket() == HAL_OK)
 80024be:	f7ff ff3b 	bl	8002338 <waitForPacket>
 80024c2:	1e03      	subs	r3, r0, #0
 80024c4:	d103      	bne.n	80024ce <BNO_dataAvailable+0x14>
	{
		return processResponse();
 80024c6:	f7ff feb7 	bl	8002238 <processResponse>
 80024ca:	0003      	movs	r3, r0
 80024cc:	e000      	b.n	80024d0 <BNO_dataAvailable+0x16>
	}
	return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <collect_sensor_data>:
	return sensorData.SenVal.WheelEncoder;
}
#endif

void collect_sensor_data(uint16_t* database)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b099      	sub	sp, #100	@ 0x64
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	union data value[21];

	// collected the float values in the union
	value[0].f = rpy.Roll;
 80024e0:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <collect_sensor_data+0x1f8>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2108      	movs	r1, #8
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	601a      	str	r2, [r3, #0]
	value[1].f = rpy.Pitch;
 80024ea:	4b79      	ldr	r3, [pc, #484]	@ (80026d0 <collect_sensor_data+0x1f8>)
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	605a      	str	r2, [r3, #4]
	value[2].f = rpy.Yaw;
 80024f2:	4b77      	ldr	r3, [pc, #476]	@ (80026d0 <collect_sensor_data+0x1f8>)
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	609a      	str	r2, [r3, #8]

	value[3].f = sensorData.SenVal.Accelerometer.X;
 80024fa:	4b76      	ldr	r3, [pc, #472]	@ (80026d4 <collect_sensor_data+0x1fc>)
 80024fc:	7bda      	ldrb	r2, [r3, #15]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	4313      	orrs	r3, r2
 8002508:	1c1a      	adds	r2, r3, #0
 800250a:	187b      	adds	r3, r7, r1
 800250c:	60da      	str	r2, [r3, #12]
	value[4].f = sensorData.SenVal.Accelerometer.Y;
 800250e:	4b71      	ldr	r3, [pc, #452]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002510:	7cda      	ldrb	r2, [r3, #19]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	4313      	orrs	r3, r2
 800251c:	1c1a      	adds	r2, r3, #0
 800251e:	187b      	adds	r3, r7, r1
 8002520:	611a      	str	r2, [r3, #16]
	value[5].f = sensorData.SenVal.Accelerometer.Z;
 8002522:	4b6c      	ldr	r3, [pc, #432]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002524:	7dda      	ldrb	r2, [r3, #23]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	4313      	orrs	r3, r2
 8002530:	1c1a      	adds	r2, r3, #0
 8002532:	187b      	adds	r3, r7, r1
 8002534:	615a      	str	r2, [r3, #20]

	value[6].f = sensorData.SenVal.Gyroscope.X;
 8002536:	4b67      	ldr	r3, [pc, #412]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002538:	7bda      	ldrb	r2, [r3, #15]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	4313      	orrs	r3, r2
 8002544:	1c1a      	adds	r2, r3, #0
 8002546:	187b      	adds	r3, r7, r1
 8002548:	619a      	str	r2, [r3, #24]
	value[7].f = sensorData.SenVal.Gyroscope.Y;
 800254a:	4b62      	ldr	r3, [pc, #392]	@ (80026d4 <collect_sensor_data+0x1fc>)
 800254c:	7cda      	ldrb	r2, [r3, #19]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	4313      	orrs	r3, r2
 8002558:	1c1a      	adds	r2, r3, #0
 800255a:	187b      	adds	r3, r7, r1
 800255c:	61da      	str	r2, [r3, #28]
	value[8].f = sensorData.SenVal.Gyroscope.Z;
 800255e:	4b5d      	ldr	r3, [pc, #372]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002560:	7dda      	ldrb	r2, [r3, #23]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	4313      	orrs	r3, r2
 800256c:	1c1a      	adds	r2, r3, #0
 800256e:	187b      	adds	r3, r7, r1
 8002570:	621a      	str	r2, [r3, #32]

	value[9].f = sensorData.SenVal.MagneticField.X;
 8002572:	4b58      	ldr	r3, [pc, #352]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002574:	7bda      	ldrb	r2, [r3, #15]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	4313      	orrs	r3, r2
 8002580:	1c1a      	adds	r2, r3, #0
 8002582:	187b      	adds	r3, r7, r1
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24
	value[10].f = sensorData.SenVal.MagneticField.Y;
 8002586:	4b53      	ldr	r3, [pc, #332]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002588:	7cda      	ldrb	r2, [r3, #19]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	4313      	orrs	r3, r2
 8002594:	1c1a      	adds	r2, r3, #0
 8002596:	187b      	adds	r3, r7, r1
 8002598:	629a      	str	r2, [r3, #40]	@ 0x28
	value[11].f = sensorData.SenVal.MagneticField.Z;
 800259a:	4b4e      	ldr	r3, [pc, #312]	@ (80026d4 <collect_sensor_data+0x1fc>)
 800259c:	7dda      	ldrb	r2, [r3, #23]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	4313      	orrs	r3, r2
 80025a8:	1c1a      	adds	r2, r3, #0
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c

	value[12].f = sensorData.SenVal.RotationVector.I;
 80025ae:	4b49      	ldr	r3, [pc, #292]	@ (80026d4 <collect_sensor_data+0x1fc>)
 80025b0:	7bda      	ldrb	r2, [r3, #15]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	1c1a      	adds	r2, r3, #0
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	631a      	str	r2, [r3, #48]	@ 0x30
	value[13].f = sensorData.SenVal.RotationVector.J;
 80025c2:	4b44      	ldr	r3, [pc, #272]	@ (80026d4 <collect_sensor_data+0x1fc>)
 80025c4:	7cda      	ldrb	r2, [r3, #19]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	4313      	orrs	r3, r2
 80025d0:	1c1a      	adds	r2, r3, #0
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	635a      	str	r2, [r3, #52]	@ 0x34
	value[14].f = sensorData.SenVal.RotationVector.K;
 80025d6:	4b3f      	ldr	r3, [pc, #252]	@ (80026d4 <collect_sensor_data+0x1fc>)
 80025d8:	7dda      	ldrb	r2, [r3, #23]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	4313      	orrs	r3, r2
 80025e4:	1c1a      	adds	r2, r3, #0
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	639a      	str	r2, [r3, #56]	@ 0x38
	value[15].f = sensorData.SenVal.RotationVector.Real;
 80025ea:	4b3a      	ldr	r3, [pc, #232]	@ (80026d4 <collect_sensor_data+0x1fc>)
 80025ec:	7eda      	ldrb	r2, [r3, #27]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	4313      	orrs	r3, r2
 80025f8:	1c1a      	adds	r2, r3, #0
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	value[16].f = sensorData.SenVal.RotationVector.Accuracy;
 80025fe:	4b35      	ldr	r3, [pc, #212]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002600:	7fda      	ldrb	r2, [r3, #31]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	4313      	orrs	r3, r2
 800260c:	1c1a      	adds	r2, r3, #0
 800260e:	187b      	adds	r3, r7, r1
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40

	value[17].f = sensorData.SenVal.GameRotationVector.I;
 8002612:	4b30      	ldr	r3, [pc, #192]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002614:	7bda      	ldrb	r2, [r3, #15]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	4313      	orrs	r3, r2
 8002620:	1c1a      	adds	r2, r3, #0
 8002622:	187b      	adds	r3, r7, r1
 8002624:	645a      	str	r2, [r3, #68]	@ 0x44
	value[18].f = sensorData.SenVal.GameRotationVector.J;
 8002626:	4b2b      	ldr	r3, [pc, #172]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002628:	7cda      	ldrb	r2, [r3, #19]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	4313      	orrs	r3, r2
 8002634:	1c1a      	adds	r2, r3, #0
 8002636:	187b      	adds	r3, r7, r1
 8002638:	649a      	str	r2, [r3, #72]	@ 0x48
	value[19].f = sensorData.SenVal.GameRotationVector.K;
 800263a:	4b26      	ldr	r3, [pc, #152]	@ (80026d4 <collect_sensor_data+0x1fc>)
 800263c:	7dda      	ldrb	r2, [r3, #23]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	4313      	orrs	r3, r2
 8002648:	1c1a      	adds	r2, r3, #0
 800264a:	187b      	adds	r3, r7, r1
 800264c:	64da      	str	r2, [r3, #76]	@ 0x4c
	value[20].f = sensorData.SenVal.GameRotationVector.Real;
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <collect_sensor_data+0x1fc>)
 8002650:	7eda      	ldrb	r2, [r3, #27]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	4313      	orrs	r3, r2
 800265c:	1c1a      	adds	r2, r3, #0
 800265e:	187b      	adds	r3, r7, r1
 8002660:	651a      	str	r2, [r3, #80]	@ 0x50

	// input all the data into the database
	for(uint8_t i = 0; i < 21; i++)
 8002662:	235f      	movs	r3, #95	@ 0x5f
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e026      	b.n	80026ba <collect_sensor_data+0x1e2>
	{
		for(uint8_t j = 0; j < 2; j++)
 800266c:	235e      	movs	r3, #94	@ 0x5e
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e016      	b.n	80026a4 <collect_sensor_data+0x1cc>
		{
			database[i] = value[i].i[j];
 8002676:	225f      	movs	r2, #95	@ 0x5f
 8002678:	18bb      	adds	r3, r7, r2
 800267a:	7818      	ldrb	r0, [r3, #0]
 800267c:	245e      	movs	r4, #94	@ 0x5e
 800267e:	193b      	adds	r3, r7, r4
 8002680:	7819      	ldrb	r1, [r3, #0]
 8002682:	18bb      	adds	r3, r7, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	18d3      	adds	r3, r2, r3
 800268c:	2208      	movs	r2, #8
 800268e:	18ba      	adds	r2, r7, r2
 8002690:	0040      	lsls	r0, r0, #1
 8002692:	1841      	adds	r1, r0, r1
 8002694:	0049      	lsls	r1, r1, #1
 8002696:	5a8a      	ldrh	r2, [r1, r2]
 8002698:	801a      	strh	r2, [r3, #0]
		for(uint8_t j = 0; j < 2; j++)
 800269a:	193b      	adds	r3, r7, r4
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	193b      	adds	r3, r7, r4
 80026a0:	3201      	adds	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	235e      	movs	r3, #94	@ 0x5e
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d9e3      	bls.n	8002676 <collect_sensor_data+0x19e>
	for(uint8_t i = 0; i < 21; i++)
 80026ae:	215f      	movs	r1, #95	@ 0x5f
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	3201      	adds	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	235f      	movs	r3, #95	@ 0x5f
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b14      	cmp	r3, #20
 80026c2:	d9d3      	bls.n	800266c <collect_sensor_data+0x194>
		}
	}
}
 80026c4:	46c0      	nop			@ (mov r8, r8)
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b019      	add	sp, #100	@ 0x64
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	20000270 	.word	0x20000270
 80026d4:	2000027c 	.word	0x2000027c

080026d8 <HAL_I2C_MasterRxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	BNO_Ready = 1;
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <HAL_I2C_MasterRxCpltCallback+0x18>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	200005a0 	.word	0x200005a0

080026f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 9; i++)
 80026fc:	230f      	movs	r3, #15
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e011      	b.n	800272a <HAL_ADC_ConvCpltCallback+0x36>
	{
		holding_register_database[i + 1] = (uint16_t)raw_data[i];
 8002706:	200f      	movs	r0, #15
 8002708:	183b      	adds	r3, r7, r0
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <HAL_ADC_ConvCpltCallback+0x4c>)
 800270e:	0092      	lsls	r2, r2, #2
 8002710:	58d1      	ldr	r1, [r2, r3]
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	b289      	uxth	r1, r1
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_ADC_ConvCpltCallback+0x50>)
 800271c:	0052      	lsls	r2, r2, #1
 800271e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 9; i++)
 8002720:	183b      	adds	r3, r7, r0
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	183b      	adds	r3, r7, r0
 8002726:	3201      	adds	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	230f      	movs	r3, #15
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d9e8      	bls.n	8002706 <HAL_ADC_ConvCpltCallback+0x12>
	}
}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	200005a4 	.word	0x200005a4
 8002744:	20000004 	.word	0x20000004

08002748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274e:	f001 f9a8 	bl	8003aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002752:	f000 f85f 	bl	8002814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002756:	f000 fb41 	bl	8002ddc <MX_GPIO_Init>
  MX_DMA_Init();
 800275a:	f000 fb19 	bl	8002d90 <MX_DMA_Init>
  MX_ADC1_Init();
 800275e:	f000 f89d 	bl	800289c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002762:	f000 f975 	bl	8002a50 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002766:	f000 f9b3 	bl	8002ad0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800276a:	f000 f9ef 	bl	8002b4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800276e:	f000 fabf 	bl	8002cf0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8002772:	f000 fa97 	bl	8002ca4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  modbus_set_rx(255);
 8002776:	20ff      	movs	r0, #255	@ 0xff
 8002778:	f000 fde0 	bl	800333c <modbus_set_rx>
  if(HAL_ADC_Start_DMA(&hadc1, raw_data, 9) != HAL_OK)
 800277c:	4921      	ldr	r1, [pc, #132]	@ (8002804 <main+0xbc>)
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <main+0xc0>)
 8002780:	2209      	movs	r2, #9
 8002782:	0018      	movs	r0, r3
 8002784:	f001 fd1c 	bl	80041c0 <HAL_ADC_Start_DMA>
 8002788:	1e03      	subs	r3, r0, #0
 800278a:	d001      	beq.n	8002790 <main+0x48>
  {
	  Error_Handler();
 800278c:	f000 fbb6 	bl	8002efc <Error_Handler>
  }
  if(BNO_Init() != HAL_OK)
 8002790:	f7ff fe4a 	bl	8002428 <BNO_Init>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <main+0x54>
  {
	  Error_Handler();
 8002798:	f000 fbb0 	bl	8002efc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(modbus_rx())
 800279c:	f000 fdba 	bl	8003314 <modbus_rx>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d026      	beq.n	80027f2 <main+0xaa>
	  {
		  int8_t status = 0;
 80027a4:	1dfb      	adds	r3, r7, #7
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80027aa:	2000      	movs	r0, #0
 80027ac:	f000 fbba 	bl	8002f24 <get_rx_buffer>
 80027b0:	0003      	movs	r3, r0
 80027b2:	001a      	movs	r2, r3
 80027b4:	4b15      	ldr	r3, [pc, #84]	@ (800280c <main+0xc4>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d114      	bne.n	80027e6 <main+0x9e>
		  {
			  switch(get_rx_buffer(1))
 80027bc:	2001      	movs	r0, #1
 80027be:	f000 fbb1 	bl	8002f24 <get_rx_buffer>
 80027c2:	0003      	movs	r3, r0
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d002      	beq.n	80027ce <main+0x86>
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d006      	beq.n	80027da <main+0x92>
 80027cc:	e00b      	b.n	80027e6 <main+0x9e>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80027ce:	1dfc      	adds	r4, r7, #7
 80027d0:	f000 fbbe 	bl	8002f50 <return_holding_registers>
 80027d4:	0003      	movs	r3, r0
 80027d6:	7023      	strb	r3, [r4, #0]
					  break;
 80027d8:	e005      	b.n	80027e6 <main+0x9e>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80027da:	1dfc      	adds	r4, r7, #7
 80027dc:	f000 fc48 	bl	8003070 <edit_multiple_registers>
 80027e0:	0003      	movs	r3, r0
 80027e2:	7023      	strb	r3, [r4, #0]
					  break;
 80027e4:	46c0      	nop			@ (mov r8, r8)
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx(255); // may be able to set size to 12
 80027e6:	1dfc      	adds	r4, r7, #7
 80027e8:	20ff      	movs	r0, #255	@ 0xff
 80027ea:	f000 fda7 	bl	800333c <modbus_set_rx>
 80027ee:	0003      	movs	r3, r0
 80027f0:	7023      	strb	r3, [r4, #0]
		  if(status != 0)
		  {
			  // log error in a queue
		  }
	  }
	  if(BNO_dataAvailable() == HAL_OK)
 80027f2:	f7ff fe62 	bl	80024ba <BNO_dataAvailable>
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	d1d0      	bne.n	800279c <main+0x54>
	  {
		  collect_sensor_data(&holding_register_database[12]);
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <main+0xc8>)
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff fe6b 	bl	80024d8 <collect_sensor_data>
	  if(modbus_rx())
 8002802:	e7cb      	b.n	800279c <main+0x54>
 8002804:	200005a4 	.word	0x200005a4
 8002808:	200002a0 	.word	0x200002a0
 800280c:	20000004 	.word	0x20000004
 8002810:	2000001c 	.word	0x2000001c

08002814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b08f      	sub	sp, #60	@ 0x3c
 8002818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281a:	2418      	movs	r4, #24
 800281c:	193b      	adds	r3, r7, r4
 800281e:	0018      	movs	r0, r3
 8002820:	2320      	movs	r3, #32
 8002822:	001a      	movs	r2, r3
 8002824:	2100      	movs	r1, #0
 8002826:	f007 ffab 	bl	800a780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	0018      	movs	r0, r3
 800282e:	2314      	movs	r3, #20
 8002830:	001a      	movs	r2, r3
 8002832:	2100      	movs	r1, #0
 8002834:	f007 ffa4 	bl	800a780 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002838:	193b      	adds	r3, r7, r4
 800283a:	2202      	movs	r2, #2
 800283c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800283e:	193b      	adds	r3, r7, r4
 8002840:	2280      	movs	r2, #128	@ 0x80
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8002846:	193b      	adds	r3, r7, r4
 8002848:	2280      	movs	r2, #128	@ 0x80
 800284a:	0152      	lsls	r2, r2, #5
 800284c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800284e:	193b      	adds	r3, r7, r4
 8002850:	2240      	movs	r2, #64	@ 0x40
 8002852:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002854:	193b      	adds	r3, r7, r4
 8002856:	0018      	movs	r0, r3
 8002858:	f004 fdce 	bl	80073f8 <HAL_RCC_OscConfig>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d001      	beq.n	8002864 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002860:	f000 fb4c 	bl	8002efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2207      	movs	r2, #7
 8002868:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2100      	movs	r1, #0
 8002886:	0018      	movs	r0, r3
 8002888:	f004 ffdc 	bl	8007844 <HAL_RCC_ClockConfig>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002890:	f000 fb34 	bl	8002efc <Error_Handler>
  }
}
 8002894:	46c0      	nop			@ (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b00f      	add	sp, #60	@ 0x3c
 800289a:	bd90      	pop	{r4, r7, pc}

0800289c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	0018      	movs	r0, r3
 80028a6:	230c      	movs	r3, #12
 80028a8:	001a      	movs	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	f007 ff68 	bl	800a780 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028b2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a2c <MX_ADC1_Init+0x190>)
 80028b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80028b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028b8:	22c0      	movs	r2, #192	@ 0xc0
 80028ba:	0612      	lsls	r2, r2, #24
 80028bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028be:	4b5a      	ldr	r3, [pc, #360]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028c4:	4b58      	ldr	r3, [pc, #352]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80028ca:	4b57      	ldr	r3, [pc, #348]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028cc:	2280      	movs	r2, #128	@ 0x80
 80028ce:	0612      	lsls	r2, r2, #24
 80028d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028d2:	4b55      	ldr	r3, [pc, #340]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028d4:	2204      	movs	r2, #4
 80028d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028d8:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80028de:	4b52      	ldr	r3, [pc, #328]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028e4:	4b50      	ldr	r3, [pc, #320]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80028ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80028fe:	222c      	movs	r2, #44	@ 0x2c
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800290a:	4b47      	ldr	r3, [pc, #284]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 800290c:	2200      	movs	r2, #0
 800290e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002910:	4b45      	ldr	r3, [pc, #276]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 8002912:	223c      	movs	r2, #60	@ 0x3c
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002918:	4b43      	ldr	r3, [pc, #268]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 800291a:	2200      	movs	r2, #0
 800291c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800291e:	4b42      	ldr	r3, [pc, #264]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 8002920:	0018      	movs	r0, r3
 8002922:	f001 faa7 	bl	8003e74 <HAL_ADC_Init>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800292a:	f000 fae7 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2201      	movs	r2, #1
 8002938:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800293a:	1d3a      	adds	r2, r7, #4
 800293c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 800293e:	0011      	movs	r1, r2
 8002940:	0018      	movs	r0, r3
 8002942:	f001 fcdb 	bl	80042fc <HAL_ADC_ConfigChannel>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d001      	beq.n	800294e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800294a:	f000 fad7 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	4a37      	ldr	r2, [pc, #220]	@ (8002a30 <MX_ADC1_Init+0x194>)
 8002952:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002954:	1d3a      	adds	r2, r7, #4
 8002956:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 8002958:	0011      	movs	r1, r2
 800295a:	0018      	movs	r0, r3
 800295c:	f001 fcce 	bl	80042fc <HAL_ADC_ConfigChannel>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d001      	beq.n	8002968 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002964:	f000 faca 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	4a32      	ldr	r2, [pc, #200]	@ (8002a34 <MX_ADC1_Init+0x198>)
 800296c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800296e:	1d3a      	adds	r2, r7, #4
 8002970:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f001 fcc1 	bl	80042fc <HAL_ADC_ConfigChannel>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800297e:	f000 fabd 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	4a2c      	ldr	r2, [pc, #176]	@ (8002a38 <MX_ADC1_Init+0x19c>)
 8002986:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002988:	1d3a      	adds	r2, r7, #4
 800298a:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 800298c:	0011      	movs	r1, r2
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fcb4 	bl	80042fc <HAL_ADC_ConfigChannel>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002998:	f000 fab0 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4a27      	ldr	r2, [pc, #156]	@ (8002a3c <MX_ADC1_Init+0x1a0>)
 80029a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029a2:	1d3a      	adds	r2, r7, #4
 80029a4:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f001 fca7 	bl	80042fc <HAL_ADC_ConfigChannel>
 80029ae:	1e03      	subs	r3, r0, #0
 80029b0:	d001      	beq.n	80029b6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80029b2:	f000 faa3 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	4a21      	ldr	r2, [pc, #132]	@ (8002a40 <MX_ADC1_Init+0x1a4>)
 80029ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029bc:	1d3a      	adds	r2, r7, #4
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80029c0:	0011      	movs	r1, r2
 80029c2:	0018      	movs	r0, r3
 80029c4:	f001 fc9a 	bl	80042fc <HAL_ADC_ConfigChannel>
 80029c8:	1e03      	subs	r3, r0, #0
 80029ca:	d001      	beq.n	80029d0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80029cc:	f000 fa96 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <MX_ADC1_Init+0x1a8>)
 80029d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029d6:	1d3a      	adds	r2, r7, #4
 80029d8:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f001 fc8d 	bl	80042fc <HAL_ADC_ConfigChannel>
 80029e2:	1e03      	subs	r3, r0, #0
 80029e4:	d001      	beq.n	80029ea <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80029e6:	f000 fa89 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	4a16      	ldr	r2, [pc, #88]	@ (8002a48 <MX_ADC1_Init+0x1ac>)
 80029ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f0:	1d3a      	adds	r2, r7, #4
 80029f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 80029f4:	0011      	movs	r1, r2
 80029f6:	0018      	movs	r0, r3
 80029f8:	f001 fc80 	bl	80042fc <HAL_ADC_ConfigChannel>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d001      	beq.n	8002a04 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8002a00:	f000 fa7c 	bl	8002efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <MX_ADC1_Init+0x1b0>)
 8002a08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a0a:	1d3a      	adds	r2, r7, #4
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <MX_ADC1_Init+0x18c>)
 8002a0e:	0011      	movs	r1, r2
 8002a10:	0018      	movs	r0, r3
 8002a12:	f001 fc73 	bl	80042fc <HAL_ADC_ConfigChannel>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8002a1a:	f000 fa6f 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b004      	add	sp, #16
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	200002a0 	.word	0x200002a0
 8002a2c:	40012400 	.word	0x40012400
 8002a30:	04000002 	.word	0x04000002
 8002a34:	08000004 	.word	0x08000004
 8002a38:	0c000008 	.word	0x0c000008
 8002a3c:	10000010 	.word	0x10000010
 8002a40:	14000020 	.word	0x14000020
 8002a44:	18000040 	.word	0x18000040
 8002a48:	1c000080 	.word	0x1c000080
 8002a4c:	20000100 	.word	0x20000100

08002a50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a56:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac8 <MX_I2C1_Init+0x78>)
 8002a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100412;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002acc <MX_I2C1_Init+0x7c>)
 8002a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a60:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a78:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f002 fc5f 	bl	8005350 <HAL_I2C_Init>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d001      	beq.n	8002a9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a96:	f000 fa31 	bl	8002efc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f004 fc12 	bl	80072c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002aa8:	f000 fa28 	bl	8002efc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002aac:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <MX_I2C1_Init+0x74>)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f004 fc55 	bl	8007360 <HAL_I2CEx_ConfigDigitalFilter>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002aba:	f000 fa1f 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000360 	.word	0x20000360
 8002ac8:	40005400 	.word	0x40005400
 8002acc:	00100412 	.word	0x00100412

08002ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b48 <MX_SPI1_Init+0x78>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002adc:	2282      	movs	r2, #130	@ 0x82
 8002ade:	0052      	lsls	r2, r2, #1
 8002ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002aea:	22e0      	movs	r2, #224	@ 0xe0
 8002aec:	00d2      	lsls	r2, r2, #3
 8002aee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002afe:	2280      	movs	r2, #128	@ 0x80
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b1e:	2207      	movs	r2, #7
 8002b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b2e:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <MX_SPI1_Init+0x74>)
 8002b30:	0018      	movs	r0, r3
 8002b32:	f005 f929 	bl	8007d88 <HAL_SPI_Init>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d001      	beq.n	8002b3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b3a:	f000 f9df 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000410 	.word	0x20000410
 8002b48:	40013000 	.word	0x40013000

08002b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b098      	sub	sp, #96	@ 0x60
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b52:	2354      	movs	r3, #84	@ 0x54
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	0018      	movs	r0, r3
 8002b58:	230c      	movs	r3, #12
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f007 fe0f 	bl	800a780 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b62:	2338      	movs	r3, #56	@ 0x38
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	0018      	movs	r0, r3
 8002b68:	231c      	movs	r3, #28
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f007 fe07 	bl	800a780 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	0018      	movs	r0, r3
 8002b76:	2334      	movs	r3, #52	@ 0x34
 8002b78:	001a      	movs	r2, r3
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	f007 fe00 	bl	800a780 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b80:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002b82:	4a46      	ldr	r2, [pc, #280]	@ (8002c9c <MX_TIM1_Init+0x150>)
 8002b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b86:	4b44      	ldr	r3, [pc, #272]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8c:	4b42      	ldr	r3, [pc, #264]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b92:	4b41      	ldr	r3, [pc, #260]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002b94:	4a42      	ldr	r2, [pc, #264]	@ (8002ca0 <MX_TIM1_Init+0x154>)
 8002b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b98:	4b3f      	ldr	r3, [pc, #252]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002baa:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002bac:	0018      	movs	r0, r3
 8002bae:	f005 fa47 	bl	8008040 <HAL_TIM_PWM_Init>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002bb6:	f000 f9a1 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bba:	2154      	movs	r1, #84	@ 0x54
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bce:	187a      	adds	r2, r7, r1
 8002bd0:	4b31      	ldr	r3, [pc, #196]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002bd2:	0011      	movs	r1, r2
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f005 feab 	bl	8008930 <HAL_TIMEx_MasterConfigSynchronization>
 8002bda:	1e03      	subs	r3, r0, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002bde:	f000 f98d 	bl	8002efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be2:	2138      	movs	r1, #56	@ 0x38
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	2260      	movs	r2, #96	@ 0x60
 8002be8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	2200      	movs	r2, #0
 8002bee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c0e:	1879      	adds	r1, r7, r1
 8002c10:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	0018      	movs	r0, r3
 8002c16:	f005 fa6b 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002c1e:	f000 f96d 	bl	8002efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	0192      	lsls	r2, r2, #6
 8002c46:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2280      	movs	r2, #128	@ 0x80
 8002c5e:	0492      	lsls	r2, r2, #18
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c74:	1d3a      	adds	r2, r7, #4
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002c78:	0011      	movs	r1, r2
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f005 fec0 	bl	8008a00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c80:	1e03      	subs	r3, r0, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002c84:	f000 f93a 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c88:	4b03      	ldr	r3, [pc, #12]	@ (8002c98 <MX_TIM1_Init+0x14c>)
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 fdb8 	bl	8003800 <HAL_TIM_MspPostInit>

}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b018      	add	sp, #96	@ 0x60
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000474 	.word	0x20000474
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	0000ffff 	.word	0x0000ffff

08002ca4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <MX_TIM14_Init+0x40>)
 8002caa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce8 <MX_TIM14_Init+0x44>)
 8002cac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <MX_TIM14_Init+0x40>)
 8002cb0:	220b      	movs	r2, #11
 8002cb2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <MX_TIM14_Init+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002cba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <MX_TIM14_Init+0x40>)
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002cec <MX_TIM14_Init+0x48>)
 8002cbe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <MX_TIM14_Init+0x40>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc6:	4b07      	ldr	r3, [pc, #28]	@ (8002ce4 <MX_TIM14_Init+0x40>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <MX_TIM14_Init+0x40>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f005 f912 	bl	8007ef8 <HAL_TIM_Base_Init>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002cd8:	f000 f910 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	200004c0 	.word	0x200004c0
 8002ce8:	40002000 	.word	0x40002000
 8002cec:	0000ffff 	.word	0x0000ffff

08002cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cf4:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002cf6:	4a25      	ldr	r2, [pc, #148]	@ (8002d8c <MX_USART1_UART_Init+0x9c>)
 8002cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cfa:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002cfc:	22e1      	movs	r2, #225	@ 0xe1
 8002cfe:	0252      	lsls	r2, r2, #9
 8002d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d02:	4b21      	ldr	r3, [pc, #132]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d08:	4b1f      	ldr	r3, [pc, #124]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d14:	4b1c      	ldr	r3, [pc, #112]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d16:	220c      	movs	r2, #12
 8002d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d2c:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002d38:	4813      	ldr	r0, [pc, #76]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f007 fb2e 	bl	800a3a0 <HAL_RS485Ex_Init>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002d48:	f000 f8d8 	bl	8002efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d4e:	2100      	movs	r1, #0
 8002d50:	0018      	movs	r0, r3
 8002d52:	f007 fbd1 	bl	800a4f8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002d5a:	f000 f8cf 	bl	8002efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d60:	2100      	movs	r1, #0
 8002d62:	0018      	movs	r0, r3
 8002d64:	f007 fc08 	bl	800a578 <HAL_UARTEx_SetRxFifoThreshold>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002d6c:	f000 f8c6 	bl	8002efc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <MX_USART1_UART_Init+0x98>)
 8002d72:	0018      	movs	r0, r3
 8002d74:	f007 fb86 	bl	800a484 <HAL_UARTEx_DisableFifoMode>
 8002d78:	1e03      	subs	r3, r0, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002d7c:	f000 f8be 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d80:	46c0      	nop			@ (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	2000050c 	.word	0x2000050c
 8002d8c:	40013800 	.word	0x40013800

08002d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <MX_DMA_Init+0x48>)
 8002d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <MX_DMA_Init+0x48>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <MX_DMA_Init+0x48>)
 8002da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	2009      	movs	r0, #9
 8002db4:	f001 fe30 	bl	8004a18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002db8:	2009      	movs	r0, #9
 8002dba:	f001 fe42 	bl	8004a42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	200a      	movs	r0, #10
 8002dc4:	f001 fe28 	bl	8004a18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002dc8:	200a      	movs	r0, #10
 8002dca:	f001 fe3a 	bl	8004a42 <HAL_NVIC_EnableIRQ>

}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	40021000 	.word	0x40021000

08002ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b08b      	sub	sp, #44	@ 0x2c
 8002de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	2414      	movs	r4, #20
 8002de4:	193b      	adds	r3, r7, r4
 8002de6:	0018      	movs	r0, r3
 8002de8:	2314      	movs	r3, #20
 8002dea:	001a      	movs	r2, r3
 8002dec:	2100      	movs	r1, #0
 8002dee:	f007 fcc7 	bl	800a780 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df2:	4b3e      	ldr	r3, [pc, #248]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df6:	4b3d      	ldr	r3, [pc, #244]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002df8:	2104      	movs	r1, #4
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e02:	2204      	movs	r2, #4
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e0a:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e0e:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e10:	2120      	movs	r1, #32
 8002e12:	430a      	orrs	r2, r1
 8002e14:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e16:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e26:	4b31      	ldr	r3, [pc, #196]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e40:	2102      	movs	r1, #2
 8002e42:	430a      	orrs	r2, r1
 8002e44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e46:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e52:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e56:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e58:	2108      	movs	r1, #8
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e5e:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <MX_GPIO_Init+0x110>)
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	2208      	movs	r2, #8
 8002e64:	4013      	ands	r3, r2
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_C_Pin|SS_A_Pin, GPIO_PIN_RESET);
 8002e6a:	23a0      	movs	r3, #160	@ 0xa0
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4820      	ldr	r0, [pc, #128]	@ (8002ef0 <MX_GPIO_Init+0x114>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	0019      	movs	r1, r3
 8002e74:	f002 fa4e 	bl	8005314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7e:	193b      	adds	r3, r7, r4
 8002e80:	2200      	movs	r2, #0
 8002e82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	193b      	adds	r3, r7, r4
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8a:	193b      	adds	r3, r7, r4
 8002e8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <MX_GPIO_Init+0x118>)
 8002e8e:	0019      	movs	r1, r3
 8002e90:	0010      	movs	r0, r2
 8002e92:	f002 f8cd 	bl	8005030 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_C_Pin SS_A_Pin */
  GPIO_InitStruct.Pin = SS_C_Pin|SS_A_Pin;
 8002e96:	0021      	movs	r1, r4
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	22a0      	movs	r2, #160	@ 0xa0
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	000c      	movs	r4, r1
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef0 <MX_GPIO_Init+0x114>)
 8002eb8:	0019      	movs	r1, r3
 8002eba:	0010      	movs	r0, r2
 8002ebc:	f002 f8b8 	bl	8005030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_B_Pin */
  GPIO_InitStruct.Pin = SS_B_Pin;
 8002ec0:	0021      	movs	r1, r4
 8002ec2:	187b      	adds	r3, r7, r1
 8002ec4:	2280      	movs	r2, #128	@ 0x80
 8002ec6:	0052      	lsls	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <MX_GPIO_Init+0x11c>)
 8002ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SS_B_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <MX_GPIO_Init+0x114>)
 8002eda:	0019      	movs	r1, r3
 8002edc:	0010      	movs	r0, r2
 8002ede:	f002 f8a7 	bl	8005030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b00b      	add	sp, #44	@ 0x2c
 8002ee8:	bd90      	pop	{r4, r7, pc}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	50000400 	.word	0x50000400
 8002ef4:	50000c00 	.word	0x50000c00
 8002ef8:	10110000 	.word	0x10110000

08002efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f00:	b672      	cpsid	i
}
 8002f02:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	e7fd      	b.n	8002f04 <Error_Handler+0x8>

08002f08 <HAL_UART_RxCpltCallback>:
};


// Recieve Interrupt Handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8002f10:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_UART_RxCpltCallback+0x18>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	200007c8 	.word	0x200007c8

08002f24 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2bff      	cmp	r3, #255	@ 0xff
 8002f36:	d004      	beq.n	8002f42 <get_rx_buffer+0x1e>
	{
		return modbus_rx_buffer[index];
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4a03      	ldr	r2, [pc, #12]	@ (8002f4c <get_rx_buffer+0x28>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	e000      	b.n	8002f44 <get_rx_buffer+0x20>
	}
	return 0xFF;
 8002f42:	23ff      	movs	r3, #255	@ 0xff
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200005c4 	.word	0x200005c4

08002f50 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8002f56:	4b43      	ldr	r3, [pc, #268]	@ (8003064 <return_holding_registers+0x114>)
 8002f58:	789b      	ldrb	r3, [r3, #2]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	b21a      	sxth	r2, r3
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <return_holding_registers+0x114>)
 8002f60:	78db      	ldrb	r3, [r3, #3]
 8002f62:	b21b      	sxth	r3, r3
 8002f64:	4313      	orrs	r3, r2
 8002f66:	b21a      	sxth	r2, r3
 8002f68:	1dbb      	adds	r3, r7, #6
 8002f6a:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8002f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <return_holding_registers+0x114>)
 8002f6e:	791b      	ldrb	r3, [r3, #4]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	b21a      	sxth	r2, r3
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <return_holding_registers+0x114>)
 8002f76:	795b      	ldrb	r3, [r3, #5]
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b21a      	sxth	r2, r3
 8002f7e:	1cbb      	adds	r3, r7, #2
 8002f80:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8002f82:	1cbb      	adds	r3, r7, #2
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	2b7d      	cmp	r3, #125	@ 0x7d
 8002f88:	d803      	bhi.n	8002f92 <return_holding_registers+0x42>
 8002f8a:	1cbb      	adds	r3, r7, #2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <return_holding_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8002f92:	2006      	movs	r0, #6
 8002f94:	f000 f930 	bl	80031f8 <modbus_exception>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	e05e      	b.n	800305a <return_holding_registers+0x10a>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8002f9c:	1cba      	adds	r2, r7, #2
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	8812      	ldrh	r2, [r2, #0]
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	003b      	movs	r3, r7
 8002faa:	3a01      	subs	r2, #1
 8002fac:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8002fae:	003b      	movs	r3, r7
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	2b37      	cmp	r3, #55	@ 0x37
 8002fb4:	d904      	bls.n	8002fc0 <return_holding_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8002fb6:	2005      	movs	r0, #5
 8002fb8:	f000 f91e 	bl	80031f8 <modbus_exception>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	e04c      	b.n	800305a <return_holding_registers+0x10a>
	}

	// Return register values

	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8002fc0:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <return_holding_registers+0x114>)
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <return_holding_registers+0x118>)
 8002fc6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8002fc8:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <return_holding_registers+0x114>)
 8002fca:	785a      	ldrb	r2, [r3, #1]
 8002fcc:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <return_holding_registers+0x118>)
 8002fce:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8002fd0:	1cbb      	adds	r3, r7, #2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	18db      	adds	r3, r3, r3
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <return_holding_registers+0x118>)
 8002fdc:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8002fde:	1d7b      	adds	r3, r7, #5
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e027      	b.n	800303c <return_holding_registers+0xec>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8002fec:	1dbb      	adds	r3, r7, #6
 8002fee:	881a      	ldrh	r2, [r3, #0]
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <return_holding_registers+0x11c>)
 8002ff2:	0052      	lsls	r2, r2, #1
 8002ff4:	5ad3      	ldrh	r3, [r2, r3]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	b299      	uxth	r1, r3
 8002ffa:	1d7b      	adds	r3, r7, #5
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	1d7a      	adds	r2, r7, #5
 8003000:	1c58      	adds	r0, r3, #1
 8003002:	7010      	strb	r0, [r2, #0]
 8003004:	001a      	movs	r2, r3
 8003006:	b2c9      	uxtb	r1, r1
 8003008:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <return_holding_registers+0x118>)
 800300a:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	881a      	ldrh	r2, [r3, #0]
 8003010:	4b16      	ldr	r3, [pc, #88]	@ (800306c <return_holding_registers+0x11c>)
 8003012:	0052      	lsls	r2, r2, #1
 8003014:	5ad1      	ldrh	r1, [r2, r3]
 8003016:	1d7b      	adds	r3, r7, #5
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	1d7a      	adds	r2, r7, #5
 800301c:	1c58      	adds	r0, r3, #1
 800301e:	7010      	strb	r0, [r2, #0]
 8003020:	001a      	movs	r2, r3
 8003022:	b2c9      	uxtb	r1, r1
 8003024:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <return_holding_registers+0x118>)
 8003026:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 8003028:	1dbb      	adds	r3, r7, #6
 800302a:	881a      	ldrh	r2, [r3, #0]
 800302c:	1dbb      	adds	r3, r7, #6
 800302e:	3201      	adds	r2, #1
 8003030:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	3201      	adds	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	1cba      	adds	r2, r7, #2
 8003044:	8812      	ldrh	r2, [r2, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d8d0      	bhi.n	8002fec <return_holding_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 800304a:	1d7b      	adds	r3, r7, #5
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <return_holding_registers+0x118>)
 8003050:	0011      	movs	r1, r2
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f8f6 	bl	8003244 <modbus_send>
 8003058:	0003      	movs	r3, r0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	200005c4 	.word	0x200005c4
 8003068:	200006c4 	.word	0x200006c4
 800306c:	20000004 	.word	0x20000004

08003070 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8003076:	4b5d      	ldr	r3, [pc, #372]	@ (80031ec <edit_multiple_registers+0x17c>)
 8003078:	789b      	ldrb	r3, [r3, #2]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	b21a      	sxth	r2, r3
 800307e:	4b5b      	ldr	r3, [pc, #364]	@ (80031ec <edit_multiple_registers+0x17c>)
 8003080:	78db      	ldrb	r3, [r3, #3]
 8003082:	b21b      	sxth	r3, r3
 8003084:	4313      	orrs	r3, r2
 8003086:	b21a      	sxth	r2, r3
 8003088:	1dbb      	adds	r3, r7, #6
 800308a:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 800308c:	4b57      	ldr	r3, [pc, #348]	@ (80031ec <edit_multiple_registers+0x17c>)
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	b21a      	sxth	r2, r3
 8003094:	4b55      	ldr	r3, [pc, #340]	@ (80031ec <edit_multiple_registers+0x17c>)
 8003096:	795b      	ldrb	r3, [r3, #5]
 8003098:	b21b      	sxth	r3, r3
 800309a:	4313      	orrs	r3, r2
 800309c:	b21a      	sxth	r2, r3
 800309e:	1cbb      	adds	r3, r7, #2
 80030a0:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 80030a2:	1cbb      	adds	r3, r7, #2
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	2b7d      	cmp	r3, #125	@ 0x7d
 80030a8:	d803      	bhi.n	80030b2 <edit_multiple_registers+0x42>
 80030aa:	1cbb      	adds	r3, r7, #2
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <edit_multiple_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80030b2:	2006      	movs	r0, #6
 80030b4:	f000 f8a0 	bl	80031f8 <modbus_exception>
 80030b8:	0003      	movs	r3, r0
 80030ba:	e092      	b.n	80031e2 <edit_multiple_registers+0x172>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80030bc:	1cba      	adds	r2, r7, #2
 80030be:	1dbb      	adds	r3, r7, #6
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	003b      	movs	r3, r7
 80030ca:	3a01      	subs	r2, #1
 80030cc:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80030ce:	003b      	movs	r3, r7
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	2b37      	cmp	r3, #55	@ 0x37
 80030d4:	d904      	bls.n	80030e0 <edit_multiple_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80030d6:	2005      	movs	r0, #5
 80030d8:	f000 f88e 	bl	80031f8 <modbus_exception>
 80030dc:	0003      	movs	r3, r0
 80030de:	e080      	b.n	80031e2 <edit_multiple_registers+0x172>
	}

	if((last_register_address <= 10 && last_register_address >= 2) 		||
 80030e0:	003b      	movs	r3, r7
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	2b0a      	cmp	r3, #10
 80030e6:	d803      	bhi.n	80030f0 <edit_multiple_registers+0x80>
 80030e8:	003b      	movs	r3, r7
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d80f      	bhi.n	8003110 <edit_multiple_registers+0xa0>
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2b0a      	cmp	r3, #10
 80030f6:	d803      	bhi.n	8003100 <edit_multiple_registers+0x90>
		(first_register_address <= 10 && first_register_address >= 2) 	||
 80030f8:	1dbb      	adds	r3, r7, #6
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d807      	bhi.n	8003110 <edit_multiple_registers+0xa0>
 8003100:	1dbb      	adds	r3, r7, #6
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d808      	bhi.n	800311a <edit_multiple_registers+0xaa>
		(first_register_address < 2 && last_register_address > 10))
 8003108:	003b      	movs	r3, r7
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	2b0a      	cmp	r3, #10
 800310e:	d904      	bls.n	800311a <edit_multiple_registers+0xaa>
	{
		// Ensure that ADC values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8003110:	2004      	movs	r0, #4
 8003112:	f000 f871 	bl	80031f8 <modbus_exception>
 8003116:	0003      	movs	r3, r0
 8003118:	e063      	b.n	80031e2 <edit_multiple_registers+0x172>
	}


	// Edit holding registers
	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 800311a:	4b34      	ldr	r3, [pc, #208]	@ (80031ec <edit_multiple_registers+0x17c>)
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	4b34      	ldr	r3, [pc, #208]	@ (80031f0 <edit_multiple_registers+0x180>)
 8003120:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8003122:	4b32      	ldr	r3, [pc, #200]	@ (80031ec <edit_multiple_registers+0x17c>)
 8003124:	785a      	ldrb	r2, [r3, #1]
 8003126:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <edit_multiple_registers+0x180>)
 8003128:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 800312a:	1cbb      	adds	r3, r7, #2
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	18db      	adds	r3, r3, r3
 8003132:	b2da      	uxtb	r2, r3
 8003134:	4b2e      	ldr	r3, [pc, #184]	@ (80031f0 <edit_multiple_registers+0x180>)
 8003136:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8003138:	1d7b      	adds	r3, r7, #5
 800313a:	2203      	movs	r2, #3
 800313c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e03e      	b.n	80031c4 <edit_multiple_registers+0x154>
	{
		holding_register_database[first_register_address] = (modbus_rx_buffer[2 * i + 6] << 8) | modbus_rx_buffer[2 * i + 7];
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	3303      	adds	r3, #3
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4a27      	ldr	r2, [pc, #156]	@ (80031ec <edit_multiple_registers+0x17c>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	b21a      	sxth	r2, r3
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	3307      	adds	r3, #7
 800315e:	4923      	ldr	r1, [pc, #140]	@ (80031ec <edit_multiple_registers+0x17c>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	b21b      	sxth	r3, r3
 8003164:	4313      	orrs	r3, r2
 8003166:	b219      	sxth	r1, r3
 8003168:	1dbb      	adds	r3, r7, #6
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	b289      	uxth	r1, r1
 800316e:	4b21      	ldr	r3, [pc, #132]	@ (80031f4 <edit_multiple_registers+0x184>)
 8003170:	0052      	lsls	r2, r2, #1
 8003172:	52d1      	strh	r1, [r2, r3]
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8003174:	1dbb      	adds	r3, r7, #6
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <edit_multiple_registers+0x184>)
 800317a:	0052      	lsls	r2, r2, #1
 800317c:	5ad3      	ldrh	r3, [r2, r3]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b299      	uxth	r1, r3
 8003182:	1d7b      	adds	r3, r7, #5
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	1d7a      	adds	r2, r7, #5
 8003188:	1c58      	adds	r0, r3, #1
 800318a:	7010      	strb	r0, [r2, #0]
 800318c:	001a      	movs	r2, r3
 800318e:	b2c9      	uxtb	r1, r1
 8003190:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <edit_multiple_registers+0x180>)
 8003192:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 8003194:	1dbb      	adds	r3, r7, #6
 8003196:	881a      	ldrh	r2, [r3, #0]
 8003198:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <edit_multiple_registers+0x184>)
 800319a:	0052      	lsls	r2, r2, #1
 800319c:	5ad1      	ldrh	r1, [r2, r3]
 800319e:	1d7b      	adds	r3, r7, #5
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	1d7a      	adds	r2, r7, #5
 80031a4:	1c58      	adds	r0, r3, #1
 80031a6:	7010      	strb	r0, [r2, #0]
 80031a8:	001a      	movs	r2, r3
 80031aa:	b2c9      	uxtb	r1, r1
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <edit_multiple_registers+0x180>)
 80031ae:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 80031b0:	1dbb      	adds	r3, r7, #6
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	1dbb      	adds	r3, r7, #6
 80031b6:	3201      	adds	r2, #1
 80031b8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	3201      	adds	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	1cba      	adds	r2, r7, #2
 80031cc:	8812      	ldrh	r2, [r2, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d8b9      	bhi.n	8003146 <edit_multiple_registers+0xd6>
	}

	return modbus_send(modbus_tx_buffer, index);
 80031d2:	1d7b      	adds	r3, r7, #5
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <edit_multiple_registers+0x180>)
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f832 	bl	8003244 <modbus_send>
 80031e0:	0003      	movs	r3, r0
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b002      	add	sp, #8
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	200005c4 	.word	0x200005c4
 80031f0:	200006c4 	.word	0x200006c4
 80031f4:	20000004 	.word	0x20000004

080031f8 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	0002      	movs	r2, r0
 8003200:	1dfb      	adds	r3, r7, #7
 8003202:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = modbus_rx_buffer[0];
 8003204:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <modbus_exception+0x44>)
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <modbus_exception+0x48>)
 800320a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1] | 0x80;
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <modbus_exception+0x44>)
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	4252      	negs	r2, r2
 8003214:	4313      	orrs	r3, r2
 8003216:	b2da      	uxtb	r2, r3
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <modbus_exception+0x48>)
 800321a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	3b03      	subs	r3, #3
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <modbus_exception+0x48>)
 8003226:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8003228:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <modbus_exception+0x48>)
 800322a:	2103      	movs	r1, #3
 800322c:	0018      	movs	r0, r3
 800322e:	f000 f809 	bl	8003244 <modbus_send>
 8003232:	0003      	movs	r3, r0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200005c4 	.word	0x200005c4
 8003240:	200006c4 	.word	0x200006c4

08003244 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8003244:	b5b0      	push	{r4, r5, r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	000a      	movs	r2, r1
 800324e:	1cfb      	adds	r3, r7, #3
 8003250:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(data, size);
 8003252:	250e      	movs	r5, #14
 8003254:	197c      	adds	r4, r7, r5
 8003256:	1cfb      	adds	r3, r7, #3
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f884 	bl	800336c <crc_16>
 8003264:	0003      	movs	r3, r0
 8003266:	8023      	strh	r3, [r4, #0]
	data[size] = low_byte(crc);
 8003268:	1cfb      	adds	r3, r7, #3
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	18d3      	adds	r3, r2, r3
 8003270:	197a      	adds	r2, r7, r5
 8003272:	8812      	ldrh	r2, [r2, #0]
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]
	data[size + 1] = high_byte(crc);
 8003278:	197b      	adds	r3, r7, r5
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	b299      	uxth	r1, r3
 8003280:	1cfb      	adds	r3, r7, #3
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	b2ca      	uxtb	r2, r1
 800328c:	701a      	strb	r2, [r3, #0]

	int8_t status = HAL_OK;
 800328e:	240d      	movs	r4, #13
 8003290:	193b      	adds	r3, r7, r4
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, data, size + 2);
 8003296:	1cfb      	adds	r3, r7, #3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	3302      	adds	r3, #2
 800329e:	b29a      	uxth	r2, r3
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <modbus_send+0xc4>)
 80032a4:	0018      	movs	r0, r3
 80032a6:	f005 fc47 	bl	8008b38 <HAL_UART_Transmit_IT>
 80032aa:	0003      	movs	r3, r0
 80032ac:	001a      	movs	r2, r3
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <modbus_send+0x80>
	{
		return status;
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	e01d      	b.n	8003300 <modbus_send+0xbc>
	}
	time = HAL_GetTick();
 80032c4:	f000 fc60 	bl	8003b88 <HAL_GetTick>
 80032c8:	0002      	movs	r2, r0
 80032ca:	4b10      	ldr	r3, [pc, #64]	@ (800330c <modbus_send+0xc8>)
 80032cc:	601a      	str	r2, [r3, #0]
	while(!tx_int && (HAL_GetTick()) - time < 100);
 80032ce:	46c0      	nop			@ (mov r8, r8)
 80032d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <modbus_send+0xcc>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <modbus_send+0xa6>
 80032da:	f000 fc55 	bl	8003b88 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <modbus_send+0xc8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b63      	cmp	r3, #99	@ 0x63
 80032e8:	d9f2      	bls.n	80032d0 <modbus_send+0x8c>
	if(tx_int)
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <modbus_send+0xcc>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <modbus_send+0xba>
	{
		tx_int = 0;
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <modbus_send+0xcc>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <modbus_send+0xbc>
	}
	else
	{
		return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
	}
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bdb0      	pop	{r4, r5, r7, pc}
 8003308:	2000050c 	.word	0x2000050c
 800330c:	200007c4 	.word	0x200007c4
 8003310:	200007c9 	.word	0x200007c9

08003314 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
	if(rx_int)
 8003318:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <modbus_rx+0x24>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <modbus_rx+0x18>
	{
		rx_int = 0;
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <modbus_rx+0x24>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
		return 1;
 8003328:	2301      	movs	r3, #1
 800332a:	e002      	b.n	8003332 <modbus_rx+0x1e>
	}
	return rx_int;
 800332c:	4b02      	ldr	r3, [pc, #8]	@ (8003338 <modbus_rx+0x24>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200007c8 	.word	0x200007c8

0800333c <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx(uint8_t size)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	0002      	movs	r2, r0
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	701a      	strb	r2, [r3, #0]
	return HAL_UARTEx_ReceiveToIdle_IT(&huart1, modbus_rx_buffer, size);
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b29a      	uxth	r2, r3
 800334e:	4905      	ldr	r1, [pc, #20]	@ (8003364 <modbus_set_rx+0x28>)
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <modbus_set_rx+0x2c>)
 8003352:	0018      	movs	r0, r3
 8003354:	f007 f952 	bl	800a5fc <HAL_UARTEx_ReceiveToIdle_IT>
 8003358:	0003      	movs	r3, r0
 800335a:	b25b      	sxtb	r3, r3
	//return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200005c4 	.word	0x200005c4
 8003368:	2000050c 	.word	0x2000050c

0800336c <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	000a      	movs	r2, r1
 8003376:	1cfb      	adds	r3, r7, #3
 8003378:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 800337a:	230f      	movs	r3, #15
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	22ff      	movs	r2, #255	@ 0xff
 8003380:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8003382:	230e      	movs	r3, #14
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	22ff      	movs	r2, #255	@ 0xff
 8003388:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 800338a:	e019      	b.n	80033c0 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	200e      	movs	r0, #14
 8003396:	183b      	adds	r3, r7, r0
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	4053      	eors	r3, r2
 800339c:	b2db      	uxtb	r3, r3
 800339e:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 80033a0:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <crc_16+0x84>)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	7819      	ldrb	r1, [r3, #0]
 80033a8:	183b      	adds	r3, r7, r0
 80033aa:	200f      	movs	r0, #15
 80033ac:	183a      	adds	r2, r7, r0
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	404a      	eors	r2, r1
 80033b2:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 80033b4:	183b      	adds	r3, r7, r0
 80033b6:	490f      	ldr	r1, [pc, #60]	@ (80033f4 <crc_16+0x88>)
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	188a      	adds	r2, r1, r2
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	701a      	strb	r2, [r3, #0]
	while (size--)
 80033c0:	1cfb      	adds	r3, r7, #3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	1cfa      	adds	r2, r7, #3
 80033c6:	1e59      	subs	r1, r3, #1
 80033c8:	7011      	strb	r1, [r2, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1de      	bne.n	800338c <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80033ce:	230f      	movs	r3, #15
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	230e      	movs	r3, #14
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	b21b      	sxth	r3, r3
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	b29b      	uxth	r3, r3
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b004      	add	sp, #16
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	0800b074 	.word	0x0800b074
 80033f4:	0800b174 	.word	0x0800b174

080033f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fe:	4b0f      	ldr	r3, [pc, #60]	@ (800343c <HAL_MspInit+0x44>)
 8003400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003402:	4b0e      	ldr	r3, [pc, #56]	@ (800343c <HAL_MspInit+0x44>)
 8003404:	2101      	movs	r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40
 800340a:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <HAL_MspInit+0x44>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	2201      	movs	r2, #1
 8003410:	4013      	ands	r3, r2
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b09      	ldr	r3, [pc, #36]	@ (800343c <HAL_MspInit+0x44>)
 8003418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800341a:	4b08      	ldr	r3, [pc, #32]	@ (800343c <HAL_MspInit+0x44>)
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	0549      	lsls	r1, r1, #21
 8003420:	430a      	orrs	r2, r1
 8003422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_MspInit+0x44>)
 8003426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	4013      	ands	r3, r2
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b002      	add	sp, #8
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	40021000 	.word	0x40021000

08003440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b093      	sub	sp, #76	@ 0x4c
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	2334      	movs	r3, #52	@ 0x34
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	0018      	movs	r0, r3
 800344e:	2314      	movs	r3, #20
 8003450:	001a      	movs	r2, r3
 8003452:	2100      	movs	r1, #0
 8003454:	f007 f994 	bl	800a780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003458:	2414      	movs	r4, #20
 800345a:	193b      	adds	r3, r7, r4
 800345c:	0018      	movs	r0, r3
 800345e:	2320      	movs	r3, #32
 8003460:	001a      	movs	r2, r3
 8003462:	2100      	movs	r1, #0
 8003464:	f007 f98c 	bl	800a780 <memset>
  if(hadc->Instance==ADC1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a35      	ldr	r2, [pc, #212]	@ (8003544 <HAL_ADC_MspInit+0x104>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d163      	bne.n	800353a <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003472:	193b      	adds	r3, r7, r4
 8003474:	2220      	movs	r2, #32
 8003476:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003478:	193b      	adds	r3, r7, r4
 800347a:	2200      	movs	r2, #0
 800347c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347e:	193b      	adds	r3, r7, r4
 8003480:	0018      	movs	r0, r3
 8003482:	f004 fb85 	bl	8007b90 <HAL_RCCEx_PeriphCLKConfig>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 800348a:	f7ff fd37 	bl	8002efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800348e:	4b2e      	ldr	r3, [pc, #184]	@ (8003548 <HAL_ADC_MspInit+0x108>)
 8003490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003492:	4b2d      	ldr	r3, [pc, #180]	@ (8003548 <HAL_ADC_MspInit+0x108>)
 8003494:	2180      	movs	r1, #128	@ 0x80
 8003496:	0349      	lsls	r1, r1, #13
 8003498:	430a      	orrs	r2, r1
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40
 800349c:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <HAL_ADC_MspInit+0x108>)
 800349e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	035b      	lsls	r3, r3, #13
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_ADC_MspInit+0x108>)
 80034ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ae:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <HAL_ADC_MspInit+0x108>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	430a      	orrs	r2, r1
 80034b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80034b6:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <HAL_ADC_MspInit+0x108>)
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	2201      	movs	r2, #1
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 80034c2:	2134      	movs	r1, #52	@ 0x34
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	4a21      	ldr	r2, [pc, #132]	@ (800354c <HAL_ADC_MspInit+0x10c>)
 80034c8:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	2203      	movs	r2, #3
 80034ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	187a      	adds	r2, r7, r1
 80034d8:	23a0      	movs	r3, #160	@ 0xa0
 80034da:	05db      	lsls	r3, r3, #23
 80034dc:	0011      	movs	r1, r2
 80034de:	0018      	movs	r0, r3
 80034e0:	f001 fda6 	bl	8005030 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80034e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 80034e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003554 <HAL_ADC_MspInit+0x114>)
 80034e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80034ea:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 80034ec:	2205      	movs	r2, #5
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034f0:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 80034fe:	2280      	movs	r2, #128	@ 0x80
 8003500:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 8003504:	2280      	movs	r2, #128	@ 0x80
 8003506:	0052      	lsls	r2, r2, #1
 8003508:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 800350c:	2280      	movs	r2, #128	@ 0x80
 800350e:	00d2      	lsls	r2, r2, #3
 8003510:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003512:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 8003514:	2220      	movs	r2, #32
 8003516:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003518:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 800351a:	2200      	movs	r2, #0
 800351c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800351e:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 8003520:	0018      	movs	r0, r3
 8003522:	f001 faab 	bl	8004a7c <HAL_DMA_Init>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800352a:	f7ff fce7 	bl	8002efc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a07      	ldr	r2, [pc, #28]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 8003532:	651a      	str	r2, [r3, #80]	@ 0x50
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_ADC_MspInit+0x110>)
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b013      	add	sp, #76	@ 0x4c
 8003540:	bd90      	pop	{r4, r7, pc}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	40012400 	.word	0x40012400
 8003548:	40021000 	.word	0x40021000
 800354c:	000001ff 	.word	0x000001ff
 8003550:	20000304 	.word	0x20000304
 8003554:	40020008 	.word	0x40020008

08003558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b093      	sub	sp, #76	@ 0x4c
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	2334      	movs	r3, #52	@ 0x34
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	0018      	movs	r0, r3
 8003566:	2314      	movs	r3, #20
 8003568:	001a      	movs	r2, r3
 800356a:	2100      	movs	r1, #0
 800356c:	f007 f908 	bl	800a780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003570:	2414      	movs	r4, #20
 8003572:	193b      	adds	r3, r7, r4
 8003574:	0018      	movs	r0, r3
 8003576:	2320      	movs	r3, #32
 8003578:	001a      	movs	r2, r3
 800357a:	2100      	movs	r1, #0
 800357c:	f007 f900 	bl	800a780 <memset>
  if(hi2c->Instance==I2C1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a37      	ldr	r2, [pc, #220]	@ (8003664 <HAL_I2C_MspInit+0x10c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d168      	bne.n	800365c <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800358a:	193b      	adds	r3, r7, r4
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003590:	193b      	adds	r3, r7, r4
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003596:	193b      	adds	r3, r7, r4
 8003598:	0018      	movs	r0, r3
 800359a:	f004 faf9 	bl	8007b90 <HAL_RCCEx_PeriphCLKConfig>
 800359e:	1e03      	subs	r3, r0, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80035a2:	f7ff fcab 	bl	8002efc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	4b30      	ldr	r3, [pc, #192]	@ (8003668 <HAL_I2C_MspInit+0x110>)
 80035a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003668 <HAL_I2C_MspInit+0x110>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003668 <HAL_I2C_MspInit+0x110>)
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	2201      	movs	r2, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035be:	2134      	movs	r1, #52	@ 0x34
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	22c0      	movs	r2, #192	@ 0xc0
 80035c4:	00d2      	lsls	r2, r2, #3
 80035c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	2212      	movs	r2, #18
 80035cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2206      	movs	r2, #6
 80035de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	187a      	adds	r2, r7, r1
 80035e2:	23a0      	movs	r3, #160	@ 0xa0
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f001 fd21 	bl	8005030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <HAL_I2C_MspInit+0x110>)
 80035f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <HAL_I2C_MspInit+0x110>)
 80035f4:	2180      	movs	r1, #128	@ 0x80
 80035f6:	0389      	lsls	r1, r1, #14
 80035f8:	430a      	orrs	r2, r1
 80035fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_I2C_MspInit+0x110>)
 80035fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	039b      	lsls	r3, r3, #14
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_I2C_MspInit+0x114>)
 800360c:	4a18      	ldr	r2, [pc, #96]	@ (8003670 <HAL_I2C_MspInit+0x118>)
 800360e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003610:	4b16      	ldr	r3, [pc, #88]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003612:	220a      	movs	r2, #10
 8003614:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003616:	4b15      	ldr	r3, [pc, #84]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <HAL_I2C_MspInit+0x114>)
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003624:	2280      	movs	r2, #128	@ 0x80
 8003626:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003628:	4b10      	ldr	r3, [pc, #64]	@ (800366c <HAL_I2C_MspInit+0x114>)
 800362a:	2200      	movs	r2, #0
 800362c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800362e:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003630:	2200      	movs	r2, #0
 8003632:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003634:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003636:	2200      	movs	r2, #0
 8003638:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800363a:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <HAL_I2C_MspInit+0x114>)
 800363c:	2200      	movs	r2, #0
 800363e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003640:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003642:	0018      	movs	r0, r3
 8003644:	f001 fa1a 	bl	8004a7c <HAL_DMA_Init>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 800364c:	f7ff fc56 	bl	8002efc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a06      	ldr	r2, [pc, #24]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003654:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003656:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_I2C_MspInit+0x114>)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b013      	add	sp, #76	@ 0x4c
 8003662:	bd90      	pop	{r4, r7, pc}
 8003664:	40005400 	.word	0x40005400
 8003668:	40021000 	.word	0x40021000
 800366c:	200003b4 	.word	0x200003b4
 8003670:	4002001c 	.word	0x4002001c

08003674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b093      	sub	sp, #76	@ 0x4c
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367c:	2334      	movs	r3, #52	@ 0x34
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	0018      	movs	r0, r3
 8003682:	2314      	movs	r3, #20
 8003684:	001a      	movs	r2, r3
 8003686:	2100      	movs	r1, #0
 8003688:	f007 f87a 	bl	800a780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800368c:	2414      	movs	r4, #20
 800368e:	193b      	adds	r3, r7, r4
 8003690:	0018      	movs	r0, r3
 8003692:	2320      	movs	r3, #32
 8003694:	001a      	movs	r2, r3
 8003696:	2100      	movs	r1, #0
 8003698:	f007 f872 	bl	800a780 <memset>
  if(hspi->Instance==SPI1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a34      	ldr	r2, [pc, #208]	@ (8003774 <HAL_SPI_MspInit+0x100>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d162      	bne.n	800376c <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	2204      	movs	r2, #4
 80036aa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80036ac:	193b      	adds	r3, r7, r4
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	0018      	movs	r0, r3
 80036b6:	f004 fa6b 	bl	8007b90 <HAL_RCCEx_PeriphCLKConfig>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80036be:	f7ff fc1d 	bl	8002efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036c8:	2180      	movs	r1, #128	@ 0x80
 80036ca:	0149      	lsls	r1, r1, #5
 80036cc:	430a      	orrs	r2, r1
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80036d0:	4b29      	ldr	r3, [pc, #164]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	4b26      	ldr	r3, [pc, #152]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036e2:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	430a      	orrs	r2, r1
 80036e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80036ea:	4b23      	ldr	r3, [pc, #140]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 80036fc:	2102      	movs	r1, #2
 80036fe:	430a      	orrs	r2, r1
 8003700:	635a      	str	r2, [r3, #52]	@ 0x34
 8003702:	4b1d      	ldr	r3, [pc, #116]	@ (8003778 <HAL_SPI_MspInit+0x104>)
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	2202      	movs	r2, #2
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800370e:	2134      	movs	r1, #52	@ 0x34
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2280      	movs	r2, #128	@ 0x80
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	000c      	movs	r4, r1
 800371a:	193b      	adds	r3, r7, r4
 800371c:	2202      	movs	r2, #2
 800371e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	193b      	adds	r3, r7, r4
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	193b      	adds	r3, r7, r4
 8003728:	2200      	movs	r2, #0
 800372a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800372c:	193b      	adds	r3, r7, r4
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003732:	193a      	adds	r2, r7, r4
 8003734:	23a0      	movs	r3, #160	@ 0xa0
 8003736:	05db      	lsls	r3, r3, #23
 8003738:	0011      	movs	r1, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f001 fc78 	bl	8005030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003740:	0021      	movs	r1, r4
 8003742:	187b      	adds	r3, r7, r1
 8003744:	2228      	movs	r2, #40	@ 0x28
 8003746:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	187b      	adds	r3, r7, r1
 800374a:	2202      	movs	r2, #2
 800374c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800375a:	187b      	adds	r3, r7, r1
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003760:	187b      	adds	r3, r7, r1
 8003762:	4a06      	ldr	r2, [pc, #24]	@ (800377c <HAL_SPI_MspInit+0x108>)
 8003764:	0019      	movs	r1, r3
 8003766:	0010      	movs	r0, r2
 8003768:	f001 fc62 	bl	8005030 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b013      	add	sp, #76	@ 0x4c
 8003772:	bd90      	pop	{r4, r7, pc}
 8003774:	40013000 	.word	0x40013000
 8003778:	40021000 	.word	0x40021000
 800377c:	50000400 	.word	0x50000400

08003780 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <HAL_TIM_PWM_MspInit+0x38>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10d      	bne.n	80037ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_TIM_PWM_MspInit+0x3c>)
 8003794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_TIM_PWM_MspInit+0x3c>)
 8003798:	2180      	movs	r1, #128	@ 0x80
 800379a:	0109      	lsls	r1, r1, #4
 800379c:	430a      	orrs	r2, r1
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_TIM_PWM_MspInit+0x3c>)
 80037a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <HAL_TIM_Base_MspInit+0x38>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10d      	bne.n	80037ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_TIM_Base_MspInit+0x3c>)
 80037d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037d6:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <HAL_TIM_Base_MspInit+0x3c>)
 80037d8:	2180      	movs	r1, #128	@ 0x80
 80037da:	0209      	lsls	r1, r1, #8
 80037dc:	430a      	orrs	r2, r1
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_TIM_Base_MspInit+0x3c>)
 80037e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	40002000 	.word	0x40002000
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b089      	sub	sp, #36	@ 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	240c      	movs	r4, #12
 800380a:	193b      	adds	r3, r7, r4
 800380c:	0018      	movs	r0, r3
 800380e:	2314      	movs	r3, #20
 8003810:	001a      	movs	r2, r3
 8003812:	2100      	movs	r1, #0
 8003814:	f006 ffb4 	bl	800a780 <memset>
  if(htim->Instance==TIM1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a15      	ldr	r2, [pc, #84]	@ (8003874 <HAL_TIM_MspPostInit+0x74>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d123      	bne.n	800386a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <HAL_TIM_MspPostInit+0x78>)
 8003824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003826:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <HAL_TIM_MspPostInit+0x78>)
 8003828:	2101      	movs	r1, #1
 800382a:	430a      	orrs	r2, r1
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34
 800382e:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <HAL_TIM_MspPostInit+0x78>)
 8003830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003832:	2201      	movs	r2, #1
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800383a:	193b      	adds	r3, r7, r4
 800383c:	2280      	movs	r2, #128	@ 0x80
 800383e:	0212      	lsls	r2, r2, #8
 8003840:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	0021      	movs	r1, r4
 8003844:	187b      	adds	r3, r7, r1
 8003846:	2202      	movs	r2, #2
 8003848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	187b      	adds	r3, r7, r1
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	187b      	adds	r3, r7, r1
 8003852:	2200      	movs	r2, #0
 8003854:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	2202      	movs	r2, #2
 800385a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385c:	187a      	adds	r2, r7, r1
 800385e:	23a0      	movs	r3, #160	@ 0xa0
 8003860:	05db      	lsls	r3, r3, #23
 8003862:	0011      	movs	r1, r2
 8003864:	0018      	movs	r0, r3
 8003866:	f001 fbe3 	bl	8005030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b009      	add	sp, #36	@ 0x24
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b095      	sub	sp, #84	@ 0x54
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	233c      	movs	r3, #60	@ 0x3c
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	0018      	movs	r0, r3
 800388a:	2314      	movs	r3, #20
 800388c:	001a      	movs	r2, r3
 800388e:	2100      	movs	r1, #0
 8003890:	f006 ff76 	bl	800a780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003894:	241c      	movs	r4, #28
 8003896:	193b      	adds	r3, r7, r4
 8003898:	0018      	movs	r0, r3
 800389a:	2320      	movs	r3, #32
 800389c:	001a      	movs	r2, r3
 800389e:	2100      	movs	r1, #0
 80038a0:	f006 ff6e 	bl	800a780 <memset>
  if(huart->Instance==USART1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a46      	ldr	r2, [pc, #280]	@ (80039c4 <HAL_UART_MspInit+0x148>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d000      	beq.n	80038b0 <HAL_UART_MspInit+0x34>
 80038ae:	e084      	b.n	80039ba <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038b0:	193b      	adds	r3, r7, r4
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80038b6:	193b      	adds	r3, r7, r4
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038bc:	193b      	adds	r3, r7, r4
 80038be:	0018      	movs	r0, r3
 80038c0:	f004 f966 	bl	8007b90 <HAL_RCCEx_PeriphCLKConfig>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d001      	beq.n	80038cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80038c8:	f7ff fb18 	bl	8002efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038cc:	4b3e      	ldr	r3, [pc, #248]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 80038ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038d0:	4b3d      	ldr	r3, [pc, #244]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 80038d2:	2180      	movs	r1, #128	@ 0x80
 80038d4:	01c9      	lsls	r1, r1, #7
 80038d6:	430a      	orrs	r2, r1
 80038d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80038da:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 80038dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	01db      	lsls	r3, r3, #7
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038e8:	4b37      	ldr	r3, [pc, #220]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 80038ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ec:	4b36      	ldr	r3, [pc, #216]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 80038ee:	2104      	movs	r1, #4
 80038f0:	430a      	orrs	r2, r1
 80038f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80038f4:	4b34      	ldr	r3, [pc, #208]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 80038f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f8:	2204      	movs	r2, #4
 80038fa:	4013      	ands	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 8003902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003904:	4b30      	ldr	r3, [pc, #192]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 8003906:	2102      	movs	r1, #2
 8003908:	430a      	orrs	r2, r1
 800390a:	635a      	str	r2, [r3, #52]	@ 0x34
 800390c:	4b2e      	ldr	r3, [pc, #184]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 800390e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003910:	2202      	movs	r2, #2
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	4b2b      	ldr	r3, [pc, #172]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 800391a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800391c:	4b2a      	ldr	r3, [pc, #168]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 800391e:	2101      	movs	r1, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	635a      	str	r2, [r3, #52]	@ 0x34
 8003924:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <HAL_UART_MspInit+0x14c>)
 8003926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003930:	213c      	movs	r1, #60	@ 0x3c
 8003932:	187b      	adds	r3, r7, r1
 8003934:	2280      	movs	r2, #128	@ 0x80
 8003936:	01d2      	lsls	r2, r2, #7
 8003938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	000c      	movs	r4, r1
 800393c:	193b      	adds	r3, r7, r4
 800393e:	2202      	movs	r2, #2
 8003940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	193b      	adds	r3, r7, r4
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003948:	193b      	adds	r3, r7, r4
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800394e:	193b      	adds	r3, r7, r4
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003954:	193b      	adds	r3, r7, r4
 8003956:	4a1d      	ldr	r2, [pc, #116]	@ (80039cc <HAL_UART_MspInit+0x150>)
 8003958:	0019      	movs	r1, r3
 800395a:	0010      	movs	r0, r2
 800395c:	f001 fb68 	bl	8005030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003960:	193b      	adds	r3, r7, r4
 8003962:	2204      	movs	r2, #4
 8003964:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	193b      	adds	r3, r7, r4
 8003968:	2202      	movs	r2, #2
 800396a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	193b      	adds	r3, r7, r4
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003972:	193b      	adds	r3, r7, r4
 8003974:	2200      	movs	r2, #0
 8003976:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003978:	193b      	adds	r3, r7, r4
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397e:	193b      	adds	r3, r7, r4
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <HAL_UART_MspInit+0x154>)
 8003982:	0019      	movs	r1, r3
 8003984:	0010      	movs	r0, r2
 8003986:	f001 fb53 	bl	8005030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800398a:	0021      	movs	r1, r4
 800398c:	187b      	adds	r3, r7, r1
 800398e:	2280      	movs	r2, #128	@ 0x80
 8003990:	0152      	lsls	r2, r2, #5
 8003992:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2202      	movs	r2, #2
 8003998:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	2200      	movs	r2, #0
 80039a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	2201      	movs	r2, #1
 80039aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ac:	187a      	adds	r2, r7, r1
 80039ae:	23a0      	movs	r3, #160	@ 0xa0
 80039b0:	05db      	lsls	r3, r3, #23
 80039b2:	0011      	movs	r1, r2
 80039b4:	0018      	movs	r0, r3
 80039b6:	f001 fb3b 	bl	8005030 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b015      	add	sp, #84	@ 0x54
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40021000 	.word	0x40021000
 80039cc:	50000800 	.word	0x50000800
 80039d0:	50000400 	.word	0x50000400

080039d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	e7fd      	b.n	80039d8 <NMI_Handler+0x4>

080039dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	e7fd      	b.n	80039e0 <HardFault_Handler+0x4>

080039e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039fc:	f000 f8b2 	bl	8003b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a0c:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <DMA1_Channel1_IRQHandler+0x14>)
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f001 f9c0 	bl	8004d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	20000304 	.word	0x20000304

08003a20 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f001 f9b4 	bl	8004d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	200003b4 	.word	0x200003b4

08003a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a3c:	4b03      	ldr	r3, [pc, #12]	@ (8003a4c <SystemInit+0x14>)
 8003a3e:	2280      	movs	r2, #128	@ 0x80
 8003a40:	0512      	lsls	r2, r2, #20
 8003a42:	609a      	str	r2, [r3, #8]
#endif
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a50:	480d      	ldr	r0, [pc, #52]	@ (8003a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a54:	f7ff fff0 	bl	8003a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a5a:	e003      	b.n	8003a64 <LoopCopyDataInit>

08003a5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003a5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a62:	3104      	adds	r1, #4

08003a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a64:	480a      	ldr	r0, [pc, #40]	@ (8003a90 <LoopForever+0xa>)
  ldr r3, =_edata
 8003a66:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <LoopForever+0xe>)
  adds r2, r0, r1
 8003a68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a6c:	d3f6      	bcc.n	8003a5c <CopyDataInit>
  ldr r2, =_sbss
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <LoopForever+0x12>)
  b LoopFillZerobss
 8003a70:	e002      	b.n	8003a78 <LoopFillZerobss>

08003a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  str  r3, [r2]
 8003a74:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a76:	3204      	adds	r2, #4

08003a78 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003a78:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <LoopForever+0x16>)
  cmp r2, r3
 8003a7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a7c:	d3f9      	bcc.n	8003a72 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003a7e:	f006 fe8d 	bl	800a79c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a82:	f7fe fe61 	bl	8002748 <main>

08003a86 <LoopForever>:

LoopForever:
    b LoopForever
 8003a86:	e7fe      	b.n	8003a86 <LoopForever>
  ldr   r0, =_estack
 8003a88:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8003a8c:	0800b394 	.word	0x0800b394
  ldr r0, =_sdata
 8003a90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a94:	200000d8 	.word	0x200000d8
  ldr r2, =_sbss
 8003a98:	200000d8 	.word	0x200000d8
  ldr r3, = _ebss
 8003a9c:	20000908 	.word	0x20000908

08003aa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aa0:	e7fe      	b.n	8003aa0 <ADC1_IRQHandler>

08003aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aae:	2003      	movs	r0, #3
 8003ab0:	f000 f80e 	bl	8003ad0 <HAL_InitTick>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e001      	b.n	8003ac4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ac0:	f7ff fc9a 	bl	80033f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ac4:	1dfb      	adds	r3, r7, #7
 8003ac6:	781b      	ldrb	r3, [r3, #0]
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ad8:	230f      	movs	r3, #15
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <HAL_InitTick+0x88>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02b      	beq.n	8003b40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b5c <HAL_InitTick+0x8c>)
 8003aea:	681c      	ldr	r4, [r3, #0]
 8003aec:	4b1a      	ldr	r3, [pc, #104]	@ (8003b58 <HAL_InitTick+0x88>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	0019      	movs	r1, r3
 8003af2:	23fa      	movs	r3, #250	@ 0xfa
 8003af4:	0098      	lsls	r0, r3, #2
 8003af6:	f7fc fb07 	bl	8000108 <__udivsi3>
 8003afa:	0003      	movs	r3, r0
 8003afc:	0019      	movs	r1, r3
 8003afe:	0020      	movs	r0, r4
 8003b00:	f7fc fb02 	bl	8000108 <__udivsi3>
 8003b04:	0003      	movs	r3, r0
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 ffab 	bl	8004a62 <HAL_SYSTICK_Config>
 8003b0c:	1e03      	subs	r3, r0, #0
 8003b0e:	d112      	bne.n	8003b36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d80a      	bhi.n	8003b2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	425b      	negs	r3, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 ff7a 	bl	8004a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b24:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_InitTick+0x90>)
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00d      	b.n	8003b48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e008      	b.n	8003b48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b36:	230f      	movs	r3, #15
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e003      	b.n	8003b48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b005      	add	sp, #20
 8003b54:	bd90      	pop	{r4, r7, pc}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	2000007c 	.word	0x2000007c
 8003b5c:	20000074 	.word	0x20000074
 8003b60:	20000078 	.word	0x20000078

08003b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_IncTick+0x1c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_IncTick+0x20>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	18d2      	adds	r2, r2, r3
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <HAL_IncTick+0x20>)
 8003b76:	601a      	str	r2, [r3, #0]
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	2000007c 	.word	0x2000007c
 8003b84:	200007cc 	.word	0x200007cc

08003b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b8c:	4b02      	ldr	r3, [pc, #8]	@ (8003b98 <HAL_GetTick+0x10>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	200007cc 	.word	0x200007cc

08003b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff fff0 	bl	8003b88 <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	d005      	beq.n	8003bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <HAL_Delay+0x44>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	001a      	movs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	f7ff ffe0 	bl	8003b88 <HAL_GetTick>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d8f7      	bhi.n	8003bc4 <HAL_Delay+0x28>
  {
  }
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	2000007c 	.word	0x2000007c

08003be4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003bf4:	401a      	ands	r2, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	ff3fffff 	.word	0xff3fffff

08003c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	23c0      	movs	r3, #192	@ 0xc0
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	4013      	ands	r3, r2
}
 8003c1e:	0018      	movs	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b002      	add	sp, #8
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	2104      	movs	r1, #4
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	2107      	movs	r1, #7
 8003c3e:	4091      	lsls	r1, r2
 8003c40:	000a      	movs	r2, r1
 8003c42:	43d2      	mvns	r2, r2
 8003c44:	401a      	ands	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2104      	movs	r1, #4
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4099      	lsls	r1, r3
 8003c50:	000b      	movs	r3, r1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b004      	add	sp, #16
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	2104      	movs	r1, #4
 8003c72:	400a      	ands	r2, r1
 8003c74:	2107      	movs	r1, #7
 8003c76:	4091      	lsls	r1, r2
 8003c78:	000a      	movs	r2, r1
 8003c7a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2104      	movs	r1, #4
 8003c80:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c82:	40da      	lsrs	r2, r3
 8003c84:	0013      	movs	r3, r2
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	23c0      	movs	r3, #192	@ 0xc0
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	211f      	movs	r1, #31
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	4091      	lsls	r1, r2
 8003cca:	000a      	movs	r2, r1
 8003ccc:	43d2      	mvns	r2, r2
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	0e9b      	lsrs	r3, r3, #26
 8003cd4:	210f      	movs	r1, #15
 8003cd6:	4019      	ands	r1, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	201f      	movs	r0, #31
 8003cdc:	4003      	ands	r3, r0
 8003cde:	4099      	lsls	r1, r3
 8003ce0:	000b      	movs	r3, r1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ce8:	46c0      	nop			@ (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b004      	add	sp, #16
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	025b      	lsls	r3, r3, #9
 8003d02:	0a5b      	lsrs	r3, r3, #9
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	0252      	lsls	r2, r2, #9
 8003d24:	0a52      	lsrs	r2, r2, #9
 8003d26:	43d2      	mvns	r2, r2
 8003d28:	401a      	ands	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	0212      	lsls	r2, r2, #8
 8003d4c:	43d2      	mvns	r2, r2
 8003d4e:	401a      	ands	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	400b      	ands	r3, r1
 8003d58:	4904      	ldr	r1, [pc, #16]	@ (8003d6c <LL_ADC_SetChannelSamplingTime+0x34>)
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	7fffff00 	.word	0x7fffff00

08003d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2280      	movs	r2, #128	@ 0x80
 8003d82:	0552      	lsls	r2, r2, #21
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	6fffffe8 	.word	0x6fffffe8

08003d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	055b      	lsls	r3, r3, #21
 8003da8:	401a      	ands	r2, r3
 8003daa:	2380      	movs	r3, #128	@ 0x80
 8003dac:	055b      	lsls	r3, r3, #21
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d101      	bne.n	8003db6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4a04      	ldr	r2, [pc, #16]	@ (8003de0 <LL_ADC_Enable+0x20>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dd8:	46c0      	nop			@ (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	7fffffe8 	.word	0x7fffffe8

08003de4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <LL_ADC_Disable+0x20>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	2202      	movs	r2, #2
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003dfc:	46c0      	nop			@ (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	7fffffe8 	.word	0x7fffffe8

08003e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2201      	movs	r2, #1
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <LL_ADC_IsEnabled+0x18>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <LL_ADC_IsEnabled+0x1a>
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <LL_ADC_REG_StartConversion+0x20>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e44:	46c0      	nop			@ (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	7fffffe8 	.word	0x7fffffe8

08003e50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d101      	bne.n	8003e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7c:	231f      	movs	r3, #31
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e17e      	b.n	8004198 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7ff facb 	bl	8003440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2254      	movs	r2, #84	@ 0x54
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7ff ff6b 	bl	8003d98 <LL_ADC_IsInternalRegulatorEnabled>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d114      	bne.n	8003ef0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff ff50 	bl	8003d70 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ed0:	4bb3      	ldr	r3, [pc, #716]	@ (80041a0 <HAL_ADC_Init+0x32c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	49b3      	ldr	r1, [pc, #716]	@ (80041a4 <HAL_ADC_Init+0x330>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7fc f916 	bl	8000108 <__udivsi3>
 8003edc:	0003      	movs	r3, r0
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ee2:	e002      	b.n	8003eea <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f9      	bne.n	8003ee4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7ff ff4f 	bl	8003d98 <LL_ADC_IsInternalRegulatorEnabled>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d10f      	bne.n	8003f1e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	2210      	movs	r2, #16
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f16:	231f      	movs	r3, #31
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7ff ff94 	bl	8003e50 <LL_ADC_REG_IsConversionOngoing>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f30:	2210      	movs	r2, #16
 8003f32:	4013      	ands	r3, r2
 8003f34:	d000      	beq.n	8003f38 <HAL_ADC_Init+0xc4>
 8003f36:	e122      	b.n	800417e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d000      	beq.n	8003f40 <HAL_ADC_Init+0xcc>
 8003f3e:	e11e      	b.n	800417e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	4a98      	ldr	r2, [pc, #608]	@ (80041a8 <HAL_ADC_Init+0x334>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	2202      	movs	r2, #2
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff ff57 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d000      	beq.n	8003f60 <HAL_ADC_Init+0xec>
 8003f5e:	e0ad      	b.n	80040bc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7e1b      	ldrb	r3, [r3, #24]
 8003f68:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f6a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7e5b      	ldrb	r3, [r3, #25]
 8003f70:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f72:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	7e9b      	ldrb	r3, [r3, #26]
 8003f78:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_ADC_Init+0x116>
 8003f84:	2380      	movs	r3, #128	@ 0x80
 8003f86:	015b      	lsls	r3, r3, #5
 8003f88:	e000      	b.n	8003f8c <HAL_ADC_Init+0x118>
 8003f8a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f8c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f92:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da04      	bge.n	8003fa6 <HAL_ADC_Init+0x132>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	e001      	b.n	8003faa <HAL_ADC_Init+0x136>
 8003fa6:	2380      	movs	r3, #128	@ 0x80
 8003fa8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003faa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	212c      	movs	r1, #44	@ 0x2c
 8003fb0:	5c5b      	ldrb	r3, [r3, r1]
 8003fb2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003fb4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d115      	bne.n	8003ff2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7e9b      	ldrb	r3, [r3, #26]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2280      	movs	r2, #128	@ 0x80
 8003fd2:	0252      	lsls	r2, r2, #9
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e00b      	b.n	8003ff2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	2220      	movs	r2, #32
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fea:	2201      	movs	r2, #1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ffe:	23e0      	movs	r3, #224	@ 0xe0
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004008:	4313      	orrs	r3, r2
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4a65      	ldr	r2, [pc, #404]	@ (80041ac <HAL_ADC_Init+0x338>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	430a      	orrs	r2, r1
 8004024:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	0f9b      	lsrs	r3, r3, #30
 800402c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004032:	4313      	orrs	r3, r2
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	223c      	movs	r2, #60	@ 0x3c
 800403e:	5c9b      	ldrb	r3, [r3, r2]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d111      	bne.n	8004068 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	0f9b      	lsrs	r3, r3, #30
 800404a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004050:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004056:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800405c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	2201      	movs	r2, #1
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	4a50      	ldr	r2, [pc, #320]	@ (80041b0 <HAL_ADC_Init+0x33c>)
 8004070:	4013      	ands	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	430a      	orrs	r2, r1
 800407c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	23c0      	movs	r3, #192	@ 0xc0
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	429a      	cmp	r2, r3
 8004088:	d018      	beq.n	80040bc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800408e:	2380      	movs	r3, #128	@ 0x80
 8004090:	05db      	lsls	r3, r3, #23
 8004092:	429a      	cmp	r2, r3
 8004094:	d012      	beq.n	80040bc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	429a      	cmp	r2, r3
 80040a0:	d00c      	beq.n	80040bc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80040a2:	4b44      	ldr	r3, [pc, #272]	@ (80041b4 <HAL_ADC_Init+0x340>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a44      	ldr	r2, [pc, #272]	@ (80041b8 <HAL_ADC_Init+0x344>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	0019      	movs	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	23f0      	movs	r3, #240	@ 0xf0
 80040b2:	039b      	lsls	r3, r3, #14
 80040b4:	401a      	ands	r2, r3
 80040b6:	4b3f      	ldr	r3, [pc, #252]	@ (80041b4 <HAL_ADC_Init+0x340>)
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c4:	001a      	movs	r2, r3
 80040c6:	2100      	movs	r1, #0
 80040c8:	f7ff fdad 	bl	8003c26 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	4939      	ldr	r1, [pc, #228]	@ (80041bc <HAL_ADC_Init+0x348>)
 80040d6:	001a      	movs	r2, r3
 80040d8:	f7ff fda5 	bl	8003c26 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2110      	movs	r1, #16
 80040f0:	4249      	negs	r1, r1
 80040f2:	430a      	orrs	r2, r1
 80040f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040f6:	e018      	b.n	800412a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	2380      	movs	r3, #128	@ 0x80
 80040fe:	039b      	lsls	r3, r3, #14
 8004100:	429a      	cmp	r2, r3
 8004102:	d112      	bne.n	800412a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	3b01      	subs	r3, #1
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	221c      	movs	r2, #28
 8004114:	4013      	ands	r3, r2
 8004116:	2210      	movs	r2, #16
 8004118:	4252      	negs	r2, r2
 800411a:	409a      	lsls	r2, r3
 800411c:	0011      	movs	r1, r2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2100      	movs	r1, #0
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff fd95 	bl	8003c60 <LL_ADC_GetSamplingTimeCommonChannels>
 8004136:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800413c:	429a      	cmp	r2, r3
 800413e:	d10b      	bne.n	8004158 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	2203      	movs	r2, #3
 800414c:	4393      	bics	r3, r2
 800414e:	2201      	movs	r2, #1
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004156:	e01c      	b.n	8004192 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415c:	2212      	movs	r2, #18
 800415e:	4393      	bics	r3, r2
 8004160:	2210      	movs	r2, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	2201      	movs	r2, #1
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004174:	231f      	movs	r3, #31
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800417c:	e009      	b.n	8004192 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	2210      	movs	r2, #16
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800418a:	231f      	movs	r3, #31
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004192:	231f      	movs	r3, #31
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	781b      	ldrb	r3, [r3, #0]
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b008      	add	sp, #32
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000074 	.word	0x20000074
 80041a4:	00030d40 	.word	0x00030d40
 80041a8:	fffffefd 	.word	0xfffffefd
 80041ac:	ffde0201 	.word	0xffde0201
 80041b0:	1ffffc02 	.word	0x1ffffc02
 80041b4:	40012708 	.word	0x40012708
 80041b8:	ffc3ffff 	.word	0xffc3ffff
 80041bc:	7fffff04 	.word	0x7fffff04

080041c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f7ff fe3d 	bl	8003e50 <LL_ADC_REG_IsConversionOngoing>
 80041d6:	1e03      	subs	r3, r0, #0
 80041d8:	d16c      	bne.n	80042b4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2254      	movs	r2, #84	@ 0x54
 80041de:	5c9b      	ldrb	r3, [r3, r2]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_ADC_Start_DMA+0x28>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e06c      	b.n	80042c2 <HAL_ADC_Start_DMA+0x102>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2254      	movs	r2, #84	@ 0x54
 80041ec:	2101      	movs	r1, #1
 80041ee:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	4013      	ands	r3, r2
 80041fa:	d113      	bne.n	8004224 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff fe01 	bl	8003e08 <LL_ADC_IsEnabled>
 8004206:	1e03      	subs	r3, r0, #0
 8004208:	d004      	beq.n	8004214 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fde8 	bl	8003de4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2101      	movs	r1, #1
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004224:	2517      	movs	r5, #23
 8004226:	197c      	adds	r4, r7, r5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 fa3c 	bl	80046a8 <ADC_Enable>
 8004230:	0003      	movs	r3, r0
 8004232:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004234:	002c      	movs	r4, r5
 8004236:	193b      	adds	r3, r7, r4
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d13e      	bne.n	80042bc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <HAL_ADC_Start_DMA+0x10c>)
 8004244:	4013      	ands	r3, r2
 8004246:	2280      	movs	r2, #128	@ 0x80
 8004248:	0052      	lsls	r2, r2, #1
 800424a:	431a      	orrs	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425a:	4a1d      	ldr	r2, [pc, #116]	@ (80042d0 <HAL_ADC_Start_DMA+0x110>)
 800425c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <HAL_ADC_Start_DMA+0x114>)
 8004264:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426a:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <HAL_ADC_Start_DMA+0x118>)
 800426c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	221c      	movs	r2, #28
 8004274:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2254      	movs	r2, #84	@ 0x54
 800427a:	2100      	movs	r1, #0
 800427c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2110      	movs	r1, #16
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3340      	adds	r3, #64	@ 0x40
 8004298:	0019      	movs	r1, r3
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	193c      	adds	r4, r7, r4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f000 fc76 	bl	8004b90 <HAL_DMA_Start_IT>
 80042a4:	0003      	movs	r3, r0
 80042a6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff fdbd 	bl	8003e2c <LL_ADC_REG_StartConversion>
 80042b2:	e003      	b.n	80042bc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042b4:	2317      	movs	r3, #23
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80042bc:	2317      	movs	r3, #23
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	781b      	ldrb	r3, [r3, #0]
}
 80042c2:	0018      	movs	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b006      	add	sp, #24
 80042c8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	fffff0fe 	.word	0xfffff0fe
 80042d0:	080047a5 	.word	0x080047a5
 80042d4:	0800486d 	.word	0x0800486d
 80042d8:	0800488b 	.word	0x0800488b

080042dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042f4:	46c0      	nop			@ (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004306:	2317      	movs	r3, #23
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2254      	movs	r2, #84	@ 0x54
 8004316:	5c9b      	ldrb	r3, [r3, r2]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x24>
 800431c:	2302      	movs	r3, #2
 800431e:	e1be      	b.n	800469e <HAL_ADC_ConfigChannel+0x3a2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2254      	movs	r2, #84	@ 0x54
 8004324:	2101      	movs	r1, #1
 8004326:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff fd8f 	bl	8003e50 <LL_ADC_REG_IsConversionOngoing>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d000      	beq.n	8004338 <HAL_ADC_ConfigChannel+0x3c>
 8004336:	e1a1      	b.n	800467c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d100      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x46>
 8004340:	e152      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	2380      	movs	r3, #128	@ 0x80
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	429a      	cmp	r2, r3
 800434c:	d004      	beq.n	8004358 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004352:	4ac2      	ldr	r2, [pc, #776]	@ (800465c <HAL_ADC_ConfigChannel+0x360>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0019      	movs	r1, r3
 8004362:	0010      	movs	r0, r2
 8004364:	f7ff fcc4 	bl	8003cf0 <LL_ADC_REG_SetSequencerChAdd>
 8004368:	e0ed      	b.n	8004546 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	211f      	movs	r1, #31
 8004374:	400b      	ands	r3, r1
 8004376:	210f      	movs	r1, #15
 8004378:	4099      	lsls	r1, r3
 800437a:	000b      	movs	r3, r1
 800437c:	43db      	mvns	r3, r3
 800437e:	4013      	ands	r3, r2
 8004380:	0019      	movs	r1, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	025b      	lsls	r3, r3, #9
 8004388:	0a5b      	lsrs	r3, r3, #9
 800438a:	d105      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x9c>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	221f      	movs	r2, #31
 8004394:	4013      	ands	r3, r2
 8004396:	e0bc      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2201      	movs	r2, #1
 800439e:	4013      	ands	r3, r2
 80043a0:	d000      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0xa8>
 80043a2:	e0b5      	b.n	8004510 <HAL_ADC_ConfigChannel+0x214>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2202      	movs	r2, #2
 80043aa:	4013      	ands	r3, r2
 80043ac:	d000      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0xb4>
 80043ae:	e0ad      	b.n	800450c <HAL_ADC_ConfigChannel+0x210>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2204      	movs	r2, #4
 80043b6:	4013      	ands	r3, r2
 80043b8:	d000      	beq.n	80043bc <HAL_ADC_ConfigChannel+0xc0>
 80043ba:	e0a5      	b.n	8004508 <HAL_ADC_ConfigChannel+0x20c>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2208      	movs	r2, #8
 80043c2:	4013      	ands	r3, r2
 80043c4:	d000      	beq.n	80043c8 <HAL_ADC_ConfigChannel+0xcc>
 80043c6:	e09d      	b.n	8004504 <HAL_ADC_ConfigChannel+0x208>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2210      	movs	r2, #16
 80043ce:	4013      	ands	r3, r2
 80043d0:	d000      	beq.n	80043d4 <HAL_ADC_ConfigChannel+0xd8>
 80043d2:	e095      	b.n	8004500 <HAL_ADC_ConfigChannel+0x204>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2220      	movs	r2, #32
 80043da:	4013      	ands	r3, r2
 80043dc:	d000      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0xe4>
 80043de:	e08d      	b.n	80044fc <HAL_ADC_ConfigChannel+0x200>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2240      	movs	r2, #64	@ 0x40
 80043e6:	4013      	ands	r3, r2
 80043e8:	d000      	beq.n	80043ec <HAL_ADC_ConfigChannel+0xf0>
 80043ea:	e085      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x1fc>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2280      	movs	r2, #128	@ 0x80
 80043f2:	4013      	ands	r3, r2
 80043f4:	d000      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0xfc>
 80043f6:	e07d      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x1f8>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4013      	ands	r3, r2
 8004402:	d000      	beq.n	8004406 <HAL_ADC_ConfigChannel+0x10a>
 8004404:	e074      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x1f4>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4013      	ands	r3, r2
 8004410:	d000      	beq.n	8004414 <HAL_ADC_ConfigChannel+0x118>
 8004412:	e06b      	b.n	80044ec <HAL_ADC_ConfigChannel+0x1f0>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	@ 0x80
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4013      	ands	r3, r2
 800441e:	d000      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x126>
 8004420:	e062      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x1ec>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	2380      	movs	r3, #128	@ 0x80
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	4013      	ands	r3, r2
 800442c:	d000      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x134>
 800442e:	e059      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x1e8>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	@ 0x80
 8004436:	015b      	lsls	r3, r3, #5
 8004438:	4013      	ands	r3, r2
 800443a:	d151      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x1e4>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	019b      	lsls	r3, r3, #6
 8004444:	4013      	ands	r3, r2
 8004446:	d149      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1e0>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	@ 0x80
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	4013      	ands	r3, r2
 8004452:	d141      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x1dc>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	@ 0x80
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	4013      	ands	r3, r2
 800445e:	d139      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x1d8>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	4013      	ands	r3, r2
 800446a:	d131      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d4>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	@ 0x80
 8004472:	029b      	lsls	r3, r3, #10
 8004474:	4013      	ands	r3, r2
 8004476:	d129      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x1d0>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	@ 0x80
 800447e:	02db      	lsls	r3, r3, #11
 8004480:	4013      	ands	r3, r2
 8004482:	d121      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x1cc>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	031b      	lsls	r3, r3, #12
 800448c:	4013      	ands	r3, r2
 800448e:	d119      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x1c8>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	035b      	lsls	r3, r3, #13
 8004498:	4013      	ands	r3, r2
 800449a:	d111      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1c4>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	039b      	lsls	r3, r3, #14
 80044a4:	4013      	ands	r3, r2
 80044a6:	d109      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x1c0>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	@ 0x80
 80044ae:	03db      	lsls	r3, r3, #15
 80044b0:	4013      	ands	r3, r2
 80044b2:	d001      	beq.n	80044b8 <HAL_ADC_ConfigChannel+0x1bc>
 80044b4:	2316      	movs	r3, #22
 80044b6:	e02c      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044b8:	2300      	movs	r3, #0
 80044ba:	e02a      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044bc:	2315      	movs	r3, #21
 80044be:	e028      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044c0:	2314      	movs	r3, #20
 80044c2:	e026      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044c4:	2313      	movs	r3, #19
 80044c6:	e024      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044c8:	2312      	movs	r3, #18
 80044ca:	e022      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044cc:	2311      	movs	r3, #17
 80044ce:	e020      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044d0:	2310      	movs	r3, #16
 80044d2:	e01e      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044d4:	230f      	movs	r3, #15
 80044d6:	e01c      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044d8:	230e      	movs	r3, #14
 80044da:	e01a      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044dc:	230d      	movs	r3, #13
 80044de:	e018      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044e0:	230c      	movs	r3, #12
 80044e2:	e016      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044e4:	230b      	movs	r3, #11
 80044e6:	e014      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044e8:	230a      	movs	r3, #10
 80044ea:	e012      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044ec:	2309      	movs	r3, #9
 80044ee:	e010      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044f0:	2308      	movs	r3, #8
 80044f2:	e00e      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044f4:	2307      	movs	r3, #7
 80044f6:	e00c      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044f8:	2306      	movs	r3, #6
 80044fa:	e00a      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 80044fc:	2305      	movs	r3, #5
 80044fe:	e008      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 8004500:	2304      	movs	r3, #4
 8004502:	e006      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 8004504:	2303      	movs	r3, #3
 8004506:	e004      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 8004508:	2302      	movs	r3, #2
 800450a:	e002      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_ADC_ConfigChannel+0x216>
 8004510:	2300      	movs	r3, #0
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	6852      	ldr	r2, [r2, #4]
 8004516:	201f      	movs	r0, #31
 8004518:	4002      	ands	r2, r0
 800451a:	4093      	lsls	r3, r2
 800451c:	000a      	movs	r2, r1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	429a      	cmp	r2, r3
 8004532:	d808      	bhi.n	8004546 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	001a      	movs	r2, r3
 8004542:	f7ff fbb5 	bl	8003cb0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	001a      	movs	r2, r3
 8004554:	f7ff fbf0 	bl	8003d38 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db00      	blt.n	8004562 <HAL_ADC_ConfigChannel+0x266>
 8004560:	e096      	b.n	8004690 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004562:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <HAL_ADC_ConfigChannel+0x364>)
 8004564:	0018      	movs	r0, r3
 8004566:	f7ff fb51 	bl	8003c0c <LL_ADC_GetCommonPathInternalCh>
 800456a:	0003      	movs	r3, r0
 800456c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3c      	ldr	r2, [pc, #240]	@ (8004664 <HAL_ADC_ConfigChannel+0x368>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d123      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004580:	d11e      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2280      	movs	r2, #128	@ 0x80
 8004586:	0412      	lsls	r2, r2, #16
 8004588:	4313      	orrs	r3, r2
 800458a:	4a35      	ldr	r2, [pc, #212]	@ (8004660 <HAL_ADC_ConfigChannel+0x364>)
 800458c:	0019      	movs	r1, r3
 800458e:	0010      	movs	r0, r2
 8004590:	f7ff fb28 	bl	8003be4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004594:	4b34      	ldr	r3, [pc, #208]	@ (8004668 <HAL_ADC_ConfigChannel+0x36c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4934      	ldr	r1, [pc, #208]	@ (800466c <HAL_ADC_ConfigChannel+0x370>)
 800459a:	0018      	movs	r0, r3
 800459c:	f7fb fdb4 	bl	8000108 <__udivsi3>
 80045a0:	0003      	movs	r3, r0
 80045a2:	001a      	movs	r2, r3
 80045a4:	0013      	movs	r3, r2
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	189b      	adds	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045b0:	e002      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f9      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045be:	e067      	b.n	8004690 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004670 <HAL_ADC_ConfigChannel+0x374>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d162      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	2380      	movs	r3, #128	@ 0x80
 80045ce:	03db      	lsls	r3, r3, #15
 80045d0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045d2:	d15d      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2280      	movs	r2, #128	@ 0x80
 80045d8:	03d2      	lsls	r2, r2, #15
 80045da:	4313      	orrs	r3, r2
 80045dc:	4a20      	ldr	r2, [pc, #128]	@ (8004660 <HAL_ADC_ConfigChannel+0x364>)
 80045de:	0019      	movs	r1, r3
 80045e0:	0010      	movs	r0, r2
 80045e2:	f7ff faff 	bl	8003be4 <LL_ADC_SetCommonPathInternalCh>
 80045e6:	e053      	b.n	8004690 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d004      	beq.n	80045fe <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045f8:	4a18      	ldr	r2, [pc, #96]	@ (800465c <HAL_ADC_ConfigChannel+0x360>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d107      	bne.n	800460e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	0019      	movs	r1, r3
 8004608:	0010      	movs	r0, r2
 800460a:	f7ff fb82 	bl	8003d12 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	da3c      	bge.n	8004690 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004616:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <HAL_ADC_ConfigChannel+0x364>)
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff faf7 	bl	8003c0c <LL_ADC_GetCommonPathInternalCh>
 800461e:	0003      	movs	r3, r0
 8004620:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a0f      	ldr	r2, [pc, #60]	@ (8004664 <HAL_ADC_ConfigChannel+0x368>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4a11      	ldr	r2, [pc, #68]	@ (8004674 <HAL_ADC_ConfigChannel+0x378>)
 8004630:	4013      	ands	r3, r2
 8004632:	4a0b      	ldr	r2, [pc, #44]	@ (8004660 <HAL_ADC_ConfigChannel+0x364>)
 8004634:	0019      	movs	r1, r3
 8004636:	0010      	movs	r0, r2
 8004638:	f7ff fad4 	bl	8003be4 <LL_ADC_SetCommonPathInternalCh>
 800463c:	e028      	b.n	8004690 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a0b      	ldr	r2, [pc, #44]	@ (8004670 <HAL_ADC_ConfigChannel+0x374>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d123      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4a0b      	ldr	r2, [pc, #44]	@ (8004678 <HAL_ADC_ConfigChannel+0x37c>)
 800464c:	4013      	ands	r3, r2
 800464e:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <HAL_ADC_ConfigChannel+0x364>)
 8004650:	0019      	movs	r1, r3
 8004652:	0010      	movs	r0, r2
 8004654:	f7ff fac6 	bl	8003be4 <LL_ADC_SetCommonPathInternalCh>
 8004658:	e01a      	b.n	8004690 <HAL_ADC_ConfigChannel+0x394>
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	80000004 	.word	0x80000004
 8004660:	40012708 	.word	0x40012708
 8004664:	a4000200 	.word	0xa4000200
 8004668:	20000074 	.word	0x20000074
 800466c:	00030d40 	.word	0x00030d40
 8004670:	a8000400 	.word	0xa8000400
 8004674:	ff7fffff 	.word	0xff7fffff
 8004678:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004680:	2220      	movs	r2, #32
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004688:	2317      	movs	r3, #23
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2254      	movs	r2, #84	@ 0x54
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004698:	2317      	movs	r3, #23
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	781b      	ldrb	r3, [r3, #0]
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b006      	add	sp, #24
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)

080046a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff fba5 	bl	8003e08 <LL_ADC_IsEnabled>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d162      	bne.n	8004788 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a32      	ldr	r2, [pc, #200]	@ (8004794 <ADC_Enable+0xec>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	d00d      	beq.n	80046ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d2:	2210      	movs	r2, #16
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046de:	2201      	movs	r2, #1
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e04f      	b.n	800478a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7ff fb66 	bl	8003dc0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80046f4:	4b28      	ldr	r3, [pc, #160]	@ (8004798 <ADC_Enable+0xf0>)
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff fa88 	bl	8003c0c <LL_ADC_GetCommonPathInternalCh>
 80046fc:	0002      	movs	r2, r0
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	4013      	ands	r3, r2
 8004704:	d00f      	beq.n	8004726 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004706:	4b25      	ldr	r3, [pc, #148]	@ (800479c <ADC_Enable+0xf4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4925      	ldr	r1, [pc, #148]	@ (80047a0 <ADC_Enable+0xf8>)
 800470c:	0018      	movs	r0, r3
 800470e:	f7fb fcfb 	bl	8000108 <__udivsi3>
 8004712:	0003      	movs	r3, r0
 8004714:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004716:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004718:	e002      	b.n	8004720 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3b01      	subs	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f9      	bne.n	800471a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7e5b      	ldrb	r3, [r3, #25]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d02c      	beq.n	8004788 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800472e:	f7ff fa2b 	bl	8003b88 <HAL_GetTick>
 8004732:	0003      	movs	r3, r0
 8004734:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004736:	e020      	b.n	800477a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0018      	movs	r0, r3
 800473e:	f7ff fb63 	bl	8003e08 <LL_ADC_IsEnabled>
 8004742:	1e03      	subs	r3, r0, #0
 8004744:	d104      	bne.n	8004750 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0018      	movs	r0, r3
 800474c:	f7ff fb38 	bl	8003dc0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004750:	f7ff fa1a 	bl	8003b88 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d90d      	bls.n	800477a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004762:	2210      	movs	r2, #16
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476e:	2201      	movs	r2, #1
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e007      	b.n	800478a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2201      	movs	r2, #1
 8004782:	4013      	ands	r3, r2
 8004784:	2b01      	cmp	r3, #1
 8004786:	d1d7      	bne.n	8004738 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	0018      	movs	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	b004      	add	sp, #16
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	80000017 	.word	0x80000017
 8004798:	40012708 	.word	0x40012708
 800479c:	20000074 	.word	0x20000074
 80047a0:	00030d40 	.word	0x00030d40

080047a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b6:	2250      	movs	r2, #80	@ 0x50
 80047b8:	4013      	ands	r3, r2
 80047ba:	d141      	bne.n	8004840 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c0:	2280      	movs	r2, #128	@ 0x80
 80047c2:	0092      	lsls	r2, r2, #2
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff fa5d 	bl	8003c8e <LL_ADC_REG_IsTriggerSourceSWStart>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d02e      	beq.n	8004836 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	7e9b      	ldrb	r3, [r3, #26]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d12a      	bne.n	8004836 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2208      	movs	r2, #8
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d123      	bne.n	8004836 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff fb2c 	bl	8003e50 <LL_ADC_REG_IsConversionOngoing>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d110      	bne.n	800481e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	210c      	movs	r1, #12
 8004808:	438a      	bics	r2, r1
 800480a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004810:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <ADC_DMAConvCplt+0xc4>)
 8004812:	4013      	ands	r3, r2
 8004814:	2201      	movs	r2, #1
 8004816:	431a      	orrs	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	659a      	str	r2, [r3, #88]	@ 0x58
 800481c:	e00b      	b.n	8004836 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	2220      	movs	r2, #32
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482e:	2201      	movs	r2, #1
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fd ff5b 	bl	80026f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800483e:	e00f      	b.n	8004860 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004844:	2210      	movs	r2, #16
 8004846:	4013      	ands	r3, r2
 8004848:	d004      	beq.n	8004854 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	0018      	movs	r0, r3
 800484e:	f7ff fd4d 	bl	80042ec <HAL_ADC_ErrorCallback>
}
 8004852:	e005      	b.n	8004860 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	0010      	movs	r0, r2
 800485e:	4798      	blx	r3
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b004      	add	sp, #16
 8004866:	bd80      	pop	{r7, pc}
 8004868:	fffffefe 	.word	0xfffffefe

0800486c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	0018      	movs	r0, r3
 800487e:	f7ff fd2d 	bl	80042dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b004      	add	sp, #16
 8004888:	bd80      	pop	{r7, pc}

0800488a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489c:	2240      	movs	r2, #64	@ 0x40
 800489e:	431a      	orrs	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	2204      	movs	r2, #4
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff fd1a 	bl	80042ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b004      	add	sp, #16
 80048be:	bd80      	pop	{r7, pc}

080048c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	0002      	movs	r2, r0
 80048c8:	1dfb      	adds	r3, r7, #7
 80048ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048cc:	1dfb      	adds	r3, r7, #7
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048d2:	d809      	bhi.n	80048e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048d4:	1dfb      	adds	r3, r7, #7
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	001a      	movs	r2, r3
 80048da:	231f      	movs	r3, #31
 80048dc:	401a      	ands	r2, r3
 80048de:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <__NVIC_EnableIRQ+0x30>)
 80048e0:	2101      	movs	r1, #1
 80048e2:	4091      	lsls	r1, r2
 80048e4:	000a      	movs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80048e8:	46c0      	nop			@ (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b002      	add	sp, #8
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	e000e100 	.word	0xe000e100

080048f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	0002      	movs	r2, r0
 80048fc:	6039      	str	r1, [r7, #0]
 80048fe:	1dfb      	adds	r3, r7, #7
 8004900:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b7f      	cmp	r3, #127	@ 0x7f
 8004908:	d828      	bhi.n	800495c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800490a:	4a2f      	ldr	r2, [pc, #188]	@ (80049c8 <__NVIC_SetPriority+0xd4>)
 800490c:	1dfb      	adds	r3, r7, #7
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b25b      	sxtb	r3, r3
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	33c0      	adds	r3, #192	@ 0xc0
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	589b      	ldr	r3, [r3, r2]
 800491a:	1dfa      	adds	r2, r7, #7
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	0011      	movs	r1, r2
 8004920:	2203      	movs	r2, #3
 8004922:	400a      	ands	r2, r1
 8004924:	00d2      	lsls	r2, r2, #3
 8004926:	21ff      	movs	r1, #255	@ 0xff
 8004928:	4091      	lsls	r1, r2
 800492a:	000a      	movs	r2, r1
 800492c:	43d2      	mvns	r2, r2
 800492e:	401a      	ands	r2, r3
 8004930:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	22ff      	movs	r2, #255	@ 0xff
 8004938:	401a      	ands	r2, r3
 800493a:	1dfb      	adds	r3, r7, #7
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	0018      	movs	r0, r3
 8004940:	2303      	movs	r3, #3
 8004942:	4003      	ands	r3, r0
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004948:	481f      	ldr	r0, [pc, #124]	@ (80049c8 <__NVIC_SetPriority+0xd4>)
 800494a:	1dfb      	adds	r3, r7, #7
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	b25b      	sxtb	r3, r3
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	430a      	orrs	r2, r1
 8004954:	33c0      	adds	r3, #192	@ 0xc0
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800495a:	e031      	b.n	80049c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800495c:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <__NVIC_SetPriority+0xd8>)
 800495e:	1dfb      	adds	r3, r7, #7
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	0019      	movs	r1, r3
 8004964:	230f      	movs	r3, #15
 8004966:	400b      	ands	r3, r1
 8004968:	3b08      	subs	r3, #8
 800496a:	089b      	lsrs	r3, r3, #2
 800496c:	3306      	adds	r3, #6
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	18d3      	adds	r3, r2, r3
 8004972:	3304      	adds	r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1dfa      	adds	r2, r7, #7
 8004978:	7812      	ldrb	r2, [r2, #0]
 800497a:	0011      	movs	r1, r2
 800497c:	2203      	movs	r2, #3
 800497e:	400a      	ands	r2, r1
 8004980:	00d2      	lsls	r2, r2, #3
 8004982:	21ff      	movs	r1, #255	@ 0xff
 8004984:	4091      	lsls	r1, r2
 8004986:	000a      	movs	r2, r1
 8004988:	43d2      	mvns	r2, r2
 800498a:	401a      	ands	r2, r3
 800498c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	019b      	lsls	r3, r3, #6
 8004992:	22ff      	movs	r2, #255	@ 0xff
 8004994:	401a      	ands	r2, r3
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	0018      	movs	r0, r3
 800499c:	2303      	movs	r3, #3
 800499e:	4003      	ands	r3, r0
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049a4:	4809      	ldr	r0, [pc, #36]	@ (80049cc <__NVIC_SetPriority+0xd8>)
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	001c      	movs	r4, r3
 80049ac:	230f      	movs	r3, #15
 80049ae:	4023      	ands	r3, r4
 80049b0:	3b08      	subs	r3, #8
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	430a      	orrs	r2, r1
 80049b6:	3306      	adds	r3, #6
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	18c3      	adds	r3, r0, r3
 80049bc:	3304      	adds	r3, #4
 80049be:	601a      	str	r2, [r3, #0]
}
 80049c0:	46c0      	nop			@ (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b003      	add	sp, #12
 80049c6:	bd90      	pop	{r4, r7, pc}
 80049c8:	e000e100 	.word	0xe000e100
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	1e5a      	subs	r2, r3, #1
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	045b      	lsls	r3, r3, #17
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d301      	bcc.n	80049e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049e4:	2301      	movs	r3, #1
 80049e6:	e010      	b.n	8004a0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <SysTick_Config+0x44>)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	3a01      	subs	r2, #1
 80049ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049f0:	2301      	movs	r3, #1
 80049f2:	425b      	negs	r3, r3
 80049f4:	2103      	movs	r1, #3
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff ff7c 	bl	80048f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <SysTick_Config+0x44>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a02:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <SysTick_Config+0x44>)
 8004a04:	2207      	movs	r2, #7
 8004a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	e000e010 	.word	0xe000e010

08004a18 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	210f      	movs	r1, #15
 8004a24:	187b      	adds	r3, r7, r1
 8004a26:	1c02      	adds	r2, r0, #0
 8004a28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	187b      	adds	r3, r7, r1
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	b25b      	sxtb	r3, r3
 8004a32:	0011      	movs	r1, r2
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7ff ff5d 	bl	80048f4 <__NVIC_SetPriority>
}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b004      	add	sp, #16
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	0002      	movs	r2, r0
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a4e:	1dfb      	adds	r3, r7, #7
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7ff ff33 	bl	80048c0 <__NVIC_EnableIRQ>
}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff ffaf 	bl	80049d0 <SysTick_Config>
 8004a72:	0003      	movs	r3, r0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e077      	b.n	8004b7e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3d      	ldr	r2, [pc, #244]	@ (8004b88 <HAL_DMA_Init+0x10c>)
 8004a94:	4694      	mov	ip, r2
 8004a96:	4463      	add	r3, ip
 8004a98:	2114      	movs	r1, #20
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fb fb34 	bl	8000108 <__udivsi3>
 8004aa0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004aa2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2225      	movs	r2, #37	@ 0x25
 8004aac:	2102      	movs	r1, #2
 8004aae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4934      	ldr	r1, [pc, #208]	@ (8004b8c <HAL_DMA_Init+0x110>)
 8004abc:	400a      	ands	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f000 fa49 	bl	8004f90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	01db      	lsls	r3, r3, #7
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d102      	bne.n	8004b10 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b18:	21ff      	movs	r1, #255	@ 0xff
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b26:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d011      	beq.n	8004b54 <HAL_DMA_Init+0xd8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d80d      	bhi.n	8004b54 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 fa54 	bl	8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	e008      	b.n	8004b66 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2225      	movs	r2, #37	@ 0x25
 8004b70:	2101      	movs	r1, #1
 8004b72:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	@ 0x24
 8004b78:	2100      	movs	r1, #0
 8004b7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	0018      	movs	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b002      	add	sp, #8
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	bffdfff8 	.word	0xbffdfff8
 8004b8c:	ffff800f 	.word	0xffff800f

08004b90 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2317      	movs	r3, #23
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2224      	movs	r2, #36	@ 0x24
 8004baa:	5c9b      	ldrb	r3, [r3, r2]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_DMA_Start_IT+0x24>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e070      	b.n	8004c96 <HAL_DMA_Start_IT+0x106>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2224      	movs	r2, #36	@ 0x24
 8004bb8:	2101      	movs	r1, #1
 8004bba:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2225      	movs	r2, #37	@ 0x25
 8004bc0:	5c9b      	ldrb	r3, [r3, r2]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d157      	bne.n	8004c78 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2225      	movs	r2, #37	@ 0x25
 8004bcc:	2102      	movs	r1, #2
 8004bce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2101      	movs	r1, #1
 8004be2:	438a      	bics	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f98f 	bl	8004f10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	210e      	movs	r1, #14
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e00f      	b.n	8004c2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2104      	movs	r1, #4
 8004c18:	438a      	bics	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	210a      	movs	r1, #10
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	025b      	lsls	r3, r3, #9
 8004c36:	4013      	ands	r3, r2
 8004c38:	d008      	beq.n	8004c4c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c44:	2180      	movs	r1, #128	@ 0x80
 8004c46:	0049      	lsls	r1, r1, #1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5e:	2180      	movs	r1, #128	@ 0x80
 8004c60:	0049      	lsls	r1, r1, #1
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2101      	movs	r1, #1
 8004c72:	430a      	orrs	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e007      	b.n	8004c88 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2224      	movs	r2, #36	@ 0x24
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c80:	2317      	movs	r3, #23
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	2202      	movs	r2, #2
 8004c86:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2224      	movs	r2, #36	@ 0x24
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]

  return status;
 8004c90:	2317      	movs	r3, #23
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	781b      	ldrb	r3, [r3, #0]
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b006      	add	sp, #24
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	@ 0x24
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	@ 0x24
 8004cbc:	5c9b      	ldrb	r3, [r3, r2]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_DMA_Abort_IT+0x26>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e05e      	b.n	8004d84 <HAL_DMA_Abort_IT+0xe4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2224      	movs	r2, #36	@ 0x24
 8004cca:	2101      	movs	r1, #1
 8004ccc:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2225      	movs	r2, #37	@ 0x25
 8004cd2:	5c9b      	ldrb	r3, [r3, r2]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d007      	beq.n	8004cea <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ce0:	230f      	movs	r3, #15
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e049      	b.n	8004d7e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	210e      	movs	r1, #14
 8004cf6:	438a      	bics	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	438a      	bics	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d14:	491d      	ldr	r1, [pc, #116]	@ (8004d8c <HAL_DMA_Abort_IT+0xec>)
 8004d16:	400a      	ands	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d90 <HAL_DMA_Abort_IT+0xf0>)
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	221c      	movs	r2, #28
 8004d24:	4013      	ands	r3, r2
 8004d26:	2201      	movs	r2, #1
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	4b19      	ldr	r3, [pc, #100]	@ (8004d90 <HAL_DMA_Abort_IT+0xf0>)
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	490f      	ldr	r1, [pc, #60]	@ (8004d8c <HAL_DMA_Abort_IT+0xec>)
 8004d4e:	400a      	ands	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004d5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2225      	movs	r2, #37	@ 0x25
 8004d60:	2101      	movs	r1, #1
 8004d62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2224      	movs	r2, #36	@ 0x24
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	0010      	movs	r0, r2
 8004d7c:	4798      	blx	r3
    }
  }
  return status;
 8004d7e:	230f      	movs	r3, #15
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	781b      	ldrb	r3, [r3, #0]
}
 8004d84:	0018      	movs	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b004      	add	sp, #16
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	fffffeff 	.word	0xfffffeff
 8004d90:	40020000 	.word	0x40020000

08004d94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8004d9c:	4b55      	ldr	r3, [pc, #340]	@ (8004ef4 <HAL_DMA_IRQHandler+0x160>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	221c      	movs	r2, #28
 8004db0:	4013      	ands	r3, r2
 8004db2:	2204      	movs	r2, #4
 8004db4:	409a      	lsls	r2, r3
 8004db6:	0013      	movs	r3, r2
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x7a>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d023      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d107      	bne.n	8004de2 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2104      	movs	r1, #4
 8004dde:	438a      	bics	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004de2:	4b44      	ldr	r3, [pc, #272]	@ (8004ef4 <HAL_DMA_IRQHandler+0x160>)
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	221c      	movs	r2, #28
 8004dec:	4013      	ands	r3, r2
 8004dee:	2204      	movs	r2, #4
 8004df0:	409a      	lsls	r2, r3
 8004df2:	4b40      	ldr	r3, [pc, #256]	@ (8004ef4 <HAL_DMA_IRQHandler+0x160>)
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d100      	bne.n	8004e02 <HAL_DMA_IRQHandler+0x6e>
 8004e00:	e073      	b.n	8004eea <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	0010      	movs	r0, r2
 8004e0a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e0c:	e06d      	b.n	8004eea <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	221c      	movs	r2, #28
 8004e14:	4013      	ands	r3, r2
 8004e16:	2202      	movs	r2, #2
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	0013      	movs	r3, r2
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d02e      	beq.n	8004e80 <HAL_DMA_IRQHandler+0xec>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2202      	movs	r2, #2
 8004e26:	4013      	ands	r3, r2
 8004e28:	d02a      	beq.n	8004e80 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2220      	movs	r2, #32
 8004e32:	4013      	ands	r3, r2
 8004e34:	d10b      	bne.n	8004e4e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	210a      	movs	r1, #10
 8004e42:	438a      	bics	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2225      	movs	r2, #37	@ 0x25
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8004e4e:	4b29      	ldr	r3, [pc, #164]	@ (8004ef4 <HAL_DMA_IRQHandler+0x160>)
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	221c      	movs	r2, #28
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <HAL_DMA_IRQHandler+0x160>)
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2224      	movs	r2, #36	@ 0x24
 8004e68:	2100      	movs	r1, #0
 8004e6a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d03a      	beq.n	8004eea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	0010      	movs	r0, r2
 8004e7c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e7e:	e034      	b.n	8004eea <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	221c      	movs	r2, #28
 8004e86:	4013      	ands	r3, r2
 8004e88:	2208      	movs	r2, #8
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	0013      	movs	r3, r2
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4013      	ands	r3, r2
 8004e92:	d02b      	beq.n	8004eec <HAL_DMA_IRQHandler+0x158>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2208      	movs	r2, #8
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d027      	beq.n	8004eec <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	210e      	movs	r1, #14
 8004ea8:	438a      	bics	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004eac:	4b11      	ldr	r3, [pc, #68]	@ (8004ef4 <HAL_DMA_IRQHandler+0x160>)
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	221c      	movs	r2, #28
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <HAL_DMA_IRQHandler+0x160>)
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2225      	movs	r2, #37	@ 0x25
 8004ecc:	2101      	movs	r1, #1
 8004ece:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	@ 0x24
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	0010      	movs	r0, r2
 8004ee8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	46c0      	nop			@ (mov r8, r8)
}
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b004      	add	sp, #16
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40020000 	.word	0x40020000

08004ef8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2225      	movs	r2, #37	@ 0x25
 8004f04:	5c9b      	ldrb	r3, [r3, r2]
 8004f06:	b2db      	uxtb	r3, r3
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004f38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004f3a:	4b14      	ldr	r3, [pc, #80]	@ (8004f8c <DMA_SetConfig+0x7c>)
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	221c      	movs	r2, #28
 8004f44:	4013      	ands	r3, r2
 8004f46:	2201      	movs	r2, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <DMA_SetConfig+0x7c>)
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d108      	bne.n	8004f72 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f70:	e007      	b.n	8004f82 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	60da      	str	r2, [r3, #12]
}
 8004f82:	46c0      	nop			@ (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b004      	add	sp, #16
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	40020000 	.word	0x40020000

08004f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	23ff      	movs	r3, #255	@ 0xff
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	3b08      	subs	r3, #8
 8004fa4:	2114      	movs	r1, #20
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fb f8ae 	bl	8000108 <__udivsi3>
 8004fac:	0003      	movs	r3, r0
 8004fae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8004fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004fb8:	4694      	mov	ip, r2
 8004fba:	4463      	add	r3, ip
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	001a      	movs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a07      	ldr	r2, [pc, #28]	@ (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004fc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	221c      	movs	r2, #28
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004fd8:	46c0      	nop			@ (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b004      	add	sp, #16
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	10008200 	.word	0x10008200
 8004fe4:	40020880 	.word	0x40020880

08004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	22ff      	movs	r2, #255	@ 0xff
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ffe:	4694      	mov	ip, r2
 8005000:	4463      	add	r3, ip
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	001a      	movs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a07      	ldr	r2, [pc, #28]	@ (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b01      	subs	r3, #1
 8005014:	2203      	movs	r2, #3
 8005016:	4013      	ands	r3, r2
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8005020:	46c0      	nop			@ (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b004      	add	sp, #16
 8005026:	bd80      	pop	{r7, pc}
 8005028:	1000823f 	.word	0x1000823f
 800502c:	40020940 	.word	0x40020940

08005030 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800503e:	e153      	b.n	80052e8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2101      	movs	r1, #1
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4091      	lsls	r1, r2
 800504a:	000a      	movs	r2, r1
 800504c:	4013      	ands	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d100      	bne.n	8005058 <HAL_GPIO_Init+0x28>
 8005056:	e144      	b.n	80052e2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x38>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b12      	cmp	r3, #18
 8005066:	d125      	bne.n	80050b4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	08da      	lsrs	r2, r3, #3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3208      	adds	r2, #8
 8005070:	0092      	lsls	r2, r2, #2
 8005072:	58d3      	ldr	r3, [r2, r3]
 8005074:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2207      	movs	r2, #7
 800507a:	4013      	ands	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	220f      	movs	r2, #15
 8005080:	409a      	lsls	r2, r3
 8005082:	0013      	movs	r3, r2
 8005084:	43da      	mvns	r2, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4013      	ands	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	220f      	movs	r2, #15
 8005092:	401a      	ands	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2107      	movs	r1, #7
 8005098:	400b      	ands	r3, r1
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	409a      	lsls	r2, r3
 800509e:	0013      	movs	r3, r2
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	08da      	lsrs	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3208      	adds	r2, #8
 80050ae:	0092      	lsls	r2, r2, #2
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	2203      	movs	r2, #3
 80050c0:	409a      	lsls	r2, r3
 80050c2:	0013      	movs	r3, r2
 80050c4:	43da      	mvns	r2, r3
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4013      	ands	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2203      	movs	r2, #3
 80050d2:	401a      	ands	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	409a      	lsls	r2, r3
 80050da:	0013      	movs	r3, r2
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d00b      	beq.n	8005108 <HAL_GPIO_Init+0xd8>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d007      	beq.n	8005108 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050fc:	2b11      	cmp	r3, #17
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b12      	cmp	r3, #18
 8005106:	d130      	bne.n	800516a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	2203      	movs	r2, #3
 8005114:	409a      	lsls	r2, r3
 8005116:	0013      	movs	r3, r2
 8005118:	43da      	mvns	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4013      	ands	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	0013      	movs	r3, r2
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800513e:	2201      	movs	r2, #1
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	409a      	lsls	r2, r3
 8005144:	0013      	movs	r3, r2
 8005146:	43da      	mvns	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4013      	ands	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	2201      	movs	r2, #1
 8005156:	401a      	ands	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	409a      	lsls	r2, r3
 800515c:	0013      	movs	r3, r2
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d017      	beq.n	80051a2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2203      	movs	r2, #3
 800517e:	409a      	lsls	r2, r3
 8005180:	0013      	movs	r3, r2
 8005182:	43da      	mvns	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4013      	ands	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	409a      	lsls	r2, r3
 8005194:	0013      	movs	r3, r2
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	055b      	lsls	r3, r3, #21
 80051aa:	4013      	ands	r3, r2
 80051ac:	d100      	bne.n	80051b0 <HAL_GPIO_Init+0x180>
 80051ae:	e098      	b.n	80052e2 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80051b0:	4a53      	ldr	r2, [pc, #332]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	3318      	adds	r3, #24
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	589b      	ldr	r3, [r3, r2]
 80051bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2203      	movs	r2, #3
 80051c2:	4013      	ands	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	220f      	movs	r2, #15
 80051c8:	409a      	lsls	r2, r3
 80051ca:	0013      	movs	r3, r2
 80051cc:	43da      	mvns	r2, r3
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	4013      	ands	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	23a0      	movs	r3, #160	@ 0xa0
 80051d8:	05db      	lsls	r3, r3, #23
 80051da:	429a      	cmp	r2, r3
 80051dc:	d019      	beq.n	8005212 <HAL_GPIO_Init+0x1e2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a48      	ldr	r2, [pc, #288]	@ (8005304 <HAL_GPIO_Init+0x2d4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_GPIO_Init+0x1de>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a47      	ldr	r2, [pc, #284]	@ (8005308 <HAL_GPIO_Init+0x2d8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00d      	beq.n	800520a <HAL_GPIO_Init+0x1da>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a46      	ldr	r2, [pc, #280]	@ (800530c <HAL_GPIO_Init+0x2dc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <HAL_GPIO_Init+0x1d6>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a45      	ldr	r2, [pc, #276]	@ (8005310 <HAL_GPIO_Init+0x2e0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_GPIO_Init+0x1d2>
 80051fe:	2305      	movs	r3, #5
 8005200:	e008      	b.n	8005214 <HAL_GPIO_Init+0x1e4>
 8005202:	2306      	movs	r3, #6
 8005204:	e006      	b.n	8005214 <HAL_GPIO_Init+0x1e4>
 8005206:	2303      	movs	r3, #3
 8005208:	e004      	b.n	8005214 <HAL_GPIO_Init+0x1e4>
 800520a:	2302      	movs	r3, #2
 800520c:	e002      	b.n	8005214 <HAL_GPIO_Init+0x1e4>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_GPIO_Init+0x1e4>
 8005212:	2300      	movs	r3, #0
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	2103      	movs	r1, #3
 8005218:	400a      	ands	r2, r1
 800521a:	00d2      	lsls	r2, r2, #3
 800521c:	4093      	lsls	r3, r2
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005224:	4936      	ldr	r1, [pc, #216]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	3318      	adds	r3, #24
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8005232:	4a33      	ldr	r2, [pc, #204]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 8005234:	2380      	movs	r3, #128	@ 0x80
 8005236:	58d3      	ldr	r3, [r2, r3]
 8005238:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	43da      	mvns	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4013      	ands	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	2380      	movs	r3, #128	@ 0x80
 800524a:	025b      	lsls	r3, r3, #9
 800524c:	4013      	ands	r3, r2
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005258:	4929      	ldr	r1, [pc, #164]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 800525a:	2280      	movs	r2, #128	@ 0x80
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8005260:	4a27      	ldr	r2, [pc, #156]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 8005262:	2384      	movs	r3, #132	@ 0x84
 8005264:	58d3      	ldr	r3, [r2, r3]
 8005266:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	43da      	mvns	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4013      	ands	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	2380      	movs	r3, #128	@ 0x80
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	4013      	ands	r3, r2
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005286:	491e      	ldr	r1, [pc, #120]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 8005288:	2284      	movs	r2, #132	@ 0x84
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800528e:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	43da      	mvns	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4013      	ands	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	035b      	lsls	r3, r3, #13
 80052a6:	4013      	ands	r3, r2
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80052b2:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4013      	ands	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	039b      	lsls	r3, r3, #14
 80052d0:	4013      	ands	r3, r2
 80052d2:	d003      	beq.n	80052dc <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80052dc:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <HAL_GPIO_Init+0x2d0>)
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3301      	adds	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	40da      	lsrs	r2, r3
 80052f0:	1e13      	subs	r3, r2, #0
 80052f2:	d000      	beq.n	80052f6 <HAL_GPIO_Init+0x2c6>
 80052f4:	e6a4      	b.n	8005040 <HAL_GPIO_Init+0x10>
  }
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	46c0      	nop			@ (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b006      	add	sp, #24
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021800 	.word	0x40021800
 8005304:	50000400 	.word	0x50000400
 8005308:	50000800 	.word	0x50000800
 800530c:	50000c00 	.word	0x50000c00
 8005310:	50001400 	.word	0x50001400

08005314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	0008      	movs	r0, r1
 800531e:	0011      	movs	r1, r2
 8005320:	1cbb      	adds	r3, r7, #2
 8005322:	1c02      	adds	r2, r0, #0
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	1c7b      	adds	r3, r7, #1
 8005328:	1c0a      	adds	r2, r1, #0
 800532a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800532c:	1c7b      	adds	r3, r7, #1
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005334:	1cbb      	adds	r3, r7, #2
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800533c:	e003      	b.n	8005346 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800533e:	1cbb      	adds	r3, r7, #2
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	46bd      	mov	sp, r7
 800534a:	b002      	add	sp, #8
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e08f      	b.n	8005482 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2241      	movs	r2, #65	@ 0x41
 8005366:	5c9b      	ldrb	r3, [r3, r2]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2240      	movs	r2, #64	@ 0x40
 8005372:	2100      	movs	r1, #0
 8005374:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	0018      	movs	r0, r3
 800537a:	f7fe f8ed 	bl	8003558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2241      	movs	r2, #65	@ 0x41
 8005382:	2124      	movs	r1, #36	@ 0x24
 8005384:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2101      	movs	r1, #1
 8005392:	438a      	bics	r2, r1
 8005394:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	493b      	ldr	r1, [pc, #236]	@ (800548c <HAL_I2C_Init+0x13c>)
 80053a0:	400a      	ands	r2, r1
 80053a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4938      	ldr	r1, [pc, #224]	@ (8005490 <HAL_I2C_Init+0x140>)
 80053b0:	400a      	ands	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d108      	bne.n	80053ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2180      	movs	r1, #128	@ 0x80
 80053c6:	0209      	lsls	r1, r1, #8
 80053c8:	430a      	orrs	r2, r1
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	e007      	b.n	80053de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2184      	movs	r1, #132	@ 0x84
 80053d8:	0209      	lsls	r1, r1, #8
 80053da:	430a      	orrs	r2, r1
 80053dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d109      	bne.n	80053fa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2180      	movs	r1, #128	@ 0x80
 80053f2:	0109      	lsls	r1, r1, #4
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	e007      	b.n	800540a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4923      	ldr	r1, [pc, #140]	@ (8005494 <HAL_I2C_Init+0x144>)
 8005406:	400a      	ands	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4920      	ldr	r1, [pc, #128]	@ (8005498 <HAL_I2C_Init+0x148>)
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	491a      	ldr	r1, [pc, #104]	@ (8005490 <HAL_I2C_Init+0x140>)
 8005426:	400a      	ands	r2, r1
 8005428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	431a      	orrs	r2, r3
 8005434:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2101      	movs	r1, #1
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2241      	movs	r2, #65	@ 0x41
 800546e:	2120      	movs	r1, #32
 8005470:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2242      	movs	r2, #66	@ 0x42
 800547c:	2100      	movs	r1, #0
 800547e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b002      	add	sp, #8
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	f0ffffff 	.word	0xf0ffffff
 8005490:	ffff7fff 	.word	0xffff7fff
 8005494:	fffff7ff 	.word	0xfffff7ff
 8005498:	02008000 	.word	0x02008000

0800549c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800549c:	b5b0      	push	{r4, r5, r7, lr}
 800549e:	b08a      	sub	sp, #40	@ 0x28
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	0008      	movs	r0, r1
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	0019      	movs	r1, r3
 80054aa:	230a      	movs	r3, #10
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	1c02      	adds	r2, r0, #0
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	2308      	movs	r3, #8
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	1c0a      	adds	r2, r1, #0
 80054b8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2241      	movs	r2, #65	@ 0x41
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d000      	beq.n	80054cc <HAL_I2C_Master_Transmit_DMA+0x30>
 80054ca:	e0ff      	b.n	80056cc <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	2380      	movs	r3, #128	@ 0x80
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	401a      	ands	r2, r3
 80054d8:	2380      	movs	r3, #128	@ 0x80
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	429a      	cmp	r2, r3
 80054de:	d101      	bne.n	80054e4 <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
 80054e2:	e0f4      	b.n	80056ce <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2240      	movs	r2, #64	@ 0x40
 80054e8:	5c9b      	ldrb	r3, [r3, r2]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_I2C_Master_Transmit_DMA+0x56>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0ed      	b.n	80056ce <HAL_I2C_Master_Transmit_DMA+0x232>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2240      	movs	r2, #64	@ 0x40
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2241      	movs	r2, #65	@ 0x41
 80054fe:	2121      	movs	r1, #33	@ 0x21
 8005500:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2242      	movs	r2, #66	@ 0x42
 8005506:	2110      	movs	r1, #16
 8005508:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2208      	movs	r2, #8
 800551a:	18ba      	adds	r2, r7, r2
 800551c:	8812      	ldrh	r2, [r2, #0]
 800551e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a6d      	ldr	r2, [pc, #436]	@ (80056d8 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8005524:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a6c      	ldr	r2, [pc, #432]	@ (80056dc <HAL_I2C_Master_Transmit_DMA+0x240>)
 800552a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2bff      	cmp	r3, #255	@ 0xff
 8005534:	d906      	bls.n	8005544 <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	22ff      	movs	r2, #255	@ 0xff
 800553a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	045b      	lsls	r3, r3, #17
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e007      	b.n	8005554 <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800554e:	2380      	movs	r3, #128	@ 0x80
 8005550:	049b      	lsls	r3, r3, #18
 8005552:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01a      	beq.n	8005592 <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005576:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	d100      	bne.n	800559c <HAL_I2C_Master_Transmit_DMA+0x100>
 800559a:	e07c      	b.n	8005696 <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d025      	beq.n	80055f0 <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	4a4d      	ldr	r2, [pc, #308]	@ (80056e0 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80055aa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b0:	4a4c      	ldr	r2, [pc, #304]	@ (80056e4 <HAL_I2C_Master_Transmit_DMA+0x248>)
 80055b2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	2200      	movs	r2, #0
 80055c2:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80055d4:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80055da:	2517      	movs	r5, #23
 80055dc:	197c      	adds	r4, r7, r5
 80055de:	f7ff fad7 	bl	8004b90 <HAL_DMA_Start_IT>
 80055e2:	0003      	movs	r3, r0
 80055e4:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80055e6:	197b      	adds	r3, r7, r5
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d13f      	bne.n	800566e <HAL_I2C_Master_Transmit_DMA+0x1d2>
 80055ee:	e013      	b.n	8005618 <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2241      	movs	r2, #65	@ 0x41
 80055f4:	2120      	movs	r1, #32
 80055f6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2242      	movs	r2, #66	@ 0x42
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	2280      	movs	r2, #128	@ 0x80
 8005606:	431a      	orrs	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2240      	movs	r2, #64	@ 0x40
 8005610:	2100      	movs	r1, #0
 8005612:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e05a      	b.n	80056ce <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800561c:	b2db      	uxtb	r3, r3
 800561e:	3301      	adds	r3, #1
 8005620:	b2da      	uxtb	r2, r3
 8005622:	69fc      	ldr	r4, [r7, #28]
 8005624:	230a      	movs	r3, #10
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	8819      	ldrh	r1, [r3, #0]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	0023      	movs	r3, r4
 8005632:	f001 fd21 	bl	8007078 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2240      	movs	r2, #64	@ 0x40
 800564c:	2100      	movs	r1, #0
 800564e:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2110      	movs	r1, #16
 8005654:	0018      	movs	r0, r3
 8005656:	f001 fd49 	bl	80070ec <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2180      	movs	r1, #128	@ 0x80
 8005666:	01c9      	lsls	r1, r1, #7
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e02c      	b.n	80056c8 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2241      	movs	r2, #65	@ 0x41
 8005672:	2120      	movs	r1, #32
 8005674:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2242      	movs	r2, #66	@ 0x42
 800567a:	2100      	movs	r1, #0
 800567c:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	2210      	movs	r2, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2240      	movs	r2, #64	@ 0x40
 800568e:	2100      	movs	r1, #0
 8005690:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e01b      	b.n	80056ce <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a14      	ldr	r2, [pc, #80]	@ (80056ec <HAL_I2C_Master_Transmit_DMA+0x250>)
 800569a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	2380      	movs	r3, #128	@ 0x80
 80056a2:	049c      	lsls	r4, r3, #18
 80056a4:	230a      	movs	r3, #10
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	8819      	ldrh	r1, [r3, #0]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	4b0e      	ldr	r3, [pc, #56]	@ (80056e8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	0023      	movs	r3, r4
 80056b2:	f001 fce1 	bl	8007078 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2240      	movs	r2, #64	@ 0x40
 80056ba:	2100      	movs	r1, #0
 80056bc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2101      	movs	r1, #1
 80056c2:	0018      	movs	r0, r3
 80056c4:	f001 fd12 	bl	80070ec <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b008      	add	sp, #32
 80056d4:	bdb0      	pop	{r4, r5, r7, pc}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	ffff0000 	.word	0xffff0000
 80056dc:	08005e1d 	.word	0x08005e1d
 80056e0:	08006ec9 	.word	0x08006ec9
 80056e4:	08007009 	.word	0x08007009
 80056e8:	80002000 	.word	0x80002000
 80056ec:	080059b5 	.word	0x080059b5

080056f0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80056f0:	b5b0      	push	{r4, r5, r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	0008      	movs	r0, r1
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	0019      	movs	r1, r3
 80056fe:	230a      	movs	r3, #10
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	1c02      	adds	r2, r0, #0
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	2308      	movs	r3, #8
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	1c0a      	adds	r2, r1, #0
 800570c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2241      	movs	r2, #65	@ 0x41
 8005712:	5c9b      	ldrb	r3, [r3, r2]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b20      	cmp	r3, #32
 8005718:	d000      	beq.n	800571c <HAL_I2C_Master_Receive_DMA+0x2c>
 800571a:	e0dd      	b.n	80058d8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	2380      	movs	r3, #128	@ 0x80
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	401a      	ands	r2, r3
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	429a      	cmp	r2, r3
 800572e:	d101      	bne.n	8005734 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	e0d2      	b.n	80058da <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2240      	movs	r2, #64	@ 0x40
 8005738:	5c9b      	ldrb	r3, [r3, r2]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_I2C_Master_Receive_DMA+0x52>
 800573e:	2302      	movs	r3, #2
 8005740:	e0cb      	b.n	80058da <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2240      	movs	r2, #64	@ 0x40
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2241      	movs	r2, #65	@ 0x41
 800574e:	2122      	movs	r1, #34	@ 0x22
 8005750:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2242      	movs	r2, #66	@ 0x42
 8005756:	2110      	movs	r1, #16
 8005758:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2208      	movs	r2, #8
 800576a:	18ba      	adds	r2, r7, r2
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a5c      	ldr	r2, [pc, #368]	@ (80058e4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005774:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a5b      	ldr	r2, [pc, #364]	@ (80058e8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800577a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	2bff      	cmp	r3, #255	@ 0xff
 8005784:	d906      	bls.n	8005794 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	22ff      	movs	r2, #255	@ 0xff
 800578a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800578c:	2380      	movs	r3, #128	@ 0x80
 800578e:	045b      	lsls	r3, r3, #17
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e007      	b.n	80057a4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800579e:	2380      	movs	r3, #128	@ 0x80
 80057a0:	049b      	lsls	r3, r3, #18
 80057a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d100      	bne.n	80057ae <HAL_I2C_Master_Receive_DMA+0xbe>
 80057ac:	e078      	b.n	80058a0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d023      	beq.n	80057fe <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	4a4c      	ldr	r2, [pc, #304]	@ (80058ec <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80057bc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	4a4b      	ldr	r2, [pc, #300]	@ (80058f0 <HAL_I2C_Master_Receive_DMA+0x200>)
 80057c4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	2200      	movs	r2, #0
 80057d4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3324      	adds	r3, #36	@ 0x24
 80057e0:	0019      	movs	r1, r3
 80057e2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057e8:	2513      	movs	r5, #19
 80057ea:	197c      	adds	r4, r7, r5
 80057ec:	f7ff f9d0 	bl	8004b90 <HAL_DMA_Start_IT>
 80057f0:	0003      	movs	r3, r0
 80057f2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80057f4:	197b      	adds	r3, r7, r5
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d13d      	bne.n	8005878 <HAL_I2C_Master_Receive_DMA+0x188>
 80057fc:	e013      	b.n	8005826 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2241      	movs	r2, #65	@ 0x41
 8005802:	2120      	movs	r1, #32
 8005804:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2242      	movs	r2, #66	@ 0x42
 800580a:	2100      	movs	r1, #0
 800580c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	2280      	movs	r2, #128	@ 0x80
 8005814:	431a      	orrs	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2240      	movs	r2, #64	@ 0x40
 800581e:	2100      	movs	r1, #0
 8005820:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e059      	b.n	80058da <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582a:	b2da      	uxtb	r2, r3
 800582c:	697c      	ldr	r4, [r7, #20]
 800582e:	230a      	movs	r3, #10
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	8819      	ldrh	r1, [r3, #0]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	0023      	movs	r3, r4
 800583c:	f001 fc1c 	bl	8007078 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2240      	movs	r2, #64	@ 0x40
 8005856:	2100      	movs	r1, #0
 8005858:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2110      	movs	r1, #16
 800585e:	0018      	movs	r0, r3
 8005860:	f001 fc44 	bl	80070ec <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2180      	movs	r1, #128	@ 0x80
 8005870:	0209      	lsls	r1, r1, #8
 8005872:	430a      	orrs	r2, r1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e02d      	b.n	80058d4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2241      	movs	r2, #65	@ 0x41
 800587c:	2120      	movs	r1, #32
 800587e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2242      	movs	r2, #66	@ 0x42
 8005884:	2100      	movs	r1, #0
 8005886:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588c:	2210      	movs	r2, #16
 800588e:	431a      	orrs	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2240      	movs	r2, #64	@ 0x40
 8005898:	2100      	movs	r1, #0
 800589a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e01c      	b.n	80058da <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a15      	ldr	r2, [pc, #84]	@ (80058f8 <HAL_I2C_Master_Receive_DMA+0x208>)
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	2380      	movs	r3, #128	@ 0x80
 80058ae:	049c      	lsls	r4, r3, #18
 80058b0:	230a      	movs	r3, #10
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	8819      	ldrh	r1, [r3, #0]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	4b0e      	ldr	r3, [pc, #56]	@ (80058f4 <HAL_I2C_Master_Receive_DMA+0x204>)
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	0023      	movs	r3, r4
 80058be:	f001 fbdb 	bl	8007078 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2240      	movs	r2, #64	@ 0x40
 80058c6:	2100      	movs	r1, #0
 80058c8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2102      	movs	r1, #2
 80058ce:	0018      	movs	r0, r3
 80058d0:	f001 fc0c 	bl	80070ec <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b006      	add	sp, #24
 80058e0:	bdb0      	pop	{r4, r5, r7, pc}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	ffff0000 	.word	0xffff0000
 80058e8:	08005e1d 	.word	0x08005e1d
 80058ec:	08006f69 	.word	0x08006f69
 80058f0:	08007009 	.word	0x08007009
 80058f4:	80002400 	.word	0x80002400
 80058f8:	080059b5 	.word	0x080059b5

080058fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005904:	46c0      	nop			@ (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b002      	add	sp, #8
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005914:	46c0      	nop			@ (mov r8, r8)
 8005916:	46bd      	mov	sp, r7
 8005918:	b002      	add	sp, #8
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005924:	46c0      	nop			@ (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	0008      	movs	r0, r1
 8005936:	0011      	movs	r1, r2
 8005938:	1cfb      	adds	r3, r7, #3
 800593a:	1c02      	adds	r2, r0, #0
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	003b      	movs	r3, r7
 8005940:	1c0a      	adds	r2, r1, #0
 8005942:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005944:	46c0      	nop			@ (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005954:	46c0      	nop			@ (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005964:	46c0      	nop			@ (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005974:	46c0      	nop			@ (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005984:	46c0      	nop			@ (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	b002      	add	sp, #8
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005994:	46c0      	nop			@ (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2241      	movs	r2, #65	@ 0x41
 80059a8:	5c9b      	ldrb	r3, [r3, r2]
 80059aa:	b2db      	uxtb	r3, r3
}
 80059ac:	0018      	movs	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b089      	sub	sp, #36	@ 0x24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2240      	movs	r2, #64	@ 0x40
 80059c8:	5c9b      	ldrb	r3, [r3, r2]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <I2C_Master_ISR_IT+0x1e>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e11d      	b.n	8005c0e <I2C_Master_ISR_IT+0x25a>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2240      	movs	r2, #64	@ 0x40
 80059d6:	2101      	movs	r1, #1
 80059d8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2210      	movs	r2, #16
 80059de:	4013      	ands	r3, r2
 80059e0:	d012      	beq.n	8005a08 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2210      	movs	r2, #16
 80059e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059e8:	d00e      	beq.n	8005a08 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2210      	movs	r2, #16
 80059f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f6:	2204      	movs	r2, #4
 80059f8:	431a      	orrs	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f001 fa3e 	bl	8006e82 <I2C_Flush_TXDR>
 8005a06:	e0ef      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d021      	beq.n	8005a54 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2204      	movs	r2, #4
 8005a14:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a16:	d01d      	beq.n	8005a54 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	4393      	bics	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a52:	e0c9      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2240      	movs	r2, #64	@ 0x40
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d126      	bne.n	8005aaa <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005a62:	d022      	beq.n	8005aaa <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a6a:	d01e      	beq.n	8005aaa <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d100      	bne.n	8005a78 <I2C_Master_ISR_IT+0xc4>
 8005a76:	e0b7      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005aa8:	e09e      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2280      	movs	r2, #128	@ 0x80
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d100      	bne.n	8005ab4 <I2C_Master_ISR_IT+0x100>
 8005ab2:	e069      	b.n	8005b88 <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2240      	movs	r2, #64	@ 0x40
 8005ab8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005aba:	d065      	beq.n	8005b88 <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04a      	beq.n	8005b5c <I2C_Master_ISR_IT+0x1a8>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d146      	bne.n	8005b5c <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	2112      	movs	r1, #18
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	0592      	lsls	r2, r2, #22
 8005adc:	0d92      	lsrs	r2, r2, #22
 8005ade:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2bff      	cmp	r3, #255	@ 0xff
 8005ae8:	d910      	bls.n	8005b0c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	22ff      	movs	r2, #255	@ 0xff
 8005aee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	2380      	movs	r3, #128	@ 0x80
 8005af8:	045c      	lsls	r4, r3, #17
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	8819      	ldrh	r1, [r3, #0]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	2300      	movs	r3, #0
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	0023      	movs	r3, r4
 8005b06:	f001 fab7 	bl	8007078 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0a:	e03c      	b.n	8005b86 <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c18 <I2C_Master_ISR_IT+0x264>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b24:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b2a:	2312      	movs	r3, #18
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	8819      	ldrh	r1, [r3, #0]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	2300      	movs	r3, #0
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	0023      	movs	r3, r4
 8005b38:	f001 fa9e 	bl	8007078 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b3c:	e023      	b.n	8005b86 <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	2380      	movs	r3, #128	@ 0x80
 8005b46:	049c      	lsls	r4, r3, #18
 8005b48:	2312      	movs	r3, #18
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	8819      	ldrh	r1, [r3, #0]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	2300      	movs	r3, #0
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	0023      	movs	r3, r4
 8005b56:	f001 fa8f 	bl	8007078 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b5a:	e014      	b.n	8005b86 <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	2380      	movs	r3, #128	@ 0x80
 8005b64:	049b      	lsls	r3, r3, #18
 8005b66:	401a      	ands	r2, r3
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	049b      	lsls	r3, r3, #18
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d004      	beq.n	8005b7a <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 fd06 	bl	8006584 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b78:	e036      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2140      	movs	r1, #64	@ 0x40
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f001 f854 	bl	8006c2c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b84:	e030      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
 8005b86:	e02f      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2240      	movs	r2, #64	@ 0x40
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d02b      	beq.n	8005be8 <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2240      	movs	r2, #64	@ 0x40
 8005b94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b96:	d027      	beq.n	8005be8 <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11d      	bne.n	8005bde <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	2380      	movs	r3, #128	@ 0x80
 8005baa:	049b      	lsls	r3, r3, #18
 8005bac:	401a      	ands	r2, r3
 8005bae:	2380      	movs	r3, #128	@ 0x80
 8005bb0:	049b      	lsls	r3, r3, #18
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d018      	beq.n	8005be8 <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	4a17      	ldr	r2, [pc, #92]	@ (8005c18 <I2C_Master_ISR_IT+0x264>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d109      	bne.n	8005bd4 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2180      	movs	r1, #128	@ 0x80
 8005bcc:	01c9      	lsls	r1, r1, #7
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e009      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f000 fcd4 	bl	8006584 <I2C_ITMasterSeqCplt>
 8005bdc:	e004      	b.n	8005be8 <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2140      	movs	r1, #64	@ 0x40
 8005be2:	0018      	movs	r0, r3
 8005be4:	f001 f822 	bl	8006c2c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2220      	movs	r2, #32
 8005bec:	4013      	ands	r3, r2
 8005bee:	d009      	beq.n	8005c04 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bf6:	d005      	beq.n	8005c04 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	0011      	movs	r1, r2
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f000 fd66 	bl	80066d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	2100      	movs	r1, #0
 8005c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	0018      	movs	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b007      	add	sp, #28
 8005c14:	bd90      	pop	{r4, r7, pc}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	ffff0000 	.word	0xffff0000

08005c1c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2240      	movs	r2, #64	@ 0x40
 8005c36:	5c9b      	ldrb	r3, [r3, r2]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <I2C_Slave_ISR_IT+0x24>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e0e7      	b.n	8005e10 <I2C_Slave_ISR_IT+0x1f4>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2240      	movs	r2, #64	@ 0x40
 8005c44:	2101      	movs	r1, #1
 8005c46:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d00a      	beq.n	8005c66 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c56:	d006      	beq.n	8005c66 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0011      	movs	r1, r2
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 fe04 	bl	800686c <I2C_ITSlaveCplt>
 8005c64:	e0cf      	b.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d052      	beq.n	8005d14 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2210      	movs	r2, #16
 8005c72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c74:	d04e      	beq.n	8005d14 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d12d      	bne.n	8005cdc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2241      	movs	r2, #65	@ 0x41
 8005c84:	5c9b      	ldrb	r3, [r3, r2]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b28      	cmp	r3, #40	@ 0x28
 8005c8a:	d10b      	bne.n	8005ca4 <I2C_Slave_ISR_IT+0x88>
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	2380      	movs	r3, #128	@ 0x80
 8005c90:	049b      	lsls	r3, r3, #18
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d106      	bne.n	8005ca4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	0011      	movs	r1, r2
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f000 ff6d 	bl	8006b7c <I2C_ITListenCplt>
 8005ca2:	e036      	b.n	8005d12 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2241      	movs	r2, #65	@ 0x41
 8005ca8:	5c9b      	ldrb	r3, [r3, r2]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b29      	cmp	r3, #41	@ 0x29
 8005cae:	d110      	bne.n	8005cd2 <I2C_Slave_ISR_IT+0xb6>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4a59      	ldr	r2, [pc, #356]	@ (8005e18 <I2C_Slave_ISR_IT+0x1fc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00c      	beq.n	8005cd2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f001 f8dd 	bl	8006e82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 fc9c 	bl	8006608 <I2C_ITSlaveSeqCplt>
 8005cd0:	e01f      	b.n	8005d12 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2210      	movs	r2, #16
 8005cd8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005cda:	e091      	b.n	8005e00 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	2204      	movs	r2, #4
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <I2C_Slave_ISR_IT+0xe6>
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	045b      	lsls	r3, r3, #17
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d000      	beq.n	8005d02 <I2C_Slave_ISR_IT+0xe6>
 8005d00:	e07e      	b.n	8005e00 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0011      	movs	r1, r2
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 ff8e 	bl	8006c2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d10:	e076      	b.n	8005e00 <I2C_Slave_ISR_IT+0x1e4>
 8005d12:	e075      	b.n	8005e00 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2204      	movs	r2, #4
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d02f      	beq.n	8005d7c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d22:	d02b      	beq.n	8005d7c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d14c      	bne.n	8005e04 <I2C_Slave_ISR_IT+0x1e8>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e18 <I2C_Slave_ISR_IT+0x1fc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d048      	beq.n	8005e04 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	0018      	movs	r0, r3
 8005d76:	f000 fc47 	bl	8006608 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d7a:	e043      	b.n	8005e04 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2208      	movs	r2, #8
 8005d80:	4013      	ands	r3, r2
 8005d82:	d00a      	beq.n	8005d9a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2208      	movs	r2, #8
 8005d88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d8a:	d006      	beq.n	8005d9a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	0011      	movs	r1, r2
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 fb52 	bl	800643c <I2C_ITAddrCplt>
 8005d98:	e035      	b.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d031      	beq.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005da8:	d02d      	beq.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d018      	beq.n	8005de6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005de4:	e00f      	b.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	2380      	movs	r3, #128	@ 0x80
 8005dea:	045b      	lsls	r3, r3, #17
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d002      	beq.n	8005df6 <I2C_Slave_ISR_IT+0x1da>
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d107      	bne.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f000 fc05 	bl	8006608 <I2C_ITSlaveSeqCplt>
 8005dfe:	e002      	b.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8005e00:	46c0      	nop			@ (mov r8, r8)
 8005e02:	e000      	b.n	8005e06 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8005e04:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2240      	movs	r2, #64	@ 0x40
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	0018      	movs	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b006      	add	sp, #24
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	ffff0000 	.word	0xffff0000

08005e1c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b089      	sub	sp, #36	@ 0x24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2240      	movs	r2, #64	@ 0x40
 8005e2c:	5c9b      	ldrb	r3, [r3, r2]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <I2C_Master_ISR_DMA+0x1a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0e7      	b.n	8006006 <I2C_Master_ISR_DMA+0x1ea>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2240      	movs	r2, #64	@ 0x40
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2210      	movs	r2, #16
 8005e42:	4013      	ands	r3, r2
 8005e44:	d017      	beq.n	8005e76 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2210      	movs	r2, #16
 8005e4a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e4c:	d013      	beq.n	8005e76 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2210      	movs	r2, #16
 8005e54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2120      	movs	r1, #32
 8005e66:	0018      	movs	r0, r3
 8005e68:	f001 f940 	bl	80070ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f001 f807 	bl	8006e82 <I2C_Flush_TXDR>
 8005e74:	e0c2      	b.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2280      	movs	r2, #128	@ 0x80
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d100      	bne.n	8005e80 <I2C_Master_ISR_DMA+0x64>
 8005e7e:	e07c      	b.n	8005f7a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2240      	movs	r2, #64	@ 0x40
 8005e84:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e86:	d100      	bne.n	8005e8a <I2C_Master_ISR_DMA+0x6e>
 8005e88:	e077      	b.n	8005f7a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2140      	movs	r1, #64	@ 0x40
 8005e96:	438a      	bics	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d055      	beq.n	8005f50 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	2312      	movs	r3, #18
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	0592      	lsls	r2, r2, #22
 8005eb2:	0d92      	lsrs	r2, r2, #22
 8005eb4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2bff      	cmp	r3, #255	@ 0xff
 8005ebe:	d906      	bls.n	8005ece <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	22ff      	movs	r2, #255	@ 0xff
 8005ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005ec6:	2380      	movs	r3, #128	@ 0x80
 8005ec8:	045b      	lsls	r3, r3, #17
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e010      	b.n	8005ef0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	4a4c      	ldr	r2, [pc, #304]	@ (8006010 <I2C_Master_ISR_DMA+0x1f4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d003      	beq.n	8005eea <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e002      	b.n	8005ef0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005eea:	2380      	movs	r3, #128	@ 0x80
 8005eec:	049b      	lsls	r3, r3, #18
 8005eee:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	697c      	ldr	r4, [r7, #20]
 8005ef8:	2312      	movs	r3, #18
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	8819      	ldrh	r1, [r3, #0]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	2300      	movs	r3, #0
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	0023      	movs	r3, r4
 8005f06:	f001 f8b7 	bl	8007078 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2241      	movs	r2, #65	@ 0x41
 8005f20:	5c9b      	ldrb	r3, [r3, r2]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b22      	cmp	r3, #34	@ 0x22
 8005f26:	d109      	bne.n	8005f3c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2180      	movs	r1, #128	@ 0x80
 8005f34:	0209      	lsls	r1, r1, #8
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f3a:	e05f      	b.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2180      	movs	r1, #128	@ 0x80
 8005f48:	01c9      	lsls	r1, r1, #7
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f4e:	e055      	b.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	2380      	movs	r3, #128	@ 0x80
 8005f58:	049b      	lsls	r3, r3, #18
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	2380      	movs	r3, #128	@ 0x80
 8005f5e:	049b      	lsls	r3, r3, #18
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d004      	beq.n	8005f6e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	0018      	movs	r0, r3
 8005f68:	f000 fb0c 	bl	8006584 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005f6c:	e046      	b.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2140      	movs	r1, #64	@ 0x40
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 fe5a 	bl	8006c2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f78:	e040      	b.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2240      	movs	r2, #64	@ 0x40
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d02c      	beq.n	8005fdc <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2240      	movs	r2, #64	@ 0x40
 8005f86:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f88:	d028      	beq.n	8005fdc <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11d      	bne.n	8005fd0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	2380      	movs	r3, #128	@ 0x80
 8005f9c:	049b      	lsls	r3, r3, #18
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	049b      	lsls	r3, r3, #18
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d028      	beq.n	8005ffa <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fac:	4a18      	ldr	r2, [pc, #96]	@ (8006010 <I2C_Master_ISR_DMA+0x1f4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d109      	bne.n	8005fc6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2180      	movs	r1, #128	@ 0x80
 8005fbe:	01c9      	lsls	r1, r1, #7
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005fc4:	e019      	b.n	8005ffa <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 fadb 	bl	8006584 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005fce:	e014      	b.n	8005ffa <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2140      	movs	r1, #64	@ 0x40
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 fe29 	bl	8006c2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005fda:	e00e      	b.n	8005ffa <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fea:	d007      	beq.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	0011      	movs	r1, r2
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 fb6c 	bl	80066d0 <I2C_ITMasterCplt>
 8005ff8:	e000      	b.n	8005ffc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8005ffa:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2240      	movs	r2, #64	@ 0x40
 8006000:	2100      	movs	r1, #0
 8006002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b007      	add	sp, #28
 800600c:	bd90      	pop	{r4, r7, pc}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	ffff0000 	.word	0xffff0000

08006014 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b089      	sub	sp, #36	@ 0x24
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006020:	4b90      	ldr	r3, [pc, #576]	@ (8006264 <I2C_Mem_ISR_DMA+0x250>)
 8006022:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2240      	movs	r2, #64	@ 0x40
 8006028:	5c9b      	ldrb	r3, [r3, r2]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <I2C_Mem_ISR_DMA+0x1e>
 800602e:	2302      	movs	r3, #2
 8006030:	e113      	b.n	800625a <I2C_Mem_ISR_DMA+0x246>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2240      	movs	r2, #64	@ 0x40
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2210      	movs	r2, #16
 800603e:	4013      	ands	r3, r2
 8006040:	d017      	beq.n	8006072 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2210      	movs	r2, #16
 8006046:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006048:	d013      	beq.n	8006072 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2210      	movs	r2, #16
 8006050:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006056:	2204      	movs	r2, #4
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2120      	movs	r1, #32
 8006062:	0018      	movs	r0, r3
 8006064:	f001 f842 	bl	80070ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	0018      	movs	r0, r3
 800606c:	f000 ff09 	bl	8006e82 <I2C_Flush_TXDR>
 8006070:	e0ee      	b.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2202      	movs	r2, #2
 8006076:	4013      	ands	r3, r2
 8006078:	d00d      	beq.n	8006096 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2202      	movs	r2, #2
 800607e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006080:	d009      	beq.n	8006096 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	4252      	negs	r2, r2
 8006092:	651a      	str	r2, [r3, #80]	@ 0x50
 8006094:	e0dc      	b.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2280      	movs	r2, #128	@ 0x80
 800609a:	4013      	ands	r3, r2
 800609c:	d063      	beq.n	8006166 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2240      	movs	r2, #64	@ 0x40
 80060a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80060a4:	d05f      	beq.n	8006166 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2101      	movs	r1, #1
 80060aa:	0018      	movs	r0, r3
 80060ac:	f001 f8a8 	bl	8007200 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2110      	movs	r1, #16
 80060b4:	0018      	movs	r0, r3
 80060b6:	f001 f819 	bl	80070ec <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d04a      	beq.n	800615a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2bff      	cmp	r3, #255	@ 0xff
 80060cc:	d910      	bls.n	80060f0 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	22ff      	movs	r2, #255	@ 0xff
 80060d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d8:	b299      	uxth	r1, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	2380      	movs	r3, #128	@ 0x80
 80060e2:	045b      	lsls	r3, r3, #17
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	2400      	movs	r4, #0
 80060e8:	9400      	str	r4, [sp, #0]
 80060ea:	f000 ffc5 	bl	8007078 <I2C_TransferConfig>
 80060ee:	e011      	b.n	8006114 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fe:	b299      	uxth	r1, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006104:	b2da      	uxtb	r2, r3
 8006106:	2380      	movs	r3, #128	@ 0x80
 8006108:	049b      	lsls	r3, r3, #18
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	2400      	movs	r4, #0
 800610e:	9400      	str	r4, [sp, #0]
 8006110:	f000 ffb2 	bl	8007078 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2241      	movs	r2, #65	@ 0x41
 800612a:	5c9b      	ldrb	r3, [r3, r2]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b22      	cmp	r3, #34	@ 0x22
 8006130:	d109      	bne.n	8006146 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2180      	movs	r1, #128	@ 0x80
 800613e:	0209      	lsls	r1, r1, #8
 8006140:	430a      	orrs	r2, r1
 8006142:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006144:	e084      	b.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2180      	movs	r1, #128	@ 0x80
 8006152:	01c9      	lsls	r1, r1, #7
 8006154:	430a      	orrs	r2, r1
 8006156:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006158:	e07a      	b.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2140      	movs	r1, #64	@ 0x40
 800615e:	0018      	movs	r0, r3
 8006160:	f000 fd64 	bl	8006c2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006164:	e074      	b.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2240      	movs	r2, #64	@ 0x40
 800616a:	4013      	ands	r3, r2
 800616c:	d062      	beq.n	8006234 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2240      	movs	r2, #64	@ 0x40
 8006172:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006174:	d05e      	beq.n	8006234 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2101      	movs	r1, #1
 800617a:	0018      	movs	r0, r3
 800617c:	f001 f840 	bl	8007200 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2110      	movs	r1, #16
 8006184:	0018      	movs	r0, r3
 8006186:	f000 ffb1 	bl	80070ec <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2241      	movs	r2, #65	@ 0x41
 800618e:	5c9b      	ldrb	r3, [r3, r2]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b22      	cmp	r3, #34	@ 0x22
 8006194:	d101      	bne.n	800619a <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8006196:	4b34      	ldr	r3, [pc, #208]	@ (8006268 <I2C_Mem_ISR_DMA+0x254>)
 8006198:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2bff      	cmp	r3, #255	@ 0xff
 80061a2:	d911      	bls.n	80061c8 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	22ff      	movs	r2, #255	@ 0xff
 80061a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ae:	b299      	uxth	r1, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	045c      	lsls	r4, r3, #17
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	0023      	movs	r3, r4
 80061c2:	f000 ff59 	bl	8007078 <I2C_TransferConfig>
 80061c6:	e012      	b.n	80061ee <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d6:	b299      	uxth	r1, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	2380      	movs	r3, #128	@ 0x80
 80061e0:	049c      	lsls	r4, r3, #18
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	0023      	movs	r3, r4
 80061ea:	f000 ff45 	bl	8007078 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2241      	movs	r2, #65	@ 0x41
 8006204:	5c9b      	ldrb	r3, [r3, r2]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b22      	cmp	r3, #34	@ 0x22
 800620a:	d109      	bne.n	8006220 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2180      	movs	r1, #128	@ 0x80
 8006218:	0209      	lsls	r1, r1, #8
 800621a:	430a      	orrs	r2, r1
 800621c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800621e:	e017      	b.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2180      	movs	r1, #128	@ 0x80
 800622c:	01c9      	lsls	r1, r1, #7
 800622e:	430a      	orrs	r2, r1
 8006230:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006232:	e00d      	b.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2220      	movs	r2, #32
 8006238:	4013      	ands	r3, r2
 800623a:	d009      	beq.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006242:	d005      	beq.n	8006250 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	0011      	movs	r1, r2
 800624a:	0018      	movs	r0, r3
 800624c:	f000 fa40 	bl	80066d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2240      	movs	r2, #64	@ 0x40
 8006254:	2100      	movs	r1, #0
 8006256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	b007      	add	sp, #28
 8006260:	bd90      	pop	{r4, r7, pc}
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	80002000 	.word	0x80002000
 8006268:	80002400 	.word	0x80002400

0800626c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2240      	movs	r2, #64	@ 0x40
 8006286:	5c9b      	ldrb	r3, [r3, r2]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <I2C_Slave_ISR_DMA+0x24>
 800628c:	2302      	movs	r3, #2
 800628e:	e0ce      	b.n	800642e <I2C_Slave_ISR_DMA+0x1c2>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2240      	movs	r2, #64	@ 0x40
 8006294:	2101      	movs	r1, #1
 8006296:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2220      	movs	r2, #32
 800629c:	4013      	ands	r3, r2
 800629e:	d00a      	beq.n	80062b6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062a6:	d006      	beq.n	80062b6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 fadc 	bl	800686c <I2C_ITSlaveCplt>
 80062b4:	e0b6      	b.n	8006424 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2210      	movs	r2, #16
 80062ba:	4013      	ands	r3, r2
 80062bc:	d100      	bne.n	80062c0 <I2C_Slave_ISR_DMA+0x54>
 80062be:	e0a3      	b.n	8006408 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2210      	movs	r2, #16
 80062c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062c6:	d100      	bne.n	80062ca <I2C_Slave_ISR_DMA+0x5e>
 80062c8:	e09e      	b.n	8006408 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	2380      	movs	r3, #128	@ 0x80
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	4013      	ands	r3, r2
 80062d2:	d105      	bne.n	80062e0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	2380      	movs	r3, #128	@ 0x80
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062dc:	d100      	bne.n	80062e0 <I2C_Slave_ISR_DMA+0x74>
 80062de:	e08c      	b.n	80063fa <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	2380      	movs	r3, #128	@ 0x80
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	4013      	ands	r3, r2
 80062f0:	d007      	beq.n	8006302 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80062fe:	2301      	movs	r3, #1
 8006300:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00c      	beq.n	8006324 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	2380      	movs	r3, #128	@ 0x80
 800630e:	01db      	lsls	r3, r3, #7
 8006310:	4013      	ands	r3, r2
 8006312:	d007      	beq.n	8006324 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8006320:	2301      	movs	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d12d      	bne.n	8006386 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2241      	movs	r2, #65	@ 0x41
 800632e:	5c9b      	ldrb	r3, [r3, r2]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b28      	cmp	r3, #40	@ 0x28
 8006334:	d10b      	bne.n	800634e <I2C_Slave_ISR_DMA+0xe2>
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	2380      	movs	r3, #128	@ 0x80
 800633a:	049b      	lsls	r3, r3, #18
 800633c:	429a      	cmp	r2, r3
 800633e:	d106      	bne.n	800634e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	0011      	movs	r1, r2
 8006346:	0018      	movs	r0, r3
 8006348:	f000 fc18 	bl	8006b7c <I2C_ITListenCplt>
 800634c:	e054      	b.n	80063f8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2241      	movs	r2, #65	@ 0x41
 8006352:	5c9b      	ldrb	r3, [r3, r2]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b29      	cmp	r3, #41	@ 0x29
 8006358:	d110      	bne.n	800637c <I2C_Slave_ISR_DMA+0x110>
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	4a36      	ldr	r2, [pc, #216]	@ (8006438 <I2C_Slave_ISR_DMA+0x1cc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00c      	beq.n	800637c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2210      	movs	r2, #16
 8006368:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	0018      	movs	r0, r3
 800636e:	f000 fd88 	bl	8006e82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0018      	movs	r0, r3
 8006376:	f000 f947 	bl	8006608 <I2C_ITSlaveSeqCplt>
 800637a:	e03d      	b.n	80063f8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2210      	movs	r2, #16
 8006382:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006384:	e03e      	b.n	8006404 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2210      	movs	r2, #16
 800638c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	2204      	movs	r2, #4
 8006394:	431a      	orrs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800639a:	2317      	movs	r3, #23
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	2141      	movs	r1, #65	@ 0x41
 80063a2:	5c52      	ldrb	r2, [r2, r1]
 80063a4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <I2C_Slave_ISR_DMA+0x14a>
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	2380      	movs	r3, #128	@ 0x80
 80063b0:	045b      	lsls	r3, r3, #17
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d126      	bne.n	8006404 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063b6:	2217      	movs	r2, #23
 80063b8:	18bb      	adds	r3, r7, r2
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b21      	cmp	r3, #33	@ 0x21
 80063be:	d003      	beq.n	80063c8 <I2C_Slave_ISR_DMA+0x15c>
 80063c0:	18bb      	adds	r3, r7, r2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b29      	cmp	r3, #41	@ 0x29
 80063c6:	d103      	bne.n	80063d0 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2221      	movs	r2, #33	@ 0x21
 80063cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80063ce:	e00b      	b.n	80063e8 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063d0:	2217      	movs	r2, #23
 80063d2:	18bb      	adds	r3, r7, r2
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b22      	cmp	r3, #34	@ 0x22
 80063d8:	d003      	beq.n	80063e2 <I2C_Slave_ISR_DMA+0x176>
 80063da:	18bb      	adds	r3, r7, r2
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e0:	d102      	bne.n	80063e8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2222      	movs	r2, #34	@ 0x22
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	0011      	movs	r1, r2
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 fc1b 	bl	8006c2c <I2C_ITError>
      if (treatdmanack == 1U)
 80063f6:	e005      	b.n	8006404 <I2C_Slave_ISR_DMA+0x198>
 80063f8:	e004      	b.n	8006404 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2210      	movs	r2, #16
 8006400:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006402:	e00f      	b.n	8006424 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8006404:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006406:	e00d      	b.n	8006424 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2208      	movs	r2, #8
 800640c:	4013      	ands	r3, r2
 800640e:	d009      	beq.n	8006424 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2208      	movs	r2, #8
 8006414:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006416:	d005      	beq.n	8006424 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	0011      	movs	r1, r2
 800641e:	0018      	movs	r0, r3
 8006420:	f000 f80c 	bl	800643c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2240      	movs	r2, #64	@ 0x40
 8006428:	2100      	movs	r1, #0
 800642a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	0018      	movs	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	b008      	add	sp, #32
 8006434:	bd80      	pop	{r7, pc}
 8006436:	46c0      	nop			@ (mov r8, r8)
 8006438:	ffff0000 	.word	0xffff0000

0800643c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2241      	movs	r2, #65	@ 0x41
 800644a:	5c9b      	ldrb	r3, [r3, r2]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	001a      	movs	r2, r3
 8006450:	2328      	movs	r3, #40	@ 0x28
 8006452:	4013      	ands	r3, r2
 8006454:	2b28      	cmp	r3, #40	@ 0x28
 8006456:	d000      	beq.n	800645a <I2C_ITAddrCplt+0x1e>
 8006458:	e088      	b.n	800656c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	b2da      	uxtb	r2, r3
 8006464:	250f      	movs	r5, #15
 8006466:	197b      	adds	r3, r7, r5
 8006468:	2101      	movs	r1, #1
 800646a:	400a      	ands	r2, r1
 800646c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	b29a      	uxth	r2, r3
 8006478:	200c      	movs	r0, #12
 800647a:	183b      	adds	r3, r7, r0
 800647c:	21fe      	movs	r1, #254	@ 0xfe
 800647e:	400a      	ands	r2, r1
 8006480:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	b29a      	uxth	r2, r3
 800648a:	240a      	movs	r4, #10
 800648c:	193b      	adds	r3, r7, r4
 800648e:	0592      	lsls	r2, r2, #22
 8006490:	0d92      	lsrs	r2, r2, #22
 8006492:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	b29a      	uxth	r2, r3
 800649c:	2308      	movs	r3, #8
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	21fe      	movs	r1, #254	@ 0xfe
 80064a2:	400a      	ands	r2, r1
 80064a4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d148      	bne.n	8006540 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80064ae:	0021      	movs	r1, r4
 80064b0:	187b      	adds	r3, r7, r1
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	183b      	adds	r3, r7, r0
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	4053      	eors	r3, r2
 80064be:	b29b      	uxth	r3, r3
 80064c0:	001a      	movs	r2, r3
 80064c2:	2306      	movs	r3, #6
 80064c4:	4013      	ands	r3, r2
 80064c6:	d120      	bne.n	800650a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80064c8:	183b      	adds	r3, r7, r0
 80064ca:	187a      	adds	r2, r7, r1
 80064cc:	8812      	ldrh	r2, [r2, #0]
 80064ce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d14c      	bne.n	800657c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2208      	movs	r2, #8
 80064ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2240      	movs	r2, #64	@ 0x40
 80064f4:	2100      	movs	r1, #0
 80064f6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064f8:	183b      	adds	r3, r7, r0
 80064fa:	881a      	ldrh	r2, [r3, #0]
 80064fc:	197b      	adds	r3, r7, r5
 80064fe:	7819      	ldrb	r1, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	0018      	movs	r0, r3
 8006504:	f7ff fa12 	bl	800592c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006508:	e038      	b.n	800657c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800650a:	240c      	movs	r4, #12
 800650c:	193b      	adds	r3, r7, r4
 800650e:	2208      	movs	r2, #8
 8006510:	18ba      	adds	r2, r7, r2
 8006512:	8812      	ldrh	r2, [r2, #0]
 8006514:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	021a      	lsls	r2, r3, #8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	0011      	movs	r1, r2
 800651e:	0018      	movs	r0, r3
 8006520:	f000 fe6e 	bl	8007200 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2240      	movs	r2, #64	@ 0x40
 8006528:	2100      	movs	r1, #0
 800652a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800652c:	193b      	adds	r3, r7, r4
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	230f      	movs	r3, #15
 8006532:	18fb      	adds	r3, r7, r3
 8006534:	7819      	ldrb	r1, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	0018      	movs	r0, r3
 800653a:	f7ff f9f7 	bl	800592c <HAL_I2C_AddrCallback>
}
 800653e:	e01d      	b.n	800657c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006540:	2380      	movs	r3, #128	@ 0x80
 8006542:	021a      	lsls	r2, r3, #8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	0011      	movs	r1, r2
 8006548:	0018      	movs	r0, r3
 800654a:	f000 fe59 	bl	8007200 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2240      	movs	r2, #64	@ 0x40
 8006552:	2100      	movs	r1, #0
 8006554:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006556:	230c      	movs	r3, #12
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	230f      	movs	r3, #15
 800655e:	18fb      	adds	r3, r7, r3
 8006560:	7819      	ldrb	r1, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f7ff f9e1 	bl	800592c <HAL_I2C_AddrCallback>
}
 800656a:	e007      	b.n	800657c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2240      	movs	r2, #64	@ 0x40
 8006578:	2100      	movs	r1, #0
 800657a:	5499      	strb	r1, [r3, r2]
}
 800657c:	46c0      	nop			@ (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bdb0      	pop	{r4, r5, r7, pc}

08006584 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2242      	movs	r2, #66	@ 0x42
 8006590:	2100      	movs	r1, #0
 8006592:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2241      	movs	r2, #65	@ 0x41
 8006598:	5c9b      	ldrb	r3, [r3, r2]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b21      	cmp	r3, #33	@ 0x21
 800659e:	d117      	bne.n	80065d0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2241      	movs	r2, #65	@ 0x41
 80065a4:	2120      	movs	r1, #32
 80065a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2211      	movs	r2, #17
 80065ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2101      	movs	r1, #1
 80065b8:	0018      	movs	r0, r3
 80065ba:	f000 fe21 	bl	8007200 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2240      	movs	r2, #64	@ 0x40
 80065c2:	2100      	movs	r1, #0
 80065c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7ff f997 	bl	80058fc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065ce:	e016      	b.n	80065fe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2241      	movs	r2, #65	@ 0x41
 80065d4:	2120      	movs	r1, #32
 80065d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2212      	movs	r2, #18
 80065dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2102      	movs	r1, #2
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 fe09 	bl	8007200 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2240      	movs	r2, #64	@ 0x40
 80065f2:	2100      	movs	r1, #0
 80065f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f7fc f86d 	bl	80026d8 <HAL_I2C_MasterRxCpltCallback>
}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	46bd      	mov	sp, r7
 8006602:	b002      	add	sp, #8
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2242      	movs	r2, #66	@ 0x42
 800661c:	2100      	movs	r1, #0
 800661e:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	2380      	movs	r3, #128	@ 0x80
 8006624:	01db      	lsls	r3, r3, #7
 8006626:	4013      	ands	r3, r2
 8006628:	d008      	beq.n	800663c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4924      	ldr	r1, [pc, #144]	@ (80066c8 <I2C_ITSlaveSeqCplt+0xc0>)
 8006636:	400a      	ands	r2, r1
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	e00c      	b.n	8006656 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	2380      	movs	r3, #128	@ 0x80
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	4013      	ands	r3, r2
 8006644:	d007      	beq.n	8006656 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	491e      	ldr	r1, [pc, #120]	@ (80066cc <I2C_ITSlaveSeqCplt+0xc4>)
 8006652:	400a      	ands	r2, r1
 8006654:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2241      	movs	r2, #65	@ 0x41
 800665a:	5c9b      	ldrb	r3, [r3, r2]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b29      	cmp	r3, #41	@ 0x29
 8006660:	d114      	bne.n	800668c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2241      	movs	r2, #65	@ 0x41
 8006666:	2128      	movs	r1, #40	@ 0x28
 8006668:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2221      	movs	r2, #33	@ 0x21
 800666e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2101      	movs	r1, #1
 8006674:	0018      	movs	r0, r3
 8006676:	f000 fdc3 	bl	8007200 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2240      	movs	r2, #64	@ 0x40
 800667e:	2100      	movs	r1, #0
 8006680:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0018      	movs	r0, r3
 8006686:	f7ff f941 	bl	800590c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800668a:	e019      	b.n	80066c0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2241      	movs	r2, #65	@ 0x41
 8006690:	5c9b      	ldrb	r3, [r3, r2]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b2a      	cmp	r3, #42	@ 0x2a
 8006696:	d113      	bne.n	80066c0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2241      	movs	r2, #65	@ 0x41
 800669c:	2128      	movs	r1, #40	@ 0x28
 800669e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2222      	movs	r2, #34	@ 0x22
 80066a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2102      	movs	r1, #2
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 fda8 	bl	8007200 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2240      	movs	r2, #64	@ 0x40
 80066b4:	2100      	movs	r1, #0
 80066b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7ff f92e 	bl	800591c <HAL_I2C_SlaveRxCpltCallback>
}
 80066c0:	46c0      	nop			@ (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b004      	add	sp, #16
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	ffffbfff 	.word	0xffffbfff
 80066cc:	ffff7fff 	.word	0xffff7fff

080066d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2220      	movs	r2, #32
 80066e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2241      	movs	r2, #65	@ 0x41
 80066ea:	5c9b      	ldrb	r3, [r3, r2]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b21      	cmp	r3, #33	@ 0x21
 80066f0:	d108      	bne.n	8006704 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2101      	movs	r1, #1
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 fd82 	bl	8007200 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2211      	movs	r2, #17
 8006700:	631a      	str	r2, [r3, #48]	@ 0x30
 8006702:	e00d      	b.n	8006720 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2241      	movs	r2, #65	@ 0x41
 8006708:	5c9b      	ldrb	r3, [r3, r2]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b22      	cmp	r3, #34	@ 0x22
 800670e:	d107      	bne.n	8006720 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2102      	movs	r1, #2
 8006714:	0018      	movs	r0, r3
 8006716:	f000 fd73 	bl	8007200 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2212      	movs	r2, #18
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	494e      	ldr	r1, [pc, #312]	@ (8006864 <I2C_ITMasterCplt+0x194>)
 800672c:	400a      	ands	r2, r1
 800672e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a4b      	ldr	r2, [pc, #300]	@ (8006868 <I2C_ITMasterCplt+0x198>)
 800673a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2210      	movs	r2, #16
 8006740:	4013      	ands	r3, r2
 8006742:	d009      	beq.n	8006758 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2210      	movs	r2, #16
 800674a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006750:	2204      	movs	r2, #4
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2241      	movs	r2, #65	@ 0x41
 800675c:	5c9b      	ldrb	r3, [r3, r2]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b60      	cmp	r3, #96	@ 0x60
 8006762:	d109      	bne.n	8006778 <I2C_ITMasterCplt+0xa8>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2204      	movs	r2, #4
 8006768:	4013      	ands	r3, r2
 800676a:	d005      	beq.n	8006778 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	b2db      	uxtb	r3, r3
 8006774:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006776:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0018      	movs	r0, r3
 800677c:	f000 fb81 	bl	8006e82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006784:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2241      	movs	r2, #65	@ 0x41
 800678a:	5c9b      	ldrb	r3, [r3, r2]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b60      	cmp	r3, #96	@ 0x60
 8006790:	d002      	beq.n	8006798 <I2C_ITMasterCplt+0xc8>
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	0011      	movs	r1, r2
 80067a0:	0018      	movs	r0, r3
 80067a2:	f000 fa43 	bl	8006c2c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067a6:	e058      	b.n	800685a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2241      	movs	r2, #65	@ 0x41
 80067ac:	5c9b      	ldrb	r3, [r3, r2]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b21      	cmp	r3, #33	@ 0x21
 80067b2:	d126      	bne.n	8006802 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2241      	movs	r2, #65	@ 0x41
 80067b8:	2120      	movs	r1, #32
 80067ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2242      	movs	r2, #66	@ 0x42
 80067c6:	5c9b      	ldrb	r3, [r3, r2]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b40      	cmp	r3, #64	@ 0x40
 80067cc:	d10c      	bne.n	80067e8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2242      	movs	r2, #66	@ 0x42
 80067d2:	2100      	movs	r1, #0
 80067d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2240      	movs	r2, #64	@ 0x40
 80067da:	2100      	movs	r1, #0
 80067dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7ff f8bb 	bl	800595c <HAL_I2C_MemTxCpltCallback>
}
 80067e6:	e038      	b.n	800685a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2242      	movs	r2, #66	@ 0x42
 80067ec:	2100      	movs	r1, #0
 80067ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2240      	movs	r2, #64	@ 0x40
 80067f4:	2100      	movs	r1, #0
 80067f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7ff f87e 	bl	80058fc <HAL_I2C_MasterTxCpltCallback>
}
 8006800:	e02b      	b.n	800685a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2241      	movs	r2, #65	@ 0x41
 8006806:	5c9b      	ldrb	r3, [r3, r2]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b22      	cmp	r3, #34	@ 0x22
 800680c:	d125      	bne.n	800685a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2241      	movs	r2, #65	@ 0x41
 8006812:	2120      	movs	r1, #32
 8006814:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2242      	movs	r2, #66	@ 0x42
 8006820:	5c9b      	ldrb	r3, [r3, r2]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d10c      	bne.n	8006842 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2242      	movs	r2, #66	@ 0x42
 800682c:	2100      	movs	r1, #0
 800682e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2240      	movs	r2, #64	@ 0x40
 8006834:	2100      	movs	r1, #0
 8006836:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	0018      	movs	r0, r3
 800683c:	f7ff f896 	bl	800596c <HAL_I2C_MemRxCpltCallback>
}
 8006840:	e00b      	b.n	800685a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2242      	movs	r2, #66	@ 0x42
 8006846:	2100      	movs	r1, #0
 8006848:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2240      	movs	r2, #64	@ 0x40
 800684e:	2100      	movs	r1, #0
 8006850:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f7fb ff3f 	bl	80026d8 <HAL_I2C_MasterRxCpltCallback>
}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	46bd      	mov	sp, r7
 800685e:	b006      	add	sp, #24
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	fe00e800 	.word	0xfe00e800
 8006868:	ffff0000 	.word	0xffff0000

0800686c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006888:	200b      	movs	r0, #11
 800688a:	183b      	adds	r3, r7, r0
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	2141      	movs	r1, #65	@ 0x41
 8006890:	5c52      	ldrb	r2, [r2, r1]
 8006892:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2220      	movs	r2, #32
 800689a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800689c:	183b      	adds	r3, r7, r0
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b21      	cmp	r3, #33	@ 0x21
 80068a2:	d003      	beq.n	80068ac <I2C_ITSlaveCplt+0x40>
 80068a4:	183b      	adds	r3, r7, r0
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b29      	cmp	r3, #41	@ 0x29
 80068aa:	d109      	bne.n	80068c0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80068ac:	4aac      	ldr	r2, [pc, #688]	@ (8006b60 <I2C_ITSlaveCplt+0x2f4>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	0011      	movs	r1, r2
 80068b2:	0018      	movs	r0, r3
 80068b4:	f000 fca4 	bl	8007200 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2221      	movs	r2, #33	@ 0x21
 80068bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80068be:	e020      	b.n	8006902 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068c0:	220b      	movs	r2, #11
 80068c2:	18bb      	adds	r3, r7, r2
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b22      	cmp	r3, #34	@ 0x22
 80068c8:	d003      	beq.n	80068d2 <I2C_ITSlaveCplt+0x66>
 80068ca:	18bb      	adds	r3, r7, r2
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d0:	d109      	bne.n	80068e6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80068d2:	4aa4      	ldr	r2, [pc, #656]	@ (8006b64 <I2C_ITSlaveCplt+0x2f8>)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	0011      	movs	r1, r2
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 fc91 	bl	8007200 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2222      	movs	r2, #34	@ 0x22
 80068e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80068e4:	e00d      	b.n	8006902 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80068e6:	230b      	movs	r3, #11
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b28      	cmp	r3, #40	@ 0x28
 80068ee:	d108      	bne.n	8006902 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80068f0:	4a9d      	ldr	r2, [pc, #628]	@ (8006b68 <I2C_ITSlaveCplt+0x2fc>)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0011      	movs	r1, r2
 80068f6:	0018      	movs	r0, r3
 80068f8:	f000 fc82 	bl	8007200 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2180      	movs	r1, #128	@ 0x80
 800690e:	0209      	lsls	r1, r1, #8
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4993      	ldr	r1, [pc, #588]	@ (8006b6c <I2C_ITSlaveCplt+0x300>)
 8006920:	400a      	ands	r2, r1
 8006922:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f000 faab 	bl	8006e82 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	2380      	movs	r3, #128	@ 0x80
 8006930:	01db      	lsls	r3, r3, #7
 8006932:	4013      	ands	r3, r2
 8006934:	d013      	beq.n	800695e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	498b      	ldr	r1, [pc, #556]	@ (8006b70 <I2C_ITSlaveCplt+0x304>)
 8006942:	400a      	ands	r2, r1
 8006944:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01f      	beq.n	800698e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	b29a      	uxth	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800695c:	e017      	b.n	800698e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	2380      	movs	r3, #128	@ 0x80
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	4013      	ands	r3, r2
 8006966:	d012      	beq.n	800698e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4980      	ldr	r1, [pc, #512]	@ (8006b74 <I2C_ITSlaveCplt+0x308>)
 8006974:	400a      	ands	r2, r1
 8006976:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2204      	movs	r2, #4
 8006992:	4013      	ands	r3, r2
 8006994:	d020      	beq.n	80069d8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2204      	movs	r2, #4
 800699a:	4393      	bics	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00c      	beq.n	80069d8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e6:	2204      	movs	r2, #4
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2210      	movs	r2, #16
 80069f2:	4013      	ands	r3, r2
 80069f4:	d04f      	beq.n	8006a96 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2210      	movs	r2, #16
 80069fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069fc:	d04b      	beq.n	8006a96 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d12d      	bne.n	8006a64 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2241      	movs	r2, #65	@ 0x41
 8006a0c:	5c9b      	ldrb	r3, [r3, r2]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b28      	cmp	r3, #40	@ 0x28
 8006a12:	d10b      	bne.n	8006a2c <I2C_ITSlaveCplt+0x1c0>
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	2380      	movs	r3, #128	@ 0x80
 8006a18:	049b      	lsls	r3, r3, #18
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d106      	bne.n	8006a2c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0011      	movs	r1, r2
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 f8a9 	bl	8006b7c <I2C_ITListenCplt>
 8006a2a:	e034      	b.n	8006a96 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2241      	movs	r2, #65	@ 0x41
 8006a30:	5c9b      	ldrb	r3, [r3, r2]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b29      	cmp	r3, #41	@ 0x29
 8006a36:	d110      	bne.n	8006a5a <I2C_ITSlaveCplt+0x1ee>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a4f      	ldr	r2, [pc, #316]	@ (8006b78 <I2C_ITSlaveCplt+0x30c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00c      	beq.n	8006a5a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2210      	movs	r2, #16
 8006a46:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 fa19 	bl	8006e82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7ff fdd8 	bl	8006608 <I2C_ITSlaveSeqCplt>
 8006a58:	e01d      	b.n	8006a96 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2210      	movs	r2, #16
 8006a60:	61da      	str	r2, [r3, #28]
 8006a62:	e018      	b.n	8006a96 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2210      	movs	r2, #16
 8006a6a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a70:	2204      	movs	r2, #4
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <I2C_ITSlaveCplt+0x21c>
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	2380      	movs	r3, #128	@ 0x80
 8006a82:	045b      	lsls	r3, r3, #17
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d106      	bne.n	8006a96 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	0011      	movs	r1, r2
 8006a90:	0018      	movs	r0, r3
 8006a92:	f000 f8cb 	bl	8006c2c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2242      	movs	r2, #66	@ 0x42
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d013      	beq.n	8006ad4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	0011      	movs	r1, r2
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 f8b9 	bl	8006c2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2241      	movs	r2, #65	@ 0x41
 8006abe:	5c9b      	ldrb	r3, [r3, r2]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b28      	cmp	r3, #40	@ 0x28
 8006ac4:	d147      	bne.n	8006b56 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	0011      	movs	r1, r2
 8006acc:	0018      	movs	r0, r3
 8006ace:	f000 f855 	bl	8006b7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ad2:	e040      	b.n	8006b56 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	4a27      	ldr	r2, [pc, #156]	@ (8006b78 <I2C_ITSlaveCplt+0x30c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d016      	beq.n	8006b0c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7ff fd91 	bl	8006608 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a23      	ldr	r2, [pc, #140]	@ (8006b78 <I2C_ITSlaveCplt+0x30c>)
 8006aea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2241      	movs	r2, #65	@ 0x41
 8006af0:	2120      	movs	r1, #32
 8006af2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2240      	movs	r2, #64	@ 0x40
 8006afe:	2100      	movs	r1, #0
 8006b00:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f7fe ff21 	bl	800594c <HAL_I2C_ListenCpltCallback>
}
 8006b0a:	e024      	b.n	8006b56 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2241      	movs	r2, #65	@ 0x41
 8006b10:	5c9b      	ldrb	r3, [r3, r2]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b22      	cmp	r3, #34	@ 0x22
 8006b16:	d10f      	bne.n	8006b38 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2241      	movs	r2, #65	@ 0x41
 8006b1c:	2120      	movs	r1, #32
 8006b1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2240      	movs	r2, #64	@ 0x40
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7fe fef3 	bl	800591c <HAL_I2C_SlaveRxCpltCallback>
}
 8006b36:	e00e      	b.n	8006b56 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2241      	movs	r2, #65	@ 0x41
 8006b3c:	2120      	movs	r1, #32
 8006b3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2240      	movs	r2, #64	@ 0x40
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7fe fedb 	bl	800590c <HAL_I2C_SlaveTxCpltCallback>
}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b006      	add	sp, #24
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	00008001 	.word	0x00008001
 8006b64:	00008002 	.word	0x00008002
 8006b68:	00008003 	.word	0x00008003
 8006b6c:	fe00e800 	.word	0xfe00e800
 8006b70:	ffffbfff 	.word	0xffffbfff
 8006b74:	ffff7fff 	.word	0xffff7fff
 8006b78:	ffff0000 	.word	0xffff0000

08006b7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a26      	ldr	r2, [pc, #152]	@ (8006c24 <I2C_ITListenCplt+0xa8>)
 8006b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2241      	movs	r2, #65	@ 0x41
 8006b96:	2120      	movs	r1, #32
 8006b98:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2242      	movs	r2, #66	@ 0x42
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2204      	movs	r2, #4
 8006bac:	4013      	ands	r3, r2
 8006bae:	d022      	beq.n	8006bf6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d012      	beq.n	8006bf6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bee:	2204      	movs	r2, #4
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c28 <I2C_ITListenCplt+0xac>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0011      	movs	r1, r2
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f000 faff 	bl	8007200 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2210      	movs	r2, #16
 8006c08:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2240      	movs	r2, #64	@ 0x40
 8006c0e:	2100      	movs	r1, #0
 8006c10:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7fe fe99 	bl	800594c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b002      	add	sp, #8
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	ffff0000 	.word	0xffff0000
 8006c28:	00008003 	.word	0x00008003

08006c2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c36:	200f      	movs	r0, #15
 8006c38:	183b      	adds	r3, r7, r0
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	2141      	movs	r1, #65	@ 0x41
 8006c3e:	5c52      	ldrb	r2, [r2, r1]
 8006c40:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2242      	movs	r2, #66	@ 0x42
 8006c46:	2100      	movs	r1, #0
 8006c48:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a72      	ldr	r2, [pc, #456]	@ (8006e18 <I2C_ITError+0x1ec>)
 8006c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c62:	183b      	adds	r3, r7, r0
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b28      	cmp	r3, #40	@ 0x28
 8006c68:	d007      	beq.n	8006c7a <I2C_ITError+0x4e>
 8006c6a:	183b      	adds	r3, r7, r0
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b29      	cmp	r3, #41	@ 0x29
 8006c70:	d003      	beq.n	8006c7a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c72:	183b      	adds	r3, r7, r0
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c78:	d10c      	bne.n	8006c94 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2103      	movs	r1, #3
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 fabe 	bl	8007200 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2241      	movs	r2, #65	@ 0x41
 8006c88:	2128      	movs	r1, #40	@ 0x28
 8006c8a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a63      	ldr	r2, [pc, #396]	@ (8006e1c <I2C_ITError+0x1f0>)
 8006c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c92:	e032      	b.n	8006cfa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c94:	4a62      	ldr	r2, [pc, #392]	@ (8006e20 <I2C_ITError+0x1f4>)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0011      	movs	r1, r2
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f000 fab0 	bl	8007200 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f000 f8ed 	bl	8006e82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2241      	movs	r2, #65	@ 0x41
 8006cac:	5c9b      	ldrb	r3, [r3, r2]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b60      	cmp	r3, #96	@ 0x60
 8006cb2:	d01f      	beq.n	8006cf4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2241      	movs	r2, #65	@ 0x41
 8006cb8:	2120      	movs	r1, #32
 8006cba:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d114      	bne.n	8006cf4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	2210      	movs	r2, #16
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d109      	bne.n	8006cec <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2210      	movs	r2, #16
 8006cde:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d03b      	beq.n	8006d80 <I2C_ITError+0x154>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b11      	cmp	r3, #17
 8006d0c:	d002      	beq.n	8006d14 <I2C_ITError+0xe8>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b21      	cmp	r3, #33	@ 0x21
 8006d12:	d135      	bne.n	8006d80 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	2380      	movs	r3, #128	@ 0x80
 8006d1c:	01db      	lsls	r3, r3, #7
 8006d1e:	401a      	ands	r2, r3
 8006d20:	2380      	movs	r3, #128	@ 0x80
 8006d22:	01db      	lsls	r3, r3, #7
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d107      	bne.n	8006d38 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	493c      	ldr	r1, [pc, #240]	@ (8006e24 <I2C_ITError+0x1f8>)
 8006d34:	400a      	ands	r2, r1
 8006d36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f7fe f8db 	bl	8004ef8 <HAL_DMA_GetState>
 8006d42:	0003      	movs	r3, r0
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d016      	beq.n	8006d76 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	4a36      	ldr	r2, [pc, #216]	@ (8006e28 <I2C_ITError+0x1fc>)
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2240      	movs	r2, #64	@ 0x40
 8006d54:	2100      	movs	r1, #0
 8006d56:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f7fd ff9f 	bl	8004ca0 <HAL_DMA_Abort_IT>
 8006d62:	1e03      	subs	r3, r0, #0
 8006d64:	d051      	beq.n	8006e0a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d70:	0018      	movs	r0, r3
 8006d72:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d74:	e049      	b.n	8006e0a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f000 f859 	bl	8006e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d7e:	e044      	b.n	8006e0a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d03b      	beq.n	8006e00 <I2C_ITError+0x1d4>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b12      	cmp	r3, #18
 8006d8c:	d002      	beq.n	8006d94 <I2C_ITError+0x168>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b22      	cmp	r3, #34	@ 0x22
 8006d92:	d135      	bne.n	8006e00 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	2380      	movs	r3, #128	@ 0x80
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	401a      	ands	r2, r3
 8006da0:	2380      	movs	r3, #128	@ 0x80
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d107      	bne.n	8006db8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	491e      	ldr	r1, [pc, #120]	@ (8006e2c <I2C_ITError+0x200>)
 8006db4:	400a      	ands	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f7fe f89b 	bl	8004ef8 <HAL_DMA_GetState>
 8006dc2:	0003      	movs	r3, r0
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d016      	beq.n	8006df6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	4a16      	ldr	r2, [pc, #88]	@ (8006e28 <I2C_ITError+0x1fc>)
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2240      	movs	r2, #64	@ 0x40
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f7fd ff5f 	bl	8004ca0 <HAL_DMA_Abort_IT>
 8006de2:	1e03      	subs	r3, r0, #0
 8006de4:	d013      	beq.n	8006e0e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df0:	0018      	movs	r0, r3
 8006df2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006df4:	e00b      	b.n	8006e0e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f000 f819 	bl	8006e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dfe:	e006      	b.n	8006e0e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	0018      	movs	r0, r3
 8006e04:	f000 f814 	bl	8006e30 <I2C_TreatErrorCallback>
  }
}
 8006e08:	e002      	b.n	8006e10 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	e000      	b.n	8006e10 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e0e:	46c0      	nop			@ (mov r8, r8)
}
 8006e10:	46c0      	nop			@ (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b004      	add	sp, #16
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	ffff0000 	.word	0xffff0000
 8006e1c:	08005c1d 	.word	0x08005c1d
 8006e20:	00008003 	.word	0x00008003
 8006e24:	ffffbfff 	.word	0xffffbfff
 8006e28:	0800703b 	.word	0x0800703b
 8006e2c:	ffff7fff 	.word	0xffff7fff

08006e30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2241      	movs	r2, #65	@ 0x41
 8006e3c:	5c9b      	ldrb	r3, [r3, r2]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b60      	cmp	r3, #96	@ 0x60
 8006e42:	d10f      	bne.n	8006e64 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2241      	movs	r2, #65	@ 0x41
 8006e48:	2120      	movs	r1, #32
 8006e4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2240      	movs	r2, #64	@ 0x40
 8006e56:	2100      	movs	r1, #0
 8006e58:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f7fe fd95 	bl	800598c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e62:	e00a      	b.n	8006e7a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2240      	movs	r2, #64	@ 0x40
 8006e6e:	2100      	movs	r1, #0
 8006e70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7fe fd81 	bl	800597c <HAL_I2C_ErrorCallback>
}
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2202      	movs	r2, #2
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d103      	bne.n	8006ea0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d007      	beq.n	8006ebe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	619a      	str	r2, [r3, #24]
  }
}
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b002      	add	sp, #8
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4920      	ldr	r1, [pc, #128]	@ (8006f64 <I2C_DMAMasterTransmitCplt+0x9c>)
 8006ee2:	400a      	ands	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2120      	movs	r1, #32
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f8f9 	bl	80070ec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006efa:	e02e      	b.n	8006f5a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006f04:	189a      	adds	r2, r3, r2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2bff      	cmp	r3, #255	@ 0xff
 8006f12:	d903      	bls.n	8006f1c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	22ff      	movs	r2, #255	@ 0xff
 8006f18:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f1a:	e004      	b.n	8006f26 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	0019      	movs	r1, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3328      	adds	r3, #40	@ 0x28
 8006f36:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f3c:	f7fd fe28 	bl	8004b90 <HAL_DMA_Start_IT>
 8006f40:	1e03      	subs	r3, r0, #0
 8006f42:	d005      	beq.n	8006f50 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2110      	movs	r1, #16
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f7ff fe6f 	bl	8006c2c <I2C_ITError>
}
 8006f4e:	e004      	b.n	8006f5a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2140      	movs	r1, #64	@ 0x40
 8006f54:	0018      	movs	r0, r3
 8006f56:	f000 f8c9 	bl	80070ec <I2C_Enable_IRQ>
}
 8006f5a:	46c0      	nop			@ (mov r8, r8)
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	b004      	add	sp, #16
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	46c0      	nop			@ (mov r8, r8)
 8006f64:	ffffbfff 	.word	0xffffbfff

08006f68 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4920      	ldr	r1, [pc, #128]	@ (8007004 <I2C_DMAMasterReceiveCplt+0x9c>)
 8006f82:	400a      	ands	r2, r1
 8006f84:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d105      	bne.n	8006f9c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2120      	movs	r1, #32
 8006f94:	0018      	movs	r0, r3
 8006f96:	f000 f8a9 	bl	80070ec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006f9a:	e02e      	b.n	8006ffa <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006fa4:	189a      	adds	r2, r3, r2
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2bff      	cmp	r3, #255	@ 0xff
 8006fb2:	d903      	bls.n	8006fbc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	22ff      	movs	r2, #255	@ 0xff
 8006fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006fba:	e004      	b.n	8006fc6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3324      	adds	r3, #36	@ 0x24
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006fdc:	f7fd fdd8 	bl	8004b90 <HAL_DMA_Start_IT>
 8006fe0:	1e03      	subs	r3, r0, #0
 8006fe2:	d005      	beq.n	8006ff0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2110      	movs	r1, #16
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7ff fe1f 	bl	8006c2c <I2C_ITError>
}
 8006fee:	e004      	b.n	8006ffa <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2140      	movs	r1, #64	@ 0x40
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f000 f879 	bl	80070ec <I2C_Enable_IRQ>
}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b004      	add	sp, #16
 8007000:	bd80      	pop	{r7, pc}
 8007002:	46c0      	nop			@ (mov r8, r8)
 8007004:	ffff7fff 	.word	0xffff7fff

08007008 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2180      	movs	r1, #128	@ 0x80
 8007022:	0209      	lsls	r1, r1, #8
 8007024:	430a      	orrs	r2, r1
 8007026:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2110      	movs	r1, #16
 800702c:	0018      	movs	r0, r3
 800702e:	f7ff fdfd 	bl	8006c2c <I2C_ITError>
}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	46bd      	mov	sp, r7
 8007036:	b004      	add	sp, #16
 8007038:	bd80      	pop	{r7, pc}

0800703a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007054:	2200      	movs	r2, #0
 8007056:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007064:	2200      	movs	r2, #0
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	0018      	movs	r0, r3
 800706c:	f7ff fee0 	bl	8006e30 <I2C_TreatErrorCallback>
}
 8007070:	46c0      	nop			@ (mov r8, r8)
 8007072:	46bd      	mov	sp, r7
 8007074:	b004      	add	sp, #16
 8007076:	bd80      	pop	{r7, pc}

08007078 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	0008      	movs	r0, r1
 8007082:	0011      	movs	r1, r2
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	240a      	movs	r4, #10
 8007088:	193b      	adds	r3, r7, r4
 800708a:	1c02      	adds	r2, r0, #0
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	2009      	movs	r0, #9
 8007090:	183b      	adds	r3, r7, r0
 8007092:	1c0a      	adds	r2, r1, #0
 8007094:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007096:	193b      	adds	r3, r7, r4
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	059b      	lsls	r3, r3, #22
 800709c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800709e:	183b      	adds	r3, r7, r0
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	0419      	lsls	r1, r3, #16
 80070a4:	23ff      	movs	r3, #255	@ 0xff
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070aa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	4313      	orrs	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070c2:	0d51      	lsrs	r1, r2, #21
 80070c4:	2280      	movs	r2, #128	@ 0x80
 80070c6:	00d2      	lsls	r2, r2, #3
 80070c8:	400a      	ands	r2, r1
 80070ca:	4907      	ldr	r1, [pc, #28]	@ (80070e8 <I2C_TransferConfig+0x70>)
 80070cc:	430a      	orrs	r2, r1
 80070ce:	43d2      	mvns	r2, r2
 80070d0:	401a      	ands	r2, r3
 80070d2:	0011      	movs	r1, r2
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	46bd      	mov	sp, r7
 80070e2:	b007      	add	sp, #28
 80070e4:	bd90      	pop	{r4, r7, pc}
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	03ff63ff 	.word	0x03ff63ff

080070ec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	000a      	movs	r2, r1
 80070f6:	1cbb      	adds	r3, r7, #2
 80070f8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007102:	4b3c      	ldr	r3, [pc, #240]	@ (80071f4 <I2C_Enable_IRQ+0x108>)
 8007104:	429a      	cmp	r2, r3
 8007106:	d035      	beq.n	8007174 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800710c:	4b3a      	ldr	r3, [pc, #232]	@ (80071f8 <I2C_Enable_IRQ+0x10c>)
 800710e:	429a      	cmp	r2, r3
 8007110:	d030      	beq.n	8007174 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007116:	4b39      	ldr	r3, [pc, #228]	@ (80071fc <I2C_Enable_IRQ+0x110>)
 8007118:	429a      	cmp	r2, r3
 800711a:	d02b      	beq.n	8007174 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800711c:	1cbb      	adds	r3, r7, #2
 800711e:	2200      	movs	r2, #0
 8007120:	5e9b      	ldrsh	r3, [r3, r2]
 8007122:	2b00      	cmp	r3, #0
 8007124:	da03      	bge.n	800712e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	22b8      	movs	r2, #184	@ 0xb8
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800712e:	1cbb      	adds	r3, r7, #2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	2201      	movs	r2, #1
 8007134:	4013      	ands	r3, r2
 8007136:	d003      	beq.n	8007140 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	22f2      	movs	r2, #242	@ 0xf2
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007140:	1cbb      	adds	r3, r7, #2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	2202      	movs	r2, #2
 8007146:	4013      	ands	r3, r2
 8007148:	d003      	beq.n	8007152 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	22f4      	movs	r2, #244	@ 0xf4
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007152:	1cbb      	adds	r3, r7, #2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	2b10      	cmp	r3, #16
 8007158:	d103      	bne.n	8007162 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2290      	movs	r2, #144	@ 0x90
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007162:	1cbb      	adds	r3, r7, #2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	2b20      	cmp	r3, #32
 8007168:	d137      	bne.n	80071da <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007172:	e032      	b.n	80071da <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007174:	1cbb      	adds	r3, r7, #2
 8007176:	2200      	movs	r2, #0
 8007178:	5e9b      	ldrsh	r3, [r3, r2]
 800717a:	2b00      	cmp	r3, #0
 800717c:	da03      	bge.n	8007186 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	22b8      	movs	r2, #184	@ 0xb8
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007186:	1cbb      	adds	r3, r7, #2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	2201      	movs	r2, #1
 800718c:	4013      	ands	r3, r2
 800718e:	d003      	beq.n	8007198 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	22f2      	movs	r2, #242	@ 0xf2
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007198:	1cbb      	adds	r3, r7, #2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	2202      	movs	r2, #2
 800719e:	4013      	ands	r3, r2
 80071a0:	d003      	beq.n	80071aa <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	22f4      	movs	r2, #244	@ 0xf4
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071aa:	1cbb      	adds	r3, r7, #2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d103      	bne.n	80071ba <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2290      	movs	r2, #144	@ 0x90
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80071ba:	1cbb      	adds	r3, r7, #2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d103      	bne.n	80071ca <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2260      	movs	r2, #96	@ 0x60
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80071ca:	1cbb      	adds	r3, r7, #2
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	2b40      	cmp	r3, #64	@ 0x40
 80071d0:	d103      	bne.n	80071da <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2240      	movs	r2, #64	@ 0x40
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	601a      	str	r2, [r3, #0]
}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	46bd      	mov	sp, r7
 80071ee:	b004      	add	sp, #16
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	46c0      	nop			@ (mov r8, r8)
 80071f4:	08005e1d 	.word	0x08005e1d
 80071f8:	0800626d 	.word	0x0800626d
 80071fc:	08006015 	.word	0x08006015

08007200 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	000a      	movs	r2, r1
 800720a:	1cbb      	adds	r3, r7, #2
 800720c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007212:	1cbb      	adds	r3, r7, #2
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	2201      	movs	r2, #1
 8007218:	4013      	ands	r3, r2
 800721a:	d010      	beq.n	800723e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2242      	movs	r2, #66	@ 0x42
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2241      	movs	r2, #65	@ 0x41
 8007228:	5c9b      	ldrb	r3, [r3, r2]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	001a      	movs	r2, r3
 800722e:	2328      	movs	r3, #40	@ 0x28
 8007230:	4013      	ands	r3, r2
 8007232:	2b28      	cmp	r3, #40	@ 0x28
 8007234:	d003      	beq.n	800723e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	22b0      	movs	r2, #176	@ 0xb0
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800723e:	1cbb      	adds	r3, r7, #2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	2202      	movs	r2, #2
 8007244:	4013      	ands	r3, r2
 8007246:	d010      	beq.n	800726a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2244      	movs	r2, #68	@ 0x44
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2241      	movs	r2, #65	@ 0x41
 8007254:	5c9b      	ldrb	r3, [r3, r2]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	001a      	movs	r2, r3
 800725a:	2328      	movs	r3, #40	@ 0x28
 800725c:	4013      	ands	r3, r2
 800725e:	2b28      	cmp	r3, #40	@ 0x28
 8007260:	d003      	beq.n	800726a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	22b0      	movs	r2, #176	@ 0xb0
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800726a:	1cbb      	adds	r3, r7, #2
 800726c:	2200      	movs	r2, #0
 800726e:	5e9b      	ldrsh	r3, [r3, r2]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da03      	bge.n	800727c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	22b8      	movs	r2, #184	@ 0xb8
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800727c:	1cbb      	adds	r3, r7, #2
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	2b10      	cmp	r3, #16
 8007282:	d103      	bne.n	800728c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2290      	movs	r2, #144	@ 0x90
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800728c:	1cbb      	adds	r3, r7, #2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	2b20      	cmp	r3, #32
 8007292:	d103      	bne.n	800729c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800729c:	1cbb      	adds	r3, r7, #2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	d103      	bne.n	80072ac <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2240      	movs	r2, #64	@ 0x40
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	43d9      	mvns	r1, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	400a      	ands	r2, r1
 80072bc:	601a      	str	r2, [r3, #0]
}
 80072be:	46c0      	nop			@ (mov r8, r8)
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b004      	add	sp, #16
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2241      	movs	r2, #65	@ 0x41
 80072d6:	5c9b      	ldrb	r3, [r3, r2]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d138      	bne.n	8007350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2240      	movs	r2, #64	@ 0x40
 80072e2:	5c9b      	ldrb	r3, [r3, r2]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e032      	b.n	8007352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2240      	movs	r2, #64	@ 0x40
 80072f0:	2101      	movs	r1, #1
 80072f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2241      	movs	r2, #65	@ 0x41
 80072f8:	2124      	movs	r1, #36	@ 0x24
 80072fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2101      	movs	r1, #1
 8007308:	438a      	bics	r2, r1
 800730a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4911      	ldr	r1, [pc, #68]	@ (800735c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007318:	400a      	ands	r2, r1
 800731a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6819      	ldr	r1, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2101      	movs	r1, #1
 8007338:	430a      	orrs	r2, r1
 800733a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2241      	movs	r2, #65	@ 0x41
 8007340:	2120      	movs	r1, #32
 8007342:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2240      	movs	r2, #64	@ 0x40
 8007348:	2100      	movs	r1, #0
 800734a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e000      	b.n	8007352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	0018      	movs	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	b002      	add	sp, #8
 8007358:	bd80      	pop	{r7, pc}
 800735a:	46c0      	nop			@ (mov r8, r8)
 800735c:	ffffefff 	.word	0xffffefff

08007360 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2241      	movs	r2, #65	@ 0x41
 800736e:	5c9b      	ldrb	r3, [r3, r2]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b20      	cmp	r3, #32
 8007374:	d139      	bne.n	80073ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2240      	movs	r2, #64	@ 0x40
 800737a:	5c9b      	ldrb	r3, [r3, r2]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007380:	2302      	movs	r3, #2
 8007382:	e033      	b.n	80073ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2240      	movs	r2, #64	@ 0x40
 8007388:	2101      	movs	r1, #1
 800738a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2241      	movs	r2, #65	@ 0x41
 8007390:	2124      	movs	r1, #36	@ 0x24
 8007392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2101      	movs	r1, #1
 80073a0:	438a      	bics	r2, r1
 80073a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a11      	ldr	r2, [pc, #68]	@ (80073f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2101      	movs	r1, #1
 80073d2:	430a      	orrs	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2241      	movs	r2, #65	@ 0x41
 80073da:	2120      	movs	r1, #32
 80073dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2240      	movs	r2, #64	@ 0x40
 80073e2:	2100      	movs	r1, #0
 80073e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073ea:	2302      	movs	r3, #2
  }
}
 80073ec:	0018      	movs	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b004      	add	sp, #16
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	fffff0ff 	.word	0xfffff0ff

080073f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e20f      	b.n	800782a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2201      	movs	r2, #1
 8007410:	4013      	ands	r3, r2
 8007412:	d100      	bne.n	8007416 <HAL_RCC_OscConfig+0x1e>
 8007414:	e069      	b.n	80074ea <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007416:	4bc8      	ldr	r3, [pc, #800]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2238      	movs	r2, #56	@ 0x38
 800741c:	4013      	ands	r3, r2
 800741e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b08      	cmp	r3, #8
 8007424:	d105      	bne.n	8007432 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d15d      	bne.n	80074ea <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e1fb      	b.n	800782a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	025b      	lsls	r3, r3, #9
 800743a:	429a      	cmp	r2, r3
 800743c:	d107      	bne.n	800744e <HAL_RCC_OscConfig+0x56>
 800743e:	4bbe      	ldr	r3, [pc, #760]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4bbd      	ldr	r3, [pc, #756]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007444:	2180      	movs	r1, #128	@ 0x80
 8007446:	0249      	lsls	r1, r1, #9
 8007448:	430a      	orrs	r2, r1
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e020      	b.n	8007490 <HAL_RCC_OscConfig+0x98>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	23a0      	movs	r3, #160	@ 0xa0
 8007454:	02db      	lsls	r3, r3, #11
 8007456:	429a      	cmp	r2, r3
 8007458:	d10e      	bne.n	8007478 <HAL_RCC_OscConfig+0x80>
 800745a:	4bb7      	ldr	r3, [pc, #732]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4bb6      	ldr	r3, [pc, #728]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007460:	2180      	movs	r1, #128	@ 0x80
 8007462:	02c9      	lsls	r1, r1, #11
 8007464:	430a      	orrs	r2, r1
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	4bb3      	ldr	r3, [pc, #716]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4bb2      	ldr	r3, [pc, #712]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800746e:	2180      	movs	r1, #128	@ 0x80
 8007470:	0249      	lsls	r1, r1, #9
 8007472:	430a      	orrs	r2, r1
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	e00b      	b.n	8007490 <HAL_RCC_OscConfig+0x98>
 8007478:	4baf      	ldr	r3, [pc, #700]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	4bae      	ldr	r3, [pc, #696]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800747e:	49af      	ldr	r1, [pc, #700]	@ (800773c <HAL_RCC_OscConfig+0x344>)
 8007480:	400a      	ands	r2, r1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	4bac      	ldr	r3, [pc, #688]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4bab      	ldr	r3, [pc, #684]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800748a:	49ad      	ldr	r1, [pc, #692]	@ (8007740 <HAL_RCC_OscConfig+0x348>)
 800748c:	400a      	ands	r2, r1
 800748e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d014      	beq.n	80074c2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fc fb76 	bl	8003b88 <HAL_GetTick>
 800749c:	0003      	movs	r3, r0
 800749e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80074a2:	f7fc fb71 	bl	8003b88 <HAL_GetTick>
 80074a6:	0002      	movs	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b64      	cmp	r3, #100	@ 0x64
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e1ba      	b.n	800782a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074b4:	4ba0      	ldr	r3, [pc, #640]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	029b      	lsls	r3, r3, #10
 80074bc:	4013      	ands	r3, r2
 80074be:	d0f0      	beq.n	80074a2 <HAL_RCC_OscConfig+0xaa>
 80074c0:	e013      	b.n	80074ea <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c2:	f7fc fb61 	bl	8003b88 <HAL_GetTick>
 80074c6:	0003      	movs	r3, r0
 80074c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80074cc:	f7fc fb5c 	bl	8003b88 <HAL_GetTick>
 80074d0:	0002      	movs	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b64      	cmp	r3, #100	@ 0x64
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e1a5      	b.n	800782a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074de:	4b96      	ldr	r3, [pc, #600]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	2380      	movs	r3, #128	@ 0x80
 80074e4:	029b      	lsls	r3, r3, #10
 80074e6:	4013      	ands	r3, r2
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2202      	movs	r2, #2
 80074f0:	4013      	ands	r3, r2
 80074f2:	d100      	bne.n	80074f6 <HAL_RCC_OscConfig+0xfe>
 80074f4:	e086      	b.n	8007604 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f6:	4b90      	ldr	r3, [pc, #576]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2238      	movs	r2, #56	@ 0x38
 80074fc:	4013      	ands	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d12f      	bne.n	8007566 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e18b      	b.n	800782a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007512:	4b89      	ldr	r3, [pc, #548]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	4a8b      	ldr	r2, [pc, #556]	@ (8007744 <HAL_RCC_OscConfig+0x34c>)
 8007518:	4013      	ands	r3, r2
 800751a:	0019      	movs	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	021a      	lsls	r2, r3, #8
 8007522:	4b85      	ldr	r3, [pc, #532]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d112      	bne.n	8007554 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800752e:	4b82      	ldr	r3, [pc, #520]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a85      	ldr	r2, [pc, #532]	@ (8007748 <HAL_RCC_OscConfig+0x350>)
 8007534:	4013      	ands	r3, r2
 8007536:	0019      	movs	r1, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	4b7e      	ldr	r3, [pc, #504]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800753e:	430a      	orrs	r2, r1
 8007540:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007542:	4b7d      	ldr	r3, [pc, #500]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	0adb      	lsrs	r3, r3, #11
 8007548:	2207      	movs	r2, #7
 800754a:	4013      	ands	r3, r2
 800754c:	4a7f      	ldr	r2, [pc, #508]	@ (800774c <HAL_RCC_OscConfig+0x354>)
 800754e:	40da      	lsrs	r2, r3
 8007550:	4b7f      	ldr	r3, [pc, #508]	@ (8007750 <HAL_RCC_OscConfig+0x358>)
 8007552:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007554:	4b7f      	ldr	r3, [pc, #508]	@ (8007754 <HAL_RCC_OscConfig+0x35c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	0018      	movs	r0, r3
 800755a:	f7fc fab9 	bl	8003ad0 <HAL_InitTick>
 800755e:	1e03      	subs	r3, r0, #0
 8007560:	d050      	beq.n	8007604 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e161      	b.n	800782a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d030      	beq.n	80075d0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800756e:	4b72      	ldr	r3, [pc, #456]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a75      	ldr	r2, [pc, #468]	@ (8007748 <HAL_RCC_OscConfig+0x350>)
 8007574:	4013      	ands	r3, r2
 8007576:	0019      	movs	r1, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	4b6e      	ldr	r3, [pc, #440]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800757e:	430a      	orrs	r2, r1
 8007580:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8007582:	4b6d      	ldr	r3, [pc, #436]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b6c      	ldr	r3, [pc, #432]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007588:	2180      	movs	r1, #128	@ 0x80
 800758a:	0049      	lsls	r1, r1, #1
 800758c:	430a      	orrs	r2, r1
 800758e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fc fafa 	bl	8003b88 <HAL_GetTick>
 8007594:	0003      	movs	r3, r0
 8007596:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800759a:	f7fc faf5 	bl	8003b88 <HAL_GetTick>
 800759e:	0002      	movs	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e13e      	b.n	800782a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075ac:	4b62      	ldr	r3, [pc, #392]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	2380      	movs	r3, #128	@ 0x80
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4013      	ands	r3, r2
 80075b6:	d0f0      	beq.n	800759a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075b8:	4b5f      	ldr	r3, [pc, #380]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	4a61      	ldr	r2, [pc, #388]	@ (8007744 <HAL_RCC_OscConfig+0x34c>)
 80075be:	4013      	ands	r3, r2
 80075c0:	0019      	movs	r1, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	021a      	lsls	r2, r3, #8
 80075c8:	4b5b      	ldr	r3, [pc, #364]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
 80075ce:	e019      	b.n	8007604 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80075d0:	4b59      	ldr	r3, [pc, #356]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	4b58      	ldr	r3, [pc, #352]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80075d6:	4960      	ldr	r1, [pc, #384]	@ (8007758 <HAL_RCC_OscConfig+0x360>)
 80075d8:	400a      	ands	r2, r1
 80075da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075dc:	f7fc fad4 	bl	8003b88 <HAL_GetTick>
 80075e0:	0003      	movs	r3, r0
 80075e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075e4:	e008      	b.n	80075f8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80075e6:	f7fc facf 	bl	8003b88 <HAL_GetTick>
 80075ea:	0002      	movs	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e118      	b.n	800782a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075f8:	4b4f      	ldr	r3, [pc, #316]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	2380      	movs	r3, #128	@ 0x80
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4013      	ands	r3, r2
 8007602:	d1f0      	bne.n	80075e6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2208      	movs	r2, #8
 800760a:	4013      	ands	r3, r2
 800760c:	d042      	beq.n	8007694 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800760e:	4b4a      	ldr	r3, [pc, #296]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2238      	movs	r2, #56	@ 0x38
 8007614:	4013      	ands	r3, r2
 8007616:	2b18      	cmp	r3, #24
 8007618:	d105      	bne.n	8007626 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d138      	bne.n	8007694 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e101      	b.n	800782a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d019      	beq.n	8007662 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800762e:	4b42      	ldr	r3, [pc, #264]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007630:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007632:	4b41      	ldr	r3, [pc, #260]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007634:	2101      	movs	r1, #1
 8007636:	430a      	orrs	r2, r1
 8007638:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fc faa5 	bl	8003b88 <HAL_GetTick>
 800763e:	0003      	movs	r3, r0
 8007640:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007644:	f7fc faa0 	bl	8003b88 <HAL_GetTick>
 8007648:	0002      	movs	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e0e9      	b.n	800782a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007656:	4b38      	ldr	r3, [pc, #224]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800765a:	2202      	movs	r2, #2
 800765c:	4013      	ands	r3, r2
 800765e:	d0f1      	beq.n	8007644 <HAL_RCC_OscConfig+0x24c>
 8007660:	e018      	b.n	8007694 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007662:	4b35      	ldr	r3, [pc, #212]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007664:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007666:	4b34      	ldr	r3, [pc, #208]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007668:	2101      	movs	r1, #1
 800766a:	438a      	bics	r2, r1
 800766c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766e:	f7fc fa8b 	bl	8003b88 <HAL_GetTick>
 8007672:	0003      	movs	r3, r0
 8007674:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007678:	f7fc fa86 	bl	8003b88 <HAL_GetTick>
 800767c:	0002      	movs	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e0cf      	b.n	800782a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800768a:	4b2b      	ldr	r3, [pc, #172]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800768c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800768e:	2202      	movs	r2, #2
 8007690:	4013      	ands	r3, r2
 8007692:	d1f1      	bne.n	8007678 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2204      	movs	r2, #4
 800769a:	4013      	ands	r3, r2
 800769c:	d100      	bne.n	80076a0 <HAL_RCC_OscConfig+0x2a8>
 800769e:	e084      	b.n	80077aa <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076a0:	230f      	movs	r3, #15
 80076a2:	18fb      	adds	r3, r7, r3
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80076a8:	4b23      	ldr	r3, [pc, #140]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2238      	movs	r2, #56	@ 0x38
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d106      	bne.n	80076c2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d000      	beq.n	80076be <HAL_RCC_OscConfig+0x2c6>
 80076bc:	e075      	b.n	80077aa <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e0b3      	b.n	800782a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d106      	bne.n	80076d8 <HAL_RCC_OscConfig+0x2e0>
 80076ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076d0:	2101      	movs	r1, #1
 80076d2:	430a      	orrs	r2, r1
 80076d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076d6:	e01c      	b.n	8007712 <HAL_RCC_OscConfig+0x31a>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	2b05      	cmp	r3, #5
 80076de:	d10c      	bne.n	80076fa <HAL_RCC_OscConfig+0x302>
 80076e0:	4b15      	ldr	r3, [pc, #84]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076e4:	4b14      	ldr	r3, [pc, #80]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076e6:	2104      	movs	r1, #4
 80076e8:	430a      	orrs	r2, r1
 80076ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076ec:	4b12      	ldr	r3, [pc, #72]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076f0:	4b11      	ldr	r3, [pc, #68]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076f2:	2101      	movs	r1, #1
 80076f4:	430a      	orrs	r2, r1
 80076f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076f8:	e00b      	b.n	8007712 <HAL_RCC_OscConfig+0x31a>
 80076fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 80076fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007700:	2101      	movs	r1, #1
 8007702:	438a      	bics	r2, r1
 8007704:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007706:	4b0c      	ldr	r3, [pc, #48]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 8007708:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800770a:	4b0b      	ldr	r3, [pc, #44]	@ (8007738 <HAL_RCC_OscConfig+0x340>)
 800770c:	2104      	movs	r1, #4
 800770e:	438a      	bics	r2, r1
 8007710:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d028      	beq.n	800776c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771a:	f7fc fa35 	bl	8003b88 <HAL_GetTick>
 800771e:	0003      	movs	r3, r0
 8007720:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007722:	e01d      	b.n	8007760 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007724:	f7fc fa30 	bl	8003b88 <HAL_GetTick>
 8007728:	0002      	movs	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	4a0b      	ldr	r2, [pc, #44]	@ (800775c <HAL_RCC_OscConfig+0x364>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d915      	bls.n	8007760 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e078      	b.n	800782a <HAL_RCC_OscConfig+0x432>
 8007738:	40021000 	.word	0x40021000
 800773c:	fffeffff 	.word	0xfffeffff
 8007740:	fffbffff 	.word	0xfffbffff
 8007744:	ffff80ff 	.word	0xffff80ff
 8007748:	ffffc7ff 	.word	0xffffc7ff
 800774c:	02dc6c00 	.word	0x02dc6c00
 8007750:	20000074 	.word	0x20000074
 8007754:	20000078 	.word	0x20000078
 8007758:	fffffeff 	.word	0xfffffeff
 800775c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007760:	4b34      	ldr	r3, [pc, #208]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 8007762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007764:	2202      	movs	r2, #2
 8007766:	4013      	ands	r3, r2
 8007768:	d0dc      	beq.n	8007724 <HAL_RCC_OscConfig+0x32c>
 800776a:	e013      	b.n	8007794 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776c:	f7fc fa0c 	bl	8003b88 <HAL_GetTick>
 8007770:	0003      	movs	r3, r0
 8007772:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8007774:	e009      	b.n	800778a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007776:	f7fc fa07 	bl	8003b88 <HAL_GetTick>
 800777a:	0002      	movs	r2, r0
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	4a2d      	ldr	r2, [pc, #180]	@ (8007838 <HAL_RCC_OscConfig+0x440>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e04f      	b.n	800782a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800778a:	4b2a      	ldr	r3, [pc, #168]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 800778c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778e:	2202      	movs	r2, #2
 8007790:	4013      	ands	r3, r2
 8007792:	d1f0      	bne.n	8007776 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007794:	230f      	movs	r3, #15
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800779e:	4b25      	ldr	r3, [pc, #148]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 80077a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077a2:	4b24      	ldr	r3, [pc, #144]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 80077a4:	4925      	ldr	r1, [pc, #148]	@ (800783c <HAL_RCC_OscConfig+0x444>)
 80077a6:	400a      	ands	r2, r1
 80077a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2210      	movs	r2, #16
 80077b0:	4013      	ands	r3, r2
 80077b2:	d039      	beq.n	8007828 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01b      	beq.n	80077f4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 80077c2:	2180      	movs	r1, #128	@ 0x80
 80077c4:	03c9      	lsls	r1, r1, #15
 80077c6:	430a      	orrs	r2, r1
 80077c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ca:	f7fc f9dd 	bl	8003b88 <HAL_GetTick>
 80077ce:	0003      	movs	r3, r0
 80077d0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077d4:	f7fc f9d8 	bl	8003b88 <HAL_GetTick>
 80077d8:	0002      	movs	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e021      	b.n	800782a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80077e6:	4b13      	ldr	r3, [pc, #76]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	2380      	movs	r3, #128	@ 0x80
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	4013      	ands	r3, r2
 80077f0:	d0f0      	beq.n	80077d4 <HAL_RCC_OscConfig+0x3dc>
 80077f2:	e019      	b.n	8007828 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 80077fa:	4911      	ldr	r1, [pc, #68]	@ (8007840 <HAL_RCC_OscConfig+0x448>)
 80077fc:	400a      	ands	r2, r1
 80077fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007800:	f7fc f9c2 	bl	8003b88 <HAL_GetTick>
 8007804:	0003      	movs	r3, r0
 8007806:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800780a:	f7fc f9bd 	bl	8003b88 <HAL_GetTick>
 800780e:	0002      	movs	r2, r0
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e006      	b.n	800782a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <HAL_RCC_OscConfig+0x43c>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	2380      	movs	r3, #128	@ 0x80
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	4013      	ands	r3, r2
 8007826:	d1f0      	bne.n	800780a <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	0018      	movs	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	b006      	add	sp, #24
 8007830:	bd80      	pop	{r7, pc}
 8007832:	46c0      	nop			@ (mov r8, r8)
 8007834:	40021000 	.word	0x40021000
 8007838:	00001388 	.word	0x00001388
 800783c:	efffffff 	.word	0xefffffff
 8007840:	ffbfffff 	.word	0xffbfffff

08007844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0f6      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007858:	4b7d      	ldr	r3, [pc, #500]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2207      	movs	r2, #7
 800785e:	4013      	ands	r3, r2
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d91e      	bls.n	80078a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007866:	4b7a      	ldr	r3, [pc, #488]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2207      	movs	r2, #7
 800786c:	4393      	bics	r3, r2
 800786e:	0019      	movs	r1, r3
 8007870:	4b77      	ldr	r3, [pc, #476]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007878:	f7fc f986 	bl	8003b88 <HAL_GetTick>
 800787c:	0003      	movs	r3, r0
 800787e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007880:	e009      	b.n	8007896 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007882:	f7fc f981 	bl	8003b88 <HAL_GetTick>
 8007886:	0002      	movs	r2, r0
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	4a71      	ldr	r2, [pc, #452]	@ (8007a54 <HAL_RCC_ClockConfig+0x210>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e0d7      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007896:	4b6e      	ldr	r3, [pc, #440]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2207      	movs	r2, #7
 800789c:	4013      	ands	r3, r2
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d1ee      	bne.n	8007882 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2202      	movs	r2, #2
 80078aa:	4013      	ands	r3, r2
 80078ac:	d017      	beq.n	80078de <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2204      	movs	r2, #4
 80078b4:	4013      	ands	r3, r2
 80078b6:	d008      	beq.n	80078ca <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80078b8:	4b67      	ldr	r3, [pc, #412]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4a67      	ldr	r2, [pc, #412]	@ (8007a5c <HAL_RCC_ClockConfig+0x218>)
 80078be:	401a      	ands	r2, r3
 80078c0:	4b65      	ldr	r3, [pc, #404]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 80078c2:	21b0      	movs	r1, #176	@ 0xb0
 80078c4:	0109      	lsls	r1, r1, #4
 80078c6:	430a      	orrs	r2, r1
 80078c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ca:	4b63      	ldr	r3, [pc, #396]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	4a64      	ldr	r2, [pc, #400]	@ (8007a60 <HAL_RCC_ClockConfig+0x21c>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	0019      	movs	r1, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	4b5f      	ldr	r3, [pc, #380]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 80078da:	430a      	orrs	r2, r1
 80078dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2201      	movs	r2, #1
 80078e4:	4013      	ands	r3, r2
 80078e6:	d100      	bne.n	80078ea <HAL_RCC_ClockConfig+0xa6>
 80078e8:	e061      	b.n	80079ae <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80078ea:	4b5b      	ldr	r3, [pc, #364]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	221c      	movs	r2, #28
 80078f0:	4393      	bics	r3, r2
 80078f2:	0019      	movs	r1, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	4b57      	ldr	r3, [pc, #348]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 80078fa:	430a      	orrs	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d107      	bne.n	8007916 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007906:	4b54      	ldr	r3, [pc, #336]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	2380      	movs	r3, #128	@ 0x80
 800790c:	029b      	lsls	r3, r3, #10
 800790e:	4013      	ands	r3, r2
 8007910:	d12b      	bne.n	800796a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e097      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800791e:	4b4e      	ldr	r3, [pc, #312]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	2380      	movs	r3, #128	@ 0x80
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	4013      	ands	r3, r2
 8007928:	d11f      	bne.n	800796a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e08b      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d107      	bne.n	8007946 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8007936:	4b48      	ldr	r3, [pc, #288]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	2380      	movs	r3, #128	@ 0x80
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	4013      	ands	r3, r2
 8007940:	d113      	bne.n	800796a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e07f      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d106      	bne.n	800795c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800794e:	4b42      	ldr	r3, [pc, #264]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 8007950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007952:	2202      	movs	r2, #2
 8007954:	4013      	ands	r3, r2
 8007956:	d108      	bne.n	800796a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e074      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800795c:	4b3e      	ldr	r3, [pc, #248]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 800795e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007960:	2202      	movs	r2, #2
 8007962:	4013      	ands	r3, r2
 8007964:	d101      	bne.n	800796a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e06d      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800796a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2207      	movs	r2, #7
 8007970:	4393      	bics	r3, r2
 8007972:	0019      	movs	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	4b37      	ldr	r3, [pc, #220]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 800797a:	430a      	orrs	r2, r1
 800797c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800797e:	f7fc f903 	bl	8003b88 <HAL_GetTick>
 8007982:	0003      	movs	r3, r0
 8007984:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007986:	e009      	b.n	800799c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007988:	f7fc f8fe 	bl	8003b88 <HAL_GetTick>
 800798c:	0002      	movs	r2, r0
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	4a30      	ldr	r2, [pc, #192]	@ (8007a54 <HAL_RCC_ClockConfig+0x210>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d901      	bls.n	800799c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e054      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800799c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2238      	movs	r2, #56	@ 0x38
 80079a2:	401a      	ands	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d1ec      	bne.n	8007988 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079ae:	4b28      	ldr	r3, [pc, #160]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2207      	movs	r2, #7
 80079b4:	4013      	ands	r3, r2
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d21e      	bcs.n	80079fa <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079bc:	4b24      	ldr	r3, [pc, #144]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2207      	movs	r2, #7
 80079c2:	4393      	bics	r3, r2
 80079c4:	0019      	movs	r1, r3
 80079c6:	4b22      	ldr	r3, [pc, #136]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80079ce:	f7fc f8db 	bl	8003b88 <HAL_GetTick>
 80079d2:	0003      	movs	r3, r0
 80079d4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80079d6:	e009      	b.n	80079ec <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80079d8:	f7fc f8d6 	bl	8003b88 <HAL_GetTick>
 80079dc:	0002      	movs	r2, r0
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <HAL_RCC_ClockConfig+0x210>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e02c      	b.n	8007a46 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80079ec:	4b18      	ldr	r3, [pc, #96]	@ (8007a50 <HAL_RCC_ClockConfig+0x20c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2207      	movs	r2, #7
 80079f2:	4013      	ands	r3, r2
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d1ee      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2204      	movs	r2, #4
 8007a00:	4013      	ands	r3, r2
 8007a02:	d009      	beq.n	8007a18 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007a04:	4b14      	ldr	r3, [pc, #80]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	4a16      	ldr	r2, [pc, #88]	@ (8007a64 <HAL_RCC_ClockConfig+0x220>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	0019      	movs	r1, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691a      	ldr	r2, [r3, #16]
 8007a12:	4b11      	ldr	r3, [pc, #68]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007a18:	f000 f82c 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8007a1c:	0001      	movs	r1, r0
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a58 <HAL_RCC_ClockConfig+0x214>)
 8007a20:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	220f      	movs	r2, #15
 8007a26:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007a28:	4b0f      	ldr	r3, [pc, #60]	@ (8007a68 <HAL_RCC_ClockConfig+0x224>)
 8007a2a:	0092      	lsls	r2, r2, #2
 8007a2c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007a2e:	221f      	movs	r2, #31
 8007a30:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007a32:	000a      	movs	r2, r1
 8007a34:	40da      	lsrs	r2, r3
 8007a36:	4b0d      	ldr	r3, [pc, #52]	@ (8007a6c <HAL_RCC_ClockConfig+0x228>)
 8007a38:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a70 <HAL_RCC_ClockConfig+0x22c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7fc f846 	bl	8003ad0 <HAL_InitTick>
 8007a44:	0003      	movs	r3, r0
}
 8007a46:	0018      	movs	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b004      	add	sp, #16
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	46c0      	nop			@ (mov r8, r8)
 8007a50:	40022000 	.word	0x40022000
 8007a54:	00001388 	.word	0x00001388
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	ffff84ff 	.word	0xffff84ff
 8007a60:	fffff0ff 	.word	0xfffff0ff
 8007a64:	ffff8fff 	.word	0xffff8fff
 8007a68:	0800b274 	.word	0x0800b274
 8007a6c:	20000074 	.word	0x20000074
 8007a70:	20000078 	.word	0x20000078

08007a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8007a7a:	4b27      	ldr	r3, [pc, #156]	@ (8007b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	089b      	lsrs	r3, r3, #2
 8007a80:	2207      	movs	r2, #7
 8007a82:	4013      	ands	r3, r2
 8007a84:	3301      	adds	r3, #1
 8007a86:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a88:	4b23      	ldr	r3, [pc, #140]	@ (8007b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2238      	movs	r2, #56	@ 0x38
 8007a8e:	4013      	ands	r3, r2
 8007a90:	d10f      	bne.n	8007ab2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007a92:	4b21      	ldr	r3, [pc, #132]	@ (8007b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	0adb      	lsrs	r3, r3, #11
 8007a98:	2207      	movs	r2, #7
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	0013      	movs	r3, r2
 8007aa2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	481d      	ldr	r0, [pc, #116]	@ (8007b1c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007aa8:	f7f8 fb2e 	bl	8000108 <__udivsi3>
 8007aac:	0003      	movs	r3, r0
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	e027      	b.n	8007b02 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007ab2:	4b19      	ldr	r3, [pc, #100]	@ (8007b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2238      	movs	r2, #56	@ 0x38
 8007ab8:	4013      	ands	r3, r2
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d102      	bne.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007abe:	4b18      	ldr	r3, [pc, #96]	@ (8007b20 <HAL_RCC_GetSysClockFreq+0xac>)
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e01e      	b.n	8007b02 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8007ac4:	4b14      	ldr	r3, [pc, #80]	@ (8007b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2238      	movs	r2, #56	@ 0x38
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d103      	bne.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007ad0:	2380      	movs	r3, #128	@ 0x80
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	60fb      	str	r3, [r7, #12]
 8007ad6:	e014      	b.n	8007b02 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2238      	movs	r2, #56	@ 0x38
 8007ade:	4013      	ands	r3, r2
 8007ae0:	2b18      	cmp	r3, #24
 8007ae2:	d103      	bne.n	8007aec <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007ae4:	23fa      	movs	r3, #250	@ 0xfa
 8007ae6:	01db      	lsls	r3, r3, #7
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	e00a      	b.n	8007b02 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8007aec:	4b0a      	ldr	r3, [pc, #40]	@ (8007b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	2238      	movs	r2, #56	@ 0x38
 8007af2:	4013      	ands	r3, r2
 8007af4:	2b10      	cmp	r3, #16
 8007af6:	d102      	bne.n	8007afe <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8007af8:	4b08      	ldr	r3, [pc, #32]	@ (8007b1c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	e001      	b.n	8007b02 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7f8 faff 	bl	8000108 <__udivsi3>
 8007b0a:	0003      	movs	r3, r0
 8007b0c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	0018      	movs	r0, r3
 8007b12:	46bd      	mov	sp, r7
 8007b14:	b004      	add	sp, #16
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40021000 	.word	0x40021000
 8007b1c:	02dc6c00 	.word	0x02dc6c00
 8007b20:	007a1200 	.word	0x007a1200

08007b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007b28:	f7ff ffa4 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8007b2c:	0001      	movs	r1, r0
 8007b2e:	4b09      	ldr	r3, [pc, #36]	@ (8007b54 <HAL_RCC_GetHCLKFreq+0x30>)
 8007b30:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	220f      	movs	r2, #15
 8007b36:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007b38:	4b07      	ldr	r3, [pc, #28]	@ (8007b58 <HAL_RCC_GetHCLKFreq+0x34>)
 8007b3a:	0092      	lsls	r2, r2, #2
 8007b3c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007b3e:	221f      	movs	r2, #31
 8007b40:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007b42:	000a      	movs	r2, r1
 8007b44:	40da      	lsrs	r2, r3
 8007b46:	4b05      	ldr	r3, [pc, #20]	@ (8007b5c <HAL_RCC_GetHCLKFreq+0x38>)
 8007b48:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8007b4a:	4b04      	ldr	r3, [pc, #16]	@ (8007b5c <HAL_RCC_GetHCLKFreq+0x38>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40021000 	.word	0x40021000
 8007b58:	0800b274 	.word	0x0800b274
 8007b5c:	20000074 	.word	0x20000074

08007b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8007b64:	f7ff ffde 	bl	8007b24 <HAL_RCC_GetHCLKFreq>
 8007b68:	0001      	movs	r1, r0
 8007b6a:	4b07      	ldr	r3, [pc, #28]	@ (8007b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	0b1b      	lsrs	r3, r3, #12
 8007b70:	2207      	movs	r2, #7
 8007b72:	401a      	ands	r2, r3
 8007b74:	4b05      	ldr	r3, [pc, #20]	@ (8007b8c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007b76:	0092      	lsls	r2, r2, #2
 8007b78:	58d3      	ldr	r3, [r2, r3]
 8007b7a:	221f      	movs	r2, #31
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	40d9      	lsrs	r1, r3
 8007b80:	000b      	movs	r3, r1
}
 8007b82:	0018      	movs	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	0800b2b4 	.word	0x0800b2b4

08007b90 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007b98:	2313      	movs	r3, #19
 8007b9a:	18fb      	adds	r3, r7, r3
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ba0:	2312      	movs	r3, #18
 8007ba2:	18fb      	adds	r3, r7, r3
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2240      	movs	r2, #64	@ 0x40
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d100      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8007bb2:	e079      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bb4:	2011      	movs	r0, #17
 8007bb6:	183b      	adds	r3, r7, r0
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bc0:	2380      	movs	r3, #128	@ 0x80
 8007bc2:	055b      	lsls	r3, r3, #21
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	d110      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bc8:	4b67      	ldr	r3, [pc, #412]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bcc:	4b66      	ldr	r3, [pc, #408]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bce:	2180      	movs	r1, #128	@ 0x80
 8007bd0:	0549      	lsls	r1, r1, #21
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007bd6:	4b64      	ldr	r3, [pc, #400]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bda:	2380      	movs	r3, #128	@ 0x80
 8007bdc:	055b      	lsls	r3, r3, #21
 8007bde:	4013      	ands	r3, r2
 8007be0:	60bb      	str	r3, [r7, #8]
 8007be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007be4:	183b      	adds	r3, r7, r0
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8007bea:	4b5f      	ldr	r3, [pc, #380]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007bee:	23c0      	movs	r3, #192	@ 0xc0
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d019      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d014      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8007c06:	4b58      	ldr	r3, [pc, #352]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c0a:	4a58      	ldr	r2, [pc, #352]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c10:	4b55      	ldr	r3, [pc, #340]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c14:	4b54      	ldr	r3, [pc, #336]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c16:	2180      	movs	r1, #128	@ 0x80
 8007c18:	0249      	lsls	r1, r1, #9
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1e:	4b52      	ldr	r3, [pc, #328]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c22:	4b51      	ldr	r3, [pc, #324]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c24:	4952      	ldr	r1, [pc, #328]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007c26:	400a      	ands	r2, r1
 8007c28:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8007c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2201      	movs	r2, #1
 8007c34:	4013      	ands	r3, r2
 8007c36:	d016      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c38:	f7fb ffa6 	bl	8003b88 <HAL_GetTick>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007c40:	e00c      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c42:	f7fb ffa1 	bl	8003b88 <HAL_GetTick>
 8007c46:	0002      	movs	r2, r0
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	4a49      	ldr	r2, [pc, #292]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d904      	bls.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8007c52:	2313      	movs	r3, #19
 8007c54:	18fb      	adds	r3, r7, r3
 8007c56:	2203      	movs	r2, #3
 8007c58:	701a      	strb	r2, [r3, #0]
          break;
 8007c5a:	e004      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007c5c:	4b42      	ldr	r3, [pc, #264]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c60:	2202      	movs	r2, #2
 8007c62:	4013      	ands	r3, r2
 8007c64:	d0ed      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8007c66:	2313      	movs	r3, #19
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c70:	4b3d      	ldr	r3, [pc, #244]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c74:	4a3d      	ldr	r2, [pc, #244]	@ (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	0019      	movs	r1, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69da      	ldr	r2, [r3, #28]
 8007c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c80:	430a      	orrs	r2, r1
 8007c82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c84:	e005      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c86:	2312      	movs	r3, #18
 8007c88:	18fb      	adds	r3, r7, r3
 8007c8a:	2213      	movs	r2, #19
 8007c8c:	18ba      	adds	r2, r7, r2
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c92:	2311      	movs	r3, #17
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d105      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c9c:	4b32      	ldr	r3, [pc, #200]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ca0:	4b31      	ldr	r3, [pc, #196]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ca2:	4935      	ldr	r1, [pc, #212]	@ (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007ca4:	400a      	ands	r2, r1
 8007ca6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2201      	movs	r2, #1
 8007cae:	4013      	ands	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	4393      	bics	r3, r2
 8007cba:	0019      	movs	r1, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	4b29      	ldr	r3, [pc, #164]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	4013      	ands	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cd0:	4b25      	ldr	r3, [pc, #148]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd4:	4a29      	ldr	r2, [pc, #164]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	0019      	movs	r1, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	4b22      	ldr	r3, [pc, #136]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	4013      	ands	r3, r2
 8007cec:	d008      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cee:	4b1e      	ldr	r3, [pc, #120]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	0899      	lsrs	r1, r3, #2
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2208      	movs	r2, #8
 8007d06:	4013      	ands	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d0a:	4b17      	ldr	r3, [pc, #92]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	0019      	movs	r1, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	695a      	ldr	r2, [r3, #20]
 8007d18:	4b13      	ldr	r3, [pc, #76]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2204      	movs	r2, #4
 8007d24:	4013      	ands	r3, r2
 8007d26:	d009      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007d28:	4b0f      	ldr	r3, [pc, #60]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2c:	4a15      	ldr	r2, [pc, #84]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007d2e:	4013      	ands	r3, r2
 8007d30:	0019      	movs	r1, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2280      	movs	r2, #128	@ 0x80
 8007d42:	4013      	ands	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8007d46:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	22e0      	movs	r2, #224	@ 0xe0
 8007d4c:	4393      	bics	r3, r2
 8007d4e:	0019      	movs	r1, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	4b04      	ldr	r3, [pc, #16]	@ (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d56:	430a      	orrs	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]
  }
  return status;
 8007d5a:	2312      	movs	r3, #18
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	781b      	ldrb	r3, [r3, #0]
}
 8007d60:	0018      	movs	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	b006      	add	sp, #24
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	fffffcff 	.word	0xfffffcff
 8007d70:	fffeffff 	.word	0xfffeffff
 8007d74:	00001388 	.word	0x00001388
 8007d78:	efffffff 	.word	0xefffffff
 8007d7c:	ffffcfff 	.word	0xffffcfff
 8007d80:	ffffefff 	.word	0xffffefff
 8007d84:	ffff3fff 	.word	0xffff3fff

08007d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e0a8      	b.n	8007eec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	2382      	movs	r3, #130	@ 0x82
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d009      	beq.n	8007dc2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	61da      	str	r2, [r3, #28]
 8007db4:	e005      	b.n	8007dc2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	225d      	movs	r2, #93	@ 0x5d
 8007dcc:	5c9b      	ldrb	r3, [r3, r2]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d107      	bne.n	8007de4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	225c      	movs	r2, #92	@ 0x5c
 8007dd8:	2100      	movs	r1, #0
 8007dda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	0018      	movs	r0, r3
 8007de0:	f7fb fc48 	bl	8003674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	225d      	movs	r2, #93	@ 0x5d
 8007de8:	2102      	movs	r1, #2
 8007dea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2140      	movs	r1, #64	@ 0x40
 8007df8:	438a      	bics	r2, r1
 8007dfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	23e0      	movs	r3, #224	@ 0xe0
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d902      	bls.n	8007e0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e002      	b.n	8007e14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e0e:	2380      	movs	r3, #128	@ 0x80
 8007e10:	015b      	lsls	r3, r3, #5
 8007e12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	23f0      	movs	r3, #240	@ 0xf0
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d008      	beq.n	8007e32 <HAL_SPI_Init+0xaa>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	23e0      	movs	r3, #224	@ 0xe0
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d002      	beq.n	8007e32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	2382      	movs	r3, #130	@ 0x82
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	401a      	ands	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6899      	ldr	r1, [r3, #8]
 8007e40:	2384      	movs	r3, #132	@ 0x84
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	400b      	ands	r3, r1
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	400b      	ands	r3, r1
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	2101      	movs	r1, #1
 8007e58:	400b      	ands	r3, r1
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6999      	ldr	r1, [r3, #24]
 8007e60:	2380      	movs	r3, #128	@ 0x80
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	400b      	ands	r3, r1
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	2138      	movs	r1, #56	@ 0x38
 8007e6e:	400b      	ands	r3, r1
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	2180      	movs	r1, #128	@ 0x80
 8007e78:	400b      	ands	r3, r1
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	0011      	movs	r1, r2
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	019b      	lsls	r3, r3, #6
 8007e86:	401a      	ands	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	2204      	movs	r2, #4
 8007e98:	401a      	ands	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9e:	2110      	movs	r1, #16
 8007ea0:	400b      	ands	r3, r1
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea8:	2108      	movs	r1, #8
 8007eaa:	400b      	ands	r3, r1
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68d9      	ldr	r1, [r3, #12]
 8007eb2:	23f0      	movs	r3, #240	@ 0xf0
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	400b      	ands	r3, r1
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	0011      	movs	r1, r2
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	2380      	movs	r3, #128	@ 0x80
 8007ec0:	015b      	lsls	r3, r3, #5
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69da      	ldr	r2, [r3, #28]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4907      	ldr	r1, [pc, #28]	@ (8007ef4 <HAL_SPI_Init+0x16c>)
 8007ed8:	400a      	ands	r2, r1
 8007eda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	225d      	movs	r2, #93	@ 0x5d
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	0018      	movs	r0, r3
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b004      	add	sp, #16
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	fffff7ff 	.word	0xfffff7ff

08007ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e04a      	b.n	8007fa0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	223d      	movs	r2, #61	@ 0x3d
 8007f0e:	5c9b      	ldrb	r3, [r3, r2]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d107      	bne.n	8007f26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	223c      	movs	r2, #60	@ 0x3c
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	0018      	movs	r0, r3
 8007f22:	f7fb fc4d 	bl	80037c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	223d      	movs	r2, #61	@ 0x3d
 8007f2a:	2102      	movs	r1, #2
 8007f2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3304      	adds	r3, #4
 8007f36:	0019      	movs	r1, r3
 8007f38:	0010      	movs	r0, r2
 8007f3a:	f000 f9d9 	bl	80082f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2248      	movs	r2, #72	@ 0x48
 8007f42:	2101      	movs	r1, #1
 8007f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	223e      	movs	r2, #62	@ 0x3e
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	5499      	strb	r1, [r3, r2]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	223f      	movs	r2, #63	@ 0x3f
 8007f52:	2101      	movs	r1, #1
 8007f54:	5499      	strb	r1, [r3, r2]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2240      	movs	r2, #64	@ 0x40
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	5499      	strb	r1, [r3, r2]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2241      	movs	r2, #65	@ 0x41
 8007f62:	2101      	movs	r1, #1
 8007f64:	5499      	strb	r1, [r3, r2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2242      	movs	r2, #66	@ 0x42
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	5499      	strb	r1, [r3, r2]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2243      	movs	r2, #67	@ 0x43
 8007f72:	2101      	movs	r1, #1
 8007f74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2244      	movs	r2, #68	@ 0x44
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	5499      	strb	r1, [r3, r2]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2245      	movs	r2, #69	@ 0x45
 8007f82:	2101      	movs	r1, #1
 8007f84:	5499      	strb	r1, [r3, r2]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2246      	movs	r2, #70	@ 0x46
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	5499      	strb	r1, [r3, r2]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2247      	movs	r2, #71	@ 0x47
 8007f92:	2101      	movs	r1, #1
 8007f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	223d      	movs	r2, #61	@ 0x3d
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b002      	add	sp, #8
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	223d      	movs	r2, #61	@ 0x3d
 8007fb4:	5c9b      	ldrb	r3, [r3, r2]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d001      	beq.n	8007fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e035      	b.n	800802c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	223d      	movs	r2, #61	@ 0x3d
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a19      	ldr	r2, [pc, #100]	@ (8008034 <HAL_TIM_Base_Start+0x8c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00a      	beq.n	8007fe8 <HAL_TIM_Base_Start+0x40>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	2380      	movs	r3, #128	@ 0x80
 8007fd8:	05db      	lsls	r3, r3, #23
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d004      	beq.n	8007fe8 <HAL_TIM_Base_Start+0x40>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a15      	ldr	r2, [pc, #84]	@ (8008038 <HAL_TIM_Base_Start+0x90>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d116      	bne.n	8008016 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	4a13      	ldr	r2, [pc, #76]	@ (800803c <HAL_TIM_Base_Start+0x94>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b06      	cmp	r3, #6
 8007ff8:	d016      	beq.n	8008028 <HAL_TIM_Base_Start+0x80>
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	2380      	movs	r3, #128	@ 0x80
 8007ffe:	025b      	lsls	r3, r3, #9
 8008000:	429a      	cmp	r2, r3
 8008002:	d011      	beq.n	8008028 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2101      	movs	r1, #1
 8008010:	430a      	orrs	r2, r1
 8008012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	e008      	b.n	8008028 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2101      	movs	r1, #1
 8008022:	430a      	orrs	r2, r1
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e000      	b.n	800802a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008028:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	0018      	movs	r0, r3
 800802e:	46bd      	mov	sp, r7
 8008030:	b004      	add	sp, #16
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40012c00 	.word	0x40012c00
 8008038:	40000400 	.word	0x40000400
 800803c:	00010007 	.word	0x00010007

08008040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e04a      	b.n	80080e8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	223d      	movs	r2, #61	@ 0x3d
 8008056:	5c9b      	ldrb	r3, [r3, r2]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	223c      	movs	r2, #60	@ 0x3c
 8008062:	2100      	movs	r1, #0
 8008064:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	0018      	movs	r0, r3
 800806a:	f7fb fb89 	bl	8003780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	223d      	movs	r2, #61	@ 0x3d
 8008072:	2102      	movs	r1, #2
 8008074:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3304      	adds	r3, #4
 800807e:	0019      	movs	r1, r3
 8008080:	0010      	movs	r0, r2
 8008082:	f000 f935 	bl	80082f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2248      	movs	r2, #72	@ 0x48
 800808a:	2101      	movs	r1, #1
 800808c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	223e      	movs	r2, #62	@ 0x3e
 8008092:	2101      	movs	r1, #1
 8008094:	5499      	strb	r1, [r3, r2]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	223f      	movs	r2, #63	@ 0x3f
 800809a:	2101      	movs	r1, #1
 800809c:	5499      	strb	r1, [r3, r2]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2240      	movs	r2, #64	@ 0x40
 80080a2:	2101      	movs	r1, #1
 80080a4:	5499      	strb	r1, [r3, r2]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2241      	movs	r2, #65	@ 0x41
 80080aa:	2101      	movs	r1, #1
 80080ac:	5499      	strb	r1, [r3, r2]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2242      	movs	r2, #66	@ 0x42
 80080b2:	2101      	movs	r1, #1
 80080b4:	5499      	strb	r1, [r3, r2]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2243      	movs	r2, #67	@ 0x43
 80080ba:	2101      	movs	r1, #1
 80080bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2244      	movs	r2, #68	@ 0x44
 80080c2:	2101      	movs	r1, #1
 80080c4:	5499      	strb	r1, [r3, r2]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2245      	movs	r2, #69	@ 0x45
 80080ca:	2101      	movs	r1, #1
 80080cc:	5499      	strb	r1, [r3, r2]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2246      	movs	r2, #70	@ 0x46
 80080d2:	2101      	movs	r1, #1
 80080d4:	5499      	strb	r1, [r3, r2]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2247      	movs	r2, #71	@ 0x47
 80080da:	2101      	movs	r1, #1
 80080dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	223d      	movs	r2, #61	@ 0x3d
 80080e2:	2101      	movs	r1, #1
 80080e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	0018      	movs	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b002      	add	sp, #8
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080fc:	2317      	movs	r3, #23
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	223c      	movs	r2, #60	@ 0x3c
 8008108:	5c9b      	ldrb	r3, [r3, r2]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_TIM_PWM_ConfigChannel+0x22>
 800810e:	2302      	movs	r3, #2
 8008110:	e0e5      	b.n	80082de <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	223c      	movs	r2, #60	@ 0x3c
 8008116:	2101      	movs	r1, #1
 8008118:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b14      	cmp	r3, #20
 800811e:	d900      	bls.n	8008122 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008120:	e0d1      	b.n	80082c6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	009a      	lsls	r2, r3, #2
 8008126:	4b70      	ldr	r3, [pc, #448]	@ (80082e8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008128:	18d3      	adds	r3, r2, r3
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	0011      	movs	r1, r2
 8008136:	0018      	movs	r0, r3
 8008138:	f000 f95e 	bl	80083f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2108      	movs	r1, #8
 8008148:	430a      	orrs	r2, r1
 800814a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2104      	movs	r1, #4
 8008158:	438a      	bics	r2, r1
 800815a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6999      	ldr	r1, [r3, #24]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	691a      	ldr	r2, [r3, #16]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	619a      	str	r2, [r3, #24]
      break;
 800816e:	e0af      	b.n	80082d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	0011      	movs	r1, r2
 8008178:	0018      	movs	r0, r3
 800817a:	f000 f9bd 	bl	80084f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2180      	movs	r1, #128	@ 0x80
 800818a:	0109      	lsls	r1, r1, #4
 800818c:	430a      	orrs	r2, r1
 800818e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4954      	ldr	r1, [pc, #336]	@ (80082ec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800819c:	400a      	ands	r2, r1
 800819e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6999      	ldr	r1, [r3, #24]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	021a      	lsls	r2, r3, #8
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	619a      	str	r2, [r3, #24]
      break;
 80081b4:	e08c      	b.n	80082d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	0011      	movs	r1, r2
 80081be:	0018      	movs	r0, r3
 80081c0:	f000 fa18 	bl	80085f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	69da      	ldr	r2, [r3, #28]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2108      	movs	r1, #8
 80081d0:	430a      	orrs	r2, r1
 80081d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	69da      	ldr	r2, [r3, #28]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2104      	movs	r1, #4
 80081e0:	438a      	bics	r2, r1
 80081e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69d9      	ldr	r1, [r3, #28]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	61da      	str	r2, [r3, #28]
      break;
 80081f6:	e06b      	b.n	80082d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	0011      	movs	r1, r2
 8008200:	0018      	movs	r0, r3
 8008202:	f000 fa79 	bl	80086f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2180      	movs	r1, #128	@ 0x80
 8008212:	0109      	lsls	r1, r1, #4
 8008214:	430a      	orrs	r2, r1
 8008216:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69da      	ldr	r2, [r3, #28]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4932      	ldr	r1, [pc, #200]	@ (80082ec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008224:	400a      	ands	r2, r1
 8008226:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69d9      	ldr	r1, [r3, #28]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	021a      	lsls	r2, r3, #8
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	61da      	str	r2, [r3, #28]
      break;
 800823c:	e048      	b.n	80082d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	0011      	movs	r1, r2
 8008246:	0018      	movs	r0, r3
 8008248:	f000 faba 	bl	80087c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2108      	movs	r1, #8
 8008258:	430a      	orrs	r2, r1
 800825a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2104      	movs	r1, #4
 8008268:	438a      	bics	r2, r1
 800826a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	691a      	ldr	r2, [r3, #16]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800827e:	e027      	b.n	80082d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	0011      	movs	r1, r2
 8008288:	0018      	movs	r0, r3
 800828a:	f000 faf3 	bl	8008874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2180      	movs	r1, #128	@ 0x80
 800829a:	0109      	lsls	r1, r1, #4
 800829c:	430a      	orrs	r2, r1
 800829e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4910      	ldr	r1, [pc, #64]	@ (80082ec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80082ac:	400a      	ands	r2, r1
 80082ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	021a      	lsls	r2, r3, #8
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80082c4:	e004      	b.n	80082d0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80082c6:	2317      	movs	r3, #23
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	2201      	movs	r2, #1
 80082cc:	701a      	strb	r2, [r3, #0]
      break;
 80082ce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	223c      	movs	r2, #60	@ 0x3c
 80082d4:	2100      	movs	r1, #0
 80082d6:	5499      	strb	r1, [r3, r2]

  return status;
 80082d8:	2317      	movs	r3, #23
 80082da:	18fb      	adds	r3, r7, r3
 80082dc:	781b      	ldrb	r3, [r3, #0]
}
 80082de:	0018      	movs	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	b006      	add	sp, #24
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	46c0      	nop			@ (mov r8, r8)
 80082e8:	0800b2d4 	.word	0x0800b2d4
 80082ec:	fffffbff 	.word	0xfffffbff

080082f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a37      	ldr	r2, [pc, #220]	@ (80083e0 <TIM_Base_SetConfig+0xf0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d008      	beq.n	800831a <TIM_Base_SetConfig+0x2a>
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	2380      	movs	r3, #128	@ 0x80
 800830c:	05db      	lsls	r3, r3, #23
 800830e:	429a      	cmp	r2, r3
 8008310:	d003      	beq.n	800831a <TIM_Base_SetConfig+0x2a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a33      	ldr	r2, [pc, #204]	@ (80083e4 <TIM_Base_SetConfig+0xf4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d108      	bne.n	800832c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2270      	movs	r2, #112	@ 0x70
 800831e:	4393      	bics	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a2c      	ldr	r2, [pc, #176]	@ (80083e0 <TIM_Base_SetConfig+0xf0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d014      	beq.n	800835e <TIM_Base_SetConfig+0x6e>
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	2380      	movs	r3, #128	@ 0x80
 8008338:	05db      	lsls	r3, r3, #23
 800833a:	429a      	cmp	r2, r3
 800833c:	d00f      	beq.n	800835e <TIM_Base_SetConfig+0x6e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a28      	ldr	r2, [pc, #160]	@ (80083e4 <TIM_Base_SetConfig+0xf4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00b      	beq.n	800835e <TIM_Base_SetConfig+0x6e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a27      	ldr	r2, [pc, #156]	@ (80083e8 <TIM_Base_SetConfig+0xf8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d007      	beq.n	800835e <TIM_Base_SetConfig+0x6e>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a26      	ldr	r2, [pc, #152]	@ (80083ec <TIM_Base_SetConfig+0xfc>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d003      	beq.n	800835e <TIM_Base_SetConfig+0x6e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a25      	ldr	r2, [pc, #148]	@ (80083f0 <TIM_Base_SetConfig+0x100>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d108      	bne.n	8008370 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4a24      	ldr	r2, [pc, #144]	@ (80083f4 <TIM_Base_SetConfig+0x104>)
 8008362:	4013      	ands	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	4313      	orrs	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2280      	movs	r2, #128	@ 0x80
 8008374:	4393      	bics	r3, r2
 8008376:	001a      	movs	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	689a      	ldr	r2, [r3, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a11      	ldr	r2, [pc, #68]	@ (80083e0 <TIM_Base_SetConfig+0xf0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d007      	beq.n	80083ae <TIM_Base_SetConfig+0xbe>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a12      	ldr	r2, [pc, #72]	@ (80083ec <TIM_Base_SetConfig+0xfc>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d003      	beq.n	80083ae <TIM_Base_SetConfig+0xbe>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a11      	ldr	r2, [pc, #68]	@ (80083f0 <TIM_Base_SetConfig+0x100>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d103      	bne.n	80083b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	691a      	ldr	r2, [r3, #16]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2201      	movs	r2, #1
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d106      	bne.n	80083d6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2201      	movs	r2, #1
 80083ce:	4393      	bics	r3, r2
 80083d0:	001a      	movs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	611a      	str	r2, [r3, #16]
  }
}
 80083d6:	46c0      	nop			@ (mov r8, r8)
 80083d8:	46bd      	mov	sp, r7
 80083da:	b004      	add	sp, #16
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			@ (mov r8, r8)
 80083e0:	40012c00 	.word	0x40012c00
 80083e4:	40000400 	.word	0x40000400
 80083e8:	40002000 	.word	0x40002000
 80083ec:	40014400 	.word	0x40014400
 80083f0:	40014800 	.word	0x40014800
 80083f4:	fffffcff 	.word	0xfffffcff

080083f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	2201      	movs	r2, #1
 800840e:	4393      	bics	r3, r2
 8008410:	001a      	movs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a2e      	ldr	r2, [pc, #184]	@ (80084e0 <TIM_OC1_SetConfig+0xe8>)
 8008426:	4013      	ands	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2203      	movs	r2, #3
 800842e:	4393      	bics	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2202      	movs	r2, #2
 8008440:	4393      	bics	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a24      	ldr	r2, [pc, #144]	@ (80084e4 <TIM_OC1_SetConfig+0xec>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d007      	beq.n	8008466 <TIM_OC1_SetConfig+0x6e>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a23      	ldr	r2, [pc, #140]	@ (80084e8 <TIM_OC1_SetConfig+0xf0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d003      	beq.n	8008466 <TIM_OC1_SetConfig+0x6e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a22      	ldr	r2, [pc, #136]	@ (80084ec <TIM_OC1_SetConfig+0xf4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d10c      	bne.n	8008480 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2208      	movs	r2, #8
 800846a:	4393      	bics	r3, r2
 800846c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2204      	movs	r2, #4
 800847c:	4393      	bics	r3, r2
 800847e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <TIM_OC1_SetConfig+0xec>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_OC1_SetConfig+0xa0>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <TIM_OC1_SetConfig+0xf0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_OC1_SetConfig+0xa0>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <TIM_OC1_SetConfig+0xf4>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d111      	bne.n	80084bc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <TIM_OC1_SetConfig+0xf8>)
 800849c:	4013      	ands	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <TIM_OC1_SetConfig+0xfc>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	46bd      	mov	sp, r7
 80084da:	b006      	add	sp, #24
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	46c0      	nop			@ (mov r8, r8)
 80084e0:	fffeff8f 	.word	0xfffeff8f
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40014400 	.word	0x40014400
 80084ec:	40014800 	.word	0x40014800
 80084f0:	fffffeff 	.word	0xfffffeff
 80084f4:	fffffdff 	.word	0xfffffdff

080084f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	2210      	movs	r2, #16
 800850e:	4393      	bics	r3, r2
 8008510:	001a      	movs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4a2c      	ldr	r2, [pc, #176]	@ (80085d8 <TIM_OC2_SetConfig+0xe0>)
 8008526:	4013      	ands	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4a2b      	ldr	r2, [pc, #172]	@ (80085dc <TIM_OC2_SetConfig+0xe4>)
 800852e:	4013      	ands	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	021b      	lsls	r3, r3, #8
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2220      	movs	r2, #32
 8008542:	4393      	bics	r3, r2
 8008544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a22      	ldr	r2, [pc, #136]	@ (80085e0 <TIM_OC2_SetConfig+0xe8>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d10d      	bne.n	8008576 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2280      	movs	r2, #128	@ 0x80
 800855e:	4393      	bics	r3, r2
 8008560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2240      	movs	r2, #64	@ 0x40
 8008572:	4393      	bics	r3, r2
 8008574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a19      	ldr	r2, [pc, #100]	@ (80085e0 <TIM_OC2_SetConfig+0xe8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d007      	beq.n	800858e <TIM_OC2_SetConfig+0x96>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a18      	ldr	r2, [pc, #96]	@ (80085e4 <TIM_OC2_SetConfig+0xec>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d003      	beq.n	800858e <TIM_OC2_SetConfig+0x96>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a17      	ldr	r2, [pc, #92]	@ (80085e8 <TIM_OC2_SetConfig+0xf0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d113      	bne.n	80085b6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	4a16      	ldr	r2, [pc, #88]	@ (80085ec <TIM_OC2_SetConfig+0xf4>)
 8008592:	4013      	ands	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	4a15      	ldr	r2, [pc, #84]	@ (80085f0 <TIM_OC2_SetConfig+0xf8>)
 800859a:	4013      	ands	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	621a      	str	r2, [r3, #32]
}
 80085d0:	46c0      	nop			@ (mov r8, r8)
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b006      	add	sp, #24
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	feff8fff 	.word	0xfeff8fff
 80085dc:	fffffcff 	.word	0xfffffcff
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40014400 	.word	0x40014400
 80085e8:	40014800 	.word	0x40014800
 80085ec:	fffffbff 	.word	0xfffffbff
 80085f0:	fffff7ff 	.word	0xfffff7ff

080085f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	4a31      	ldr	r2, [pc, #196]	@ (80086d0 <TIM_OC3_SetConfig+0xdc>)
 800860a:	401a      	ands	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4a2d      	ldr	r2, [pc, #180]	@ (80086d4 <TIM_OC3_SetConfig+0xe0>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2203      	movs	r2, #3
 8008628:	4393      	bics	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	4a27      	ldr	r2, [pc, #156]	@ (80086d8 <TIM_OC3_SetConfig+0xe4>)
 800863a:	4013      	ands	r3, r2
 800863c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a23      	ldr	r2, [pc, #140]	@ (80086dc <TIM_OC3_SetConfig+0xe8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d10d      	bne.n	800866e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	4a22      	ldr	r2, [pc, #136]	@ (80086e0 <TIM_OC3_SetConfig+0xec>)
 8008656:	4013      	ands	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	4a1e      	ldr	r2, [pc, #120]	@ (80086e4 <TIM_OC3_SetConfig+0xf0>)
 800866a:	4013      	ands	r3, r2
 800866c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a1a      	ldr	r2, [pc, #104]	@ (80086dc <TIM_OC3_SetConfig+0xe8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <TIM_OC3_SetConfig+0x92>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a1b      	ldr	r2, [pc, #108]	@ (80086e8 <TIM_OC3_SetConfig+0xf4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d003      	beq.n	8008686 <TIM_OC3_SetConfig+0x92>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a1a      	ldr	r2, [pc, #104]	@ (80086ec <TIM_OC3_SetConfig+0xf8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d113      	bne.n	80086ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	4a19      	ldr	r2, [pc, #100]	@ (80086f0 <TIM_OC3_SetConfig+0xfc>)
 800868a:	4013      	ands	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	4a18      	ldr	r2, [pc, #96]	@ (80086f4 <TIM_OC3_SetConfig+0x100>)
 8008692:	4013      	ands	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	621a      	str	r2, [r3, #32]
}
 80086c8:	46c0      	nop			@ (mov r8, r8)
 80086ca:	46bd      	mov	sp, r7
 80086cc:	b006      	add	sp, #24
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	fffffeff 	.word	0xfffffeff
 80086d4:	fffeff8f 	.word	0xfffeff8f
 80086d8:	fffffdff 	.word	0xfffffdff
 80086dc:	40012c00 	.word	0x40012c00
 80086e0:	fffff7ff 	.word	0xfffff7ff
 80086e4:	fffffbff 	.word	0xfffffbff
 80086e8:	40014400 	.word	0x40014400
 80086ec:	40014800 	.word	0x40014800
 80086f0:	ffffefff 	.word	0xffffefff
 80086f4:	ffffdfff 	.word	0xffffdfff

080086f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	4a24      	ldr	r2, [pc, #144]	@ (80087a0 <TIM_OC4_SetConfig+0xa8>)
 800870e:	401a      	ands	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a20      	ldr	r2, [pc, #128]	@ (80087a4 <TIM_OC4_SetConfig+0xac>)
 8008724:	4013      	ands	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4a1f      	ldr	r2, [pc, #124]	@ (80087a8 <TIM_OC4_SetConfig+0xb0>)
 800872c:	4013      	ands	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	021b      	lsls	r3, r3, #8
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4a1b      	ldr	r2, [pc, #108]	@ (80087ac <TIM_OC4_SetConfig+0xb4>)
 8008740:	4013      	ands	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	031b      	lsls	r3, r3, #12
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a17      	ldr	r2, [pc, #92]	@ (80087b0 <TIM_OC4_SetConfig+0xb8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d007      	beq.n	8008768 <TIM_OC4_SetConfig+0x70>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a16      	ldr	r2, [pc, #88]	@ (80087b4 <TIM_OC4_SetConfig+0xbc>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_OC4_SetConfig+0x70>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a15      	ldr	r2, [pc, #84]	@ (80087b8 <TIM_OC4_SetConfig+0xc0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d109      	bne.n	800877c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	4a14      	ldr	r2, [pc, #80]	@ (80087bc <TIM_OC4_SetConfig+0xc4>)
 800876c:	4013      	ands	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	019b      	lsls	r3, r3, #6
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	4313      	orrs	r3, r2
 800877a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	621a      	str	r2, [r3, #32]
}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	46bd      	mov	sp, r7
 800879a:	b006      	add	sp, #24
 800879c:	bd80      	pop	{r7, pc}
 800879e:	46c0      	nop			@ (mov r8, r8)
 80087a0:	ffffefff 	.word	0xffffefff
 80087a4:	feff8fff 	.word	0xfeff8fff
 80087a8:	fffffcff 	.word	0xfffffcff
 80087ac:	ffffdfff 	.word	0xffffdfff
 80087b0:	40012c00 	.word	0x40012c00
 80087b4:	40014400 	.word	0x40014400
 80087b8:	40014800 	.word	0x40014800
 80087bc:	ffffbfff 	.word	0xffffbfff

080087c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	4a21      	ldr	r2, [pc, #132]	@ (800885c <TIM_OC5_SetConfig+0x9c>)
 80087d6:	401a      	ands	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008860 <TIM_OC5_SetConfig+0xa0>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	4a19      	ldr	r2, [pc, #100]	@ (8008864 <TIM_OC5_SetConfig+0xa4>)
 80087fe:	4013      	ands	r3, r2
 8008800:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	041b      	lsls	r3, r3, #16
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a15      	ldr	r2, [pc, #84]	@ (8008868 <TIM_OC5_SetConfig+0xa8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d007      	beq.n	8008826 <TIM_OC5_SetConfig+0x66>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a14      	ldr	r2, [pc, #80]	@ (800886c <TIM_OC5_SetConfig+0xac>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d003      	beq.n	8008826 <TIM_OC5_SetConfig+0x66>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a13      	ldr	r2, [pc, #76]	@ (8008870 <TIM_OC5_SetConfig+0xb0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d109      	bne.n	800883a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4a0c      	ldr	r2, [pc, #48]	@ (800885c <TIM_OC5_SetConfig+0x9c>)
 800882a:	4013      	ands	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	021b      	lsls	r3, r3, #8
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	621a      	str	r2, [r3, #32]
}
 8008854:	46c0      	nop			@ (mov r8, r8)
 8008856:	46bd      	mov	sp, r7
 8008858:	b006      	add	sp, #24
 800885a:	bd80      	pop	{r7, pc}
 800885c:	fffeffff 	.word	0xfffeffff
 8008860:	fffeff8f 	.word	0xfffeff8f
 8008864:	fffdffff 	.word	0xfffdffff
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800

08008874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	4a22      	ldr	r2, [pc, #136]	@ (8008914 <TIM_OC6_SetConfig+0xa0>)
 800888a:	401a      	ands	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a1e      	ldr	r2, [pc, #120]	@ (8008918 <TIM_OC6_SetConfig+0xa4>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4a1a      	ldr	r2, [pc, #104]	@ (800891c <TIM_OC6_SetConfig+0xa8>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	051b      	lsls	r3, r3, #20
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a16      	ldr	r2, [pc, #88]	@ (8008920 <TIM_OC6_SetConfig+0xac>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d007      	beq.n	80088dc <TIM_OC6_SetConfig+0x68>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a15      	ldr	r2, [pc, #84]	@ (8008924 <TIM_OC6_SetConfig+0xb0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_OC6_SetConfig+0x68>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a14      	ldr	r2, [pc, #80]	@ (8008928 <TIM_OC6_SetConfig+0xb4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d109      	bne.n	80088f0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	4a13      	ldr	r2, [pc, #76]	@ (800892c <TIM_OC6_SetConfig+0xb8>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	029b      	lsls	r3, r3, #10
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	46c0      	nop			@ (mov r8, r8)
 800890c:	46bd      	mov	sp, r7
 800890e:	b006      	add	sp, #24
 8008910:	bd80      	pop	{r7, pc}
 8008912:	46c0      	nop			@ (mov r8, r8)
 8008914:	ffefffff 	.word	0xffefffff
 8008918:	feff8fff 	.word	0xfeff8fff
 800891c:	ffdfffff 	.word	0xffdfffff
 8008920:	40012c00 	.word	0x40012c00
 8008924:	40014400 	.word	0x40014400
 8008928:	40014800 	.word	0x40014800
 800892c:	fffbffff 	.word	0xfffbffff

08008930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	223c      	movs	r2, #60	@ 0x3c
 800893e:	5c9b      	ldrb	r3, [r3, r2]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008944:	2302      	movs	r3, #2
 8008946:	e050      	b.n	80089ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	223c      	movs	r2, #60	@ 0x3c
 800894c:	2101      	movs	r1, #1
 800894e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	223d      	movs	r2, #61	@ 0x3d
 8008954:	2102      	movs	r1, #2
 8008956:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a21      	ldr	r2, [pc, #132]	@ (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d108      	bne.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4a20      	ldr	r2, [pc, #128]	@ (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008976:	4013      	ands	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2270      	movs	r2, #112	@ 0x70
 8008988:	4393      	bics	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a14      	ldr	r2, [pc, #80]	@ (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d00a      	beq.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	2380      	movs	r3, #128	@ 0x80
 80089ae:	05db      	lsls	r3, r3, #23
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d004      	beq.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a10      	ldr	r2, [pc, #64]	@ (80089fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d10c      	bne.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2280      	movs	r2, #128	@ 0x80
 80089c2:	4393      	bics	r3, r2
 80089c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	223d      	movs	r2, #61	@ 0x3d
 80089dc:	2101      	movs	r1, #1
 80089de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	223c      	movs	r2, #60	@ 0x3c
 80089e4:	2100      	movs	r1, #0
 80089e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	0018      	movs	r0, r3
 80089ec:	46bd      	mov	sp, r7
 80089ee:	b004      	add	sp, #16
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	46c0      	nop			@ (mov r8, r8)
 80089f4:	40012c00 	.word	0x40012c00
 80089f8:	ff0fffff 	.word	0xff0fffff
 80089fc:	40000400 	.word	0x40000400

08008a00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	223c      	movs	r2, #60	@ 0x3c
 8008a12:	5c9b      	ldrb	r3, [r3, r2]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e06f      	b.n	8008afc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	223c      	movs	r2, #60	@ 0x3c
 8008a20:	2101      	movs	r1, #1
 8008a22:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	22ff      	movs	r2, #255	@ 0xff
 8008a28:	4393      	bics	r3, r2
 8008a2a:	001a      	movs	r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4a33      	ldr	r2, [pc, #204]	@ (8008b04 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8008a38:	401a      	ands	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4a30      	ldr	r2, [pc, #192]	@ (8008b08 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008a46:	401a      	ands	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a2e      	ldr	r2, [pc, #184]	@ (8008b0c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8008a54:	401a      	ands	r2, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4a2b      	ldr	r2, [pc, #172]	@ (8008b10 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008a62:	401a      	ands	r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4a29      	ldr	r2, [pc, #164]	@ (8008b14 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008a70:	401a      	ands	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a26      	ldr	r2, [pc, #152]	@ (8008b18 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008a7e:	401a      	ands	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4a24      	ldr	r2, [pc, #144]	@ (8008b1c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008a8c:	401a      	ands	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	041b      	lsls	r3, r3, #16
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4a21      	ldr	r2, [pc, #132]	@ (8008b20 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008a9c:	401a      	ands	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8008b24 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d11c      	bne.n	8008aea <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8008b28 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008ab4:	401a      	ands	r2, r3
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aba:	051b      	lsls	r3, r3, #20
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8008b2c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008ac4:	401a      	ands	r2, r3
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4a17      	ldr	r2, [pc, #92]	@ (8008b30 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008ad2:	401a      	ands	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4a15      	ldr	r2, [pc, #84]	@ (8008b34 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008ae0:	401a      	ands	r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	223c      	movs	r2, #60	@ 0x3c
 8008af6:	2100      	movs	r1, #0
 8008af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	0018      	movs	r0, r3
 8008afe:	46bd      	mov	sp, r7
 8008b00:	b004      	add	sp, #16
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	fffffcff 	.word	0xfffffcff
 8008b08:	fffffbff 	.word	0xfffffbff
 8008b0c:	fffff7ff 	.word	0xfffff7ff
 8008b10:	ffffefff 	.word	0xffffefff
 8008b14:	ffffdfff 	.word	0xffffdfff
 8008b18:	ffffbfff 	.word	0xffffbfff
 8008b1c:	fff0ffff 	.word	0xfff0ffff
 8008b20:	efffffff 	.word	0xefffffff
 8008b24:	40012c00 	.word	0x40012c00
 8008b28:	ff0fffff 	.word	0xff0fffff
 8008b2c:	feffffff 	.word	0xfeffffff
 8008b30:	fdffffff 	.word	0xfdffffff
 8008b34:	dfffffff 	.word	0xdfffffff

08008b38 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	@ 0x30
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	1dbb      	adds	r3, r7, #6
 8008b44:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2288      	movs	r2, #136	@ 0x88
 8008b4a:	589b      	ldr	r3, [r3, r2]
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	d000      	beq.n	8008b52 <HAL_UART_Transmit_IT+0x1a>
 8008b50:	e08d      	b.n	8008c6e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_UART_Transmit_IT+0x28>
 8008b58:	1dbb      	adds	r3, r7, #6
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e085      	b.n	8008c70 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	2380      	movs	r3, #128	@ 0x80
 8008b6a:	015b      	lsls	r3, r3, #5
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d109      	bne.n	8008b84 <HAL_UART_Transmit_IT+0x4c>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d001      	beq.n	8008b84 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e075      	b.n	8008c70 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	1dba      	adds	r2, r7, #6
 8008b8e:	2154      	movs	r1, #84	@ 0x54
 8008b90:	8812      	ldrh	r2, [r2, #0]
 8008b92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	1dba      	adds	r2, r7, #6
 8008b98:	2156      	movs	r1, #86	@ 0x56
 8008b9a:	8812      	ldrh	r2, [r2, #0]
 8008b9c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2290      	movs	r2, #144	@ 0x90
 8008ba8:	2100      	movs	r1, #0
 8008baa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2288      	movs	r2, #136	@ 0x88
 8008bb0:	2121      	movs	r1, #33	@ 0x21
 8008bb2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008bb8:	2380      	movs	r3, #128	@ 0x80
 8008bba:	059b      	lsls	r3, r3, #22
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d12a      	bne.n	8008c16 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	2380      	movs	r3, #128	@ 0x80
 8008bc6:	015b      	lsls	r3, r3, #5
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d107      	bne.n	8008bdc <HAL_UART_Transmit_IT+0xa4>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4a28      	ldr	r2, [pc, #160]	@ (8008c78 <HAL_UART_Transmit_IT+0x140>)
 8008bd8:	679a      	str	r2, [r3, #120]	@ 0x78
 8008bda:	e002      	b.n	8008be2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4a27      	ldr	r2, [pc, #156]	@ (8008c7c <HAL_UART_Transmit_IT+0x144>)
 8008be0:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008be2:	f3ef 8310 	mrs	r3, PRIMASK
 8008be6:	61fb      	str	r3, [r7, #28]
  return(result);
 8008be8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bec:	2301      	movs	r3, #1
 8008bee:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	f383 8810 	msr	PRIMASK, r3
}
 8008bf6:	46c0      	nop			@ (mov r8, r8)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2180      	movs	r1, #128	@ 0x80
 8008c04:	0409      	lsls	r1, r1, #16
 8008c06:	430a      	orrs	r2, r1
 8008c08:	609a      	str	r2, [r3, #8]
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c10:	f383 8810 	msr	PRIMASK, r3
}
 8008c14:	e029      	b.n	8008c6a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	2380      	movs	r3, #128	@ 0x80
 8008c1c:	015b      	lsls	r3, r3, #5
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d107      	bne.n	8008c32 <HAL_UART_Transmit_IT+0xfa>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4a14      	ldr	r2, [pc, #80]	@ (8008c80 <HAL_UART_Transmit_IT+0x148>)
 8008c2e:	679a      	str	r2, [r3, #120]	@ 0x78
 8008c30:	e002      	b.n	8008c38 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4a13      	ldr	r2, [pc, #76]	@ (8008c84 <HAL_UART_Transmit_IT+0x14c>)
 8008c36:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c38:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3c:	613b      	str	r3, [r7, #16]
  return(result);
 8008c3e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c42:	2301      	movs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f383 8810 	msr	PRIMASK, r3
}
 8008c4c:	46c0      	nop			@ (mov r8, r8)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2180      	movs	r1, #128	@ 0x80
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	f383 8810 	msr	PRIMASK, r3
}
 8008c68:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e000      	b.n	8008c70 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8008c6e:	2302      	movs	r3, #2
  }
}
 8008c70:	0018      	movs	r0, r3
 8008c72:	46bd      	mov	sp, r7
 8008c74:	b00c      	add	sp, #48	@ 0x30
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	080098bd 	.word	0x080098bd
 8008c7c:	080097d1 	.word	0x080097d1
 8008c80:	08009711 	.word	0x08009711
 8008c84:	0800965d 	.word	0x0800965d

08008c88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c90:	46c0      	nop			@ (mov r8, r8)
 8008c92:	46bd      	mov	sp, r7
 8008c94:	b002      	add	sp, #8
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	000a      	movs	r2, r1
 8008ca2:	1cbb      	adds	r3, r7, #2
 8008ca4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ca6:	46c0      	nop			@ (mov r8, r8)
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	b002      	add	sp, #8
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cb8:	231e      	movs	r3, #30
 8008cba:	18fb      	adds	r3, r7, r3
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4aab      	ldr	r2, [pc, #684]	@ (8008f8c <UART_SetConfig+0x2dc>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4aa6      	ldr	r2, [pc, #664]	@ (8008f90 <UART_SetConfig+0x2e0>)
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	0019      	movs	r1, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	4a9d      	ldr	r2, [pc, #628]	@ (8008f94 <UART_SetConfig+0x2e4>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	0019      	movs	r1, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d32:	220f      	movs	r2, #15
 8008d34:	4393      	bics	r3, r2
 8008d36:	0019      	movs	r1, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a93      	ldr	r2, [pc, #588]	@ (8008f98 <UART_SetConfig+0x2e8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d127      	bne.n	8008d9e <UART_SetConfig+0xee>
 8008d4e:	4b93      	ldr	r3, [pc, #588]	@ (8008f9c <UART_SetConfig+0x2ec>)
 8008d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d52:	2203      	movs	r2, #3
 8008d54:	4013      	ands	r3, r2
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d017      	beq.n	8008d8a <UART_SetConfig+0xda>
 8008d5a:	d81b      	bhi.n	8008d94 <UART_SetConfig+0xe4>
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d00a      	beq.n	8008d76 <UART_SetConfig+0xc6>
 8008d60:	d818      	bhi.n	8008d94 <UART_SetConfig+0xe4>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <UART_SetConfig+0xbc>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d00a      	beq.n	8008d80 <UART_SetConfig+0xd0>
 8008d6a:	e013      	b.n	8008d94 <UART_SetConfig+0xe4>
 8008d6c:	231f      	movs	r3, #31
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	e021      	b.n	8008dba <UART_SetConfig+0x10a>
 8008d76:	231f      	movs	r3, #31
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e01c      	b.n	8008dba <UART_SetConfig+0x10a>
 8008d80:	231f      	movs	r3, #31
 8008d82:	18fb      	adds	r3, r7, r3
 8008d84:	2204      	movs	r2, #4
 8008d86:	701a      	strb	r2, [r3, #0]
 8008d88:	e017      	b.n	8008dba <UART_SetConfig+0x10a>
 8008d8a:	231f      	movs	r3, #31
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	2208      	movs	r2, #8
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e012      	b.n	8008dba <UART_SetConfig+0x10a>
 8008d94:	231f      	movs	r3, #31
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	2210      	movs	r2, #16
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	e00d      	b.n	8008dba <UART_SetConfig+0x10a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a7f      	ldr	r2, [pc, #508]	@ (8008fa0 <UART_SetConfig+0x2f0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d104      	bne.n	8008db2 <UART_SetConfig+0x102>
 8008da8:	231f      	movs	r3, #31
 8008daa:	18fb      	adds	r3, r7, r3
 8008dac:	2200      	movs	r2, #0
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e003      	b.n	8008dba <UART_SetConfig+0x10a>
 8008db2:	231f      	movs	r3, #31
 8008db4:	18fb      	adds	r3, r7, r3
 8008db6:	2210      	movs	r2, #16
 8008db8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69da      	ldr	r2, [r3, #28]
 8008dbe:	2380      	movs	r3, #128	@ 0x80
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d000      	beq.n	8008dc8 <UART_SetConfig+0x118>
 8008dc6:	e06f      	b.n	8008ea8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8008dc8:	231f      	movs	r3, #31
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d01f      	beq.n	8008e12 <UART_SetConfig+0x162>
 8008dd2:	dc22      	bgt.n	8008e1a <UART_SetConfig+0x16a>
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d017      	beq.n	8008e08 <UART_SetConfig+0x158>
 8008dd8:	dc1f      	bgt.n	8008e1a <UART_SetConfig+0x16a>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <UART_SetConfig+0x134>
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d005      	beq.n	8008dee <UART_SetConfig+0x13e>
 8008de2:	e01a      	b.n	8008e1a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008de4:	f7fe febc 	bl	8007b60 <HAL_RCC_GetPCLK1Freq>
 8008de8:	0003      	movs	r3, r0
 8008dea:	61bb      	str	r3, [r7, #24]
        break;
 8008dec:	e01c      	b.n	8008e28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8008dee:	4b6b      	ldr	r3, [pc, #428]	@ (8008f9c <UART_SetConfig+0x2ec>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	2207      	movs	r2, #7
 8008df6:	4013      	ands	r3, r2
 8008df8:	3301      	adds	r3, #1
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	4869      	ldr	r0, [pc, #420]	@ (8008fa4 <UART_SetConfig+0x2f4>)
 8008dfe:	f7f7 f983 	bl	8000108 <__udivsi3>
 8008e02:	0003      	movs	r3, r0
 8008e04:	61bb      	str	r3, [r7, #24]
        break;
 8008e06:	e00f      	b.n	8008e28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e08:	f7fe fe34 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	61bb      	str	r3, [r7, #24]
        break;
 8008e10:	e00a      	b.n	8008e28 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e12:	2380      	movs	r3, #128	@ 0x80
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	61bb      	str	r3, [r7, #24]
        break;
 8008e18:	e006      	b.n	8008e28 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e1e:	231e      	movs	r3, #30
 8008e20:	18fb      	adds	r3, r7, r3
 8008e22:	2201      	movs	r2, #1
 8008e24:	701a      	strb	r2, [r3, #0]
        break;
 8008e26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d100      	bne.n	8008e30 <UART_SetConfig+0x180>
 8008e2e:	e097      	b.n	8008f60 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e34:	4b5c      	ldr	r3, [pc, #368]	@ (8008fa8 <UART_SetConfig+0x2f8>)
 8008e36:	0052      	lsls	r2, r2, #1
 8008e38:	5ad3      	ldrh	r3, [r2, r3]
 8008e3a:	0019      	movs	r1, r3
 8008e3c:	69b8      	ldr	r0, [r7, #24]
 8008e3e:	f7f7 f963 	bl	8000108 <__udivsi3>
 8008e42:	0003      	movs	r3, r0
 8008e44:	005a      	lsls	r2, r3, #1
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	085b      	lsrs	r3, r3, #1
 8008e4c:	18d2      	adds	r2, r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	0019      	movs	r1, r3
 8008e54:	0010      	movs	r0, r2
 8008e56:	f7f7 f957 	bl	8000108 <__udivsi3>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2b0f      	cmp	r3, #15
 8008e62:	d91c      	bls.n	8008e9e <UART_SetConfig+0x1ee>
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	2380      	movs	r3, #128	@ 0x80
 8008e68:	025b      	lsls	r3, r3, #9
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d217      	bcs.n	8008e9e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	200e      	movs	r0, #14
 8008e74:	183b      	adds	r3, r7, r0
 8008e76:	210f      	movs	r1, #15
 8008e78:	438a      	bics	r2, r1
 8008e7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	085b      	lsrs	r3, r3, #1
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2207      	movs	r2, #7
 8008e84:	4013      	ands	r3, r2
 8008e86:	b299      	uxth	r1, r3
 8008e88:	183b      	adds	r3, r7, r0
 8008e8a:	183a      	adds	r2, r7, r0
 8008e8c:	8812      	ldrh	r2, [r2, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	183a      	adds	r2, r7, r0
 8008e98:	8812      	ldrh	r2, [r2, #0]
 8008e9a:	60da      	str	r2, [r3, #12]
 8008e9c:	e060      	b.n	8008f60 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8008e9e:	231e      	movs	r3, #30
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e05b      	b.n	8008f60 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ea8:	231f      	movs	r3, #31
 8008eaa:	18fb      	adds	r3, r7, r3
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d01f      	beq.n	8008ef2 <UART_SetConfig+0x242>
 8008eb2:	dc22      	bgt.n	8008efa <UART_SetConfig+0x24a>
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d017      	beq.n	8008ee8 <UART_SetConfig+0x238>
 8008eb8:	dc1f      	bgt.n	8008efa <UART_SetConfig+0x24a>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <UART_SetConfig+0x214>
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d005      	beq.n	8008ece <UART_SetConfig+0x21e>
 8008ec2:	e01a      	b.n	8008efa <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec4:	f7fe fe4c 	bl	8007b60 <HAL_RCC_GetPCLK1Freq>
 8008ec8:	0003      	movs	r3, r0
 8008eca:	61bb      	str	r3, [r7, #24]
        break;
 8008ecc:	e01c      	b.n	8008f08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8008ece:	4b33      	ldr	r3, [pc, #204]	@ (8008f9c <UART_SetConfig+0x2ec>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	2207      	movs	r2, #7
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	3301      	adds	r3, #1
 8008eda:	0019      	movs	r1, r3
 8008edc:	4831      	ldr	r0, [pc, #196]	@ (8008fa4 <UART_SetConfig+0x2f4>)
 8008ede:	f7f7 f913 	bl	8000108 <__udivsi3>
 8008ee2:	0003      	movs	r3, r0
 8008ee4:	61bb      	str	r3, [r7, #24]
        break;
 8008ee6:	e00f      	b.n	8008f08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee8:	f7fe fdc4 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8008eec:	0003      	movs	r3, r0
 8008eee:	61bb      	str	r3, [r7, #24]
        break;
 8008ef0:	e00a      	b.n	8008f08 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ef2:	2380      	movs	r3, #128	@ 0x80
 8008ef4:	021b      	lsls	r3, r3, #8
 8008ef6:	61bb      	str	r3, [r7, #24]
        break;
 8008ef8:	e006      	b.n	8008f08 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008efe:	231e      	movs	r3, #30
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	2201      	movs	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
        break;
 8008f06:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d028      	beq.n	8008f60 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f12:	4b25      	ldr	r3, [pc, #148]	@ (8008fa8 <UART_SetConfig+0x2f8>)
 8008f14:	0052      	lsls	r2, r2, #1
 8008f16:	5ad3      	ldrh	r3, [r2, r3]
 8008f18:	0019      	movs	r1, r3
 8008f1a:	69b8      	ldr	r0, [r7, #24]
 8008f1c:	f7f7 f8f4 	bl	8000108 <__udivsi3>
 8008f20:	0003      	movs	r3, r0
 8008f22:	001a      	movs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	085b      	lsrs	r3, r3, #1
 8008f2a:	18d2      	adds	r2, r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	0019      	movs	r1, r3
 8008f32:	0010      	movs	r0, r2
 8008f34:	f7f7 f8e8 	bl	8000108 <__udivsi3>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b0f      	cmp	r3, #15
 8008f40:	d90a      	bls.n	8008f58 <UART_SetConfig+0x2a8>
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	025b      	lsls	r3, r3, #9
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d205      	bcs.n	8008f58 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60da      	str	r2, [r3, #12]
 8008f56:	e003      	b.n	8008f60 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8008f58:	231e      	movs	r3, #30
 8008f5a:	18fb      	adds	r3, r7, r3
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	226a      	movs	r2, #106	@ 0x6a
 8008f64:	2101      	movs	r1, #1
 8008f66:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2268      	movs	r2, #104	@ 0x68
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f7c:	231e      	movs	r3, #30
 8008f7e:	18fb      	adds	r3, r7, r3
 8008f80:	781b      	ldrb	r3, [r3, #0]
}
 8008f82:	0018      	movs	r0, r3
 8008f84:	46bd      	mov	sp, r7
 8008f86:	b008      	add	sp, #32
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	cfff69f3 	.word	0xcfff69f3
 8008f90:	ffffcfff 	.word	0xffffcfff
 8008f94:	11fff4ff 	.word	0x11fff4ff
 8008f98:	40013800 	.word	0x40013800
 8008f9c:	40021000 	.word	0x40021000
 8008fa0:	40004400 	.word	0x40004400
 8008fa4:	02dc6c00 	.word	0x02dc6c00
 8008fa8:	0800b328 	.word	0x0800b328

08008fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb8:	2208      	movs	r2, #8
 8008fba:	4013      	ands	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80090f0 <UART_AdvFeatureConfig+0x144>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	0019      	movs	r1, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fda:	2201      	movs	r2, #1
 8008fdc:	4013      	ands	r3, r2
 8008fde:	d00b      	beq.n	8008ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	4a43      	ldr	r2, [pc, #268]	@ (80090f4 <UART_AdvFeatureConfig+0x148>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	0019      	movs	r1, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	4013      	ands	r3, r2
 8009000:	d00b      	beq.n	800901a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	4a3b      	ldr	r2, [pc, #236]	@ (80090f8 <UART_AdvFeatureConfig+0x14c>)
 800900a:	4013      	ands	r3, r2
 800900c:	0019      	movs	r1, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901e:	2204      	movs	r2, #4
 8009020:	4013      	ands	r3, r2
 8009022:	d00b      	beq.n	800903c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	4a34      	ldr	r2, [pc, #208]	@ (80090fc <UART_AdvFeatureConfig+0x150>)
 800902c:	4013      	ands	r3, r2
 800902e:	0019      	movs	r1, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009040:	2210      	movs	r2, #16
 8009042:	4013      	ands	r3, r2
 8009044:	d00b      	beq.n	800905e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	4a2c      	ldr	r2, [pc, #176]	@ (8009100 <UART_AdvFeatureConfig+0x154>)
 800904e:	4013      	ands	r3, r2
 8009050:	0019      	movs	r1, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009062:	2220      	movs	r2, #32
 8009064:	4013      	ands	r3, r2
 8009066:	d00b      	beq.n	8009080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	4a25      	ldr	r2, [pc, #148]	@ (8009104 <UART_AdvFeatureConfig+0x158>)
 8009070:	4013      	ands	r3, r2
 8009072:	0019      	movs	r1, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009084:	2240      	movs	r2, #64	@ 0x40
 8009086:	4013      	ands	r3, r2
 8009088:	d01d      	beq.n	80090c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a1d      	ldr	r2, [pc, #116]	@ (8009108 <UART_AdvFeatureConfig+0x15c>)
 8009092:	4013      	ands	r3, r2
 8009094:	0019      	movs	r1, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090a6:	2380      	movs	r3, #128	@ 0x80
 80090a8:	035b      	lsls	r3, r3, #13
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d10b      	bne.n	80090c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4a15      	ldr	r2, [pc, #84]	@ (800910c <UART_AdvFeatureConfig+0x160>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	0019      	movs	r1, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ca:	2280      	movs	r2, #128	@ 0x80
 80090cc:	4013      	ands	r3, r2
 80090ce:	d00b      	beq.n	80090e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	4a0e      	ldr	r2, [pc, #56]	@ (8009110 <UART_AdvFeatureConfig+0x164>)
 80090d8:	4013      	ands	r3, r2
 80090da:	0019      	movs	r1, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }
}
 80090e8:	46c0      	nop			@ (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	ffff7fff 	.word	0xffff7fff
 80090f4:	fffdffff 	.word	0xfffdffff
 80090f8:	fffeffff 	.word	0xfffeffff
 80090fc:	fffbffff 	.word	0xfffbffff
 8009100:	ffffefff 	.word	0xffffefff
 8009104:	ffffdfff 	.word	0xffffdfff
 8009108:	ffefffff 	.word	0xffefffff
 800910c:	ff9fffff 	.word	0xff9fffff
 8009110:	fff7ffff 	.word	0xfff7ffff

08009114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b092      	sub	sp, #72	@ 0x48
 8009118:	af02      	add	r7, sp, #8
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2290      	movs	r2, #144	@ 0x90
 8009120:	2100      	movs	r1, #0
 8009122:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009124:	f7fa fd30 	bl	8003b88 <HAL_GetTick>
 8009128:	0003      	movs	r3, r0
 800912a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2208      	movs	r2, #8
 8009134:	4013      	ands	r3, r2
 8009136:	2b08      	cmp	r3, #8
 8009138:	d12d      	bne.n	8009196 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800913a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913c:	2280      	movs	r2, #128	@ 0x80
 800913e:	0391      	lsls	r1, r2, #14
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4a47      	ldr	r2, [pc, #284]	@ (8009260 <UART_CheckIdleState+0x14c>)
 8009144:	9200      	str	r2, [sp, #0]
 8009146:	2200      	movs	r2, #0
 8009148:	f000 f88e 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 800914c:	1e03      	subs	r3, r0, #0
 800914e:	d022      	beq.n	8009196 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009150:	f3ef 8310 	mrs	r3, PRIMASK
 8009154:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009158:	63bb      	str	r3, [r7, #56]	@ 0x38
 800915a:	2301      	movs	r3, #1
 800915c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	f383 8810 	msr	PRIMASK, r3
}
 8009164:	46c0      	nop			@ (mov r8, r8)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2180      	movs	r1, #128	@ 0x80
 8009172:	438a      	bics	r2, r1
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	f383 8810 	msr	PRIMASK, r3
}
 8009180:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2288      	movs	r2, #136	@ 0x88
 8009186:	2120      	movs	r1, #32
 8009188:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2284      	movs	r2, #132	@ 0x84
 800918e:	2100      	movs	r1, #0
 8009190:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e060      	b.n	8009258 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2204      	movs	r2, #4
 800919e:	4013      	ands	r3, r2
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d146      	bne.n	8009232 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a6:	2280      	movs	r2, #128	@ 0x80
 80091a8:	03d1      	lsls	r1, r2, #15
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009260 <UART_CheckIdleState+0x14c>)
 80091ae:	9200      	str	r2, [sp, #0]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f000 f859 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 80091b6:	1e03      	subs	r3, r0, #0
 80091b8:	d03b      	beq.n	8009232 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091ba:	f3ef 8310 	mrs	r3, PRIMASK
 80091be:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c4:	2301      	movs	r3, #1
 80091c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f383 8810 	msr	PRIMASK, r3
}
 80091ce:	46c0      	nop			@ (mov r8, r8)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4922      	ldr	r1, [pc, #136]	@ (8009264 <UART_CheckIdleState+0x150>)
 80091dc:	400a      	ands	r2, r1
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f383 8810 	msr	PRIMASK, r3
}
 80091ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091ec:	f3ef 8310 	mrs	r3, PRIMASK
 80091f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80091f2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80091f6:	2301      	movs	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	f383 8810 	msr	PRIMASK, r3
}
 8009200:	46c0      	nop			@ (mov r8, r8)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2101      	movs	r1, #1
 800920e:	438a      	bics	r2, r1
 8009210:	609a      	str	r2, [r3, #8]
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	f383 8810 	msr	PRIMASK, r3
}
 800921c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	228c      	movs	r2, #140	@ 0x8c
 8009222:	2120      	movs	r1, #32
 8009224:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2284      	movs	r2, #132	@ 0x84
 800922a:	2100      	movs	r1, #0
 800922c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e012      	b.n	8009258 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2288      	movs	r2, #136	@ 0x88
 8009236:	2120      	movs	r1, #32
 8009238:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	228c      	movs	r2, #140	@ 0x8c
 800923e:	2120      	movs	r1, #32
 8009240:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2284      	movs	r2, #132	@ 0x84
 8009252:	2100      	movs	r1, #0
 8009254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	0018      	movs	r0, r3
 800925a:	46bd      	mov	sp, r7
 800925c:	b010      	add	sp, #64	@ 0x40
 800925e:	bd80      	pop	{r7, pc}
 8009260:	01ffffff 	.word	0x01ffffff
 8009264:	fffffedf 	.word	0xfffffedf

08009268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	1dfb      	adds	r3, r7, #7
 8009276:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009278:	e051      	b.n	800931e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	3301      	adds	r3, #1
 800927e:	d04e      	beq.n	800931e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009280:	f7fa fc82 	bl	8003b88 <HAL_GetTick>
 8009284:	0002      	movs	r2, r0
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	429a      	cmp	r2, r3
 800928e:	d302      	bcc.n	8009296 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e051      	b.n	800933e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2204      	movs	r2, #4
 80092a2:	4013      	ands	r3, r2
 80092a4:	d03b      	beq.n	800931e <UART_WaitOnFlagUntilTimeout+0xb6>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b80      	cmp	r3, #128	@ 0x80
 80092aa:	d038      	beq.n	800931e <UART_WaitOnFlagUntilTimeout+0xb6>
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b40      	cmp	r3, #64	@ 0x40
 80092b0:	d035      	beq.n	800931e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	2208      	movs	r2, #8
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b08      	cmp	r3, #8
 80092be:	d111      	bne.n	80092e4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2208      	movs	r2, #8
 80092c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	0018      	movs	r0, r3
 80092cc:	f000 f960 	bl	8009590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2290      	movs	r2, #144	@ 0x90
 80092d4:	2108      	movs	r1, #8
 80092d6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2284      	movs	r2, #132	@ 0x84
 80092dc:	2100      	movs	r1, #0
 80092de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e02c      	b.n	800933e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69da      	ldr	r2, [r3, #28]
 80092ea:	2380      	movs	r3, #128	@ 0x80
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	401a      	ands	r2, r3
 80092f0:	2380      	movs	r3, #128	@ 0x80
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d112      	bne.n	800931e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2280      	movs	r2, #128	@ 0x80
 80092fe:	0112      	lsls	r2, r2, #4
 8009300:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	0018      	movs	r0, r3
 8009306:	f000 f943 	bl	8009590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2290      	movs	r2, #144	@ 0x90
 800930e:	2120      	movs	r1, #32
 8009310:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2284      	movs	r2, #132	@ 0x84
 8009316:	2100      	movs	r1, #0
 8009318:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e00f      	b.n	800933e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	4013      	ands	r3, r2
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	425a      	negs	r2, r3
 800932e:	4153      	adcs	r3, r2
 8009330:	b2db      	uxtb	r3, r3
 8009332:	001a      	movs	r2, r3
 8009334:	1dfb      	adds	r3, r7, #7
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	d09e      	beq.n	800927a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	0018      	movs	r0, r3
 8009340:	46bd      	mov	sp, r7
 8009342:	b004      	add	sp, #16
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b098      	sub	sp, #96	@ 0x60
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	1dbb      	adds	r3, r7, #6
 8009354:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	1dba      	adds	r2, r7, #6
 8009360:	215c      	movs	r1, #92	@ 0x5c
 8009362:	8812      	ldrh	r2, [r2, #0]
 8009364:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	1dba      	adds	r2, r7, #6
 800936a:	215e      	movs	r1, #94	@ 0x5e
 800936c:	8812      	ldrh	r2, [r2, #0]
 800936e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	2380      	movs	r3, #128	@ 0x80
 800937c:	015b      	lsls	r3, r3, #5
 800937e:	429a      	cmp	r2, r3
 8009380:	d10d      	bne.n	800939e <UART_Start_Receive_IT+0x56>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <UART_Start_Receive_IT+0x4c>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2260      	movs	r2, #96	@ 0x60
 800938e:	497b      	ldr	r1, [pc, #492]	@ (800957c <UART_Start_Receive_IT+0x234>)
 8009390:	5299      	strh	r1, [r3, r2]
 8009392:	e02e      	b.n	80093f2 <UART_Start_Receive_IT+0xaa>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2260      	movs	r2, #96	@ 0x60
 8009398:	21ff      	movs	r1, #255	@ 0xff
 800939a:	5299      	strh	r1, [r3, r2]
 800939c:	e029      	b.n	80093f2 <UART_Start_Receive_IT+0xaa>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10d      	bne.n	80093c2 <UART_Start_Receive_IT+0x7a>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d104      	bne.n	80093b8 <UART_Start_Receive_IT+0x70>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2260      	movs	r2, #96	@ 0x60
 80093b2:	21ff      	movs	r1, #255	@ 0xff
 80093b4:	5299      	strh	r1, [r3, r2]
 80093b6:	e01c      	b.n	80093f2 <UART_Start_Receive_IT+0xaa>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2260      	movs	r2, #96	@ 0x60
 80093bc:	217f      	movs	r1, #127	@ 0x7f
 80093be:	5299      	strh	r1, [r3, r2]
 80093c0:	e017      	b.n	80093f2 <UART_Start_Receive_IT+0xaa>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	2380      	movs	r3, #128	@ 0x80
 80093c8:	055b      	lsls	r3, r3, #21
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d10d      	bne.n	80093ea <UART_Start_Receive_IT+0xa2>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <UART_Start_Receive_IT+0x98>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2260      	movs	r2, #96	@ 0x60
 80093da:	217f      	movs	r1, #127	@ 0x7f
 80093dc:	5299      	strh	r1, [r3, r2]
 80093de:	e008      	b.n	80093f2 <UART_Start_Receive_IT+0xaa>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2260      	movs	r2, #96	@ 0x60
 80093e4:	213f      	movs	r1, #63	@ 0x3f
 80093e6:	5299      	strh	r1, [r3, r2]
 80093e8:	e003      	b.n	80093f2 <UART_Start_Receive_IT+0xaa>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2260      	movs	r2, #96	@ 0x60
 80093ee:	2100      	movs	r1, #0
 80093f0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2290      	movs	r2, #144	@ 0x90
 80093f6:	2100      	movs	r1, #0
 80093f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	228c      	movs	r2, #140	@ 0x8c
 80093fe:	2122      	movs	r1, #34	@ 0x22
 8009400:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009402:	f3ef 8310 	mrs	r3, PRIMASK
 8009406:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8009408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800940a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800940c:	2301      	movs	r3, #1
 800940e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009412:	f383 8810 	msr	PRIMASK, r3
}
 8009416:	46c0      	nop			@ (mov r8, r8)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2101      	movs	r1, #1
 8009424:	430a      	orrs	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
 8009428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800942a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800942c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800942e:	f383 8810 	msr	PRIMASK, r3
}
 8009432:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009438:	2380      	movs	r3, #128	@ 0x80
 800943a:	059b      	lsls	r3, r3, #22
 800943c:	429a      	cmp	r2, r3
 800943e:	d150      	bne.n	80094e2 <UART_Start_Receive_IT+0x19a>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2268      	movs	r2, #104	@ 0x68
 8009444:	5a9b      	ldrh	r3, [r3, r2]
 8009446:	1dba      	adds	r2, r7, #6
 8009448:	8812      	ldrh	r2, [r2, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d349      	bcc.n	80094e2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	2380      	movs	r3, #128	@ 0x80
 8009454:	015b      	lsls	r3, r3, #5
 8009456:	429a      	cmp	r2, r3
 8009458:	d107      	bne.n	800946a <UART_Start_Receive_IT+0x122>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4a46      	ldr	r2, [pc, #280]	@ (8009580 <UART_Start_Receive_IT+0x238>)
 8009466:	675a      	str	r2, [r3, #116]	@ 0x74
 8009468:	e002      	b.n	8009470 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4a45      	ldr	r2, [pc, #276]	@ (8009584 <UART_Start_Receive_IT+0x23c>)
 800946e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d019      	beq.n	80094ac <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009478:	f3ef 8310 	mrs	r3, PRIMASK
 800947c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800947e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009480:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009482:	2301      	movs	r3, #1
 8009484:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009488:	f383 8810 	msr	PRIMASK, r3
}
 800948c:	46c0      	nop			@ (mov r8, r8)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2180      	movs	r1, #128	@ 0x80
 800949a:	0049      	lsls	r1, r1, #1
 800949c:	430a      	orrs	r2, r1
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a6:	f383 8810 	msr	PRIMASK, r3
}
 80094aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80094ac:	f3ef 8310 	mrs	r3, PRIMASK
 80094b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80094b6:	2301      	movs	r3, #1
 80094b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094bc:	f383 8810 	msr	PRIMASK, r3
}
 80094c0:	46c0      	nop			@ (mov r8, r8)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2180      	movs	r1, #128	@ 0x80
 80094ce:	0549      	lsls	r1, r1, #21
 80094d0:	430a      	orrs	r2, r1
 80094d2:	609a      	str	r2, [r3, #8]
 80094d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	f383 8810 	msr	PRIMASK, r3
}
 80094de:	46c0      	nop			@ (mov r8, r8)
 80094e0:	e047      	b.n	8009572 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	2380      	movs	r3, #128	@ 0x80
 80094e8:	015b      	lsls	r3, r3, #5
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d107      	bne.n	80094fe <UART_Start_Receive_IT+0x1b6>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4a23      	ldr	r2, [pc, #140]	@ (8009588 <UART_Start_Receive_IT+0x240>)
 80094fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80094fc:	e002      	b.n	8009504 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4a22      	ldr	r2, [pc, #136]	@ (800958c <UART_Start_Receive_IT+0x244>)
 8009502:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d019      	beq.n	8009540 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800950c:	f3ef 8310 	mrs	r3, PRIMASK
 8009510:	61fb      	str	r3, [r7, #28]
  return(result);
 8009512:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009516:	2301      	movs	r3, #1
 8009518:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	f383 8810 	msr	PRIMASK, r3
}
 8009520:	46c0      	nop			@ (mov r8, r8)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2190      	movs	r1, #144	@ 0x90
 800952e:	0049      	lsls	r1, r1, #1
 8009530:	430a      	orrs	r2, r1
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009536:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953a:	f383 8810 	msr	PRIMASK, r3
}
 800953e:	e018      	b.n	8009572 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009540:	f3ef 8310 	mrs	r3, PRIMASK
 8009544:	613b      	str	r3, [r7, #16]
  return(result);
 8009546:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009548:	653b      	str	r3, [r7, #80]	@ 0x50
 800954a:	2301      	movs	r3, #1
 800954c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f383 8810 	msr	PRIMASK, r3
}
 8009554:	46c0      	nop			@ (mov r8, r8)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2120      	movs	r1, #32
 8009562:	430a      	orrs	r2, r1
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009568:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	f383 8810 	msr	PRIMASK, r3
}
 8009570:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	0018      	movs	r0, r3
 8009576:	46bd      	mov	sp, r7
 8009578:	b018      	add	sp, #96	@ 0x60
 800957a:	bd80      	pop	{r7, pc}
 800957c:	000001ff 	.word	0x000001ff
 8009580:	0800a055 	.word	0x0800a055
 8009584:	08009d21 	.word	0x08009d21
 8009588:	08009b69 	.word	0x08009b69
 800958c:	080099b1 	.word	0x080099b1

08009590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08e      	sub	sp, #56	@ 0x38
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009598:	f3ef 8310 	mrs	r3, PRIMASK
 800959c:	617b      	str	r3, [r7, #20]
  return(result);
 800959e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a2:	2301      	movs	r3, #1
 80095a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	f383 8810 	msr	PRIMASK, r3
}
 80095ac:	46c0      	nop			@ (mov r8, r8)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4926      	ldr	r1, [pc, #152]	@ (8009654 <UART_EndRxTransfer+0xc4>)
 80095ba:	400a      	ands	r2, r1
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	f383 8810 	msr	PRIMASK, r3
}
 80095c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80095ca:	f3ef 8310 	mrs	r3, PRIMASK
 80095ce:	623b      	str	r3, [r7, #32]
  return(result);
 80095d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80095d4:	2301      	movs	r3, #1
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	f383 8810 	msr	PRIMASK, r3
}
 80095de:	46c0      	nop			@ (mov r8, r8)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689a      	ldr	r2, [r3, #8]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	491b      	ldr	r1, [pc, #108]	@ (8009658 <UART_EndRxTransfer+0xc8>)
 80095ec:	400a      	ands	r2, r1
 80095ee:	609a      	str	r2, [r3, #8]
 80095f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	f383 8810 	msr	PRIMASK, r3
}
 80095fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009600:	2b01      	cmp	r3, #1
 8009602:	d118      	bne.n	8009636 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009604:	f3ef 8310 	mrs	r3, PRIMASK
 8009608:	60bb      	str	r3, [r7, #8]
  return(result);
 800960a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800960e:	2301      	movs	r3, #1
 8009610:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f383 8810 	msr	PRIMASK, r3
}
 8009618:	46c0      	nop			@ (mov r8, r8)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2110      	movs	r1, #16
 8009626:	438a      	bics	r2, r1
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f383 8810 	msr	PRIMASK, r3
}
 8009634:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	228c      	movs	r2, #140	@ 0x8c
 800963a:	2120      	movs	r1, #32
 800963c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800964a:	46c0      	nop			@ (mov r8, r8)
 800964c:	46bd      	mov	sp, r7
 800964e:	b00e      	add	sp, #56	@ 0x38
 8009650:	bd80      	pop	{r7, pc}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	fffffedf 	.word	0xfffffedf
 8009658:	effffffe 	.word	0xeffffffe

0800965c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	@ 0x28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2288      	movs	r2, #136	@ 0x88
 8009668:	589b      	ldr	r3, [r3, r2]
 800966a:	2b21      	cmp	r3, #33	@ 0x21
 800966c:	d14c      	bne.n	8009708 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2256      	movs	r2, #86	@ 0x56
 8009672:	5a9b      	ldrh	r3, [r3, r2]
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d132      	bne.n	80096e0 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800967a:	f3ef 8310 	mrs	r3, PRIMASK
 800967e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009680:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009682:	627b      	str	r3, [r7, #36]	@ 0x24
 8009684:	2301      	movs	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f383 8810 	msr	PRIMASK, r3
}
 800968e:	46c0      	nop			@ (mov r8, r8)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2180      	movs	r1, #128	@ 0x80
 800969c:	438a      	bics	r2, r1
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f383 8810 	msr	PRIMASK, r3
}
 80096aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80096ac:	f3ef 8310 	mrs	r3, PRIMASK
 80096b0:	617b      	str	r3, [r7, #20]
  return(result);
 80096b2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096b4:	623b      	str	r3, [r7, #32]
 80096b6:	2301      	movs	r3, #1
 80096b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	f383 8810 	msr	PRIMASK, r3
}
 80096c0:	46c0      	nop			@ (mov r8, r8)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2140      	movs	r1, #64	@ 0x40
 80096ce:	430a      	orrs	r2, r1
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f383 8810 	msr	PRIMASK, r3
}
 80096dc:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80096de:	e013      	b.n	8009708 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e4:	781a      	ldrb	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2256      	movs	r2, #86	@ 0x56
 80096fa:	5a9b      	ldrh	r3, [r3, r2]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	3b01      	subs	r3, #1
 8009700:	b299      	uxth	r1, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2256      	movs	r2, #86	@ 0x56
 8009706:	5299      	strh	r1, [r3, r2]
}
 8009708:	46c0      	nop			@ (mov r8, r8)
 800970a:	46bd      	mov	sp, r7
 800970c:	b00a      	add	sp, #40	@ 0x28
 800970e:	bd80      	pop	{r7, pc}

08009710 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08c      	sub	sp, #48	@ 0x30
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2288      	movs	r2, #136	@ 0x88
 800971c:	589b      	ldr	r3, [r3, r2]
 800971e:	2b21      	cmp	r3, #33	@ 0x21
 8009720:	d151      	bne.n	80097c6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2256      	movs	r2, #86	@ 0x56
 8009726:	5a9b      	ldrh	r3, [r3, r2]
 8009728:	b29b      	uxth	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d132      	bne.n	8009794 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800972e:	f3ef 8310 	mrs	r3, PRIMASK
 8009732:	60fb      	str	r3, [r7, #12]
  return(result);
 8009734:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009738:	2301      	movs	r3, #1
 800973a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f383 8810 	msr	PRIMASK, r3
}
 8009742:	46c0      	nop			@ (mov r8, r8)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2180      	movs	r1, #128	@ 0x80
 8009750:	438a      	bics	r2, r1
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f383 8810 	msr	PRIMASK, r3
}
 800975e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009760:	f3ef 8310 	mrs	r3, PRIMASK
 8009764:	61bb      	str	r3, [r7, #24]
  return(result);
 8009766:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009768:	627b      	str	r3, [r7, #36]	@ 0x24
 800976a:	2301      	movs	r3, #1
 800976c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	f383 8810 	msr	PRIMASK, r3
}
 8009774:	46c0      	nop			@ (mov r8, r8)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2140      	movs	r1, #64	@ 0x40
 8009782:	430a      	orrs	r2, r1
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009788:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	f383 8810 	msr	PRIMASK, r3
}
 8009790:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009792:	e018      	b.n	80097c6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009798:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800979a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	001a      	movs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	05d2      	lsls	r2, r2, #23
 80097a6:	0dd2      	lsrs	r2, r2, #23
 80097a8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ae:	1c9a      	adds	r2, r3, #2
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2256      	movs	r2, #86	@ 0x56
 80097b8:	5a9b      	ldrh	r3, [r3, r2]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	3b01      	subs	r3, #1
 80097be:	b299      	uxth	r1, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2256      	movs	r2, #86	@ 0x56
 80097c4:	5299      	strh	r1, [r3, r2]
}
 80097c6:	46c0      	nop			@ (mov r8, r8)
 80097c8:	46bd      	mov	sp, r7
 80097ca:	b00c      	add	sp, #48	@ 0x30
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	@ 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2288      	movs	r2, #136	@ 0x88
 80097dc:	589b      	ldr	r3, [r3, r2]
 80097de:	2b21      	cmp	r3, #33	@ 0x21
 80097e0:	d165      	bne.n	80098ae <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80097e2:	232e      	movs	r3, #46	@ 0x2e
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	216a      	movs	r1, #106	@ 0x6a
 80097ea:	5a52      	ldrh	r2, [r2, r1]
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	e059      	b.n	80098a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2256      	movs	r2, #86	@ 0x56
 80097f4:	5a9b      	ldrh	r3, [r3, r2]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d133      	bne.n	8009864 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009800:	60fb      	str	r3, [r7, #12]
  return(result);
 8009802:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009806:	2301      	movs	r3, #1
 8009808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f383 8810 	msr	PRIMASK, r3
}
 8009810:	46c0      	nop			@ (mov r8, r8)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4926      	ldr	r1, [pc, #152]	@ (80098b8 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800981e:	400a      	ands	r2, r1
 8009820:	609a      	str	r2, [r3, #8]
 8009822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009824:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f383 8810 	msr	PRIMASK, r3
}
 800982c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800982e:	f3ef 8310 	mrs	r3, PRIMASK
 8009832:	61bb      	str	r3, [r7, #24]
  return(result);
 8009834:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009836:	627b      	str	r3, [r7, #36]	@ 0x24
 8009838:	2301      	movs	r3, #1
 800983a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f383 8810 	msr	PRIMASK, r3
}
 8009842:	46c0      	nop			@ (mov r8, r8)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2140      	movs	r1, #64	@ 0x40
 8009850:	430a      	orrs	r2, r1
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	f383 8810 	msr	PRIMASK, r3
}
 800985e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8009860:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8009862:	e024      	b.n	80098ae <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	2280      	movs	r2, #128	@ 0x80
 800986c:	4013      	ands	r3, r2
 800986e:	d013      	beq.n	8009898 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009874:	781a      	ldrb	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2256      	movs	r2, #86	@ 0x56
 800988a:	5a9b      	ldrh	r3, [r3, r2]
 800988c:	b29b      	uxth	r3, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	b299      	uxth	r1, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2256      	movs	r2, #86	@ 0x56
 8009896:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009898:	212e      	movs	r1, #46	@ 0x2e
 800989a:	187b      	adds	r3, r7, r1
 800989c:	881a      	ldrh	r2, [r3, #0]
 800989e:	187b      	adds	r3, r7, r1
 80098a0:	3a01      	subs	r2, #1
 80098a2:	801a      	strh	r2, [r3, #0]
 80098a4:	232e      	movs	r3, #46	@ 0x2e
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1a0      	bne.n	80097f0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80098ae:	46c0      	nop			@ (mov r8, r8)
 80098b0:	46bd      	mov	sp, r7
 80098b2:	b00c      	add	sp, #48	@ 0x30
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	46c0      	nop			@ (mov r8, r8)
 80098b8:	ff7fffff 	.word	0xff7fffff

080098bc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08c      	sub	sp, #48	@ 0x30
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2288      	movs	r2, #136	@ 0x88
 80098c8:	589b      	ldr	r3, [r3, r2]
 80098ca:	2b21      	cmp	r3, #33	@ 0x21
 80098cc:	d16a      	bne.n	80099a4 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80098ce:	232e      	movs	r3, #46	@ 0x2e
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	216a      	movs	r1, #106	@ 0x6a
 80098d6:	5a52      	ldrh	r2, [r2, r1]
 80098d8:	801a      	strh	r2, [r3, #0]
 80098da:	e05e      	b.n	800999a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2256      	movs	r2, #86	@ 0x56
 80098e0:	5a9b      	ldrh	r3, [r3, r2]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d133      	bne.n	8009950 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80098e8:	f3ef 8310 	mrs	r3, PRIMASK
 80098ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80098ee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f2:	2301      	movs	r3, #1
 80098f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f383 8810 	msr	PRIMASK, r3
}
 80098fc:	46c0      	nop			@ (mov r8, r8)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4928      	ldr	r1, [pc, #160]	@ (80099ac <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800990a:	400a      	ands	r2, r1
 800990c:	609a      	str	r2, [r3, #8]
 800990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f383 8810 	msr	PRIMASK, r3
}
 8009918:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800991a:	f3ef 8310 	mrs	r3, PRIMASK
 800991e:	617b      	str	r3, [r7, #20]
  return(result);
 8009920:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009922:	623b      	str	r3, [r7, #32]
 8009924:	2301      	movs	r3, #1
 8009926:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f383 8810 	msr	PRIMASK, r3
}
 800992e:	46c0      	nop			@ (mov r8, r8)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2140      	movs	r1, #64	@ 0x40
 800993c:	430a      	orrs	r2, r1
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	f383 8810 	msr	PRIMASK, r3
}
 800994a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800994c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800994e:	e029      	b.n	80099a4 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	2280      	movs	r2, #128	@ 0x80
 8009958:	4013      	ands	r3, r2
 800995a:	d018      	beq.n	800998e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009960:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	001a      	movs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	05d2      	lsls	r2, r2, #23
 800996e:	0dd2      	lsrs	r2, r2, #23
 8009970:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009976:	1c9a      	adds	r2, r3, #2
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2256      	movs	r2, #86	@ 0x56
 8009980:	5a9b      	ldrh	r3, [r3, r2]
 8009982:	b29b      	uxth	r3, r3
 8009984:	3b01      	subs	r3, #1
 8009986:	b299      	uxth	r1, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2256      	movs	r2, #86	@ 0x56
 800998c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800998e:	212e      	movs	r1, #46	@ 0x2e
 8009990:	187b      	adds	r3, r7, r1
 8009992:	881a      	ldrh	r2, [r3, #0]
 8009994:	187b      	adds	r3, r7, r1
 8009996:	3a01      	subs	r2, #1
 8009998:	801a      	strh	r2, [r3, #0]
 800999a:	232e      	movs	r3, #46	@ 0x2e
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d19b      	bne.n	80098dc <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80099a4:	46c0      	nop			@ (mov r8, r8)
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b00c      	add	sp, #48	@ 0x30
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	ff7fffff 	.word	0xff7fffff

080099b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b094      	sub	sp, #80	@ 0x50
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80099b8:	204e      	movs	r0, #78	@ 0x4e
 80099ba:	183b      	adds	r3, r7, r0
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	2160      	movs	r1, #96	@ 0x60
 80099c0:	5a52      	ldrh	r2, [r2, r1]
 80099c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	228c      	movs	r2, #140	@ 0x8c
 80099c8:	589b      	ldr	r3, [r3, r2]
 80099ca:	2b22      	cmp	r3, #34	@ 0x22
 80099cc:	d000      	beq.n	80099d0 <UART_RxISR_8BIT+0x20>
 80099ce:	e0ba      	b.n	8009b46 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099d6:	214c      	movs	r1, #76	@ 0x4c
 80099d8:	187b      	adds	r3, r7, r1
 80099da:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099dc:	187b      	adds	r3, r7, r1
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	183b      	adds	r3, r7, r0
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b2d9      	uxtb	r1, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ec:	400a      	ands	r2, r1
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	225e      	movs	r2, #94	@ 0x5e
 8009a00:	5a9b      	ldrh	r3, [r3, r2]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	3b01      	subs	r3, #1
 8009a06:	b299      	uxth	r1, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	225e      	movs	r2, #94	@ 0x5e
 8009a0c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	225e      	movs	r2, #94	@ 0x5e
 8009a12:	5a9b      	ldrh	r3, [r3, r2]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d000      	beq.n	8009a1c <UART_RxISR_8BIT+0x6c>
 8009a1a:	e09c      	b.n	8009b56 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a20:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a26:	2301      	movs	r3, #1
 8009a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	f383 8810 	msr	PRIMASK, r3
}
 8009a30:	46c0      	nop			@ (mov r8, r8)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4948      	ldr	r1, [pc, #288]	@ (8009b60 <UART_RxISR_8BIT+0x1b0>)
 8009a3e:	400a      	ands	r2, r1
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a48:	f383 8810 	msr	PRIMASK, r3
}
 8009a4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a52:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a58:	2301      	movs	r3, #1
 8009a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5e:	f383 8810 	msr	PRIMASK, r3
}
 8009a62:	46c0      	nop			@ (mov r8, r8)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2101      	movs	r1, #1
 8009a70:	438a      	bics	r2, r1
 8009a72:	609a      	str	r2, [r3, #8]
 8009a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	f383 8810 	msr	PRIMASK, r3
}
 8009a7e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	228c      	movs	r2, #140	@ 0x8c
 8009a84:	2120      	movs	r1, #32
 8009a86:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	2380      	movs	r3, #128	@ 0x80
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	d018      	beq.n	8009ad4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8009aa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8009aa8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009aaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aac:	2301      	movs	r3, #1
 8009aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f383 8810 	msr	PRIMASK, r3
}
 8009ab6:	46c0      	nop			@ (mov r8, r8)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4928      	ldr	r1, [pc, #160]	@ (8009b64 <UART_RxISR_8BIT+0x1b4>)
 8009ac4:	400a      	ands	r2, r1
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	f383 8810 	msr	PRIMASK, r3
}
 8009ad2:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d12f      	bne.n	8009b3c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ae6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ae8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aec:	2301      	movs	r3, #1
 8009aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f383 8810 	msr	PRIMASK, r3
}
 8009af6:	46c0      	nop			@ (mov r8, r8)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2110      	movs	r1, #16
 8009b04:	438a      	bics	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f383 8810 	msr	PRIMASK, r3
}
 8009b12:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	2210      	movs	r2, #16
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	2b10      	cmp	r3, #16
 8009b20:	d103      	bne.n	8009b2a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2210      	movs	r2, #16
 8009b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	225c      	movs	r2, #92	@ 0x5c
 8009b2e:	5a9a      	ldrh	r2, [r3, r2]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	0011      	movs	r1, r2
 8009b34:	0018      	movs	r0, r3
 8009b36:	f7ff f8af 	bl	8008c98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b3a:	e00c      	b.n	8009b56 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f7f9 f9e2 	bl	8002f08 <HAL_UART_RxCpltCallback>
}
 8009b44:	e007      	b.n	8009b56 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2108      	movs	r1, #8
 8009b52:	430a      	orrs	r2, r1
 8009b54:	619a      	str	r2, [r3, #24]
}
 8009b56:	46c0      	nop			@ (mov r8, r8)
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	b014      	add	sp, #80	@ 0x50
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	46c0      	nop			@ (mov r8, r8)
 8009b60:	fffffedf 	.word	0xfffffedf
 8009b64:	fbffffff 	.word	0xfbffffff

08009b68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b094      	sub	sp, #80	@ 0x50
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b70:	204e      	movs	r0, #78	@ 0x4e
 8009b72:	183b      	adds	r3, r7, r0
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	2160      	movs	r1, #96	@ 0x60
 8009b78:	5a52      	ldrh	r2, [r2, r1]
 8009b7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	228c      	movs	r2, #140	@ 0x8c
 8009b80:	589b      	ldr	r3, [r3, r2]
 8009b82:	2b22      	cmp	r3, #34	@ 0x22
 8009b84:	d000      	beq.n	8009b88 <UART_RxISR_16BIT+0x20>
 8009b86:	e0ba      	b.n	8009cfe <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b8e:	214c      	movs	r1, #76	@ 0x4c
 8009b90:	187b      	adds	r3, r7, r1
 8009b92:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b98:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b9a:	187b      	adds	r3, r7, r1
 8009b9c:	183a      	adds	r2, r7, r0
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	8812      	ldrh	r2, [r2, #0]
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ba8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bae:	1c9a      	adds	r2, r3, #2
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	225e      	movs	r2, #94	@ 0x5e
 8009bb8:	5a9b      	ldrh	r3, [r3, r2]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	b299      	uxth	r1, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	225e      	movs	r2, #94	@ 0x5e
 8009bc4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	225e      	movs	r2, #94	@ 0x5e
 8009bca:	5a9b      	ldrh	r3, [r3, r2]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d000      	beq.n	8009bd4 <UART_RxISR_16BIT+0x6c>
 8009bd2:	e09c      	b.n	8009d0e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd8:	623b      	str	r3, [r7, #32]
  return(result);
 8009bda:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bde:	2301      	movs	r3, #1
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	f383 8810 	msr	PRIMASK, r3
}
 8009be8:	46c0      	nop			@ (mov r8, r8)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4948      	ldr	r1, [pc, #288]	@ (8009d18 <UART_RxISR_16BIT+0x1b0>)
 8009bf6:	400a      	ands	r2, r1
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	f383 8810 	msr	PRIMASK, r3
}
 8009c04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c06:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c10:	2301      	movs	r3, #1
 8009c12:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	f383 8810 	msr	PRIMASK, r3
}
 8009c1a:	46c0      	nop			@ (mov r8, r8)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2101      	movs	r1, #1
 8009c28:	438a      	bics	r2, r1
 8009c2a:	609a      	str	r2, [r3, #8]
 8009c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c32:	f383 8810 	msr	PRIMASK, r3
}
 8009c36:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	228c      	movs	r2, #140	@ 0x8c
 8009c3c:	2120      	movs	r1, #32
 8009c3e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	2380      	movs	r3, #128	@ 0x80
 8009c54:	041b      	lsls	r3, r3, #16
 8009c56:	4013      	ands	r3, r2
 8009c58:	d018      	beq.n	8009c8c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c5e:	617b      	str	r3, [r7, #20]
  return(result);
 8009c60:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c64:	2301      	movs	r3, #1
 8009c66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	f383 8810 	msr	PRIMASK, r3
}
 8009c6e:	46c0      	nop			@ (mov r8, r8)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4928      	ldr	r1, [pc, #160]	@ (8009d1c <UART_RxISR_16BIT+0x1b4>)
 8009c7c:	400a      	ands	r2, r1
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	f383 8810 	msr	PRIMASK, r3
}
 8009c8a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d12f      	bne.n	8009cf4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ca0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f383 8810 	msr	PRIMASK, r3
}
 8009cae:	46c0      	nop			@ (mov r8, r8)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2110      	movs	r1, #16
 8009cbc:	438a      	bics	r2, r1
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f383 8810 	msr	PRIMASK, r3
}
 8009cca:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	2210      	movs	r2, #16
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d103      	bne.n	8009ce2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2210      	movs	r2, #16
 8009ce0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	225c      	movs	r2, #92	@ 0x5c
 8009ce6:	5a9a      	ldrh	r2, [r3, r2]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	0011      	movs	r1, r2
 8009cec:	0018      	movs	r0, r3
 8009cee:	f7fe ffd3 	bl	8008c98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cf2:	e00c      	b.n	8009d0e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f7f9 f906 	bl	8002f08 <HAL_UART_RxCpltCallback>
}
 8009cfc:	e007      	b.n	8009d0e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2108      	movs	r1, #8
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	619a      	str	r2, [r3, #24]
}
 8009d0e:	46c0      	nop			@ (mov r8, r8)
 8009d10:	46bd      	mov	sp, r7
 8009d12:	b014      	add	sp, #80	@ 0x50
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	fffffedf 	.word	0xfffffedf
 8009d1c:	fbffffff 	.word	0xfbffffff

08009d20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b0a0      	sub	sp, #128	@ 0x80
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009d28:	237a      	movs	r3, #122	@ 0x7a
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	2160      	movs	r1, #96	@ 0x60
 8009d30:	5a52      	ldrh	r2, [r2, r1]
 8009d32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	228c      	movs	r2, #140	@ 0x8c
 8009d50:	589b      	ldr	r3, [r3, r2]
 8009d52:	2b22      	cmp	r3, #34	@ 0x22
 8009d54:	d000      	beq.n	8009d58 <UART_RxISR_8BIT_FIFOEN+0x38>
 8009d56:	e166      	b.n	800a026 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d58:	236e      	movs	r3, #110	@ 0x6e
 8009d5a:	18fb      	adds	r3, r7, r3
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	2168      	movs	r1, #104	@ 0x68
 8009d60:	5a52      	ldrh	r2, [r2, r1]
 8009d62:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d64:	e10d      	b.n	8009f82 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d6c:	216c      	movs	r1, #108	@ 0x6c
 8009d6e:	187b      	adds	r3, r7, r1
 8009d70:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d72:	187b      	adds	r3, r7, r1
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	237a      	movs	r3, #122	@ 0x7a
 8009d7a:	18fb      	adds	r3, r7, r3
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b2d9      	uxtb	r1, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d84:	400a      	ands	r2, r1
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	225e      	movs	r2, #94	@ 0x5e
 8009d98:	5a9b      	ldrh	r3, [r3, r2]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	b299      	uxth	r1, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	225e      	movs	r2, #94	@ 0x5e
 8009da4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009db0:	2207      	movs	r2, #7
 8009db2:	4013      	ands	r3, r2
 8009db4:	d049      	beq.n	8009e4a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009db6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009db8:	2201      	movs	r2, #1
 8009dba:	4013      	ands	r3, r2
 8009dbc:	d010      	beq.n	8009de0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8009dbe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009dc0:	2380      	movs	r3, #128	@ 0x80
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	d00b      	beq.n	8009de0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2290      	movs	r2, #144	@ 0x90
 8009dd4:	589b      	ldr	r3, [r3, r2]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2190      	movs	r1, #144	@ 0x90
 8009dde:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009de0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009de2:	2202      	movs	r2, #2
 8009de4:	4013      	ands	r3, r2
 8009de6:	d00f      	beq.n	8009e08 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8009de8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dea:	2201      	movs	r2, #1
 8009dec:	4013      	ands	r3, r2
 8009dee:	d00b      	beq.n	8009e08 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2202      	movs	r2, #2
 8009df6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2290      	movs	r2, #144	@ 0x90
 8009dfc:	589b      	ldr	r3, [r3, r2]
 8009dfe:	2204      	movs	r2, #4
 8009e00:	431a      	orrs	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2190      	movs	r1, #144	@ 0x90
 8009e06:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	d00f      	beq.n	8009e30 <UART_RxISR_8BIT_FIFOEN+0x110>
 8009e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e12:	2201      	movs	r2, #1
 8009e14:	4013      	ands	r3, r2
 8009e16:	d00b      	beq.n	8009e30 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2204      	movs	r2, #4
 8009e1e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2290      	movs	r2, #144	@ 0x90
 8009e24:	589b      	ldr	r3, [r3, r2]
 8009e26:	2202      	movs	r2, #2
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2190      	movs	r1, #144	@ 0x90
 8009e2e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2290      	movs	r2, #144	@ 0x90
 8009e34:	589b      	ldr	r3, [r3, r2]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f7fe ff23 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2290      	movs	r2, #144	@ 0x90
 8009e46:	2100      	movs	r1, #0
 8009e48:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	225e      	movs	r2, #94	@ 0x5e
 8009e4e:	5a9b      	ldrh	r3, [r3, r2]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d000      	beq.n	8009e58 <UART_RxISR_8BIT_FIFOEN+0x138>
 8009e56:	e094      	b.n	8009f82 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e58:	f3ef 8310 	mrs	r3, PRIMASK
 8009e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e62:	2301      	movs	r3, #1
 8009e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e68:	f383 8810 	msr	PRIMASK, r3
}
 8009e6c:	46c0      	nop			@ (mov r8, r8)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4971      	ldr	r1, [pc, #452]	@ (800a040 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8009e7a:	400a      	ands	r2, r1
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e80:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e84:	f383 8810 	msr	PRIMASK, r3
}
 8009e88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8009e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e94:	2301      	movs	r3, #1
 8009e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e9a:	f383 8810 	msr	PRIMASK, r3
}
 8009e9e:	46c0      	nop			@ (mov r8, r8)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4966      	ldr	r1, [pc, #408]	@ (800a044 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8009eac:	400a      	ands	r2, r1
 8009eae:	609a      	str	r2, [r3, #8]
 8009eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eb6:	f383 8810 	msr	PRIMASK, r3
}
 8009eba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	228c      	movs	r2, #140	@ 0x8c
 8009ec0:	2120      	movs	r1, #32
 8009ec2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685a      	ldr	r2, [r3, #4]
 8009ed6:	2380      	movs	r3, #128	@ 0x80
 8009ed8:	041b      	lsls	r3, r3, #16
 8009eda:	4013      	ands	r3, r2
 8009edc:	d018      	beq.n	8009f10 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ede:	f3ef 8310 	mrs	r3, PRIMASK
 8009ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ee6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ee8:	2301      	movs	r3, #1
 8009eea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	f383 8810 	msr	PRIMASK, r3
}
 8009ef2:	46c0      	nop			@ (mov r8, r8)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4952      	ldr	r1, [pc, #328]	@ (800a048 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8009f00:	400a      	ands	r2, r1
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0a:	f383 8810 	msr	PRIMASK, r3
}
 8009f0e:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d12f      	bne.n	8009f78 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009f22:	623b      	str	r3, [r7, #32]
  return(result);
 8009f24:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f28:	2301      	movs	r3, #1
 8009f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	f383 8810 	msr	PRIMASK, r3
}
 8009f32:	46c0      	nop			@ (mov r8, r8)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2110      	movs	r1, #16
 8009f40:	438a      	bics	r2, r1
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	f383 8810 	msr	PRIMASK, r3
}
 8009f4e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	2210      	movs	r2, #16
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b10      	cmp	r3, #16
 8009f5c:	d103      	bne.n	8009f66 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2210      	movs	r2, #16
 8009f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	225c      	movs	r2, #92	@ 0x5c
 8009f6a:	5a9a      	ldrh	r2, [r3, r2]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	0011      	movs	r1, r2
 8009f70:	0018      	movs	r0, r3
 8009f72:	f7fe fe91 	bl	8008c98 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009f76:	e00e      	b.n	8009f96 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	f7f8 ffc4 	bl	8002f08 <HAL_UART_RxCpltCallback>
        break;
 8009f80:	e009      	b.n	8009f96 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f82:	236e      	movs	r3, #110	@ 0x6e
 8009f84:	18fb      	adds	r3, r7, r3
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d004      	beq.n	8009f96 <UART_RxISR_8BIT_FIFOEN+0x276>
 8009f8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f8e:	2220      	movs	r2, #32
 8009f90:	4013      	ands	r3, r2
 8009f92:	d000      	beq.n	8009f96 <UART_RxISR_8BIT_FIFOEN+0x276>
 8009f94:	e6e7      	b.n	8009d66 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f96:	205a      	movs	r0, #90	@ 0x5a
 8009f98:	183b      	adds	r3, r7, r0
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	215e      	movs	r1, #94	@ 0x5e
 8009f9e:	5a52      	ldrh	r2, [r2, r1]
 8009fa0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fa2:	0001      	movs	r1, r0
 8009fa4:	187b      	adds	r3, r7, r1
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d044      	beq.n	800a036 <UART_RxISR_8BIT_FIFOEN+0x316>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2268      	movs	r2, #104	@ 0x68
 8009fb0:	5a9b      	ldrh	r3, [r3, r2]
 8009fb2:	187a      	adds	r2, r7, r1
 8009fb4:	8812      	ldrh	r2, [r2, #0]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d23d      	bcs.n	800a036 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009fba:	f3ef 8310 	mrs	r3, PRIMASK
 8009fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f383 8810 	msr	PRIMASK, r3
}
 8009fce:	46c0      	nop			@ (mov r8, r8)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	491c      	ldr	r1, [pc, #112]	@ (800a04c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8009fdc:	400a      	ands	r2, r1
 8009fde:	609a      	str	r2, [r3, #8]
 8009fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f383 8810 	msr	PRIMASK, r3
}
 8009fea:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a18      	ldr	r2, [pc, #96]	@ (800a050 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8009ff0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ff6:	617b      	str	r3, [r7, #20]
  return(result);
 8009ff8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	f383 8810 	msr	PRIMASK, r3
}
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2120      	movs	r1, #32
 800a014:	430a      	orrs	r2, r1
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a01a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f383 8810 	msr	PRIMASK, r3
}
 800a022:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a024:	e007      	b.n	800a036 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	699a      	ldr	r2, [r3, #24]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2108      	movs	r1, #8
 800a032:	430a      	orrs	r2, r1
 800a034:	619a      	str	r2, [r3, #24]
}
 800a036:	46c0      	nop			@ (mov r8, r8)
 800a038:	46bd      	mov	sp, r7
 800a03a:	b020      	add	sp, #128	@ 0x80
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	46c0      	nop			@ (mov r8, r8)
 800a040:	fffffeff 	.word	0xfffffeff
 800a044:	effffffe 	.word	0xeffffffe
 800a048:	fbffffff 	.word	0xfbffffff
 800a04c:	efffffff 	.word	0xefffffff
 800a050:	080099b1 	.word	0x080099b1

0800a054 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b0a2      	sub	sp, #136	@ 0x88
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a05c:	2382      	movs	r3, #130	@ 0x82
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	2160      	movs	r1, #96	@ 0x60
 800a064:	5a52      	ldrh	r2, [r2, r1]
 800a066:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	2284      	movs	r2, #132	@ 0x84
 800a070:	18ba      	adds	r2, r7, r2
 800a072:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	228c      	movs	r2, #140	@ 0x8c
 800a088:	589b      	ldr	r3, [r3, r2]
 800a08a:	2b22      	cmp	r3, #34	@ 0x22
 800a08c:	d000      	beq.n	800a090 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800a08e:	e170      	b.n	800a372 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a090:	2376      	movs	r3, #118	@ 0x76
 800a092:	18fb      	adds	r3, r7, r3
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	2168      	movs	r1, #104	@ 0x68
 800a098:	5a52      	ldrh	r2, [r2, r1]
 800a09a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a09c:	e115      	b.n	800a2ca <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0a4:	2174      	movs	r1, #116	@ 0x74
 800a0a6:	187b      	adds	r3, r7, r1
 800a0a8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ae:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800a0b0:	187b      	adds	r3, r7, r1
 800a0b2:	2282      	movs	r2, #130	@ 0x82
 800a0b4:	18ba      	adds	r2, r7, r2
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	8812      	ldrh	r2, [r2, #0]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0c6:	1c9a      	adds	r2, r3, #2
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	225e      	movs	r2, #94	@ 0x5e
 800a0d0:	5a9b      	ldrh	r3, [r3, r2]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	b299      	uxth	r1, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	225e      	movs	r2, #94	@ 0x5e
 800a0dc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	2184      	movs	r1, #132	@ 0x84
 800a0e6:	187a      	adds	r2, r7, r1
 800a0e8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0ea:	187b      	adds	r3, r7, r1
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2207      	movs	r2, #7
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	d04e      	beq.n	800a192 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0f4:	187b      	adds	r3, r7, r1
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	d010      	beq.n	800a120 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800a0fe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a100:	2380      	movs	r3, #128	@ 0x80
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	4013      	ands	r3, r2
 800a106:	d00b      	beq.n	800a120 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2201      	movs	r2, #1
 800a10e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2290      	movs	r2, #144	@ 0x90
 800a114:	589b      	ldr	r3, [r3, r2]
 800a116:	2201      	movs	r2, #1
 800a118:	431a      	orrs	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2190      	movs	r1, #144	@ 0x90
 800a11e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a120:	2384      	movs	r3, #132	@ 0x84
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2202      	movs	r2, #2
 800a128:	4013      	ands	r3, r2
 800a12a:	d00f      	beq.n	800a14c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800a12c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a12e:	2201      	movs	r2, #1
 800a130:	4013      	ands	r3, r2
 800a132:	d00b      	beq.n	800a14c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2202      	movs	r2, #2
 800a13a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2290      	movs	r2, #144	@ 0x90
 800a140:	589b      	ldr	r3, [r3, r2]
 800a142:	2204      	movs	r2, #4
 800a144:	431a      	orrs	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2190      	movs	r1, #144	@ 0x90
 800a14a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a14c:	2384      	movs	r3, #132	@ 0x84
 800a14e:	18fb      	adds	r3, r7, r3
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2204      	movs	r2, #4
 800a154:	4013      	ands	r3, r2
 800a156:	d00f      	beq.n	800a178 <UART_RxISR_16BIT_FIFOEN+0x124>
 800a158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a15a:	2201      	movs	r2, #1
 800a15c:	4013      	ands	r3, r2
 800a15e:	d00b      	beq.n	800a178 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2204      	movs	r2, #4
 800a166:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2290      	movs	r2, #144	@ 0x90
 800a16c:	589b      	ldr	r3, [r3, r2]
 800a16e:	2202      	movs	r2, #2
 800a170:	431a      	orrs	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2190      	movs	r1, #144	@ 0x90
 800a176:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2290      	movs	r2, #144	@ 0x90
 800a17c:	589b      	ldr	r3, [r3, r2]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d007      	beq.n	800a192 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	0018      	movs	r0, r3
 800a186:	f7fe fd7f 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2290      	movs	r2, #144	@ 0x90
 800a18e:	2100      	movs	r1, #0
 800a190:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	225e      	movs	r2, #94	@ 0x5e
 800a196:	5a9b      	ldrh	r3, [r3, r2]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d000      	beq.n	800a1a0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800a19e:	e094      	b.n	800a2ca <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a1a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1b0:	f383 8810 	msr	PRIMASK, r3
}
 800a1b4:	46c0      	nop			@ (mov r8, r8)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4972      	ldr	r1, [pc, #456]	@ (800a38c <UART_RxISR_16BIT_FIFOEN+0x338>)
 800a1c2:	400a      	ands	r2, r1
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1c8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1cc:	f383 8810 	msr	PRIMASK, r3
}
 800a1d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800a1d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1dc:	2301      	movs	r3, #1
 800a1de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e2:	f383 8810 	msr	PRIMASK, r3
}
 800a1e6:	46c0      	nop			@ (mov r8, r8)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4967      	ldr	r1, [pc, #412]	@ (800a390 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 800a1f4:	400a      	ands	r2, r1
 800a1f6:	609a      	str	r2, [r3, #8]
 800a1f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1fa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1fe:	f383 8810 	msr	PRIMASK, r3
}
 800a202:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	228c      	movs	r2, #140	@ 0x8c
 800a208:	2120      	movs	r1, #32
 800a20a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	2380      	movs	r3, #128	@ 0x80
 800a220:	041b      	lsls	r3, r3, #16
 800a222:	4013      	ands	r3, r2
 800a224:	d018      	beq.n	800a258 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a226:	f3ef 8310 	mrs	r3, PRIMASK
 800a22a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a22e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a230:	2301      	movs	r3, #1
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a236:	f383 8810 	msr	PRIMASK, r3
}
 800a23a:	46c0      	nop			@ (mov r8, r8)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4953      	ldr	r1, [pc, #332]	@ (800a394 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800a248:	400a      	ands	r2, r1
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a24e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	f383 8810 	msr	PRIMASK, r3
}
 800a256:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d12f      	bne.n	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a266:	f3ef 8310 	mrs	r3, PRIMASK
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a26e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a270:	2301      	movs	r3, #1
 800a272:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a276:	f383 8810 	msr	PRIMASK, r3
}
 800a27a:	46c0      	nop			@ (mov r8, r8)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2110      	movs	r1, #16
 800a288:	438a      	bics	r2, r1
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a28e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a292:	f383 8810 	msr	PRIMASK, r3
}
 800a296:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	2210      	movs	r2, #16
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	2b10      	cmp	r3, #16
 800a2a4:	d103      	bne.n	800a2ae <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2210      	movs	r2, #16
 800a2ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	225c      	movs	r2, #92	@ 0x5c
 800a2b2:	5a9a      	ldrh	r2, [r3, r2]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	0011      	movs	r1, r2
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f7fe fced 	bl	8008c98 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a2be:	e010      	b.n	800a2e2 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f7f8 fe20 	bl	8002f08 <HAL_UART_RxCpltCallback>
        break;
 800a2c8:	e00b      	b.n	800a2e2 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2ca:	2376      	movs	r3, #118	@ 0x76
 800a2cc:	18fb      	adds	r3, r7, r3
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d006      	beq.n	800a2e2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 800a2d4:	2384      	movs	r3, #132	@ 0x84
 800a2d6:	18fb      	adds	r3, r7, r3
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	4013      	ands	r3, r2
 800a2de:	d000      	beq.n	800a2e2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 800a2e0:	e6dd      	b.n	800a09e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2e2:	205e      	movs	r0, #94	@ 0x5e
 800a2e4:	183b      	adds	r3, r7, r0
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	215e      	movs	r1, #94	@ 0x5e
 800a2ea:	5a52      	ldrh	r2, [r2, r1]
 800a2ec:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2ee:	0001      	movs	r1, r0
 800a2f0:	187b      	adds	r3, r7, r1
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d044      	beq.n	800a382 <UART_RxISR_16BIT_FIFOEN+0x32e>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2268      	movs	r2, #104	@ 0x68
 800a2fc:	5a9b      	ldrh	r3, [r3, r2]
 800a2fe:	187a      	adds	r2, r7, r1
 800a300:	8812      	ldrh	r2, [r2, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d23d      	bcs.n	800a382 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a306:	f3ef 8310 	mrs	r3, PRIMASK
 800a30a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a30c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a30e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a310:	2301      	movs	r3, #1
 800a312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f383 8810 	msr	PRIMASK, r3
}
 800a31a:	46c0      	nop			@ (mov r8, r8)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	491c      	ldr	r1, [pc, #112]	@ (800a398 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800a328:	400a      	ands	r2, r1
 800a32a:	609a      	str	r2, [r3, #8]
 800a32c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a32e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f383 8810 	msr	PRIMASK, r3
}
 800a336:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a18      	ldr	r2, [pc, #96]	@ (800a39c <UART_RxISR_16BIT_FIFOEN+0x348>)
 800a33c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a33e:	f3ef 8310 	mrs	r3, PRIMASK
 800a342:	61bb      	str	r3, [r7, #24]
  return(result);
 800a344:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a346:	657b      	str	r3, [r7, #84]	@ 0x54
 800a348:	2301      	movs	r3, #1
 800a34a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	f383 8810 	msr	PRIMASK, r3
}
 800a352:	46c0      	nop			@ (mov r8, r8)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2120      	movs	r1, #32
 800a360:	430a      	orrs	r2, r1
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a366:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	f383 8810 	msr	PRIMASK, r3
}
 800a36e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a370:	e007      	b.n	800a382 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	699a      	ldr	r2, [r3, #24]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2108      	movs	r1, #8
 800a37e:	430a      	orrs	r2, r1
 800a380:	619a      	str	r2, [r3, #24]
}
 800a382:	46c0      	nop			@ (mov r8, r8)
 800a384:	46bd      	mov	sp, r7
 800a386:	b022      	add	sp, #136	@ 0x88
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	46c0      	nop			@ (mov r8, r8)
 800a38c:	fffffeff 	.word	0xfffffeff
 800a390:	effffffe 	.word	0xeffffffe
 800a394:	fbffffff 	.word	0xfbffffff
 800a398:	efffffff 	.word	0xefffffff
 800a39c:	08009b69 	.word	0x08009b69

0800a3a0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e05d      	b.n	800a474 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2288      	movs	r2, #136	@ 0x88
 800a3bc:	589b      	ldr	r3, [r3, r2]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d107      	bne.n	800a3d2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2284      	movs	r2, #132	@ 0x84
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f7f9 fa55 	bl	800387c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2288      	movs	r2, #136	@ 0x88
 800a3d6:	2124      	movs	r1, #36	@ 0x24
 800a3d8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	438a      	bics	r2, r1
 800a3e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f7fe fdd9 	bl	8008fac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	f7fe fc57 	bl	8008cb0 <UART_SetConfig>
 800a402:	0003      	movs	r3, r0
 800a404:	2b01      	cmp	r3, #1
 800a406:	d101      	bne.n	800a40c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e033      	b.n	800a474 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689a      	ldr	r2, [r3, #8]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2180      	movs	r1, #128	@ 0x80
 800a418:	01c9      	lsls	r1, r1, #7
 800a41a:	430a      	orrs	r2, r1
 800a41c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	4a15      	ldr	r2, [pc, #84]	@ (800a47c <HAL_RS485Ex_Init+0xdc>)
 800a426:	4013      	ands	r3, r2
 800a428:	0019      	movs	r1, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	430a      	orrs	r2, r1
 800a432:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	055b      	lsls	r3, r3, #21
 800a438:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	041b      	lsls	r3, r3, #16
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a0d      	ldr	r2, [pc, #52]	@ (800a480 <HAL_RS485Ex_Init+0xe0>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	0019      	movs	r1, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	430a      	orrs	r2, r1
 800a458:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2101      	movs	r1, #1
 800a466:	430a      	orrs	r2, r1
 800a468:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	0018      	movs	r0, r3
 800a46e:	f7fe fe51 	bl	8009114 <UART_CheckIdleState>
 800a472:	0003      	movs	r3, r0
}
 800a474:	0018      	movs	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	b006      	add	sp, #24
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	ffff7fff 	.word	0xffff7fff
 800a480:	fc00ffff 	.word	0xfc00ffff

0800a484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2284      	movs	r2, #132	@ 0x84
 800a490:	5c9b      	ldrb	r3, [r3, r2]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_UARTEx_DisableFifoMode+0x16>
 800a496:	2302      	movs	r3, #2
 800a498:	e027      	b.n	800a4ea <HAL_UARTEx_DisableFifoMode+0x66>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2284      	movs	r2, #132	@ 0x84
 800a49e:	2101      	movs	r1, #1
 800a4a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2288      	movs	r2, #136	@ 0x88
 800a4a6:	2124      	movs	r1, #36	@ 0x24
 800a4a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2101      	movs	r1, #1
 800a4be:	438a      	bics	r2, r1
 800a4c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a4f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2288      	movs	r2, #136	@ 0x88
 800a4dc:	2120      	movs	r1, #32
 800a4de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2284      	movs	r2, #132	@ 0x84
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	b004      	add	sp, #16
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	46c0      	nop			@ (mov r8, r8)
 800a4f4:	dfffffff 	.word	0xdfffffff

0800a4f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2284      	movs	r2, #132	@ 0x84
 800a506:	5c9b      	ldrb	r3, [r3, r2]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d101      	bne.n	800a510 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a50c:	2302      	movs	r3, #2
 800a50e:	e02e      	b.n	800a56e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2284      	movs	r2, #132	@ 0x84
 800a514:	2101      	movs	r1, #1
 800a516:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2288      	movs	r2, #136	@ 0x88
 800a51c:	2124      	movs	r1, #36	@ 0x24
 800a51e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2101      	movs	r1, #1
 800a534:	438a      	bics	r2, r1
 800a536:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	08d9      	lsrs	r1, r3, #3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	0018      	movs	r0, r3
 800a550:	f000 f8b8 	bl	800a6c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2288      	movs	r2, #136	@ 0x88
 800a560:	2120      	movs	r1, #32
 800a562:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2284      	movs	r2, #132	@ 0x84
 800a568:	2100      	movs	r1, #0
 800a56a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	0018      	movs	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	b004      	add	sp, #16
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2284      	movs	r2, #132	@ 0x84
 800a586:	5c9b      	ldrb	r3, [r3, r2]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d101      	bne.n	800a590 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a58c:	2302      	movs	r3, #2
 800a58e:	e02f      	b.n	800a5f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2284      	movs	r2, #132	@ 0x84
 800a594:	2101      	movs	r1, #1
 800a596:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2288      	movs	r2, #136	@ 0x88
 800a59c:	2124      	movs	r1, #36	@ 0x24
 800a59e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	438a      	bics	r2, r1
 800a5b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	4a0e      	ldr	r2, [pc, #56]	@ (800a5f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	0019      	movs	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	f000 f877 	bl	800a6c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2288      	movs	r2, #136	@ 0x88
 800a5e2:	2120      	movs	r1, #32
 800a5e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2284      	movs	r2, #132	@ 0x84
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	b004      	add	sp, #16
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	f1ffffff 	.word	0xf1ffffff

0800a5fc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	@ 0x28
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	1dbb      	adds	r3, r7, #6
 800a608:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a60a:	2327      	movs	r3, #39	@ 0x27
 800a60c:	18fb      	adds	r3, r7, r3
 800a60e:	2200      	movs	r2, #0
 800a610:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	228c      	movs	r2, #140	@ 0x8c
 800a616:	589b      	ldr	r3, [r3, r2]
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d14e      	bne.n	800a6ba <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 800a622:	1dbb      	adds	r3, r7, #6
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e046      	b.n	800a6bc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	2380      	movs	r3, #128	@ 0x80
 800a634:	015b      	lsls	r3, r3, #5
 800a636:	429a      	cmp	r2, r3
 800a638:	d109      	bne.n	800a64e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d105      	bne.n	800a64e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2201      	movs	r2, #1
 800a646:	4013      	ands	r3, r2
 800a648:	d001      	beq.n	800a64e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e036      	b.n	800a6bc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800a65a:	1dbb      	adds	r3, r7, #6
 800a65c:	881a      	ldrh	r2, [r3, #0]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	0018      	movs	r0, r3
 800a664:	f7fe fe70 	bl	8009348 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d11c      	bne.n	800a6aa <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2210      	movs	r2, #16
 800a676:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a678:	f3ef 8310 	mrs	r3, PRIMASK
 800a67c:	617b      	str	r3, [r7, #20]
  return(result);
 800a67e:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a680:	623b      	str	r3, [r7, #32]
 800a682:	2301      	movs	r3, #1
 800a684:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	f383 8810 	msr	PRIMASK, r3
}
 800a68c:	46c0      	nop			@ (mov r8, r8)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2110      	movs	r1, #16
 800a69a:	430a      	orrs	r2, r1
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	f383 8810 	msr	PRIMASK, r3
}
 800a6a8:	e003      	b.n	800a6b2 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800a6aa:	2327      	movs	r3, #39	@ 0x27
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800a6b2:	2327      	movs	r3, #39	@ 0x27
 800a6b4:	18fb      	adds	r3, r7, r3
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	e000      	b.n	800a6bc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800a6ba:	2302      	movs	r3, #2
  }
}
 800a6bc:	0018      	movs	r0, r3
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	b00a      	add	sp, #40	@ 0x28
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d108      	bne.n	800a6e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	226a      	movs	r2, #106	@ 0x6a
 800a6d8:	2101      	movs	r1, #1
 800a6da:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2268      	movs	r2, #104	@ 0x68
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6e4:	e043      	b.n	800a76e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6e6:	260f      	movs	r6, #15
 800a6e8:	19bb      	adds	r3, r7, r6
 800a6ea:	2208      	movs	r2, #8
 800a6ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ee:	200e      	movs	r0, #14
 800a6f0:	183b      	adds	r3, r7, r0
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	0e5b      	lsrs	r3, r3, #25
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	240d      	movs	r4, #13
 800a702:	193b      	adds	r3, r7, r4
 800a704:	2107      	movs	r1, #7
 800a706:	400a      	ands	r2, r1
 800a708:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	0f5b      	lsrs	r3, r3, #29
 800a712:	b2da      	uxtb	r2, r3
 800a714:	250c      	movs	r5, #12
 800a716:	197b      	adds	r3, r7, r5
 800a718:	2107      	movs	r1, #7
 800a71a:	400a      	ands	r2, r1
 800a71c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a71e:	183b      	adds	r3, r7, r0
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	197a      	adds	r2, r7, r5
 800a724:	7812      	ldrb	r2, [r2, #0]
 800a726:	4914      	ldr	r1, [pc, #80]	@ (800a778 <UARTEx_SetNbDataToProcess+0xb4>)
 800a728:	5c8a      	ldrb	r2, [r1, r2]
 800a72a:	435a      	muls	r2, r3
 800a72c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a72e:	197b      	adds	r3, r7, r5
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	4a12      	ldr	r2, [pc, #72]	@ (800a77c <UARTEx_SetNbDataToProcess+0xb8>)
 800a734:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a736:	0019      	movs	r1, r3
 800a738:	f7f5 fd70 	bl	800021c <__divsi3>
 800a73c:	0003      	movs	r3, r0
 800a73e:	b299      	uxth	r1, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	226a      	movs	r2, #106	@ 0x6a
 800a744:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a746:	19bb      	adds	r3, r7, r6
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	193a      	adds	r2, r7, r4
 800a74c:	7812      	ldrb	r2, [r2, #0]
 800a74e:	490a      	ldr	r1, [pc, #40]	@ (800a778 <UARTEx_SetNbDataToProcess+0xb4>)
 800a750:	5c8a      	ldrb	r2, [r1, r2]
 800a752:	435a      	muls	r2, r3
 800a754:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a756:	193b      	adds	r3, r7, r4
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	4a08      	ldr	r2, [pc, #32]	@ (800a77c <UARTEx_SetNbDataToProcess+0xb8>)
 800a75c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a75e:	0019      	movs	r1, r3
 800a760:	f7f5 fd5c 	bl	800021c <__divsi3>
 800a764:	0003      	movs	r3, r0
 800a766:	b299      	uxth	r1, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2268      	movs	r2, #104	@ 0x68
 800a76c:	5299      	strh	r1, [r3, r2]
}
 800a76e:	46c0      	nop			@ (mov r8, r8)
 800a770:	46bd      	mov	sp, r7
 800a772:	b005      	add	sp, #20
 800a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a776:	46c0      	nop			@ (mov r8, r8)
 800a778:	0800b340 	.word	0x0800b340
 800a77c:	0800b348 	.word	0x0800b348

0800a780 <memset>:
 800a780:	0003      	movs	r3, r0
 800a782:	1882      	adds	r2, r0, r2
 800a784:	4293      	cmp	r3, r2
 800a786:	d100      	bne.n	800a78a <memset+0xa>
 800a788:	4770      	bx	lr
 800a78a:	7019      	strb	r1, [r3, #0]
 800a78c:	3301      	adds	r3, #1
 800a78e:	e7f9      	b.n	800a784 <memset+0x4>

0800a790 <__errno>:
 800a790:	4b01      	ldr	r3, [pc, #4]	@ (800a798 <__errno+0x8>)
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	4770      	bx	lr
 800a796:	46c0      	nop			@ (mov r8, r8)
 800a798:	20000080 	.word	0x20000080

0800a79c <__libc_init_array>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	2600      	movs	r6, #0
 800a7a0:	4c0c      	ldr	r4, [pc, #48]	@ (800a7d4 <__libc_init_array+0x38>)
 800a7a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a7d8 <__libc_init_array+0x3c>)
 800a7a4:	1b64      	subs	r4, r4, r5
 800a7a6:	10a4      	asrs	r4, r4, #2
 800a7a8:	42a6      	cmp	r6, r4
 800a7aa:	d109      	bne.n	800a7c0 <__libc_init_array+0x24>
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	f000 fb99 	bl	800aee4 <_init>
 800a7b2:	4c0a      	ldr	r4, [pc, #40]	@ (800a7dc <__libc_init_array+0x40>)
 800a7b4:	4d0a      	ldr	r5, [pc, #40]	@ (800a7e0 <__libc_init_array+0x44>)
 800a7b6:	1b64      	subs	r4, r4, r5
 800a7b8:	10a4      	asrs	r4, r4, #2
 800a7ba:	42a6      	cmp	r6, r4
 800a7bc:	d105      	bne.n	800a7ca <__libc_init_array+0x2e>
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	00b3      	lsls	r3, r6, #2
 800a7c2:	58eb      	ldr	r3, [r5, r3]
 800a7c4:	4798      	blx	r3
 800a7c6:	3601      	adds	r6, #1
 800a7c8:	e7ee      	b.n	800a7a8 <__libc_init_array+0xc>
 800a7ca:	00b3      	lsls	r3, r6, #2
 800a7cc:	58eb      	ldr	r3, [r5, r3]
 800a7ce:	4798      	blx	r3
 800a7d0:	3601      	adds	r6, #1
 800a7d2:	e7f2      	b.n	800a7ba <__libc_init_array+0x1e>
 800a7d4:	0800b38c 	.word	0x0800b38c
 800a7d8:	0800b38c 	.word	0x0800b38c
 800a7dc:	0800b390 	.word	0x0800b390
 800a7e0:	0800b38c 	.word	0x0800b38c

0800a7e4 <memcpy>:
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d100      	bne.n	800a7ee <memcpy+0xa>
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	5ccc      	ldrb	r4, [r1, r3]
 800a7f0:	54c4      	strb	r4, [r0, r3]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	e7f8      	b.n	800a7e8 <memcpy+0x4>
	...

0800a7f8 <asinf>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	1c05      	adds	r5, r0, #0
 800a7fc:	f000 f828 	bl	800a850 <__ieee754_asinf>
 800a800:	1c29      	adds	r1, r5, #0
 800a802:	1c04      	adds	r4, r0, #0
 800a804:	1c28      	adds	r0, r5, #0
 800a806:	f7f6 fc81 	bl	800110c <__aeabi_fcmpun>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d110      	bne.n	800a830 <asinf+0x38>
 800a80e:	1c28      	adds	r0, r5, #0
 800a810:	f000 f816 	bl	800a840 <fabsf>
 800a814:	21fe      	movs	r1, #254	@ 0xfe
 800a816:	0589      	lsls	r1, r1, #22
 800a818:	f7f5 fe12 	bl	8000440 <__aeabi_fcmpgt>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d007      	beq.n	800a830 <asinf+0x38>
 800a820:	f7ff ffb6 	bl	800a790 <__errno>
 800a824:	2321      	movs	r3, #33	@ 0x21
 800a826:	6003      	str	r3, [r0, #0]
 800a828:	4802      	ldr	r0, [pc, #8]	@ (800a834 <asinf+0x3c>)
 800a82a:	f000 f80d 	bl	800a848 <nanf>
 800a82e:	1c04      	adds	r4, r0, #0
 800a830:	1c20      	adds	r0, r4, #0
 800a832:	bd70      	pop	{r4, r5, r6, pc}
 800a834:	0800b350 	.word	0x0800b350

0800a838 <atan2f>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	f000 f951 	bl	800aae0 <__ieee754_atan2f>
 800a83e:	bd10      	pop	{r4, pc}

0800a840 <fabsf>:
 800a840:	0040      	lsls	r0, r0, #1
 800a842:	0840      	lsrs	r0, r0, #1
 800a844:	4770      	bx	lr
	...

0800a848 <nanf>:
 800a848:	4800      	ldr	r0, [pc, #0]	@ (800a84c <nanf+0x4>)
 800a84a:	4770      	bx	lr
 800a84c:	7fc00000 	.word	0x7fc00000

0800a850 <__ieee754_asinf>:
 800a850:	23fe      	movs	r3, #254	@ 0xfe
 800a852:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a854:	0046      	lsls	r6, r0, #1
 800a856:	b085      	sub	sp, #20
 800a858:	1c04      	adds	r4, r0, #0
 800a85a:	9002      	str	r0, [sp, #8]
 800a85c:	0876      	lsrs	r6, r6, #1
 800a85e:	059b      	lsls	r3, r3, #22
 800a860:	429e      	cmp	r6, r3
 800a862:	d10c      	bne.n	800a87e <__ieee754_asinf+0x2e>
 800a864:	498e      	ldr	r1, [pc, #568]	@ (800aaa0 <__ieee754_asinf+0x250>)
 800a866:	f7f6 f96f 	bl	8000b48 <__aeabi_fmul>
 800a86a:	498e      	ldr	r1, [pc, #568]	@ (800aaa4 <__ieee754_asinf+0x254>)
 800a86c:	1c05      	adds	r5, r0, #0
 800a86e:	1c20      	adds	r0, r4, #0
 800a870:	f7f6 f96a 	bl	8000b48 <__aeabi_fmul>
 800a874:	1c01      	adds	r1, r0, #0
 800a876:	1c28      	adds	r0, r5, #0
 800a878:	f7f5 fdf6 	bl	8000468 <__aeabi_fadd>
 800a87c:	e007      	b.n	800a88e <__ieee754_asinf+0x3e>
 800a87e:	429e      	cmp	r6, r3
 800a880:	d909      	bls.n	800a896 <__ieee754_asinf+0x46>
 800a882:	1c01      	adds	r1, r0, #0
 800a884:	f7f6 fa9e 	bl	8000dc4 <__aeabi_fsub>
 800a888:	1c01      	adds	r1, r0, #0
 800a88a:	f7f5 ff77 	bl	800077c <__aeabi_fdiv>
 800a88e:	1c04      	adds	r4, r0, #0
 800a890:	1c20      	adds	r0, r4, #0
 800a892:	b005      	add	sp, #20
 800a894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a896:	23fc      	movs	r3, #252	@ 0xfc
 800a898:	059b      	lsls	r3, r3, #22
 800a89a:	429e      	cmp	r6, r3
 800a89c:	d20c      	bcs.n	800a8b8 <__ieee754_asinf+0x68>
 800a89e:	23c8      	movs	r3, #200	@ 0xc8
 800a8a0:	059b      	lsls	r3, r3, #22
 800a8a2:	429e      	cmp	r6, r3
 800a8a4:	d276      	bcs.n	800a994 <__ieee754_asinf+0x144>
 800a8a6:	4980      	ldr	r1, [pc, #512]	@ (800aaa8 <__ieee754_asinf+0x258>)
 800a8a8:	f7f5 fdde 	bl	8000468 <__aeabi_fadd>
 800a8ac:	21fe      	movs	r1, #254	@ 0xfe
 800a8ae:	0589      	lsls	r1, r1, #22
 800a8b0:	f7f5 fdc6 	bl	8000440 <__aeabi_fcmpgt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1eb      	bne.n	800a890 <__ieee754_asinf+0x40>
 800a8b8:	1c20      	adds	r0, r4, #0
 800a8ba:	f7ff ffc1 	bl	800a840 <fabsf>
 800a8be:	1c01      	adds	r1, r0, #0
 800a8c0:	20fe      	movs	r0, #254	@ 0xfe
 800a8c2:	0580      	lsls	r0, r0, #22
 800a8c4:	f7f6 fa7e 	bl	8000dc4 <__aeabi_fsub>
 800a8c8:	21fc      	movs	r1, #252	@ 0xfc
 800a8ca:	0589      	lsls	r1, r1, #22
 800a8cc:	f7f6 f93c 	bl	8000b48 <__aeabi_fmul>
 800a8d0:	4976      	ldr	r1, [pc, #472]	@ (800aaac <__ieee754_asinf+0x25c>)
 800a8d2:	1c04      	adds	r4, r0, #0
 800a8d4:	f7f6 f938 	bl	8000b48 <__aeabi_fmul>
 800a8d8:	4975      	ldr	r1, [pc, #468]	@ (800aab0 <__ieee754_asinf+0x260>)
 800a8da:	f7f5 fdc5 	bl	8000468 <__aeabi_fadd>
 800a8de:	1c21      	adds	r1, r4, #0
 800a8e0:	f7f6 f932 	bl	8000b48 <__aeabi_fmul>
 800a8e4:	4973      	ldr	r1, [pc, #460]	@ (800aab4 <__ieee754_asinf+0x264>)
 800a8e6:	f7f6 fa6d 	bl	8000dc4 <__aeabi_fsub>
 800a8ea:	1c21      	adds	r1, r4, #0
 800a8ec:	f7f6 f92c 	bl	8000b48 <__aeabi_fmul>
 800a8f0:	4971      	ldr	r1, [pc, #452]	@ (800aab8 <__ieee754_asinf+0x268>)
 800a8f2:	f7f5 fdb9 	bl	8000468 <__aeabi_fadd>
 800a8f6:	1c21      	adds	r1, r4, #0
 800a8f8:	f7f6 f926 	bl	8000b48 <__aeabi_fmul>
 800a8fc:	496f      	ldr	r1, [pc, #444]	@ (800aabc <__ieee754_asinf+0x26c>)
 800a8fe:	f7f6 fa61 	bl	8000dc4 <__aeabi_fsub>
 800a902:	1c21      	adds	r1, r4, #0
 800a904:	f7f6 f920 	bl	8000b48 <__aeabi_fmul>
 800a908:	496d      	ldr	r1, [pc, #436]	@ (800aac0 <__ieee754_asinf+0x270>)
 800a90a:	f7f5 fdad 	bl	8000468 <__aeabi_fadd>
 800a90e:	1c21      	adds	r1, r4, #0
 800a910:	f7f6 f91a 	bl	8000b48 <__aeabi_fmul>
 800a914:	496b      	ldr	r1, [pc, #428]	@ (800aac4 <__ieee754_asinf+0x274>)
 800a916:	9001      	str	r0, [sp, #4]
 800a918:	1c20      	adds	r0, r4, #0
 800a91a:	f7f6 f915 	bl	8000b48 <__aeabi_fmul>
 800a91e:	496a      	ldr	r1, [pc, #424]	@ (800aac8 <__ieee754_asinf+0x278>)
 800a920:	f7f6 fa50 	bl	8000dc4 <__aeabi_fsub>
 800a924:	1c21      	adds	r1, r4, #0
 800a926:	f7f6 f90f 	bl	8000b48 <__aeabi_fmul>
 800a92a:	4968      	ldr	r1, [pc, #416]	@ (800aacc <__ieee754_asinf+0x27c>)
 800a92c:	f7f5 fd9c 	bl	8000468 <__aeabi_fadd>
 800a930:	1c21      	adds	r1, r4, #0
 800a932:	f7f6 f909 	bl	8000b48 <__aeabi_fmul>
 800a936:	4966      	ldr	r1, [pc, #408]	@ (800aad0 <__ieee754_asinf+0x280>)
 800a938:	f7f6 fa44 	bl	8000dc4 <__aeabi_fsub>
 800a93c:	1c21      	adds	r1, r4, #0
 800a93e:	f7f6 f903 	bl	8000b48 <__aeabi_fmul>
 800a942:	21fe      	movs	r1, #254	@ 0xfe
 800a944:	0589      	lsls	r1, r1, #22
 800a946:	f7f5 fd8f 	bl	8000468 <__aeabi_fadd>
 800a94a:	1c07      	adds	r7, r0, #0
 800a94c:	1c20      	adds	r0, r4, #0
 800a94e:	f000 fa51 	bl	800adf4 <__ieee754_sqrtf>
 800a952:	4b60      	ldr	r3, [pc, #384]	@ (800aad4 <__ieee754_asinf+0x284>)
 800a954:	1c05      	adds	r5, r0, #0
 800a956:	429e      	cmp	r6, r3
 800a958:	d966      	bls.n	800aa28 <__ieee754_asinf+0x1d8>
 800a95a:	1c39      	adds	r1, r7, #0
 800a95c:	9801      	ldr	r0, [sp, #4]
 800a95e:	f7f5 ff0d 	bl	800077c <__aeabi_fdiv>
 800a962:	1c29      	adds	r1, r5, #0
 800a964:	f7f6 f8f0 	bl	8000b48 <__aeabi_fmul>
 800a968:	1c29      	adds	r1, r5, #0
 800a96a:	f7f5 fd7d 	bl	8000468 <__aeabi_fadd>
 800a96e:	1c01      	adds	r1, r0, #0
 800a970:	f7f5 fd7a 	bl	8000468 <__aeabi_fadd>
 800a974:	4958      	ldr	r1, [pc, #352]	@ (800aad8 <__ieee754_asinf+0x288>)
 800a976:	f7f5 fd77 	bl	8000468 <__aeabi_fadd>
 800a97a:	1c01      	adds	r1, r0, #0
 800a97c:	4848      	ldr	r0, [pc, #288]	@ (800aaa0 <__ieee754_asinf+0x250>)
 800a97e:	f7f6 fa21 	bl	8000dc4 <__aeabi_fsub>
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	1c04      	adds	r4, r0, #0
 800a986:	2b00      	cmp	r3, #0
 800a988:	dd00      	ble.n	800a98c <__ieee754_asinf+0x13c>
 800a98a:	e781      	b.n	800a890 <__ieee754_asinf+0x40>
 800a98c:	2380      	movs	r3, #128	@ 0x80
 800a98e:	061b      	lsls	r3, r3, #24
 800a990:	18c4      	adds	r4, r0, r3
 800a992:	e77d      	b.n	800a890 <__ieee754_asinf+0x40>
 800a994:	1c01      	adds	r1, r0, #0
 800a996:	f7f6 f8d7 	bl	8000b48 <__aeabi_fmul>
 800a99a:	4944      	ldr	r1, [pc, #272]	@ (800aaac <__ieee754_asinf+0x25c>)
 800a99c:	1c05      	adds	r5, r0, #0
 800a99e:	f7f6 f8d3 	bl	8000b48 <__aeabi_fmul>
 800a9a2:	4943      	ldr	r1, [pc, #268]	@ (800aab0 <__ieee754_asinf+0x260>)
 800a9a4:	f7f5 fd60 	bl	8000468 <__aeabi_fadd>
 800a9a8:	1c29      	adds	r1, r5, #0
 800a9aa:	f7f6 f8cd 	bl	8000b48 <__aeabi_fmul>
 800a9ae:	4941      	ldr	r1, [pc, #260]	@ (800aab4 <__ieee754_asinf+0x264>)
 800a9b0:	f7f6 fa08 	bl	8000dc4 <__aeabi_fsub>
 800a9b4:	1c29      	adds	r1, r5, #0
 800a9b6:	f7f6 f8c7 	bl	8000b48 <__aeabi_fmul>
 800a9ba:	493f      	ldr	r1, [pc, #252]	@ (800aab8 <__ieee754_asinf+0x268>)
 800a9bc:	f7f5 fd54 	bl	8000468 <__aeabi_fadd>
 800a9c0:	1c29      	adds	r1, r5, #0
 800a9c2:	f7f6 f8c1 	bl	8000b48 <__aeabi_fmul>
 800a9c6:	493d      	ldr	r1, [pc, #244]	@ (800aabc <__ieee754_asinf+0x26c>)
 800a9c8:	f7f6 f9fc 	bl	8000dc4 <__aeabi_fsub>
 800a9cc:	1c29      	adds	r1, r5, #0
 800a9ce:	f7f6 f8bb 	bl	8000b48 <__aeabi_fmul>
 800a9d2:	493b      	ldr	r1, [pc, #236]	@ (800aac0 <__ieee754_asinf+0x270>)
 800a9d4:	f7f5 fd48 	bl	8000468 <__aeabi_fadd>
 800a9d8:	1c29      	adds	r1, r5, #0
 800a9da:	f7f6 f8b5 	bl	8000b48 <__aeabi_fmul>
 800a9de:	4939      	ldr	r1, [pc, #228]	@ (800aac4 <__ieee754_asinf+0x274>)
 800a9e0:	1c06      	adds	r6, r0, #0
 800a9e2:	1c28      	adds	r0, r5, #0
 800a9e4:	f7f6 f8b0 	bl	8000b48 <__aeabi_fmul>
 800a9e8:	4937      	ldr	r1, [pc, #220]	@ (800aac8 <__ieee754_asinf+0x278>)
 800a9ea:	f7f6 f9eb 	bl	8000dc4 <__aeabi_fsub>
 800a9ee:	1c29      	adds	r1, r5, #0
 800a9f0:	f7f6 f8aa 	bl	8000b48 <__aeabi_fmul>
 800a9f4:	4935      	ldr	r1, [pc, #212]	@ (800aacc <__ieee754_asinf+0x27c>)
 800a9f6:	f7f5 fd37 	bl	8000468 <__aeabi_fadd>
 800a9fa:	1c29      	adds	r1, r5, #0
 800a9fc:	f7f6 f8a4 	bl	8000b48 <__aeabi_fmul>
 800aa00:	4933      	ldr	r1, [pc, #204]	@ (800aad0 <__ieee754_asinf+0x280>)
 800aa02:	f7f6 f9df 	bl	8000dc4 <__aeabi_fsub>
 800aa06:	1c29      	adds	r1, r5, #0
 800aa08:	f7f6 f89e 	bl	8000b48 <__aeabi_fmul>
 800aa0c:	21fe      	movs	r1, #254	@ 0xfe
 800aa0e:	0589      	lsls	r1, r1, #22
 800aa10:	f7f5 fd2a 	bl	8000468 <__aeabi_fadd>
 800aa14:	1c01      	adds	r1, r0, #0
 800aa16:	1c30      	adds	r0, r6, #0
 800aa18:	f7f5 feb0 	bl	800077c <__aeabi_fdiv>
 800aa1c:	1c21      	adds	r1, r4, #0
 800aa1e:	f7f6 f893 	bl	8000b48 <__aeabi_fmul>
 800aa22:	1c01      	adds	r1, r0, #0
 800aa24:	1c20      	adds	r0, r4, #0
 800aa26:	e727      	b.n	800a878 <__ieee754_asinf+0x28>
 800aa28:	1c01      	adds	r1, r0, #0
 800aa2a:	0b06      	lsrs	r6, r0, #12
 800aa2c:	f7f5 fd1c 	bl	8000468 <__aeabi_fadd>
 800aa30:	1c39      	adds	r1, r7, #0
 800aa32:	9003      	str	r0, [sp, #12]
 800aa34:	9801      	ldr	r0, [sp, #4]
 800aa36:	f7f5 fea1 	bl	800077c <__aeabi_fdiv>
 800aa3a:	1c01      	adds	r1, r0, #0
 800aa3c:	9803      	ldr	r0, [sp, #12]
 800aa3e:	f7f6 f883 	bl	8000b48 <__aeabi_fmul>
 800aa42:	0336      	lsls	r6, r6, #12
 800aa44:	1c07      	adds	r7, r0, #0
 800aa46:	1c31      	adds	r1, r6, #0
 800aa48:	1c30      	adds	r0, r6, #0
 800aa4a:	f7f6 f87d 	bl	8000b48 <__aeabi_fmul>
 800aa4e:	1c01      	adds	r1, r0, #0
 800aa50:	1c20      	adds	r0, r4, #0
 800aa52:	f7f6 f9b7 	bl	8000dc4 <__aeabi_fsub>
 800aa56:	1c31      	adds	r1, r6, #0
 800aa58:	1c04      	adds	r4, r0, #0
 800aa5a:	1c28      	adds	r0, r5, #0
 800aa5c:	f7f5 fd04 	bl	8000468 <__aeabi_fadd>
 800aa60:	1c01      	adds	r1, r0, #0
 800aa62:	1c20      	adds	r0, r4, #0
 800aa64:	f7f5 fe8a 	bl	800077c <__aeabi_fdiv>
 800aa68:	1c01      	adds	r1, r0, #0
 800aa6a:	f7f5 fcfd 	bl	8000468 <__aeabi_fadd>
 800aa6e:	1c01      	adds	r1, r0, #0
 800aa70:	480c      	ldr	r0, [pc, #48]	@ (800aaa4 <__ieee754_asinf+0x254>)
 800aa72:	f7f6 f9a7 	bl	8000dc4 <__aeabi_fsub>
 800aa76:	1c01      	adds	r1, r0, #0
 800aa78:	1c38      	adds	r0, r7, #0
 800aa7a:	f7f6 f9a3 	bl	8000dc4 <__aeabi_fsub>
 800aa7e:	1c31      	adds	r1, r6, #0
 800aa80:	1c04      	adds	r4, r0, #0
 800aa82:	1c30      	adds	r0, r6, #0
 800aa84:	f7f5 fcf0 	bl	8000468 <__aeabi_fadd>
 800aa88:	1c01      	adds	r1, r0, #0
 800aa8a:	4814      	ldr	r0, [pc, #80]	@ (800aadc <__ieee754_asinf+0x28c>)
 800aa8c:	f7f6 f99a 	bl	8000dc4 <__aeabi_fsub>
 800aa90:	1c01      	adds	r1, r0, #0
 800aa92:	1c20      	adds	r0, r4, #0
 800aa94:	f7f6 f996 	bl	8000dc4 <__aeabi_fsub>
 800aa98:	1c01      	adds	r1, r0, #0
 800aa9a:	4810      	ldr	r0, [pc, #64]	@ (800aadc <__ieee754_asinf+0x28c>)
 800aa9c:	e76f      	b.n	800a97e <__ieee754_asinf+0x12e>
 800aa9e:	46c0      	nop			@ (mov r8, r8)
 800aaa0:	3fc90fdb 	.word	0x3fc90fdb
 800aaa4:	b33bbd2e 	.word	0xb33bbd2e
 800aaa8:	7149f2ca 	.word	0x7149f2ca
 800aaac:	3811ef08 	.word	0x3811ef08
 800aab0:	3a4f7f04 	.word	0x3a4f7f04
 800aab4:	3d241146 	.word	0x3d241146
 800aab8:	3e4e0aa8 	.word	0x3e4e0aa8
 800aabc:	3ea6b090 	.word	0x3ea6b090
 800aac0:	3e2aaaab 	.word	0x3e2aaaab
 800aac4:	3d9dc62e 	.word	0x3d9dc62e
 800aac8:	3f303361 	.word	0x3f303361
 800aacc:	4001572d 	.word	0x4001572d
 800aad0:	4019d139 	.word	0x4019d139
 800aad4:	3f799999 	.word	0x3f799999
 800aad8:	333bbd2e 	.word	0x333bbd2e
 800aadc:	3f490fdb 	.word	0x3f490fdb

0800aae0 <__ieee754_atan2f>:
 800aae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aae2:	25ff      	movs	r5, #255	@ 0xff
 800aae4:	004a      	lsls	r2, r1, #1
 800aae6:	9101      	str	r1, [sp, #4]
 800aae8:	0852      	lsrs	r2, r2, #1
 800aaea:	05ed      	lsls	r5, r5, #23
 800aaec:	42aa      	cmp	r2, r5
 800aaee:	d804      	bhi.n	800aafa <__ieee754_atan2f+0x1a>
 800aaf0:	0043      	lsls	r3, r0, #1
 800aaf2:	0007      	movs	r7, r0
 800aaf4:	085b      	lsrs	r3, r3, #1
 800aaf6:	42ab      	cmp	r3, r5
 800aaf8:	d902      	bls.n	800ab00 <__ieee754_atan2f+0x20>
 800aafa:	f7f5 fcb5 	bl	8000468 <__aeabi_fadd>
 800aafe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab00:	24fe      	movs	r4, #254	@ 0xfe
 800ab02:	05a4      	lsls	r4, r4, #22
 800ab04:	42a1      	cmp	r1, r4
 800ab06:	d102      	bne.n	800ab0e <__ieee754_atan2f+0x2e>
 800ab08:	f000 f864 	bl	800abd4 <atanf>
 800ab0c:	e7f7      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800ab0e:	2602      	movs	r6, #2
 800ab10:	178c      	asrs	r4, r1, #30
 800ab12:	4034      	ands	r4, r6
 800ab14:	0fc6      	lsrs	r6, r0, #31
 800ab16:	4334      	orrs	r4, r6
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d105      	bne.n	800ab28 <__ieee754_atan2f+0x48>
 800ab1c:	2c02      	cmp	r4, #2
 800ab1e:	d045      	beq.n	800abac <__ieee754_atan2f+0xcc>
 800ab20:	2c03      	cmp	r4, #3
 800ab22:	d1ec      	bne.n	800aafe <__ieee754_atan2f+0x1e>
 800ab24:	4823      	ldr	r0, [pc, #140]	@ (800abb4 <__ieee754_atan2f+0xd4>)
 800ab26:	e7ea      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800ab28:	2a00      	cmp	r2, #0
 800ab2a:	d103      	bne.n	800ab34 <__ieee754_atan2f+0x54>
 800ab2c:	2f00      	cmp	r7, #0
 800ab2e:	da3f      	bge.n	800abb0 <__ieee754_atan2f+0xd0>
 800ab30:	4821      	ldr	r0, [pc, #132]	@ (800abb8 <__ieee754_atan2f+0xd8>)
 800ab32:	e7e4      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800ab34:	42aa      	cmp	r2, r5
 800ab36:	d10e      	bne.n	800ab56 <__ieee754_atan2f+0x76>
 800ab38:	3c01      	subs	r4, #1
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d104      	bne.n	800ab48 <__ieee754_atan2f+0x68>
 800ab3e:	4b1f      	ldr	r3, [pc, #124]	@ (800abbc <__ieee754_atan2f+0xdc>)
 800ab40:	2c02      	cmp	r4, #2
 800ab42:	d905      	bls.n	800ab50 <__ieee754_atan2f+0x70>
 800ab44:	481e      	ldr	r0, [pc, #120]	@ (800abc0 <__ieee754_atan2f+0xe0>)
 800ab46:	e7da      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800ab48:	2000      	movs	r0, #0
 800ab4a:	2c02      	cmp	r4, #2
 800ab4c:	d8d7      	bhi.n	800aafe <__ieee754_atan2f+0x1e>
 800ab4e:	4b1d      	ldr	r3, [pc, #116]	@ (800abc4 <__ieee754_atan2f+0xe4>)
 800ab50:	00a4      	lsls	r4, r4, #2
 800ab52:	58e0      	ldr	r0, [r4, r3]
 800ab54:	e7d3      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800ab56:	42ab      	cmp	r3, r5
 800ab58:	d0e8      	beq.n	800ab2c <__ieee754_atan2f+0x4c>
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	15db      	asrs	r3, r3, #23
 800ab5e:	2b3c      	cmp	r3, #60	@ 0x3c
 800ab60:	dc14      	bgt.n	800ab8c <__ieee754_atan2f+0xac>
 800ab62:	2900      	cmp	r1, #0
 800ab64:	da01      	bge.n	800ab6a <__ieee754_atan2f+0x8a>
 800ab66:	333c      	adds	r3, #60	@ 0x3c
 800ab68:	db12      	blt.n	800ab90 <__ieee754_atan2f+0xb0>
 800ab6a:	f7f5 fe07 	bl	800077c <__aeabi_fdiv>
 800ab6e:	f7ff fe67 	bl	800a840 <fabsf>
 800ab72:	f000 f82f 	bl	800abd4 <atanf>
 800ab76:	2c01      	cmp	r4, #1
 800ab78:	d00c      	beq.n	800ab94 <__ieee754_atan2f+0xb4>
 800ab7a:	2c02      	cmp	r4, #2
 800ab7c:	d00e      	beq.n	800ab9c <__ieee754_atan2f+0xbc>
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	d0bd      	beq.n	800aafe <__ieee754_atan2f+0x1e>
 800ab82:	4911      	ldr	r1, [pc, #68]	@ (800abc8 <__ieee754_atan2f+0xe8>)
 800ab84:	f7f5 fc70 	bl	8000468 <__aeabi_fadd>
 800ab88:	4910      	ldr	r1, [pc, #64]	@ (800abcc <__ieee754_atan2f+0xec>)
 800ab8a:	e00c      	b.n	800aba6 <__ieee754_atan2f+0xc6>
 800ab8c:	4810      	ldr	r0, [pc, #64]	@ (800abd0 <__ieee754_atan2f+0xf0>)
 800ab8e:	e7f2      	b.n	800ab76 <__ieee754_atan2f+0x96>
 800ab90:	2000      	movs	r0, #0
 800ab92:	e7f0      	b.n	800ab76 <__ieee754_atan2f+0x96>
 800ab94:	2380      	movs	r3, #128	@ 0x80
 800ab96:	061b      	lsls	r3, r3, #24
 800ab98:	18c0      	adds	r0, r0, r3
 800ab9a:	e7b0      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800ab9c:	490a      	ldr	r1, [pc, #40]	@ (800abc8 <__ieee754_atan2f+0xe8>)
 800ab9e:	f7f5 fc63 	bl	8000468 <__aeabi_fadd>
 800aba2:	1c01      	adds	r1, r0, #0
 800aba4:	4809      	ldr	r0, [pc, #36]	@ (800abcc <__ieee754_atan2f+0xec>)
 800aba6:	f7f6 f90d 	bl	8000dc4 <__aeabi_fsub>
 800abaa:	e7a8      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800abac:	4807      	ldr	r0, [pc, #28]	@ (800abcc <__ieee754_atan2f+0xec>)
 800abae:	e7a6      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800abb0:	4807      	ldr	r0, [pc, #28]	@ (800abd0 <__ieee754_atan2f+0xf0>)
 800abb2:	e7a4      	b.n	800aafe <__ieee754_atan2f+0x1e>
 800abb4:	c0490fdb 	.word	0xc0490fdb
 800abb8:	bfc90fdb 	.word	0xbfc90fdb
 800abbc:	0800b360 	.word	0x0800b360
 800abc0:	3f490fdb 	.word	0x3f490fdb
 800abc4:	0800b354 	.word	0x0800b354
 800abc8:	33bbbd2e 	.word	0x33bbbd2e
 800abcc:	40490fdb 	.word	0x40490fdb
 800abd0:	3fc90fdb 	.word	0x3fc90fdb

0800abd4 <atanf>:
 800abd4:	23a1      	movs	r3, #161	@ 0xa1
 800abd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abd8:	0045      	lsls	r5, r0, #1
 800abda:	1c04      	adds	r4, r0, #0
 800abdc:	9001      	str	r0, [sp, #4]
 800abde:	086d      	lsrs	r5, r5, #1
 800abe0:	05db      	lsls	r3, r3, #23
 800abe2:	429d      	cmp	r5, r3
 800abe4:	d30f      	bcc.n	800ac06 <atanf+0x32>
 800abe6:	23ff      	movs	r3, #255	@ 0xff
 800abe8:	05db      	lsls	r3, r3, #23
 800abea:	429d      	cmp	r5, r3
 800abec:	d904      	bls.n	800abf8 <atanf+0x24>
 800abee:	1c01      	adds	r1, r0, #0
 800abf0:	f7f5 fc3a 	bl	8000468 <__aeabi_fadd>
 800abf4:	1c04      	adds	r4, r0, #0
 800abf6:	e004      	b.n	800ac02 <atanf+0x2e>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	dc00      	bgt.n	800ac00 <atanf+0x2c>
 800abfe:	e0cc      	b.n	800ad9a <atanf+0x1c6>
 800ac00:	4c67      	ldr	r4, [pc, #412]	@ (800ada0 <atanf+0x1cc>)
 800ac02:	1c20      	adds	r0, r4, #0
 800ac04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac06:	4b67      	ldr	r3, [pc, #412]	@ (800ada4 <atanf+0x1d0>)
 800ac08:	429d      	cmp	r5, r3
 800ac0a:	d80f      	bhi.n	800ac2c <atanf+0x58>
 800ac0c:	23c4      	movs	r3, #196	@ 0xc4
 800ac0e:	059b      	lsls	r3, r3, #22
 800ac10:	429d      	cmp	r5, r3
 800ac12:	d208      	bcs.n	800ac26 <atanf+0x52>
 800ac14:	4964      	ldr	r1, [pc, #400]	@ (800ada8 <atanf+0x1d4>)
 800ac16:	f7f5 fc27 	bl	8000468 <__aeabi_fadd>
 800ac1a:	21fe      	movs	r1, #254	@ 0xfe
 800ac1c:	0589      	lsls	r1, r1, #22
 800ac1e:	f7f5 fc0f 	bl	8000440 <__aeabi_fcmpgt>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d1ed      	bne.n	800ac02 <atanf+0x2e>
 800ac26:	2601      	movs	r6, #1
 800ac28:	4276      	negs	r6, r6
 800ac2a:	e01b      	b.n	800ac64 <atanf+0x90>
 800ac2c:	f7ff fe08 	bl	800a840 <fabsf>
 800ac30:	4b5e      	ldr	r3, [pc, #376]	@ (800adac <atanf+0x1d8>)
 800ac32:	1c04      	adds	r4, r0, #0
 800ac34:	429d      	cmp	r5, r3
 800ac36:	d87b      	bhi.n	800ad30 <atanf+0x15c>
 800ac38:	4b5d      	ldr	r3, [pc, #372]	@ (800adb0 <atanf+0x1dc>)
 800ac3a:	429d      	cmp	r5, r3
 800ac3c:	d867      	bhi.n	800ad0e <atanf+0x13a>
 800ac3e:	1c01      	adds	r1, r0, #0
 800ac40:	f7f5 fc12 	bl	8000468 <__aeabi_fadd>
 800ac44:	21fe      	movs	r1, #254	@ 0xfe
 800ac46:	0589      	lsls	r1, r1, #22
 800ac48:	f7f6 f8bc 	bl	8000dc4 <__aeabi_fsub>
 800ac4c:	2180      	movs	r1, #128	@ 0x80
 800ac4e:	1c05      	adds	r5, r0, #0
 800ac50:	05c9      	lsls	r1, r1, #23
 800ac52:	1c20      	adds	r0, r4, #0
 800ac54:	f7f5 fc08 	bl	8000468 <__aeabi_fadd>
 800ac58:	1c01      	adds	r1, r0, #0
 800ac5a:	1c28      	adds	r0, r5, #0
 800ac5c:	f7f5 fd8e 	bl	800077c <__aeabi_fdiv>
 800ac60:	2600      	movs	r6, #0
 800ac62:	1c04      	adds	r4, r0, #0
 800ac64:	1c21      	adds	r1, r4, #0
 800ac66:	1c20      	adds	r0, r4, #0
 800ac68:	f7f5 ff6e 	bl	8000b48 <__aeabi_fmul>
 800ac6c:	1c01      	adds	r1, r0, #0
 800ac6e:	1c07      	adds	r7, r0, #0
 800ac70:	f7f5 ff6a 	bl	8000b48 <__aeabi_fmul>
 800ac74:	494f      	ldr	r1, [pc, #316]	@ (800adb4 <atanf+0x1e0>)
 800ac76:	1c05      	adds	r5, r0, #0
 800ac78:	f7f5 ff66 	bl	8000b48 <__aeabi_fmul>
 800ac7c:	494e      	ldr	r1, [pc, #312]	@ (800adb8 <atanf+0x1e4>)
 800ac7e:	f7f5 fbf3 	bl	8000468 <__aeabi_fadd>
 800ac82:	1c29      	adds	r1, r5, #0
 800ac84:	f7f5 ff60 	bl	8000b48 <__aeabi_fmul>
 800ac88:	494c      	ldr	r1, [pc, #304]	@ (800adbc <atanf+0x1e8>)
 800ac8a:	f7f5 fbed 	bl	8000468 <__aeabi_fadd>
 800ac8e:	1c29      	adds	r1, r5, #0
 800ac90:	f7f5 ff5a 	bl	8000b48 <__aeabi_fmul>
 800ac94:	494a      	ldr	r1, [pc, #296]	@ (800adc0 <atanf+0x1ec>)
 800ac96:	f7f5 fbe7 	bl	8000468 <__aeabi_fadd>
 800ac9a:	1c29      	adds	r1, r5, #0
 800ac9c:	f7f5 ff54 	bl	8000b48 <__aeabi_fmul>
 800aca0:	4948      	ldr	r1, [pc, #288]	@ (800adc4 <atanf+0x1f0>)
 800aca2:	f7f5 fbe1 	bl	8000468 <__aeabi_fadd>
 800aca6:	1c29      	adds	r1, r5, #0
 800aca8:	f7f5 ff4e 	bl	8000b48 <__aeabi_fmul>
 800acac:	4946      	ldr	r1, [pc, #280]	@ (800adc8 <atanf+0x1f4>)
 800acae:	f7f5 fbdb 	bl	8000468 <__aeabi_fadd>
 800acb2:	1c39      	adds	r1, r7, #0
 800acb4:	f7f5 ff48 	bl	8000b48 <__aeabi_fmul>
 800acb8:	4944      	ldr	r1, [pc, #272]	@ (800adcc <atanf+0x1f8>)
 800acba:	1c07      	adds	r7, r0, #0
 800acbc:	1c28      	adds	r0, r5, #0
 800acbe:	f7f5 ff43 	bl	8000b48 <__aeabi_fmul>
 800acc2:	4943      	ldr	r1, [pc, #268]	@ (800add0 <atanf+0x1fc>)
 800acc4:	f7f6 f87e 	bl	8000dc4 <__aeabi_fsub>
 800acc8:	1c29      	adds	r1, r5, #0
 800acca:	f7f5 ff3d 	bl	8000b48 <__aeabi_fmul>
 800acce:	4941      	ldr	r1, [pc, #260]	@ (800add4 <atanf+0x200>)
 800acd0:	f7f6 f878 	bl	8000dc4 <__aeabi_fsub>
 800acd4:	1c29      	adds	r1, r5, #0
 800acd6:	f7f5 ff37 	bl	8000b48 <__aeabi_fmul>
 800acda:	493f      	ldr	r1, [pc, #252]	@ (800add8 <atanf+0x204>)
 800acdc:	f7f6 f872 	bl	8000dc4 <__aeabi_fsub>
 800ace0:	1c29      	adds	r1, r5, #0
 800ace2:	f7f5 ff31 	bl	8000b48 <__aeabi_fmul>
 800ace6:	493d      	ldr	r1, [pc, #244]	@ (800addc <atanf+0x208>)
 800ace8:	f7f6 f86c 	bl	8000dc4 <__aeabi_fsub>
 800acec:	1c29      	adds	r1, r5, #0
 800acee:	f7f5 ff2b 	bl	8000b48 <__aeabi_fmul>
 800acf2:	1c01      	adds	r1, r0, #0
 800acf4:	1c38      	adds	r0, r7, #0
 800acf6:	f7f5 fbb7 	bl	8000468 <__aeabi_fadd>
 800acfa:	1c21      	adds	r1, r4, #0
 800acfc:	f7f5 ff24 	bl	8000b48 <__aeabi_fmul>
 800ad00:	1c73      	adds	r3, r6, #1
 800ad02:	d134      	bne.n	800ad6e <atanf+0x19a>
 800ad04:	1c01      	adds	r1, r0, #0
 800ad06:	1c20      	adds	r0, r4, #0
 800ad08:	f7f6 f85c 	bl	8000dc4 <__aeabi_fsub>
 800ad0c:	e772      	b.n	800abf4 <atanf+0x20>
 800ad0e:	21fe      	movs	r1, #254	@ 0xfe
 800ad10:	0589      	lsls	r1, r1, #22
 800ad12:	f7f6 f857 	bl	8000dc4 <__aeabi_fsub>
 800ad16:	21fe      	movs	r1, #254	@ 0xfe
 800ad18:	1c05      	adds	r5, r0, #0
 800ad1a:	0589      	lsls	r1, r1, #22
 800ad1c:	1c20      	adds	r0, r4, #0
 800ad1e:	f7f5 fba3 	bl	8000468 <__aeabi_fadd>
 800ad22:	1c01      	adds	r1, r0, #0
 800ad24:	1c28      	adds	r0, r5, #0
 800ad26:	f7f5 fd29 	bl	800077c <__aeabi_fdiv>
 800ad2a:	2601      	movs	r6, #1
 800ad2c:	1c04      	adds	r4, r0, #0
 800ad2e:	e799      	b.n	800ac64 <atanf+0x90>
 800ad30:	4b2b      	ldr	r3, [pc, #172]	@ (800ade0 <atanf+0x20c>)
 800ad32:	429d      	cmp	r5, r3
 800ad34:	d814      	bhi.n	800ad60 <atanf+0x18c>
 800ad36:	21ff      	movs	r1, #255	@ 0xff
 800ad38:	0589      	lsls	r1, r1, #22
 800ad3a:	f7f6 f843 	bl	8000dc4 <__aeabi_fsub>
 800ad3e:	21ff      	movs	r1, #255	@ 0xff
 800ad40:	1c05      	adds	r5, r0, #0
 800ad42:	0589      	lsls	r1, r1, #22
 800ad44:	1c20      	adds	r0, r4, #0
 800ad46:	f7f5 feff 	bl	8000b48 <__aeabi_fmul>
 800ad4a:	21fe      	movs	r1, #254	@ 0xfe
 800ad4c:	0589      	lsls	r1, r1, #22
 800ad4e:	f7f5 fb8b 	bl	8000468 <__aeabi_fadd>
 800ad52:	1c01      	adds	r1, r0, #0
 800ad54:	1c28      	adds	r0, r5, #0
 800ad56:	f7f5 fd11 	bl	800077c <__aeabi_fdiv>
 800ad5a:	2602      	movs	r6, #2
 800ad5c:	1c04      	adds	r4, r0, #0
 800ad5e:	e781      	b.n	800ac64 <atanf+0x90>
 800ad60:	1c01      	adds	r1, r0, #0
 800ad62:	4820      	ldr	r0, [pc, #128]	@ (800ade4 <atanf+0x210>)
 800ad64:	f7f5 fd0a 	bl	800077c <__aeabi_fdiv>
 800ad68:	2603      	movs	r6, #3
 800ad6a:	1c04      	adds	r4, r0, #0
 800ad6c:	e77a      	b.n	800ac64 <atanf+0x90>
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ade8 <atanf+0x214>)
 800ad70:	00b6      	lsls	r6, r6, #2
 800ad72:	58f1      	ldr	r1, [r6, r3]
 800ad74:	f7f6 f826 	bl	8000dc4 <__aeabi_fsub>
 800ad78:	1c21      	adds	r1, r4, #0
 800ad7a:	f7f6 f823 	bl	8000dc4 <__aeabi_fsub>
 800ad7e:	4d1b      	ldr	r5, [pc, #108]	@ (800adec <atanf+0x218>)
 800ad80:	1c01      	adds	r1, r0, #0
 800ad82:	5970      	ldr	r0, [r6, r5]
 800ad84:	f7f6 f81e 	bl	8000dc4 <__aeabi_fsub>
 800ad88:	9b01      	ldr	r3, [sp, #4]
 800ad8a:	1c04      	adds	r4, r0, #0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	db00      	blt.n	800ad92 <atanf+0x1be>
 800ad90:	e737      	b.n	800ac02 <atanf+0x2e>
 800ad92:	2380      	movs	r3, #128	@ 0x80
 800ad94:	061b      	lsls	r3, r3, #24
 800ad96:	18c4      	adds	r4, r0, r3
 800ad98:	e733      	b.n	800ac02 <atanf+0x2e>
 800ad9a:	4c15      	ldr	r4, [pc, #84]	@ (800adf0 <atanf+0x21c>)
 800ad9c:	e731      	b.n	800ac02 <atanf+0x2e>
 800ad9e:	46c0      	nop			@ (mov r8, r8)
 800ada0:	3fc90fdb 	.word	0x3fc90fdb
 800ada4:	3edfffff 	.word	0x3edfffff
 800ada8:	7149f2ca 	.word	0x7149f2ca
 800adac:	3f97ffff 	.word	0x3f97ffff
 800adb0:	3f2fffff 	.word	0x3f2fffff
 800adb4:	3c8569d7 	.word	0x3c8569d7
 800adb8:	3d4bda59 	.word	0x3d4bda59
 800adbc:	3d886b35 	.word	0x3d886b35
 800adc0:	3dba2e6e 	.word	0x3dba2e6e
 800adc4:	3e124925 	.word	0x3e124925
 800adc8:	3eaaaaab 	.word	0x3eaaaaab
 800adcc:	bd15a221 	.word	0xbd15a221
 800add0:	3d6ef16b 	.word	0x3d6ef16b
 800add4:	3d9d8795 	.word	0x3d9d8795
 800add8:	3de38e38 	.word	0x3de38e38
 800addc:	3e4ccccd 	.word	0x3e4ccccd
 800ade0:	401bffff 	.word	0x401bffff
 800ade4:	bf800000 	.word	0xbf800000
 800ade8:	0800b36c 	.word	0x0800b36c
 800adec:	0800b37c 	.word	0x0800b37c
 800adf0:	bfc90fdb 	.word	0xbfc90fdb

0800adf4 <__ieee754_sqrtf>:
 800adf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adf6:	0003      	movs	r3, r0
 800adf8:	0042      	lsls	r2, r0, #1
 800adfa:	1c04      	adds	r4, r0, #0
 800adfc:	20ff      	movs	r0, #255	@ 0xff
 800adfe:	0852      	lsrs	r2, r2, #1
 800ae00:	05c0      	lsls	r0, r0, #23
 800ae02:	4282      	cmp	r2, r0
 800ae04:	d30a      	bcc.n	800ae1c <__ieee754_sqrtf+0x28>
 800ae06:	1c21      	adds	r1, r4, #0
 800ae08:	1c20      	adds	r0, r4, #0
 800ae0a:	f7f5 fe9d 	bl	8000b48 <__aeabi_fmul>
 800ae0e:	1c01      	adds	r1, r0, #0
 800ae10:	1c20      	adds	r0, r4, #0
 800ae12:	f7f5 fb29 	bl	8000468 <__aeabi_fadd>
 800ae16:	1c04      	adds	r4, r0, #0
 800ae18:	1c20      	adds	r0, r4, #0
 800ae1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	d0fb      	beq.n	800ae18 <__ieee754_sqrtf+0x24>
 800ae20:	2c00      	cmp	r4, #0
 800ae22:	da07      	bge.n	800ae34 <__ieee754_sqrtf+0x40>
 800ae24:	1c21      	adds	r1, r4, #0
 800ae26:	1c20      	adds	r0, r4, #0
 800ae28:	f7f5 ffcc 	bl	8000dc4 <__aeabi_fsub>
 800ae2c:	1c01      	adds	r1, r0, #0
 800ae2e:	f7f5 fca5 	bl	800077c <__aeabi_fdiv>
 800ae32:	e7f0      	b.n	800ae16 <__ieee754_sqrtf+0x22>
 800ae34:	0022      	movs	r2, r4
 800ae36:	15e1      	asrs	r1, r4, #23
 800ae38:	4002      	ands	r2, r0
 800ae3a:	4204      	tst	r4, r0
 800ae3c:	d046      	beq.n	800aecc <__ieee754_sqrtf+0xd8>
 800ae3e:	2280      	movs	r2, #128	@ 0x80
 800ae40:	000f      	movs	r7, r1
 800ae42:	025b      	lsls	r3, r3, #9
 800ae44:	0a5b      	lsrs	r3, r3, #9
 800ae46:	0412      	lsls	r2, r2, #16
 800ae48:	3f7f      	subs	r7, #127	@ 0x7f
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	07c9      	lsls	r1, r1, #31
 800ae4e:	d400      	bmi.n	800ae52 <__ieee754_sqrtf+0x5e>
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	2400      	movs	r4, #0
 800ae54:	2180      	movs	r1, #128	@ 0x80
 800ae56:	2019      	movs	r0, #25
 800ae58:	0026      	movs	r6, r4
 800ae5a:	107f      	asrs	r7, r7, #1
 800ae5c:	005b      	lsls	r3, r3, #1
 800ae5e:	0449      	lsls	r1, r1, #17
 800ae60:	1875      	adds	r5, r6, r1
 800ae62:	001a      	movs	r2, r3
 800ae64:	429d      	cmp	r5, r3
 800ae66:	dc02      	bgt.n	800ae6e <__ieee754_sqrtf+0x7a>
 800ae68:	186e      	adds	r6, r5, r1
 800ae6a:	1b5a      	subs	r2, r3, r5
 800ae6c:	1864      	adds	r4, r4, r1
 800ae6e:	3801      	subs	r0, #1
 800ae70:	0053      	lsls	r3, r2, #1
 800ae72:	0849      	lsrs	r1, r1, #1
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d1f3      	bne.n	800ae60 <__ieee754_sqrtf+0x6c>
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	d019      	beq.n	800aeb0 <__ieee754_sqrtf+0xbc>
 800ae7c:	4d17      	ldr	r5, [pc, #92]	@ (800aedc <__ieee754_sqrtf+0xe8>)
 800ae7e:	4e18      	ldr	r6, [pc, #96]	@ (800aee0 <__ieee754_sqrtf+0xec>)
 800ae80:	6828      	ldr	r0, [r5, #0]
 800ae82:	6831      	ldr	r1, [r6, #0]
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	f7f5 ff9c 	bl	8000dc4 <__aeabi_fsub>
 800ae8c:	1c01      	adds	r1, r0, #0
 800ae8e:	9801      	ldr	r0, [sp, #4]
 800ae90:	f7f5 facc 	bl	800042c <__aeabi_fcmple>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d00b      	beq.n	800aeb0 <__ieee754_sqrtf+0xbc>
 800ae98:	6828      	ldr	r0, [r5, #0]
 800ae9a:	6831      	ldr	r1, [r6, #0]
 800ae9c:	f7f5 fae4 	bl	8000468 <__aeabi_fadd>
 800aea0:	682d      	ldr	r5, [r5, #0]
 800aea2:	1c01      	adds	r1, r0, #0
 800aea4:	1c28      	adds	r0, r5, #0
 800aea6:	f7f5 fab7 	bl	8000418 <__aeabi_fcmplt>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d011      	beq.n	800aed2 <__ieee754_sqrtf+0xde>
 800aeae:	3402      	adds	r4, #2
 800aeb0:	23fc      	movs	r3, #252	@ 0xfc
 800aeb2:	1064      	asrs	r4, r4, #1
 800aeb4:	059b      	lsls	r3, r3, #22
 800aeb6:	18e3      	adds	r3, r4, r3
 800aeb8:	05fc      	lsls	r4, r7, #23
 800aeba:	18e4      	adds	r4, r4, r3
 800aebc:	e7ac      	b.n	800ae18 <__ieee754_sqrtf+0x24>
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	3201      	adds	r2, #1
 800aec2:	4203      	tst	r3, r0
 800aec4:	d0fb      	beq.n	800aebe <__ieee754_sqrtf+0xca>
 800aec6:	3a01      	subs	r2, #1
 800aec8:	1a89      	subs	r1, r1, r2
 800aeca:	e7b8      	b.n	800ae3e <__ieee754_sqrtf+0x4a>
 800aecc:	2080      	movs	r0, #128	@ 0x80
 800aece:	0400      	lsls	r0, r0, #16
 800aed0:	e7f7      	b.n	800aec2 <__ieee754_sqrtf+0xce>
 800aed2:	2301      	movs	r3, #1
 800aed4:	3401      	adds	r4, #1
 800aed6:	439c      	bics	r4, r3
 800aed8:	e7ea      	b.n	800aeb0 <__ieee754_sqrtf+0xbc>
 800aeda:	46c0      	nop			@ (mov r8, r8)
 800aedc:	200000d4 	.word	0x200000d4
 800aee0:	200000d0 	.word	0x200000d0

0800aee4 <_init>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	46c0      	nop			@ (mov r8, r8)
 800aee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeea:	bc08      	pop	{r3}
 800aeec:	469e      	mov	lr, r3
 800aeee:	4770      	bx	lr

0800aef0 <_fini>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	46c0      	nop			@ (mov r8, r8)
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr
