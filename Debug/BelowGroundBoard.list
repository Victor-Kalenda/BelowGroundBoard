
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08006a7c  08006a7c  00007a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  08006d80  08006d80  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d80  08006d80  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d84  08006d84  00007d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006d88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000070  08006df8  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08006df8  00008738  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017da3  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2a  00000000  00000000  0001fe3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00022c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115d  00000000  00000000  00024250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d8a  00000000  00000000  000253ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a943  00000000  00000000  00028137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bbf7  00000000  00000000  00042a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005194  00000000  00000000  000de6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e3848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a64 	.word	0x08006a64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006a64 	.word	0x08006a64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f001 fc5a 	bl	8001cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f8b9 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 fba1 	bl	8000b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000406:	f000 fb71 	bl	8000aec <MX_DMA_Init>
  MX_ADC1_Init();
 800040a:	f000 f8f7 	bl	80005fc <MX_ADC1_Init>
  MX_I2C1_Init();
 800040e:	f000 f9cf 	bl	80007b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000412:	f000 fa0d 	bl	8000830 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000416:	f000 fa49 	bl	80008ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800041a:	f000 fb17 	bl	8000a4c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800041e:	f000 faef 	bl	8000a00 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 8000422:	4b4d      	ldr	r3, [pc, #308]	@ (8000558 <main+0x164>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	0092      	lsls	r2, r2, #2
 8000428:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 800042a:	4b4b      	ldr	r3, [pc, #300]	@ (8000558 <main+0x164>)
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	0052      	lsls	r2, r2, #1
 8000430:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 8000432:	4b49      	ldr	r3, [pc, #292]	@ (8000558 <main+0x164>)
 8000434:	2280      	movs	r2, #128	@ 0x80
 8000436:	809a      	strh	r2, [r3, #4]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 8000438:	4b48      	ldr	r3, [pc, #288]	@ (800055c <main+0x168>)
 800043a:	22fe      	movs	r2, #254	@ 0xfe
 800043c:	0592      	lsls	r2, r2, #22
 800043e:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8000440:	4b46      	ldr	r3, [pc, #280]	@ (800055c <main+0x168>)
 8000442:	4a47      	ldr	r2, [pc, #284]	@ (8000560 <main+0x16c>)
 8000444:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 8000446:	4b45      	ldr	r3, [pc, #276]	@ (800055c <main+0x168>)
 8000448:	4a46      	ldr	r2, [pc, #280]	@ (8000564 <main+0x170>)
 800044a:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 800044c:	4b43      	ldr	r3, [pc, #268]	@ (800055c <main+0x168>)
 800044e:	4a44      	ldr	r2, [pc, #272]	@ (8000560 <main+0x16c>)
 8000450:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8000452:	4b42      	ldr	r3, [pc, #264]	@ (800055c <main+0x168>)
 8000454:	22fe      	movs	r2, #254	@ 0xfe
 8000456:	0592      	lsls	r2, r2, #22
 8000458:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 800045a:	4b40      	ldr	r3, [pc, #256]	@ (800055c <main+0x168>)
 800045c:	4a42      	ldr	r2, [pc, #264]	@ (8000568 <main+0x174>)
 800045e:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8000460:	4b3e      	ldr	r3, [pc, #248]	@ (800055c <main+0x168>)
 8000462:	4a41      	ldr	r2, [pc, #260]	@ (8000568 <main+0x174>)
 8000464:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 8000466:	4b3d      	ldr	r3, [pc, #244]	@ (800055c <main+0x168>)
 8000468:	2200      	movs	r2, #0
 800046a:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 800046c:	4b3b      	ldr	r3, [pc, #236]	@ (800055c <main+0x168>)
 800046e:	4a3f      	ldr	r2, [pc, #252]	@ (800056c <main+0x178>)
 8000470:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8000472:	4b3a      	ldr	r3, [pc, #232]	@ (800055c <main+0x168>)
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 8000478:	4b38      	ldr	r3, [pc, #224]	@ (800055c <main+0x168>)
 800047a:	2200      	movs	r2, #0
 800047c:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 800047e:	4b37      	ldr	r3, [pc, #220]	@ (800055c <main+0x168>)
 8000480:	2200      	movs	r2, #0
 8000482:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8000484:	4b35      	ldr	r3, [pc, #212]	@ (800055c <main+0x168>)
 8000486:	2200      	movs	r2, #0
 8000488:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 800048a:	4b34      	ldr	r3, [pc, #208]	@ (800055c <main+0x168>)
 800048c:	2200      	movs	r2, #0
 800048e:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8000490:	f000 ff9e 	bl	80013d0 <modbus_set_rx>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <main+0xa8>
  {
	  Error_Handler();
 8000498:	f000 fbd2 	bl	8000c40 <Error_Handler>
   * target_actuator
   * 0: Actuator A
   * 1: Actuator B
   * 2: Actuator C
   */
  uint8_t target_actuator = 0;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  if(modbus_rx())
 80004a2:	f000 ff7f 	bl	80013a4 <modbus_rx>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d0fb      	beq.n	80004a2 <main+0xae>
	  {
		  int8_t status = 0;
 80004aa:	1dbb      	adds	r3, r7, #6
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fcb7 	bl	8000e24 <get_rx_buffer>
 80004b6:	0003      	movs	r3, r0
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000570 <main+0x17c>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d11b      	bne.n	80004fa <main+0x106>
		  {
			  switch(get_rx_buffer(1))
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 fcae 	bl	8000e24 <get_rx_buffer>
 80004c8:	0003      	movs	r3, r0
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d002      	beq.n	80004d4 <main+0xe0>
 80004ce:	2b10      	cmp	r3, #16
 80004d0:	d006      	beq.n	80004e0 <main+0xec>
 80004d2:	e00b      	b.n	80004ec <main+0xf8>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80004d4:	1dbc      	adds	r4, r7, #6
 80004d6:	f000 fcdd 	bl	8000e94 <return_holding_registers>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
					  break;
 80004de:	e034      	b.n	800054a <main+0x156>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80004e0:	1dbc      	adds	r4, r7, #6
 80004e2:	f000 fd73 	bl	8000fcc <edit_multiple_registers>
 80004e6:	0003      	movs	r3, r0
 80004e8:	7023      	strb	r3, [r4, #0]
					  break;
 80004ea:	e02e      	b.n	800054a <main+0x156>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80004ec:	1dbc      	adds	r4, r7, #6
 80004ee:	2004      	movs	r0, #4
 80004f0:	f000 fe5a 	bl	80011a8 <modbus_exception>
 80004f4:	0003      	movs	r3, r0
 80004f6:	7023      	strb	r3, [r4, #0]
					  break;
 80004f8:	e027      	b.n	800054a <main+0x156>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fc92 	bl	8000e24 <get_rx_buffer>
 8000500:	0003      	movs	r3, r0
 8000502:	2bff      	cmp	r3, #255	@ 0xff
 8000504:	d121      	bne.n	800054a <main+0x156>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000506:	2001      	movs	r0, #1
 8000508:	f000 fc8c 	bl	8000e24 <get_rx_buffer>
 800050c:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800050e:	2b03      	cmp	r3, #3
 8000510:	d11b      	bne.n	800054a <main+0x156>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000512:	2002      	movs	r0, #2
 8000514:	f000 fc86 	bl	8000e24 <get_rx_buffer>
 8000518:	0003      	movs	r3, r0
 800051a:	021c      	lsls	r4, r3, #8
 800051c:	2003      	movs	r0, #3
 800051e:	f000 fc81 	bl	8000e24 <get_rx_buffer>
 8000522:	0003      	movs	r3, r0
 8000524:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000526:	d110      	bne.n	800054a <main+0x156>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8000528:	2004      	movs	r0, #4
 800052a:	f000 fc7b 	bl	8000e24 <get_rx_buffer>
 800052e:	0003      	movs	r3, r0
 8000530:	021c      	lsls	r4, r3, #8
 8000532:	2005      	movs	r0, #5
 8000534:	f000 fc76 	bl	8000e24 <get_rx_buffer>
 8000538:	0003      	movs	r3, r0
 800053a:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800053c:	2b01      	cmp	r3, #1
 800053e:	d104      	bne.n	800054a <main+0x156>
		  {

			  status = return_holding_registers();
 8000540:	1dbc      	adds	r4, r7, #6
 8000542:	f000 fca7 	bl	8000e94 <return_holding_registers>
 8000546:	0003      	movs	r3, r0
 8000548:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 800054a:	1dbc      	adds	r4, r7, #6
 800054c:	f000 ff40 	bl	80013d0 <modbus_set_rx>
 8000550:	0003      	movs	r3, r0
 8000552:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 8000554:	e7a5      	b.n	80004a2 <main+0xae>
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	20000420 	.word	0x20000420
 800055c:	200003e8 	.word	0x200003e8
 8000560:	3dcccccd 	.word	0x3dcccccd
 8000564:	40a00000 	.word	0x40a00000
 8000568:	42c80000 	.word	0x42c80000
 800056c:	42200000 	.word	0x42200000
 8000570:	20000000 	.word	0x20000000

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b08f      	sub	sp, #60	@ 0x3c
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	2418      	movs	r4, #24
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	2320      	movs	r3, #32
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f006 fa37 	bl	80069f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	0018      	movs	r0, r3
 800058e:	2314      	movs	r3, #20
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f006 fa30 	bl	80069f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2202      	movs	r2, #2
 800059c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	0052      	lsls	r2, r2, #1
 80005a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	0152      	lsls	r2, r2, #5
 80005ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2240      	movs	r2, #64	@ 0x40
 80005b2:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 ff72 	bl	80034a0 <HAL_RCC_OscConfig>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005c0:	f000 fb3e 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2207      	movs	r2, #7
 80005c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f003 f980 	bl	80038ec <HAL_RCC_ClockConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f0:	f000 fb26 	bl	8000c40 <Error_Handler>
  }
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b00f      	add	sp, #60	@ 0x3c
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	230c      	movs	r3, #12
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f006 f9f4 	bl	80069f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000610:	4b5d      	ldr	r3, [pc, #372]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000612:	4a5e      	ldr	r2, [pc, #376]	@ (800078c <MX_ADC1_Init+0x190>)
 8000614:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000616:	4b5c      	ldr	r3, [pc, #368]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000618:	22c0      	movs	r2, #192	@ 0xc0
 800061a:	0612      	lsls	r2, r2, #24
 800061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061e:	4b5a      	ldr	r3, [pc, #360]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b58      	ldr	r3, [pc, #352]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800062a:	4b57      	ldr	r3, [pc, #348]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	0612      	lsls	r2, r2, #24
 8000630:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b55      	ldr	r3, [pc, #340]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000634:	2204      	movs	r2, #4
 8000636:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b53      	ldr	r3, [pc, #332]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800063e:	4b52      	ldr	r3, [pc, #328]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000640:	2200      	movs	r2, #0
 8000642:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000644:	4b50      	ldr	r3, [pc, #320]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000646:	2201      	movs	r2, #1
 8000648:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800064a:	4b4f      	ldr	r3, [pc, #316]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b4d      	ldr	r3, [pc, #308]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b4c      	ldr	r3, [pc, #304]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065c:	4b4a      	ldr	r3, [pc, #296]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800065e:	222c      	movs	r2, #44	@ 0x2c
 8000660:	2101      	movs	r1, #1
 8000662:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000664:	4b48      	ldr	r3, [pc, #288]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000666:	2200      	movs	r2, #0
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800066a:	4b47      	ldr	r3, [pc, #284]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000670:	4b45      	ldr	r3, [pc, #276]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000672:	223c      	movs	r2, #60	@ 0x3c
 8000674:	2100      	movs	r1, #0
 8000676:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000678:	4b43      	ldr	r3, [pc, #268]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800067a:	2200      	movs	r2, #0
 800067c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067e:	4b42      	ldr	r3, [pc, #264]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fcb5 	bl	8001ff0 <HAL_ADC_Init>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800068a:	f000 fad9 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3a      	adds	r2, r7, #4
 800069c:	4b3a      	ldr	r3, [pc, #232]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fe4b 	bl	800233c <HAL_ADC_ConfigChannel>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006aa:	f000 fac9 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4a37      	ldr	r2, [pc, #220]	@ (8000790 <MX_ADC1_Init+0x194>)
 80006b2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	1d3a      	adds	r2, r7, #4
 80006b6:	4b34      	ldr	r3, [pc, #208]	@ (8000788 <MX_ADC1_Init+0x18c>)
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 fe3e 	bl	800233c <HAL_ADC_ConfigChannel>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80006c4:	f000 fabc 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4a32      	ldr	r2, [pc, #200]	@ (8000794 <MX_ADC1_Init+0x198>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	1d3a      	adds	r2, r7, #4
 80006d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_ADC1_Init+0x18c>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fe31 	bl	800233c <HAL_ADC_ConfigChannel>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80006de:	f000 faaf 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000798 <MX_ADC1_Init+0x19c>)
 80006e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	1d3a      	adds	r2, r7, #4
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC1_Init+0x18c>)
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fe24 	bl	800233c <HAL_ADC_ConfigChannel>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006f8:	f000 faa2 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4a27      	ldr	r2, [pc, #156]	@ (800079c <MX_ADC1_Init+0x1a0>)
 8000700:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000702:	1d3a      	adds	r2, r7, #4
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fe17 	bl	800233c <HAL_ADC_ConfigChannel>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000712:	f000 fa95 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <MX_ADC1_Init+0x1a4>)
 800071a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	1d3a      	adds	r2, r7, #4
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fe0a 	bl	800233c <HAL_ADC_ConfigChannel>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800072c:	f000 fa88 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_ADC1_Init+0x1a8>)
 8000734:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fdfd 	bl	800233c <HAL_ADC_ConfigChannel>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000746:	f000 fa7b 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4a16      	ldr	r2, [pc, #88]	@ (80007a8 <MX_ADC1_Init+0x1ac>)
 800074e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	1d3a      	adds	r2, r7, #4
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <MX_ADC1_Init+0x18c>)
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fdf0 	bl	800233c <HAL_ADC_ConfigChannel>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000760:	f000 fa6e 	bl	8000c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4a11      	ldr	r2, [pc, #68]	@ (80007ac <MX_ADC1_Init+0x1b0>)
 8000768:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076a:	1d3a      	adds	r2, r7, #4
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_ADC1_Init+0x18c>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fde3 	bl	800233c <HAL_ADC_ConfigChannel>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 800077a:	f000 fa61 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b004      	add	sp, #16
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	2000008c 	.word	0x2000008c
 800078c:	40012400 	.word	0x40012400
 8000790:	04000002 	.word	0x04000002
 8000794:	08000004 	.word	0x08000004
 8000798:	0c000008 	.word	0x0c000008
 800079c:	10000010 	.word	0x10000010
 80007a0:	14000020 	.word	0x14000020
 80007a4:	18000040 	.word	0x18000040
 80007a8:	1c000080 	.word	0x1c000080
 80007ac:	20000100 	.word	0x20000100

080007b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000828 <MX_I2C1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100412;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007bc:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <MX_I2C1_Init+0x7c>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c0:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 fd19 	bl	8003224 <HAL_I2C_Init>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007f6:	f000 fa23 	bl	8000c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f002 fdb6 	bl	8003370 <HAL_I2CEx_ConfigAnalogFilter>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000808:	f000 fa1a 	bl	8000c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <MX_I2C1_Init+0x74>)
 800080e:	2100      	movs	r1, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f002 fdf9 	bl	8003408 <HAL_I2CEx_ConfigDigitalFilter>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 fa11 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000014c 	.word	0x2000014c
 8000828:	40005400 	.word	0x40005400
 800082c:	00100412 	.word	0x00100412

08000830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000834:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <MX_SPI1_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_SPI1_Init+0x74>)
 800083c:	2282      	movs	r2, #130	@ 0x82
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_SPI1_Init+0x74>)
 800084a:	22e0      	movs	r2, #224	@ 0xe0
 800084c:	00d2      	lsls	r2, r2, #3
 800084e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_SPI1_Init+0x74>)
 800085e:	2280      	movs	r2, #128	@ 0x80
 8000860:	0092      	lsls	r2, r2, #2
 8000862:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_SPI1_Init+0x74>)
 800087e:	2207      	movs	r2, #7
 8000880:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_SPI1_Init+0x74>)
 800088a:	2208      	movs	r2, #8
 800088c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <MX_SPI1_Init+0x74>)
 8000890:	0018      	movs	r0, r3
 8000892:	f003 facd 	bl	8003e30 <HAL_SPI_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 f9d1 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001fc 	.word	0x200001fc
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b098      	sub	sp, #96	@ 0x60
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	2354      	movs	r3, #84	@ 0x54
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	0018      	movs	r0, r3
 80008b8:	230c      	movs	r3, #12
 80008ba:	001a      	movs	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	f006 f89b 	bl	80069f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c2:	2338      	movs	r3, #56	@ 0x38
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	0018      	movs	r0, r3
 80008c8:	231c      	movs	r3, #28
 80008ca:	001a      	movs	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f006 f893 	bl	80069f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2334      	movs	r3, #52	@ 0x34
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f006 f88c 	bl	80069f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e0:	4b45      	ldr	r3, [pc, #276]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 80008e2:	4a46      	ldr	r2, [pc, #280]	@ (80009fc <MX_TIM1_Init+0x150>)
 80008e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 80008e6:	4b44      	ldr	r3, [pc, #272]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 80008e8:	220b      	movs	r2, #11
 80008ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b42      	ldr	r3, [pc, #264]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80008f2:	4b41      	ldr	r3, [pc, #260]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 80008f4:	2263      	movs	r2, #99	@ 0x63
 80008f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fe:	4b3e      	ldr	r3, [pc, #248]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000904:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800090a:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 800090c:	0018      	movs	r0, r3
 800090e:	f003 fb9f 	bl	8004050 <HAL_TIM_PWM_Init>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 f993 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2154      	movs	r1, #84	@ 0x54
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092e:	187a      	adds	r2, r7, r1
 8000930:	4b31      	ldr	r3, [pc, #196]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f004 f803 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800093e:	f000 f97f 	bl	8000c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000942:	2138      	movs	r1, #56	@ 0x38
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2260      	movs	r2, #96	@ 0x60
 8000948:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096e:	1879      	adds	r1, r7, r1
 8000970:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 8000972:	2200      	movs	r2, #0
 8000974:	0018      	movs	r0, r3
 8000976:	f003 fbc3 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800097e:	f000 f95f 	bl	8000c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	0192      	lsls	r2, r2, #6
 80009a6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	0492      	lsls	r2, r2, #18
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d4:	1d3a      	adds	r2, r7, #4
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f004 f818 	bl	8004a10 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80009e4:	f000 f92c 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <MX_TIM1_Init+0x14c>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 ffc2 	bl	8001974 <HAL_TIM_MspPostInit>

}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b018      	add	sp, #96	@ 0x60
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000260 	.word	0x20000260
 80009fc:	40012c00 	.word	0x40012c00

08000a00 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_TIM14_Init+0x40>)
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <MX_TIM14_Init+0x44>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <MX_TIM14_Init+0x40>)
 8000a0c:	220b      	movs	r2, #11
 8000a0e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_TIM14_Init+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <MX_TIM14_Init+0x40>)
 8000a18:	4a0b      	ldr	r2, [pc, #44]	@ (8000a48 <MX_TIM14_Init+0x48>)
 8000a1a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_TIM14_Init+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <MX_TIM14_Init+0x40>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <MX_TIM14_Init+0x40>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f003 fab8 	bl	8003fa0 <HAL_TIM_Base_Init>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a34:	f000 f904 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	200002ac 	.word	0x200002ac
 8000a44:	40002000 	.word	0x40002000
 8000a48:	0000ffff 	.word	0x0000ffff

08000a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a52:	4a25      	ldr	r2, [pc, #148]	@ (8000ae8 <MX_USART1_UART_Init+0x9c>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a58:	2296      	movs	r2, #150	@ 0x96
 8000a5a:	0192      	lsls	r2, r2, #6
 8000a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000a94:	4813      	ldr	r0, [pc, #76]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000a96:	2300      	movs	r3, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f005 fda0 	bl	80065e0 <HAL_RS485Ex_Init>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000aa4:	f000 f8cc 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	0018      	movs	r0, r3
 8000aae:	f005 fe5b 	bl	8006768 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 f8c3 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f005 fe92 	bl	80067e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000ac8:	f000 f8ba 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <MX_USART1_UART_Init+0x98>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f005 fe10 	bl	80066f4 <HAL_UARTEx_DisableFifoMode>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000ad8:	f000 f8b2 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	200002f8 	.word	0x200002f8
 8000ae8:	40013800 	.word	0x40013800

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_DMA_Init+0x58>)
 8000af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_DMA_Init+0x58>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	430a      	orrs	r2, r1
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_DMA_Init+0x58>)
 8000b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b02:	2201      	movs	r2, #1
 8000b04:	4013      	ands	r3, r2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2009      	movs	r0, #9
 8000b10:	f001 fe96 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b14:	2009      	movs	r0, #9
 8000b16:	f001 fea8 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f001 fe8e 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000b24:	200a      	movs	r0, #10
 8000b26:	f001 fea0 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200b      	movs	r0, #11
 8000b30:	f001 fe86 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8000b34:	200b      	movs	r0, #11
 8000b36:	f001 fe98 	bl	800286a <HAL_NVIC_EnableIRQ>

}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	40021000 	.word	0x40021000

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b08b      	sub	sp, #44	@ 0x2c
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	2414      	movs	r4, #20
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	0018      	movs	r0, r3
 8000b54:	2314      	movs	r3, #20
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f005 ff4d 	bl	80069f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b35      	ldr	r3, [pc, #212]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b62:	4b34      	ldr	r3, [pc, #208]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b64:	2104      	movs	r1, #4
 8000b66:	430a      	orrs	r2, r1
 8000b68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b6a:	4b32      	ldr	r3, [pc, #200]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b82:	4b2c      	ldr	r3, [pc, #176]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b86:	2220      	movs	r2, #32
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000bac:	2102      	movs	r1, #2
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bb2:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	4013      	ands	r3, r2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_GPIO_Init+0xec>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin, GPIO_PIN_RESET);
 8000bd6:	23e0      	movs	r3, #224	@ 0xe0
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4817      	ldr	r0, [pc, #92]	@ (8000c38 <MX_GPIO_Init+0xf0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	0019      	movs	r1, r3
 8000be0:	f002 fb02 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2206      	movs	r2, #6
 8000be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <MX_GPIO_Init+0xf4>)
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	f002 f981 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_C_EN_Pin Actuator_B_EN_Pin Actuator_A_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin;
 8000c02:	0021      	movs	r1, r4
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	22e0      	movs	r2, #224	@ 0xe0
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <MX_GPIO_Init+0xf0>)
 8000c22:	0019      	movs	r1, r3
 8000c24:	0010      	movs	r0, r2
 8000c26:	f002 f96d 	bl	8002f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b00b      	add	sp, #44	@ 0x2c
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	40021000 	.word	0x40021000
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	50000c00 	.word	0x50000c00

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	000a      	movs	r2, r1
 8000c56:	1cbb      	adds	r3, r7, #2
 8000c58:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a45      	ldr	r2, [pc, #276]	@ (8000d74 <HAL_UARTEx_RxEventCallback+0x128>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d000      	beq.n	8000c66 <HAL_UARTEx_RxEventCallback+0x1a>
 8000c64:	e081      	b.n	8000d6a <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8000c66:	4b44      	ldr	r3, [pc, #272]	@ (8000d78 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b43      	ldr	r3, [pc, #268]	@ (8000d7c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c6e:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8000c70:	4b42      	ldr	r3, [pc, #264]	@ (8000d7c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	001a      	movs	r2, r3
 8000c78:	1cbb      	adds	r3, r7, #2
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	18d2      	adds	r2, r2, r3
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dd29      	ble.n	8000cda <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8000c86:	4b3d      	ldr	r3, [pc, #244]	@ (8000d7c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	240e      	movs	r4, #14
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000c98:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <HAL_UARTEx_RxEventCallback+0x134>)
 8000ca2:	18d0      	adds	r0, r2, r3
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <HAL_UARTEx_RxEventCallback+0x138>)
 8000caa:	0019      	movs	r1, r3
 8000cac:	f005 fed0 	bl	8006a50 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000cb0:	1cba      	adds	r2, r7, #2
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	8812      	ldrh	r2, [r2, #0]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000cbe:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	881a      	ldrh	r2, [r3, #0]
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cc6:	18d1      	adds	r1, r2, r3
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	001a      	movs	r2, r3
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d80 <HAL_UARTEx_RxEventCallback+0x134>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f005 febc 	bl	8006a50 <memcpy>
 8000cd8:	e014      	b.n	8000d04 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8000cda:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <HAL_UARTEx_RxEventCallback+0x130>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <HAL_UARTEx_RxEventCallback+0x134>)
 8000ce4:	18d0      	adds	r0, r2, r3
 8000ce6:	1cbb      	adds	r3, r7, #2
 8000ce8:	881a      	ldrh	r2, [r3, #0]
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	f005 feaf 	bl	8006a50 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <HAL_UARTEx_RxEventCallback+0x130>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	1cbb      	adds	r3, r7, #2
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d02:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8000d04:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d027      	beq.n	8000d5e <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8000d0e:	f001 f843 	bl	8001d98 <HAL_GetTick>
 8000d12:	0002      	movs	r2, r0
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <HAL_UARTEx_RxEventCallback+0x140>)
 8000d16:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_UARTEx_RxEventCallback+0x130>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <HAL_UARTEx_RxEventCallback+0x144>)
 8000d20:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8000d22:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_UARTEx_RxEventCallback+0x138>)
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <HAL_UARTEx_RxEventCallback+0x138>)
 8000d30:	7952      	ldrb	r2, [r2, #5]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3301      	adds	r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	18db      	adds	r3, r3, r3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4910      	ldr	r1, [pc, #64]	@ (8000d84 <HAL_UARTEx_RxEventCallback+0x138>)
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_UARTEx_RxEventCallback+0x148>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f005 fd90 	bl	800686c <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2104      	movs	r1, #4
 8000d58:	438a      	bics	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 8000d5c:	e005      	b.n	8000d6a <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_UARTEx_RxEventCallback+0x150>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b005      	add	sp, #20
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	40013800 	.word	0x40013800
 8000d78:	20000730 	.word	0x20000730
 8000d7c:	2000072e 	.word	0x2000072e
 8000d80:	20000428 	.word	0x20000428
 8000d84:	20000628 	.word	0x20000628
 8000d88:	20000060 	.word	0x20000060
 8000d8c:	20000728 	.word	0x20000728
 8000d90:	2000072c 	.word	0x2000072c
 8000d94:	200002f8 	.word	0x200002f8
 8000d98:	2000038c 	.word	0x2000038c
 8000d9c:	20000732 	.word	0x20000732

08000da0 <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_UART_TxCpltCallback+0x18>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b002      	add	sp, #8
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	20000733 	.word	0x20000733

08000dbc <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <handle_chunk_miss+0x5c>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d120      	bne.n	8000e0e <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8000dcc:	f000 ffe4 	bl	8001d98 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <handle_chunk_miss+0x60>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b0a      	cmp	r3, #10
 8000dda:	d918      	bls.n	8000e0e <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <handle_chunk_miss+0x5c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <handle_chunk_miss+0x64>)
 8000de4:	0018      	movs	r0, r3
 8000de6:	f003 ff57 	bl	8004c98 <HAL_UART_Abort_IT>
 8000dea:	0003      	movs	r3, r0
 8000dec:	001a      	movs	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8000dfc:	1dfc      	adds	r4, r7, #7
 8000dfe:	f000 fae7 	bl	80013d0 <modbus_set_rx>
 8000e02:	0003      	movs	r3, r0
 8000e04:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	e000      	b.n	8000e10 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b003      	add	sp, #12
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	20000060 	.word	0x20000060
 8000e1c:	20000728 	.word	0x20000728
 8000e20:	200002f8 	.word	0x200002f8

08000e24 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2bff      	cmp	r3, #255	@ 0xff
 8000e36:	d023      	beq.n	8000e80 <get_rx_buffer+0x5c>
	{
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <get_rx_buffer+0x68>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	001a      	movs	r2, r3
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	18d3      	adds	r3, r2, r3
 8000e46:	2bff      	cmp	r3, #255	@ 0xff
 8000e48:	dd0b      	ble.n	8000e62 <get_rx_buffer+0x3e>
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <get_rx_buffer+0x68>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	001a      	movs	r2, r3
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	18d3      	adds	r3, r2, r3
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	3bff      	subs	r3, #255	@ 0xff
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e90 <get_rx_buffer+0x6c>)
 8000e5e:	5cd3      	ldrb	r3, [r2, r3]
 8000e60:	e008      	b.n	8000e74 <get_rx_buffer+0x50>
				modbus_rx_buffer[start_index + index];
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <get_rx_buffer+0x68>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	001a      	movs	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	18d3      	adds	r3, r2, r3
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8000e70:	4a07      	ldr	r2, [pc, #28]	@ (8000e90 <get_rx_buffer+0x6c>)
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	210f      	movs	r1, #15
 8000e76:	187a      	adds	r2, r7, r1
 8000e78:	7013      	strb	r3, [r2, #0]
		return value;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	e000      	b.n	8000e82 <get_rx_buffer+0x5e>
	}
	return 0xFF;
 8000e80:	23ff      	movs	r3, #255	@ 0xff
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b004      	add	sp, #16
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	2000072c 	.word	0x2000072c
 8000e90:	20000428 	.word	0x20000428

08000e94 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f7ff ffc2 	bl	8000e24 <get_rx_buffer>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21c      	sxth	r4, r3
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f7ff ffbc 	bl	8000e24 <get_rx_buffer>
 8000eac:	0003      	movs	r3, r0
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff ffb3 	bl	8000e24 <get_rx_buffer>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21c      	sxth	r4, r3
 8000ec4:	2005      	movs	r0, #5
 8000ec6:	f7ff ffad 	bl	8000e24 <get_rx_buffer>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4323      	orrs	r3, r4
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	1cbb      	adds	r3, r7, #2
 8000ed4:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2b7d      	cmp	r3, #125	@ 0x7d
 8000edc:	d803      	bhi.n	8000ee6 <return_holding_registers+0x52>
 8000ede:	1cbb      	adds	r3, r7, #2
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d104      	bne.n	8000ef0 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000ee6:	2006      	movs	r0, #6
 8000ee8:	f000 f95e 	bl	80011a8 <modbus_exception>
 8000eec:	0003      	movs	r3, r0
 8000eee:	e065      	b.n	8000fbc <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000ef0:	1cba      	adds	r2, r7, #2
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	8812      	ldrh	r2, [r2, #0]
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	003b      	movs	r3, r7
 8000efe:	3a01      	subs	r2, #1
 8000f00:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000f02:	003b      	movs	r3, r7
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	2b30      	cmp	r3, #48	@ 0x30
 8000f08:	d904      	bls.n	8000f14 <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f000 f94c 	bl	80011a8 <modbus_exception>
 8000f10:	0003      	movs	r3, r0
 8000f12:	e053      	b.n	8000fbc <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ff85 	bl	8000e24 <get_rx_buffer>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <return_holding_registers+0x130>)
 8000f20:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff ff7e 	bl	8000e24 <get_rx_buffer>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <return_holding_registers+0x130>)
 8000f2e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000f30:	1cbb      	adds	r3, r7, #2
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	18db      	adds	r3, r3, r3
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <return_holding_registers+0x130>)
 8000f3c:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	2203      	movs	r2, #3
 8000f42:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e028      	b.n	8000f9e <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	1dbb      	adds	r3, r7, #6
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	18d2      	adds	r2, r2, r3
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <return_holding_registers+0x134>)
 8000f58:	0052      	lsls	r2, r2, #1
 8000f5a:	5ad3      	ldrh	r3, [r2, r3]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	1dfa      	adds	r2, r7, #7
 8000f66:	1c58      	adds	r0, r3, #1
 8000f68:	7010      	strb	r0, [r2, #0]
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	b2c9      	uxtb	r1, r1
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <return_holding_registers+0x130>)
 8000f70:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	881a      	ldrh	r2, [r3, #0]
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	18d2      	adds	r2, r2, r3
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <return_holding_registers+0x134>)
 8000f7e:	0052      	lsls	r2, r2, #1
 8000f80:	5ad1      	ldrh	r1, [r2, r3]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	1c58      	adds	r0, r3, #1
 8000f8a:	7010      	strb	r0, [r2, #0]
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	b2c9      	uxtb	r1, r1
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <return_holding_registers+0x130>)
 8000f92:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8000f94:	1dbb      	adds	r3, r7, #6
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	1dbb      	adds	r3, r7, #6
 8000f9a:	3201      	adds	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	1cba      	adds	r2, r7, #2
 8000fa6:	8812      	ldrh	r2, [r2, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8cf      	bhi.n	8000f4c <return_holding_registers+0xb8>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <return_holding_registers+0x130>)
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f98d 	bl	80012d4 <modbus_send>
 8000fba:	0003      	movs	r3, r0
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b003      	add	sp, #12
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	20000528 	.word	0x20000528
 8000fc8:	20000000 	.word	0x20000000

08000fcc <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f7ff ff26 	bl	8000e24 <get_rx_buffer>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21c      	sxth	r4, r3
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f7ff ff20 	bl	8000e24 <get_rx_buffer>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4323      	orrs	r3, r4
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	230c      	movs	r3, #12
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	f7ff ff16 	bl	8000e24 <get_rx_buffer>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21c      	sxth	r4, r3
 8000ffe:	2005      	movs	r0, #5
 8001000:	f7ff ff10 	bl	8000e24 <get_rx_buffer>
 8001004:	0003      	movs	r3, r0
 8001006:	b21b      	sxth	r3, r3
 8001008:	4323      	orrs	r3, r4
 800100a:	b21a      	sxth	r2, r3
 800100c:	210a      	movs	r1, #10
 800100e:	187b      	adds	r3, r7, r1
 8001010:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001012:	000a      	movs	r2, r1
 8001014:	18bb      	adds	r3, r7, r2
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b7d      	cmp	r3, #125	@ 0x7d
 800101a:	d803      	bhi.n	8001024 <edit_multiple_registers+0x58>
 800101c:	18bb      	adds	r3, r7, r2
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d104      	bne.n	800102e <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001024:	2006      	movs	r0, #6
 8001026:	f000 f8bf 	bl	80011a8 <modbus_exception>
 800102a:	0003      	movs	r3, r0
 800102c:	e0b4      	b.n	8001198 <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800102e:	230a      	movs	r3, #10
 8001030:	18fa      	adds	r2, r7, r3
 8001032:	230c      	movs	r3, #12
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	8812      	ldrh	r2, [r2, #0]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	b29a      	uxth	r2, r3
 800103e:	2108      	movs	r1, #8
 8001040:	187b      	adds	r3, r7, r1
 8001042:	3a01      	subs	r2, #1
 8001044:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001046:	187b      	adds	r3, r7, r1
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	2b30      	cmp	r3, #48	@ 0x30
 800104c:	d904      	bls.n	8001058 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800104e:	2005      	movs	r0, #5
 8001050:	f000 f8aa 	bl	80011a8 <modbus_exception>
 8001054:	0003      	movs	r3, r0
 8001056:	e09f      	b.n	8001198 <edit_multiple_registers+0x1cc>
	}

	if((first_register_address >= 3 && last_register_address <= 33))
 8001058:	230c      	movs	r3, #12
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d909      	bls.n	8001076 <edit_multiple_registers+0xaa>
 8001062:	2308      	movs	r3, #8
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b21      	cmp	r3, #33	@ 0x21
 800106a:	d804      	bhi.n	8001076 <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 800106c:	2004      	movs	r0, #4
 800106e:	f000 f89b 	bl	80011a8 <modbus_exception>
 8001072:	0003      	movs	r3, r0
 8001074:	e090      	b.n	8001198 <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fed4 	bl	8000e24 <get_rx_buffer>
 800107c:	0003      	movs	r3, r0
 800107e:	001a      	movs	r2, r3
 8001080:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <edit_multiple_registers+0x1d4>)
 8001082:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff fecd 	bl	8000e24 <get_rx_buffer>
 800108a:	0003      	movs	r3, r0
 800108c:	001a      	movs	r2, r3
 800108e:	4b44      	ldr	r3, [pc, #272]	@ (80011a0 <edit_multiple_registers+0x1d4>)
 8001090:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8001092:	2002      	movs	r0, #2
 8001094:	f7ff fec6 	bl	8000e24 <get_rx_buffer>
 8001098:	0003      	movs	r3, r0
 800109a:	001a      	movs	r2, r3
 800109c:	4b40      	ldr	r3, [pc, #256]	@ (80011a0 <edit_multiple_registers+0x1d4>)
 800109e:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f7ff febf 	bl	8000e24 <get_rx_buffer>
 80010a6:	0003      	movs	r3, r0
 80010a8:	001a      	movs	r2, r3
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <edit_multiple_registers+0x1d4>)
 80010ac:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 80010ae:	2004      	movs	r0, #4
 80010b0:	f7ff feb8 	bl	8000e24 <get_rx_buffer>
 80010b4:	0003      	movs	r3, r0
 80010b6:	001a      	movs	r2, r3
 80010b8:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <edit_multiple_registers+0x1d4>)
 80010ba:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f7ff feb1 	bl	8000e24 <get_rx_buffer>
 80010c2:	0003      	movs	r3, r0
 80010c4:	001a      	movs	r2, r3
 80010c6:	4b36      	ldr	r3, [pc, #216]	@ (80011a0 <edit_multiple_registers+0x1d4>)
 80010c8:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	2206      	movs	r2, #6
 80010ce:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 80010d0:	230f      	movs	r3, #15
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e032      	b.n	8001140 <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 80010da:	250f      	movs	r5, #15
 80010dc:	197b      	adds	r3, r7, r5
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	18db      	adds	r3, r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3307      	adds	r3, #7
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff fe9b 	bl	8000e24 <get_rx_buffer>
 80010ee:	0003      	movs	r3, r0
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21c      	sxth	r4, r3
 80010f4:	197b      	adds	r3, r7, r5
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3304      	adds	r3, #4
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	18db      	adds	r3, r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fe8f 	bl	8000e24 <get_rx_buffer>
 8001106:	0003      	movs	r3, r0
 8001108:	b21b      	sxth	r3, r3
 800110a:	4323      	orrs	r3, r4
 800110c:	b219      	sxth	r1, r3
 800110e:	200c      	movs	r0, #12
 8001110:	183b      	adds	r3, r7, r0
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	197b      	adds	r3, r7, r5
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	18d2      	adds	r2, r2, r3
 800111a:	b289      	uxth	r1, r1
 800111c:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <edit_multiple_registers+0x1d8>)
 800111e:	0052      	lsls	r2, r2, #1
 8001120:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8001122:	197b      	adds	r3, r7, r5
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b29a      	uxth	r2, r3
 8001128:	183b      	adds	r3, r7, r0
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	b29b      	uxth	r3, r3
 8001130:	0018      	movs	r0, r3
 8001132:	f000 f863 	bl	80011fc <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8001136:	197b      	adds	r3, r7, r5
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	197b      	adds	r3, r7, r5
 800113c:	3201      	adds	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	220a      	movs	r2, #10
 800114a:	18ba      	adds	r2, r7, r2
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d8c3      	bhi.n	80010da <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fe2a 	bl	8001dac <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8001158:	1dbc      	adds	r4, r7, #6
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <edit_multiple_registers+0x1d4>)
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f000 f8b6 	bl	80012d4 <modbus_send>
 8001168:	0003      	movs	r3, r0
 800116a:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 800116c:	1dbb      	adds	r3, r7, #6
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b25b      	sxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10d      	bne.n	8001192 <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8001176:	230c      	movs	r3, #12
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d808      	bhi.n	8001192 <edit_multiple_registers+0x1c6>
 8001180:	2308      	movs	r3, #8
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 800118a:	f000 f943 	bl	8001414 <modbus_change_baud_rate>
 800118e:	0003      	movs	r3, r0
 8001190:	e002      	b.n	8001198 <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 8001192:	1dbb      	adds	r3, r7, #6
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b004      	add	sp, #16
 800119e:	bdb0      	pop	{r4, r5, r7, pc}
 80011a0:	20000528 	.word	0x20000528
 80011a4:	20000000 	.word	0x20000000

080011a8 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fe35 	bl	8000e24 <get_rx_buffer>
 80011ba:	0003      	movs	r3, r0
 80011bc:	001a      	movs	r2, r3
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <modbus_exception+0x50>)
 80011c0:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fe2e 	bl	8000e24 <get_rx_buffer>
 80011c8:	0003      	movs	r3, r0
 80011ca:	001a      	movs	r2, r3
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	425b      	negs	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <modbus_exception+0x50>)
 80011d6:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	3b03      	subs	r3, #3
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <modbus_exception+0x50>)
 80011e2:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <modbus_exception+0x50>)
 80011e6:	2103      	movs	r1, #3
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 f873 	bl	80012d4 <modbus_send>
 80011ee:	0003      	movs	r3, r0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000528 	.word	0x20000528

080011fc <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	2b24      	cmp	r3, #36	@ 0x24
 800120e:	dd00      	ble.n	8001212 <handle_range+0x16>
 8001210:	e058      	b.n	80012c4 <handle_range+0xc8>
 8001212:	2b22      	cmp	r3, #34	@ 0x22
 8001214:	da3f      	bge.n	8001296 <handle_range+0x9a>
 8001216:	2b02      	cmp	r3, #2
 8001218:	d02f      	beq.n	800127a <handle_range+0x7e>
 800121a:	dc53      	bgt.n	80012c4 <handle_range+0xc8>
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <handle_range+0x2a>
 8001220:	2b01      	cmp	r3, #1
 8001222:	d00e      	beq.n	8001242 <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 8001224:	e04e      	b.n	80012c4 <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 8001226:	1dbb      	adds	r3, r7, #6
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <handle_range+0xd0>)
 800122c:	0052      	lsls	r2, r2, #1
 800122e:	5ad3      	ldrh	r3, [r2, r3]
 8001230:	2bff      	cmp	r3, #255	@ 0xff
 8001232:	d940      	bls.n	80012b6 <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 8001234:	1dbb      	adds	r3, r7, #6
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <handle_range+0xd0>)
 800123a:	0052      	lsls	r2, r2, #1
 800123c:	21ff      	movs	r1, #255	@ 0xff
 800123e:	52d1      	strh	r1, [r2, r3]
			break;
 8001240:	e039      	b.n	80012b6 <handle_range+0xba>
			if(holding_register_database[holding_register] < 2)
 8001242:	1dbb      	adds	r3, r7, #6
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <handle_range+0xd0>)
 8001248:	0052      	lsls	r2, r2, #1
 800124a:	5ad3      	ldrh	r3, [r2, r3]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d806      	bhi.n	800125e <handle_range+0x62>
				holding_register_database[holding_register] = 2;
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	881a      	ldrh	r2, [r3, #0]
 8001254:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <handle_range+0xd0>)
 8001256:	0052      	lsls	r2, r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	52d1      	strh	r1, [r2, r3]
			break;
 800125c:	e02d      	b.n	80012ba <handle_range+0xbe>
			else if(holding_register_database[holding_register] > 9)
 800125e:	1dbb      	adds	r3, r7, #6
 8001260:	881a      	ldrh	r2, [r3, #0]
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <handle_range+0xd0>)
 8001264:	0052      	lsls	r2, r2, #1
 8001266:	5ad3      	ldrh	r3, [r2, r3]
 8001268:	2b09      	cmp	r3, #9
 800126a:	d926      	bls.n	80012ba <handle_range+0xbe>
				holding_register_database[holding_register] = 9;
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <handle_range+0xd0>)
 8001272:	0052      	lsls	r2, r2, #1
 8001274:	2109      	movs	r1, #9
 8001276:	52d1      	strh	r1, [r2, r3]
			break;
 8001278:	e01f      	b.n	80012ba <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 800127a:	1dbb      	adds	r3, r7, #6
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <handle_range+0xd0>)
 8001280:	0052      	lsls	r2, r2, #1
 8001282:	5ad3      	ldrh	r3, [r2, r3]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d91a      	bls.n	80012be <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	881a      	ldrh	r2, [r3, #0]
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <handle_range+0xd0>)
 800128e:	0052      	lsls	r2, r2, #1
 8001290:	2101      	movs	r1, #1
 8001292:	52d1      	strh	r1, [r2, r3]
			break;
 8001294:	e013      	b.n	80012be <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 8001296:	1dbb      	adds	r3, r7, #6
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <handle_range+0xd0>)
 800129c:	0052      	lsls	r2, r2, #1
 800129e:	5ad2      	ldrh	r2, [r2, r3]
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	015b      	lsls	r3, r3, #5
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d30c      	bcc.n	80012c2 <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <handle_range+0xd0>)
 80012ae:	0052      	lsls	r2, r2, #1
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <handle_range+0xd4>)
 80012b2:	52d1      	strh	r1, [r2, r3]
			break;
 80012b4:	e005      	b.n	80012c2 <handle_range+0xc6>
			break;
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	e004      	b.n	80012c4 <handle_range+0xc8>
			break;
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	e002      	b.n	80012c4 <handle_range+0xc8>
			break;
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	e000      	b.n	80012c4 <handle_range+0xc8>
			break;
 80012c2:	46c0      	nop			@ (mov r8, r8)
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	00000fff 	.word	0x00000fff

080012d4 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	000a      	movs	r2, r1
 80012de:	1cfb      	adds	r3, r7, #3
 80012e0:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 80012e2:	250e      	movs	r5, #14
 80012e4:	197c      	adds	r4, r7, r5
 80012e6:	1cfb      	adds	r3, r7, #3
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <modbus_send+0xc0>)
 80012ec:	0011      	movs	r1, r2
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 f8f6 	bl	80014e0 <crc_16>
 80012f4:	0003      	movs	r3, r0
 80012f6:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80012f8:	1cfb      	adds	r3, r7, #3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	197a      	adds	r2, r7, r5
 80012fe:	8812      	ldrh	r2, [r2, #0]
 8001300:	b2d1      	uxtb	r1, r2
 8001302:	4a24      	ldr	r2, [pc, #144]	@ (8001394 <modbus_send+0xc0>)
 8001304:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8001306:	197b      	adds	r3, r7, r5
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29a      	uxth	r2, r3
 800130e:	1cfb      	adds	r3, r7, #3
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	b2d1      	uxtb	r1, r2
 8001316:	4a1f      	ldr	r2, [pc, #124]	@ (8001394 <modbus_send+0xc0>)
 8001318:	54d1      	strb	r1, [r2, r3]

	int8_t status = HAL_OK;
 800131a:	240d      	movs	r4, #13
 800131c:	193b      	adds	r3, r7, r4
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, modbus_tx_buffer, size + 2);
 8001322:	1cfb      	adds	r3, r7, #3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	3302      	adds	r3, #2
 800132a:	b29a      	uxth	r2, r3
 800132c:	4919      	ldr	r1, [pc, #100]	@ (8001394 <modbus_send+0xc0>)
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <modbus_send+0xc4>)
 8001330:	0018      	movs	r0, r3
 8001332:	f003 fc09 	bl	8004b48 <HAL_UART_Transmit_IT>
 8001336:	0003      	movs	r3, r0
 8001338:	001a      	movs	r2, r3
 800133a:	193b      	adds	r3, r7, r4
 800133c:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 800133e:	193b      	adds	r3, r7, r4
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b25b      	sxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <modbus_send+0x7c>
	{
		return status;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	e01d      	b.n	800138c <modbus_send+0xb8>
	}
	time = HAL_GetTick();
 8001350:	f000 fd22 	bl	8001d98 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <modbus_send+0xc8>)
 8001358:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <modbus_send+0xcc>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d107      	bne.n	8001376 <modbus_send+0xa2>
 8001366:	f000 fd17 	bl	8001d98 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <modbus_send+0xc8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b63      	cmp	r3, #99	@ 0x63
 8001374:	d9f2      	bls.n	800135c <modbus_send+0x88>
	if(tx_int)
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <modbus_send+0xcc>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <modbus_send+0xb6>
	{
		tx_int = 0;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <modbus_send+0xcc>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <modbus_send+0xb8>
	}
	else
	{
		return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
	}
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b004      	add	sp, #16
 8001392:	bdb0      	pop	{r4, r5, r7, pc}
 8001394:	20000528 	.word	0x20000528
 8001398:	200002f8 	.word	0x200002f8
 800139c:	20000724 	.word	0x20000724
 80013a0:	20000733 	.word	0x20000733

080013a4 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	if(rx_int)
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <modbus_rx+0x28>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <modbus_rx+0x18>
	{
		rx_int = 0;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <modbus_rx+0x28>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
		return 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e004      	b.n	80013c6 <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 80013bc:	f7ff fcfe 	bl	8000dbc <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 80013c0:	4b02      	ldr	r3, [pc, #8]	@ (80013cc <modbus_rx+0x28>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000732 	.word	0x20000732

080013d0 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 80013d6:	490c      	ldr	r1, [pc, #48]	@ (8001408 <modbus_set_rx+0x38>)
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <modbus_set_rx+0x3c>)
 80013da:	2206      	movs	r2, #6
 80013dc:	0018      	movs	r0, r3
 80013de:	f005 fa45 	bl	800686c <HAL_UARTEx_ReceiveToIdle_DMA>
 80013e2:	0003      	movs	r3, r0
 80013e4:	001a      	movs	r2, r3
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <modbus_set_rx+0x40>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <modbus_set_rx+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2104      	movs	r1, #4
 80013f6:	438a      	bics	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

	return status;
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000628 	.word	0x20000628
 800140c:	200002f8 	.word	0x200002f8
 8001410:	2000038c 	.word	0x2000038c

08001414 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <modbus_change_baud_rate+0xc0>)
 8001422:	885b      	ldrh	r3, [r3, #2]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d82c      	bhi.n	8001482 <modbus_change_baud_rate+0x6e>
 8001428:	009a      	lsls	r2, r3, #2
 800142a:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <modbus_change_baud_rate+0xc4>)
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8001432:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 8001434:	2296      	movs	r2, #150	@ 0x96
 8001436:	0152      	lsls	r2, r2, #5
 8001438:	605a      	str	r2, [r3, #4]
			break;
 800143a:	e033      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 800143c:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 800143e:	2296      	movs	r2, #150	@ 0x96
 8001440:	0192      	lsls	r2, r2, #6
 8001442:	605a      	str	r2, [r3, #4]
			break;
 8001444:	e02e      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 8001448:	2296      	movs	r2, #150	@ 0x96
 800144a:	01d2      	lsls	r2, r2, #7
 800144c:	605a      	str	r2, [r3, #4]
			break;
 800144e:	e029      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 8001452:	2296      	movs	r2, #150	@ 0x96
 8001454:	0212      	lsls	r2, r2, #8
 8001456:	605a      	str	r2, [r3, #4]
			break;
 8001458:	e024      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 800145c:	22e1      	movs	r2, #225	@ 0xe1
 800145e:	0212      	lsls	r2, r2, #8
 8001460:	605a      	str	r2, [r3, #4]
			break;
 8001462:	e01f      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 8001466:	22e1      	movs	r2, #225	@ 0xe1
 8001468:	0252      	lsls	r2, r2, #9
 800146a:	605a      	str	r2, [r3, #4]
			break;
 800146c:	e01a      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 8001470:	22fa      	movs	r2, #250	@ 0xfa
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	605a      	str	r2, [r3, #4]
			break;
 8001476:	e015      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 800147a:	22fa      	movs	r2, #250	@ 0xfa
 800147c:	0292      	lsls	r2, r2, #10
 800147e:	605a      	str	r2, [r3, #4]
			break;
 8001480:	e010      	b.n	80014a4 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <modbus_change_baud_rate+0xc0>)
 8001484:	2203      	movs	r2, #3
 8001486:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 800148a:	2296      	movs	r2, #150	@ 0x96
 800148c:	0192      	lsls	r2, r2, #6
 800148e:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 8001492:	0018      	movs	r0, r3
 8001494:	f004 f89a 	bl	80055cc <UART_SetConfig>
 8001498:	0003      	movs	r3, r0
 800149a:	001a      	movs	r2, r3
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 80014a0:	2306      	movs	r3, #6
 80014a2:	e013      	b.n	80014cc <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 80014a4:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <modbus_change_baud_rate+0xc8>)
 80014a6:	0018      	movs	r0, r3
 80014a8:	f004 f890 	bl	80055cc <UART_SetConfig>
 80014ac:	0003      	movs	r3, r0
 80014ae:	001a      	movs	r2, r3
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <modbus_change_baud_rate+0xb2>
	{
		return status;
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	e002      	b.n	80014cc <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000000 	.word	0x20000000
 80014d8:	08006c7c 	.word	0x08006c7c
 80014dc:	200002f8 	.word	0x200002f8

080014e0 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	000a      	movs	r2, r1
 80014ea:	1cfb      	adds	r3, r7, #3
 80014ec:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 80014ee:	230f      	movs	r3, #15
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	22ff      	movs	r2, #255	@ 0xff
 80014f4:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 80014f6:	230e      	movs	r3, #14
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	22ff      	movs	r2, #255	@ 0xff
 80014fc:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 80014fe:	e019      	b.n	8001534 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	200e      	movs	r0, #14
 800150a:	183b      	adds	r3, r7, r0
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4053      	eors	r3, r2
 8001510:	b2db      	uxtb	r3, r3
 8001512:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8001514:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <crc_16+0x84>)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	7819      	ldrb	r1, [r3, #0]
 800151c:	183b      	adds	r3, r7, r0
 800151e:	200f      	movs	r0, #15
 8001520:	183a      	adds	r2, r7, r0
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	404a      	eors	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8001528:	183b      	adds	r3, r7, r0
 800152a:	490f      	ldr	r1, [pc, #60]	@ (8001568 <crc_16+0x88>)
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	188a      	adds	r2, r1, r2
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	701a      	strb	r2, [r3, #0]
	while (size--)
 8001534:	1cfb      	adds	r3, r7, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	1cfa      	adds	r2, r7, #3
 800153a:	1e59      	subs	r1, r3, #1
 800153c:	7011      	strb	r1, [r2, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1de      	bne.n	8001500 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8001542:	230f      	movs	r3, #15
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	230e      	movs	r3, #14
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21b      	sxth	r3, r3
 8001558:	b29b      	uxth	r3, r3
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	08006a7c 	.word	0x08006a7c
 8001568:	08006b7c 	.word	0x08006b7c

0800156c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <HAL_MspInit+0x44>)
 8001574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <HAL_MspInit+0x44>)
 8001578:	2101      	movs	r1, #1
 800157a:	430a      	orrs	r2, r1
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <HAL_MspInit+0x44>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_MspInit+0x44>)
 800158c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_MspInit+0x44>)
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	0549      	lsls	r1, r1, #21
 8001594:	430a      	orrs	r2, r1
 8001596:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_MspInit+0x44>)
 800159a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	055b      	lsls	r3, r3, #21
 80015a0:	4013      	ands	r3, r2
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b093      	sub	sp, #76	@ 0x4c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	2334      	movs	r3, #52	@ 0x34
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	0018      	movs	r0, r3
 80015c2:	2314      	movs	r3, #20
 80015c4:	001a      	movs	r2, r3
 80015c6:	2100      	movs	r1, #0
 80015c8:	f005 fa16 	bl	80069f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015cc:	2414      	movs	r4, #20
 80015ce:	193b      	adds	r3, r7, r4
 80015d0:	0018      	movs	r0, r3
 80015d2:	2320      	movs	r3, #32
 80015d4:	001a      	movs	r2, r3
 80015d6:	2100      	movs	r1, #0
 80015d8:	f005 fa0e 	bl	80069f8 <memset>
  if(hadc->Instance==ADC1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a35      	ldr	r2, [pc, #212]	@ (80016b8 <HAL_ADC_MspInit+0x104>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d163      	bne.n	80016ae <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2220      	movs	r2, #32
 80015ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	0018      	movs	r0, r3
 80015f6:	f002 fb1f 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d001      	beq.n	8001602 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80015fe:	f7ff fb1f 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001602:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <HAL_ADC_MspInit+0x108>)
 8001604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_ADC_MspInit+0x108>)
 8001608:	2180      	movs	r1, #128	@ 0x80
 800160a:	0349      	lsls	r1, r1, #13
 800160c:	430a      	orrs	r2, r1
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001610:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <HAL_ADC_MspInit+0x108>)
 8001612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	035b      	lsls	r3, r3, #13
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <HAL_ADC_MspInit+0x108>)
 8001620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001622:	4b26      	ldr	r3, [pc, #152]	@ (80016bc <HAL_ADC_MspInit+0x108>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	@ 0x34
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <HAL_ADC_MspInit+0x108>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162e:	2201      	movs	r2, #1
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 8001636:	2134      	movs	r1, #52	@ 0x34
 8001638:	187b      	adds	r3, r7, r1
 800163a:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_ADC_MspInit+0x10c>)
 800163c:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2203      	movs	r2, #3
 8001642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	187b      	adds	r3, r7, r1
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	187a      	adds	r2, r7, r1
 800164c:	23a0      	movs	r3, #160	@ 0xa0
 800164e:	05db      	lsls	r3, r3, #23
 8001650:	0011      	movs	r1, r2
 8001652:	0018      	movs	r0, r3
 8001654:	f001 fc56 	bl	8002f04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 800165a:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <HAL_ADC_MspInit+0x114>)
 800165c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 8001660:	2205      	movs	r2, #5
 8001662:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 8001672:	2280      	movs	r2, #128	@ 0x80
 8001674:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 8001678:	2280      	movs	r2, #128	@ 0x80
 800167a:	0052      	lsls	r2, r2, #1
 800167c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	00d2      	lsls	r2, r2, #3
 8001684:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 8001694:	0018      	movs	r0, r3
 8001696:	f001 f905 	bl	80028a4 <HAL_DMA_Init>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800169e:	f7ff facf 	bl	8000c40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 80016a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_ADC_MspInit+0x110>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b013      	add	sp, #76	@ 0x4c
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	40012400 	.word	0x40012400
 80016bc:	40021000 	.word	0x40021000
 80016c0:	000001ff 	.word	0x000001ff
 80016c4:	200000f0 	.word	0x200000f0
 80016c8:	40020008 	.word	0x40020008

080016cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b093      	sub	sp, #76	@ 0x4c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	2334      	movs	r3, #52	@ 0x34
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	0018      	movs	r0, r3
 80016da:	2314      	movs	r3, #20
 80016dc:	001a      	movs	r2, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	f005 f98a 	bl	80069f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e4:	2414      	movs	r4, #20
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	0018      	movs	r0, r3
 80016ea:	2320      	movs	r3, #32
 80016ec:	001a      	movs	r2, r3
 80016ee:	2100      	movs	r1, #0
 80016f0:	f005 f982 	bl	80069f8 <memset>
  if(hi2c->Instance==I2C1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a37      	ldr	r2, [pc, #220]	@ (80017d8 <HAL_I2C_MspInit+0x10c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d168      	bne.n	80017d0 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016fe:	193b      	adds	r3, r7, r4
 8001700:	2202      	movs	r2, #2
 8001702:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001704:	193b      	adds	r3, r7, r4
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170a:	193b      	adds	r3, r7, r4
 800170c:	0018      	movs	r0, r3
 800170e:	f002 fa93 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001716:	f7ff fa93 	bl	8000c40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <HAL_I2C_MspInit+0x110>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800171e:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_I2C_MspInit+0x110>)
 8001720:	2101      	movs	r1, #1
 8001722:	430a      	orrs	r2, r1
 8001724:	635a      	str	r2, [r3, #52]	@ 0x34
 8001726:	4b2d      	ldr	r3, [pc, #180]	@ (80017dc <HAL_I2C_MspInit+0x110>)
 8001728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001732:	2134      	movs	r1, #52	@ 0x34
 8001734:	187b      	adds	r3, r7, r1
 8001736:	22c0      	movs	r2, #192	@ 0xc0
 8001738:	00d2      	lsls	r2, r2, #3
 800173a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2212      	movs	r2, #18
 8001740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2206      	movs	r2, #6
 8001752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	187a      	adds	r2, r7, r1
 8001756:	23a0      	movs	r3, #160	@ 0xa0
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f001 fbd1 	bl	8002f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <HAL_I2C_MspInit+0x110>)
 8001764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001766:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <HAL_I2C_MspInit+0x110>)
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	0389      	lsls	r1, r1, #14
 800176c:	430a      	orrs	r2, r1
 800176e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <HAL_I2C_MspInit+0x110>)
 8001772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	039b      	lsls	r3, r3, #14
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_I2C_MspInit+0x118>)
 8001782:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 8001786:	220a      	movs	r2, #10
 8001788:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 8001798:	2280      	movs	r2, #128	@ 0x80
 800179a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 80017b6:	0018      	movs	r0, r3
 80017b8:	f001 f874 	bl	80028a4 <HAL_DMA_Init>
 80017bc:	1e03      	subs	r3, r0, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 80017c0:	f7ff fa3e 	bl	8000c40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 80017c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_I2C_MspInit+0x114>)
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b013      	add	sp, #76	@ 0x4c
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40021000 	.word	0x40021000
 80017e0:	200001a0 	.word	0x200001a0
 80017e4:	4002001c 	.word	0x4002001c

080017e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b093      	sub	sp, #76	@ 0x4c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	2334      	movs	r3, #52	@ 0x34
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	0018      	movs	r0, r3
 80017f6:	2314      	movs	r3, #20
 80017f8:	001a      	movs	r2, r3
 80017fa:	2100      	movs	r1, #0
 80017fc:	f005 f8fc 	bl	80069f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001800:	2414      	movs	r4, #20
 8001802:	193b      	adds	r3, r7, r4
 8001804:	0018      	movs	r0, r3
 8001806:	2320      	movs	r3, #32
 8001808:	001a      	movs	r2, r3
 800180a:	2100      	movs	r1, #0
 800180c:	f005 f8f4 	bl	80069f8 <memset>
  if(hspi->Instance==SPI1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a34      	ldr	r2, [pc, #208]	@ (80018e8 <HAL_SPI_MspInit+0x100>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d162      	bne.n	80018e0 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800181a:	193b      	adds	r3, r7, r4
 800181c:	2204      	movs	r2, #4
 800181e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001826:	193b      	adds	r3, r7, r4
 8001828:	0018      	movs	r0, r3
 800182a:	f002 fa05 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d001      	beq.n	8001836 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001832:	f7ff fa05 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 8001838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800183a:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 800183c:	2180      	movs	r1, #128	@ 0x80
 800183e:	0149      	lsls	r1, r1, #5
 8001840:	430a      	orrs	r2, r1
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
 8001844:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 8001846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	015b      	lsls	r3, r3, #5
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 8001854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	@ 0x34
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 8001860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001862:	2201      	movs	r2, #1
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 800186c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800186e:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 8001870:	2102      	movs	r1, #2
 8001872:	430a      	orrs	r2, r1
 8001874:	635a      	str	r2, [r3, #52]	@ 0x34
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_SPI_MspInit+0x104>)
 8001878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001882:	2134      	movs	r1, #52	@ 0x34
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2280      	movs	r2, #128	@ 0x80
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	000c      	movs	r4, r1
 800188e:	193b      	adds	r3, r7, r4
 8001890:	2202      	movs	r2, #2
 8001892:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	193b      	adds	r3, r7, r4
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	193b      	adds	r3, r7, r4
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018a0:	193b      	adds	r3, r7, r4
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	193a      	adds	r2, r7, r4
 80018a8:	23a0      	movs	r3, #160	@ 0xa0
 80018aa:	05db      	lsls	r3, r3, #23
 80018ac:	0011      	movs	r1, r2
 80018ae:	0018      	movs	r0, r3
 80018b0:	f001 fb28 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80018b4:	0021      	movs	r1, r4
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2228      	movs	r2, #40	@ 0x28
 80018ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2202      	movs	r2, #2
 80018c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_SPI_MspInit+0x108>)
 80018d8:	0019      	movs	r1, r3
 80018da:	0010      	movs	r0, r2
 80018dc:	f001 fb12 	bl	8002f04 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018e0:	46c0      	nop			@ (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b013      	add	sp, #76	@ 0x4c
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	40013000 	.word	0x40013000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	50000400 	.word	0x50000400

080018f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <HAL_TIM_PWM_MspInit+0x38>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10d      	bne.n	8001922 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_TIM_PWM_MspInit+0x3c>)
 8001908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_TIM_PWM_MspInit+0x3c>)
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	0109      	lsls	r1, r1, #4
 8001910:	430a      	orrs	r2, r1
 8001912:	641a      	str	r2, [r3, #64]	@ 0x40
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_TIM_PWM_MspInit+0x3c>)
 8001916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b004      	add	sp, #16
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_TIM_Base_MspInit+0x38>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10d      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_TIM_Base_MspInit+0x3c>)
 8001948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0209      	lsls	r1, r1, #8
 8001950:	430a      	orrs	r2, r1
 8001952:	641a      	str	r2, [r3, #64]	@ 0x40
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_TIM_Base_MspInit+0x3c>)
 8001956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	40002000 	.word	0x40002000
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b089      	sub	sp, #36	@ 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	240c      	movs	r4, #12
 800197e:	193b      	adds	r3, r7, r4
 8001980:	0018      	movs	r0, r3
 8001982:	2314      	movs	r3, #20
 8001984:	001a      	movs	r2, r3
 8001986:	2100      	movs	r1, #0
 8001988:	f005 f836 	bl	80069f8 <memset>
  if(htim->Instance==TIM1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a15      	ldr	r2, [pc, #84]	@ (80019e8 <HAL_TIM_MspPostInit+0x74>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d123      	bne.n	80019de <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_TIM_MspPostInit+0x78>)
 8001998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199a:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_TIM_MspPostInit+0x78>)
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_TIM_MspPostInit+0x78>)
 80019a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a6:	2201      	movs	r2, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2280      	movs	r2, #128	@ 0x80
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	0021      	movs	r1, r4
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2202      	movs	r2, #2
 80019bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2202      	movs	r2, #2
 80019ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 80019d0:	187a      	adds	r2, r7, r1
 80019d2:	23a0      	movs	r3, #160	@ 0xa0
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	0011      	movs	r1, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	f001 fa93 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b009      	add	sp, #36	@ 0x24
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b095      	sub	sp, #84	@ 0x54
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	233c      	movs	r3, #60	@ 0x3c
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	0018      	movs	r0, r3
 80019fe:	2314      	movs	r3, #20
 8001a00:	001a      	movs	r2, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	f004 fff8 	bl	80069f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a08:	241c      	movs	r4, #28
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2320      	movs	r3, #32
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f004 fff0 	bl	80069f8 <memset>
  if(huart->Instance==USART1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a5f      	ldr	r2, [pc, #380]	@ (8001b9c <HAL_UART_MspInit+0x1ac>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d000      	beq.n	8001a24 <HAL_UART_MspInit+0x34>
 8001a22:	e0b6      	b.n	8001b92 <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	0018      	movs	r0, r3
 8001a34:	f002 f900 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001a3c:	f7ff f900 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a40:	4b57      	ldr	r3, [pc, #348]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a44:	4b56      	ldr	r3, [pc, #344]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	01c9      	lsls	r1, r1, #7
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a52:	2380      	movs	r3, #128	@ 0x80
 8001a54:	01db      	lsls	r3, r3, #7
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a62:	2104      	movs	r1, #4
 8001a64:	430a      	orrs	r2, r1
 8001a66:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a78:	4b49      	ldr	r3, [pc, #292]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a80:	4b47      	ldr	r3, [pc, #284]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a84:	2202      	movs	r2, #2
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b44      	ldr	r3, [pc, #272]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a90:	4b43      	ldr	r3, [pc, #268]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a98:	4b41      	ldr	r3, [pc, #260]	@ (8001ba0 <HAL_UART_MspInit+0x1b0>)
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001aa4:	213c      	movs	r1, #60	@ 0x3c
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	01d2      	lsls	r2, r2, #7
 8001aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	000c      	movs	r4, r1
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	193b      	adds	r3, r7, r4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	4a36      	ldr	r2, [pc, #216]	@ (8001ba4 <HAL_UART_MspInit+0x1b4>)
 8001acc:	0019      	movs	r1, r3
 8001ace:	0010      	movs	r0, r2
 8001ad0:	f001 fa18 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ad4:	193b      	adds	r3, r7, r4
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	2202      	movs	r2, #2
 8001ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	4a2c      	ldr	r2, [pc, #176]	@ (8001ba8 <HAL_UART_MspInit+0x1b8>)
 8001af6:	0019      	movs	r1, r3
 8001af8:	0010      	movs	r0, r2
 8001afa:	f001 fa03 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001afe:	0021      	movs	r1, r4
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	0152      	lsls	r2, r2, #5
 8001b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	187a      	adds	r2, r7, r1
 8001b22:	23a0      	movs	r3, #160	@ 0xa0
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	0011      	movs	r1, r2
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f001 f9eb 	bl	8002f04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b30:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <HAL_UART_MspInit+0x1c0>)
 8001b32:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b36:	2232      	movs	r2, #50	@ 0x32
 8001b38:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b48:	2280      	movs	r2, #128	@ 0x80
 8001b4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 fe9c 	bl	80028a4 <HAL_DMA_Init>
 8001b6c:	1e03      	subs	r3, r0, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001b70:	f7ff f866 	bl	8000c40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2180      	movs	r1, #128	@ 0x80
 8001b78:	4a0c      	ldr	r2, [pc, #48]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b7a:	505a      	str	r2, [r3, r1]
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_UART_MspInit+0x1bc>)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	201b      	movs	r0, #27
 8001b88:	f000 fe5a 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b8c:	201b      	movs	r0, #27
 8001b8e:	f000 fe6c 	bl	800286a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b015      	add	sp, #84	@ 0x54
 8001b98:	bd90      	pop	{r4, r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	50000800 	.word	0x50000800
 8001ba8:	50000400 	.word	0x50000400
 8001bac:	2000038c 	.word	0x2000038c
 8001bb0:	40020044 	.word	0x40020044

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb8:	46c0      	nop			@ (mov r8, r8)
 8001bba:	e7fd      	b.n	8001bb8 <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	e7fd      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc8:	46c0      	nop			@ (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 f8ca 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	46c0      	nop			@ (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <DMA1_Channel1_IRQHandler+0x14>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f001 f846 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	200000f0 	.word	0x200000f0

08001c00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f001 f83a 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	200001a0 	.word	0x200001a0

08001c18 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <DMAMUX1_DMA1_CH4_5_IRQHandler+0x14>)
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f001 f82e 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	2000038c 	.word	0x2000038c

08001c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c34:	4b03      	ldr	r3, [pc, #12]	@ (8001c44 <USART1_IRQHandler+0x14>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f003 f962 	bl	8004f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c3c:	46c0      	nop			@ (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	200002f8 	.word	0x200002f8

08001c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <SystemInit+0x14>)
 8001c4e:	2280      	movs	r2, #128	@ 0x80
 8001c50:	0512      	lsls	r2, r2, #20
 8001c52:	609a      	str	r2, [r3, #8]
#endif
}
 8001c54:	46c0      	nop			@ (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c64:	f7ff fff0 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c6a:	e003      	b.n	8001c74 <LoopCopyDataInit>

08001c6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001c6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c72:	3104      	adds	r1, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <LoopForever+0xa>)
  ldr r3, =_edata
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <LoopForever+0xe>)
  adds r2, r0, r1
 8001c78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c7c:	d3f6      	bcc.n	8001c6c <CopyDataInit>
  ldr r2, =_sbss
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <LoopForever+0x12>)
  b LoopFillZerobss
 8001c80:	e002      	b.n	8001c88 <LoopFillZerobss>

08001c82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  str  r3, [r2]
 8001c84:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c86:	3204      	adds	r2, #4

08001c88 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <LoopForever+0x16>)
  cmp r2, r3
 8001c8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c8c:	d3f9      	bcc.n	8001c82 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001c8e:	f004 febb 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c92:	f7fe fbaf 	bl	80003f4 <main>

08001c96 <LoopForever>:

LoopForever:
    b LoopForever
 8001c96:	e7fe      	b.n	8001c96 <LoopForever>
  ldr   r0, =_estack
 8001c98:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001c9c:	08006d88 	.word	0x08006d88
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ca4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001ca8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001cac:	20000738 	.word	0x20000738

08001cb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC1_IRQHandler>

08001cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f000 f80e 	bl	8001ce0 <HAL_InitTick>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e001      	b.n	8001cd4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cd0:	f7ff fc4c 	bl	800156c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	781b      	ldrb	r3, [r3, #0]
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce8:	230f      	movs	r3, #15
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_InitTick+0x88>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02b      	beq.n	8001d50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <HAL_InitTick+0x8c>)
 8001cfa:	681c      	ldr	r4, [r3, #0]
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <HAL_InitTick+0x88>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	0019      	movs	r1, r3
 8001d02:	23fa      	movs	r3, #250	@ 0xfa
 8001d04:	0098      	lsls	r0, r3, #2
 8001d06:	f7fe f9ff 	bl	8000108 <__udivsi3>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	0020      	movs	r0, r4
 8001d10:	f7fe f9fa 	bl	8000108 <__udivsi3>
 8001d14:	0003      	movs	r3, r0
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 fdb7 	bl	800288a <HAL_SYSTICK_Config>
 8001d1c:	1e03      	subs	r3, r0, #0
 8001d1e:	d112      	bne.n	8001d46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d80a      	bhi.n	8001d3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 fd86 	bl	8002840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_InitTick+0x90>)
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e00d      	b.n	8001d58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e008      	b.n	8001d58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d46:	230f      	movs	r3, #15
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e003      	b.n	8001d58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d50:	230f      	movs	r3, #15
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b005      	add	sp, #20
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	2000006c 	.word	0x2000006c
 8001d6c:	20000064 	.word	0x20000064
 8001d70:	20000068 	.word	0x20000068

08001d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <HAL_IncTick+0x1c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_IncTick+0x20>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	18d2      	adds	r2, r2, r3
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <HAL_IncTick+0x20>)
 8001d86:	601a      	str	r2, [r3, #0]
}
 8001d88:	46c0      	nop			@ (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	2000006c 	.word	0x2000006c
 8001d94:	20000734 	.word	0x20000734

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	@ (8001da8 <HAL_GetTick+0x10>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	20000734 	.word	0x20000734

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	001a      	movs	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	189b      	adds	r3, r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	f7ff ffe0 	bl	8001d98 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	46c0      	nop			@ (mov r8, r8)
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	2000006c 	.word	0x2000006c

08001df4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e04:	401a      	ands	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	ff3fffff 	.word	0xff3fffff

08001e1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	23c0      	movs	r3, #192	@ 0xc0
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	4013      	ands	r3, r2
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	2104      	movs	r1, #4
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	2107      	movs	r1, #7
 8001e4e:	4091      	lsls	r1, r2
 8001e50:	000a      	movs	r2, r1
 8001e52:	43d2      	mvns	r2, r2
 8001e54:	401a      	ands	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2104      	movs	r1, #4
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4099      	lsls	r1, r3
 8001e60:	000b      	movs	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001e68:	46c0      	nop			@ (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	2104      	movs	r1, #4
 8001e82:	400a      	ands	r2, r1
 8001e84:	2107      	movs	r1, #7
 8001e86:	4091      	lsls	r1, r2
 8001e88:	000a      	movs	r2, r1
 8001e8a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2104      	movs	r1, #4
 8001e90:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e92:	40da      	lsrs	r2, r3
 8001e94:	0013      	movs	r3, r2
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	211f      	movs	r1, #31
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	4091      	lsls	r1, r2
 8001eb8:	000a      	movs	r2, r1
 8001eba:	43d2      	mvns	r2, r2
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0e9b      	lsrs	r3, r3, #26
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	4019      	ands	r1, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	201f      	movs	r0, #31
 8001eca:	4003      	ands	r3, r0
 8001ecc:	4099      	lsls	r1, r3
 8001ece:	000b      	movs	r3, r1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b004      	add	sp, #16
 8001edc:	bd80      	pop	{r7, pc}

08001ede <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	025b      	lsls	r3, r3, #9
 8001ef0:	0a5b      	lsrs	r3, r3, #9
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ef8:	46c0      	nop			@ (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b002      	add	sp, #8
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	0252      	lsls	r2, r2, #9
 8001f12:	0a52      	lsrs	r2, r2, #9
 8001f14:	43d2      	mvns	r2, r2
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	0212      	lsls	r2, r2, #8
 8001f38:	43d2      	mvns	r2, r2
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	400b      	ands	r3, r1
 8001f44:	4904      	ldr	r1, [pc, #16]	@ (8001f58 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001f46:	400b      	ands	r3, r1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	7fffff00 	.word	0x7fffff00

08001f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2280      	movs	r2, #128	@ 0x80
 8001f6e:	0552      	lsls	r2, r2, #21
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	6fffffe8 	.word	0x6fffffe8

08001f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	055b      	lsls	r3, r3, #21
 8001f94:	401a      	ands	r2, r3
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	055b      	lsls	r3, r3, #21
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}

08001fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <LL_ADC_IsEnabled+0x18>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <LL_ADC_IsEnabled+0x1a>
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d101      	bne.n	8001fe6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff8:	231f      	movs	r3, #31
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e17e      	b.n	8002314 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10a      	bne.n	8002034 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff fac7 	bl	80015b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2254      	movs	r2, #84	@ 0x54
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff ffa3 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 800203e:	1e03      	subs	r3, r0, #0
 8002040:	d114      	bne.n	800206c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff ff88 	bl	8001f5c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800204c:	4bb3      	ldr	r3, [pc, #716]	@ (800231c <HAL_ADC_Init+0x32c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	49b3      	ldr	r1, [pc, #716]	@ (8002320 <HAL_ADC_Init+0x330>)
 8002052:	0018      	movs	r0, r3
 8002054:	f7fe f858 	bl	8000108 <__udivsi3>
 8002058:	0003      	movs	r3, r0
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800205e:	e002      	b.n	8002066 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3b01      	subs	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f9      	bne.n	8002060 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0018      	movs	r0, r3
 8002072:	f7ff ff87 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d10f      	bne.n	800209a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	2210      	movs	r2, #16
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208a:	2201      	movs	r2, #1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002092:	231f      	movs	r3, #31
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0018      	movs	r0, r3
 80020a0:	f7ff ff95 	bl	8001fce <LL_ADC_REG_IsConversionOngoing>
 80020a4:	0003      	movs	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	2210      	movs	r2, #16
 80020ae:	4013      	ands	r3, r2
 80020b0:	d000      	beq.n	80020b4 <HAL_ADC_Init+0xc4>
 80020b2:	e122      	b.n	80022fa <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d000      	beq.n	80020bc <HAL_ADC_Init+0xcc>
 80020ba:	e11e      	b.n	80022fa <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	4a98      	ldr	r2, [pc, #608]	@ (8002324 <HAL_ADC_Init+0x334>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	2202      	movs	r2, #2
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ff6b 	bl	8001fac <LL_ADC_IsEnabled>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d000      	beq.n	80020dc <HAL_ADC_Init+0xec>
 80020da:	e0ad      	b.n	8002238 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7e1b      	ldrb	r3, [r3, #24]
 80020e4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80020e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e5b      	ldrb	r3, [r3, #25]
 80020ec:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e9b      	ldrb	r3, [r3, #26]
 80020f4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80020f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_ADC_Init+0x116>
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	015b      	lsls	r3, r3, #5
 8002104:	e000      	b.n	8002108 <HAL_ADC_Init+0x118>
 8002106:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002108:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800210e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	da04      	bge.n	8002122 <HAL_ADC_Init+0x132>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	e001      	b.n	8002126 <HAL_ADC_Init+0x136>
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002126:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	212c      	movs	r1, #44	@ 0x2c
 800212c:	5c5b      	ldrb	r3, [r3, r1]
 800212e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002130:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d115      	bne.n	800216e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7e9b      	ldrb	r3, [r3, #26]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2280      	movs	r2, #128	@ 0x80
 800214e:	0252      	lsls	r2, r2, #9
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e00b      	b.n	800216e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	2220      	movs	r2, #32
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002166:	2201      	movs	r2, #1
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800217a:	23e0      	movs	r3, #224	@ 0xe0
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002184:	4313      	orrs	r3, r2
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <HAL_ADC_Init+0x338>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	430a      	orrs	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0f9b      	lsrs	r3, r3, #30
 80021a8:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021ae:	4313      	orrs	r3, r2
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223c      	movs	r2, #60	@ 0x3c
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d111      	bne.n	80021e4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0f9b      	lsrs	r3, r3, #30
 80021c6:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021cc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80021d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80021d8:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	2201      	movs	r2, #1
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	4a50      	ldr	r2, [pc, #320]	@ (800232c <HAL_ADC_Init+0x33c>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	23c0      	movs	r3, #192	@ 0xc0
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	429a      	cmp	r2, r3
 8002204:	d018      	beq.n	8002238 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	05db      	lsls	r3, r3, #23
 800220e:	429a      	cmp	r2, r3
 8002210:	d012      	beq.n	8002238 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	429a      	cmp	r2, r3
 800221c:	d00c      	beq.n	8002238 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800221e:	4b44      	ldr	r3, [pc, #272]	@ (8002330 <HAL_ADC_Init+0x340>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a44      	ldr	r2, [pc, #272]	@ (8002334 <HAL_ADC_Init+0x344>)
 8002224:	4013      	ands	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	23f0      	movs	r3, #240	@ 0xf0
 800222e:	039b      	lsls	r3, r3, #14
 8002230:	401a      	ands	r2, r3
 8002232:	4b3f      	ldr	r3, [pc, #252]	@ (8002330 <HAL_ADC_Init+0x340>)
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002240:	001a      	movs	r2, r3
 8002242:	2100      	movs	r1, #0
 8002244:	f7ff fdf7 	bl	8001e36 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002250:	4939      	ldr	r1, [pc, #228]	@ (8002338 <HAL_ADC_Init+0x348>)
 8002252:	001a      	movs	r2, r3
 8002254:	f7ff fdef 	bl	8001e36 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2110      	movs	r1, #16
 800226c:	4249      	negs	r1, r1
 800226e:	430a      	orrs	r2, r1
 8002270:	629a      	str	r2, [r3, #40]	@ 0x28
 8002272:	e018      	b.n	80022a6 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	039b      	lsls	r3, r3, #14
 800227c:	429a      	cmp	r2, r3
 800227e:	d112      	bne.n	80022a6 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	3b01      	subs	r3, #1
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	221c      	movs	r2, #28
 8002290:	4013      	ands	r3, r2
 8002292:	2210      	movs	r2, #16
 8002294:	4252      	negs	r2, r2
 8002296:	409a      	lsls	r2, r3
 8002298:	0011      	movs	r1, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fddf 	bl	8001e70 <LL_ADC_GetSamplingTimeCommonChannels>
 80022b2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d10b      	bne.n	80022d4 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	2203      	movs	r2, #3
 80022c8:	4393      	bics	r3, r2
 80022ca:	2201      	movs	r2, #1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022d2:	e01c      	b.n	800230e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	2212      	movs	r2, #18
 80022da:	4393      	bics	r3, r2
 80022dc:	2210      	movs	r2, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	2201      	movs	r2, #1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80022f0:	231f      	movs	r3, #31
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022f8:	e009      	b.n	800230e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	2210      	movs	r2, #16
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002306:	231f      	movs	r3, #31
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800230e:	231f      	movs	r3, #31
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	781b      	ldrb	r3, [r3, #0]
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b008      	add	sp, #32
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000064 	.word	0x20000064
 8002320:	00030d40 	.word	0x00030d40
 8002324:	fffffefd 	.word	0xfffffefd
 8002328:	ffde0201 	.word	0xffde0201
 800232c:	1ffffc02 	.word	0x1ffffc02
 8002330:	40012708 	.word	0x40012708
 8002334:	ffc3ffff 	.word	0xffc3ffff
 8002338:	7fffff04 	.word	0x7fffff04

0800233c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002346:	2317      	movs	r3, #23
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2254      	movs	r2, #84	@ 0x54
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x24>
 800235c:	2302      	movs	r3, #2
 800235e:	e1be      	b.n	80026de <HAL_ADC_ConfigChannel+0x3a2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2254      	movs	r2, #84	@ 0x54
 8002364:	2101      	movs	r1, #1
 8002366:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff fe2e 	bl	8001fce <LL_ADC_REG_IsConversionOngoing>
 8002372:	1e03      	subs	r3, r0, #0
 8002374:	d000      	beq.n	8002378 <HAL_ADC_ConfigChannel+0x3c>
 8002376:	e1a1      	b.n	80026bc <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d100      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x46>
 8002380:	e152      	b.n	8002628 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	429a      	cmp	r2, r3
 800238c:	d004      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002392:	4ac2      	ldr	r2, [pc, #776]	@ (800269c <HAL_ADC_ConfigChannel+0x360>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d108      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0019      	movs	r1, r3
 80023a2:	0010      	movs	r0, r2
 80023a4:	f7ff fd9b 	bl	8001ede <LL_ADC_REG_SetSequencerChAdd>
 80023a8:	e0ed      	b.n	8002586 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	211f      	movs	r1, #31
 80023b4:	400b      	ands	r3, r1
 80023b6:	210f      	movs	r1, #15
 80023b8:	4099      	lsls	r1, r3
 80023ba:	000b      	movs	r3, r1
 80023bc:	43db      	mvns	r3, r3
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	0a5b      	lsrs	r3, r3, #9
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x9c>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	221f      	movs	r2, #31
 80023d4:	4013      	ands	r3, r2
 80023d6:	e0bc      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	4013      	ands	r3, r2
 80023e0:	d000      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0xa8>
 80023e2:	e0b5      	b.n	8002550 <HAL_ADC_ConfigChannel+0x214>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2202      	movs	r2, #2
 80023ea:	4013      	ands	r3, r2
 80023ec:	d000      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0xb4>
 80023ee:	e0ad      	b.n	800254c <HAL_ADC_ConfigChannel+0x210>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2204      	movs	r2, #4
 80023f6:	4013      	ands	r3, r2
 80023f8:	d000      	beq.n	80023fc <HAL_ADC_ConfigChannel+0xc0>
 80023fa:	e0a5      	b.n	8002548 <HAL_ADC_ConfigChannel+0x20c>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2208      	movs	r2, #8
 8002402:	4013      	ands	r3, r2
 8002404:	d000      	beq.n	8002408 <HAL_ADC_ConfigChannel+0xcc>
 8002406:	e09d      	b.n	8002544 <HAL_ADC_ConfigChannel+0x208>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2210      	movs	r2, #16
 800240e:	4013      	ands	r3, r2
 8002410:	d000      	beq.n	8002414 <HAL_ADC_ConfigChannel+0xd8>
 8002412:	e095      	b.n	8002540 <HAL_ADC_ConfigChannel+0x204>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2220      	movs	r2, #32
 800241a:	4013      	ands	r3, r2
 800241c:	d000      	beq.n	8002420 <HAL_ADC_ConfigChannel+0xe4>
 800241e:	e08d      	b.n	800253c <HAL_ADC_ConfigChannel+0x200>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2240      	movs	r2, #64	@ 0x40
 8002426:	4013      	ands	r3, r2
 8002428:	d000      	beq.n	800242c <HAL_ADC_ConfigChannel+0xf0>
 800242a:	e085      	b.n	8002538 <HAL_ADC_ConfigChannel+0x1fc>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2280      	movs	r2, #128	@ 0x80
 8002432:	4013      	ands	r3, r2
 8002434:	d000      	beq.n	8002438 <HAL_ADC_ConfigChannel+0xfc>
 8002436:	e07d      	b.n	8002534 <HAL_ADC_ConfigChannel+0x1f8>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4013      	ands	r3, r2
 8002442:	d000      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x10a>
 8002444:	e074      	b.n	8002530 <HAL_ADC_ConfigChannel+0x1f4>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d000      	beq.n	8002454 <HAL_ADC_ConfigChannel+0x118>
 8002452:	e06b      	b.n	800252c <HAL_ADC_ConfigChannel+0x1f0>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4013      	ands	r3, r2
 800245e:	d000      	beq.n	8002462 <HAL_ADC_ConfigChannel+0x126>
 8002460:	e062      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1ec>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4013      	ands	r3, r2
 800246c:	d000      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x134>
 800246e:	e059      	b.n	8002524 <HAL_ADC_ConfigChannel+0x1e8>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	4013      	ands	r3, r2
 800247a:	d151      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x1e4>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	4013      	ands	r3, r2
 8002486:	d149      	bne.n	800251c <HAL_ADC_ConfigChannel+0x1e0>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	01db      	lsls	r3, r3, #7
 8002490:	4013      	ands	r3, r2
 8002492:	d141      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1dc>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	4013      	ands	r3, r2
 800249e:	d139      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d8>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	4013      	ands	r3, r2
 80024aa:	d131      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1d4>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	029b      	lsls	r3, r3, #10
 80024b4:	4013      	ands	r3, r2
 80024b6:	d129      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1d0>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	02db      	lsls	r3, r3, #11
 80024c0:	4013      	ands	r3, r2
 80024c2:	d121      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1cc>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	031b      	lsls	r3, r3, #12
 80024cc:	4013      	ands	r3, r2
 80024ce:	d119      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1c8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	035b      	lsls	r3, r3, #13
 80024d8:	4013      	ands	r3, r2
 80024da:	d111      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x1c4>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	039b      	lsls	r3, r3, #14
 80024e4:	4013      	ands	r3, r2
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1c0>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	03db      	lsls	r3, r3, #15
 80024f0:	4013      	ands	r3, r2
 80024f2:	d001      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0x1bc>
 80024f4:	2316      	movs	r3, #22
 80024f6:	e02c      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 80024f8:	2300      	movs	r3, #0
 80024fa:	e02a      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 80024fc:	2315      	movs	r3, #21
 80024fe:	e028      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002500:	2314      	movs	r3, #20
 8002502:	e026      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002504:	2313      	movs	r3, #19
 8002506:	e024      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002508:	2312      	movs	r3, #18
 800250a:	e022      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 800250c:	2311      	movs	r3, #17
 800250e:	e020      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002510:	2310      	movs	r3, #16
 8002512:	e01e      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002514:	230f      	movs	r3, #15
 8002516:	e01c      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002518:	230e      	movs	r3, #14
 800251a:	e01a      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 800251c:	230d      	movs	r3, #13
 800251e:	e018      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002520:	230c      	movs	r3, #12
 8002522:	e016      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002524:	230b      	movs	r3, #11
 8002526:	e014      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002528:	230a      	movs	r3, #10
 800252a:	e012      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 800252c:	2309      	movs	r3, #9
 800252e:	e010      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002530:	2308      	movs	r3, #8
 8002532:	e00e      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002534:	2307      	movs	r3, #7
 8002536:	e00c      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002538:	2306      	movs	r3, #6
 800253a:	e00a      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 800253c:	2305      	movs	r3, #5
 800253e:	e008      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002540:	2304      	movs	r3, #4
 8002542:	e006      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002544:	2303      	movs	r3, #3
 8002546:	e004      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002548:	2302      	movs	r3, #2
 800254a:	e002      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_ADC_ConfigChannel+0x216>
 8002550:	2300      	movs	r3, #0
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6852      	ldr	r2, [r2, #4]
 8002556:	201f      	movs	r0, #31
 8002558:	4002      	ands	r2, r0
 800255a:	4093      	lsls	r3, r2
 800255c:	000a      	movs	r2, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	429a      	cmp	r2, r3
 8002572:	d808      	bhi.n	8002586 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	001a      	movs	r2, r3
 8002582:	f7ff fc8c 	bl	8001e9e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	001a      	movs	r2, r3
 8002594:	f7ff fcc6 	bl	8001f24 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db00      	blt.n	80025a2 <HAL_ADC_ConfigChannel+0x266>
 80025a0:	e096      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a2:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <HAL_ADC_ConfigChannel+0x364>)
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff fc39 	bl	8001e1c <LL_ADC_GetCommonPathInternalCh>
 80025aa:	0003      	movs	r3, r0
 80025ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a3c      	ldr	r2, [pc, #240]	@ (80026a4 <HAL_ADC_ConfigChannel+0x368>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d123      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	2380      	movs	r3, #128	@ 0x80
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025c0:	d11e      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	0412      	lsls	r2, r2, #16
 80025c8:	4313      	orrs	r3, r2
 80025ca:	4a35      	ldr	r2, [pc, #212]	@ (80026a0 <HAL_ADC_ConfigChannel+0x364>)
 80025cc:	0019      	movs	r1, r3
 80025ce:	0010      	movs	r0, r2
 80025d0:	f7ff fc10 	bl	8001df4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80025d4:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_ADC_ConfigChannel+0x36c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4934      	ldr	r1, [pc, #208]	@ (80026ac <HAL_ADC_ConfigChannel+0x370>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd94 	bl	8000108 <__udivsi3>
 80025e0:	0003      	movs	r3, r0
 80025e2:	001a      	movs	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	189b      	adds	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3301      	adds	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f9      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025fe:	e067      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2a      	ldr	r2, [pc, #168]	@ (80026b0 <HAL_ADC_ConfigChannel+0x374>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d162      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	03db      	lsls	r3, r3, #15
 8002610:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002612:	d15d      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2280      	movs	r2, #128	@ 0x80
 8002618:	03d2      	lsls	r2, r2, #15
 800261a:	4313      	orrs	r3, r2
 800261c:	4a20      	ldr	r2, [pc, #128]	@ (80026a0 <HAL_ADC_ConfigChannel+0x364>)
 800261e:	0019      	movs	r1, r3
 8002620:	0010      	movs	r0, r2
 8002622:	f7ff fbe7 	bl	8001df4 <LL_ADC_SetCommonPathInternalCh>
 8002626:	e053      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	061b      	lsls	r3, r3, #24
 8002630:	429a      	cmp	r2, r3
 8002632:	d004      	beq.n	800263e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002638:	4a18      	ldr	r2, [pc, #96]	@ (800269c <HAL_ADC_ConfigChannel+0x360>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d107      	bne.n	800264e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0019      	movs	r1, r3
 8002648:	0010      	movs	r0, r2
 800264a:	f7ff fc59 	bl	8001f00 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	da3c      	bge.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_ADC_ConfigChannel+0x364>)
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff fbdf 	bl	8001e1c <LL_ADC_GetCommonPathInternalCh>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_ADC_ConfigChannel+0x368>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d108      	bne.n	800267e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4a11      	ldr	r2, [pc, #68]	@ (80026b4 <HAL_ADC_ConfigChannel+0x378>)
 8002670:	4013      	ands	r3, r2
 8002672:	4a0b      	ldr	r2, [pc, #44]	@ (80026a0 <HAL_ADC_ConfigChannel+0x364>)
 8002674:	0019      	movs	r1, r3
 8002676:	0010      	movs	r0, r2
 8002678:	f7ff fbbc 	bl	8001df4 <LL_ADC_SetCommonPathInternalCh>
 800267c:	e028      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0b      	ldr	r2, [pc, #44]	@ (80026b0 <HAL_ADC_ConfigChannel+0x374>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d123      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4a0b      	ldr	r2, [pc, #44]	@ (80026b8 <HAL_ADC_ConfigChannel+0x37c>)
 800268c:	4013      	ands	r3, r2
 800268e:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_ADC_ConfigChannel+0x364>)
 8002690:	0019      	movs	r1, r3
 8002692:	0010      	movs	r0, r2
 8002694:	f7ff fbae 	bl	8001df4 <LL_ADC_SetCommonPathInternalCh>
 8002698:	e01a      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x394>
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	80000004 	.word	0x80000004
 80026a0:	40012708 	.word	0x40012708
 80026a4:	a4000200 	.word	0xa4000200
 80026a8:	20000064 	.word	0x20000064
 80026ac:	00030d40 	.word	0x00030d40
 80026b0:	a8000400 	.word	0xa8000400
 80026b4:	ff7fffff 	.word	0xff7fffff
 80026b8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	2220      	movs	r2, #32
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026c8:	2317      	movs	r3, #23
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2254      	movs	r2, #84	@ 0x54
 80026d4:	2100      	movs	r1, #0
 80026d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80026d8:	2317      	movs	r3, #23
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b006      	add	sp, #24
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			@ (mov r8, r8)

080026e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	0002      	movs	r2, r0
 80026f0:	1dfb      	adds	r3, r7, #7
 80026f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	1dfb      	adds	r3, r7, #7
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80026fa:	d809      	bhi.n	8002710 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fc:	1dfb      	adds	r3, r7, #7
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	001a      	movs	r2, r3
 8002702:	231f      	movs	r3, #31
 8002704:	401a      	ands	r2, r3
 8002706:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <__NVIC_EnableIRQ+0x30>)
 8002708:	2101      	movs	r1, #1
 800270a:	4091      	lsls	r1, r2
 800270c:	000a      	movs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	0002      	movs	r2, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800272a:	1dfb      	adds	r3, r7, #7
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002730:	d828      	bhi.n	8002784 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002732:	4a2f      	ldr	r2, [pc, #188]	@ (80027f0 <__NVIC_SetPriority+0xd4>)
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b25b      	sxtb	r3, r3
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	33c0      	adds	r3, #192	@ 0xc0
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	589b      	ldr	r3, [r3, r2]
 8002742:	1dfa      	adds	r2, r7, #7
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	0011      	movs	r1, r2
 8002748:	2203      	movs	r2, #3
 800274a:	400a      	ands	r2, r1
 800274c:	00d2      	lsls	r2, r2, #3
 800274e:	21ff      	movs	r1, #255	@ 0xff
 8002750:	4091      	lsls	r1, r2
 8002752:	000a      	movs	r2, r1
 8002754:	43d2      	mvns	r2, r2
 8002756:	401a      	ands	r2, r3
 8002758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	22ff      	movs	r2, #255	@ 0xff
 8002760:	401a      	ands	r2, r3
 8002762:	1dfb      	adds	r3, r7, #7
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	0018      	movs	r0, r3
 8002768:	2303      	movs	r3, #3
 800276a:	4003      	ands	r3, r0
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002770:	481f      	ldr	r0, [pc, #124]	@ (80027f0 <__NVIC_SetPriority+0xd4>)
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b25b      	sxtb	r3, r3
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	430a      	orrs	r2, r1
 800277c:	33c0      	adds	r3, #192	@ 0xc0
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002782:	e031      	b.n	80027e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002784:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <__NVIC_SetPriority+0xd8>)
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	0019      	movs	r1, r3
 800278c:	230f      	movs	r3, #15
 800278e:	400b      	ands	r3, r1
 8002790:	3b08      	subs	r3, #8
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3306      	adds	r3, #6
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	18d3      	adds	r3, r2, r3
 800279a:	3304      	adds	r3, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1dfa      	adds	r2, r7, #7
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	0011      	movs	r1, r2
 80027a4:	2203      	movs	r2, #3
 80027a6:	400a      	ands	r2, r1
 80027a8:	00d2      	lsls	r2, r2, #3
 80027aa:	21ff      	movs	r1, #255	@ 0xff
 80027ac:	4091      	lsls	r1, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	43d2      	mvns	r2, r2
 80027b2:	401a      	ands	r2, r3
 80027b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	22ff      	movs	r2, #255	@ 0xff
 80027bc:	401a      	ands	r2, r3
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	2303      	movs	r3, #3
 80027c6:	4003      	ands	r3, r0
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027cc:	4809      	ldr	r0, [pc, #36]	@ (80027f4 <__NVIC_SetPriority+0xd8>)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	001c      	movs	r4, r3
 80027d4:	230f      	movs	r3, #15
 80027d6:	4023      	ands	r3, r4
 80027d8:	3b08      	subs	r3, #8
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	430a      	orrs	r2, r1
 80027de:	3306      	adds	r3, #6
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	18c3      	adds	r3, r0, r3
 80027e4:	3304      	adds	r3, #4
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b003      	add	sp, #12
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	045b      	lsls	r3, r3, #17
 8002808:	429a      	cmp	r2, r3
 800280a:	d301      	bcc.n	8002810 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280c:	2301      	movs	r3, #1
 800280e:	e010      	b.n	8002832 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002810:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <SysTick_Config+0x44>)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	3a01      	subs	r2, #1
 8002816:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002818:	2301      	movs	r3, #1
 800281a:	425b      	negs	r3, r3
 800281c:	2103      	movs	r1, #3
 800281e:	0018      	movs	r0, r3
 8002820:	f7ff ff7c 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <SysTick_Config+0x44>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <SysTick_Config+0x44>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	210f      	movs	r1, #15
 800284c:	187b      	adds	r3, r7, r1
 800284e:	1c02      	adds	r2, r0, #0
 8002850:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	187b      	adds	r3, r7, r1
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b25b      	sxtb	r3, r3
 800285a:	0011      	movs	r1, r2
 800285c:	0018      	movs	r0, r3
 800285e:	f7ff ff5d 	bl	800271c <__NVIC_SetPriority>
}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	0002      	movs	r2, r0
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b25b      	sxtb	r3, r3
 800287c:	0018      	movs	r0, r3
 800287e:	f7ff ff33 	bl	80026e8 <__NVIC_EnableIRQ>
}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff ffaf 	bl	80027f8 <SysTick_Config>
 800289a:	0003      	movs	r3, r0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b002      	add	sp, #8
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e077      	b.n	80029a6 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3d      	ldr	r2, [pc, #244]	@ (80029b0 <HAL_DMA_Init+0x10c>)
 80028bc:	4694      	mov	ip, r2
 80028be:	4463      	add	r3, ip
 80028c0:	2114      	movs	r1, #20
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fd fc20 	bl	8000108 <__udivsi3>
 80028c8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80028ca:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2225      	movs	r2, #37	@ 0x25
 80028d4:	2102      	movs	r1, #2
 80028d6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4934      	ldr	r1, [pc, #208]	@ (80029b4 <HAL_DMA_Init+0x110>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 fa9f 	bl	8002e64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	01db      	lsls	r3, r3, #7
 800292e:	429a      	cmp	r2, r3
 8002930:	d102      	bne.n	8002938 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	21ff      	movs	r1, #255	@ 0xff
 8002942:	400a      	ands	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800294e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d011      	beq.n	800297c <HAL_DMA_Init+0xd8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d80d      	bhi.n	800297c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	0018      	movs	r0, r3
 8002964:	f000 faaa 	bl	8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	e008      	b.n	800298e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2225      	movs	r2, #37	@ 0x25
 8002998:	2101      	movs	r1, #1
 800299a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	@ 0x24
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	bffdfff8 	.word	0xbffdfff8
 80029b4:	ffff800f 	.word	0xffff800f

080029b8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2317      	movs	r3, #23
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2224      	movs	r2, #36	@ 0x24
 80029d2:	5c9b      	ldrb	r3, [r3, r2]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_DMA_Start_IT+0x24>
 80029d8:	2302      	movs	r3, #2
 80029da:	e070      	b.n	8002abe <HAL_DMA_Start_IT+0x106>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2224      	movs	r2, #36	@ 0x24
 80029e0:	2101      	movs	r1, #1
 80029e2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2225      	movs	r2, #37	@ 0x25
 80029e8:	5c9b      	ldrb	r3, [r3, r2]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d157      	bne.n	8002aa0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2225      	movs	r2, #37	@ 0x25
 80029f4:	2102      	movs	r1, #2
 80029f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	438a      	bics	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f9e5 	bl	8002de4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	210e      	movs	r1, #14
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e00f      	b.n	8002a54 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2104      	movs	r1, #4
 8002a40:	438a      	bics	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	210a      	movs	r1, #10
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	025b      	lsls	r3, r3, #9
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d008      	beq.n	8002a74 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	2180      	movs	r1, #128	@ 0x80
 8002a6e:	0049      	lsls	r1, r1, #1
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a86:	2180      	movs	r1, #128	@ 0x80
 8002a88:	0049      	lsls	r1, r1, #1
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e007      	b.n	8002ab0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2224      	movs	r2, #36	@ 0x24
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aa8:	2317      	movs	r3, #23
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2202      	movs	r2, #2
 8002aae:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2224      	movs	r2, #36	@ 0x24
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ab8:	2317      	movs	r3, #23
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b006      	add	sp, #24
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e050      	b.n	8002b7c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2225      	movs	r2, #37	@ 0x25
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d008      	beq.n	8002af8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2224      	movs	r2, #36	@ 0x24
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e041      	b.n	8002b7c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	210e      	movs	r1, #14
 8002b04:	438a      	bics	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	491c      	ldr	r1, [pc, #112]	@ (8002b84 <HAL_DMA_Abort+0xbc>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2101      	movs	r1, #1
 8002b24:	438a      	bics	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <HAL_DMA_Abort+0xc0>)
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	221c      	movs	r2, #28
 8002b32:	4013      	ands	r3, r2
 8002b34:	2201      	movs	r2, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <HAL_DMA_Abort+0xc0>)
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b46:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00c      	beq.n	8002b6a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5a:	490a      	ldr	r1, [pc, #40]	@ (8002b84 <HAL_DMA_Abort+0xbc>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002b68:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2225      	movs	r2, #37	@ 0x25
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2224      	movs	r2, #36	@ 0x24
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	fffffeff 	.word	0xfffffeff
 8002b88:	40020000 	.word	0x40020000

08002b8c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	@ 0x24
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	@ 0x24
 8002ba8:	5c9b      	ldrb	r3, [r3, r2]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Abort_IT+0x26>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e05e      	b.n	8002c70 <HAL_DMA_Abort_IT+0xe4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2224      	movs	r2, #36	@ 0x24
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2225      	movs	r2, #37	@ 0x25
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002bcc:	230f      	movs	r3, #15
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e049      	b.n	8002c6a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	210e      	movs	r1, #14
 8002be2:	438a      	bics	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c00:	491d      	ldr	r1, [pc, #116]	@ (8002c78 <HAL_DMA_Abort_IT+0xec>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002c06:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <HAL_DMA_Abort_IT+0xf0>)
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	221c      	movs	r2, #28
 8002c10:	4013      	ands	r3, r2
 8002c12:	2201      	movs	r2, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_DMA_Abort_IT+0xf0>)
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c38:	490f      	ldr	r1, [pc, #60]	@ (8002c78 <HAL_DMA_Abort_IT+0xec>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002c46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2225      	movs	r2, #37	@ 0x25
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2224      	movs	r2, #36	@ 0x24
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	0010      	movs	r0, r2
 8002c68:	4798      	blx	r3
    }
  }
  return status;
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b004      	add	sp, #16
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	fffffeff 	.word	0xfffffeff
 8002c7c:	40020000 	.word	0x40020000

08002c80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002c88:	4b55      	ldr	r3, [pc, #340]	@ (8002de0 <HAL_DMA_IRQHandler+0x160>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	221c      	movs	r2, #28
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d027      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x7a>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2204      	movs	r2, #4
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d023      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d107      	bne.n	8002cce <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2104      	movs	r1, #4
 8002cca:	438a      	bics	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002cce:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <HAL_DMA_IRQHandler+0x160>)
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	221c      	movs	r2, #28
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2204      	movs	r2, #4
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <HAL_DMA_IRQHandler+0x160>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d100      	bne.n	8002cee <HAL_DMA_IRQHandler+0x6e>
 8002cec:	e073      	b.n	8002dd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cf8:	e06d      	b.n	8002dd6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	221c      	movs	r2, #28
 8002d00:	4013      	ands	r3, r2
 8002d02:	2202      	movs	r2, #2
 8002d04:	409a      	lsls	r2, r3
 8002d06:	0013      	movs	r3, r2
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d02e      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xec>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2202      	movs	r2, #2
 8002d12:	4013      	ands	r3, r2
 8002d14:	d02a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d10b      	bne.n	8002d3a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	210a      	movs	r1, #10
 8002d2e:	438a      	bics	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2225      	movs	r2, #37	@ 0x25
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002d3a:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <HAL_DMA_IRQHandler+0x160>)
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	221c      	movs	r2, #28
 8002d44:	4013      	ands	r3, r2
 8002d46:	2202      	movs	r2, #2
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <HAL_DMA_IRQHandler+0x160>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	@ 0x24
 8002d54:	2100      	movs	r1, #0
 8002d56:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d03a      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	0010      	movs	r0, r2
 8002d68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d6a:	e034      	b.n	8002dd6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	221c      	movs	r2, #28
 8002d72:	4013      	ands	r3, r2
 8002d74:	2208      	movs	r2, #8
 8002d76:	409a      	lsls	r2, r3
 8002d78:	0013      	movs	r3, r2
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d02b      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x158>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2208      	movs	r2, #8
 8002d84:	4013      	ands	r3, r2
 8002d86:	d027      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	210e      	movs	r1, #14
 8002d94:	438a      	bics	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <HAL_DMA_IRQHandler+0x160>)
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	221c      	movs	r2, #28
 8002da2:	4013      	ands	r3, r2
 8002da4:	2201      	movs	r2, #1
 8002da6:	409a      	lsls	r2, r3
 8002da8:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <HAL_DMA_IRQHandler+0x160>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2225      	movs	r2, #37	@ 0x25
 8002db8:	2101      	movs	r1, #1
 8002dba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	@ 0x24
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	0010      	movs	r0, r2
 8002dd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	46c0      	nop			@ (mov r8, r8)
}
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40020000 	.word	0x40020000

08002de4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dfa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <DMA_SetConfig+0x7c>)
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	221c      	movs	r2, #28
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <DMA_SetConfig+0x7c>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d108      	bne.n	8002e46 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e44:	e007      	b.n	8002e56 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	60da      	str	r2, [r3, #12]
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	40020000 	.word	0x40020000

08002e64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	001a      	movs	r2, r3
 8002e72:	23ff      	movs	r3, #255	@ 0xff
 8002e74:	4013      	ands	r3, r2
 8002e76:	3b08      	subs	r3, #8
 8002e78:	2114      	movs	r1, #20
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7fd f944 	bl	8000108 <__udivsi3>
 8002e80:	0003      	movs	r3, r0
 8002e82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002e8c:	4694      	mov	ip, r2
 8002e8e:	4463      	add	r3, ip
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	001a      	movs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a07      	ldr	r2, [pc, #28]	@ (8002eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002e9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	221c      	movs	r2, #28
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	10008200 	.word	0x10008200
 8002eb8:	40020880 	.word	0x40020880

08002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	22ff      	movs	r2, #255	@ 0xff
 8002eca:	4013      	ands	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ed2:	4694      	mov	ip, r2
 8002ed4:	4463      	add	r3, ip
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	001a      	movs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	@ (8002f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ee2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	4013      	ands	r3, r2
 8002eec:	2201      	movs	r2, #1
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b004      	add	sp, #16
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	1000823f 	.word	0x1000823f
 8002f00:	40020940 	.word	0x40020940

08002f04 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f12:	e153      	b.n	80031bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4091      	lsls	r1, r2
 8002f1e:	000a      	movs	r2, r1
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d100      	bne.n	8002f2c <HAL_GPIO_Init+0x28>
 8002f2a:	e144      	b.n	80031b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x38>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b12      	cmp	r3, #18
 8002f3a:	d125      	bne.n	8002f88 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	08da      	lsrs	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3208      	adds	r2, #8
 8002f44:	0092      	lsls	r2, r2, #2
 8002f46:	58d3      	ldr	r3, [r2, r3]
 8002f48:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	4013      	ands	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	409a      	lsls	r2, r3
 8002f56:	0013      	movs	r3, r2
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	220f      	movs	r2, #15
 8002f66:	401a      	ands	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2107      	movs	r1, #7
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	409a      	lsls	r2, r3
 8002f72:	0013      	movs	r3, r2
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	409a      	lsls	r2, r3
 8002f96:	0013      	movs	r3, r2
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	409a      	lsls	r2, r3
 8002fae:	0013      	movs	r3, r2
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d00b      	beq.n	8002fdc <HAL_GPIO_Init+0xd8>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d007      	beq.n	8002fdc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fd0:	2b11      	cmp	r3, #17
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b12      	cmp	r3, #18
 8002fda:	d130      	bne.n	800303e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	0013      	movs	r3, r2
 8002fec:	43da      	mvns	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	0013      	movs	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003012:	2201      	movs	r2, #1
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	409a      	lsls	r2, r3
 8003018:	0013      	movs	r3, r2
 800301a:	43da      	mvns	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4013      	ands	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	2201      	movs	r2, #1
 800302a:	401a      	ands	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	409a      	lsls	r2, r3
 8003030:	0013      	movs	r3, r2
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d017      	beq.n	8003076 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	409a      	lsls	r2, r3
 8003054:	0013      	movs	r3, r2
 8003056:	43da      	mvns	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	4013      	ands	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	0013      	movs	r3, r2
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	055b      	lsls	r3, r3, #21
 800307e:	4013      	ands	r3, r2
 8003080:	d100      	bne.n	8003084 <HAL_GPIO_Init+0x180>
 8003082:	e098      	b.n	80031b6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003084:	4a53      	ldr	r2, [pc, #332]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3318      	adds	r3, #24
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	589b      	ldr	r3, [r3, r2]
 8003090:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2203      	movs	r2, #3
 8003096:	4013      	ands	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	220f      	movs	r2, #15
 800309c:	409a      	lsls	r2, r3
 800309e:	0013      	movs	r3, r2
 80030a0:	43da      	mvns	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	4013      	ands	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	23a0      	movs	r3, #160	@ 0xa0
 80030ac:	05db      	lsls	r3, r3, #23
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d019      	beq.n	80030e6 <HAL_GPIO_Init+0x1e2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a48      	ldr	r2, [pc, #288]	@ (80031d8 <HAL_GPIO_Init+0x2d4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0x1de>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a47      	ldr	r2, [pc, #284]	@ (80031dc <HAL_GPIO_Init+0x2d8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00d      	beq.n	80030de <HAL_GPIO_Init+0x1da>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a46      	ldr	r2, [pc, #280]	@ (80031e0 <HAL_GPIO_Init+0x2dc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <HAL_GPIO_Init+0x1d6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a45      	ldr	r2, [pc, #276]	@ (80031e4 <HAL_GPIO_Init+0x2e0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_GPIO_Init+0x1d2>
 80030d2:	2305      	movs	r3, #5
 80030d4:	e008      	b.n	80030e8 <HAL_GPIO_Init+0x1e4>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x1e4>
 80030da:	2303      	movs	r3, #3
 80030dc:	e004      	b.n	80030e8 <HAL_GPIO_Init+0x1e4>
 80030de:	2302      	movs	r3, #2
 80030e0:	e002      	b.n	80030e8 <HAL_GPIO_Init+0x1e4>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x1e4>
 80030e6:	2300      	movs	r3, #0
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	2103      	movs	r1, #3
 80030ec:	400a      	ands	r2, r1
 80030ee:	00d2      	lsls	r2, r2, #3
 80030f0:	4093      	lsls	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80030f8:	4936      	ldr	r1, [pc, #216]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3318      	adds	r3, #24
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003106:	4a33      	ldr	r2, [pc, #204]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	58d3      	ldr	r3, [r2, r3]
 800310c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43da      	mvns	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	025b      	lsls	r3, r3, #9
 8003120:	4013      	ands	r3, r2
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800312c:	4929      	ldr	r1, [pc, #164]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 800312e:	2280      	movs	r2, #128	@ 0x80
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003134:	4a27      	ldr	r2, [pc, #156]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003136:	2384      	movs	r3, #132	@ 0x84
 8003138:	58d3      	ldr	r3, [r2, r3]
 800313a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43da      	mvns	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	4013      	ands	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	4013      	ands	r3, r2
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800315a:	491e      	ldr	r1, [pc, #120]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 800315c:	2284      	movs	r2, #132	@ 0x84
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003162:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43da      	mvns	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4013      	ands	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	035b      	lsls	r3, r3, #13
 800317a:	4013      	ands	r3, r2
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003186:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43da      	mvns	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	4013      	ands	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	039b      	lsls	r3, r3, #14
 80031a4:	4013      	ands	r3, r2
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <HAL_GPIO_Init+0x2d0>)
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	3301      	adds	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	40da      	lsrs	r2, r3
 80031c4:	1e13      	subs	r3, r2, #0
 80031c6:	d000      	beq.n	80031ca <HAL_GPIO_Init+0x2c6>
 80031c8:	e6a4      	b.n	8002f14 <HAL_GPIO_Init+0x10>
  }
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b006      	add	sp, #24
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021800 	.word	0x40021800
 80031d8:	50000400 	.word	0x50000400
 80031dc:	50000800 	.word	0x50000800
 80031e0:	50000c00 	.word	0x50000c00
 80031e4:	50001400 	.word	0x50001400

080031e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	0008      	movs	r0, r1
 80031f2:	0011      	movs	r1, r2
 80031f4:	1cbb      	adds	r3, r7, #2
 80031f6:	1c02      	adds	r2, r0, #0
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	1c7b      	adds	r3, r7, #1
 80031fc:	1c0a      	adds	r2, r1, #0
 80031fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003200:	1c7b      	adds	r3, r7, #1
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003208:	1cbb      	adds	r3, r7, #2
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003210:	e003      	b.n	800321a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003212:	1cbb      	adds	r3, r7, #2
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e08f      	b.n	8003356 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2241      	movs	r2, #65	@ 0x41
 800323a:	5c9b      	ldrb	r3, [r3, r2]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2240      	movs	r2, #64	@ 0x40
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f7fe fa3d 	bl	80016cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2241      	movs	r2, #65	@ 0x41
 8003256:	2124      	movs	r1, #36	@ 0x24
 8003258:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	438a      	bics	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	493b      	ldr	r1, [pc, #236]	@ (8003360 <HAL_I2C_Init+0x13c>)
 8003274:	400a      	ands	r2, r1
 8003276:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4938      	ldr	r1, [pc, #224]	@ (8003364 <HAL_I2C_Init+0x140>)
 8003284:	400a      	ands	r2, r1
 8003286:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2180      	movs	r1, #128	@ 0x80
 800329a:	0209      	lsls	r1, r1, #8
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	e007      	b.n	80032b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2184      	movs	r1, #132	@ 0x84
 80032ac:	0209      	lsls	r1, r1, #8
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d109      	bne.n	80032ce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	0109      	lsls	r1, r1, #4
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	e007      	b.n	80032de <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4923      	ldr	r1, [pc, #140]	@ (8003368 <HAL_I2C_Init+0x144>)
 80032da:	400a      	ands	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4920      	ldr	r1, [pc, #128]	@ (800336c <HAL_I2C_Init+0x148>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	491a      	ldr	r1, [pc, #104]	@ (8003364 <HAL_I2C_Init+0x140>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	431a      	orrs	r2, r3
 8003308:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69d9      	ldr	r1, [r3, #28]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2101      	movs	r1, #1
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2241      	movs	r2, #65	@ 0x41
 8003342:	2120      	movs	r1, #32
 8003344:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2242      	movs	r2, #66	@ 0x42
 8003350:	2100      	movs	r1, #0
 8003352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	f0ffffff 	.word	0xf0ffffff
 8003364:	ffff7fff 	.word	0xffff7fff
 8003368:	fffff7ff 	.word	0xfffff7ff
 800336c:	02008000 	.word	0x02008000

08003370 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2241      	movs	r2, #65	@ 0x41
 800337e:	5c9b      	ldrb	r3, [r3, r2]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	d138      	bne.n	80033f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2240      	movs	r2, #64	@ 0x40
 800338a:	5c9b      	ldrb	r3, [r3, r2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003390:	2302      	movs	r3, #2
 8003392:	e032      	b.n	80033fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2240      	movs	r2, #64	@ 0x40
 8003398:	2101      	movs	r1, #1
 800339a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2241      	movs	r2, #65	@ 0x41
 80033a0:	2124      	movs	r1, #36	@ 0x24
 80033a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2101      	movs	r1, #1
 80033b0:	438a      	bics	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4911      	ldr	r1, [pc, #68]	@ (8003404 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2241      	movs	r2, #65	@ 0x41
 80033e8:	2120      	movs	r1, #32
 80033ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2240      	movs	r2, #64	@ 0x40
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	ffffefff 	.word	0xffffefff

08003408 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2241      	movs	r2, #65	@ 0x41
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b20      	cmp	r3, #32
 800341c:	d139      	bne.n	8003492 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2240      	movs	r2, #64	@ 0x40
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003428:	2302      	movs	r3, #2
 800342a:	e033      	b.n	8003494 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2240      	movs	r2, #64	@ 0x40
 8003430:	2101      	movs	r1, #1
 8003432:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2241      	movs	r2, #65	@ 0x41
 8003438:	2124      	movs	r1, #36	@ 0x24
 800343a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2101      	movs	r1, #1
 8003448:	438a      	bics	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a11      	ldr	r2, [pc, #68]	@ (800349c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003458:	4013      	ands	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2101      	movs	r1, #1
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2241      	movs	r2, #65	@ 0x41
 8003482:	2120      	movs	r1, #32
 8003484:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2240      	movs	r2, #64	@ 0x40
 800348a:	2100      	movs	r1, #0
 800348c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fffff0ff 	.word	0xfffff0ff

080034a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e20f      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4013      	ands	r3, r2
 80034ba:	d100      	bne.n	80034be <HAL_RCC_OscConfig+0x1e>
 80034bc:	e069      	b.n	8003592 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034be:	4bc8      	ldr	r3, [pc, #800]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2238      	movs	r2, #56	@ 0x38
 80034c4:	4013      	ands	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d105      	bne.n	80034da <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d15d      	bne.n	8003592 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1fb      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	025b      	lsls	r3, r3, #9
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_OscConfig+0x56>
 80034e6:	4bbe      	ldr	r3, [pc, #760]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4bbd      	ldr	r3, [pc, #756]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80034ec:	2180      	movs	r1, #128	@ 0x80
 80034ee:	0249      	lsls	r1, r1, #9
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e020      	b.n	8003538 <HAL_RCC_OscConfig+0x98>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	23a0      	movs	r3, #160	@ 0xa0
 80034fc:	02db      	lsls	r3, r3, #11
 80034fe:	429a      	cmp	r2, r3
 8003500:	d10e      	bne.n	8003520 <HAL_RCC_OscConfig+0x80>
 8003502:	4bb7      	ldr	r3, [pc, #732]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4bb6      	ldr	r3, [pc, #728]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003508:	2180      	movs	r1, #128	@ 0x80
 800350a:	02c9      	lsls	r1, r1, #11
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	4bb3      	ldr	r3, [pc, #716]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4bb2      	ldr	r3, [pc, #712]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003516:	2180      	movs	r1, #128	@ 0x80
 8003518:	0249      	lsls	r1, r1, #9
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0x98>
 8003520:	4baf      	ldr	r3, [pc, #700]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4bae      	ldr	r3, [pc, #696]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003526:	49af      	ldr	r1, [pc, #700]	@ (80037e4 <HAL_RCC_OscConfig+0x344>)
 8003528:	400a      	ands	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4bac      	ldr	r3, [pc, #688]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4bab      	ldr	r3, [pc, #684]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003532:	49ad      	ldr	r1, [pc, #692]	@ (80037e8 <HAL_RCC_OscConfig+0x348>)
 8003534:	400a      	ands	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d014      	beq.n	800356a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe fc2a 	bl	8001d98 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800354a:	f7fe fc25 	bl	8001d98 <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	@ 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1ba      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355c:	4ba0      	ldr	r3, [pc, #640]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	4013      	ands	r3, r2
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0xaa>
 8003568:	e013      	b.n	8003592 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fc15 	bl	8001d98 <HAL_GetTick>
 800356e:	0003      	movs	r3, r0
 8003570:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003574:	f7fe fc10 	bl	8001d98 <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	@ 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1a5      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003586:	4b96      	ldr	r3, [pc, #600]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	029b      	lsls	r3, r3, #10
 800358e:	4013      	ands	r3, r2
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2202      	movs	r2, #2
 8003598:	4013      	ands	r3, r2
 800359a:	d100      	bne.n	800359e <HAL_RCC_OscConfig+0xfe>
 800359c:	e086      	b.n	80036ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359e:	4b90      	ldr	r3, [pc, #576]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2238      	movs	r2, #56	@ 0x38
 80035a4:	4013      	ands	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d12f      	bne.n	800360e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e18b      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4b89      	ldr	r3, [pc, #548]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a8b      	ldr	r2, [pc, #556]	@ (80037ec <HAL_RCC_OscConfig+0x34c>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	4b85      	ldr	r3, [pc, #532]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035d6:	4b82      	ldr	r3, [pc, #520]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a85      	ldr	r2, [pc, #532]	@ (80037f0 <HAL_RCC_OscConfig+0x350>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b7e      	ldr	r3, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80035ea:	4b7d      	ldr	r3, [pc, #500]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	2207      	movs	r2, #7
 80035f2:	4013      	ands	r3, r2
 80035f4:	4a7f      	ldr	r2, [pc, #508]	@ (80037f4 <HAL_RCC_OscConfig+0x354>)
 80035f6:	40da      	lsrs	r2, r3
 80035f8:	4b7f      	ldr	r3, [pc, #508]	@ (80037f8 <HAL_RCC_OscConfig+0x358>)
 80035fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035fc:	4b7f      	ldr	r3, [pc, #508]	@ (80037fc <HAL_RCC_OscConfig+0x35c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0018      	movs	r0, r3
 8003602:	f7fe fb6d 	bl	8001ce0 <HAL_InitTick>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d050      	beq.n	80036ac <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e161      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d030      	beq.n	8003678 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003616:	4b72      	ldr	r3, [pc, #456]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a75      	ldr	r2, [pc, #468]	@ (80037f0 <HAL_RCC_OscConfig+0x350>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	4b6e      	ldr	r3, [pc, #440]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800362a:	4b6d      	ldr	r3, [pc, #436]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b6c      	ldr	r3, [pc, #432]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003630:	2180      	movs	r1, #128	@ 0x80
 8003632:	0049      	lsls	r1, r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fbae 	bl	8001d98 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003642:	f7fe fba9 	bl	8001d98 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e13e      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	4b62      	ldr	r3, [pc, #392]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4013      	ands	r3, r2
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b5f      	ldr	r3, [pc, #380]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a61      	ldr	r2, [pc, #388]	@ (80037ec <HAL_RCC_OscConfig+0x34c>)
 8003666:	4013      	ands	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	4b5b      	ldr	r3, [pc, #364]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e019      	b.n	80036ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003678:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b58      	ldr	r3, [pc, #352]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800367e:	4960      	ldr	r1, [pc, #384]	@ (8003800 <HAL_RCC_OscConfig+0x360>)
 8003680:	400a      	ands	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe fb88 	bl	8001d98 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800368e:	f7fe fb83 	bl	8001d98 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e118      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a0:	4b4f      	ldr	r3, [pc, #316]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4013      	ands	r3, r2
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	4013      	ands	r3, r2
 80036b4:	d042      	beq.n	800373c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80036b6:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2238      	movs	r2, #56	@ 0x38
 80036bc:	4013      	ands	r3, r2
 80036be:	2b18      	cmp	r3, #24
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d138      	bne.n	800373c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e101      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d019      	beq.n	800370a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80036d6:	4b42      	ldr	r3, [pc, #264]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80036d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80036dc:	2101      	movs	r1, #1
 80036de:	430a      	orrs	r2, r1
 80036e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe fb59 	bl	8001d98 <HAL_GetTick>
 80036e6:	0003      	movs	r3, r0
 80036e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80036ec:	f7fe fb54 	bl	8001d98 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0e9      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80036fe:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003702:	2202      	movs	r2, #2
 8003704:	4013      	ands	r3, r2
 8003706:	d0f1      	beq.n	80036ec <HAL_RCC_OscConfig+0x24c>
 8003708:	e018      	b.n	800373c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800370a:	4b35      	ldr	r3, [pc, #212]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800370c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800370e:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003710:	2101      	movs	r1, #1
 8003712:	438a      	bics	r2, r1
 8003714:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe fb3f 	bl	8001d98 <HAL_GetTick>
 800371a:	0003      	movs	r3, r0
 800371c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003720:	f7fe fb3a 	bl	8001d98 <HAL_GetTick>
 8003724:	0002      	movs	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0cf      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003732:	4b2b      	ldr	r3, [pc, #172]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	2202      	movs	r2, #2
 8003738:	4013      	ands	r3, r2
 800373a:	d1f1      	bne.n	8003720 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2204      	movs	r2, #4
 8003742:	4013      	ands	r3, r2
 8003744:	d100      	bne.n	8003748 <HAL_RCC_OscConfig+0x2a8>
 8003746:	e084      	b.n	8003852 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003748:	230f      	movs	r3, #15
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003750:	4b23      	ldr	r3, [pc, #140]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2238      	movs	r2, #56	@ 0x38
 8003756:	4013      	ands	r3, r2
 8003758:	2b20      	cmp	r3, #32
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d000      	beq.n	8003766 <HAL_RCC_OscConfig+0x2c6>
 8003764:	e075      	b.n	8003852 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0b3      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d106      	bne.n	8003780 <HAL_RCC_OscConfig+0x2e0>
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003774:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003776:	4b1a      	ldr	r3, [pc, #104]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003778:	2101      	movs	r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800377e:	e01c      	b.n	80037ba <HAL_RCC_OscConfig+0x31a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x302>
 8003788:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800378a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800378e:	2104      	movs	r1, #4
 8003790:	430a      	orrs	r2, r1
 8003792:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003794:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 8003796:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 800379a:	2101      	movs	r1, #1
 800379c:	430a      	orrs	r2, r1
 800379e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037a0:	e00b      	b.n	80037ba <HAL_RCC_OscConfig+0x31a>
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80037a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037a6:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	438a      	bics	r2, r1
 80037ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037ae:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80037b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_RCC_OscConfig+0x340>)
 80037b4:	2104      	movs	r1, #4
 80037b6:	438a      	bics	r2, r1
 80037b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d028      	beq.n	8003814 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe fae9 	bl	8001d98 <HAL_GetTick>
 80037c6:	0003      	movs	r3, r0
 80037c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80037ca:	e01d      	b.n	8003808 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fe fae4 	bl	8001d98 <HAL_GetTick>
 80037d0:	0002      	movs	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003804 <HAL_RCC_OscConfig+0x364>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d915      	bls.n	8003808 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e078      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	fffeffff 	.word	0xfffeffff
 80037e8:	fffbffff 	.word	0xfffbffff
 80037ec:	ffff80ff 	.word	0xffff80ff
 80037f0:	ffffc7ff 	.word	0xffffc7ff
 80037f4:	02dc6c00 	.word	0x02dc6c00
 80037f8:	20000064 	.word	0x20000064
 80037fc:	20000068 	.word	0x20000068
 8003800:	fffffeff 	.word	0xfffffeff
 8003804:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003808:	4b34      	ldr	r3, [pc, #208]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	2202      	movs	r2, #2
 800380e:	4013      	ands	r3, r2
 8003810:	d0dc      	beq.n	80037cc <HAL_RCC_OscConfig+0x32c>
 8003812:	e013      	b.n	800383c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fac0 	bl	8001d98 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800381c:	e009      	b.n	8003832 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fabb 	bl	8001d98 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	4a2d      	ldr	r2, [pc, #180]	@ (80038e0 <HAL_RCC_OscConfig+0x440>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04f      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003832:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 8003834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003836:	2202      	movs	r2, #2
 8003838:	4013      	ands	r3, r2
 800383a:	d1f0      	bne.n	800381e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800383c:	230f      	movs	r3, #15
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003846:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 8003848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800384a:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 800384c:	4925      	ldr	r1, [pc, #148]	@ (80038e4 <HAL_RCC_OscConfig+0x444>)
 800384e:	400a      	ands	r2, r1
 8003850:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2210      	movs	r2, #16
 8003858:	4013      	ands	r3, r2
 800385a:	d039      	beq.n	80038d0 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003864:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b1c      	ldr	r3, [pc, #112]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 800386a:	2180      	movs	r1, #128	@ 0x80
 800386c:	03c9      	lsls	r1, r1, #15
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe fa91 	bl	8001d98 <HAL_GetTick>
 8003876:	0003      	movs	r3, r0
 8003878:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387c:	f7fe fa8c 	bl	8001d98 <HAL_GetTick>
 8003880:	0002      	movs	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e021      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800388e:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	041b      	lsls	r3, r3, #16
 8003896:	4013      	ands	r3, r2
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x3dc>
 800389a:	e019      	b.n	80038d0 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800389c:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 80038a2:	4911      	ldr	r1, [pc, #68]	@ (80038e8 <HAL_RCC_OscConfig+0x448>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fe fa76 	bl	8001d98 <HAL_GetTick>
 80038ac:	0003      	movs	r3, r0
 80038ae:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b2:	f7fe fa71 	bl	8001d98 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <HAL_RCC_OscConfig+0x43c>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	041b      	lsls	r3, r3, #16
 80038cc:	4013      	ands	r3, r2
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b006      	add	sp, #24
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	40021000 	.word	0x40021000
 80038e0:	00001388 	.word	0x00001388
 80038e4:	efffffff 	.word	0xefffffff
 80038e8:	ffbfffff 	.word	0xffbfffff

080038ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0f6      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b7d      	ldr	r3, [pc, #500]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2207      	movs	r2, #7
 8003906:	4013      	ands	r3, r2
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d91e      	bls.n	800394c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b7a      	ldr	r3, [pc, #488]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2207      	movs	r2, #7
 8003914:	4393      	bics	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	4b77      	ldr	r3, [pc, #476]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003920:	f7fe fa3a 	bl	8001d98 <HAL_GetTick>
 8003924:	0003      	movs	r3, r0
 8003926:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003928:	e009      	b.n	800393e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800392a:	f7fe fa35 	bl	8001d98 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	4a71      	ldr	r2, [pc, #452]	@ (8003afc <HAL_RCC_ClockConfig+0x210>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e0d7      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800393e:	4b6e      	ldr	r3, [pc, #440]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2207      	movs	r2, #7
 8003944:	4013      	ands	r3, r2
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d1ee      	bne.n	800392a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	4013      	ands	r3, r2
 8003954:	d017      	beq.n	8003986 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003960:	4b67      	ldr	r3, [pc, #412]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a67      	ldr	r2, [pc, #412]	@ (8003b04 <HAL_RCC_ClockConfig+0x218>)
 8003966:	401a      	ands	r2, r3
 8003968:	4b65      	ldr	r3, [pc, #404]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 800396a:	21b0      	movs	r1, #176	@ 0xb0
 800396c:	0109      	lsls	r1, r1, #4
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003972:	4b63      	ldr	r3, [pc, #396]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4a64      	ldr	r2, [pc, #400]	@ (8003b08 <HAL_RCC_ClockConfig+0x21c>)
 8003978:	4013      	ands	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	4b5f      	ldr	r3, [pc, #380]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	4013      	ands	r3, r2
 800398e:	d100      	bne.n	8003992 <HAL_RCC_ClockConfig+0xa6>
 8003990:	e061      	b.n	8003a56 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003992:	4b5b      	ldr	r3, [pc, #364]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	221c      	movs	r2, #28
 8003998:	4393      	bics	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b57      	ldr	r3, [pc, #348]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	4b54      	ldr	r3, [pc, #336]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2380      	movs	r3, #128	@ 0x80
 80039b4:	029b      	lsls	r3, r3, #10
 80039b6:	4013      	ands	r3, r2
 80039b8:	d12b      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e097      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	2380      	movs	r3, #128	@ 0x80
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4013      	ands	r3, r2
 80039d0:	d11f      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08b      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80039de:	4b48      	ldr	r3, [pc, #288]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	2380      	movs	r3, #128	@ 0x80
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	4013      	ands	r3, r2
 80039e8:	d113      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e07f      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d106      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80039f6:	4b42      	ldr	r3, [pc, #264]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 80039f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fa:	2202      	movs	r2, #2
 80039fc:	4013      	ands	r3, r2
 80039fe:	d108      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e074      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003a04:	4b3e      	ldr	r3, [pc, #248]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	2202      	movs	r2, #2
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06d      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b3b      	ldr	r3, [pc, #236]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2207      	movs	r2, #7
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4b37      	ldr	r3, [pc, #220]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003a22:	430a      	orrs	r2, r1
 8003a24:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a26:	f7fe f9b7 	bl	8001d98 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	e009      	b.n	8003a44 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a30:	f7fe f9b2 	bl	8001d98 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	4a30      	ldr	r2, [pc, #192]	@ (8003afc <HAL_RCC_ClockConfig+0x210>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e054      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a44:	4b2e      	ldr	r3, [pc, #184]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2238      	movs	r2, #56	@ 0x38
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d1ec      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a56:	4b28      	ldr	r3, [pc, #160]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d21e      	bcs.n	8003aa2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a64:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2207      	movs	r2, #7
 8003a6a:	4393      	bics	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	4b22      	ldr	r3, [pc, #136]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a76:	f7fe f98f 	bl	8001d98 <HAL_GetTick>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a7e:	e009      	b.n	8003a94 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe f98a 	bl	8001d98 <HAL_GetTick>
 8003a84:	0002      	movs	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003afc <HAL_RCC_ClockConfig+0x210>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e02c      	b.n	8003aee <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a94:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <HAL_RCC_ClockConfig+0x20c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2207      	movs	r2, #7
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d1ee      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b14      	ldr	r3, [pc, #80]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <HAL_RCC_ClockConfig+0x220>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	4b11      	ldr	r3, [pc, #68]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003ac0:	f000 f82c 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003ac4:	0001      	movs	r1, r0
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <HAL_RCC_ClockConfig+0x214>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	220f      	movs	r2, #15
 8003ace:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <HAL_RCC_ClockConfig+0x224>)
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ad6:	221f      	movs	r2, #31
 8003ad8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003ada:	000a      	movs	r2, r1
 8003adc:	40da      	lsrs	r2, r3
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <HAL_RCC_ClockConfig+0x228>)
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <HAL_RCC_ClockConfig+0x22c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7fe f8fa 	bl	8001ce0 <HAL_InitTick>
 8003aec:	0003      	movs	r3, r0
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b004      	add	sp, #16
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	40022000 	.word	0x40022000
 8003afc:	00001388 	.word	0x00001388
 8003b00:	40021000 	.word	0x40021000
 8003b04:	ffff84ff 	.word	0xffff84ff
 8003b08:	fffff0ff 	.word	0xfffff0ff
 8003b0c:	ffff8fff 	.word	0xffff8fff
 8003b10:	08006ca4 	.word	0x08006ca4
 8003b14:	20000064 	.word	0x20000064
 8003b18:	20000068 	.word	0x20000068

08003b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8003b22:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	2207      	movs	r2, #7
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b30:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2238      	movs	r2, #56	@ 0x38
 8003b36:	4013      	ands	r3, r2
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b3a:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0adb      	lsrs	r3, r3, #11
 8003b40:	2207      	movs	r2, #7
 8003b42:	4013      	ands	r3, r2
 8003b44:	2201      	movs	r2, #1
 8003b46:	409a      	lsls	r2, r3
 8003b48:	0013      	movs	r3, r2
 8003b4a:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	481d      	ldr	r0, [pc, #116]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003b50:	f7fc fada 	bl	8000108 <__udivsi3>
 8003b54:	0003      	movs	r3, r0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e027      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b5a:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2238      	movs	r2, #56	@ 0x38
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d102      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b66:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e01e      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003b6c:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2238      	movs	r2, #56	@ 0x38
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d103      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003b80:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2238      	movs	r2, #56	@ 0x38
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b18      	cmp	r3, #24
 8003b8a:	d103      	bne.n	8003b94 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003b8c:	23fa      	movs	r3, #250	@ 0xfa
 8003b8e:	01db      	lsls	r3, r3, #7
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2238      	movs	r2, #56	@ 0x38
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8003ba0:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e001      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7fc faab 	bl	8000108 <__udivsi3>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b004      	add	sp, #16
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	02dc6c00 	.word	0x02dc6c00
 8003bc8:	007a1200 	.word	0x007a1200

08003bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003bd0:	f7ff ffa4 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003bd4:	0001      	movs	r1, r0
 8003bd6:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <HAL_RCC_GetHCLKFreq+0x30>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	220f      	movs	r2, #15
 8003bde:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003be0:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <HAL_RCC_GetHCLKFreq+0x34>)
 8003be2:	0092      	lsls	r2, r2, #2
 8003be4:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003be6:	221f      	movs	r2, #31
 8003be8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003bea:	000a      	movs	r2, r1
 8003bec:	40da      	lsrs	r2, r3
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetHCLKFreq+0x38>)
 8003bf0:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003bf2:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <HAL_RCC_GetHCLKFreq+0x38>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
}
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	08006ca4 	.word	0x08006ca4
 8003c04:	20000064 	.word	0x20000064

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003c0c:	f7ff ffde 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003c10:	0001      	movs	r1, r0
 8003c12:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0b1b      	lsrs	r3, r3, #12
 8003c18:	2207      	movs	r2, #7
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003c1e:	0092      	lsls	r2, r2, #2
 8003c20:	58d3      	ldr	r3, [r2, r3]
 8003c22:	221f      	movs	r2, #31
 8003c24:	4013      	ands	r3, r2
 8003c26:	40d9      	lsrs	r1, r3
 8003c28:	000b      	movs	r3, r1
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08006ce4 	.word	0x08006ce4

08003c38 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c40:	2313      	movs	r3, #19
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c48:	2312      	movs	r3, #18
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2240      	movs	r2, #64	@ 0x40
 8003c56:	4013      	ands	r3, r2
 8003c58:	d100      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003c5a:	e079      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c5c:	2011      	movs	r0, #17
 8003c5e:	183b      	adds	r3, r7, r0
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c64:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	055b      	lsls	r3, r3, #21
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d110      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4b67      	ldr	r3, [pc, #412]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c74:	4b66      	ldr	r3, [pc, #408]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c76:	2180      	movs	r1, #128	@ 0x80
 8003c78:	0549      	lsls	r1, r1, #21
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c7e:	4b64      	ldr	r3, [pc, #400]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	055b      	lsls	r3, r3, #21
 8003c86:	4013      	ands	r3, r2
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8c:	183b      	adds	r3, r7, r0
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003c92:	4b5f      	ldr	r3, [pc, #380]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c96:	23c0      	movs	r3, #192	@ 0xc0
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d019      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d014      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003cae:	4b58      	ldr	r3, [pc, #352]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	4a58      	ldr	r2, [pc, #352]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cb8:	4b55      	ldr	r3, [pc, #340]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cbc:	4b54      	ldr	r3, [pc, #336]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cbe:	2180      	movs	r1, #128	@ 0x80
 8003cc0:	0249      	lsls	r1, r1, #9
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc6:	4b52      	ldr	r3, [pc, #328]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cca:	4b51      	ldr	r3, [pc, #324]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ccc:	4952      	ldr	r1, [pc, #328]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cce:	400a      	ands	r2, r1
 8003cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d016      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe f85a 	bl	8001d98 <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003ce8:	e00c      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fe f855 	bl	8001d98 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	4a49      	ldr	r2, [pc, #292]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d904      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003cfa:	2313      	movs	r3, #19
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2203      	movs	r2, #3
 8003d00:	701a      	strb	r2, [r3, #0]
          break;
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003d04:	4b42      	ldr	r3, [pc, #264]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d08:	2202      	movs	r2, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d0ed      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003d0e:	2313      	movs	r3, #19
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d18:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	4b3a      	ldr	r3, [pc, #232]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d2c:	e005      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	2312      	movs	r3, #18
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	2213      	movs	r2, #19
 8003d34:	18ba      	adds	r2, r7, r2
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d3a:	2311      	movs	r3, #17
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d44:	4b32      	ldr	r3, [pc, #200]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d48:	4b31      	ldr	r3, [pc, #196]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d4a:	4935      	ldr	r1, [pc, #212]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2201      	movs	r2, #1
 8003d56:	4013      	ands	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5e:	2203      	movs	r2, #3
 8003d60:	4393      	bics	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b29      	ldr	r3, [pc, #164]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2202      	movs	r2, #2
 8003d74:	4013      	ands	r3, r2
 8003d76:	d009      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d78:	4b25      	ldr	r3, [pc, #148]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	4a29      	ldr	r2, [pc, #164]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	4b22      	ldr	r3, [pc, #136]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2220      	movs	r2, #32
 8003d92:	4013      	ands	r3, r2
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d96:	4b1e      	ldr	r3, [pc, #120]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	0899      	lsrs	r1, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003da4:	430a      	orrs	r2, r1
 8003da6:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2208      	movs	r2, #8
 8003dae:	4013      	ands	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db2:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	0019      	movs	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	4b13      	ldr	r3, [pc, #76]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	4a15      	ldr	r2, [pc, #84]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003de0:	430a      	orrs	r2, r1
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	4013      	ands	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003dee:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	22e0      	movs	r2, #224	@ 0xe0
 8003df4:	4393      	bics	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003e02:	2312      	movs	r3, #18
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	781b      	ldrb	r3, [r3, #0]
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b006      	add	sp, #24
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	fffffcff 	.word	0xfffffcff
 8003e18:	fffeffff 	.word	0xfffeffff
 8003e1c:	00001388 	.word	0x00001388
 8003e20:	efffffff 	.word	0xefffffff
 8003e24:	ffffcfff 	.word	0xffffcfff
 8003e28:	ffffefff 	.word	0xffffefff
 8003e2c:	ffff3fff 	.word	0xffff3fff

08003e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0a8      	b.n	8003f94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	2382      	movs	r3, #130	@ 0x82
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d009      	beq.n	8003e6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	61da      	str	r2, [r3, #28]
 8003e5c:	e005      	b.n	8003e6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	225d      	movs	r2, #93	@ 0x5d
 8003e74:	5c9b      	ldrb	r3, [r3, r2]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	225c      	movs	r2, #92	@ 0x5c
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fd fcae 	bl	80017e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	225d      	movs	r2, #93	@ 0x5d
 8003e90:	2102      	movs	r1, #2
 8003e92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2140      	movs	r1, #64	@ 0x40
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	23e0      	movs	r3, #224	@ 0xe0
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d902      	bls.n	8003eb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e002      	b.n	8003ebc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	015b      	lsls	r3, r3, #5
 8003eba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	23f0      	movs	r3, #240	@ 0xf0
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d008      	beq.n	8003eda <HAL_SPI_Init+0xaa>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	23e0      	movs	r3, #224	@ 0xe0
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	2382      	movs	r3, #130	@ 0x82
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6899      	ldr	r1, [r3, #8]
 8003ee8:	2384      	movs	r3, #132	@ 0x84
 8003eea:	021b      	lsls	r3, r3, #8
 8003eec:	400b      	ands	r3, r1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	400b      	ands	r3, r1
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2101      	movs	r1, #1
 8003f00:	400b      	ands	r3, r1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6999      	ldr	r1, [r3, #24]
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2138      	movs	r1, #56	@ 0x38
 8003f16:	400b      	ands	r3, r1
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	2180      	movs	r1, #128	@ 0x80
 8003f20:	400b      	ands	r3, r1
 8003f22:	431a      	orrs	r2, r3
 8003f24:	0011      	movs	r1, r2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f2a:	2380      	movs	r3, #128	@ 0x80
 8003f2c:	019b      	lsls	r3, r3, #6
 8003f2e:	401a      	ands	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	2204      	movs	r2, #4
 8003f40:	401a      	ands	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	2110      	movs	r1, #16
 8003f48:	400b      	ands	r3, r1
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	2108      	movs	r1, #8
 8003f52:	400b      	ands	r3, r1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68d9      	ldr	r1, [r3, #12]
 8003f5a:	23f0      	movs	r3, #240	@ 0xf0
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	400b      	ands	r3, r1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	0011      	movs	r1, r2
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	015b      	lsls	r3, r3, #5
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4907      	ldr	r1, [pc, #28]	@ (8003f9c <HAL_SPI_Init+0x16c>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	225d      	movs	r2, #93	@ 0x5d
 8003f8e:	2101      	movs	r1, #1
 8003f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b004      	add	sp, #16
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	fffff7ff 	.word	0xfffff7ff

08003fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e04a      	b.n	8004048 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	223d      	movs	r2, #61	@ 0x3d
 8003fb6:	5c9b      	ldrb	r3, [r3, r2]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	223c      	movs	r2, #60	@ 0x3c
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7fd fcb3 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	223d      	movs	r2, #61	@ 0x3d
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	0019      	movs	r1, r3
 8003fe0:	0010      	movs	r0, r2
 8003fe2:	f000 f98d 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2248      	movs	r2, #72	@ 0x48
 8003fea:	2101      	movs	r1, #1
 8003fec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	223e      	movs	r2, #62	@ 0x3e
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	223f      	movs	r2, #63	@ 0x3f
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	5499      	strb	r1, [r3, r2]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2240      	movs	r2, #64	@ 0x40
 8004002:	2101      	movs	r1, #1
 8004004:	5499      	strb	r1, [r3, r2]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2241      	movs	r2, #65	@ 0x41
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2242      	movs	r2, #66	@ 0x42
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2243      	movs	r2, #67	@ 0x43
 800401a:	2101      	movs	r1, #1
 800401c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2244      	movs	r2, #68	@ 0x44
 8004022:	2101      	movs	r1, #1
 8004024:	5499      	strb	r1, [r3, r2]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2245      	movs	r2, #69	@ 0x45
 800402a:	2101      	movs	r1, #1
 800402c:	5499      	strb	r1, [r3, r2]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2246      	movs	r2, #70	@ 0x46
 8004032:	2101      	movs	r1, #1
 8004034:	5499      	strb	r1, [r3, r2]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2247      	movs	r2, #71	@ 0x47
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	223d      	movs	r2, #61	@ 0x3d
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	0018      	movs	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	b002      	add	sp, #8
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e04a      	b.n	80040f8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	223d      	movs	r2, #61	@ 0x3d
 8004066:	5c9b      	ldrb	r3, [r3, r2]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	223c      	movs	r2, #60	@ 0x3c
 8004072:	2100      	movs	r1, #0
 8004074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7fd fc3b 	bl	80018f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	223d      	movs	r2, #61	@ 0x3d
 8004082:	2102      	movs	r1, #2
 8004084:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	0019      	movs	r1, r3
 8004090:	0010      	movs	r0, r2
 8004092:	f000 f935 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2248      	movs	r2, #72	@ 0x48
 800409a:	2101      	movs	r1, #1
 800409c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	223e      	movs	r2, #62	@ 0x3e
 80040a2:	2101      	movs	r1, #1
 80040a4:	5499      	strb	r1, [r3, r2]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	223f      	movs	r2, #63	@ 0x3f
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2240      	movs	r2, #64	@ 0x40
 80040b2:	2101      	movs	r1, #1
 80040b4:	5499      	strb	r1, [r3, r2]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2241      	movs	r2, #65	@ 0x41
 80040ba:	2101      	movs	r1, #1
 80040bc:	5499      	strb	r1, [r3, r2]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2242      	movs	r2, #66	@ 0x42
 80040c2:	2101      	movs	r1, #1
 80040c4:	5499      	strb	r1, [r3, r2]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2243      	movs	r2, #67	@ 0x43
 80040ca:	2101      	movs	r1, #1
 80040cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2244      	movs	r2, #68	@ 0x44
 80040d2:	2101      	movs	r1, #1
 80040d4:	5499      	strb	r1, [r3, r2]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2245      	movs	r2, #69	@ 0x45
 80040da:	2101      	movs	r1, #1
 80040dc:	5499      	strb	r1, [r3, r2]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2246      	movs	r2, #70	@ 0x46
 80040e2:	2101      	movs	r1, #1
 80040e4:	5499      	strb	r1, [r3, r2]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2247      	movs	r2, #71	@ 0x47
 80040ea:	2101      	movs	r1, #1
 80040ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223d      	movs	r2, #61	@ 0x3d
 80040f2:	2101      	movs	r1, #1
 80040f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800410c:	2317      	movs	r3, #23
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	223c      	movs	r2, #60	@ 0x3c
 8004118:	5c9b      	ldrb	r3, [r3, r2]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_TIM_PWM_ConfigChannel+0x22>
 800411e:	2302      	movs	r3, #2
 8004120:	e0e5      	b.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	223c      	movs	r2, #60	@ 0x3c
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b14      	cmp	r3, #20
 800412e:	d900      	bls.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004130:	e0d1      	b.n	80042d6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	009a      	lsls	r2, r3, #2
 8004136:	4b70      	ldr	r3, [pc, #448]	@ (80042f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	0011      	movs	r1, r2
 8004146:	0018      	movs	r0, r3
 8004148:	f000 f95e 	bl	8004408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2108      	movs	r1, #8
 8004158:	430a      	orrs	r2, r1
 800415a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2104      	movs	r1, #4
 8004168:	438a      	bics	r2, r1
 800416a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
      break;
 800417e:	e0af      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f000 f9bd 	bl	8004508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	0109      	lsls	r1, r1, #4
 800419c:	430a      	orrs	r2, r1
 800419e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4954      	ldr	r1, [pc, #336]	@ (80042fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041ac:	400a      	ands	r2, r1
 80041ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6999      	ldr	r1, [r3, #24]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	619a      	str	r2, [r3, #24]
      break;
 80041c4:	e08c      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0011      	movs	r1, r2
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 fa18 	bl	8004604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2108      	movs	r1, #8
 80041e0:	430a      	orrs	r2, r1
 80041e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2104      	movs	r1, #4
 80041f0:	438a      	bics	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69d9      	ldr	r1, [r3, #28]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	61da      	str	r2, [r3, #28]
      break;
 8004206:	e06b      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	0011      	movs	r1, r2
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fa79 	bl	8004708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2180      	movs	r1, #128	@ 0x80
 8004222:	0109      	lsls	r1, r1, #4
 8004224:	430a      	orrs	r2, r1
 8004226:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4932      	ldr	r1, [pc, #200]	@ (80042fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004234:	400a      	ands	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69d9      	ldr	r1, [r3, #28]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	61da      	str	r2, [r3, #28]
      break;
 800424c:	e048      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	0011      	movs	r1, r2
 8004256:	0018      	movs	r0, r3
 8004258:	f000 faba 	bl	80047d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2108      	movs	r1, #8
 8004268:	430a      	orrs	r2, r1
 800426a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2104      	movs	r1, #4
 8004278:	438a      	bics	r2, r1
 800427a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800428e:	e027      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f000 faf3 	bl	8004884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2180      	movs	r1, #128	@ 0x80
 80042aa:	0109      	lsls	r1, r1, #4
 80042ac:	430a      	orrs	r2, r1
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4910      	ldr	r1, [pc, #64]	@ (80042fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042bc:	400a      	ands	r2, r1
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	021a      	lsls	r2, r3, #8
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042d4:	e004      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80042d6:	2317      	movs	r3, #23
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
      break;
 80042de:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	223c      	movs	r2, #60	@ 0x3c
 80042e4:	2100      	movs	r1, #0
 80042e6:	5499      	strb	r1, [r3, r2]

  return status;
 80042e8:	2317      	movs	r3, #23
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	781b      	ldrb	r3, [r3, #0]
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b006      	add	sp, #24
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	08006d04 	.word	0x08006d04
 80042fc:	fffffbff 	.word	0xfffffbff

08004300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a37      	ldr	r2, [pc, #220]	@ (80043f0 <TIM_Base_SetConfig+0xf0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d008      	beq.n	800432a <TIM_Base_SetConfig+0x2a>
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	05db      	lsls	r3, r3, #23
 800431e:	429a      	cmp	r2, r3
 8004320:	d003      	beq.n	800432a <TIM_Base_SetConfig+0x2a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a33      	ldr	r2, [pc, #204]	@ (80043f4 <TIM_Base_SetConfig+0xf4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2270      	movs	r2, #112	@ 0x70
 800432e:	4393      	bics	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a2c      	ldr	r2, [pc, #176]	@ (80043f0 <TIM_Base_SetConfig+0xf0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d014      	beq.n	800436e <TIM_Base_SetConfig+0x6e>
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	2380      	movs	r3, #128	@ 0x80
 8004348:	05db      	lsls	r3, r3, #23
 800434a:	429a      	cmp	r2, r3
 800434c:	d00f      	beq.n	800436e <TIM_Base_SetConfig+0x6e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a28      	ldr	r2, [pc, #160]	@ (80043f4 <TIM_Base_SetConfig+0xf4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00b      	beq.n	800436e <TIM_Base_SetConfig+0x6e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a27      	ldr	r2, [pc, #156]	@ (80043f8 <TIM_Base_SetConfig+0xf8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d007      	beq.n	800436e <TIM_Base_SetConfig+0x6e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a26      	ldr	r2, [pc, #152]	@ (80043fc <TIM_Base_SetConfig+0xfc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <TIM_Base_SetConfig+0x6e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a25      	ldr	r2, [pc, #148]	@ (8004400 <TIM_Base_SetConfig+0x100>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d108      	bne.n	8004380 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a24      	ldr	r2, [pc, #144]	@ (8004404 <TIM_Base_SetConfig+0x104>)
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	4393      	bics	r3, r2
 8004386:	001a      	movs	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a11      	ldr	r2, [pc, #68]	@ (80043f0 <TIM_Base_SetConfig+0xf0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0xbe>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a12      	ldr	r2, [pc, #72]	@ (80043fc <TIM_Base_SetConfig+0xfc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0xbe>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a11      	ldr	r2, [pc, #68]	@ (8004400 <TIM_Base_SetConfig+0x100>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d103      	bne.n	80043c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2201      	movs	r2, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2201      	movs	r2, #1
 80043de:	4393      	bics	r3, r2
 80043e0:	001a      	movs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	611a      	str	r2, [r3, #16]
  }
}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40002000 	.word	0x40002000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800
 8004404:	fffffcff 	.word	0xfffffcff

08004408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	2201      	movs	r2, #1
 800441e:	4393      	bics	r3, r2
 8004420:	001a      	movs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a2e      	ldr	r2, [pc, #184]	@ (80044f0 <TIM_OC1_SetConfig+0xe8>)
 8004436:	4013      	ands	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2203      	movs	r2, #3
 800443e:	4393      	bics	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2202      	movs	r2, #2
 8004450:	4393      	bics	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a24      	ldr	r2, [pc, #144]	@ (80044f4 <TIM_OC1_SetConfig+0xec>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_OC1_SetConfig+0x6e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a23      	ldr	r2, [pc, #140]	@ (80044f8 <TIM_OC1_SetConfig+0xf0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_OC1_SetConfig+0x6e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a22      	ldr	r2, [pc, #136]	@ (80044fc <TIM_OC1_SetConfig+0xf4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10c      	bne.n	8004490 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2208      	movs	r2, #8
 800447a:	4393      	bics	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2204      	movs	r2, #4
 800448c:	4393      	bics	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <TIM_OC1_SetConfig+0xec>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_OC1_SetConfig+0xa0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a17      	ldr	r2, [pc, #92]	@ (80044f8 <TIM_OC1_SetConfig+0xf0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_OC1_SetConfig+0xa0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <TIM_OC1_SetConfig+0xf4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d111      	bne.n	80044cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <TIM_OC1_SetConfig+0xf8>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <TIM_OC1_SetConfig+0xfc>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b006      	add	sp, #24
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	fffeff8f 	.word	0xfffeff8f
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800
 8004500:	fffffeff 	.word	0xfffffeff
 8004504:	fffffdff 	.word	0xfffffdff

08004508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	2210      	movs	r2, #16
 800451e:	4393      	bics	r3, r2
 8004520:	001a      	movs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a2c      	ldr	r2, [pc, #176]	@ (80045e8 <TIM_OC2_SetConfig+0xe0>)
 8004536:	4013      	ands	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a2b      	ldr	r2, [pc, #172]	@ (80045ec <TIM_OC2_SetConfig+0xe4>)
 800453e:	4013      	ands	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2220      	movs	r2, #32
 8004552:	4393      	bics	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a22      	ldr	r2, [pc, #136]	@ (80045f0 <TIM_OC2_SetConfig+0xe8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10d      	bne.n	8004586 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2280      	movs	r2, #128	@ 0x80
 800456e:	4393      	bics	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2240      	movs	r2, #64	@ 0x40
 8004582:	4393      	bics	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a19      	ldr	r2, [pc, #100]	@ (80045f0 <TIM_OC2_SetConfig+0xe8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d007      	beq.n	800459e <TIM_OC2_SetConfig+0x96>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a18      	ldr	r2, [pc, #96]	@ (80045f4 <TIM_OC2_SetConfig+0xec>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_OC2_SetConfig+0x96>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <TIM_OC2_SetConfig+0xf0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d113      	bne.n	80045c6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4a16      	ldr	r2, [pc, #88]	@ (80045fc <TIM_OC2_SetConfig+0xf4>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4a15      	ldr	r2, [pc, #84]	@ (8004600 <TIM_OC2_SetConfig+0xf8>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	46c0      	nop			@ (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b006      	add	sp, #24
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	feff8fff 	.word	0xfeff8fff
 80045ec:	fffffcff 	.word	0xfffffcff
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800
 80045fc:	fffffbff 	.word	0xfffffbff
 8004600:	fffff7ff 	.word	0xfffff7ff

08004604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4a31      	ldr	r2, [pc, #196]	@ (80046e0 <TIM_OC3_SetConfig+0xdc>)
 800461a:	401a      	ands	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <TIM_OC3_SetConfig+0xe0>)
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2203      	movs	r2, #3
 8004638:	4393      	bics	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4a27      	ldr	r2, [pc, #156]	@ (80046e8 <TIM_OC3_SetConfig+0xe4>)
 800464a:	4013      	ands	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a23      	ldr	r2, [pc, #140]	@ (80046ec <TIM_OC3_SetConfig+0xe8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10d      	bne.n	800467e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4a22      	ldr	r2, [pc, #136]	@ (80046f0 <TIM_OC3_SetConfig+0xec>)
 8004666:	4013      	ands	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4a1e      	ldr	r2, [pc, #120]	@ (80046f4 <TIM_OC3_SetConfig+0xf0>)
 800467a:	4013      	ands	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1a      	ldr	r2, [pc, #104]	@ (80046ec <TIM_OC3_SetConfig+0xe8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d007      	beq.n	8004696 <TIM_OC3_SetConfig+0x92>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1b      	ldr	r2, [pc, #108]	@ (80046f8 <TIM_OC3_SetConfig+0xf4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <TIM_OC3_SetConfig+0x92>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1a      	ldr	r2, [pc, #104]	@ (80046fc <TIM_OC3_SetConfig+0xf8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d113      	bne.n	80046be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4a19      	ldr	r2, [pc, #100]	@ (8004700 <TIM_OC3_SetConfig+0xfc>)
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <TIM_OC3_SetConfig+0x100>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b006      	add	sp, #24
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	fffffeff 	.word	0xfffffeff
 80046e4:	fffeff8f 	.word	0xfffeff8f
 80046e8:	fffffdff 	.word	0xfffffdff
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	fffff7ff 	.word	0xfffff7ff
 80046f4:	fffffbff 	.word	0xfffffbff
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	ffffefff 	.word	0xffffefff
 8004704:	ffffdfff 	.word	0xffffdfff

08004708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	4a24      	ldr	r2, [pc, #144]	@ (80047b0 <TIM_OC4_SetConfig+0xa8>)
 800471e:	401a      	ands	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a20      	ldr	r2, [pc, #128]	@ (80047b4 <TIM_OC4_SetConfig+0xac>)
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a1f      	ldr	r2, [pc, #124]	@ (80047b8 <TIM_OC4_SetConfig+0xb0>)
 800473c:	4013      	ands	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <TIM_OC4_SetConfig+0xb4>)
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <TIM_OC4_SetConfig+0xb8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_OC4_SetConfig+0x70>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <TIM_OC4_SetConfig+0xbc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC4_SetConfig+0x70>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <TIM_OC4_SetConfig+0xc0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d109      	bne.n	800478c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4a14      	ldr	r2, [pc, #80]	@ (80047cc <TIM_OC4_SetConfig+0xc4>)
 800477c:	4013      	ands	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b006      	add	sp, #24
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	ffffefff 	.word	0xffffefff
 80047b4:	feff8fff 	.word	0xfeff8fff
 80047b8:	fffffcff 	.word	0xfffffcff
 80047bc:	ffffdfff 	.word	0xffffdfff
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	ffffbfff 	.word	0xffffbfff

080047d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	4a21      	ldr	r2, [pc, #132]	@ (800486c <TIM_OC5_SetConfig+0x9c>)
 80047e6:	401a      	ands	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <TIM_OC5_SetConfig+0xa0>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <TIM_OC5_SetConfig+0xa4>)
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a15      	ldr	r2, [pc, #84]	@ (8004878 <TIM_OC5_SetConfig+0xa8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <TIM_OC5_SetConfig+0x66>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a14      	ldr	r2, [pc, #80]	@ (800487c <TIM_OC5_SetConfig+0xac>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC5_SetConfig+0x66>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a13      	ldr	r2, [pc, #76]	@ (8004880 <TIM_OC5_SetConfig+0xb0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d109      	bne.n	800484a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	4a0c      	ldr	r2, [pc, #48]	@ (800486c <TIM_OC5_SetConfig+0x9c>)
 800483a:	4013      	ands	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	621a      	str	r2, [r3, #32]
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b006      	add	sp, #24
 800486a:	bd80      	pop	{r7, pc}
 800486c:	fffeffff 	.word	0xfffeffff
 8004870:	fffeff8f 	.word	0xfffeff8f
 8004874:	fffdffff 	.word	0xfffdffff
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40014400 	.word	0x40014400
 8004880:	40014800 	.word	0x40014800

08004884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	4a22      	ldr	r2, [pc, #136]	@ (8004924 <TIM_OC6_SetConfig+0xa0>)
 800489a:	401a      	ands	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004928 <TIM_OC6_SetConfig+0xa4>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4a1a      	ldr	r2, [pc, #104]	@ (800492c <TIM_OC6_SetConfig+0xa8>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	051b      	lsls	r3, r3, #20
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a16      	ldr	r2, [pc, #88]	@ (8004930 <TIM_OC6_SetConfig+0xac>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_OC6_SetConfig+0x68>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a15      	ldr	r2, [pc, #84]	@ (8004934 <TIM_OC6_SetConfig+0xb0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC6_SetConfig+0x68>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a14      	ldr	r2, [pc, #80]	@ (8004938 <TIM_OC6_SetConfig+0xb4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d109      	bne.n	8004900 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4a13      	ldr	r2, [pc, #76]	@ (800493c <TIM_OC6_SetConfig+0xb8>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	029b      	lsls	r3, r3, #10
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b006      	add	sp, #24
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	ffefffff 	.word	0xffefffff
 8004928:	feff8fff 	.word	0xfeff8fff
 800492c:	ffdfffff 	.word	0xffdfffff
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800
 800493c:	fffbffff 	.word	0xfffbffff

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	223c      	movs	r2, #60	@ 0x3c
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e050      	b.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	223c      	movs	r2, #60	@ 0x3c
 800495c:	2101      	movs	r1, #1
 800495e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	223d      	movs	r2, #61	@ 0x3d
 8004964:	2102      	movs	r1, #2
 8004966:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a21      	ldr	r2, [pc, #132]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a20      	ldr	r2, [pc, #128]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004986:	4013      	ands	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2270      	movs	r2, #112	@ 0x70
 8004998:	4393      	bics	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a14      	ldr	r2, [pc, #80]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00a      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	05db      	lsls	r3, r3, #23
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d004      	beq.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a10      	ldr	r2, [pc, #64]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10c      	bne.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2280      	movs	r2, #128	@ 0x80
 80049d2:	4393      	bics	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	223d      	movs	r2, #61	@ 0x3d
 80049ec:	2101      	movs	r1, #1
 80049ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	223c      	movs	r2, #60	@ 0x3c
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b004      	add	sp, #16
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	ff0fffff 	.word	0xff0fffff
 8004a0c:	40000400 	.word	0x40000400

08004a10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	223c      	movs	r2, #60	@ 0x3c
 8004a22:	5c9b      	ldrb	r3, [r3, r2]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e06f      	b.n	8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	223c      	movs	r2, #60	@ 0x3c
 8004a30:	2101      	movs	r1, #1
 8004a32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	22ff      	movs	r2, #255	@ 0xff
 8004a38:	4393      	bics	r3, r2
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a33      	ldr	r2, [pc, #204]	@ (8004b14 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004a48:	401a      	ands	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a30      	ldr	r2, [pc, #192]	@ (8004b18 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004a56:	401a      	ands	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a2e      	ldr	r2, [pc, #184]	@ (8004b1c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004a64:	401a      	ands	r2, r3
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	@ (8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004a72:	401a      	ands	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a29      	ldr	r2, [pc, #164]	@ (8004b24 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004a80:	401a      	ands	r2, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004a8e:	401a      	ands	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a24      	ldr	r2, [pc, #144]	@ (8004b2c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a21      	ldr	r2, [pc, #132]	@ (8004b30 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004aac:	401a      	ands	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	@ (8004b34 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d11c      	bne.n	8004afa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b38 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004ac4:	401a      	ands	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	051b      	lsls	r3, r3, #20
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b3c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a17      	ldr	r2, [pc, #92]	@ (8004b40 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4a15      	ldr	r2, [pc, #84]	@ (8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004af0:	401a      	ands	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	223c      	movs	r2, #60	@ 0x3c
 8004b06:	2100      	movs	r1, #0
 8004b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b004      	add	sp, #16
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	fffffcff 	.word	0xfffffcff
 8004b18:	fffffbff 	.word	0xfffffbff
 8004b1c:	fffff7ff 	.word	0xfffff7ff
 8004b20:	ffffefff 	.word	0xffffefff
 8004b24:	ffffdfff 	.word	0xffffdfff
 8004b28:	ffffbfff 	.word	0xffffbfff
 8004b2c:	fff0ffff 	.word	0xfff0ffff
 8004b30:	efffffff 	.word	0xefffffff
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	ff0fffff 	.word	0xff0fffff
 8004b3c:	feffffff 	.word	0xfeffffff
 8004b40:	fdffffff 	.word	0xfdffffff
 8004b44:	dfffffff 	.word	0xdfffffff

08004b48 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08c      	sub	sp, #48	@ 0x30
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	1dbb      	adds	r3, r7, #6
 8004b54:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2288      	movs	r2, #136	@ 0x88
 8004b5a:	589b      	ldr	r3, [r3, r2]
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d000      	beq.n	8004b62 <HAL_UART_Transmit_IT+0x1a>
 8004b60:	e08d      	b.n	8004c7e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_UART_Transmit_IT+0x28>
 8004b68:	1dbb      	adds	r3, r7, #6
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e085      	b.n	8004c80 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	2380      	movs	r3, #128	@ 0x80
 8004b7a:	015b      	lsls	r3, r3, #5
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d109      	bne.n	8004b94 <HAL_UART_Transmit_IT+0x4c>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d001      	beq.n	8004b94 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e075      	b.n	8004c80 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1dba      	adds	r2, r7, #6
 8004b9e:	2154      	movs	r1, #84	@ 0x54
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1dba      	adds	r2, r7, #6
 8004ba8:	2156      	movs	r1, #86	@ 0x56
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2290      	movs	r2, #144	@ 0x90
 8004bb8:	2100      	movs	r1, #0
 8004bba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2288      	movs	r2, #136	@ 0x88
 8004bc0:	2121      	movs	r1, #33	@ 0x21
 8004bc2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004bc8:	2380      	movs	r3, #128	@ 0x80
 8004bca:	059b      	lsls	r3, r3, #22
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d12a      	bne.n	8004c26 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	015b      	lsls	r3, r3, #5
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <HAL_UART_Transmit_IT+0xa4>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a28      	ldr	r2, [pc, #160]	@ (8004c88 <HAL_UART_Transmit_IT+0x140>)
 8004be8:	679a      	str	r2, [r3, #120]	@ 0x78
 8004bea:	e002      	b.n	8004bf2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a27      	ldr	r2, [pc, #156]	@ (8004c8c <HAL_UART_Transmit_IT+0x144>)
 8004bf0:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f383 8810 	msr	PRIMASK, r3
}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2180      	movs	r1, #128	@ 0x80
 8004c14:	0409      	lsls	r1, r1, #16
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	f383 8810 	msr	PRIMASK, r3
}
 8004c24:	e029      	b.n	8004c7a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	2380      	movs	r3, #128	@ 0x80
 8004c2c:	015b      	lsls	r3, r3, #5
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d107      	bne.n	8004c42 <HAL_UART_Transmit_IT+0xfa>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a14      	ldr	r2, [pc, #80]	@ (8004c90 <HAL_UART_Transmit_IT+0x148>)
 8004c3e:	679a      	str	r2, [r3, #120]	@ 0x78
 8004c40:	e002      	b.n	8004c48 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a13      	ldr	r2, [pc, #76]	@ (8004c94 <HAL_UART_Transmit_IT+0x14c>)
 8004c46:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c48:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8004c4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c52:	2301      	movs	r3, #1
 8004c54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f383 8810 	msr	PRIMASK, r3
}
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2180      	movs	r1, #128	@ 0x80
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e000      	b.n	8004c80 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
  }
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b00c      	add	sp, #48	@ 0x30
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	08006495 	.word	0x08006495
 8004c8c:	080063a9 	.word	0x080063a9
 8004c90:	080062e9 	.word	0x080062e9
 8004c94:	08006235 	.word	0x08006235

08004c98 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b098      	sub	sp, #96	@ 0x60
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8004cac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cae:	2301      	movs	r3, #1
 8004cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			@ (mov r8, r8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	498a      	ldr	r1, [pc, #552]	@ (8004ef0 <HAL_UART_Abort_IT+0x258>)
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8004cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce6:	f383 8810 	msr	PRIMASK, r3
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	497f      	ldr	r1, [pc, #508]	@ (8004ef4 <HAL_UART_Abort_IT+0x25c>)
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfe:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d118      	bne.n	8004d42 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004d18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			@ (mov r8, r8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2110      	movs	r1, #16
 8004d32:	438a      	bics	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00f      	beq.n	8004d6a <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2280      	movs	r2, #128	@ 0x80
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b80      	cmp	r3, #128	@ 0x80
 8004d56:	d104      	bne.n	8004d62 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d5c:	4a66      	ldr	r2, [pc, #408]	@ (8004ef8 <HAL_UART_Abort_IT+0x260>)
 8004d5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d60:	e003      	b.n	8004d6a <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d66:	2200      	movs	r2, #0
 8004d68:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2280      	movs	r2, #128	@ 0x80
 8004d6e:	589b      	ldr	r3, [r3, r2]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2240      	movs	r2, #64	@ 0x40
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b40      	cmp	r3, #64	@ 0x40
 8004d80:	d105      	bne.n	8004d8e <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2280      	movs	r2, #128	@ 0x80
 8004d86:	589b      	ldr	r3, [r3, r2]
 8004d88:	4a5c      	ldr	r2, [pc, #368]	@ (8004efc <HAL_UART_Abort_IT+0x264>)
 8004d8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d8c:	e004      	b.n	8004d98 <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2280      	movs	r2, #128	@ 0x80
 8004d92:	589b      	ldr	r3, [r3, r2]
 8004d94:	2200      	movs	r2, #0
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2280      	movs	r2, #128	@ 0x80
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b80      	cmp	r3, #128	@ 0x80
 8004da4:	d12a      	bne.n	8004dfc <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004da6:	f3ef 8310 	mrs	r3, PRIMASK
 8004daa:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dac:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db0:	2301      	movs	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2180      	movs	r1, #128	@ 0x80
 8004dc8:	438a      	bics	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f383 8810 	msr	PRIMASK, r3
}
 8004dd6:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004de4:	0018      	movs	r0, r3
 8004de6:	f7fd fed1 	bl	8002b8c <HAL_DMA_Abort_IT>
 8004dea:	1e03      	subs	r3, r0, #0
 8004dec:	d004      	beq.n	8004df8 <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df2:	2200      	movs	r2, #0
 8004df4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004df6:	e001      	b.n	8004dfc <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2240      	movs	r2, #64	@ 0x40
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b40      	cmp	r3, #64	@ 0x40
 8004e08:	d12f      	bne.n	8004e6a <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e10:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e14:	2301      	movs	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f383 8810 	msr	PRIMASK, r3
}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2140      	movs	r1, #64	@ 0x40
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f383 8810 	msr	PRIMASK, r3
}
 8004e3a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2280      	movs	r2, #128	@ 0x80
 8004e40:	589b      	ldr	r3, [r3, r2]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d011      	beq.n	8004e6a <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2280      	movs	r2, #128	@ 0x80
 8004e4a:	589b      	ldr	r3, [r3, r2]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fd fe9d 	bl	8002b8c <HAL_DMA_Abort_IT>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2280      	movs	r2, #128	@ 0x80
 8004e5a:	589b      	ldr	r3, [r3, r2]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8004e60:	2301      	movs	r3, #1
 8004e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e64:	e001      	b.n	8004e6a <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8004e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d13a      	bne.n	8004ee6 <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2256      	movs	r2, #86	@ 0x56
 8004e74:	2100      	movs	r1, #0
 8004e76:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	225e      	movs	r2, #94	@ 0x5e
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2290      	movs	r2, #144	@ 0x90
 8004e90:	2100      	movs	r1, #0
 8004e92:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	220f      	movs	r2, #15
 8004e9a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004ea0:	2380      	movs	r3, #128	@ 0x80
 8004ea2:	059b      	lsls	r3, r3, #22
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d107      	bne.n	8004eb8 <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2108      	movs	r1, #8
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2288      	movs	r2, #136	@ 0x88
 8004ecc:	2120      	movs	r1, #32
 8004ece:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	228c      	movs	r2, #140	@ 0x8c
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fb6b 	bl	80055bc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b018      	add	sp, #96	@ 0x60
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	fffffe1f 	.word	0xfffffe1f
 8004ef4:	ef7ffffe 	.word	0xef7ffffe
 8004ef8:	08006123 	.word	0x08006123
 8004efc:	080061b3 	.word	0x080061b3

08004f00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b0aa      	sub	sp, #168	@ 0xa8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	22a4      	movs	r2, #164	@ 0xa4
 8004f10:	18b9      	adds	r1, r7, r2
 8004f12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	20a0      	movs	r0, #160	@ 0xa0
 8004f1c:	1839      	adds	r1, r7, r0
 8004f1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	249c      	movs	r4, #156	@ 0x9c
 8004f28:	1939      	adds	r1, r7, r4
 8004f2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2c:	0011      	movs	r1, r2
 8004f2e:	18bb      	adds	r3, r7, r2
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4aa2      	ldr	r2, [pc, #648]	@ (80051bc <HAL_UART_IRQHandler+0x2bc>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	2298      	movs	r2, #152	@ 0x98
 8004f38:	18bd      	adds	r5, r7, r2
 8004f3a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004f3c:	18bb      	adds	r3, r7, r2
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11a      	bne.n	8004f7a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f44:	187b      	adds	r3, r7, r1
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d015      	beq.n	8004f7a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f4e:	183b      	adds	r3, r7, r0
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2220      	movs	r2, #32
 8004f54:	4013      	ands	r3, r2
 8004f56:	d105      	bne.n	8004f64 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f58:	193b      	adds	r3, r7, r4
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2380      	movs	r3, #128	@ 0x80
 8004f5e:	055b      	lsls	r3, r3, #21
 8004f60:	4013      	ands	r3, r2
 8004f62:	d00a      	beq.n	8004f7a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d100      	bne.n	8004f6e <HAL_UART_IRQHandler+0x6e>
 8004f6c:	e2fb      	b.n	8005566 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	0010      	movs	r0, r2
 8004f76:	4798      	blx	r3
      }
      return;
 8004f78:	e2f5      	b.n	8005566 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f7a:	2398      	movs	r3, #152	@ 0x98
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d100      	bne.n	8004f86 <HAL_UART_IRQHandler+0x86>
 8004f84:	e122      	b.n	80051cc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f86:	239c      	movs	r3, #156	@ 0x9c
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a8c      	ldr	r2, [pc, #560]	@ (80051c0 <HAL_UART_IRQHandler+0x2c0>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d106      	bne.n	8004fa0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f92:	23a0      	movs	r3, #160	@ 0xa0
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a8a      	ldr	r2, [pc, #552]	@ (80051c4 <HAL_UART_IRQHandler+0x2c4>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d100      	bne.n	8004fa0 <HAL_UART_IRQHandler+0xa0>
 8004f9e:	e115      	b.n	80051cc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fa0:	23a4      	movs	r3, #164	@ 0xa4
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d012      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xd2>
 8004fac:	23a0      	movs	r3, #160	@ 0xa0
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2290      	movs	r2, #144	@ 0x90
 8004fc6:	589b      	ldr	r3, [r3, r2]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2190      	movs	r1, #144	@ 0x90
 8004fd0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd2:	23a4      	movs	r3, #164	@ 0xa4
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d011      	beq.n	8005002 <HAL_UART_IRQHandler+0x102>
 8004fde:	239c      	movs	r3, #156	@ 0x9c
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2290      	movs	r2, #144	@ 0x90
 8004ff6:	589b      	ldr	r3, [r3, r2]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2190      	movs	r1, #144	@ 0x90
 8005000:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005002:	23a4      	movs	r3, #164	@ 0xa4
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2204      	movs	r2, #4
 800500a:	4013      	ands	r3, r2
 800500c:	d011      	beq.n	8005032 <HAL_UART_IRQHandler+0x132>
 800500e:	239c      	movs	r3, #156	@ 0x9c
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2201      	movs	r2, #1
 8005016:	4013      	ands	r3, r2
 8005018:	d00b      	beq.n	8005032 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2204      	movs	r2, #4
 8005020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2290      	movs	r2, #144	@ 0x90
 8005026:	589b      	ldr	r3, [r3, r2]
 8005028:	2202      	movs	r2, #2
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2190      	movs	r1, #144	@ 0x90
 8005030:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005032:	23a4      	movs	r3, #164	@ 0xa4
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2208      	movs	r2, #8
 800503a:	4013      	ands	r3, r2
 800503c:	d017      	beq.n	800506e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800503e:	23a0      	movs	r3, #160	@ 0xa0
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2220      	movs	r2, #32
 8005046:	4013      	ands	r3, r2
 8005048:	d105      	bne.n	8005056 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800504a:	239c      	movs	r3, #156	@ 0x9c
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5b      	ldr	r2, [pc, #364]	@ (80051c0 <HAL_UART_IRQHandler+0x2c0>)
 8005052:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005054:	d00b      	beq.n	800506e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2208      	movs	r2, #8
 800505c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2290      	movs	r2, #144	@ 0x90
 8005062:	589b      	ldr	r3, [r3, r2]
 8005064:	2208      	movs	r2, #8
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2190      	movs	r1, #144	@ 0x90
 800506c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800506e:	23a4      	movs	r3, #164	@ 0xa4
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	4013      	ands	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_UART_IRQHandler+0x1a4>
 800507c:	23a0      	movs	r3, #160	@ 0xa0
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	2380      	movs	r3, #128	@ 0x80
 8005084:	04db      	lsls	r3, r3, #19
 8005086:	4013      	ands	r3, r2
 8005088:	d00c      	beq.n	80050a4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2280      	movs	r2, #128	@ 0x80
 8005090:	0112      	lsls	r2, r2, #4
 8005092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2290      	movs	r2, #144	@ 0x90
 8005098:	589b      	ldr	r3, [r3, r2]
 800509a:	2220      	movs	r2, #32
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2190      	movs	r1, #144	@ 0x90
 80050a2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2290      	movs	r2, #144	@ 0x90
 80050a8:	589b      	ldr	r3, [r3, r2]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d100      	bne.n	80050b0 <HAL_UART_IRQHandler+0x1b0>
 80050ae:	e25c      	b.n	800556a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050b0:	23a4      	movs	r3, #164	@ 0xa4
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2220      	movs	r2, #32
 80050b8:	4013      	ands	r3, r2
 80050ba:	d015      	beq.n	80050e8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050bc:	23a0      	movs	r3, #160	@ 0xa0
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2220      	movs	r2, #32
 80050c4:	4013      	ands	r3, r2
 80050c6:	d106      	bne.n	80050d6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050c8:	239c      	movs	r3, #156	@ 0x9c
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	055b      	lsls	r3, r3, #21
 80050d2:	4013      	ands	r3, r2
 80050d4:	d008      	beq.n	80050e8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	0010      	movs	r0, r2
 80050e6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2290      	movs	r2, #144	@ 0x90
 80050ec:	589b      	ldr	r3, [r3, r2]
 80050ee:	2194      	movs	r1, #148	@ 0x94
 80050f0:	187a      	adds	r2, r7, r1
 80050f2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2240      	movs	r2, #64	@ 0x40
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b40      	cmp	r3, #64	@ 0x40
 8005100:	d004      	beq.n	800510c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005102:	187b      	adds	r3, r7, r1
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2228      	movs	r2, #40	@ 0x28
 8005108:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800510a:	d04c      	beq.n	80051a6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	0018      	movs	r0, r3
 8005110:	f000 fe8e 	bl	8005e30 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2240      	movs	r2, #64	@ 0x40
 800511c:	4013      	ands	r3, r2
 800511e:	2b40      	cmp	r3, #64	@ 0x40
 8005120:	d13c      	bne.n	800519c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005122:	f3ef 8310 	mrs	r3, PRIMASK
 8005126:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005128:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	2090      	movs	r0, #144	@ 0x90
 800512c:	183a      	adds	r2, r7, r0
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	2301      	movs	r3, #1
 8005132:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2140      	movs	r1, #64	@ 0x40
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	183b      	adds	r3, r7, r0
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2280      	movs	r2, #128	@ 0x80
 800515e:	589b      	ldr	r3, [r3, r2]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d016      	beq.n	8005192 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2280      	movs	r2, #128	@ 0x80
 8005168:	589b      	ldr	r3, [r3, r2]
 800516a:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <HAL_UART_IRQHandler+0x2c8>)
 800516c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2280      	movs	r2, #128	@ 0x80
 8005172:	589b      	ldr	r3, [r3, r2]
 8005174:	0018      	movs	r0, r3
 8005176:	f7fd fd09 	bl	8002b8c <HAL_DMA_Abort_IT>
 800517a:	1e03      	subs	r3, r0, #0
 800517c:	d01c      	beq.n	80051b8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2280      	movs	r2, #128	@ 0x80
 8005182:	589b      	ldr	r3, [r3, r2]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	2180      	movs	r1, #128	@ 0x80
 800518a:	5852      	ldr	r2, [r2, r1]
 800518c:	0010      	movs	r0, r2
 800518e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	e012      	b.n	80051b8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0018      	movs	r0, r3
 8005196:	f000 fa09 	bl	80055ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519a:	e00d      	b.n	80051b8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 fa04 	bl	80055ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e008      	b.n	80051b8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f9ff 	bl	80055ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2290      	movs	r2, #144	@ 0x90
 80051b2:	2100      	movs	r1, #0
 80051b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80051b6:	e1d8      	b.n	800556a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	46c0      	nop			@ (mov r8, r8)
    return;
 80051ba:	e1d6      	b.n	800556a <HAL_UART_IRQHandler+0x66a>
 80051bc:	0000080f 	.word	0x0000080f
 80051c0:	10000001 	.word	0x10000001
 80051c4:	04000120 	.word	0x04000120
 80051c8:	080060f5 	.word	0x080060f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d000      	beq.n	80051d6 <HAL_UART_IRQHandler+0x2d6>
 80051d4:	e15d      	b.n	8005492 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051d6:	23a4      	movs	r3, #164	@ 0xa4
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2210      	movs	r2, #16
 80051de:	4013      	ands	r3, r2
 80051e0:	d100      	bne.n	80051e4 <HAL_UART_IRQHandler+0x2e4>
 80051e2:	e156      	b.n	8005492 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051e4:	23a0      	movs	r3, #160	@ 0xa0
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2210      	movs	r2, #16
 80051ec:	4013      	ands	r3, r2
 80051ee:	d100      	bne.n	80051f2 <HAL_UART_IRQHandler+0x2f2>
 80051f0:	e14f      	b.n	8005492 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2210      	movs	r2, #16
 80051f8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2240      	movs	r2, #64	@ 0x40
 8005202:	4013      	ands	r3, r2
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	d000      	beq.n	800520a <HAL_UART_IRQHandler+0x30a>
 8005208:	e0c3      	b.n	8005392 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2280      	movs	r2, #128	@ 0x80
 800520e:	589b      	ldr	r3, [r3, r2]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	217e      	movs	r1, #126	@ 0x7e
 8005216:	187b      	adds	r3, r7, r1
 8005218:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800521a:	187b      	adds	r3, r7, r1
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d100      	bne.n	8005224 <HAL_UART_IRQHandler+0x324>
 8005222:	e097      	b.n	8005354 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	225c      	movs	r2, #92	@ 0x5c
 8005228:	5a9b      	ldrh	r3, [r3, r2]
 800522a:	187a      	adds	r2, r7, r1
 800522c:	8812      	ldrh	r2, [r2, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d300      	bcc.n	8005234 <HAL_UART_IRQHandler+0x334>
 8005232:	e08f      	b.n	8005354 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	187a      	adds	r2, r7, r1
 8005238:	215e      	movs	r1, #94	@ 0x5e
 800523a:	8812      	ldrh	r2, [r2, #0]
 800523c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2280      	movs	r2, #128	@ 0x80
 8005242:	589b      	ldr	r3, [r3, r2]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2220      	movs	r2, #32
 800524a:	4013      	ands	r3, r2
 800524c:	d170      	bne.n	8005330 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800524e:	f3ef 8310 	mrs	r3, PRIMASK
 8005252:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005256:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005258:	2301      	movs	r3, #1
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525e:	f383 8810 	msr	PRIMASK, r3
}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	49c4      	ldr	r1, [pc, #784]	@ (8005580 <HAL_UART_IRQHandler+0x680>)
 8005270:	400a      	ands	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005276:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	f383 8810 	msr	PRIMASK, r3
}
 800527e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005288:	677b      	str	r3, [r7, #116]	@ 0x74
 800528a:	2301      	movs	r3, #1
 800528c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			@ (mov r8, r8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2101      	movs	r1, #1
 80052a2:	438a      	bics	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052a8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052b2:	f3ef 8310 	mrs	r3, PRIMASK
 80052b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80052b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80052bc:	2301      	movs	r3, #1
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2140      	movs	r1, #64	@ 0x40
 80052d4:	438a      	bics	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052da:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052de:	f383 8810 	msr	PRIMASK, r3
}
 80052e2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	228c      	movs	r2, #140	@ 0x8c
 80052e8:	2120      	movs	r1, #32
 80052ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052f2:	f3ef 8310 	mrs	r3, PRIMASK
 80052f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80052f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052fc:	2301      	movs	r3, #1
 80052fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2110      	movs	r1, #16
 8005314:	438a      	bics	r2, r1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800531a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2280      	movs	r2, #128	@ 0x80
 8005328:	589b      	ldr	r3, [r3, r2]
 800532a:	0018      	movs	r0, r3
 800532c:	f7fd fbcc 	bl	8002ac8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	225c      	movs	r2, #92	@ 0x5c
 800533a:	5a9a      	ldrh	r2, [r3, r2]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	215e      	movs	r1, #94	@ 0x5e
 8005340:	5a5b      	ldrh	r3, [r3, r1]
 8005342:	b29b      	uxth	r3, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0011      	movs	r1, r2
 800534c:	0018      	movs	r0, r3
 800534e:	f7fb fc7d 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005352:	e10c      	b.n	800556e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	225c      	movs	r2, #92	@ 0x5c
 8005358:	5a9b      	ldrh	r3, [r3, r2]
 800535a:	227e      	movs	r2, #126	@ 0x7e
 800535c:	18ba      	adds	r2, r7, r2
 800535e:	8812      	ldrh	r2, [r2, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d000      	beq.n	8005366 <HAL_UART_IRQHandler+0x466>
 8005364:	e103      	b.n	800556e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2280      	movs	r2, #128	@ 0x80
 800536a:	589b      	ldr	r3, [r3, r2]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2220      	movs	r2, #32
 8005372:	4013      	ands	r3, r2
 8005374:	2b20      	cmp	r3, #32
 8005376:	d000      	beq.n	800537a <HAL_UART_IRQHandler+0x47a>
 8005378:	e0f9      	b.n	800556e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	225c      	movs	r2, #92	@ 0x5c
 8005384:	5a9a      	ldrh	r2, [r3, r2]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	0011      	movs	r1, r2
 800538a:	0018      	movs	r0, r3
 800538c:	f7fb fc5e 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
      return;
 8005390:	e0ed      	b.n	800556e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	225c      	movs	r2, #92	@ 0x5c
 8005396:	5a99      	ldrh	r1, [r3, r2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	225e      	movs	r2, #94	@ 0x5e
 800539c:	5a9b      	ldrh	r3, [r3, r2]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	208e      	movs	r0, #142	@ 0x8e
 80053a2:	183b      	adds	r3, r7, r0
 80053a4:	1a8a      	subs	r2, r1, r2
 80053a6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	225e      	movs	r2, #94	@ 0x5e
 80053ac:	5a9b      	ldrh	r3, [r3, r2]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d100      	bne.n	80053b6 <HAL_UART_IRQHandler+0x4b6>
 80053b4:	e0dd      	b.n	8005572 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80053b6:	183b      	adds	r3, r7, r0
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d100      	bne.n	80053c0 <HAL_UART_IRQHandler+0x4c0>
 80053be:	e0d8      	b.n	8005572 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80053c6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053c8:	2488      	movs	r4, #136	@ 0x88
 80053ca:	193a      	adds	r2, r7, r4
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	2301      	movs	r3, #1
 80053d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f383 8810 	msr	PRIMASK, r3
}
 80053d8:	46c0      	nop			@ (mov r8, r8)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4967      	ldr	r1, [pc, #412]	@ (8005584 <HAL_UART_IRQHandler+0x684>)
 80053e6:	400a      	ands	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	193b      	adds	r3, r7, r4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053f8:	f3ef 8310 	mrs	r3, PRIMASK
 80053fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80053fe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005400:	2484      	movs	r4, #132	@ 0x84
 8005402:	193a      	adds	r2, r7, r4
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	2301      	movs	r3, #1
 8005408:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f383 8810 	msr	PRIMASK, r3
}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	495a      	ldr	r1, [pc, #360]	@ (8005588 <HAL_UART_IRQHandler+0x688>)
 800541e:	400a      	ands	r2, r1
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	193b      	adds	r3, r7, r4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	f383 8810 	msr	PRIMASK, r3
}
 800542e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	228c      	movs	r2, #140	@ 0x8c
 8005434:	2120      	movs	r1, #32
 8005436:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005444:	f3ef 8310 	mrs	r3, PRIMASK
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	2480      	movs	r4, #128	@ 0x80
 800544e:	193a      	adds	r2, r7, r4
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	2301      	movs	r3, #1
 8005454:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	f383 8810 	msr	PRIMASK, r3
}
 800545c:	46c0      	nop			@ (mov r8, r8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2110      	movs	r1, #16
 800546a:	438a      	bics	r2, r1
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	193b      	adds	r3, r7, r4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005482:	183b      	adds	r3, r7, r0
 8005484:	881a      	ldrh	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	0011      	movs	r1, r2
 800548a:	0018      	movs	r0, r3
 800548c:	f7fb fbde 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005490:	e06f      	b.n	8005572 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005492:	23a4      	movs	r3, #164	@ 0xa4
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2380      	movs	r3, #128	@ 0x80
 800549a:	035b      	lsls	r3, r3, #13
 800549c:	4013      	ands	r3, r2
 800549e:	d010      	beq.n	80054c2 <HAL_UART_IRQHandler+0x5c2>
 80054a0:	239c      	movs	r3, #156	@ 0x9c
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	2380      	movs	r3, #128	@ 0x80
 80054a8:	03db      	lsls	r3, r3, #15
 80054aa:	4013      	ands	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2280      	movs	r2, #128	@ 0x80
 80054b4:	0352      	lsls	r2, r2, #13
 80054b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f001 f902 	bl	80066c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054c0:	e05a      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80054c2:	23a4      	movs	r3, #164	@ 0xa4
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2280      	movs	r2, #128	@ 0x80
 80054ca:	4013      	ands	r3, r2
 80054cc:	d016      	beq.n	80054fc <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054ce:	23a0      	movs	r3, #160	@ 0xa0
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2280      	movs	r2, #128	@ 0x80
 80054d6:	4013      	ands	r3, r2
 80054d8:	d106      	bne.n	80054e8 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054da:	239c      	movs	r3, #156	@ 0x9c
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	2380      	movs	r3, #128	@ 0x80
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	4013      	ands	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d042      	beq.n	8005576 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	0010      	movs	r0, r2
 80054f8:	4798      	blx	r3
    }
    return;
 80054fa:	e03c      	b.n	8005576 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054fc:	23a4      	movs	r3, #164	@ 0xa4
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2240      	movs	r2, #64	@ 0x40
 8005504:	4013      	ands	r3, r2
 8005506:	d00a      	beq.n	800551e <HAL_UART_IRQHandler+0x61e>
 8005508:	23a0      	movs	r3, #160	@ 0xa0
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2240      	movs	r2, #64	@ 0x40
 8005510:	4013      	ands	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	0018      	movs	r0, r3
 8005518:	f001 f836 	bl	8006588 <UART_EndTransmit_IT>
    return;
 800551c:	e02c      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800551e:	23a4      	movs	r3, #164	@ 0xa4
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	@ 0x80
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	4013      	ands	r3, r2
 800552a:	d00b      	beq.n	8005544 <HAL_UART_IRQHandler+0x644>
 800552c:	23a0      	movs	r3, #160	@ 0xa0
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	2380      	movs	r3, #128	@ 0x80
 8005534:	05db      	lsls	r3, r3, #23
 8005536:	4013      	ands	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f001 f8d1 	bl	80066e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005542:	e019      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005544:	23a4      	movs	r3, #164	@ 0xa4
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	045b      	lsls	r3, r3, #17
 800554e:	4013      	ands	r3, r2
 8005550:	d012      	beq.n	8005578 <HAL_UART_IRQHandler+0x678>
 8005552:	23a0      	movs	r3, #160	@ 0xa0
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	da0d      	bge.n	8005578 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0018      	movs	r0, r3
 8005560:	f001 f8b8 	bl	80066d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005564:	e008      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
      return;
 8005566:	46c0      	nop			@ (mov r8, r8)
 8005568:	e006      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
    return;
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	e004      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
      return;
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	e002      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
      return;
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	e000      	b.n	8005578 <HAL_UART_IRQHandler+0x678>
    return;
 8005576:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005578:	46bd      	mov	sp, r7
 800557a:	b02a      	add	sp, #168	@ 0xa8
 800557c:	bdb0      	pop	{r4, r5, r7, pc}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	fffffeff 	.word	0xfffffeff
 8005584:	fffffedf 	.word	0xfffffedf
 8005588:	effffffe 	.word	0xeffffffe

0800558c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005594:	46c0      	nop			@ (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	b002      	add	sp, #8
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b002      	add	sp, #8
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80055c4:	46c0      	nop			@ (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055d4:	231e      	movs	r3, #30
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4aab      	ldr	r2, [pc, #684]	@ (80058a8 <UART_SetConfig+0x2dc>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	430a      	orrs	r2, r1
 8005608:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4aa6      	ldr	r2, [pc, #664]	@ (80058ac <UART_SetConfig+0x2e0>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	4a9d      	ldr	r2, [pc, #628]	@ (80058b0 <UART_SetConfig+0x2e4>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	430a      	orrs	r2, r1
 8005646:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	220f      	movs	r2, #15
 8005650:	4393      	bics	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a93      	ldr	r2, [pc, #588]	@ (80058b4 <UART_SetConfig+0x2e8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d127      	bne.n	80056ba <UART_SetConfig+0xee>
 800566a:	4b93      	ldr	r3, [pc, #588]	@ (80058b8 <UART_SetConfig+0x2ec>)
 800566c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566e:	2203      	movs	r2, #3
 8005670:	4013      	ands	r3, r2
 8005672:	2b03      	cmp	r3, #3
 8005674:	d017      	beq.n	80056a6 <UART_SetConfig+0xda>
 8005676:	d81b      	bhi.n	80056b0 <UART_SetConfig+0xe4>
 8005678:	2b02      	cmp	r3, #2
 800567a:	d00a      	beq.n	8005692 <UART_SetConfig+0xc6>
 800567c:	d818      	bhi.n	80056b0 <UART_SetConfig+0xe4>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <UART_SetConfig+0xbc>
 8005682:	2b01      	cmp	r3, #1
 8005684:	d00a      	beq.n	800569c <UART_SetConfig+0xd0>
 8005686:	e013      	b.n	80056b0 <UART_SetConfig+0xe4>
 8005688:	231f      	movs	r3, #31
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	e021      	b.n	80056d6 <UART_SetConfig+0x10a>
 8005692:	231f      	movs	r3, #31
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2202      	movs	r2, #2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e01c      	b.n	80056d6 <UART_SetConfig+0x10a>
 800569c:	231f      	movs	r3, #31
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2204      	movs	r2, #4
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e017      	b.n	80056d6 <UART_SetConfig+0x10a>
 80056a6:	231f      	movs	r3, #31
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2208      	movs	r2, #8
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e012      	b.n	80056d6 <UART_SetConfig+0x10a>
 80056b0:	231f      	movs	r3, #31
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	2210      	movs	r2, #16
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e00d      	b.n	80056d6 <UART_SetConfig+0x10a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7f      	ldr	r2, [pc, #508]	@ (80058bc <UART_SetConfig+0x2f0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d104      	bne.n	80056ce <UART_SetConfig+0x102>
 80056c4:	231f      	movs	r3, #31
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e003      	b.n	80056d6 <UART_SetConfig+0x10a>
 80056ce:	231f      	movs	r3, #31
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	2210      	movs	r2, #16
 80056d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	2380      	movs	r3, #128	@ 0x80
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	429a      	cmp	r2, r3
 80056e0:	d000      	beq.n	80056e4 <UART_SetConfig+0x118>
 80056e2:	e06f      	b.n	80057c4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80056e4:	231f      	movs	r3, #31
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d01f      	beq.n	800572e <UART_SetConfig+0x162>
 80056ee:	dc22      	bgt.n	8005736 <UART_SetConfig+0x16a>
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d017      	beq.n	8005724 <UART_SetConfig+0x158>
 80056f4:	dc1f      	bgt.n	8005736 <UART_SetConfig+0x16a>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <UART_SetConfig+0x134>
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d005      	beq.n	800570a <UART_SetConfig+0x13e>
 80056fe:	e01a      	b.n	8005736 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fe fa82 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8005704:	0003      	movs	r3, r0
 8005706:	61bb      	str	r3, [r7, #24]
        break;
 8005708:	e01c      	b.n	8005744 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800570a:	4b6b      	ldr	r3, [pc, #428]	@ (80058b8 <UART_SetConfig+0x2ec>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2207      	movs	r2, #7
 8005712:	4013      	ands	r3, r2
 8005714:	3301      	adds	r3, #1
 8005716:	0019      	movs	r1, r3
 8005718:	4869      	ldr	r0, [pc, #420]	@ (80058c0 <UART_SetConfig+0x2f4>)
 800571a:	f7fa fcf5 	bl	8000108 <__udivsi3>
 800571e:	0003      	movs	r3, r0
 8005720:	61bb      	str	r3, [r7, #24]
        break;
 8005722:	e00f      	b.n	8005744 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005724:	f7fe f9fa 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8005728:	0003      	movs	r3, r0
 800572a:	61bb      	str	r3, [r7, #24]
        break;
 800572c:	e00a      	b.n	8005744 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572e:	2380      	movs	r3, #128	@ 0x80
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	61bb      	str	r3, [r7, #24]
        break;
 8005734:	e006      	b.n	8005744 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800573a:	231e      	movs	r3, #30
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
        break;
 8005742:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d100      	bne.n	800574c <UART_SetConfig+0x180>
 800574a:	e097      	b.n	800587c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005750:	4b5c      	ldr	r3, [pc, #368]	@ (80058c4 <UART_SetConfig+0x2f8>)
 8005752:	0052      	lsls	r2, r2, #1
 8005754:	5ad3      	ldrh	r3, [r2, r3]
 8005756:	0019      	movs	r1, r3
 8005758:	69b8      	ldr	r0, [r7, #24]
 800575a:	f7fa fcd5 	bl	8000108 <__udivsi3>
 800575e:	0003      	movs	r3, r0
 8005760:	005a      	lsls	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	18d2      	adds	r2, r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	0019      	movs	r1, r3
 8005770:	0010      	movs	r0, r2
 8005772:	f7fa fcc9 	bl	8000108 <__udivsi3>
 8005776:	0003      	movs	r3, r0
 8005778:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b0f      	cmp	r3, #15
 800577e:	d91c      	bls.n	80057ba <UART_SetConfig+0x1ee>
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	2380      	movs	r3, #128	@ 0x80
 8005784:	025b      	lsls	r3, r3, #9
 8005786:	429a      	cmp	r2, r3
 8005788:	d217      	bcs.n	80057ba <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	b29a      	uxth	r2, r3
 800578e:	200e      	movs	r0, #14
 8005790:	183b      	adds	r3, r7, r0
 8005792:	210f      	movs	r1, #15
 8005794:	438a      	bics	r2, r1
 8005796:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	b29b      	uxth	r3, r3
 800579e:	2207      	movs	r2, #7
 80057a0:	4013      	ands	r3, r2
 80057a2:	b299      	uxth	r1, r3
 80057a4:	183b      	adds	r3, r7, r0
 80057a6:	183a      	adds	r2, r7, r0
 80057a8:	8812      	ldrh	r2, [r2, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	183a      	adds	r2, r7, r0
 80057b4:	8812      	ldrh	r2, [r2, #0]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e060      	b.n	800587c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80057ba:	231e      	movs	r3, #30
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e05b      	b.n	800587c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057c4:	231f      	movs	r3, #31
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d01f      	beq.n	800580e <UART_SetConfig+0x242>
 80057ce:	dc22      	bgt.n	8005816 <UART_SetConfig+0x24a>
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d017      	beq.n	8005804 <UART_SetConfig+0x238>
 80057d4:	dc1f      	bgt.n	8005816 <UART_SetConfig+0x24a>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <UART_SetConfig+0x214>
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d005      	beq.n	80057ea <UART_SetConfig+0x21e>
 80057de:	e01a      	b.n	8005816 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7fe fa12 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 80057e4:	0003      	movs	r3, r0
 80057e6:	61bb      	str	r3, [r7, #24]
        break;
 80057e8:	e01c      	b.n	8005824 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80057ea:	4b33      	ldr	r3, [pc, #204]	@ (80058b8 <UART_SetConfig+0x2ec>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	2207      	movs	r2, #7
 80057f2:	4013      	ands	r3, r2
 80057f4:	3301      	adds	r3, #1
 80057f6:	0019      	movs	r1, r3
 80057f8:	4831      	ldr	r0, [pc, #196]	@ (80058c0 <UART_SetConfig+0x2f4>)
 80057fa:	f7fa fc85 	bl	8000108 <__udivsi3>
 80057fe:	0003      	movs	r3, r0
 8005800:	61bb      	str	r3, [r7, #24]
        break;
 8005802:	e00f      	b.n	8005824 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005804:	f7fe f98a 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8005808:	0003      	movs	r3, r0
 800580a:	61bb      	str	r3, [r7, #24]
        break;
 800580c:	e00a      	b.n	8005824 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580e:	2380      	movs	r3, #128	@ 0x80
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	61bb      	str	r3, [r7, #24]
        break;
 8005814:	e006      	b.n	8005824 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800581a:	231e      	movs	r3, #30
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
        break;
 8005822:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d028      	beq.n	800587c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800582e:	4b25      	ldr	r3, [pc, #148]	@ (80058c4 <UART_SetConfig+0x2f8>)
 8005830:	0052      	lsls	r2, r2, #1
 8005832:	5ad3      	ldrh	r3, [r2, r3]
 8005834:	0019      	movs	r1, r3
 8005836:	69b8      	ldr	r0, [r7, #24]
 8005838:	f7fa fc66 	bl	8000108 <__udivsi3>
 800583c:	0003      	movs	r3, r0
 800583e:	001a      	movs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	18d2      	adds	r2, r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	0019      	movs	r1, r3
 800584e:	0010      	movs	r0, r2
 8005850:	f7fa fc5a 	bl	8000108 <__udivsi3>
 8005854:	0003      	movs	r3, r0
 8005856:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b0f      	cmp	r3, #15
 800585c:	d90a      	bls.n	8005874 <UART_SetConfig+0x2a8>
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	2380      	movs	r3, #128	@ 0x80
 8005862:	025b      	lsls	r3, r3, #9
 8005864:	429a      	cmp	r2, r3
 8005866:	d205      	bcs.n	8005874 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	e003      	b.n	800587c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8005874:	231e      	movs	r3, #30
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	226a      	movs	r2, #106	@ 0x6a
 8005880:	2101      	movs	r1, #1
 8005882:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2268      	movs	r2, #104	@ 0x68
 8005888:	2101      	movs	r1, #1
 800588a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005898:	231e      	movs	r3, #30
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	781b      	ldrb	r3, [r3, #0]
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b008      	add	sp, #32
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	cfff69f3 	.word	0xcfff69f3
 80058ac:	ffffcfff 	.word	0xffffcfff
 80058b0:	11fff4ff 	.word	0x11fff4ff
 80058b4:	40013800 	.word	0x40013800
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40004400 	.word	0x40004400
 80058c0:	02dc6c00 	.word	0x02dc6c00
 80058c4:	08006d58 	.word	0x08006d58

080058c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	2208      	movs	r2, #8
 80058d6:	4013      	ands	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a4a      	ldr	r2, [pc, #296]	@ (8005a0c <UART_AdvFeatureConfig+0x144>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	0019      	movs	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f6:	2201      	movs	r2, #1
 80058f8:	4013      	ands	r3, r2
 80058fa:	d00b      	beq.n	8005914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4a43      	ldr	r2, [pc, #268]	@ (8005a10 <UART_AdvFeatureConfig+0x148>)
 8005904:	4013      	ands	r3, r2
 8005906:	0019      	movs	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	2202      	movs	r2, #2
 800591a:	4013      	ands	r3, r2
 800591c:	d00b      	beq.n	8005936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a3b      	ldr	r2, [pc, #236]	@ (8005a14 <UART_AdvFeatureConfig+0x14c>)
 8005926:	4013      	ands	r3, r2
 8005928:	0019      	movs	r1, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	2204      	movs	r2, #4
 800593c:	4013      	ands	r3, r2
 800593e:	d00b      	beq.n	8005958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4a34      	ldr	r2, [pc, #208]	@ (8005a18 <UART_AdvFeatureConfig+0x150>)
 8005948:	4013      	ands	r3, r2
 800594a:	0019      	movs	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	2210      	movs	r2, #16
 800595e:	4013      	ands	r3, r2
 8005960:	d00b      	beq.n	800597a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4a2c      	ldr	r2, [pc, #176]	@ (8005a1c <UART_AdvFeatureConfig+0x154>)
 800596a:	4013      	ands	r3, r2
 800596c:	0019      	movs	r1, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597e:	2220      	movs	r2, #32
 8005980:	4013      	ands	r3, r2
 8005982:	d00b      	beq.n	800599c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	4a25      	ldr	r2, [pc, #148]	@ (8005a20 <UART_AdvFeatureConfig+0x158>)
 800598c:	4013      	ands	r3, r2
 800598e:	0019      	movs	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	2240      	movs	r2, #64	@ 0x40
 80059a2:	4013      	ands	r3, r2
 80059a4:	d01d      	beq.n	80059e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <UART_AdvFeatureConfig+0x15c>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	0019      	movs	r1, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	035b      	lsls	r3, r3, #13
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d10b      	bne.n	80059e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a15      	ldr	r2, [pc, #84]	@ (8005a28 <UART_AdvFeatureConfig+0x160>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	0019      	movs	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	2280      	movs	r2, #128	@ 0x80
 80059e8:	4013      	ands	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4a0e      	ldr	r2, [pc, #56]	@ (8005a2c <UART_AdvFeatureConfig+0x164>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	0019      	movs	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }
}
 8005a04:	46c0      	nop			@ (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	ffff7fff 	.word	0xffff7fff
 8005a10:	fffdffff 	.word	0xfffdffff
 8005a14:	fffeffff 	.word	0xfffeffff
 8005a18:	fffbffff 	.word	0xfffbffff
 8005a1c:	ffffefff 	.word	0xffffefff
 8005a20:	ffffdfff 	.word	0xffffdfff
 8005a24:	ffefffff 	.word	0xffefffff
 8005a28:	ff9fffff 	.word	0xff9fffff
 8005a2c:	fff7ffff 	.word	0xfff7ffff

08005a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b092      	sub	sp, #72	@ 0x48
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2290      	movs	r2, #144	@ 0x90
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a40:	f7fc f9aa 	bl	8001d98 <HAL_GetTick>
 8005a44:	0003      	movs	r3, r0
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2208      	movs	r2, #8
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d12d      	bne.n	8005ab2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a58:	2280      	movs	r2, #128	@ 0x80
 8005a5a:	0391      	lsls	r1, r2, #14
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4a47      	ldr	r2, [pc, #284]	@ (8005b7c <UART_CheckIdleState+0x14c>)
 8005a60:	9200      	str	r2, [sp, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f000 f88e 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005a68:	1e03      	subs	r3, r0, #0
 8005a6a:	d022      	beq.n	8005ab2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a76:	2301      	movs	r3, #1
 8005a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7c:	f383 8810 	msr	PRIMASK, r3
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2180      	movs	r1, #128	@ 0x80
 8005a8e:	438a      	bics	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2288      	movs	r2, #136	@ 0x88
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2284      	movs	r2, #132	@ 0x84
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e060      	b.n	8005b74 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2204      	movs	r2, #4
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d146      	bne.n	8005b4e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac2:	2280      	movs	r2, #128	@ 0x80
 8005ac4:	03d1      	lsls	r1, r2, #15
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b7c <UART_CheckIdleState+0x14c>)
 8005aca:	9200      	str	r2, [sp, #0]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f000 f859 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005ad2:	1e03      	subs	r3, r0, #0
 8005ad4:	d03b      	beq.n	8005b4e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8005ada:	60fb      	str	r3, [r7, #12]
  return(result);
 8005adc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f383 8810 	msr	PRIMASK, r3
}
 8005aea:	46c0      	nop			@ (mov r8, r8)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4922      	ldr	r1, [pc, #136]	@ (8005b80 <UART_CheckIdleState+0x150>)
 8005af8:	400a      	ands	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f383 8810 	msr	PRIMASK, r3
}
 8005b06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b08:	f3ef 8310 	mrs	r3, PRIMASK
 8005b0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b12:	2301      	movs	r3, #1
 8005b14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f383 8810 	msr	PRIMASK, r3
}
 8005b1c:	46c0      	nop			@ (mov r8, r8)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2101      	movs	r1, #1
 8005b2a:	438a      	bics	r2, r1
 8005b2c:	609a      	str	r2, [r3, #8]
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f383 8810 	msr	PRIMASK, r3
}
 8005b38:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	228c      	movs	r2, #140	@ 0x8c
 8005b3e:	2120      	movs	r1, #32
 8005b40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2284      	movs	r2, #132	@ 0x84
 8005b46:	2100      	movs	r1, #0
 8005b48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e012      	b.n	8005b74 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2288      	movs	r2, #136	@ 0x88
 8005b52:	2120      	movs	r1, #32
 8005b54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	228c      	movs	r2, #140	@ 0x8c
 8005b5a:	2120      	movs	r1, #32
 8005b5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2284      	movs	r2, #132	@ 0x84
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b010      	add	sp, #64	@ 0x40
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	01ffffff 	.word	0x01ffffff
 8005b80:	fffffedf 	.word	0xfffffedf

08005b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	1dfb      	adds	r3, r7, #7
 8005b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b94:	e051      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	d04e      	beq.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9c:	f7fc f8fc 	bl	8001d98 <HAL_GetTick>
 8005ba0:	0002      	movs	r2, r0
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d302      	bcc.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e051      	b.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d03b      	beq.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b80      	cmp	r3, #128	@ 0x80
 8005bc6:	d038      	beq.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b40      	cmp	r3, #64	@ 0x40
 8005bcc:	d035      	beq.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d111      	bne.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2208      	movs	r2, #8
 8005be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 f922 	bl	8005e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2290      	movs	r2, #144	@ 0x90
 8005bf0:	2108      	movs	r1, #8
 8005bf2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2284      	movs	r2, #132	@ 0x84
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e02c      	b.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69da      	ldr	r2, [r3, #28]
 8005c06:	2380      	movs	r3, #128	@ 0x80
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	2380      	movs	r3, #128	@ 0x80
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d112      	bne.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2280      	movs	r2, #128	@ 0x80
 8005c1a:	0112      	lsls	r2, r2, #4
 8005c1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f905 	bl	8005e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2290      	movs	r2, #144	@ 0x90
 8005c2a:	2120      	movs	r1, #32
 8005c2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2284      	movs	r2, #132	@ 0x84
 8005c32:	2100      	movs	r1, #0
 8005c34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e00f      	b.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	425a      	negs	r2, r3
 8005c4a:	4153      	adcs	r3, r2
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	001a      	movs	r2, r3
 8005c50:	1dfb      	adds	r3, r7, #7
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d09e      	beq.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b004      	add	sp, #16
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b090      	sub	sp, #64	@ 0x40
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	1dbb      	adds	r3, r7, #6
 8005c70:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	1dba      	adds	r2, r7, #6
 8005c7c:	215c      	movs	r1, #92	@ 0x5c
 8005c7e:	8812      	ldrh	r2, [r2, #0]
 8005c80:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2290      	movs	r2, #144	@ 0x90
 8005c86:	2100      	movs	r1, #0
 8005c88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	228c      	movs	r2, #140	@ 0x8c
 8005c8e:	2122      	movs	r1, #34	@ 0x22
 8005c90:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2280      	movs	r2, #128	@ 0x80
 8005c96:	589b      	ldr	r3, [r3, r2]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02d      	beq.n	8005cf8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2280      	movs	r2, #128	@ 0x80
 8005ca0:	589b      	ldr	r3, [r3, r2]
 8005ca2:	4a40      	ldr	r2, [pc, #256]	@ (8005da4 <UART_Start_Receive_DMA+0x140>)
 8005ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2280      	movs	r2, #128	@ 0x80
 8005caa:	589b      	ldr	r3, [r3, r2]
 8005cac:	4a3e      	ldr	r2, [pc, #248]	@ (8005da8 <UART_Start_Receive_DMA+0x144>)
 8005cae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2280      	movs	r2, #128	@ 0x80
 8005cb4:	589b      	ldr	r3, [r3, r2]
 8005cb6:	4a3d      	ldr	r2, [pc, #244]	@ (8005dac <UART_Start_Receive_DMA+0x148>)
 8005cb8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2280      	movs	r2, #128	@ 0x80
 8005cbe:	589b      	ldr	r3, [r3, r2]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2280      	movs	r2, #128	@ 0x80
 8005cc8:	5898      	ldr	r0, [r3, r2]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3324      	adds	r3, #36	@ 0x24
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd6:	001a      	movs	r2, r3
 8005cd8:	1dbb      	adds	r3, r7, #6
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	f7fc fe6c 	bl	80029b8 <HAL_DMA_Start_IT>
 8005ce0:	1e03      	subs	r3, r0, #0
 8005ce2:	d009      	beq.n	8005cf8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2290      	movs	r2, #144	@ 0x90
 8005ce8:	2110      	movs	r1, #16
 8005cea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	228c      	movs	r2, #140	@ 0x8c
 8005cf0:	2120      	movs	r1, #32
 8005cf2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e050      	b.n	8005d9a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d019      	beq.n	8005d34 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d00:	f3ef 8310 	mrs	r3, PRIMASK
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d10:	f383 8810 	msr	PRIMASK, r3
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2180      	movs	r1, #128	@ 0x80
 8005d22:	0049      	lsls	r1, r1, #1
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	f383 8810 	msr	PRIMASK, r3
}
 8005d32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d34:	f3ef 8310 	mrs	r3, PRIMASK
 8005d38:	613b      	str	r3, [r7, #16]
  return(result);
 8005d3a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d3e:	2301      	movs	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2101      	movs	r1, #1
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f383 8810 	msr	PRIMASK, r3
}
 8005d64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d66:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d6c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d70:	2301      	movs	r3, #1
 8005d72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f383 8810 	msr	PRIMASK, r3
}
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2140      	movs	r1, #64	@ 0x40
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	f383 8810 	msr	PRIMASK, r3
}
 8005d96:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b010      	add	sp, #64	@ 0x40
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	08005efd 	.word	0x08005efd
 8005da8:	0800602d 	.word	0x0800602d
 8005dac:	0800606f 	.word	0x0800606f

08005db0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	@ 0x28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005db8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f383 8810 	msr	PRIMASK, r3
}
 8005dcc:	46c0      	nop			@ (mov r8, r8)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	21c0      	movs	r1, #192	@ 0xc0
 8005dda:	438a      	bics	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f383 8810 	msr	PRIMASK, r3
}
 8005de8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dea:	f3ef 8310 	mrs	r3, PRIMASK
 8005dee:	617b      	str	r3, [r7, #20]
  return(result);
 8005df0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	2301      	movs	r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f383 8810 	msr	PRIMASK, r3
}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4908      	ldr	r1, [pc, #32]	@ (8005e2c <UART_EndTxTransfer+0x7c>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f383 8810 	msr	PRIMASK, r3
}
 8005e1a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2288      	movs	r2, #136	@ 0x88
 8005e20:	2120      	movs	r1, #32
 8005e22:	5099      	str	r1, [r3, r2]
}
 8005e24:	46c0      	nop			@ (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b00a      	add	sp, #40	@ 0x28
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	ff7fffff 	.word	0xff7fffff

08005e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	@ 0x38
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e38:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e42:	2301      	movs	r3, #1
 8005e44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4926      	ldr	r1, [pc, #152]	@ (8005ef4 <UART_EndRxTransfer+0xc4>)
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f383 8810 	msr	PRIMASK, r3
}
 8005e68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6e:	623b      	str	r3, [r7, #32]
  return(result);
 8005e70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e74:	2301      	movs	r3, #1
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	f383 8810 	msr	PRIMASK, r3
}
 8005e7e:	46c0      	nop			@ (mov r8, r8)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	491b      	ldr	r1, [pc, #108]	@ (8005ef8 <UART_EndRxTransfer+0xc8>)
 8005e8c:	400a      	ands	r2, r1
 8005e8e:	609a      	str	r2, [r3, #8]
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	f383 8810 	msr	PRIMASK, r3
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d118      	bne.n	8005ed6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eae:	2301      	movs	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f383 8810 	msr	PRIMASK, r3
}
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2110      	movs	r1, #16
 8005ec6:	438a      	bics	r2, r1
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f383 8810 	msr	PRIMASK, r3
}
 8005ed4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	228c      	movs	r2, #140	@ 0x8c
 8005eda:	2120      	movs	r1, #32
 8005edc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005eea:	46c0      	nop			@ (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b00e      	add	sp, #56	@ 0x38
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			@ (mov r8, r8)
 8005ef4:	fffffedf 	.word	0xfffffedf
 8005ef8:	effffffe 	.word	0xeffffffe

08005efc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b094      	sub	sp, #80	@ 0x50
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2220      	movs	r2, #32
 8005f12:	4013      	ands	r3, r2
 8005f14:	d16f      	bne.n	8005ff6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f18:	225e      	movs	r2, #94	@ 0x5e
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f22:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f24:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f28:	2301      	movs	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f383 8810 	msr	PRIMASK, r3
}
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	493a      	ldr	r1, [pc, #232]	@ (8006028 <UART_DMAReceiveCplt+0x12c>)
 8005f40:	400a      	ands	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	f383 8810 	msr	PRIMASK, r3
}
 8005f4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f50:	f3ef 8310 	mrs	r3, PRIMASK
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	f383 8810 	msr	PRIMASK, r3
}
 8005f64:	46c0      	nop			@ (mov r8, r8)
 8005f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2101      	movs	r1, #1
 8005f72:	438a      	bics	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]
 8005f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	f383 8810 	msr	PRIMASK, r3
}
 8005f80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f82:	f3ef 8310 	mrs	r3, PRIMASK
 8005f86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f92:	f383 8810 	msr	PRIMASK, r3
}
 8005f96:	46c0      	nop			@ (mov r8, r8)
 8005f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2140      	movs	r1, #64	@ 0x40
 8005fa4:	438a      	bics	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005faa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fae:	f383 8810 	msr	PRIMASK, r3
}
 8005fb2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fb6:	228c      	movs	r2, #140	@ 0x8c
 8005fb8:	2120      	movs	r1, #32
 8005fba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d118      	bne.n	8005ff6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fce:	2301      	movs	r3, #1
 8005fd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f383 8810 	msr	PRIMASK, r3
}
 8005fd8:	46c0      	nop			@ (mov r8, r8)
 8005fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2110      	movs	r1, #16
 8005fe6:	438a      	bics	r2, r1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f383 8810 	msr	PRIMASK, r3
}
 8005ff4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d108      	bne.n	8006016 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006006:	225c      	movs	r2, #92	@ 0x5c
 8006008:	5a9a      	ldrh	r2, [r3, r2]
 800600a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600c:	0011      	movs	r1, r2
 800600e:	0018      	movs	r0, r3
 8006010:	f7fa fe1c 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006014:	e003      	b.n	800601e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006018:	0018      	movs	r0, r3
 800601a:	f7ff fab7 	bl	800558c <HAL_UART_RxCpltCallback>
}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	46bd      	mov	sp, r7
 8006022:	b014      	add	sp, #80	@ 0x50
 8006024:	bd80      	pop	{r7, pc}
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	fffffeff 	.word	0xfffffeff

0800602c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10a      	bne.n	800605e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	225c      	movs	r2, #92	@ 0x5c
 800604c:	5a9b      	ldrh	r3, [r3, r2]
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	0011      	movs	r1, r2
 8006056:	0018      	movs	r0, r3
 8006058:	f7fa fdf8 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800605c:	e003      	b.n	8006066 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0018      	movs	r0, r3
 8006062:	f7ff fa9b 	bl	800559c <HAL_UART_RxHalfCpltCallback>
}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b004      	add	sp, #16
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2288      	movs	r2, #136	@ 0x88
 8006080:	589b      	ldr	r3, [r3, r2]
 8006082:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	228c      	movs	r2, #140	@ 0x8c
 8006088:	589b      	ldr	r3, [r3, r2]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2280      	movs	r2, #128	@ 0x80
 8006094:	4013      	ands	r3, r2
 8006096:	2b80      	cmp	r3, #128	@ 0x80
 8006098:	d10a      	bne.n	80060b0 <UART_DMAError+0x42>
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b21      	cmp	r3, #33	@ 0x21
 800609e:	d107      	bne.n	80060b0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2256      	movs	r2, #86	@ 0x56
 80060a4:	2100      	movs	r1, #0
 80060a6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	0018      	movs	r0, r3
 80060ac:	f7ff fe80 	bl	8005db0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2240      	movs	r2, #64	@ 0x40
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b40      	cmp	r3, #64	@ 0x40
 80060bc:	d10a      	bne.n	80060d4 <UART_DMAError+0x66>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b22      	cmp	r3, #34	@ 0x22
 80060c2:	d107      	bne.n	80060d4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	225e      	movs	r2, #94	@ 0x5e
 80060c8:	2100      	movs	r1, #0
 80060ca:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7ff feae 	bl	8005e30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2290      	movs	r2, #144	@ 0x90
 80060d8:	589b      	ldr	r3, [r3, r2]
 80060da:	2210      	movs	r2, #16
 80060dc:	431a      	orrs	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2190      	movs	r1, #144	@ 0x90
 80060e2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f7ff fa60 	bl	80055ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ec:	46c0      	nop			@ (mov r8, r8)
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b006      	add	sp, #24
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	225e      	movs	r2, #94	@ 0x5e
 8006106:	2100      	movs	r1, #0
 8006108:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2256      	movs	r2, #86	@ 0x56
 800610e:	2100      	movs	r1, #0
 8006110:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0018      	movs	r0, r3
 8006116:	f7ff fa49 	bl	80055ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	46bd      	mov	sp, r7
 800611e:	b004      	add	sp, #16
 8006120:	bd80      	pop	{r7, pc}

08006122 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006134:	2200      	movs	r2, #0
 8006136:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2280      	movs	r2, #128	@ 0x80
 800613c:	589b      	ldr	r3, [r3, r2]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2280      	movs	r2, #128	@ 0x80
 8006146:	589b      	ldr	r3, [r3, r2]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d12d      	bne.n	80061aa <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2256      	movs	r2, #86	@ 0x56
 8006152:	2100      	movs	r1, #0
 8006154:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	225e      	movs	r2, #94	@ 0x5e
 800615a:	2100      	movs	r1, #0
 800615c:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2290      	movs	r2, #144	@ 0x90
 8006162:	2100      	movs	r1, #0
 8006164:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	220f      	movs	r2, #15
 800616c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006172:	2380      	movs	r3, #128	@ 0x80
 8006174:	059b      	lsls	r3, r3, #22
 8006176:	429a      	cmp	r2, r3
 8006178:	d107      	bne.n	800618a <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2110      	movs	r1, #16
 8006186:	430a      	orrs	r2, r1
 8006188:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2288      	movs	r2, #136	@ 0x88
 800618e:	2120      	movs	r1, #32
 8006190:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	228c      	movs	r2, #140	@ 0x8c
 8006196:	2120      	movs	r1, #32
 8006198:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	0018      	movs	r0, r3
 80061a4:	f7ff fa0a 	bl	80055bc <HAL_UART_AbortCpltCallback>
 80061a8:	e000      	b.n	80061ac <UART_DMATxAbortCallback+0x8a>
      return;
 80061aa:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b004      	add	sp, #16
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061be:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2280      	movs	r2, #128	@ 0x80
 80061c4:	589b      	ldr	r3, [r3, r2]
 80061c6:	2200      	movs	r2, #0
 80061c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d127      	bne.n	800622c <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2256      	movs	r2, #86	@ 0x56
 80061e0:	2100      	movs	r1, #0
 80061e2:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	225e      	movs	r2, #94	@ 0x5e
 80061e8:	2100      	movs	r1, #0
 80061ea:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2290      	movs	r2, #144	@ 0x90
 80061f0:	2100      	movs	r1, #0
 80061f2:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	220f      	movs	r2, #15
 80061fa:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2108      	movs	r1, #8
 8006208:	430a      	orrs	r2, r1
 800620a:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2288      	movs	r2, #136	@ 0x88
 8006210:	2120      	movs	r1, #32
 8006212:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	228c      	movs	r2, #140	@ 0x8c
 8006218:	2120      	movs	r1, #32
 800621a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	0018      	movs	r0, r3
 8006226:	f7ff f9c9 	bl	80055bc <HAL_UART_AbortCpltCallback>
 800622a:	e000      	b.n	800622e <UART_DMARxAbortCallback+0x7c>
      return;
 800622c:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800622e:	46bd      	mov	sp, r7
 8006230:	b004      	add	sp, #16
 8006232:	bd80      	pop	{r7, pc}

08006234 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	@ 0x28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2288      	movs	r2, #136	@ 0x88
 8006240:	589b      	ldr	r3, [r3, r2]
 8006242:	2b21      	cmp	r3, #33	@ 0x21
 8006244:	d14c      	bne.n	80062e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2256      	movs	r2, #86	@ 0x56
 800624a:	5a9b      	ldrh	r3, [r3, r2]
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d132      	bne.n	80062b8 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006252:	f3ef 8310 	mrs	r3, PRIMASK
 8006256:	60bb      	str	r3, [r7, #8]
  return(result);
 8006258:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
 800625c:	2301      	movs	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f383 8810 	msr	PRIMASK, r3
}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2180      	movs	r1, #128	@ 0x80
 8006274:	438a      	bics	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f383 8810 	msr	PRIMASK, r3
}
 8006282:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006284:	f3ef 8310 	mrs	r3, PRIMASK
 8006288:	617b      	str	r3, [r7, #20]
  return(result);
 800628a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	2301      	movs	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	f383 8810 	msr	PRIMASK, r3
}
 8006298:	46c0      	nop			@ (mov r8, r8)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2140      	movs	r1, #64	@ 0x40
 80062a6:	430a      	orrs	r2, r1
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f383 8810 	msr	PRIMASK, r3
}
 80062b4:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80062b6:	e013      	b.n	80062e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2256      	movs	r2, #86	@ 0x56
 80062d2:	5a9b      	ldrh	r3, [r3, r2]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b299      	uxth	r1, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2256      	movs	r2, #86	@ 0x56
 80062de:	5299      	strh	r1, [r3, r2]
}
 80062e0:	46c0      	nop			@ (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b00a      	add	sp, #40	@ 0x28
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	@ 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2288      	movs	r2, #136	@ 0x88
 80062f4:	589b      	ldr	r3, [r3, r2]
 80062f6:	2b21      	cmp	r3, #33	@ 0x21
 80062f8:	d151      	bne.n	800639e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2256      	movs	r2, #86	@ 0x56
 80062fe:	5a9b      	ldrh	r3, [r3, r2]
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d132      	bne.n	800636c <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006306:	f3ef 8310 	mrs	r3, PRIMASK
 800630a:	60fb      	str	r3, [r7, #12]
  return(result);
 800630c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800630e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006310:	2301      	movs	r3, #1
 8006312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f383 8810 	msr	PRIMASK, r3
}
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2180      	movs	r1, #128	@ 0x80
 8006328:	438a      	bics	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f383 8810 	msr	PRIMASK, r3
}
 8006336:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006338:	f3ef 8310 	mrs	r3, PRIMASK
 800633c:	61bb      	str	r3, [r7, #24]
  return(result);
 800633e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24
 8006342:	2301      	movs	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f383 8810 	msr	PRIMASK, r3
}
 800634c:	46c0      	nop			@ (mov r8, r8)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2140      	movs	r1, #64	@ 0x40
 800635a:	430a      	orrs	r2, r1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f383 8810 	msr	PRIMASK, r3
}
 8006368:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800636a:	e018      	b.n	800639e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006370:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	001a      	movs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	05d2      	lsls	r2, r2, #23
 800637e:	0dd2      	lsrs	r2, r2, #23
 8006380:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2256      	movs	r2, #86	@ 0x56
 8006390:	5a9b      	ldrh	r3, [r3, r2]
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b299      	uxth	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2256      	movs	r2, #86	@ 0x56
 800639c:	5299      	strh	r1, [r3, r2]
}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b00c      	add	sp, #48	@ 0x30
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08c      	sub	sp, #48	@ 0x30
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2288      	movs	r2, #136	@ 0x88
 80063b4:	589b      	ldr	r3, [r3, r2]
 80063b6:	2b21      	cmp	r3, #33	@ 0x21
 80063b8:	d165      	bne.n	8006486 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80063ba:	232e      	movs	r3, #46	@ 0x2e
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	216a      	movs	r1, #106	@ 0x6a
 80063c2:	5a52      	ldrh	r2, [r2, r1]
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e059      	b.n	800647c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2256      	movs	r2, #86	@ 0x56
 80063cc:	5a9b      	ldrh	r3, [r3, r2]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d133      	bne.n	800643c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063d4:	f3ef 8310 	mrs	r3, PRIMASK
 80063d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80063da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063de:	2301      	movs	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f383 8810 	msr	PRIMASK, r3
}
 80063e8:	46c0      	nop			@ (mov r8, r8)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4926      	ldr	r1, [pc, #152]	@ (8006490 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80063f6:	400a      	ands	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f383 8810 	msr	PRIMASK, r3
}
 8006404:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006406:	f3ef 8310 	mrs	r3, PRIMASK
 800640a:	61bb      	str	r3, [r7, #24]
  return(result);
 800640c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006410:	2301      	movs	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f383 8810 	msr	PRIMASK, r3
}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2140      	movs	r1, #64	@ 0x40
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	f383 8810 	msr	PRIMASK, r3
}
 8006436:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8006438:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800643a:	e024      	b.n	8006486 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	2280      	movs	r2, #128	@ 0x80
 8006444:	4013      	ands	r3, r2
 8006446:	d013      	beq.n	8006470 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2256      	movs	r2, #86	@ 0x56
 8006462:	5a9b      	ldrh	r3, [r3, r2]
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b299      	uxth	r1, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2256      	movs	r2, #86	@ 0x56
 800646e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006470:	212e      	movs	r1, #46	@ 0x2e
 8006472:	187b      	adds	r3, r7, r1
 8006474:	881a      	ldrh	r2, [r3, #0]
 8006476:	187b      	adds	r3, r7, r1
 8006478:	3a01      	subs	r2, #1
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	232e      	movs	r3, #46	@ 0x2e
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1a0      	bne.n	80063c8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8006486:	46c0      	nop			@ (mov r8, r8)
 8006488:	46bd      	mov	sp, r7
 800648a:	b00c      	add	sp, #48	@ 0x30
 800648c:	bd80      	pop	{r7, pc}
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	ff7fffff 	.word	0xff7fffff

08006494 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	@ 0x30
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2288      	movs	r2, #136	@ 0x88
 80064a0:	589b      	ldr	r3, [r3, r2]
 80064a2:	2b21      	cmp	r3, #33	@ 0x21
 80064a4:	d16a      	bne.n	800657c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80064a6:	232e      	movs	r3, #46	@ 0x2e
 80064a8:	18fb      	adds	r3, r7, r3
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	216a      	movs	r1, #106	@ 0x6a
 80064ae:	5a52      	ldrh	r2, [r2, r1]
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e05e      	b.n	8006572 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2256      	movs	r2, #86	@ 0x56
 80064b8:	5a9b      	ldrh	r3, [r3, r2]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d133      	bne.n	8006528 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064c0:	f3ef 8310 	mrs	r3, PRIMASK
 80064c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80064c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ca:	2301      	movs	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f383 8810 	msr	PRIMASK, r3
}
 80064d4:	46c0      	nop			@ (mov r8, r8)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4928      	ldr	r1, [pc, #160]	@ (8006584 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80064e2:	400a      	ands	r2, r1
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f383 8810 	msr	PRIMASK, r3
}
 80064f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064f2:	f3ef 8310 	mrs	r3, PRIMASK
 80064f6:	617b      	str	r3, [r7, #20]
  return(result);
 80064f8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064fa:	623b      	str	r3, [r7, #32]
 80064fc:	2301      	movs	r3, #1
 80064fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f383 8810 	msr	PRIMASK, r3
}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2140      	movs	r1, #64	@ 0x40
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f383 8810 	msr	PRIMASK, r3
}
 8006522:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8006524:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006526:	e029      	b.n	800657c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	2280      	movs	r2, #128	@ 0x80
 8006530:	4013      	ands	r3, r2
 8006532:	d018      	beq.n	8006566 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006538:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	001a      	movs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	05d2      	lsls	r2, r2, #23
 8006546:	0dd2      	lsrs	r2, r2, #23
 8006548:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654e:	1c9a      	adds	r2, r3, #2
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2256      	movs	r2, #86	@ 0x56
 8006558:	5a9b      	ldrh	r3, [r3, r2]
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b299      	uxth	r1, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2256      	movs	r2, #86	@ 0x56
 8006564:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006566:	212e      	movs	r1, #46	@ 0x2e
 8006568:	187b      	adds	r3, r7, r1
 800656a:	881a      	ldrh	r2, [r3, #0]
 800656c:	187b      	adds	r3, r7, r1
 800656e:	3a01      	subs	r2, #1
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	232e      	movs	r3, #46	@ 0x2e
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d19b      	bne.n	80064b4 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800657c:	46c0      	nop			@ (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b00c      	add	sp, #48	@ 0x30
 8006582:	bd80      	pop	{r7, pc}
 8006584:	ff7fffff 	.word	0xff7fffff

08006588 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006590:	f3ef 8310 	mrs	r3, PRIMASK
 8006594:	60bb      	str	r3, [r7, #8]
  return(result);
 8006596:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	2301      	movs	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f383 8810 	msr	PRIMASK, r3
}
 80065a4:	46c0      	nop			@ (mov r8, r8)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2140      	movs	r1, #64	@ 0x40
 80065b2:	438a      	bics	r2, r1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f383 8810 	msr	PRIMASK, r3
}
 80065c0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2288      	movs	r2, #136	@ 0x88
 80065c6:	2120      	movs	r1, #32
 80065c8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7fa fbe4 	bl	8000da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d8:	46c0      	nop			@ (mov r8, r8)
 80065da:	46bd      	mov	sp, r7
 80065dc:	b006      	add	sp, #24
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e05d      	b.n	80066b4 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2288      	movs	r2, #136	@ 0x88
 80065fc:	589b      	ldr	r3, [r3, r2]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2284      	movs	r2, #132	@ 0x84
 8006606:	2100      	movs	r1, #0
 8006608:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	0018      	movs	r0, r3
 800660e:	f7fb f9ef 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2288      	movs	r2, #136	@ 0x88
 8006616:	2124      	movs	r1, #36	@ 0x24
 8006618:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2101      	movs	r1, #1
 8006626:	438a      	bics	r2, r1
 8006628:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	0018      	movs	r0, r3
 8006636:	f7ff f947 	bl	80058c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	0018      	movs	r0, r3
 800663e:	f7fe ffc5 	bl	80055cc <UART_SetConfig>
 8006642:	0003      	movs	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e033      	b.n	80066b4 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2180      	movs	r1, #128	@ 0x80
 8006658:	01c9      	lsls	r1, r1, #7
 800665a:	430a      	orrs	r2, r1
 800665c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a15      	ldr	r2, [pc, #84]	@ (80066bc <HAL_RS485Ex_Init+0xdc>)
 8006666:	4013      	ands	r3, r2
 8006668:	0019      	movs	r1, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	055b      	lsls	r3, r3, #21
 8006678:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a0d      	ldr	r2, [pc, #52]	@ (80066c0 <HAL_RS485Ex_Init+0xe0>)
 800668c:	4013      	ands	r3, r2
 800668e:	0019      	movs	r1, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	430a      	orrs	r2, r1
 8006698:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2101      	movs	r1, #1
 80066a6:	430a      	orrs	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	0018      	movs	r0, r3
 80066ae:	f7ff f9bf 	bl	8005a30 <UART_CheckIdleState>
 80066b2:	0003      	movs	r3, r0
}
 80066b4:	0018      	movs	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b006      	add	sp, #24
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	ffff7fff 	.word	0xffff7fff
 80066c0:	fc00ffff 	.word	0xfc00ffff

080066c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066cc:	46c0      	nop			@ (mov r8, r8)
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b002      	add	sp, #8
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066dc:	46c0      	nop			@ (mov r8, r8)
 80066de:	46bd      	mov	sp, r7
 80066e0:	b002      	add	sp, #8
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066ec:	46c0      	nop			@ (mov r8, r8)
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2284      	movs	r2, #132	@ 0x84
 8006700:	5c9b      	ldrb	r3, [r3, r2]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_UARTEx_DisableFifoMode+0x16>
 8006706:	2302      	movs	r3, #2
 8006708:	e027      	b.n	800675a <HAL_UARTEx_DisableFifoMode+0x66>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2284      	movs	r2, #132	@ 0x84
 800670e:	2101      	movs	r1, #1
 8006710:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2288      	movs	r2, #136	@ 0x88
 8006716:	2124      	movs	r1, #36	@ 0x24
 8006718:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2101      	movs	r1, #1
 800672e:	438a      	bics	r2, r1
 8006730:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a0b      	ldr	r2, [pc, #44]	@ (8006764 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006736:	4013      	ands	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2288      	movs	r2, #136	@ 0x88
 800674c:	2120      	movs	r1, #32
 800674e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2284      	movs	r2, #132	@ 0x84
 8006754:	2100      	movs	r1, #0
 8006756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	b004      	add	sp, #16
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	dfffffff 	.word	0xdfffffff

08006768 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2284      	movs	r2, #132	@ 0x84
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e02e      	b.n	80067de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2284      	movs	r2, #132	@ 0x84
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2288      	movs	r2, #136	@ 0x88
 800678c:	2124      	movs	r1, #36	@ 0x24
 800678e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2101      	movs	r1, #1
 80067a4:	438a      	bics	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	08d9      	lsrs	r1, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f000 f8bc 	bl	800693c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2288      	movs	r2, #136	@ 0x88
 80067d0:	2120      	movs	r1, #32
 80067d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2284      	movs	r2, #132	@ 0x84
 80067d8:	2100      	movs	r1, #0
 80067da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b004      	add	sp, #16
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2284      	movs	r2, #132	@ 0x84
 80067f6:	5c9b      	ldrb	r3, [r3, r2]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e02f      	b.n	8006860 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2284      	movs	r2, #132	@ 0x84
 8006804:	2101      	movs	r1, #1
 8006806:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2288      	movs	r2, #136	@ 0x88
 800680c:	2124      	movs	r1, #36	@ 0x24
 800680e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2101      	movs	r1, #1
 8006824:	438a      	bics	r2, r1
 8006826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	4a0e      	ldr	r2, [pc, #56]	@ (8006868 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006830:	4013      	ands	r3, r2
 8006832:	0019      	movs	r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	0018      	movs	r0, r3
 8006842:	f000 f87b 	bl	800693c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2288      	movs	r2, #136	@ 0x88
 8006852:	2120      	movs	r1, #32
 8006854:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2284      	movs	r2, #132	@ 0x84
 800685a:	2100      	movs	r1, #0
 800685c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	0018      	movs	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	b004      	add	sp, #16
 8006866:	bd80      	pop	{r7, pc}
 8006868:	f1ffffff 	.word	0xf1ffffff

0800686c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800686c:	b5b0      	push	{r4, r5, r7, lr}
 800686e:	b08a      	sub	sp, #40	@ 0x28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	1dbb      	adds	r3, r7, #6
 8006878:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	228c      	movs	r2, #140	@ 0x8c
 800687e:	589b      	ldr	r3, [r3, r2]
 8006880:	2b20      	cmp	r3, #32
 8006882:	d156      	bne.n	8006932 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800688a:	1dbb      	adds	r3, r7, #6
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e04e      	b.n	8006934 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	2380      	movs	r3, #128	@ 0x80
 800689c:	015b      	lsls	r3, r3, #5
 800689e:	429a      	cmp	r2, r3
 80068a0:	d109      	bne.n	80068b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2201      	movs	r2, #1
 80068ae:	4013      	ands	r3, r2
 80068b0:	d001      	beq.n	80068b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e03e      	b.n	8006934 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80068c2:	2527      	movs	r5, #39	@ 0x27
 80068c4:	197c      	adds	r4, r7, r5
 80068c6:	1dbb      	adds	r3, r7, #6
 80068c8:	881a      	ldrh	r2, [r3, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f7ff f9c8 	bl	8005c64 <UART_Start_Receive_DMA>
 80068d4:	0003      	movs	r3, r0
 80068d6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80068d8:	197b      	adds	r3, r7, r5
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d124      	bne.n	800692a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d11c      	bne.n	8006922 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2210      	movs	r2, #16
 80068ee:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80068f0:	f3ef 8310 	mrs	r3, PRIMASK
 80068f4:	617b      	str	r3, [r7, #20]
  return(result);
 80068f6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	2301      	movs	r3, #1
 80068fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f383 8810 	msr	PRIMASK, r3
}
 8006904:	46c0      	nop			@ (mov r8, r8)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2110      	movs	r1, #16
 8006912:	430a      	orrs	r2, r1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f383 8810 	msr	PRIMASK, r3
}
 8006920:	e003      	b.n	800692a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006922:	2327      	movs	r3, #39	@ 0x27
 8006924:	18fb      	adds	r3, r7, r3
 8006926:	2201      	movs	r2, #1
 8006928:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800692a:	2327      	movs	r3, #39	@ 0x27
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	e000      	b.n	8006934 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	0018      	movs	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	b00a      	add	sp, #40	@ 0x28
 800693a:	bdb0      	pop	{r4, r5, r7, pc}

0800693c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	226a      	movs	r2, #106	@ 0x6a
 8006950:	2101      	movs	r1, #1
 8006952:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2268      	movs	r2, #104	@ 0x68
 8006958:	2101      	movs	r1, #1
 800695a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800695c:	e043      	b.n	80069e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800695e:	260f      	movs	r6, #15
 8006960:	19bb      	adds	r3, r7, r6
 8006962:	2208      	movs	r2, #8
 8006964:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006966:	200e      	movs	r0, #14
 8006968:	183b      	adds	r3, r7, r0
 800696a:	2208      	movs	r2, #8
 800696c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	0e5b      	lsrs	r3, r3, #25
 8006976:	b2da      	uxtb	r2, r3
 8006978:	240d      	movs	r4, #13
 800697a:	193b      	adds	r3, r7, r4
 800697c:	2107      	movs	r1, #7
 800697e:	400a      	ands	r2, r1
 8006980:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	0f5b      	lsrs	r3, r3, #29
 800698a:	b2da      	uxtb	r2, r3
 800698c:	250c      	movs	r5, #12
 800698e:	197b      	adds	r3, r7, r5
 8006990:	2107      	movs	r1, #7
 8006992:	400a      	ands	r2, r1
 8006994:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006996:	183b      	adds	r3, r7, r0
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	197a      	adds	r2, r7, r5
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	4914      	ldr	r1, [pc, #80]	@ (80069f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80069a0:	5c8a      	ldrb	r2, [r1, r2]
 80069a2:	435a      	muls	r2, r3
 80069a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80069a6:	197b      	adds	r3, r7, r5
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	4a12      	ldr	r2, [pc, #72]	@ (80069f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80069ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069ae:	0019      	movs	r1, r3
 80069b0:	f7f9 fc34 	bl	800021c <__divsi3>
 80069b4:	0003      	movs	r3, r0
 80069b6:	b299      	uxth	r1, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	226a      	movs	r2, #106	@ 0x6a
 80069bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069be:	19bb      	adds	r3, r7, r6
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	193a      	adds	r2, r7, r4
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	490a      	ldr	r1, [pc, #40]	@ (80069f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80069c8:	5c8a      	ldrb	r2, [r1, r2]
 80069ca:	435a      	muls	r2, r3
 80069cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80069ce:	193b      	adds	r3, r7, r4
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	4a08      	ldr	r2, [pc, #32]	@ (80069f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80069d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069d6:	0019      	movs	r1, r3
 80069d8:	f7f9 fc20 	bl	800021c <__divsi3>
 80069dc:	0003      	movs	r3, r0
 80069de:	b299      	uxth	r1, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2268      	movs	r2, #104	@ 0x68
 80069e4:	5299      	strh	r1, [r3, r2]
}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b005      	add	sp, #20
 80069ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ee:	46c0      	nop			@ (mov r8, r8)
 80069f0:	08006d70 	.word	0x08006d70
 80069f4:	08006d78 	.word	0x08006d78

080069f8 <memset>:
 80069f8:	0003      	movs	r3, r0
 80069fa:	1882      	adds	r2, r0, r2
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d100      	bne.n	8006a02 <memset+0xa>
 8006a00:	4770      	bx	lr
 8006a02:	7019      	strb	r1, [r3, #0]
 8006a04:	3301      	adds	r3, #1
 8006a06:	e7f9      	b.n	80069fc <memset+0x4>

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	2600      	movs	r6, #0
 8006a0c:	4c0c      	ldr	r4, [pc, #48]	@ (8006a40 <__libc_init_array+0x38>)
 8006a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a44 <__libc_init_array+0x3c>)
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	2600      	movs	r6, #0
 8006a1a:	f000 f823 	bl	8006a64 <_init>
 8006a1e:	4c0a      	ldr	r4, [pc, #40]	@ (8006a48 <__libc_init_array+0x40>)
 8006a20:	4d0a      	ldr	r5, [pc, #40]	@ (8006a4c <__libc_init_array+0x44>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	42a6      	cmp	r6, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	00b3      	lsls	r3, r6, #2
 8006a2e:	58eb      	ldr	r3, [r5, r3]
 8006a30:	4798      	blx	r3
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	00b3      	lsls	r3, r6, #2
 8006a38:	58eb      	ldr	r3, [r5, r3]
 8006a3a:	4798      	blx	r3
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	08006d80 	.word	0x08006d80
 8006a44:	08006d80 	.word	0x08006d80
 8006a48:	08006d84 	.word	0x08006d84
 8006a4c:	08006d80 	.word	0x08006d80

08006a50 <memcpy>:
 8006a50:	2300      	movs	r3, #0
 8006a52:	b510      	push	{r4, lr}
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d100      	bne.n	8006a5a <memcpy+0xa>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	5ccc      	ldrb	r4, [r1, r3]
 8006a5c:	54c4      	strb	r4, [r0, r3]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	e7f8      	b.n	8006a54 <memcpy+0x4>
	...

08006a64 <_init>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	46c0      	nop			@ (mov r8, r8)
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr

08006a70 <_fini>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr
