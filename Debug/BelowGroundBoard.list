
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08008284  08008284  00009284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085dc  080085dc  0000a084  2**0
                  CONTENTS
  4 .ARM          00000000  080085dc  080085dc  0000a084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085dc  080085dc  0000a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000095dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085e0  080085e0  000095e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080085e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000084  08008668  0000a084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08008668  0000a618  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180fd  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbc  00000000  00000000  000221a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00025168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001163  00000000  00000000  00026760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bbf  00000000  00000000  000278c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b00d  00000000  00000000  0003e482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb5a  00000000  00000000  0005948f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4fe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000f502c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000fa360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800826c 	.word	0x0800826c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	0800826c 	.word	0x0800826c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb6d 	bl	8000adc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 faed 	bl	80009ec <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb5f 	bl	8000adc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb55 	bl	8000adc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fafb 	bl	8000a3c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 faf1 	bl	8000a3c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fe5f 	bl	800113c <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fcb5 	bl	8000df4 <__aeabi_fsub>
 800048a:	f000 fe57 	bl	800113c <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	46ce      	mov	lr, r9
 800049c:	4647      	mov	r7, r8
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5a      	lsrs	r2, r3, #9
 80004a2:	024e      	lsls	r6, r1, #9
 80004a4:	0045      	lsls	r5, r0, #1
 80004a6:	0fc4      	lsrs	r4, r0, #31
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	4691      	mov	r9, r2
 80004ac:	0e2d      	lsrs	r5, r5, #24
 80004ae:	0a72      	lsrs	r2, r6, #9
 80004b0:	0e00      	lsrs	r0, r0, #24
 80004b2:	4694      	mov	ip, r2
 80004b4:	b580      	push	{r7, lr}
 80004b6:	099b      	lsrs	r3, r3, #6
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	09b6      	lsrs	r6, r6, #6
 80004bc:	1a2a      	subs	r2, r5, r0
 80004be:	428c      	cmp	r4, r1
 80004c0:	d021      	beq.n	8000506 <__aeabi_fadd+0x6e>
 80004c2:	2a00      	cmp	r2, #0
 80004c4:	dd0d      	ble.n	80004e2 <__aeabi_fadd+0x4a>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d12d      	bne.n	8000526 <__aeabi_fadd+0x8e>
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x38>
 80004ce:	e08d      	b.n	80005ec <__aeabi_fadd+0x154>
 80004d0:	1e51      	subs	r1, r2, #1
 80004d2:	2a01      	cmp	r2, #1
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x40>
 80004d6:	e11d      	b.n	8000714 <__aeabi_fadd+0x27c>
 80004d8:	2aff      	cmp	r2, #255	@ 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x46>
 80004dc:	e0ab      	b.n	8000636 <__aeabi_fadd+0x19e>
 80004de:	000a      	movs	r2, r1
 80004e0:	e027      	b.n	8000532 <__aeabi_fadd+0x9a>
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d04d      	beq.n	8000582 <__aeabi_fadd+0xea>
 80004e6:	1b42      	subs	r2, r0, r5
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_fadd+0x56>
 80004ec:	e0cc      	b.n	8000688 <__aeabi_fadd+0x1f0>
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x5c>
 80004f2:	e079      	b.n	80005e8 <__aeabi_fadd+0x150>
 80004f4:	1e54      	subs	r4, r2, #1
 80004f6:	2a01      	cmp	r2, #1
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e128      	b.n	800074e <__aeabi_fadd+0x2b6>
 80004fc:	2aff      	cmp	r2, #255	@ 0xff
 80004fe:	d100      	bne.n	8000502 <__aeabi_fadd+0x6a>
 8000500:	e097      	b.n	8000632 <__aeabi_fadd+0x19a>
 8000502:	0022      	movs	r2, r4
 8000504:	e0c5      	b.n	8000692 <__aeabi_fadd+0x1fa>
 8000506:	2a00      	cmp	r2, #0
 8000508:	dc00      	bgt.n	800050c <__aeabi_fadd+0x74>
 800050a:	e096      	b.n	800063a <__aeabi_fadd+0x1a2>
 800050c:	2800      	cmp	r0, #0
 800050e:	d04f      	beq.n	80005b0 <__aeabi_fadd+0x118>
 8000510:	2dff      	cmp	r5, #255	@ 0xff
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x7e>
 8000514:	e08f      	b.n	8000636 <__aeabi_fadd+0x19e>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	04c9      	lsls	r1, r1, #19
 800051a:	430e      	orrs	r6, r1
 800051c:	2a1b      	cmp	r2, #27
 800051e:	dd51      	ble.n	80005c4 <__aeabi_fadd+0x12c>
 8000520:	002a      	movs	r2, r5
 8000522:	3301      	adds	r3, #1
 8000524:	e018      	b.n	8000558 <__aeabi_fadd+0xc0>
 8000526:	2dff      	cmp	r5, #255	@ 0xff
 8000528:	d100      	bne.n	800052c <__aeabi_fadd+0x94>
 800052a:	e084      	b.n	8000636 <__aeabi_fadd+0x19e>
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	04c9      	lsls	r1, r1, #19
 8000530:	430e      	orrs	r6, r1
 8000532:	2101      	movs	r1, #1
 8000534:	2a1b      	cmp	r2, #27
 8000536:	dc08      	bgt.n	800054a <__aeabi_fadd+0xb2>
 8000538:	0031      	movs	r1, r6
 800053a:	2020      	movs	r0, #32
 800053c:	40d1      	lsrs	r1, r2
 800053e:	1a82      	subs	r2, r0, r2
 8000540:	4096      	lsls	r6, r2
 8000542:	0032      	movs	r2, r6
 8000544:	1e50      	subs	r0, r2, #1
 8000546:	4182      	sbcs	r2, r0
 8000548:	4311      	orrs	r1, r2
 800054a:	1a5b      	subs	r3, r3, r1
 800054c:	015a      	lsls	r2, r3, #5
 800054e:	d459      	bmi.n	8000604 <__aeabi_fadd+0x16c>
 8000550:	2107      	movs	r1, #7
 8000552:	002a      	movs	r2, r5
 8000554:	4019      	ands	r1, r3
 8000556:	d049      	beq.n	80005ec <__aeabi_fadd+0x154>
 8000558:	210f      	movs	r1, #15
 800055a:	4019      	ands	r1, r3
 800055c:	2904      	cmp	r1, #4
 800055e:	d000      	beq.n	8000562 <__aeabi_fadd+0xca>
 8000560:	3304      	adds	r3, #4
 8000562:	0159      	lsls	r1, r3, #5
 8000564:	d542      	bpl.n	80005ec <__aeabi_fadd+0x154>
 8000566:	1c50      	adds	r0, r2, #1
 8000568:	2afe      	cmp	r2, #254	@ 0xfe
 800056a:	d03a      	beq.n	80005e2 <__aeabi_fadd+0x14a>
 800056c:	019b      	lsls	r3, r3, #6
 800056e:	b2c0      	uxtb	r0, r0
 8000570:	0a5b      	lsrs	r3, r3, #9
 8000572:	05c0      	lsls	r0, r0, #23
 8000574:	4318      	orrs	r0, r3
 8000576:	07e4      	lsls	r4, r4, #31
 8000578:	4320      	orrs	r0, r4
 800057a:	bcc0      	pop	{r6, r7}
 800057c:	46b9      	mov	r9, r7
 800057e:	46b0      	mov	r8, r6
 8000580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000582:	20fe      	movs	r0, #254	@ 0xfe
 8000584:	4680      	mov	r8, r0
 8000586:	1c6f      	adds	r7, r5, #1
 8000588:	0038      	movs	r0, r7
 800058a:	4647      	mov	r7, r8
 800058c:	4207      	tst	r7, r0
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0xfa>
 8000590:	e08e      	b.n	80006b0 <__aeabi_fadd+0x218>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d000      	beq.n	8000598 <__aeabi_fadd+0x100>
 8000596:	e0b4      	b.n	8000702 <__aeabi_fadd+0x26a>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x106>
 800059c:	e0db      	b.n	8000756 <__aeabi_fadd+0x2be>
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d06c      	beq.n	800067c <__aeabi_fadd+0x1e4>
 80005a2:	1b98      	subs	r0, r3, r6
 80005a4:	0145      	lsls	r5, r0, #5
 80005a6:	d400      	bmi.n	80005aa <__aeabi_fadd+0x112>
 80005a8:	e0f7      	b.n	800079a <__aeabi_fadd+0x302>
 80005aa:	000c      	movs	r4, r1
 80005ac:	1af3      	subs	r3, r6, r3
 80005ae:	e03d      	b.n	800062c <__aeabi_fadd+0x194>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d01b      	beq.n	80005ec <__aeabi_fadd+0x154>
 80005b4:	1e51      	subs	r1, r2, #1
 80005b6:	2a01      	cmp	r2, #1
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x124>
 80005ba:	e082      	b.n	80006c2 <__aeabi_fadd+0x22a>
 80005bc:	2aff      	cmp	r2, #255	@ 0xff
 80005be:	d03a      	beq.n	8000636 <__aeabi_fadd+0x19e>
 80005c0:	000a      	movs	r2, r1
 80005c2:	e7ab      	b.n	800051c <__aeabi_fadd+0x84>
 80005c4:	0031      	movs	r1, r6
 80005c6:	2020      	movs	r0, #32
 80005c8:	40d1      	lsrs	r1, r2
 80005ca:	1a82      	subs	r2, r0, r2
 80005cc:	4096      	lsls	r6, r2
 80005ce:	0032      	movs	r2, r6
 80005d0:	1e50      	subs	r0, r2, #1
 80005d2:	4182      	sbcs	r2, r0
 80005d4:	430a      	orrs	r2, r1
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	015a      	lsls	r2, r3, #5
 80005da:	d5b9      	bpl.n	8000550 <__aeabi_fadd+0xb8>
 80005dc:	1c6a      	adds	r2, r5, #1
 80005de:	2dfe      	cmp	r5, #254	@ 0xfe
 80005e0:	d175      	bne.n	80006ce <__aeabi_fadd+0x236>
 80005e2:	20ff      	movs	r0, #255	@ 0xff
 80005e4:	2300      	movs	r3, #0
 80005e6:	e7c4      	b.n	8000572 <__aeabi_fadd+0xda>
 80005e8:	000c      	movs	r4, r1
 80005ea:	0033      	movs	r3, r6
 80005ec:	08db      	lsrs	r3, r3, #3
 80005ee:	2aff      	cmp	r2, #255	@ 0xff
 80005f0:	d146      	bne.n	8000680 <__aeabi_fadd+0x1e8>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f5      	beq.n	80005e2 <__aeabi_fadd+0x14a>
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	03d2      	lsls	r2, r2, #15
 80005fa:	4313      	orrs	r3, r2
 80005fc:	025b      	lsls	r3, r3, #9
 80005fe:	20ff      	movs	r0, #255	@ 0xff
 8000600:	0a5b      	lsrs	r3, r3, #9
 8000602:	e7b6      	b.n	8000572 <__aeabi_fadd+0xda>
 8000604:	019f      	lsls	r7, r3, #6
 8000606:	09bf      	lsrs	r7, r7, #6
 8000608:	0038      	movs	r0, r7
 800060a:	f000 fdf9 	bl	8001200 <__clzsi2>
 800060e:	3805      	subs	r0, #5
 8000610:	4087      	lsls	r7, r0
 8000612:	4285      	cmp	r5, r0
 8000614:	dc24      	bgt.n	8000660 <__aeabi_fadd+0x1c8>
 8000616:	003b      	movs	r3, r7
 8000618:	2120      	movs	r1, #32
 800061a:	1b42      	subs	r2, r0, r5
 800061c:	3201      	adds	r2, #1
 800061e:	40d3      	lsrs	r3, r2
 8000620:	1a8a      	subs	r2, r1, r2
 8000622:	4097      	lsls	r7, r2
 8000624:	1e7a      	subs	r2, r7, #1
 8000626:	4197      	sbcs	r7, r2
 8000628:	2200      	movs	r2, #0
 800062a:	433b      	orrs	r3, r7
 800062c:	0759      	lsls	r1, r3, #29
 800062e:	d193      	bne.n	8000558 <__aeabi_fadd+0xc0>
 8000630:	e797      	b.n	8000562 <__aeabi_fadd+0xca>
 8000632:	000c      	movs	r4, r1
 8000634:	0033      	movs	r3, r6
 8000636:	08db      	lsrs	r3, r3, #3
 8000638:	e7db      	b.n	80005f2 <__aeabi_fadd+0x15a>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d014      	beq.n	8000668 <__aeabi_fadd+0x1d0>
 800063e:	1b42      	subs	r2, r0, r5
 8000640:	2d00      	cmp	r5, #0
 8000642:	d14b      	bne.n	80006dc <__aeabi_fadd+0x244>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0d0      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000648:	1e51      	subs	r1, r2, #1
 800064a:	2a01      	cmp	r2, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x1b8>
 800064e:	e09e      	b.n	800078e <__aeabi_fadd+0x2f6>
 8000650:	2aff      	cmp	r2, #255	@ 0xff
 8000652:	d0ef      	beq.n	8000634 <__aeabi_fadd+0x19c>
 8000654:	000a      	movs	r2, r1
 8000656:	2a1b      	cmp	r2, #27
 8000658:	dd5f      	ble.n	800071a <__aeabi_fadd+0x282>
 800065a:	0002      	movs	r2, r0
 800065c:	1c73      	adds	r3, r6, #1
 800065e:	e77b      	b.n	8000558 <__aeabi_fadd+0xc0>
 8000660:	4b50      	ldr	r3, [pc, #320]	@ (80007a4 <__aeabi_fadd+0x30c>)
 8000662:	1a2a      	subs	r2, r5, r0
 8000664:	403b      	ands	r3, r7
 8000666:	e7e1      	b.n	800062c <__aeabi_fadd+0x194>
 8000668:	21fe      	movs	r1, #254	@ 0xfe
 800066a:	1c6a      	adds	r2, r5, #1
 800066c:	4211      	tst	r1, r2
 800066e:	d13b      	bne.n	80006e8 <__aeabi_fadd+0x250>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d15d      	bne.n	8000730 <__aeabi_fadd+0x298>
 8000674:	2b00      	cmp	r3, #0
 8000676:	d07f      	beq.n	8000778 <__aeabi_fadd+0x2e0>
 8000678:	2e00      	cmp	r6, #0
 800067a:	d17f      	bne.n	800077c <__aeabi_fadd+0x2e4>
 800067c:	2200      	movs	r2, #0
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	025b      	lsls	r3, r3, #9
 8000682:	0a5b      	lsrs	r3, r3, #9
 8000684:	b2d0      	uxtb	r0, r2
 8000686:	e774      	b.n	8000572 <__aeabi_fadd+0xda>
 8000688:	28ff      	cmp	r0, #255	@ 0xff
 800068a:	d0d2      	beq.n	8000632 <__aeabi_fadd+0x19a>
 800068c:	2480      	movs	r4, #128	@ 0x80
 800068e:	04e4      	lsls	r4, r4, #19
 8000690:	4323      	orrs	r3, r4
 8000692:	2401      	movs	r4, #1
 8000694:	2a1b      	cmp	r2, #27
 8000696:	dc07      	bgt.n	80006a8 <__aeabi_fadd+0x210>
 8000698:	001c      	movs	r4, r3
 800069a:	2520      	movs	r5, #32
 800069c:	40d4      	lsrs	r4, r2
 800069e:	1aaa      	subs	r2, r5, r2
 80006a0:	4093      	lsls	r3, r2
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	4193      	sbcs	r3, r2
 80006a6:	431c      	orrs	r4, r3
 80006a8:	1b33      	subs	r3, r6, r4
 80006aa:	0005      	movs	r5, r0
 80006ac:	000c      	movs	r4, r1
 80006ae:	e74d      	b.n	800054c <__aeabi_fadd+0xb4>
 80006b0:	1b9f      	subs	r7, r3, r6
 80006b2:	017a      	lsls	r2, r7, #5
 80006b4:	d422      	bmi.n	80006fc <__aeabi_fadd+0x264>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d1a6      	bne.n	8000608 <__aeabi_fadd+0x170>
 80006ba:	2400      	movs	r4, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	e757      	b.n	8000572 <__aeabi_fadd+0xda>
 80006c2:	199b      	adds	r3, r3, r6
 80006c4:	2501      	movs	r5, #1
 80006c6:	3201      	adds	r2, #1
 80006c8:	0159      	lsls	r1, r3, #5
 80006ca:	d400      	bmi.n	80006ce <__aeabi_fadd+0x236>
 80006cc:	e740      	b.n	8000550 <__aeabi_fadd+0xb8>
 80006ce:	2101      	movs	r1, #1
 80006d0:	4835      	ldr	r0, [pc, #212]	@ (80007a8 <__aeabi_fadd+0x310>)
 80006d2:	4019      	ands	r1, r3
 80006d4:	085b      	lsrs	r3, r3, #1
 80006d6:	4003      	ands	r3, r0
 80006d8:	430b      	orrs	r3, r1
 80006da:	e7a7      	b.n	800062c <__aeabi_fadd+0x194>
 80006dc:	28ff      	cmp	r0, #255	@ 0xff
 80006de:	d0a9      	beq.n	8000634 <__aeabi_fadd+0x19c>
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	04c9      	lsls	r1, r1, #19
 80006e4:	430b      	orrs	r3, r1
 80006e6:	e7b6      	b.n	8000656 <__aeabi_fadd+0x1be>
 80006e8:	2aff      	cmp	r2, #255	@ 0xff
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0x256>
 80006ec:	e779      	b.n	80005e2 <__aeabi_fadd+0x14a>
 80006ee:	199b      	adds	r3, r3, r6
 80006f0:	085b      	lsrs	r3, r3, #1
 80006f2:	0759      	lsls	r1, r3, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fadd+0x260>
 80006f6:	e72f      	b.n	8000558 <__aeabi_fadd+0xc0>
 80006f8:	08db      	lsrs	r3, r3, #3
 80006fa:	e7c1      	b.n	8000680 <__aeabi_fadd+0x1e8>
 80006fc:	000c      	movs	r4, r1
 80006fe:	1af7      	subs	r7, r6, r3
 8000700:	e782      	b.n	8000608 <__aeabi_fadd+0x170>
 8000702:	2b00      	cmp	r3, #0
 8000704:	d12c      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d193      	bne.n	8000632 <__aeabi_fadd+0x19a>
 800070a:	2380      	movs	r3, #128	@ 0x80
 800070c:	2400      	movs	r4, #0
 800070e:	20ff      	movs	r0, #255	@ 0xff
 8000710:	03db      	lsls	r3, r3, #15
 8000712:	e72e      	b.n	8000572 <__aeabi_fadd+0xda>
 8000714:	2501      	movs	r5, #1
 8000716:	1b9b      	subs	r3, r3, r6
 8000718:	e718      	b.n	800054c <__aeabi_fadd+0xb4>
 800071a:	0019      	movs	r1, r3
 800071c:	2520      	movs	r5, #32
 800071e:	40d1      	lsrs	r1, r2
 8000720:	1aaa      	subs	r2, r5, r2
 8000722:	4093      	lsls	r3, r2
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	4193      	sbcs	r3, r2
 8000728:	430b      	orrs	r3, r1
 800072a:	0005      	movs	r5, r0
 800072c:	199b      	adds	r3, r3, r6
 800072e:	e753      	b.n	80005d8 <__aeabi_fadd+0x140>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x29e>
 8000734:	e77e      	b.n	8000634 <__aeabi_fadd+0x19c>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fadd+0x2a4>
 800073a:	e77c      	b.n	8000636 <__aeabi_fadd+0x19e>
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	03d2      	lsls	r2, r2, #15
 8000740:	4591      	cmp	r9, r2
 8000742:	d302      	bcc.n	800074a <__aeabi_fadd+0x2b2>
 8000744:	4594      	cmp	ip, r2
 8000746:	d200      	bcs.n	800074a <__aeabi_fadd+0x2b2>
 8000748:	0033      	movs	r3, r6
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	e753      	b.n	80005f6 <__aeabi_fadd+0x15e>
 800074e:	000c      	movs	r4, r1
 8000750:	1af3      	subs	r3, r6, r3
 8000752:	3501      	adds	r5, #1
 8000754:	e6fa      	b.n	800054c <__aeabi_fadd+0xb4>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d0af      	beq.n	80006ba <__aeabi_fadd+0x222>
 800075a:	000c      	movs	r4, r1
 800075c:	0033      	movs	r3, r6
 800075e:	e78d      	b.n	800067c <__aeabi_fadd+0x1e4>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x2ce>
 8000764:	e767      	b.n	8000636 <__aeabi_fadd+0x19e>
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	03d2      	lsls	r2, r2, #15
 800076a:	4591      	cmp	r9, r2
 800076c:	d3ed      	bcc.n	800074a <__aeabi_fadd+0x2b2>
 800076e:	4594      	cmp	ip, r2
 8000770:	d2eb      	bcs.n	800074a <__aeabi_fadd+0x2b2>
 8000772:	000c      	movs	r4, r1
 8000774:	0033      	movs	r3, r6
 8000776:	e7e8      	b.n	800074a <__aeabi_fadd+0x2b2>
 8000778:	0033      	movs	r3, r6
 800077a:	e77f      	b.n	800067c <__aeabi_fadd+0x1e4>
 800077c:	199b      	adds	r3, r3, r6
 800077e:	2200      	movs	r2, #0
 8000780:	0159      	lsls	r1, r3, #5
 8000782:	d5b9      	bpl.n	80006f8 <__aeabi_fadd+0x260>
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <__aeabi_fadd+0x30c>)
 8000786:	4013      	ands	r3, r2
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	2201      	movs	r2, #1
 800078c:	e778      	b.n	8000680 <__aeabi_fadd+0x1e8>
 800078e:	199b      	adds	r3, r3, r6
 8000790:	3201      	adds	r2, #1
 8000792:	3501      	adds	r5, #1
 8000794:	0159      	lsls	r1, r3, #5
 8000796:	d49a      	bmi.n	80006ce <__aeabi_fadd+0x236>
 8000798:	e6da      	b.n	8000550 <__aeabi_fadd+0xb8>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d08d      	beq.n	80006ba <__aeabi_fadd+0x222>
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	e76e      	b.n	8000680 <__aeabi_fadd+0x1e8>
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	fbffffff 	.word	0xfbffffff
 80007a8:	7dffffff 	.word	0x7dffffff

080007ac <__aeabi_fdiv>:
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	464f      	mov	r7, r9
 80007b0:	4646      	mov	r6, r8
 80007b2:	46d6      	mov	lr, sl
 80007b4:	0244      	lsls	r4, r0, #9
 80007b6:	b5c0      	push	{r6, r7, lr}
 80007b8:	0047      	lsls	r7, r0, #1
 80007ba:	1c0e      	adds	r6, r1, #0
 80007bc:	0a64      	lsrs	r4, r4, #9
 80007be:	0e3f      	lsrs	r7, r7, #24
 80007c0:	0fc5      	lsrs	r5, r0, #31
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d03c      	beq.n	8000840 <__aeabi_fdiv+0x94>
 80007c6:	2fff      	cmp	r7, #255	@ 0xff
 80007c8:	d042      	beq.n	8000850 <__aeabi_fdiv+0xa4>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	4699      	mov	r9, r3
 80007d0:	469a      	mov	sl, r3
 80007d2:	00e4      	lsls	r4, r4, #3
 80007d4:	04d2      	lsls	r2, r2, #19
 80007d6:	4314      	orrs	r4, r2
 80007d8:	3f7f      	subs	r7, #127	@ 0x7f
 80007da:	0273      	lsls	r3, r6, #9
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	4698      	mov	r8, r3
 80007e0:	0073      	lsls	r3, r6, #1
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	0ff6      	lsrs	r6, r6, #31
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d01b      	beq.n	8000822 <__aeabi_fdiv+0x76>
 80007ea:	2bff      	cmp	r3, #255	@ 0xff
 80007ec:	d013      	beq.n	8000816 <__aeabi_fdiv+0x6a>
 80007ee:	4642      	mov	r2, r8
 80007f0:	2180      	movs	r1, #128	@ 0x80
 80007f2:	00d2      	lsls	r2, r2, #3
 80007f4:	04c9      	lsls	r1, r1, #19
 80007f6:	4311      	orrs	r1, r2
 80007f8:	4688      	mov	r8, r1
 80007fa:	2000      	movs	r0, #0
 80007fc:	3b7f      	subs	r3, #127	@ 0x7f
 80007fe:	0029      	movs	r1, r5
 8000800:	1aff      	subs	r7, r7, r3
 8000802:	464b      	mov	r3, r9
 8000804:	4071      	eors	r1, r6
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d900      	bls.n	800080e <__aeabi_fdiv+0x62>
 800080c:	e0b5      	b.n	800097a <__aeabi_fdiv+0x1ce>
 800080e:	4a74      	ldr	r2, [pc, #464]	@ (80009e0 <__aeabi_fdiv+0x234>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58d3      	ldr	r3, [r2, r3]
 8000814:	469f      	mov	pc, r3
 8000816:	4643      	mov	r3, r8
 8000818:	2b00      	cmp	r3, #0
 800081a:	d13f      	bne.n	800089c <__aeabi_fdiv+0xf0>
 800081c:	3fff      	subs	r7, #255	@ 0xff
 800081e:	3302      	adds	r3, #2
 8000820:	e003      	b.n	800082a <__aeabi_fdiv+0x7e>
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d12d      	bne.n	8000884 <__aeabi_fdiv+0xd8>
 8000828:	2301      	movs	r3, #1
 800082a:	0029      	movs	r1, r5
 800082c:	464a      	mov	r2, r9
 800082e:	4071      	eors	r1, r6
 8000830:	b2c9      	uxtb	r1, r1
 8000832:	431a      	orrs	r2, r3
 8000834:	2a0e      	cmp	r2, #14
 8000836:	d838      	bhi.n	80008aa <__aeabi_fdiv+0xfe>
 8000838:	486a      	ldr	r0, [pc, #424]	@ (80009e4 <__aeabi_fdiv+0x238>)
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	5882      	ldr	r2, [r0, r2]
 800083e:	4697      	mov	pc, r2
 8000840:	2c00      	cmp	r4, #0
 8000842:	d113      	bne.n	800086c <__aeabi_fdiv+0xc0>
 8000844:	2304      	movs	r3, #4
 8000846:	4699      	mov	r9, r3
 8000848:	3b03      	subs	r3, #3
 800084a:	2700      	movs	r7, #0
 800084c:	469a      	mov	sl, r3
 800084e:	e7c4      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000850:	2c00      	cmp	r4, #0
 8000852:	d105      	bne.n	8000860 <__aeabi_fdiv+0xb4>
 8000854:	2308      	movs	r3, #8
 8000856:	4699      	mov	r9, r3
 8000858:	3b06      	subs	r3, #6
 800085a:	27ff      	movs	r7, #255	@ 0xff
 800085c:	469a      	mov	sl, r3
 800085e:	e7bc      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000860:	230c      	movs	r3, #12
 8000862:	4699      	mov	r9, r3
 8000864:	3b09      	subs	r3, #9
 8000866:	27ff      	movs	r7, #255	@ 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e7b6      	b.n	80007da <__aeabi_fdiv+0x2e>
 800086c:	0020      	movs	r0, r4
 800086e:	f000 fcc7 	bl	8001200 <__clzsi2>
 8000872:	2776      	movs	r7, #118	@ 0x76
 8000874:	1f43      	subs	r3, r0, #5
 8000876:	409c      	lsls	r4, r3
 8000878:	2300      	movs	r3, #0
 800087a:	427f      	negs	r7, r7
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	1a3f      	subs	r7, r7, r0
 8000882:	e7aa      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000884:	4640      	mov	r0, r8
 8000886:	f000 fcbb 	bl	8001200 <__clzsi2>
 800088a:	4642      	mov	r2, r8
 800088c:	1f43      	subs	r3, r0, #5
 800088e:	409a      	lsls	r2, r3
 8000890:	2376      	movs	r3, #118	@ 0x76
 8000892:	425b      	negs	r3, r3
 8000894:	1a1b      	subs	r3, r3, r0
 8000896:	4690      	mov	r8, r2
 8000898:	2000      	movs	r0, #0
 800089a:	e7b0      	b.n	80007fe <__aeabi_fdiv+0x52>
 800089c:	2303      	movs	r3, #3
 800089e:	464a      	mov	r2, r9
 80008a0:	431a      	orrs	r2, r3
 80008a2:	4691      	mov	r9, r2
 80008a4:	2003      	movs	r0, #3
 80008a6:	33fc      	adds	r3, #252	@ 0xfc
 80008a8:	e7a9      	b.n	80007fe <__aeabi_fdiv+0x52>
 80008aa:	000d      	movs	r5, r1
 80008ac:	20ff      	movs	r0, #255	@ 0xff
 80008ae:	2200      	movs	r2, #0
 80008b0:	05c0      	lsls	r0, r0, #23
 80008b2:	07ed      	lsls	r5, r5, #31
 80008b4:	4310      	orrs	r0, r2
 80008b6:	4328      	orrs	r0, r5
 80008b8:	bce0      	pop	{r5, r6, r7}
 80008ba:	46ba      	mov	sl, r7
 80008bc:	46b1      	mov	r9, r6
 80008be:	46a8      	mov	r8, r5
 80008c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c2:	000d      	movs	r5, r1
 80008c4:	2000      	movs	r0, #0
 80008c6:	2200      	movs	r2, #0
 80008c8:	e7f2      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80008ca:	4653      	mov	r3, sl
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d0ed      	beq.n	80008ac <__aeabi_fdiv+0x100>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d033      	beq.n	800093c <__aeabi_fdiv+0x190>
 80008d4:	46a0      	mov	r8, r4
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <__aeabi_fdiv+0x13a>
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e7e7      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80008e0:	0035      	movs	r5, r6
 80008e2:	2803      	cmp	r0, #3
 80008e4:	d07a      	beq.n	80009dc <__aeabi_fdiv+0x230>
 80008e6:	003b      	movs	r3, r7
 80008e8:	337f      	adds	r3, #127	@ 0x7f
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd2d      	ble.n	800094a <__aeabi_fdiv+0x19e>
 80008ee:	4642      	mov	r2, r8
 80008f0:	0752      	lsls	r2, r2, #29
 80008f2:	d007      	beq.n	8000904 <__aeabi_fdiv+0x158>
 80008f4:	220f      	movs	r2, #15
 80008f6:	4641      	mov	r1, r8
 80008f8:	400a      	ands	r2, r1
 80008fa:	2a04      	cmp	r2, #4
 80008fc:	d002      	beq.n	8000904 <__aeabi_fdiv+0x158>
 80008fe:	2204      	movs	r2, #4
 8000900:	4694      	mov	ip, r2
 8000902:	44e0      	add	r8, ip
 8000904:	4642      	mov	r2, r8
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	d505      	bpl.n	8000916 <__aeabi_fdiv+0x16a>
 800090a:	4642      	mov	r2, r8
 800090c:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <__aeabi_fdiv+0x23c>)
 800090e:	401a      	ands	r2, r3
 8000910:	003b      	movs	r3, r7
 8000912:	4690      	mov	r8, r2
 8000914:	3380      	adds	r3, #128	@ 0x80
 8000916:	2bfe      	cmp	r3, #254	@ 0xfe
 8000918:	dcc8      	bgt.n	80008ac <__aeabi_fdiv+0x100>
 800091a:	4642      	mov	r2, r8
 800091c:	0192      	lsls	r2, r2, #6
 800091e:	0a52      	lsrs	r2, r2, #9
 8000920:	b2d8      	uxtb	r0, r3
 8000922:	e7c5      	b.n	80008b0 <__aeabi_fdiv+0x104>
 8000924:	2280      	movs	r2, #128	@ 0x80
 8000926:	2500      	movs	r5, #0
 8000928:	20ff      	movs	r0, #255	@ 0xff
 800092a:	03d2      	lsls	r2, r2, #15
 800092c:	e7c0      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800092e:	2280      	movs	r2, #128	@ 0x80
 8000930:	03d2      	lsls	r2, r2, #15
 8000932:	4214      	tst	r4, r2
 8000934:	d002      	beq.n	800093c <__aeabi_fdiv+0x190>
 8000936:	4643      	mov	r3, r8
 8000938:	4213      	tst	r3, r2
 800093a:	d049      	beq.n	80009d0 <__aeabi_fdiv+0x224>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	03d2      	lsls	r2, r2, #15
 8000940:	4322      	orrs	r2, r4
 8000942:	0252      	lsls	r2, r2, #9
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	0a52      	lsrs	r2, r2, #9
 8000948:	e7b2      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800094a:	2201      	movs	r2, #1
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b1b      	cmp	r3, #27
 8000950:	dcc3      	bgt.n	80008da <__aeabi_fdiv+0x12e>
 8000952:	4642      	mov	r2, r8
 8000954:	40da      	lsrs	r2, r3
 8000956:	4643      	mov	r3, r8
 8000958:	379e      	adds	r7, #158	@ 0x9e
 800095a:	40bb      	lsls	r3, r7
 800095c:	1e59      	subs	r1, r3, #1
 800095e:	418b      	sbcs	r3, r1
 8000960:	431a      	orrs	r2, r3
 8000962:	0753      	lsls	r3, r2, #29
 8000964:	d004      	beq.n	8000970 <__aeabi_fdiv+0x1c4>
 8000966:	230f      	movs	r3, #15
 8000968:	4013      	ands	r3, r2
 800096a:	2b04      	cmp	r3, #4
 800096c:	d000      	beq.n	8000970 <__aeabi_fdiv+0x1c4>
 800096e:	3204      	adds	r2, #4
 8000970:	0153      	lsls	r3, r2, #5
 8000972:	d529      	bpl.n	80009c8 <__aeabi_fdiv+0x21c>
 8000974:	2001      	movs	r0, #1
 8000976:	2200      	movs	r2, #0
 8000978:	e79a      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800097a:	4642      	mov	r2, r8
 800097c:	0163      	lsls	r3, r4, #5
 800097e:	0155      	lsls	r5, r2, #5
 8000980:	42ab      	cmp	r3, r5
 8000982:	d215      	bcs.n	80009b0 <__aeabi_fdiv+0x204>
 8000984:	201b      	movs	r0, #27
 8000986:	2200      	movs	r2, #0
 8000988:	3f01      	subs	r7, #1
 800098a:	2601      	movs	r6, #1
 800098c:	001c      	movs	r4, r3
 800098e:	0052      	lsls	r2, r2, #1
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2c00      	cmp	r4, #0
 8000994:	db01      	blt.n	800099a <__aeabi_fdiv+0x1ee>
 8000996:	429d      	cmp	r5, r3
 8000998:	d801      	bhi.n	800099e <__aeabi_fdiv+0x1f2>
 800099a:	1b5b      	subs	r3, r3, r5
 800099c:	4332      	orrs	r2, r6
 800099e:	3801      	subs	r0, #1
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d1f3      	bne.n	800098c <__aeabi_fdiv+0x1e0>
 80009a4:	1e58      	subs	r0, r3, #1
 80009a6:	4183      	sbcs	r3, r0
 80009a8:	4313      	orrs	r3, r2
 80009aa:	4698      	mov	r8, r3
 80009ac:	000d      	movs	r5, r1
 80009ae:	e79a      	b.n	80008e6 <__aeabi_fdiv+0x13a>
 80009b0:	201a      	movs	r0, #26
 80009b2:	2201      	movs	r2, #1
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	e7e8      	b.n	800098a <__aeabi_fdiv+0x1de>
 80009b8:	3b02      	subs	r3, #2
 80009ba:	425a      	negs	r2, r3
 80009bc:	4153      	adcs	r3, r2
 80009be:	425b      	negs	r3, r3
 80009c0:	0035      	movs	r5, r6
 80009c2:	2200      	movs	r2, #0
 80009c4:	b2d8      	uxtb	r0, r3
 80009c6:	e773      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009c8:	0192      	lsls	r2, r2, #6
 80009ca:	2000      	movs	r0, #0
 80009cc:	0a52      	lsrs	r2, r2, #9
 80009ce:	e76f      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009d0:	431a      	orrs	r2, r3
 80009d2:	0252      	lsls	r2, r2, #9
 80009d4:	0035      	movs	r5, r6
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	0a52      	lsrs	r2, r2, #9
 80009da:	e769      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009dc:	4644      	mov	r4, r8
 80009de:	e7ad      	b.n	800093c <__aeabi_fdiv+0x190>
 80009e0:	08008284 	.word	0x08008284
 80009e4:	080082c4 	.word	0x080082c4
 80009e8:	f7ffffff 	.word	0xf7ffffff

080009ec <__eqsf2>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	0042      	lsls	r2, r0, #1
 80009f0:	024e      	lsls	r6, r1, #9
 80009f2:	004c      	lsls	r4, r1, #1
 80009f4:	0245      	lsls	r5, r0, #9
 80009f6:	0a6d      	lsrs	r5, r5, #9
 80009f8:	0e12      	lsrs	r2, r2, #24
 80009fa:	0fc3      	lsrs	r3, r0, #31
 80009fc:	0a76      	lsrs	r6, r6, #9
 80009fe:	0e24      	lsrs	r4, r4, #24
 8000a00:	0fc9      	lsrs	r1, r1, #31
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d010      	beq.n	8000a28 <__eqsf2+0x3c>
 8000a06:	2cff      	cmp	r4, #255	@ 0xff
 8000a08:	d00c      	beq.n	8000a24 <__eqsf2+0x38>
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	42a2      	cmp	r2, r4
 8000a0e:	d10a      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a10:	42b5      	cmp	r5, r6
 8000a12:	d108      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d00f      	beq.n	8000a38 <__eqsf2+0x4c>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d104      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	1e43      	subs	r3, r0, #1
 8000a20:	4198      	sbcs	r0, r3
 8000a22:	e000      	b.n	8000a26 <__eqsf2+0x3a>
 8000a24:	2001      	movs	r0, #1
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	2001      	movs	r0, #1
 8000a2a:	2cff      	cmp	r4, #255	@ 0xff
 8000a2c:	d1fb      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a2e:	4335      	orrs	r5, r6
 8000a30:	d1f9      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a32:	404b      	eors	r3, r1
 8000a34:	0018      	movs	r0, r3
 8000a36:	e7f6      	b.n	8000a26 <__eqsf2+0x3a>
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e7f4      	b.n	8000a26 <__eqsf2+0x3a>

08000a3c <__gesf2>:
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	0042      	lsls	r2, r0, #1
 8000a40:	0244      	lsls	r4, r0, #9
 8000a42:	024d      	lsls	r5, r1, #9
 8000a44:	0fc3      	lsrs	r3, r0, #31
 8000a46:	0048      	lsls	r0, r1, #1
 8000a48:	0a64      	lsrs	r4, r4, #9
 8000a4a:	0e12      	lsrs	r2, r2, #24
 8000a4c:	0a6d      	lsrs	r5, r5, #9
 8000a4e:	0e00      	lsrs	r0, r0, #24
 8000a50:	0fc9      	lsrs	r1, r1, #31
 8000a52:	2aff      	cmp	r2, #255	@ 0xff
 8000a54:	d019      	beq.n	8000a8a <__gesf2+0x4e>
 8000a56:	28ff      	cmp	r0, #255	@ 0xff
 8000a58:	d00b      	beq.n	8000a72 <__gesf2+0x36>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d11e      	bne.n	8000a9c <__gesf2+0x60>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d10b      	bne.n	8000a7a <__gesf2+0x3e>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d027      	beq.n	8000ab6 <__gesf2+0x7a>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d134      	bne.n	8000ad4 <__gesf2+0x98>
 8000a6a:	2900      	cmp	r1, #0
 8000a6c:	d02f      	beq.n	8000ace <__gesf2+0x92>
 8000a6e:	0008      	movs	r0, r1
 8000a70:	bd30      	pop	{r4, r5, pc}
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d128      	bne.n	8000ac8 <__gesf2+0x8c>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d101      	bne.n	8000a7e <__gesf2+0x42>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d0f5      	beq.n	8000a6a <__gesf2+0x2e>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d107      	bne.n	8000a92 <__gesf2+0x56>
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d023      	beq.n	8000ace <__gesf2+0x92>
 8000a86:	0018      	movs	r0, r3
 8000a88:	e7f2      	b.n	8000a70 <__gesf2+0x34>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d11c      	bne.n	8000ac8 <__gesf2+0x8c>
 8000a8e:	28ff      	cmp	r0, #255	@ 0xff
 8000a90:	d014      	beq.n	8000abc <__gesf2+0x80>
 8000a92:	1e58      	subs	r0, r3, #1
 8000a94:	2302      	movs	r3, #2
 8000a96:	4018      	ands	r0, r3
 8000a98:	3801      	subs	r0, #1
 8000a9a:	e7e9      	b.n	8000a70 <__gesf2+0x34>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d0f8      	beq.n	8000a92 <__gesf2+0x56>
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d1f6      	bne.n	8000a92 <__gesf2+0x56>
 8000aa4:	4282      	cmp	r2, r0
 8000aa6:	dcf4      	bgt.n	8000a92 <__gesf2+0x56>
 8000aa8:	dbeb      	blt.n	8000a82 <__gesf2+0x46>
 8000aaa:	42ac      	cmp	r4, r5
 8000aac:	d8f1      	bhi.n	8000a92 <__gesf2+0x56>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	42ac      	cmp	r4, r5
 8000ab2:	d2dd      	bcs.n	8000a70 <__gesf2+0x34>
 8000ab4:	e7e5      	b.n	8000a82 <__gesf2+0x46>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d0da      	beq.n	8000a70 <__gesf2+0x34>
 8000aba:	e7ea      	b.n	8000a92 <__gesf2+0x56>
 8000abc:	2d00      	cmp	r5, #0
 8000abe:	d103      	bne.n	8000ac8 <__gesf2+0x8c>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	d1e6      	bne.n	8000a92 <__gesf2+0x56>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7d3      	b.n	8000a70 <__gesf2+0x34>
 8000ac8:	2002      	movs	r0, #2
 8000aca:	4240      	negs	r0, r0
 8000acc:	e7d0      	b.n	8000a70 <__gesf2+0x34>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	4240      	negs	r0, r0
 8000ad2:	e7cd      	b.n	8000a70 <__gesf2+0x34>
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d0e8      	beq.n	8000aaa <__gesf2+0x6e>
 8000ad8:	e7db      	b.n	8000a92 <__gesf2+0x56>
 8000ada:	46c0      	nop			@ (mov r8, r8)

08000adc <__lesf2>:
 8000adc:	b530      	push	{r4, r5, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0244      	lsls	r4, r0, #9
 8000ae2:	024d      	lsls	r5, r1, #9
 8000ae4:	0fc3      	lsrs	r3, r0, #31
 8000ae6:	0048      	lsls	r0, r1, #1
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0e00      	lsrs	r0, r0, #24
 8000af0:	0fc9      	lsrs	r1, r1, #31
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d01a      	beq.n	8000b2c <__lesf2+0x50>
 8000af6:	28ff      	cmp	r0, #255	@ 0xff
 8000af8:	d00e      	beq.n	8000b18 <__lesf2+0x3c>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11e      	bne.n	8000b3c <__lesf2+0x60>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d10e      	bne.n	8000b20 <__lesf2+0x44>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d02a      	beq.n	8000b5c <__lesf2+0x80>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d00c      	beq.n	8000b24 <__lesf2+0x48>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d01d      	beq.n	8000b4a <__lesf2+0x6e>
 8000b0e:	1e58      	subs	r0, r3, #1
 8000b10:	2302      	movs	r3, #2
 8000b12:	4018      	ands	r0, r3
 8000b14:	3801      	subs	r0, #1
 8000b16:	e010      	b.n	8000b3a <__lesf2+0x5e>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d10d      	bne.n	8000b38 <__lesf2+0x5c>
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d120      	bne.n	8000b62 <__lesf2+0x86>
 8000b20:	2c00      	cmp	r4, #0
 8000b22:	d11e      	bne.n	8000b62 <__lesf2+0x86>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	d023      	beq.n	8000b70 <__lesf2+0x94>
 8000b28:	0008      	movs	r0, r1
 8000b2a:	e006      	b.n	8000b3a <__lesf2+0x5e>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d103      	bne.n	8000b38 <__lesf2+0x5c>
 8000b30:	28ff      	cmp	r0, #255	@ 0xff
 8000b32:	d1ec      	bne.n	8000b0e <__lesf2+0x32>
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d017      	beq.n	8000b68 <__lesf2+0x8c>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d0e6      	beq.n	8000b0e <__lesf2+0x32>
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d1e4      	bne.n	8000b0e <__lesf2+0x32>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	dce2      	bgt.n	8000b0e <__lesf2+0x32>
 8000b48:	db04      	blt.n	8000b54 <__lesf2+0x78>
 8000b4a:	42ac      	cmp	r4, r5
 8000b4c:	d8df      	bhi.n	8000b0e <__lesf2+0x32>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	42ac      	cmp	r4, r5
 8000b52:	d2f2      	bcs.n	8000b3a <__lesf2+0x5e>
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00b      	beq.n	8000b70 <__lesf2+0x94>
 8000b58:	0018      	movs	r0, r3
 8000b5a:	e7ee      	b.n	8000b3a <__lesf2+0x5e>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d0ec      	beq.n	8000b3a <__lesf2+0x5e>
 8000b60:	e7d5      	b.n	8000b0e <__lesf2+0x32>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d1d3      	bne.n	8000b0e <__lesf2+0x32>
 8000b66:	e7f5      	b.n	8000b54 <__lesf2+0x78>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d0e5      	beq.n	8000b3a <__lesf2+0x5e>
 8000b6e:	e7ce      	b.n	8000b0e <__lesf2+0x32>
 8000b70:	2001      	movs	r0, #1
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7e1      	b.n	8000b3a <__lesf2+0x5e>
 8000b76:	46c0      	nop			@ (mov r8, r8)

08000b78 <__aeabi_fmul>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	464f      	mov	r7, r9
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	0243      	lsls	r3, r0, #9
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	0045      	lsls	r5, r0, #1
 8000b86:	b5c0      	push	{r6, r7, lr}
 8000b88:	4699      	mov	r9, r3
 8000b8a:	1c0f      	adds	r7, r1, #0
 8000b8c:	0e2d      	lsrs	r5, r5, #24
 8000b8e:	0fc6      	lsrs	r6, r0, #31
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fmul+0x1e>
 8000b94:	e088      	b.n	8000ca8 <__aeabi_fmul+0x130>
 8000b96:	2dff      	cmp	r5, #255	@ 0xff
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fmul+0x24>
 8000b9a:	e08d      	b.n	8000cb8 <__aeabi_fmul+0x140>
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	04d2      	lsls	r2, r2, #19
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	4698      	mov	r8, r3
 8000baa:	469a      	mov	sl, r3
 8000bac:	3d7f      	subs	r5, #127	@ 0x7f
 8000bae:	027c      	lsls	r4, r7, #9
 8000bb0:	007b      	lsls	r3, r7, #1
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	0e1b      	lsrs	r3, r3, #24
 8000bb6:	0fff      	lsrs	r7, r7, #31
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d068      	beq.n	8000c8e <__aeabi_fmul+0x116>
 8000bbc:	2bff      	cmp	r3, #255	@ 0xff
 8000bbe:	d021      	beq.n	8000c04 <__aeabi_fmul+0x8c>
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	00e4      	lsls	r4, r4, #3
 8000bc4:	04d2      	lsls	r2, r2, #19
 8000bc6:	4314      	orrs	r4, r2
 8000bc8:	4642      	mov	r2, r8
 8000bca:	3b7f      	subs	r3, #127	@ 0x7f
 8000bcc:	195b      	adds	r3, r3, r5
 8000bce:	2100      	movs	r1, #0
 8000bd0:	1c5d      	adds	r5, r3, #1
 8000bd2:	2a0a      	cmp	r2, #10
 8000bd4:	dc2e      	bgt.n	8000c34 <__aeabi_fmul+0xbc>
 8000bd6:	407e      	eors	r6, r7
 8000bd8:	4642      	mov	r2, r8
 8000bda:	2a02      	cmp	r2, #2
 8000bdc:	dc23      	bgt.n	8000c26 <__aeabi_fmul+0xae>
 8000bde:	3a01      	subs	r2, #1
 8000be0:	2a01      	cmp	r2, #1
 8000be2:	d900      	bls.n	8000be6 <__aeabi_fmul+0x6e>
 8000be4:	e0bd      	b.n	8000d62 <__aeabi_fmul+0x1ea>
 8000be6:	2902      	cmp	r1, #2
 8000be8:	d06e      	beq.n	8000cc8 <__aeabi_fmul+0x150>
 8000bea:	2901      	cmp	r1, #1
 8000bec:	d12c      	bne.n	8000c48 <__aeabi_fmul+0xd0>
 8000bee:	2000      	movs	r0, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	05c0      	lsls	r0, r0, #23
 8000bf4:	07f6      	lsls	r6, r6, #31
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	4330      	orrs	r0, r6
 8000bfa:	bce0      	pop	{r5, r6, r7}
 8000bfc:	46ba      	mov	sl, r7
 8000bfe:	46b1      	mov	r9, r6
 8000c00:	46a8      	mov	r8, r5
 8000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c04:	002b      	movs	r3, r5
 8000c06:	33ff      	adds	r3, #255	@ 0xff
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d065      	beq.n	8000cd8 <__aeabi_fmul+0x160>
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4641      	mov	r1, r8
 8000c10:	4311      	orrs	r1, r2
 8000c12:	0032      	movs	r2, r6
 8000c14:	3501      	adds	r5, #1
 8000c16:	4688      	mov	r8, r1
 8000c18:	407a      	eors	r2, r7
 8000c1a:	35ff      	adds	r5, #255	@ 0xff
 8000c1c:	290a      	cmp	r1, #10
 8000c1e:	dd00      	ble.n	8000c22 <__aeabi_fmul+0xaa>
 8000c20:	e0d8      	b.n	8000dd4 <__aeabi_fmul+0x25c>
 8000c22:	0016      	movs	r6, r2
 8000c24:	2103      	movs	r1, #3
 8000c26:	4640      	mov	r0, r8
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4082      	lsls	r2, r0
 8000c2c:	20a6      	movs	r0, #166	@ 0xa6
 8000c2e:	00c0      	lsls	r0, r0, #3
 8000c30:	4202      	tst	r2, r0
 8000c32:	d020      	beq.n	8000c76 <__aeabi_fmul+0xfe>
 8000c34:	4653      	mov	r3, sl
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d046      	beq.n	8000cc8 <__aeabi_fmul+0x150>
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fmul+0xc8>
 8000c3e:	e0bb      	b.n	8000db8 <__aeabi_fmul+0x240>
 8000c40:	4651      	mov	r1, sl
 8000c42:	464c      	mov	r4, r9
 8000c44:	2901      	cmp	r1, #1
 8000c46:	d0d2      	beq.n	8000bee <__aeabi_fmul+0x76>
 8000c48:	002b      	movs	r3, r5
 8000c4a:	337f      	adds	r3, #127	@ 0x7f
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dd70      	ble.n	8000d32 <__aeabi_fmul+0x1ba>
 8000c50:	0762      	lsls	r2, r4, #29
 8000c52:	d004      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c54:	220f      	movs	r2, #15
 8000c56:	4022      	ands	r2, r4
 8000c58:	2a04      	cmp	r2, #4
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c5c:	3404      	adds	r4, #4
 8000c5e:	0122      	lsls	r2, r4, #4
 8000c60:	d503      	bpl.n	8000c6a <__aeabi_fmul+0xf2>
 8000c62:	4b63      	ldr	r3, [pc, #396]	@ (8000df0 <__aeabi_fmul+0x278>)
 8000c64:	401c      	ands	r4, r3
 8000c66:	002b      	movs	r3, r5
 8000c68:	3380      	adds	r3, #128	@ 0x80
 8000c6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c6c:	dc2c      	bgt.n	8000cc8 <__aeabi_fmul+0x150>
 8000c6e:	01a2      	lsls	r2, r4, #6
 8000c70:	0a52      	lsrs	r2, r2, #9
 8000c72:	b2d8      	uxtb	r0, r3
 8000c74:	e7bd      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000c76:	2090      	movs	r0, #144	@ 0x90
 8000c78:	0080      	lsls	r0, r0, #2
 8000c7a:	4202      	tst	r2, r0
 8000c7c:	d127      	bne.n	8000cce <__aeabi_fmul+0x156>
 8000c7e:	38b9      	subs	r0, #185	@ 0xb9
 8000c80:	38ff      	subs	r0, #255	@ 0xff
 8000c82:	4210      	tst	r0, r2
 8000c84:	d06d      	beq.n	8000d62 <__aeabi_fmul+0x1ea>
 8000c86:	003e      	movs	r6, r7
 8000c88:	46a1      	mov	r9, r4
 8000c8a:	468a      	mov	sl, r1
 8000c8c:	e7d2      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d141      	bne.n	8000d16 <__aeabi_fmul+0x19e>
 8000c92:	2301      	movs	r3, #1
 8000c94:	4642      	mov	r2, r8
 8000c96:	431a      	orrs	r2, r3
 8000c98:	4690      	mov	r8, r2
 8000c9a:	002b      	movs	r3, r5
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	1c5d      	adds	r5, r3, #1
 8000ca2:	2a0a      	cmp	r2, #10
 8000ca4:	dd97      	ble.n	8000bd6 <__aeabi_fmul+0x5e>
 8000ca6:	e7c5      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d126      	bne.n	8000cfa <__aeabi_fmul+0x182>
 8000cac:	2304      	movs	r3, #4
 8000cae:	4698      	mov	r8, r3
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e77a      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d118      	bne.n	8000cee <__aeabi_fmul+0x176>
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	3b06      	subs	r3, #6
 8000cc2:	25ff      	movs	r5, #255	@ 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e772      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cc8:	20ff      	movs	r0, #255	@ 0xff
 8000cca:	2200      	movs	r2, #0
 8000ccc:	e791      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000cce:	2280      	movs	r2, #128	@ 0x80
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	20ff      	movs	r0, #255	@ 0xff
 8000cd4:	03d2      	lsls	r2, r2, #15
 8000cd6:	e78c      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000cd8:	4641      	mov	r1, r8
 8000cda:	2202      	movs	r2, #2
 8000cdc:	3501      	adds	r5, #1
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	35ff      	adds	r5, #255	@ 0xff
 8000ce4:	290a      	cmp	r1, #10
 8000ce6:	dca5      	bgt.n	8000c34 <__aeabi_fmul+0xbc>
 8000ce8:	2102      	movs	r1, #2
 8000cea:	407e      	eors	r6, r7
 8000cec:	e774      	b.n	8000bd8 <__aeabi_fmul+0x60>
 8000cee:	230c      	movs	r3, #12
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	3b09      	subs	r3, #9
 8000cf4:	25ff      	movs	r5, #255	@ 0xff
 8000cf6:	469a      	mov	sl, r3
 8000cf8:	e759      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fa80 	bl	8001200 <__clzsi2>
 8000d00:	464a      	mov	r2, r9
 8000d02:	1f43      	subs	r3, r0, #5
 8000d04:	2576      	movs	r5, #118	@ 0x76
 8000d06:	409a      	lsls	r2, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	426d      	negs	r5, r5
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	4698      	mov	r8, r3
 8000d10:	469a      	mov	sl, r3
 8000d12:	1a2d      	subs	r5, r5, r0
 8000d14:	e74b      	b.n	8000bae <__aeabi_fmul+0x36>
 8000d16:	0020      	movs	r0, r4
 8000d18:	f000 fa72 	bl	8001200 <__clzsi2>
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	1f43      	subs	r3, r0, #5
 8000d20:	409c      	lsls	r4, r3
 8000d22:	1a2b      	subs	r3, r5, r0
 8000d24:	3b76      	subs	r3, #118	@ 0x76
 8000d26:	2100      	movs	r1, #0
 8000d28:	1c5d      	adds	r5, r3, #1
 8000d2a:	2a0a      	cmp	r2, #10
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_fmul+0x1b8>
 8000d2e:	e752      	b.n	8000bd6 <__aeabi_fmul+0x5e>
 8000d30:	e780      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000d32:	2201      	movs	r2, #1
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b1b      	cmp	r3, #27
 8000d38:	dd00      	ble.n	8000d3c <__aeabi_fmul+0x1c4>
 8000d3a:	e758      	b.n	8000bee <__aeabi_fmul+0x76>
 8000d3c:	359e      	adds	r5, #158	@ 0x9e
 8000d3e:	0022      	movs	r2, r4
 8000d40:	40ac      	lsls	r4, r5
 8000d42:	40da      	lsrs	r2, r3
 8000d44:	1e63      	subs	r3, r4, #1
 8000d46:	419c      	sbcs	r4, r3
 8000d48:	4322      	orrs	r2, r4
 8000d4a:	0753      	lsls	r3, r2, #29
 8000d4c:	d004      	beq.n	8000d58 <__aeabi_fmul+0x1e0>
 8000d4e:	230f      	movs	r3, #15
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fmul+0x1e0>
 8000d56:	3204      	adds	r2, #4
 8000d58:	0153      	lsls	r3, r2, #5
 8000d5a:	d537      	bpl.n	8000dcc <__aeabi_fmul+0x254>
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	e747      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000d62:	0c21      	lsrs	r1, r4, #16
 8000d64:	464a      	mov	r2, r9
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	0c24      	lsrs	r4, r4, #16
 8000d6a:	0027      	movs	r7, r4
 8000d6c:	0c10      	lsrs	r0, r2, #16
 8000d6e:	0412      	lsls	r2, r2, #16
 8000d70:	0c12      	lsrs	r2, r2, #16
 8000d72:	4344      	muls	r4, r0
 8000d74:	4357      	muls	r7, r2
 8000d76:	4348      	muls	r0, r1
 8000d78:	4351      	muls	r1, r2
 8000d7a:	0c3a      	lsrs	r2, r7, #16
 8000d7c:	1909      	adds	r1, r1, r4
 8000d7e:	1852      	adds	r2, r2, r1
 8000d80:	4294      	cmp	r4, r2
 8000d82:	d903      	bls.n	8000d8c <__aeabi_fmul+0x214>
 8000d84:	2180      	movs	r1, #128	@ 0x80
 8000d86:	0249      	lsls	r1, r1, #9
 8000d88:	468c      	mov	ip, r1
 8000d8a:	4460      	add	r0, ip
 8000d8c:	043f      	lsls	r7, r7, #16
 8000d8e:	0411      	lsls	r1, r2, #16
 8000d90:	0c3f      	lsrs	r7, r7, #16
 8000d92:	19c9      	adds	r1, r1, r7
 8000d94:	018c      	lsls	r4, r1, #6
 8000d96:	1e67      	subs	r7, r4, #1
 8000d98:	41bc      	sbcs	r4, r7
 8000d9a:	0c12      	lsrs	r2, r2, #16
 8000d9c:	0e89      	lsrs	r1, r1, #26
 8000d9e:	1812      	adds	r2, r2, r0
 8000da0:	430c      	orrs	r4, r1
 8000da2:	0192      	lsls	r2, r2, #6
 8000da4:	4314      	orrs	r4, r2
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	d50e      	bpl.n	8000dc8 <__aeabi_fmul+0x250>
 8000daa:	2301      	movs	r3, #1
 8000dac:	0862      	lsrs	r2, r4, #1
 8000dae:	401c      	ands	r4, r3
 8000db0:	4314      	orrs	r4, r2
 8000db2:	e749      	b.n	8000c48 <__aeabi_fmul+0xd0>
 8000db4:	003e      	movs	r6, r7
 8000db6:	46a1      	mov	r9, r4
 8000db8:	2280      	movs	r2, #128	@ 0x80
 8000dba:	464b      	mov	r3, r9
 8000dbc:	03d2      	lsls	r2, r2, #15
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	0252      	lsls	r2, r2, #9
 8000dc2:	20ff      	movs	r0, #255	@ 0xff
 8000dc4:	0a52      	lsrs	r2, r2, #9
 8000dc6:	e714      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dc8:	001d      	movs	r5, r3
 8000dca:	e73d      	b.n	8000c48 <__aeabi_fmul+0xd0>
 8000dcc:	0192      	lsls	r2, r2, #6
 8000dce:	2000      	movs	r0, #0
 8000dd0:	0a52      	lsrs	r2, r2, #9
 8000dd2:	e70e      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dd4:	290f      	cmp	r1, #15
 8000dd6:	d1ed      	bne.n	8000db4 <__aeabi_fmul+0x23c>
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	464b      	mov	r3, r9
 8000ddc:	03d2      	lsls	r2, r2, #15
 8000dde:	4213      	tst	r3, r2
 8000de0:	d0ea      	beq.n	8000db8 <__aeabi_fmul+0x240>
 8000de2:	4214      	tst	r4, r2
 8000de4:	d1e8      	bne.n	8000db8 <__aeabi_fmul+0x240>
 8000de6:	003e      	movs	r6, r7
 8000de8:	20ff      	movs	r0, #255	@ 0xff
 8000dea:	4322      	orrs	r2, r4
 8000dec:	e701      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	f7ffffff 	.word	0xf7ffffff

08000df4 <__aeabi_fsub>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	4647      	mov	r7, r8
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	024e      	lsls	r6, r1, #9
 8000dfc:	0243      	lsls	r3, r0, #9
 8000dfe:	0045      	lsls	r5, r0, #1
 8000e00:	0a72      	lsrs	r2, r6, #9
 8000e02:	0fc4      	lsrs	r4, r0, #31
 8000e04:	0048      	lsls	r0, r1, #1
 8000e06:	b580      	push	{r7, lr}
 8000e08:	4694      	mov	ip, r2
 8000e0a:	0a5f      	lsrs	r7, r3, #9
 8000e0c:	0e2d      	lsrs	r5, r5, #24
 8000e0e:	099b      	lsrs	r3, r3, #6
 8000e10:	0e00      	lsrs	r0, r0, #24
 8000e12:	0fc9      	lsrs	r1, r1, #31
 8000e14:	09b6      	lsrs	r6, r6, #6
 8000e16:	28ff      	cmp	r0, #255	@ 0xff
 8000e18:	d024      	beq.n	8000e64 <__aeabi_fsub+0x70>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4051      	eors	r1, r2
 8000e1e:	1a2a      	subs	r2, r5, r0
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d00f      	beq.n	8000e44 <__aeabi_fsub+0x50>
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_fsub+0x36>
 8000e28:	e16a      	b.n	8001100 <__aeabi_fsub+0x30c>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d135      	bne.n	8000e9a <__aeabi_fsub+0xa6>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x40>
 8000e32:	e0a2      	b.n	8000f7a <__aeabi_fsub+0x186>
 8000e34:	1e51      	subs	r1, r2, #1
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x48>
 8000e3a:	e124      	b.n	8001086 <__aeabi_fsub+0x292>
 8000e3c:	2aff      	cmp	r2, #255	@ 0xff
 8000e3e:	d021      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e40:	000a      	movs	r2, r1
 8000e42:	e02f      	b.n	8000ea4 <__aeabi_fsub+0xb0>
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	dc00      	bgt.n	8000e4a <__aeabi_fsub+0x56>
 8000e48:	e167      	b.n	800111a <__aeabi_fsub+0x326>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d05e      	beq.n	8000f0c <__aeabi_fsub+0x118>
 8000e4e:	2dff      	cmp	r5, #255	@ 0xff
 8000e50:	d018      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	04c9      	lsls	r1, r1, #19
 8000e56:	430e      	orrs	r6, r1
 8000e58:	2a1b      	cmp	r2, #27
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_fsub+0x6a>
 8000e5c:	e076      	b.n	8000f4c <__aeabi_fsub+0x158>
 8000e5e:	002a      	movs	r2, r5
 8000e60:	3301      	adds	r3, #1
 8000e62:	e032      	b.n	8000eca <__aeabi_fsub+0xd6>
 8000e64:	002a      	movs	r2, r5
 8000e66:	3aff      	subs	r2, #255	@ 0xff
 8000e68:	4691      	mov	r9, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d042      	beq.n	8000ef4 <__aeabi_fsub+0x100>
 8000e6e:	428c      	cmp	r4, r1
 8000e70:	d055      	beq.n	8000f1e <__aeabi_fsub+0x12a>
 8000e72:	464a      	mov	r2, r9
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x86>
 8000e78:	e09c      	b.n	8000fb4 <__aeabi_fsub+0x1c0>
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_fsub+0x8c>
 8000e7e:	e077      	b.n	8000f70 <__aeabi_fsub+0x17c>
 8000e80:	000c      	movs	r4, r1
 8000e82:	0033      	movs	r3, r6
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x98>
 8000e8a:	e06e      	b.n	8000f6a <__aeabi_fsub+0x176>
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	03d2      	lsls	r2, r2, #15
 8000e90:	4313      	orrs	r3, r2
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	20ff      	movs	r0, #255	@ 0xff
 8000e96:	0a5b      	lsrs	r3, r3, #9
 8000e98:	e024      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000e9a:	2dff      	cmp	r5, #255	@ 0xff
 8000e9c:	d0f2      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	04c9      	lsls	r1, r1, #19
 8000ea2:	430e      	orrs	r6, r1
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2a1b      	cmp	r2, #27
 8000ea8:	dc08      	bgt.n	8000ebc <__aeabi_fsub+0xc8>
 8000eaa:	0031      	movs	r1, r6
 8000eac:	2020      	movs	r0, #32
 8000eae:	40d1      	lsrs	r1, r2
 8000eb0:	1a82      	subs	r2, r0, r2
 8000eb2:	4096      	lsls	r6, r2
 8000eb4:	0032      	movs	r2, r6
 8000eb6:	1e50      	subs	r0, r2, #1
 8000eb8:	4182      	sbcs	r2, r0
 8000eba:	4311      	orrs	r1, r2
 8000ebc:	1a5b      	subs	r3, r3, r1
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d460      	bmi.n	8000f84 <__aeabi_fsub+0x190>
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	002a      	movs	r2, r5
 8000ec6:	4019      	ands	r1, r3
 8000ec8:	d057      	beq.n	8000f7a <__aeabi_fsub+0x186>
 8000eca:	210f      	movs	r1, #15
 8000ecc:	4019      	ands	r1, r3
 8000ece:	2904      	cmp	r1, #4
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_fsub+0xe0>
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	0159      	lsls	r1, r3, #5
 8000ed6:	d550      	bpl.n	8000f7a <__aeabi_fsub+0x186>
 8000ed8:	1c50      	adds	r0, r2, #1
 8000eda:	2afe      	cmp	r2, #254	@ 0xfe
 8000edc:	d045      	beq.n	8000f6a <__aeabi_fsub+0x176>
 8000ede:	019b      	lsls	r3, r3, #6
 8000ee0:	b2c0      	uxtb	r0, r0
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	05c0      	lsls	r0, r0, #23
 8000ee6:	4318      	orrs	r0, r3
 8000ee8:	07e4      	lsls	r4, r4, #31
 8000eea:	4320      	orrs	r0, r4
 8000eec:	bcc0      	pop	{r6, r7}
 8000eee:	46b9      	mov	r9, r7
 8000ef0:	46b0      	mov	r8, r6
 8000ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4051      	eors	r1, r2
 8000ef8:	428c      	cmp	r4, r1
 8000efa:	d1ba      	bne.n	8000e72 <__aeabi_fsub+0x7e>
 8000efc:	464a      	mov	r2, r9
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d010      	beq.n	8000f24 <__aeabi_fsub+0x130>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x114>
 8000f06:	e098      	b.n	800103a <__aeabi_fsub+0x246>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e7bb      	b.n	8000e84 <__aeabi_fsub+0x90>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d034      	beq.n	8000f7a <__aeabi_fsub+0x186>
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	2a01      	cmp	r2, #1
 8000f14:	d06e      	beq.n	8000ff4 <__aeabi_fsub+0x200>
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d0b4      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	e79c      	b.n	8000e58 <__aeabi_fsub+0x64>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x130>
 8000f22:	e088      	b.n	8001036 <__aeabi_fsub+0x242>
 8000f24:	20fe      	movs	r0, #254	@ 0xfe
 8000f26:	1c6a      	adds	r2, r5, #1
 8000f28:	4210      	tst	r0, r2
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x13a>
 8000f2c:	e092      	b.n	8001054 <__aeabi_fsub+0x260>
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x140>
 8000f32:	e0a4      	b.n	800107e <__aeabi_fsub+0x28a>
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x146>
 8000f38:	e0cb      	b.n	80010d2 <__aeabi_fsub+0x2de>
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x14c>
 8000f3e:	e0ca      	b.n	80010d6 <__aeabi_fsub+0x2e2>
 8000f40:	2200      	movs	r2, #0
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	0a5b      	lsrs	r3, r3, #9
 8000f48:	b2d0      	uxtb	r0, r2
 8000f4a:	e7cb      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000f4c:	0031      	movs	r1, r6
 8000f4e:	2020      	movs	r0, #32
 8000f50:	40d1      	lsrs	r1, r2
 8000f52:	1a82      	subs	r2, r0, r2
 8000f54:	4096      	lsls	r6, r2
 8000f56:	0032      	movs	r2, r6
 8000f58:	1e50      	subs	r0, r2, #1
 8000f5a:	4182      	sbcs	r2, r0
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	189b      	adds	r3, r3, r2
 8000f60:	015a      	lsls	r2, r3, #5
 8000f62:	d5ae      	bpl.n	8000ec2 <__aeabi_fsub+0xce>
 8000f64:	1c6a      	adds	r2, r5, #1
 8000f66:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f68:	d14a      	bne.n	8001000 <__aeabi_fsub+0x20c>
 8000f6a:	20ff      	movs	r0, #255	@ 0xff
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e7b9      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000f70:	22ff      	movs	r2, #255	@ 0xff
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d14b      	bne.n	800100e <__aeabi_fsub+0x21a>
 8000f76:	000c      	movs	r4, r1
 8000f78:	0033      	movs	r3, r6
 8000f7a:	08db      	lsrs	r3, r3, #3
 8000f7c:	2aff      	cmp	r2, #255	@ 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x18e>
 8000f80:	e781      	b.n	8000e86 <__aeabi_fsub+0x92>
 8000f82:	e7df      	b.n	8000f44 <__aeabi_fsub+0x150>
 8000f84:	019f      	lsls	r7, r3, #6
 8000f86:	09bf      	lsrs	r7, r7, #6
 8000f88:	0038      	movs	r0, r7
 8000f8a:	f000 f939 	bl	8001200 <__clzsi2>
 8000f8e:	3805      	subs	r0, #5
 8000f90:	4087      	lsls	r7, r0
 8000f92:	4285      	cmp	r5, r0
 8000f94:	dc21      	bgt.n	8000fda <__aeabi_fsub+0x1e6>
 8000f96:	003b      	movs	r3, r7
 8000f98:	2120      	movs	r1, #32
 8000f9a:	1b42      	subs	r2, r0, r5
 8000f9c:	3201      	adds	r2, #1
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	4097      	lsls	r7, r2
 8000fa4:	1e7a      	subs	r2, r7, #1
 8000fa6:	4197      	sbcs	r7, r2
 8000fa8:	2200      	movs	r2, #0
 8000faa:	433b      	orrs	r3, r7
 8000fac:	0759      	lsls	r1, r3, #29
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x1be>
 8000fb0:	e78b      	b.n	8000eca <__aeabi_fsub+0xd6>
 8000fb2:	e78f      	b.n	8000ed4 <__aeabi_fsub+0xe0>
 8000fb4:	20fe      	movs	r0, #254	@ 0xfe
 8000fb6:	1c6a      	adds	r2, r5, #1
 8000fb8:	4210      	tst	r0, r2
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_fsub+0x1ee>
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d152      	bne.n	8001066 <__aeabi_fsub+0x272>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d07c      	beq.n	80010be <__aeabi_fsub+0x2ca>
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d0bb      	beq.n	8000f40 <__aeabi_fsub+0x14c>
 8000fc8:	1b9a      	subs	r2, r3, r6
 8000fca:	0150      	lsls	r0, r2, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x1dc>
 8000fce:	e08b      	b.n	80010e8 <__aeabi_fsub+0x2f4>
 8000fd0:	2401      	movs	r4, #1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	1af3      	subs	r3, r6, r3
 8000fd6:	400c      	ands	r4, r1
 8000fd8:	e7e8      	b.n	8000fac <__aeabi_fsub+0x1b8>
 8000fda:	4b56      	ldr	r3, [pc, #344]	@ (8001134 <__aeabi_fsub+0x340>)
 8000fdc:	1a2a      	subs	r2, r5, r0
 8000fde:	403b      	ands	r3, r7
 8000fe0:	e7e4      	b.n	8000fac <__aeabi_fsub+0x1b8>
 8000fe2:	1b9f      	subs	r7, r3, r6
 8000fe4:	017a      	lsls	r2, r7, #5
 8000fe6:	d446      	bmi.n	8001076 <__aeabi_fsub+0x282>
 8000fe8:	2f00      	cmp	r7, #0
 8000fea:	d1cd      	bne.n	8000f88 <__aeabi_fsub+0x194>
 8000fec:	2400      	movs	r4, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e777      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000ff4:	199b      	adds	r3, r3, r6
 8000ff6:	2501      	movs	r5, #1
 8000ff8:	3201      	adds	r2, #1
 8000ffa:	0159      	lsls	r1, r3, #5
 8000ffc:	d400      	bmi.n	8001000 <__aeabi_fsub+0x20c>
 8000ffe:	e760      	b.n	8000ec2 <__aeabi_fsub+0xce>
 8001000:	2101      	movs	r1, #1
 8001002:	484d      	ldr	r0, [pc, #308]	@ (8001138 <__aeabi_fsub+0x344>)
 8001004:	4019      	ands	r1, r3
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	4003      	ands	r3, r0
 800100a:	430b      	orrs	r3, r1
 800100c:	e7ce      	b.n	8000fac <__aeabi_fsub+0x1b8>
 800100e:	1e57      	subs	r7, r2, #1
 8001010:	2a01      	cmp	r2, #1
 8001012:	d05a      	beq.n	80010ca <__aeabi_fsub+0x2d6>
 8001014:	000c      	movs	r4, r1
 8001016:	2aff      	cmp	r2, #255	@ 0xff
 8001018:	d033      	beq.n	8001082 <__aeabi_fsub+0x28e>
 800101a:	2201      	movs	r2, #1
 800101c:	2f1b      	cmp	r7, #27
 800101e:	dc07      	bgt.n	8001030 <__aeabi_fsub+0x23c>
 8001020:	2120      	movs	r1, #32
 8001022:	1bc9      	subs	r1, r1, r7
 8001024:	001a      	movs	r2, r3
 8001026:	408b      	lsls	r3, r1
 8001028:	40fa      	lsrs	r2, r7
 800102a:	1e59      	subs	r1, r3, #1
 800102c:	418b      	sbcs	r3, r1
 800102e:	431a      	orrs	r2, r3
 8001030:	0005      	movs	r5, r0
 8001032:	1ab3      	subs	r3, r6, r2
 8001034:	e743      	b.n	8000ebe <__aeabi_fsub+0xca>
 8001036:	2d00      	cmp	r5, #0
 8001038:	d123      	bne.n	8001082 <__aeabi_fsub+0x28e>
 800103a:	22ff      	movs	r2, #255	@ 0xff
 800103c:	2b00      	cmp	r3, #0
 800103e:	d09b      	beq.n	8000f78 <__aeabi_fsub+0x184>
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	2a01      	cmp	r2, #1
 8001044:	d0d6      	beq.n	8000ff4 <__aeabi_fsub+0x200>
 8001046:	2aff      	cmp	r2, #255	@ 0xff
 8001048:	d01b      	beq.n	8001082 <__aeabi_fsub+0x28e>
 800104a:	291b      	cmp	r1, #27
 800104c:	dd2c      	ble.n	80010a8 <__aeabi_fsub+0x2b4>
 800104e:	0002      	movs	r2, r0
 8001050:	1c73      	adds	r3, r6, #1
 8001052:	e73a      	b.n	8000eca <__aeabi_fsub+0xd6>
 8001054:	2aff      	cmp	r2, #255	@ 0xff
 8001056:	d088      	beq.n	8000f6a <__aeabi_fsub+0x176>
 8001058:	199b      	adds	r3, r3, r6
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	0759      	lsls	r1, r3, #29
 800105e:	d000      	beq.n	8001062 <__aeabi_fsub+0x26e>
 8001060:	e733      	b.n	8000eca <__aeabi_fsub+0xd6>
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	e76e      	b.n	8000f44 <__aeabi_fsub+0x150>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d110      	bne.n	800108c <__aeabi_fsub+0x298>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d043      	beq.n	80010f6 <__aeabi_fsub+0x302>
 800106e:	2401      	movs	r4, #1
 8001070:	0033      	movs	r3, r6
 8001072:	400c      	ands	r4, r1
 8001074:	e706      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001076:	2401      	movs	r4, #1
 8001078:	1af7      	subs	r7, r6, r3
 800107a:	400c      	ands	r4, r1
 800107c:	e784      	b.n	8000f88 <__aeabi_fsub+0x194>
 800107e:	2b00      	cmp	r3, #0
 8001080:	d104      	bne.n	800108c <__aeabi_fsub+0x298>
 8001082:	0033      	movs	r3, r6
 8001084:	e6fe      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001086:	2501      	movs	r5, #1
 8001088:	1b9b      	subs	r3, r3, r6
 800108a:	e718      	b.n	8000ebe <__aeabi_fsub+0xca>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x29e>
 8001090:	e6f8      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	03d2      	lsls	r2, r2, #15
 8001096:	4297      	cmp	r7, r2
 8001098:	d304      	bcc.n	80010a4 <__aeabi_fsub+0x2b0>
 800109a:	4594      	cmp	ip, r2
 800109c:	d202      	bcs.n	80010a4 <__aeabi_fsub+0x2b0>
 800109e:	2401      	movs	r4, #1
 80010a0:	0033      	movs	r3, r6
 80010a2:	400c      	ands	r4, r1
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	e6f1      	b.n	8000e8c <__aeabi_fsub+0x98>
 80010a8:	001a      	movs	r2, r3
 80010aa:	2520      	movs	r5, #32
 80010ac:	40ca      	lsrs	r2, r1
 80010ae:	1a69      	subs	r1, r5, r1
 80010b0:	408b      	lsls	r3, r1
 80010b2:	1e59      	subs	r1, r3, #1
 80010b4:	418b      	sbcs	r3, r1
 80010b6:	4313      	orrs	r3, r2
 80010b8:	0005      	movs	r5, r0
 80010ba:	199b      	adds	r3, r3, r6
 80010bc:	e750      	b.n	8000f60 <__aeabi_fsub+0x16c>
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d094      	beq.n	8000fec <__aeabi_fsub+0x1f8>
 80010c2:	2401      	movs	r4, #1
 80010c4:	0033      	movs	r3, r6
 80010c6:	400c      	ands	r4, r1
 80010c8:	e73a      	b.n	8000f40 <__aeabi_fsub+0x14c>
 80010ca:	000c      	movs	r4, r1
 80010cc:	2501      	movs	r5, #1
 80010ce:	1af3      	subs	r3, r6, r3
 80010d0:	e6f5      	b.n	8000ebe <__aeabi_fsub+0xca>
 80010d2:	0033      	movs	r3, r6
 80010d4:	e734      	b.n	8000f40 <__aeabi_fsub+0x14c>
 80010d6:	199b      	adds	r3, r3, r6
 80010d8:	2200      	movs	r2, #0
 80010da:	0159      	lsls	r1, r3, #5
 80010dc:	d5c1      	bpl.n	8001062 <__aeabi_fsub+0x26e>
 80010de:	4a15      	ldr	r2, [pc, #84]	@ (8001134 <__aeabi_fsub+0x340>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	2201      	movs	r2, #1
 80010e6:	e72d      	b.n	8000f44 <__aeabi_fsub+0x150>
 80010e8:	2a00      	cmp	r2, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x2fa>
 80010ec:	e77e      	b.n	8000fec <__aeabi_fsub+0x1f8>
 80010ee:	0013      	movs	r3, r2
 80010f0:	2200      	movs	r2, #0
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	e726      	b.n	8000f44 <__aeabi_fsub+0x150>
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	2400      	movs	r4, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03db      	lsls	r3, r3, #15
 80010fe:	e6f1      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8001100:	2a00      	cmp	r2, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x312>
 8001104:	e756      	b.n	8000fb4 <__aeabi_fsub+0x1c0>
 8001106:	1b47      	subs	r7, r0, r5
 8001108:	003a      	movs	r2, r7
 800110a:	2d00      	cmp	r5, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x31c>
 800110e:	e730      	b.n	8000f72 <__aeabi_fsub+0x17e>
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	04d2      	lsls	r2, r2, #19
 8001114:	000c      	movs	r4, r1
 8001116:	4313      	orrs	r3, r2
 8001118:	e77f      	b.n	800101a <__aeabi_fsub+0x226>
 800111a:	2a00      	cmp	r2, #0
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x32c>
 800111e:	e701      	b.n	8000f24 <__aeabi_fsub+0x130>
 8001120:	1b41      	subs	r1, r0, r5
 8001122:	2d00      	cmp	r5, #0
 8001124:	d101      	bne.n	800112a <__aeabi_fsub+0x336>
 8001126:	000a      	movs	r2, r1
 8001128:	e788      	b.n	800103c <__aeabi_fsub+0x248>
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	04d2      	lsls	r2, r2, #19
 800112e:	4313      	orrs	r3, r2
 8001130:	e78b      	b.n	800104a <__aeabi_fsub+0x256>
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	fbffffff 	.word	0xfbffffff
 8001138:	7dffffff 	.word	0x7dffffff

0800113c <__aeabi_f2iz>:
 800113c:	0241      	lsls	r1, r0, #9
 800113e:	0042      	lsls	r2, r0, #1
 8001140:	0fc3      	lsrs	r3, r0, #31
 8001142:	0a49      	lsrs	r1, r1, #9
 8001144:	2000      	movs	r0, #0
 8001146:	0e12      	lsrs	r2, r2, #24
 8001148:	2a7e      	cmp	r2, #126	@ 0x7e
 800114a:	dd03      	ble.n	8001154 <__aeabi_f2iz+0x18>
 800114c:	2a9d      	cmp	r2, #157	@ 0x9d
 800114e:	dd02      	ble.n	8001156 <__aeabi_f2iz+0x1a>
 8001150:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <__aeabi_f2iz+0x3c>)
 8001152:	1898      	adds	r0, r3, r2
 8001154:	4770      	bx	lr
 8001156:	2080      	movs	r0, #128	@ 0x80
 8001158:	0400      	lsls	r0, r0, #16
 800115a:	4301      	orrs	r1, r0
 800115c:	2a95      	cmp	r2, #149	@ 0x95
 800115e:	dc07      	bgt.n	8001170 <__aeabi_f2iz+0x34>
 8001160:	2096      	movs	r0, #150	@ 0x96
 8001162:	1a82      	subs	r2, r0, r2
 8001164:	40d1      	lsrs	r1, r2
 8001166:	4248      	negs	r0, r1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f3      	bne.n	8001154 <__aeabi_f2iz+0x18>
 800116c:	0008      	movs	r0, r1
 800116e:	e7f1      	b.n	8001154 <__aeabi_f2iz+0x18>
 8001170:	3a96      	subs	r2, #150	@ 0x96
 8001172:	4091      	lsls	r1, r2
 8001174:	e7f7      	b.n	8001166 <__aeabi_f2iz+0x2a>
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	7fffffff 	.word	0x7fffffff

0800117c <__aeabi_ui2f>:
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	1e04      	subs	r4, r0, #0
 8001180:	d00e      	beq.n	80011a0 <__aeabi_ui2f+0x24>
 8001182:	f000 f83d 	bl	8001200 <__clzsi2>
 8001186:	239e      	movs	r3, #158	@ 0x9e
 8001188:	0001      	movs	r1, r0
 800118a:	1a1b      	subs	r3, r3, r0
 800118c:	2b96      	cmp	r3, #150	@ 0x96
 800118e:	dc0c      	bgt.n	80011aa <__aeabi_ui2f+0x2e>
 8001190:	2808      	cmp	r0, #8
 8001192:	d02f      	beq.n	80011f4 <__aeabi_ui2f+0x78>
 8001194:	3908      	subs	r1, #8
 8001196:	408c      	lsls	r4, r1
 8001198:	0264      	lsls	r4, r4, #9
 800119a:	0a64      	lsrs	r4, r4, #9
 800119c:	b2d8      	uxtb	r0, r3
 800119e:	e001      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011a0:	2000      	movs	r0, #0
 80011a2:	2400      	movs	r4, #0
 80011a4:	05c0      	lsls	r0, r0, #23
 80011a6:	4320      	orrs	r0, r4
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
 80011aa:	2b99      	cmp	r3, #153	@ 0x99
 80011ac:	dc16      	bgt.n	80011dc <__aeabi_ui2f+0x60>
 80011ae:	1f42      	subs	r2, r0, #5
 80011b0:	2805      	cmp	r0, #5
 80011b2:	d000      	beq.n	80011b6 <__aeabi_ui2f+0x3a>
 80011b4:	4094      	lsls	r4, r2
 80011b6:	0022      	movs	r2, r4
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <__aeabi_ui2f+0x80>)
 80011ba:	4002      	ands	r2, r0
 80011bc:	0765      	lsls	r5, r4, #29
 80011be:	d009      	beq.n	80011d4 <__aeabi_ui2f+0x58>
 80011c0:	250f      	movs	r5, #15
 80011c2:	402c      	ands	r4, r5
 80011c4:	2c04      	cmp	r4, #4
 80011c6:	d005      	beq.n	80011d4 <__aeabi_ui2f+0x58>
 80011c8:	3204      	adds	r2, #4
 80011ca:	0154      	lsls	r4, r2, #5
 80011cc:	d502      	bpl.n	80011d4 <__aeabi_ui2f+0x58>
 80011ce:	239f      	movs	r3, #159	@ 0x9f
 80011d0:	4002      	ands	r2, r0
 80011d2:	1a5b      	subs	r3, r3, r1
 80011d4:	0192      	lsls	r2, r2, #6
 80011d6:	0a54      	lsrs	r4, r2, #9
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	e7e3      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011dc:	0002      	movs	r2, r0
 80011de:	0020      	movs	r0, r4
 80011e0:	321b      	adds	r2, #27
 80011e2:	4090      	lsls	r0, r2
 80011e4:	0002      	movs	r2, r0
 80011e6:	1e50      	subs	r0, r2, #1
 80011e8:	4182      	sbcs	r2, r0
 80011ea:	2005      	movs	r0, #5
 80011ec:	1a40      	subs	r0, r0, r1
 80011ee:	40c4      	lsrs	r4, r0
 80011f0:	4314      	orrs	r4, r2
 80011f2:	e7e0      	b.n	80011b6 <__aeabi_ui2f+0x3a>
 80011f4:	0264      	lsls	r4, r4, #9
 80011f6:	2096      	movs	r0, #150	@ 0x96
 80011f8:	0a64      	lsrs	r4, r4, #9
 80011fa:	e7d3      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011fc:	fbffffff 	.word	0xfbffffff

08001200 <__clzsi2>:
 8001200:	211c      	movs	r1, #28
 8001202:	2301      	movs	r3, #1
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	4298      	cmp	r0, r3
 8001208:	d301      	bcc.n	800120e <__clzsi2+0xe>
 800120a:	0c00      	lsrs	r0, r0, #16
 800120c:	3910      	subs	r1, #16
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	4298      	cmp	r0, r3
 8001212:	d301      	bcc.n	8001218 <__clzsi2+0x18>
 8001214:	0a00      	lsrs	r0, r0, #8
 8001216:	3908      	subs	r1, #8
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	4298      	cmp	r0, r3
 800121c:	d301      	bcc.n	8001222 <__clzsi2+0x22>
 800121e:	0900      	lsrs	r0, r0, #4
 8001220:	3904      	subs	r1, #4
 8001222:	a202      	add	r2, pc, #8	@ (adr r2, 800122c <__clzsi2+0x2c>)
 8001224:	5c10      	ldrb	r0, [r2, r0]
 8001226:	1840      	adds	r0, r0, r1
 8001228:	4770      	bx	lr
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	02020304 	.word	0x02020304
 8001230:	01010101 	.word	0x01010101
	...

0800123c <actuate>:
extern pid_t pid_constraints;

float pid_step(pid_t *pid, float measurement, float setpoint);

void actuate(uint8_t actuator, uint16_t current, uint16_t target)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	0004      	movs	r4, r0
 8001244:	0008      	movs	r0, r1
 8001246:	0011      	movs	r1, r2
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	1c22      	adds	r2, r4, #0
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	1c02      	adds	r2, r0, #0
 8001252:	801a      	strh	r2, [r3, #0]
 8001254:	1cbb      	adds	r3, r7, #2
 8001256:	1c0a      	adds	r2, r1, #0
 8001258:	801a      	strh	r2, [r3, #0]
	if(selected_actuator != actuator)
 800125a:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <actuate+0xc8>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	1dfa      	adds	r2, r7, #7
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d04a      	beq.n	80012fc <actuate+0xc0>
	{
		// Wait an amount of time for electrical safety
		if(!time_stamped)
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <actuate+0xcc>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10a      	bne.n	8001284 <actuate+0x48>
		{
			// Shut off the PWM pin
			TIM1->CCR1 = 0;
 800126e:	4b27      	ldr	r3, [pc, #156]	@ (800130c <actuate+0xd0>)
 8001270:	2200      	movs	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34
			time_ms = HAL_GetTick();
 8001274:	f001 fc46 	bl	8002b04 <HAL_GetTick>
 8001278:	0002      	movs	r2, r0
 800127a:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <actuate+0xd4>)
 800127c:	601a      	str	r2, [r3, #0]
			time_stamped = 1;
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <actuate+0xcc>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - time_ms >= ACTUATOR_TRANSIENT_DELAY)
 8001284:	f001 fc3e 	bl	8002b04 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <actuate+0xd4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b95      	cmp	r3, #149	@ 0x95
 8001292:	d933      	bls.n	80012fc <actuate+0xc0>
		{
			// Reset the transient protection timer
			time_stamped = 0;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <actuate+0xcc>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]

			// Deactivate the old actuator
			HAL_GPIO_TogglePin(GPIOB, pin_map[selected_actuator]);
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <actuate+0xc8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	001a      	movs	r2, r3
 80012a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <actuate+0xd8>)
 80012a2:	0052      	lsls	r2, r2, #1
 80012a4:	5ad3      	ldrh	r3, [r2, r3]
 80012a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <actuate+0xdc>)
 80012a8:	0019      	movs	r1, r3
 80012aa:	0010      	movs	r0, r2
 80012ac:	f003 f83f 	bl	800432e <HAL_GPIO_TogglePin>

			// Activate the new actuator
			HAL_GPIO_TogglePin(GPIOB, pin_map[actuator]);
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <actuate+0xd8>)
 80012b6:	0052      	lsls	r2, r2, #1
 80012b8:	5ad3      	ldrh	r3, [r2, r3]
 80012ba:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <actuate+0xdc>)
 80012bc:	0019      	movs	r1, r3
 80012be:	0010      	movs	r0, r2
 80012c0:	f003 f835 	bl	800432e <HAL_GPIO_TogglePin>

			// Exit this code section by switching the actuator
			selected_actuator = actuator;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <actuate+0xc8>)
 80012c6:	1dfa      	adds	r2, r7, #7
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	701a      	strb	r2, [r3, #0]

			// Set the duty cycle
			TIM1->CCR1 = pid_step(&pid_constraints, current, target);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff53 	bl	800117c <__aeabi_ui2f>
 80012d6:	1c04      	adds	r4, r0, #0
 80012d8:	1cbb      	adds	r3, r7, #2
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff ff4d 	bl	800117c <__aeabi_ui2f>
 80012e2:	1c02      	adds	r2, r0, #0
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <actuate+0xe0>)
 80012e6:	1c21      	adds	r1, r4, #0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 f819 	bl	8001320 <pid_step>
 80012ee:	1c03      	adds	r3, r0, #0
 80012f0:	4c06      	ldr	r4, [pc, #24]	@ (800130c <actuate+0xd0>)
 80012f2:	1c18      	adds	r0, r3, #0
 80012f4:	f7ff f8b8 	bl	8000468 <__aeabi_f2uiz>
 80012f8:	0003      	movs	r3, r0
 80012fa:	6363      	str	r3, [r4, #52]	@ 0x34
	{
		// Just set the duty cycle

	}

}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b003      	add	sp, #12
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	200000a0 	.word	0x200000a0
 8001308:	200000a1 	.word	0x200000a1
 800130c:	40012c00 	.word	0x40012c00
 8001310:	200000a4 	.word	0x200000a4
 8001314:	200003e0 	.word	0x200003e0
 8001318:	50000400 	.word	0x50000400
 800131c:	200003a8 	.word	0x200003a8

08001320 <pid_step>:

float pid_step(pid_t *pid, float measurement, float setpoint)
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
    float command;
    float command_sat;
    float deriv_filt;

    /* Error calculation */
    err = setpoint - measurement;
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd60 	bl	8000df4 <__aeabi_fsub>
 8001334:	1c03      	adds	r3, r0, #0
 8001336:	61bb      	str	r3, [r7, #24]

    /* Integral term calculation - including anti-windup */
    pid->integral += pid->Ki*err*pid->T + pid->Kaw*(pid->command_sat_prev - pid->command_prev)*pid->T;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	69b9      	ldr	r1, [r7, #24]
 8001342:	1c18      	adds	r0, r3, #0
 8001344:	f7ff fc18 	bl	8000b78 <__aeabi_fmul>
 8001348:	1c03      	adds	r3, r0, #0
 800134a:	1c1a      	adds	r2, r3, #0
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	1c19      	adds	r1, r3, #0
 8001352:	1c10      	adds	r0, r2, #0
 8001354:	f7ff fc10 	bl	8000b78 <__aeabi_fmul>
 8001358:	1c03      	adds	r3, r0, #0
 800135a:	1c1e      	adds	r6, r3, #0
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68dd      	ldr	r5, [r3, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001368:	1c19      	adds	r1, r3, #0
 800136a:	1c10      	adds	r0, r2, #0
 800136c:	f7ff fd42 	bl	8000df4 <__aeabi_fsub>
 8001370:	1c03      	adds	r3, r0, #0
 8001372:	1c19      	adds	r1, r3, #0
 8001374:	1c28      	adds	r0, r5, #0
 8001376:	f7ff fbff 	bl	8000b78 <__aeabi_fmul>
 800137a:	1c03      	adds	r3, r0, #0
 800137c:	1c1a      	adds	r2, r3, #0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	1c19      	adds	r1, r3, #0
 8001384:	1c10      	adds	r0, r2, #0
 8001386:	f7ff fbf7 	bl	8000b78 <__aeabi_fmul>
 800138a:	1c03      	adds	r3, r0, #0
 800138c:	1c19      	adds	r1, r3, #0
 800138e:	1c30      	adds	r0, r6, #0
 8001390:	f7ff f882 	bl	8000498 <__aeabi_fadd>
 8001394:	1c03      	adds	r3, r0, #0
 8001396:	1c19      	adds	r1, r3, #0
 8001398:	1c20      	adds	r0, r4, #0
 800139a:	f7ff f87d 	bl	8000498 <__aeabi_fadd>
 800139e:	1c03      	adds	r3, r0, #0
 80013a0:	1c1a      	adds	r2, r3, #0
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Derivative term calculation using filtered derivative method */
    deriv_filt = (err - pid->err_prev + pid->T_C*pid->deriv_prev)/(pid->T + pid->T_C);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	1c19      	adds	r1, r3, #0
 80013ac:	69b8      	ldr	r0, [r7, #24]
 80013ae:	f7ff fd21 	bl	8000df4 <__aeabi_fsub>
 80013b2:	1c03      	adds	r3, r0, #0
 80013b4:	1c1c      	adds	r4, r3, #0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	1c19      	adds	r1, r3, #0
 80013c0:	1c10      	adds	r0, r2, #0
 80013c2:	f7ff fbd9 	bl	8000b78 <__aeabi_fmul>
 80013c6:	1c03      	adds	r3, r0, #0
 80013c8:	1c19      	adds	r1, r3, #0
 80013ca:	1c20      	adds	r0, r4, #0
 80013cc:	f7ff f864 	bl	8000498 <__aeabi_fadd>
 80013d0:	1c03      	adds	r3, r0, #0
 80013d2:	1c1c      	adds	r4, r3, #0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	1c19      	adds	r1, r3, #0
 80013de:	1c10      	adds	r0, r2, #0
 80013e0:	f7ff f85a 	bl	8000498 <__aeabi_fadd>
 80013e4:	1c03      	adds	r3, r0, #0
 80013e6:	1c19      	adds	r1, r3, #0
 80013e8:	1c20      	adds	r0, r4, #0
 80013ea:	f7ff f9df 	bl	80007ac <__aeabi_fdiv>
 80013ee:	1c03      	adds	r3, r0, #0
 80013f0:	617b      	str	r3, [r7, #20]
    pid->err_prev = err;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->deriv_prev = deriv_filt;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Summing the 3 terms */
    command = pid->Kp*err + pid->integral + pid->Kd*deriv_filt;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	1c18      	adds	r0, r3, #0
 8001406:	f7ff fbb7 	bl	8000b78 <__aeabi_fmul>
 800140a:	1c03      	adds	r3, r0, #0
 800140c:	1c1a      	adds	r2, r3, #0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	1c19      	adds	r1, r3, #0
 8001414:	1c10      	adds	r0, r2, #0
 8001416:	f7ff f83f 	bl	8000498 <__aeabi_fadd>
 800141a:	1c03      	adds	r3, r0, #0
 800141c:	1c1c      	adds	r4, r3, #0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	6979      	ldr	r1, [r7, #20]
 8001424:	1c18      	adds	r0, r3, #0
 8001426:	f7ff fba7 	bl	8000b78 <__aeabi_fmul>
 800142a:	1c03      	adds	r3, r0, #0
 800142c:	1c19      	adds	r1, r3, #0
 800142e:	1c20      	adds	r0, r4, #0
 8001430:	f7ff f832 	bl	8000498 <__aeabi_fadd>
 8001434:	1c03      	adds	r3, r0, #0
 8001436:	613b      	str	r3, [r7, #16]

    /* Remember command at previous step */
    pid->command_prev = command;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Saturate command */
    if (command > pid->max)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	1c19      	adds	r1, r3, #0
 8001444:	6938      	ldr	r0, [r7, #16]
 8001446:	f7fe fffb 	bl	8000440 <__aeabi_fcmpgt>
 800144a:	1e03      	subs	r3, r0, #0
 800144c:	d003      	beq.n	8001456 <pid_step+0x136>
    {
        command_sat = pid->max;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e00d      	b.n	8001472 <pid_step+0x152>
    }
    else if (command < pid->min)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	1c19      	adds	r1, r3, #0
 800145c:	6938      	ldr	r0, [r7, #16]
 800145e:	f7fe ffdb 	bl	8000418 <__aeabi_fcmplt>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d003      	beq.n	800146e <pid_step+0x14e>
    {
        command_sat = pid->min;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	e001      	b.n	8001472 <pid_step+0x152>
    }
    else
    {
        command_sat = command;
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	61fb      	str	r3, [r7, #28]
    }

    /* Apply rate limiter */
    if (command_sat > pid->command_sat_prev + pid->max_rate*pid->T)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a1a      	ldr	r2, [r3, #32]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	1c19      	adds	r1, r3, #0
 8001480:	1c10      	adds	r0, r2, #0
 8001482:	f7ff fb79 	bl	8000b78 <__aeabi_fmul>
 8001486:	1c03      	adds	r3, r0, #0
 8001488:	1c19      	adds	r1, r3, #0
 800148a:	1c20      	adds	r0, r4, #0
 800148c:	f7ff f804 	bl	8000498 <__aeabi_fadd>
 8001490:	1c03      	adds	r3, r0, #0
 8001492:	1c19      	adds	r1, r3, #0
 8001494:	69f8      	ldr	r0, [r7, #28]
 8001496:	f7fe ffd3 	bl	8000440 <__aeabi_fcmpgt>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d011      	beq.n	80014c2 <pid_step+0x1a2>
    {
        command_sat = pid->command_sat_prev + pid->max_rate*pid->T;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	1c19      	adds	r1, r3, #0
 80014ac:	1c10      	adds	r0, r2, #0
 80014ae:	f7ff fb63 	bl	8000b78 <__aeabi_fmul>
 80014b2:	1c03      	adds	r3, r0, #0
 80014b4:	1c19      	adds	r1, r3, #0
 80014b6:	1c20      	adds	r0, r4, #0
 80014b8:	f7fe ffee 	bl	8000498 <__aeabi_fadd>
 80014bc:	1c03      	adds	r3, r0, #0
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	e026      	b.n	8001510 <pid_step+0x1f0>
    }
    else if (command_sat < pid->command_sat_prev - pid->max_rate*pid->T)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a1a      	ldr	r2, [r3, #32]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	1c19      	adds	r1, r3, #0
 80014d0:	1c10      	adds	r0, r2, #0
 80014d2:	f7ff fb51 	bl	8000b78 <__aeabi_fmul>
 80014d6:	1c03      	adds	r3, r0, #0
 80014d8:	1c19      	adds	r1, r3, #0
 80014da:	1c20      	adds	r0, r4, #0
 80014dc:	f7ff fc8a 	bl	8000df4 <__aeabi_fsub>
 80014e0:	1c03      	adds	r3, r0, #0
 80014e2:	1c19      	adds	r1, r3, #0
 80014e4:	69f8      	ldr	r0, [r7, #28]
 80014e6:	f7fe ff97 	bl	8000418 <__aeabi_fcmplt>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d010      	beq.n	8001510 <pid_step+0x1f0>
    {
        command_sat = pid->command_sat_prev - pid->max_rate*pid->T;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a1a      	ldr	r2, [r3, #32]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	1c19      	adds	r1, r3, #0
 80014fc:	1c10      	adds	r0, r2, #0
 80014fe:	f7ff fb3b 	bl	8000b78 <__aeabi_fmul>
 8001502:	1c03      	adds	r3, r0, #0
 8001504:	1c19      	adds	r1, r3, #0
 8001506:	1c20      	adds	r0, r4, #0
 8001508:	f7ff fc74 	bl	8000df4 <__aeabi_fsub>
 800150c:	1c03      	adds	r3, r0, #0
 800150e:	61fb      	str	r3, [r7, #28]
    {
        /* No action */
    }

    /* Remember saturated command at previous step */
    pid->command_sat_prev = command_sat;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	631a      	str	r2, [r3, #48]	@ 0x30

    return command_sat;
 8001516:	69fb      	ldr	r3, [r7, #28]
}
 8001518:	1c18      	adds	r0, r3, #0
 800151a:	46bd      	mov	sp, r7
 800151c:	b009      	add	sp, #36	@ 0x24
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001520 <HAL_ADC_ConvCpltCallback>:
{
	// will be used for when i2c is designed with interrupts
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 9; i++)
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e011      	b.n	8001556 <HAL_ADC_ConvCpltCallback+0x36>
	{
		holding_register_database[i + 3] = (uint16_t)raw_data[i];
 8001532:	200f      	movs	r0, #15
 8001534:	183b      	adds	r3, r7, r0
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_ADC_ConvCpltCallback+0x4c>)
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	58d1      	ldr	r1, [r2, r3]
 800153e:	183b      	adds	r3, r7, r0
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	1cda      	adds	r2, r3, #3
 8001544:	b289      	uxth	r1, r1
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_ADC_ConvCpltCallback+0x50>)
 8001548:	0052      	lsls	r2, r2, #1
 800154a:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 9; i++)
 800154c:	183b      	adds	r3, r7, r0
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	183b      	adds	r3, r7, r0
 8001552:	3201      	adds	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	230f      	movs	r3, #15
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b08      	cmp	r3, #8
 800155e:	d9e8      	bls.n	8001532 <HAL_ADC_ConvCpltCallback+0x12>
	}
}
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	200003e8 	.word	0x200003e8
 8001570:	20000000 	.word	0x20000000

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157a:	f001 fa50 	bl	8002a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157e:	f000 f8f7 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001582:	f000 fbd7 	bl	8001d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001586:	f000 fbaf 	bl	8001ce8 <MX_DMA_Init>
  MX_ADC1_Init();
 800158a:	f000 f935 	bl	80017f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800158e:	f000 fa0d 	bl	80019ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8001592:	f000 fa4b 	bl	8001a2c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001596:	f000 fa87 	bl	8001aa8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800159a:	f000 fb55 	bl	8001c48 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800159e:	f000 fb2d 	bl	8001bfc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80015a2:	4b68      	ldr	r3, [pc, #416]	@ (8001744 <main+0x1d0>)
 80015a4:	2280      	movs	r2, #128	@ 0x80
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80015aa:	4b66      	ldr	r3, [pc, #408]	@ (8001744 <main+0x1d0>)
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	0052      	lsls	r2, r2, #1
 80015b0:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80015b2:	4b64      	ldr	r3, [pc, #400]	@ (8001744 <main+0x1d0>)
 80015b4:	2280      	movs	r2, #128	@ 0x80
 80015b6:	809a      	strh	r2, [r3, #4]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 80015b8:	4b63      	ldr	r3, [pc, #396]	@ (8001748 <main+0x1d4>)
 80015ba:	22fe      	movs	r2, #254	@ 0xfe
 80015bc:	0592      	lsls	r2, r2, #22
 80015be:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 80015c0:	4b61      	ldr	r3, [pc, #388]	@ (8001748 <main+0x1d4>)
 80015c2:	4a62      	ldr	r2, [pc, #392]	@ (800174c <main+0x1d8>)
 80015c4:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80015c6:	4b60      	ldr	r3, [pc, #384]	@ (8001748 <main+0x1d4>)
 80015c8:	4a61      	ldr	r2, [pc, #388]	@ (8001750 <main+0x1dc>)
 80015ca:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80015cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001748 <main+0x1d4>)
 80015ce:	4a5f      	ldr	r2, [pc, #380]	@ (800174c <main+0x1d8>)
 80015d0:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 80015d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001748 <main+0x1d4>)
 80015d4:	22fe      	movs	r2, #254	@ 0xfe
 80015d6:	0592      	lsls	r2, r2, #22
 80015d8:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 80015da:	4b5b      	ldr	r3, [pc, #364]	@ (8001748 <main+0x1d4>)
 80015dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001754 <main+0x1e0>)
 80015de:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 80015e0:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <main+0x1d4>)
 80015e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001754 <main+0x1e0>)
 80015e4:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 80015e6:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <main+0x1d4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 80015ec:	4b56      	ldr	r3, [pc, #344]	@ (8001748 <main+0x1d4>)
 80015ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001758 <main+0x1e4>)
 80015f0:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 80015f2:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <main+0x1d4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <main+0x1d4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 80015fe:	4b52      	ldr	r3, [pc, #328]	@ (8001748 <main+0x1d4>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <main+0x1d4>)
 8001606:	2200      	movs	r2, #0
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 800160a:	4b4f      	ldr	r3, [pc, #316]	@ (8001748 <main+0x1d4>)
 800160c:	2200      	movs	r2, #0
 800160e:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx(255) != HAL_OK)
 8001610:	20ff      	movs	r0, #255	@ 0xff
 8001612:	f000 fe3d 	bl	8002290 <modbus_set_rx>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <main+0xaa>
  {
	  Error_Handler();
 800161a:	f000 fc07 	bl	8001e2c <Error_Handler>
  }

  if(HAL_ADC_Start_DMA(&hadc1, raw_data, 9) != HAL_OK)
 800161e:	494f      	ldr	r1, [pc, #316]	@ (800175c <main+0x1e8>)
 8001620:	4b4f      	ldr	r3, [pc, #316]	@ (8001760 <main+0x1ec>)
 8001622:	2209      	movs	r2, #9
 8001624:	0018      	movs	r0, r3
 8001626:	f001 fd65 	bl	80030f4 <HAL_ADC_Start_DMA>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d001      	beq.n	8001632 <main+0xbe>
  {
	  Error_Handler();
 800162e:	f000 fbfd 	bl	8001e2c <Error_Handler>

//  bno055_assignI2C(&hi2c1);
//  bno055_setup();
//  bno055_setOperationModeNDOF();

  TIM1->CCR1 = 0;
 8001632:	4b4c      	ldr	r3, [pc, #304]	@ (8001764 <main+0x1f0>)
 8001634:	2200      	movs	r2, #0
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001638:	4b4b      	ldr	r3, [pc, #300]	@ (8001768 <main+0x1f4>)
 800163a:	2100      	movs	r1, #0
 800163c:	0018      	movs	r0, r3
 800163e:	f003 fdff 	bl	8005240 <HAL_TIM_PWM_Start>
   * target_actuator
   * 0: Actuator A
   * 1: Actuator B
   * 2: Actuator C
   */
  uint8_t target_actuator = 0;
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  if(modbus_rx())
 8001648:	f000 fe0e 	bl	8002268 <modbus_rx>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d034      	beq.n	80016ba <main+0x146>
	  {
		  int8_t status = 0;
 8001650:	1dbb      	adds	r3, r7, #6
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8001656:	2000      	movs	r0, #0
 8001658:	f000 fc0a 	bl	8001e70 <get_rx_buffer>
 800165c:	0003      	movs	r3, r0
 800165e:	001a      	movs	r2, r3
 8001660:	4b42      	ldr	r3, [pc, #264]	@ (800176c <main+0x1f8>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d11b      	bne.n	80016a0 <main+0x12c>
		  {
			  switch(get_rx_buffer(1))
 8001668:	2001      	movs	r0, #1
 800166a:	f000 fc01 	bl	8001e70 <get_rx_buffer>
 800166e:	0003      	movs	r3, r0
 8001670:	2b03      	cmp	r3, #3
 8001672:	d002      	beq.n	800167a <main+0x106>
 8001674:	2b10      	cmp	r3, #16
 8001676:	d006      	beq.n	8001686 <main+0x112>
 8001678:	e00b      	b.n	8001692 <main+0x11e>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 800167a:	1dbc      	adds	r4, r7, #6
 800167c:	f000 fc0e 	bl	8001e9c <return_holding_registers>
 8001680:	0003      	movs	r3, r0
 8001682:	7023      	strb	r3, [r4, #0]
					  break;
 8001684:	e005      	b.n	8001692 <main+0x11e>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 8001686:	1dbc      	adds	r4, r7, #6
 8001688:	f000 fc98 	bl	8001fbc <edit_multiple_registers>
 800168c:	0003      	movs	r3, r0
 800168e:	7023      	strb	r3, [r4, #0]
					  break;
 8001690:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(status != 0)
 8001692:	1dbb      	adds	r3, r7, #6
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b25b      	sxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <main+0x12c>
			  {
				  // log error in a queue
				  Error_Handler();
 800169c:	f000 fbc6 	bl	8001e2c <Error_Handler>
			  }
		  }
		  status = modbus_set_rx(255); // may be able to set size to 12
 80016a0:	1dbc      	adds	r4, r7, #6
 80016a2:	20ff      	movs	r0, #255	@ 0xff
 80016a4:	f000 fdf4 	bl	8002290 <modbus_set_rx>
 80016a8:	0003      	movs	r3, r0
 80016aa:	7023      	strb	r3, [r4, #0]
		  if(status != 0)
 80016ac:	1dbb      	adds	r3, r7, #6
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <main+0x146>
		  {
			  // log error in a queue
			  Error_Handler();
 80016b6:	f000 fbb9 	bl	8001e2c <Error_Handler>
//	  bno055_vector_t v1 = bno055_getVectorEuler();
//	  bno055_vector_t v2 = bno055_getVectorAccelerometer();
//	  bno055_vector_t v3 = bno055_getVectorGyroscope();

	  // 15 adc values relates to x cm of the linear actuator
	  if(holding_register_database[9 + target_actuator] >= holding_register_database[56 + target_actuator] - ACTUATOR_TOLERANCE &&
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3309      	adds	r3, #9
 80016c0:	001a      	movs	r2, r3
 80016c2:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <main+0x1f8>)
 80016c4:	0052      	lsls	r2, r2, #1
 80016c6:	5ad3      	ldrh	r3, [r2, r3]
 80016c8:	0019      	movs	r1, r3
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	3338      	adds	r3, #56	@ 0x38
 80016d0:	001a      	movs	r2, r3
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <main+0x1f8>)
 80016d4:	0052      	lsls	r2, r2, #1
 80016d6:	5ad3      	ldrh	r3, [r2, r3]
 80016d8:	3b0f      	subs	r3, #15
 80016da:	4299      	cmp	r1, r3
 80016dc:	db25      	blt.n	800172a <main+0x1b6>
		 holding_register_database[9 + target_actuator] <= holding_register_database[56 + target_actuator] + ACTUATOR_TOLERANCE)
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	3309      	adds	r3, #9
 80016e4:	001a      	movs	r2, r3
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <main+0x1f8>)
 80016e8:	0052      	lsls	r2, r2, #1
 80016ea:	5ad3      	ldrh	r3, [r2, r3]
 80016ec:	0019      	movs	r1, r3
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	3338      	adds	r3, #56	@ 0x38
 80016f4:	001a      	movs	r2, r3
 80016f6:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <main+0x1f8>)
 80016f8:	0052      	lsls	r2, r2, #1
 80016fa:	5ad3      	ldrh	r3, [r2, r3]
 80016fc:	330f      	adds	r3, #15
	  if(holding_register_database[9 + target_actuator] >= holding_register_database[56 + target_actuator] - ACTUATOR_TOLERANCE &&
 80016fe:	4299      	cmp	r1, r3
 8001700:	dc13      	bgt.n	800172a <main+0x1b6>
	  {
		  actuate(target_actuator, holding_register_database[9 + target_actuator], holding_register_database[56 + target_actuator]);
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3309      	adds	r3, #9
 8001708:	001a      	movs	r2, r3
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <main+0x1f8>)
 800170c:	0052      	lsls	r2, r2, #1
 800170e:	5ad1      	ldrh	r1, [r2, r3]
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	3338      	adds	r3, #56	@ 0x38
 8001716:	001a      	movs	r2, r3
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <main+0x1f8>)
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	5ad2      	ldrh	r2, [r2, r3]
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff fd8a 	bl	800123c <actuate>
 8001728:	e00b      	b.n	8001742 <main+0x1ce>
	  }
	  else
	  {
		  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d004      	beq.n	800173c <main+0x1c8>
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	e000      	b.n	800173e <main+0x1ca>
 800173c:	2200      	movs	r2, #0
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	701a      	strb	r2, [r3, #0]
	  if(modbus_rx())
 8001742:	e781      	b.n	8001648 <main+0xd4>
 8001744:	200003e0 	.word	0x200003e0
 8001748:	200003a8 	.word	0x200003a8
 800174c:	3dcccccd 	.word	0x3dcccccd
 8001750:	40a00000 	.word	0x40a00000
 8001754:	42c80000 	.word	0x42c80000
 8001758:	42200000 	.word	0x42200000
 800175c:	200003e8 	.word	0x200003e8
 8001760:	200000a8 	.word	0x200000a8
 8001764:	40012c00 	.word	0x40012c00
 8001768:	2000027c 	.word	0x2000027c
 800176c:	20000000 	.word	0x20000000

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b08f      	sub	sp, #60	@ 0x3c
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	2418      	movs	r4, #24
 8001778:	193b      	adds	r3, r7, r4
 800177a:	0018      	movs	r0, r3
 800177c:	2320      	movs	r3, #32
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f006 fd47 	bl	8008214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	0018      	movs	r0, r3
 800178a:	2314      	movs	r3, #20
 800178c:	001a      	movs	r2, r3
 800178e:	2100      	movs	r1, #0
 8001790:	f006 fd40 	bl	8008214 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001794:	193b      	adds	r3, r7, r4
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179a:	193b      	adds	r3, r7, r4
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	0052      	lsls	r2, r2, #1
 80017a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2280      	movs	r2, #128	@ 0x80
 80017a6:	0152      	lsls	r2, r2, #5
 80017a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	2240      	movs	r2, #64	@ 0x40
 80017ae:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	0018      	movs	r0, r3
 80017b4:	f002 ff14 	bl	80045e0 <HAL_RCC_OscConfig>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80017bc:	f000 fb36 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2207      	movs	r2, #7
 80017c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2100      	movs	r1, #0
 80017e2:	0018      	movs	r0, r3
 80017e4:	f003 f922 	bl	8004a2c <HAL_RCC_ClockConfig>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017ec:	f000 fb1e 	bl	8001e2c <Error_Handler>
  }
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b00f      	add	sp, #60	@ 0x3c
 80017f6:	bd90      	pop	{r4, r7, pc}

080017f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	0018      	movs	r0, r3
 8001802:	230c      	movs	r3, #12
 8001804:	001a      	movs	r2, r3
 8001806:	2100      	movs	r1, #0
 8001808:	f006 fd04 	bl	8008214 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800180c:	4b5d      	ldr	r3, [pc, #372]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800180e:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <MX_ADC1_Init+0x190>)
 8001810:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001812:	4b5c      	ldr	r3, [pc, #368]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001814:	22c0      	movs	r2, #192	@ 0xc0
 8001816:	0612      	lsls	r2, r2, #24
 8001818:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181a:	4b5a      	ldr	r3, [pc, #360]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001820:	4b58      	ldr	r3, [pc, #352]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8001826:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001828:	2280      	movs	r2, #128	@ 0x80
 800182a:	0612      	lsls	r2, r2, #24
 800182c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182e:	4b55      	ldr	r3, [pc, #340]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001830:	2204      	movs	r2, #4
 8001832:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001836:	2200      	movs	r2, #0
 8001838:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800183a:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800183c:	2200      	movs	r2, #0
 800183e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001840:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001842:	2201      	movs	r2, #1
 8001844:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8001846:	4b4f      	ldr	r3, [pc, #316]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184c:	4b4d      	ldr	r3, [pc, #308]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001852:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001854:	2200      	movs	r2, #0
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001858:	4b4a      	ldr	r3, [pc, #296]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800185a:	222c      	movs	r2, #44	@ 0x2c
 800185c:	2101      	movs	r1, #1
 800185e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001860:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001862:	2200      	movs	r2, #0
 8001864:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800186c:	4b45      	ldr	r3, [pc, #276]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800186e:	223c      	movs	r2, #60	@ 0x3c
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001874:	4b43      	ldr	r3, [pc, #268]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001876:	2200      	movs	r2, #0
 8001878:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800187a:	4b42      	ldr	r3, [pc, #264]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800187c:	0018      	movs	r0, r3
 800187e:	f001 fa93 	bl	8002da8 <HAL_ADC_Init>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d001      	beq.n	800188a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001886:	f000 fad1 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2201      	movs	r2, #1
 8001894:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001896:	1d3a      	adds	r2, r7, #4
 8001898:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f001 fcc7 	bl	8003230 <HAL_ADC_ConfigChannel>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018a6:	f000 fac1 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4a37      	ldr	r2, [pc, #220]	@ (800198c <MX_ADC1_Init+0x194>)
 80018ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b0:	1d3a      	adds	r2, r7, #4
 80018b2:	4b34      	ldr	r3, [pc, #208]	@ (8001984 <MX_ADC1_Init+0x18c>)
 80018b4:	0011      	movs	r1, r2
 80018b6:	0018      	movs	r0, r3
 80018b8:	f001 fcba 	bl	8003230 <HAL_ADC_ConfigChannel>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80018c0:	f000 fab4 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <MX_ADC1_Init+0x198>)
 80018c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ca:	1d3a      	adds	r2, r7, #4
 80018cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <MX_ADC1_Init+0x18c>)
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f001 fcad 	bl	8003230 <HAL_ADC_ConfigChannel>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d001      	beq.n	80018de <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80018da:	f000 faa7 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001994 <MX_ADC1_Init+0x19c>)
 80018e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e4:	1d3a      	adds	r2, r7, #4
 80018e6:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <MX_ADC1_Init+0x18c>)
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f001 fca0 	bl	8003230 <HAL_ADC_ConfigChannel>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80018f4:	f000 fa9a 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4a27      	ldr	r2, [pc, #156]	@ (8001998 <MX_ADC1_Init+0x1a0>)
 80018fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fe:	1d3a      	adds	r2, r7, #4
 8001900:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001902:	0011      	movs	r1, r2
 8001904:	0018      	movs	r0, r3
 8001906:	f001 fc93 	bl	8003230 <HAL_ADC_ConfigChannel>
 800190a:	1e03      	subs	r3, r0, #0
 800190c:	d001      	beq.n	8001912 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800190e:	f000 fa8d 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4a21      	ldr	r2, [pc, #132]	@ (800199c <MX_ADC1_Init+0x1a4>)
 8001916:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001918:	1d3a      	adds	r2, r7, #4
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800191c:	0011      	movs	r1, r2
 800191e:	0018      	movs	r0, r3
 8001920:	f001 fc86 	bl	8003230 <HAL_ADC_ConfigChannel>
 8001924:	1e03      	subs	r3, r0, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001928:	f000 fa80 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <MX_ADC1_Init+0x1a8>)
 8001930:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001932:	1d3a      	adds	r2, r7, #4
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f001 fc79 	bl	8003230 <HAL_ADC_ConfigChannel>
 800193e:	1e03      	subs	r3, r0, #0
 8001940:	d001      	beq.n	8001946 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001942:	f000 fa73 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <MX_ADC1_Init+0x1ac>)
 800194a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194c:	1d3a      	adds	r2, r7, #4
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <MX_ADC1_Init+0x18c>)
 8001950:	0011      	movs	r1, r2
 8001952:	0018      	movs	r0, r3
 8001954:	f001 fc6c 	bl	8003230 <HAL_ADC_ConfigChannel>
 8001958:	1e03      	subs	r3, r0, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 800195c:	f000 fa66 	bl	8001e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4a11      	ldr	r2, [pc, #68]	@ (80019a8 <MX_ADC1_Init+0x1b0>)
 8001964:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001966:	1d3a      	adds	r2, r7, #4
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_ADC1_Init+0x18c>)
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f001 fc5f 	bl	8003230 <HAL_ADC_ConfigChannel>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8001976:	f000 fa59 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	200000a8 	.word	0x200000a8
 8001988:	40012400 	.word	0x40012400
 800198c:	04000002 	.word	0x04000002
 8001990:	08000004 	.word	0x08000004
 8001994:	0c000008 	.word	0x0c000008
 8001998:	10000010 	.word	0x10000010
 800199c:	14000020 	.word	0x14000020
 80019a0:	18000040 	.word	0x18000040
 80019a4:	1c000080 	.word	0x1c000080
 80019a8:	20000100 	.word	0x20000100

080019ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <MX_I2C1_Init+0x78>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100412;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <MX_I2C1_Init+0x7c>)
 80019ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c2:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019e8:	0018      	movs	r0, r3
 80019ea:	f002 fcbb 	bl	8004364 <HAL_I2C_Init>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019f2:	f000 fa1b 	bl	8001e2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <MX_I2C1_Init+0x74>)
 80019f8:	2100      	movs	r1, #0
 80019fa:	0018      	movs	r0, r3
 80019fc:	f002 fd58 	bl	80044b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a04:	f000 fa12 	bl	8001e2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <MX_I2C1_Init+0x74>)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f002 fd9b 	bl	8004548 <HAL_I2CEx_ConfigDigitalFilter>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d001      	beq.n	8001a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f000 fa09 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000168 	.word	0x20000168
 8001a24:	40005400 	.word	0x40005400
 8001a28:	00100412 	.word	0x00100412

08001a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a32:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa4 <MX_SPI1_Init+0x78>)
 8001a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a38:	2282      	movs	r2, #130	@ 0x82
 8001a3a:	0052      	lsls	r2, r2, #1
 8001a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a46:	22e0      	movs	r2, #224	@ 0xe0
 8001a48:	00d2      	lsls	r2, r2, #3
 8001a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a52:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a86:	2208      	movs	r2, #8
 8001a88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <MX_SPI1_Init+0x74>)
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f003 fa6f 	bl	8004f70 <HAL_SPI_Init>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a96:	f000 f9c9 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000218 	.word	0x20000218
 8001aa4:	40013000 	.word	0x40013000

08001aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b098      	sub	sp, #96	@ 0x60
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	2354      	movs	r3, #84	@ 0x54
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	2100      	movs	r1, #0
 8001aba:	f006 fbab 	bl	8008214 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abe:	2338      	movs	r3, #56	@ 0x38
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	231c      	movs	r3, #28
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	2100      	movs	r1, #0
 8001aca:	f006 fba3 	bl	8008214 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	2334      	movs	r3, #52	@ 0x34
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f006 fb9c 	bl	8008214 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001adc:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001ade:	4a46      	ldr	r2, [pc, #280]	@ (8001bf8 <MX_TIM1_Init+0x150>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8001ae2:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001ae4:	220b      	movs	r2, #11
 8001ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b42      	ldr	r3, [pc, #264]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001af0:	2263      	movs	r2, #99	@ 0x63
 8001af2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001afa:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b00:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b06:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f003 fb41 	bl	8005190 <HAL_TIM_PWM_Init>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b12:	f000 f98b 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2154      	movs	r1, #84	@ 0x54
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2a:	187a      	adds	r2, r7, r1
 8001b2c:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001b2e:	0011      	movs	r1, r2
 8001b30:	0018      	movs	r0, r3
 8001b32:	f004 f8a7 	bl	8005c84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b3a:	f000 f977 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3e:	2138      	movs	r1, #56	@ 0x38
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2260      	movs	r2, #96	@ 0x60
 8001b44:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6a:	1879      	adds	r1, r7, r1
 8001b6c:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	0018      	movs	r0, r3
 8001b72:	f003 fc43 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b7a:	f000 f957 	bl	8001e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	0192      	lsls	r2, r2, #6
 8001ba2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2280      	movs	r2, #128	@ 0x80
 8001bba:	0492      	lsls	r2, r2, #18
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd0:	1d3a      	adds	r2, r7, #4
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f004 f8bc 	bl	8005d54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001be0:	f000 f924 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <MX_TIM1_Init+0x14c>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 fdb4 	bl	8002754 <HAL_TIM_MspPostInit>

}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b018      	add	sp, #96	@ 0x60
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000027c 	.word	0x2000027c
 8001bf8:	40012c00 	.word	0x40012c00

08001bfc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_TIM14_Init+0x40>)
 8001c02:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <MX_TIM14_Init+0x44>)
 8001c04:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <MX_TIM14_Init+0x40>)
 8001c08:	220b      	movs	r2, #11
 8001c0a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <MX_TIM14_Init+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_TIM14_Init+0x40>)
 8001c14:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <MX_TIM14_Init+0x48>)
 8001c16:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <MX_TIM14_Init+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <MX_TIM14_Init+0x40>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <MX_TIM14_Init+0x40>)
 8001c26:	0018      	movs	r0, r3
 8001c28:	f003 fa5a 	bl	80050e0 <HAL_TIM_Base_Init>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001c30:	f000 f8fc 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001c34:	46c0      	nop			@ (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	200002c8 	.word	0x200002c8
 8001c40:	40002000 	.word	0x40002000
 8001c44:	0000ffff 	.word	0x0000ffff

08001c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c4e:	4a25      	ldr	r2, [pc, #148]	@ (8001ce4 <MX_USART1_UART_Init+0x9c>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c52:	4b23      	ldr	r3, [pc, #140]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c54:	2296      	movs	r2, #150	@ 0x96
 8001c56:	0192      	lsls	r2, r2, #6
 8001c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c84:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001c90:	4813      	ldr	r0, [pc, #76]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	f006 f8b4 	bl	8007e04 <HAL_RS485Ex_Init>
 8001c9c:	1e03      	subs	r3, r0, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001ca0:	f000 f8c4 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f006 f96f 	bl	8007f8c <HAL_UARTEx_SetTxFifoThreshold>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 f8bb 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f006 f9a6 	bl	800800c <HAL_UARTEx_SetRxFifoThreshold>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001cc4:	f000 f8b2 	bl	8001e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <MX_USART1_UART_Init+0x98>)
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f006 f924 	bl	8007f18 <HAL_UARTEx_DisableFifoMode>
 8001cd0:	1e03      	subs	r3, r0, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001cd4:	f000 f8aa 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	20000314 	.word	0x20000314
 8001ce4:	40013800 	.word	0x40013800

08001ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MX_DMA_Init+0x48>)
 8001cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <MX_DMA_Init+0x48>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <MX_DMA_Init+0x48>)
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2009      	movs	r0, #9
 8001d0c:	f001 fe1e 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d10:	2009      	movs	r0, #9
 8001d12:	f001 fe30 	bl	8003976 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	200a      	movs	r0, #10
 8001d1c:	f001 fe16 	bl	800394c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001d20:	200a      	movs	r0, #10
 8001d22:	f001 fe28 	bl	8003976 <HAL_NVIC_EnableIRQ>

}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b002      	add	sp, #8
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000

08001d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b08b      	sub	sp, #44	@ 0x2c
 8001d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	2414      	movs	r4, #20
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	0018      	movs	r0, r3
 8001d40:	2314      	movs	r3, #20
 8001d42:	001a      	movs	r2, r3
 8001d44:	2100      	movs	r1, #0
 8001d46:	f006 fa65 	bl	8008214 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	4b35      	ldr	r3, [pc, #212]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d4e:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d50:	2104      	movs	r1, #4
 8001d52:	430a      	orrs	r2, r1
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d56:	4b32      	ldr	r3, [pc, #200]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d62:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d66:	4b2e      	ldr	r3, [pc, #184]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d68:	2120      	movs	r1, #32
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d72:	2220      	movs	r2, #32
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d7e:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d86:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d96:	4b22      	ldr	r3, [pc, #136]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001d98:	2102      	movs	r1, #2
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da2:	2202      	movs	r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dae:	4b1c      	ldr	r3, [pc, #112]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001db0:	2108      	movs	r1, #8
 8001db2:	430a      	orrs	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <MX_GPIO_Init+0xec>)
 8001db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dba:	2208      	movs	r2, #8
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin, GPIO_PIN_RESET);
 8001dc2:	23e0      	movs	r3, #224	@ 0xe0
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4817      	ldr	r0, [pc, #92]	@ (8001e24 <MX_GPIO_Init+0xf0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	0019      	movs	r1, r3
 8001dcc:	f002 fa92 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8001dd0:	193b      	adds	r3, r7, r4
 8001dd2:	2206      	movs	r2, #6
 8001dd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	193b      	adds	r3, r7, r4
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de2:	193b      	adds	r3, r7, r4
 8001de4:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <MX_GPIO_Init+0xf4>)
 8001de6:	0019      	movs	r1, r3
 8001de8:	0010      	movs	r0, r2
 8001dea:	f002 f911 	bl	8004010 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_C_EN_Pin Actuator_B_EN_Pin Actuator_A_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin;
 8001dee:	0021      	movs	r1, r4
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	22e0      	movs	r2, #224	@ 0xe0
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <MX_GPIO_Init+0xf0>)
 8001e0e:	0019      	movs	r1, r3
 8001e10:	0010      	movs	r0, r2
 8001e12:	f002 f8fd 	bl	8004010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b00b      	add	sp, #44	@ 0x2c
 8001e1c:	bd90      	pop	{r4, r7, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	50000400 	.word	0x50000400
 8001e28:	50000c00 	.word	0x50000c00

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	e7fd      	b.n	8001e34 <Error_Handler+0x8>

08001e38 <HAL_UART_RxCpltCallback>:
};


// Recieve Interrupt Handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_UART_RxCpltCallback+0x18>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	20000610 	.word	0x20000610

08001e54 <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_UART_TxCpltCallback+0x18>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	20000611 	.word	0x20000611

08001e70 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	0002      	movs	r2, r0
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2bff      	cmp	r3, #255	@ 0xff
 8001e82:	d004      	beq.n	8001e8e <get_rx_buffer+0x1e>
	{
		return modbus_rx_buffer[index];
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4a03      	ldr	r2, [pc, #12]	@ (8001e98 <get_rx_buffer+0x28>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	e000      	b.n	8001e90 <get_rx_buffer+0x20>
	}
	return 0xFF;
 8001e8e:	23ff      	movs	r3, #255	@ 0xff
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000040c 	.word	0x2000040c

08001e9c <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8001ea2:	4b43      	ldr	r3, [pc, #268]	@ (8001fb0 <return_holding_registers+0x114>)
 8001ea4:	789b      	ldrb	r3, [r3, #2]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <return_holding_registers+0x114>)
 8001eac:	78db      	ldrb	r3, [r3, #3]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb0 <return_holding_registers+0x114>)
 8001eba:	791b      	ldrb	r3, [r3, #4]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb0 <return_holding_registers+0x114>)
 8001ec2:	795b      	ldrb	r3, [r3, #5]
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	1cbb      	adds	r3, r7, #2
 8001ecc:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ed4:	d803      	bhi.n	8001ede <return_holding_registers+0x42>
 8001ed6:	1cbb      	adds	r3, r7, #2
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d104      	bne.n	8001ee8 <return_holding_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001ede:	2006      	movs	r0, #6
 8001ee0:	f000 f934 	bl	800214c <modbus_exception>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	e05f      	b.n	8001fa8 <return_holding_registers+0x10c>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001ee8:	1cba      	adds	r2, r7, #2
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	8812      	ldrh	r2, [r2, #0]
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	18d3      	adds	r3, r2, r3
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	003b      	movs	r3, r7
 8001ef6:	3a01      	subs	r2, #1
 8001ef8:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001efa:	003b      	movs	r3, r7
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f00:	d904      	bls.n	8001f0c <return_holding_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f000 f922 	bl	800214c <modbus_exception>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	e04d      	b.n	8001fa8 <return_holding_registers+0x10c>
	}

	// Return register values

	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8001f0c:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <return_holding_registers+0x114>)
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <return_holding_registers+0x118>)
 8001f12:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <return_holding_registers+0x114>)
 8001f16:	785a      	ldrb	r2, [r3, #1]
 8001f18:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <return_holding_registers+0x118>)
 8001f1a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001f1c:	1cbb      	adds	r3, r7, #2
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	18db      	adds	r3, r3, r3
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <return_holding_registers+0x118>)
 8001f28:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001f30:	1dbb      	adds	r3, r7, #6
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e028      	b.n	8001f8a <return_holding_registers+0xee>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	1dbb      	adds	r3, r7, #6
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	18d2      	adds	r2, r2, r3
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <return_holding_registers+0x11c>)
 8001f44:	0052      	lsls	r2, r2, #1
 8001f46:	5ad3      	ldrh	r3, [r2, r3]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b299      	uxth	r1, r3
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	1dfa      	adds	r2, r7, #7
 8001f52:	1c58      	adds	r0, r3, #1
 8001f54:	7010      	strb	r0, [r2, #0]
 8001f56:	001a      	movs	r2, r3
 8001f58:	b2c9      	uxtb	r1, r1
 8001f5a:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <return_holding_registers+0x118>)
 8001f5c:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	1dbb      	adds	r3, r7, #6
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	18d2      	adds	r2, r2, r3
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <return_holding_registers+0x11c>)
 8001f6a:	0052      	lsls	r2, r2, #1
 8001f6c:	5ad1      	ldrh	r1, [r2, r3]
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	1dfa      	adds	r2, r7, #7
 8001f74:	1c58      	adds	r0, r3, #1
 8001f76:	7010      	strb	r0, [r2, #0]
 8001f78:	001a      	movs	r2, r3
 8001f7a:	b2c9      	uxtb	r1, r1
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <return_holding_registers+0x118>)
 8001f7e:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	1dbb      	adds	r3, r7, #6
 8001f86:	3201      	adds	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	1dbb      	adds	r3, r7, #6
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	1cba      	adds	r2, r7, #2
 8001f92:	8812      	ldrh	r2, [r2, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8cf      	bhi.n	8001f38 <return_holding_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <return_holding_registers+0x118>)
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f8f9 	bl	8002198 <modbus_send>
 8001fa6:	0003      	movs	r3, r0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000040c 	.word	0x2000040c
 8001fb4:	2000050c 	.word	0x2000050c
 8001fb8:	20000000 	.word	0x20000000

08001fbc <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002140 <edit_multiple_registers+0x184>)
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b5d      	ldr	r3, [pc, #372]	@ (8002140 <edit_multiple_registers+0x184>)
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8001fd8:	4b59      	ldr	r3, [pc, #356]	@ (8002140 <edit_multiple_registers+0x184>)
 8001fda:	791b      	ldrb	r3, [r3, #4]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <edit_multiple_registers+0x184>)
 8001fe2:	795b      	ldrb	r3, [r3, #5]
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	1cbb      	adds	r3, r7, #2
 8001fec:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001fee:	1cbb      	adds	r3, r7, #2
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ff4:	d803      	bhi.n	8001ffe <edit_multiple_registers+0x42>
 8001ff6:	1cbb      	adds	r3, r7, #2
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d104      	bne.n	8002008 <edit_multiple_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001ffe:	2006      	movs	r0, #6
 8002000:	f000 f8a4 	bl	800214c <modbus_exception>
 8002004:	0003      	movs	r3, r0
 8002006:	e096      	b.n	8002136 <edit_multiple_registers+0x17a>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8002008:	1cba      	adds	r2, r7, #2
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	003b      	movs	r3, r7
 8002016:	3a01      	subs	r2, #1
 8002018:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800201a:	003b      	movs	r3, r7
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002020:	d904      	bls.n	800202c <edit_multiple_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8002022:	2005      	movs	r0, #5
 8002024:	f000 f892 	bl	800214c <modbus_exception>
 8002028:	0003      	movs	r3, r0
 800202a:	e084      	b.n	8002136 <edit_multiple_registers+0x17a>
	}

	if((last_register_address <= 10 && last_register_address >= 2) 		||
 800202c:	003b      	movs	r3, r7
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2b0a      	cmp	r3, #10
 8002032:	d803      	bhi.n	800203c <edit_multiple_registers+0x80>
 8002034:	003b      	movs	r3, r7
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d80f      	bhi.n	800205c <edit_multiple_registers+0xa0>
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	2b0a      	cmp	r3, #10
 8002042:	d803      	bhi.n	800204c <edit_multiple_registers+0x90>
		(first_register_address <= 10 && first_register_address >= 2) 	||
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d807      	bhi.n	800205c <edit_multiple_registers+0xa0>
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d808      	bhi.n	8002066 <edit_multiple_registers+0xaa>
		(first_register_address < 2 && last_register_address > 10))
 8002054:	003b      	movs	r3, r7
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	2b0a      	cmp	r3, #10
 800205a:	d904      	bls.n	8002066 <edit_multiple_registers+0xaa>
	{
		// Ensure that ADC values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 800205c:	2004      	movs	r0, #4
 800205e:	f000 f875 	bl	800214c <modbus_exception>
 8002062:	0003      	movs	r3, r0
 8002064:	e067      	b.n	8002136 <edit_multiple_registers+0x17a>
	}


	// Edit holding registers
	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8002066:	4b36      	ldr	r3, [pc, #216]	@ (8002140 <edit_multiple_registers+0x184>)
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <edit_multiple_registers+0x188>)
 800206c:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 800206e:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <edit_multiple_registers+0x184>)
 8002070:	785a      	ldrb	r2, [r3, #1]
 8002072:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <edit_multiple_registers+0x188>)
 8002074:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8002076:	1cbb      	adds	r3, r7, #2
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	18db      	adds	r3, r3, r3
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <edit_multiple_registers+0x188>)
 8002082:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	2203      	movs	r2, #3
 8002088:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 800208a:	1dbb      	adds	r3, r7, #6
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e042      	b.n	8002118 <edit_multiple_registers+0x15c>
	{
		holding_register_database[first_register_address + i] = (modbus_rx_buffer[2 * i + 6] << 8) | modbus_rx_buffer[2 * i + 7];
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	3303      	adds	r3, #3
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4a29      	ldr	r2, [pc, #164]	@ (8002140 <edit_multiple_registers+0x184>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	3307      	adds	r3, #7
 80020aa:	4925      	ldr	r1, [pc, #148]	@ (8002140 <edit_multiple_registers+0x184>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b219      	sxth	r1, r3
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	18d2      	adds	r2, r2, r3
 80020be:	b289      	uxth	r1, r1
 80020c0:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <edit_multiple_registers+0x18c>)
 80020c2:	0052      	lsls	r2, r2, #1
 80020c4:	52d1      	strh	r1, [r2, r3]
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	881a      	ldrh	r2, [r3, #0]
 80020ca:	1dbb      	adds	r3, r7, #6
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	18d2      	adds	r2, r2, r3
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <edit_multiple_registers+0x18c>)
 80020d2:	0052      	lsls	r2, r2, #1
 80020d4:	5ad3      	ldrh	r3, [r2, r3]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b299      	uxth	r1, r3
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	1dfa      	adds	r2, r7, #7
 80020e0:	1c58      	adds	r0, r3, #1
 80020e2:	7010      	strb	r0, [r2, #0]
 80020e4:	001a      	movs	r2, r3
 80020e6:	b2c9      	uxtb	r1, r1
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <edit_multiple_registers+0x188>)
 80020ea:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	18d2      	adds	r2, r2, r3
 80020f6:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <edit_multiple_registers+0x18c>)
 80020f8:	0052      	lsls	r2, r2, #1
 80020fa:	5ad1      	ldrh	r1, [r2, r3]
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	1dfa      	adds	r2, r7, #7
 8002102:	1c58      	adds	r0, r3, #1
 8002104:	7010      	strb	r0, [r2, #0]
 8002106:	001a      	movs	r2, r3
 8002108:	b2c9      	uxtb	r1, r1
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <edit_multiple_registers+0x188>)
 800210c:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 800210e:	1dbb      	adds	r3, r7, #6
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	1dbb      	adds	r3, r7, #6
 8002114:	3201      	adds	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	1dbb      	adds	r3, r7, #6
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	1cba      	adds	r2, r7, #2
 8002120:	8812      	ldrh	r2, [r2, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d8b5      	bhi.n	8002092 <edit_multiple_registers+0xd6>
	}

	return modbus_send(modbus_tx_buffer, index);
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <edit_multiple_registers+0x188>)
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f832 	bl	8002198 <modbus_send>
 8002134:	0003      	movs	r3, r0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	2000040c 	.word	0x2000040c
 8002144:	2000050c 	.word	0x2000050c
 8002148:	20000000 	.word	0x20000000

0800214c <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	0002      	movs	r2, r0
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = modbus_rx_buffer[0];
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <modbus_exception+0x44>)
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <modbus_exception+0x48>)
 800215e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1] | 0x80;
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <modbus_exception+0x44>)
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	4252      	negs	r2, r2
 8002168:	4313      	orrs	r3, r2
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <modbus_exception+0x48>)
 800216e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8002170:	1dfb      	adds	r3, r7, #7
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	3b03      	subs	r3, #3
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <modbus_exception+0x48>)
 800217a:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <modbus_exception+0x48>)
 800217e:	2103      	movs	r1, #3
 8002180:	0018      	movs	r0, r3
 8002182:	f000 f809 	bl	8002198 <modbus_send>
 8002186:	0003      	movs	r3, r0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000040c 	.word	0x2000040c
 8002194:	2000050c 	.word	0x2000050c

08002198 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	000a      	movs	r2, r1
 80021a2:	1cfb      	adds	r3, r7, #3
 80021a4:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(data, size);
 80021a6:	250e      	movs	r5, #14
 80021a8:	197c      	adds	r4, r7, r5
 80021aa:	1cfb      	adds	r3, r7, #3
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0011      	movs	r1, r2
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f884 	bl	80022c0 <crc_16>
 80021b8:	0003      	movs	r3, r0
 80021ba:	8023      	strh	r3, [r4, #0]
	data[size] = low_byte(crc);
 80021bc:	1cfb      	adds	r3, r7, #3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	18d3      	adds	r3, r2, r3
 80021c4:	197a      	adds	r2, r7, r5
 80021c6:	8812      	ldrh	r2, [r2, #0]
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]
	data[size + 1] = high_byte(crc);
 80021cc:	197b      	adds	r3, r7, r5
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	b299      	uxth	r1, r3
 80021d4:	1cfb      	adds	r3, r7, #3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	b2ca      	uxtb	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]

	int8_t status = HAL_OK;
 80021e2:	240d      	movs	r4, #13
 80021e4:	193b      	adds	r3, r7, r4
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, data, size + 2);
 80021ea:	1cfb      	adds	r3, r7, #3
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3302      	adds	r3, #2
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4b19      	ldr	r3, [pc, #100]	@ (800225c <modbus_send+0xc4>)
 80021f8:	0018      	movs	r0, r3
 80021fa:	f003 fe47 	bl	8005e8c <HAL_UART_Transmit_IT>
 80021fe:	0003      	movs	r3, r0
 8002200:	001a      	movs	r2, r3
 8002202:	193b      	adds	r3, r7, r4
 8002204:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8002206:	193b      	adds	r3, r7, r4
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b25b      	sxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <modbus_send+0x80>
	{
		return status;
 8002210:	193b      	adds	r3, r7, r4
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b25b      	sxtb	r3, r3
 8002216:	e01d      	b.n	8002254 <modbus_send+0xbc>
	}
	time = HAL_GetTick();
 8002218:	f000 fc74 	bl	8002b04 <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <modbus_send+0xc8>)
 8002220:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <modbus_send+0xcc>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <modbus_send+0xa6>
 800222e:	f000 fc69 	bl	8002b04 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <modbus_send+0xc8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b63      	cmp	r3, #99	@ 0x63
 800223c:	d9f2      	bls.n	8002224 <modbus_send+0x8c>
	if(tx_int)
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <modbus_send+0xcc>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <modbus_send+0xba>
	{
		tx_int = 0;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <modbus_send+0xcc>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <modbus_send+0xbc>
	}
	else
	{
		return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
	}
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bdb0      	pop	{r4, r5, r7, pc}
 800225c:	20000314 	.word	0x20000314
 8002260:	2000060c 	.word	0x2000060c
 8002264:	20000611 	.word	0x20000611

08002268 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	if(rx_int)
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <modbus_rx+0x24>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <modbus_rx+0x18>
	{
		rx_int = 0;
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <modbus_rx+0x24>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
		return 1;
 800227c:	2301      	movs	r3, #1
 800227e:	e002      	b.n	8002286 <modbus_rx+0x1e>
	}
	return rx_int;
 8002280:	4b02      	ldr	r3, [pc, #8]	@ (800228c <modbus_rx+0x24>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000610 	.word	0x20000610

08002290 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx(uint8_t size)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	0002      	movs	r2, r0
 8002298:	1dfb      	adds	r3, r7, #7
 800229a:	701a      	strb	r2, [r3, #0]
	return HAL_UARTEx_ReceiveToIdle_IT(&huart1, modbus_rx_buffer, size);
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	4905      	ldr	r1, [pc, #20]	@ (80022b8 <modbus_set_rx+0x28>)
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <modbus_set_rx+0x2c>)
 80022a6:	0018      	movs	r0, r3
 80022a8:	f005 fef2 	bl	8008090 <HAL_UARTEx_ReceiveToIdle_IT>
 80022ac:	0003      	movs	r3, r0
 80022ae:	b25b      	sxtb	r3, r3
	//return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000040c 	.word	0x2000040c
 80022bc:	20000314 	.word	0x20000314

080022c0 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	000a      	movs	r2, r1
 80022ca:	1cfb      	adds	r3, r7, #3
 80022cc:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 80022ce:	230f      	movs	r3, #15
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	22ff      	movs	r2, #255	@ 0xff
 80022d4:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 80022d6:	230e      	movs	r3, #14
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	22ff      	movs	r2, #255	@ 0xff
 80022dc:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 80022de:	e019      	b.n	8002314 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	200e      	movs	r0, #14
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4053      	eors	r3, r2
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 80022f4:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <crc_16+0x84>)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	7819      	ldrb	r1, [r3, #0]
 80022fc:	183b      	adds	r3, r7, r0
 80022fe:	200f      	movs	r0, #15
 8002300:	183a      	adds	r2, r7, r0
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	404a      	eors	r2, r1
 8002306:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8002308:	183b      	adds	r3, r7, r0
 800230a:	490f      	ldr	r1, [pc, #60]	@ (8002348 <crc_16+0x88>)
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	188a      	adds	r2, r1, r2
 8002310:	7812      	ldrb	r2, [r2, #0]
 8002312:	701a      	strb	r2, [r3, #0]
	while (size--)
 8002314:	1cfb      	adds	r3, r7, #3
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	1cfa      	adds	r2, r7, #3
 800231a:	1e59      	subs	r1, r3, #1
 800231c:	7011      	strb	r1, [r2, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1de      	bne.n	80022e0 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8002322:	230f      	movs	r3, #15
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	b21a      	sxth	r2, r3
 800232c:	230e      	movs	r3, #14
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b21b      	sxth	r3, r3
 8002334:	4313      	orrs	r3, r2
 8002336:	b21b      	sxth	r3, r3
 8002338:	b29b      	uxth	r3, r3
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	08008300 	.word	0x08008300
 8002348:	08008400 	.word	0x08008400

0800234c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <HAL_MspInit+0x44>)
 8002354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_MspInit+0x44>)
 8002358:	2101      	movs	r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
 800235e:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <HAL_MspInit+0x44>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_MspInit+0x44>)
 800236c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800236e:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_MspInit+0x44>)
 8002370:	2180      	movs	r1, #128	@ 0x80
 8002372:	0549      	lsls	r1, r1, #21
 8002374:	430a      	orrs	r2, r1
 8002376:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_MspInit+0x44>)
 800237a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	055b      	lsls	r3, r3, #21
 8002380:	4013      	ands	r3, r2
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b093      	sub	sp, #76	@ 0x4c
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	2334      	movs	r3, #52	@ 0x34
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	0018      	movs	r0, r3
 80023a2:	2314      	movs	r3, #20
 80023a4:	001a      	movs	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	f005 ff34 	bl	8008214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ac:	2414      	movs	r4, #20
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	0018      	movs	r0, r3
 80023b2:	2320      	movs	r3, #32
 80023b4:	001a      	movs	r2, r3
 80023b6:	2100      	movs	r1, #0
 80023b8:	f005 ff2c 	bl	8008214 <memset>
  if(hadc->Instance==ADC1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a35      	ldr	r2, [pc, #212]	@ (8002498 <HAL_ADC_MspInit+0x104>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d163      	bne.n	800248e <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	2220      	movs	r2, #32
 80023ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	0018      	movs	r0, r3
 80023d6:	f002 fccf 	bl	8004d78 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80023de:	f7ff fd25 	bl	8001e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023e2:	4b2e      	ldr	r3, [pc, #184]	@ (800249c <HAL_ADC_MspInit+0x108>)
 80023e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023e6:	4b2d      	ldr	r3, [pc, #180]	@ (800249c <HAL_ADC_MspInit+0x108>)
 80023e8:	2180      	movs	r1, #128	@ 0x80
 80023ea:	0349      	lsls	r1, r1, #13
 80023ec:	430a      	orrs	r2, r1
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80023f0:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <HAL_ADC_MspInit+0x108>)
 80023f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	035b      	lsls	r3, r3, #13
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	4b27      	ldr	r3, [pc, #156]	@ (800249c <HAL_ADC_MspInit+0x108>)
 8002400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002402:	4b26      	ldr	r3, [pc, #152]	@ (800249c <HAL_ADC_MspInit+0x108>)
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	@ 0x34
 800240a:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_ADC_MspInit+0x108>)
 800240c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 8002416:	2134      	movs	r1, #52	@ 0x34
 8002418:	187b      	adds	r3, r7, r1
 800241a:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <HAL_ADC_MspInit+0x10c>)
 800241c:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241e:	187b      	adds	r3, r7, r1
 8002420:	2203      	movs	r2, #3
 8002422:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	187b      	adds	r3, r7, r1
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	187a      	adds	r2, r7, r1
 800242c:	23a0      	movs	r3, #160	@ 0xa0
 800242e:	05db      	lsls	r3, r3, #23
 8002430:	0011      	movs	r1, r2
 8002432:	0018      	movs	r0, r3
 8002434:	f001 fdec 	bl	8004010 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002438:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 800243a:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <HAL_ADC_MspInit+0x114>)
 800243c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800243e:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002440:	2205      	movs	r2, #5
 8002442:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002444:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 800244c:	2200      	movs	r2, #0
 800244e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002452:	2280      	movs	r2, #128	@ 0x80
 8002454:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002456:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	0052      	lsls	r2, r2, #1
 800245c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002460:	2280      	movs	r2, #128	@ 0x80
 8002462:	00d2      	lsls	r2, r2, #3
 8002464:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002466:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002468:	2220      	movs	r2, #32
 800246a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800246c:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 800246e:	2200      	movs	r2, #0
 8002470:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002472:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002474:	0018      	movs	r0, r3
 8002476:	f001 fa9b 	bl	80039b0 <HAL_DMA_Init>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d001      	beq.n	8002482 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800247e:	f7ff fcd5 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a07      	ldr	r2, [pc, #28]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 8002486:	651a      	str	r2, [r3, #80]	@ 0x50
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_ADC_MspInit+0x110>)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b013      	add	sp, #76	@ 0x4c
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	40012400 	.word	0x40012400
 800249c:	40021000 	.word	0x40021000
 80024a0:	000001ff 	.word	0x000001ff
 80024a4:	2000010c 	.word	0x2000010c
 80024a8:	40020008 	.word	0x40020008

080024ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b093      	sub	sp, #76	@ 0x4c
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	2334      	movs	r3, #52	@ 0x34
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	0018      	movs	r0, r3
 80024ba:	2314      	movs	r3, #20
 80024bc:	001a      	movs	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f005 fea8 	bl	8008214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c4:	2414      	movs	r4, #20
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	0018      	movs	r0, r3
 80024ca:	2320      	movs	r3, #32
 80024cc:	001a      	movs	r2, r3
 80024ce:	2100      	movs	r1, #0
 80024d0:	f005 fea0 	bl	8008214 <memset>
  if(hi2c->Instance==I2C1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a37      	ldr	r2, [pc, #220]	@ (80025b8 <HAL_I2C_MspInit+0x10c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d168      	bne.n	80025b0 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ea:	193b      	adds	r3, r7, r4
 80024ec:	0018      	movs	r0, r3
 80024ee:	f002 fc43 	bl	8004d78 <HAL_RCCEx_PeriphCLKConfig>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024f6:	f7ff fc99 	bl	8001e2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <HAL_I2C_MspInit+0x110>)
 80024fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024fe:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HAL_I2C_MspInit+0x110>)
 8002500:	2101      	movs	r1, #1
 8002502:	430a      	orrs	r2, r1
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34
 8002506:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <HAL_I2C_MspInit+0x110>)
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002512:	2134      	movs	r1, #52	@ 0x34
 8002514:	187b      	adds	r3, r7, r1
 8002516:	22c0      	movs	r2, #192	@ 0xc0
 8002518:	00d2      	lsls	r2, r2, #3
 800251a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2212      	movs	r2, #18
 8002520:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	2206      	movs	r2, #6
 8002532:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	187a      	adds	r2, r7, r1
 8002536:	23a0      	movs	r3, #160	@ 0xa0
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	0011      	movs	r1, r2
 800253c:	0018      	movs	r0, r3
 800253e:	f001 fd67 	bl	8004010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <HAL_I2C_MspInit+0x110>)
 8002544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002546:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <HAL_I2C_MspInit+0x110>)
 8002548:	2180      	movs	r1, #128	@ 0x80
 800254a:	0389      	lsls	r1, r1, #14
 800254c:	430a      	orrs	r2, r1
 800254e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <HAL_I2C_MspInit+0x110>)
 8002552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	039b      	lsls	r3, r3, #14
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 8002560:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <HAL_I2C_MspInit+0x118>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 8002566:	220a      	movs	r2, #10
 8002568:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002570:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002576:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002588:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 8002596:	0018      	movs	r0, r3
 8002598:	f001 fa0a 	bl	80039b0 <HAL_DMA_Init>
 800259c:	1e03      	subs	r3, r0, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 80025a0:	f7ff fc44 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a06      	ldr	r2, [pc, #24]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 80025a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025aa:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_I2C_MspInit+0x114>)
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b013      	add	sp, #76	@ 0x4c
 80025b6:	bd90      	pop	{r4, r7, pc}
 80025b8:	40005400 	.word	0x40005400
 80025bc:	40021000 	.word	0x40021000
 80025c0:	200001bc 	.word	0x200001bc
 80025c4:	4002001c 	.word	0x4002001c

080025c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b093      	sub	sp, #76	@ 0x4c
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	2334      	movs	r3, #52	@ 0x34
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	0018      	movs	r0, r3
 80025d6:	2314      	movs	r3, #20
 80025d8:	001a      	movs	r2, r3
 80025da:	2100      	movs	r1, #0
 80025dc:	f005 fe1a 	bl	8008214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e0:	2414      	movs	r4, #20
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	0018      	movs	r0, r3
 80025e6:	2320      	movs	r3, #32
 80025e8:	001a      	movs	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f005 fe12 	bl	8008214 <memset>
  if(hspi->Instance==SPI1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a34      	ldr	r2, [pc, #208]	@ (80026c8 <HAL_SPI_MspInit+0x100>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d162      	bne.n	80026c0 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	2204      	movs	r2, #4
 80025fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002600:	193b      	adds	r3, r7, r4
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002606:	193b      	adds	r3, r7, r4
 8002608:	0018      	movs	r0, r3
 800260a:	f002 fbb5 	bl	8004d78 <HAL_RCCEx_PeriphCLKConfig>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d001      	beq.n	8002616 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002612:	f7ff fc0b 	bl	8001e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002616:	4b2d      	ldr	r3, [pc, #180]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 8002618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800261a:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	0149      	lsls	r1, r1, #5
 8002620:	430a      	orrs	r2, r1
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40
 8002624:	4b29      	ldr	r3, [pc, #164]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 8002626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	015b      	lsls	r3, r3, #5
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 8002634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002636:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 8002638:	2101      	movs	r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	635a      	str	r2, [r3, #52]	@ 0x34
 800263e:	4b23      	ldr	r3, [pc, #140]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002642:	2201      	movs	r2, #1
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 800264c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800264e:	4b1f      	ldr	r3, [pc, #124]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 8002650:	2102      	movs	r1, #2
 8002652:	430a      	orrs	r2, r1
 8002654:	635a      	str	r2, [r3, #52]	@ 0x34
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_SPI_MspInit+0x104>)
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002662:	2134      	movs	r1, #52	@ 0x34
 8002664:	187b      	adds	r3, r7, r1
 8002666:	2280      	movs	r2, #128	@ 0x80
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	000c      	movs	r4, r1
 800266e:	193b      	adds	r3, r7, r4
 8002670:	2202      	movs	r2, #2
 8002672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	193b      	adds	r3, r7, r4
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	193b      	adds	r3, r7, r4
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	193a      	adds	r2, r7, r4
 8002688:	23a0      	movs	r3, #160	@ 0xa0
 800268a:	05db      	lsls	r3, r3, #23
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f001 fcbe 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002694:	0021      	movs	r1, r4
 8002696:	187b      	adds	r3, r7, r1
 8002698:	2228      	movs	r2, #40	@ 0x28
 800269a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	187b      	adds	r3, r7, r1
 800269e:	2202      	movs	r2, #2
 80026a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	4a06      	ldr	r2, [pc, #24]	@ (80026d0 <HAL_SPI_MspInit+0x108>)
 80026b8:	0019      	movs	r1, r3
 80026ba:	0010      	movs	r0, r2
 80026bc:	f001 fca8 	bl	8004010 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026c0:	46c0      	nop			@ (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b013      	add	sp, #76	@ 0x4c
 80026c6:	bd90      	pop	{r4, r7, pc}
 80026c8:	40013000 	.word	0x40013000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	50000400 	.word	0x50000400

080026d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <HAL_TIM_PWM_MspInit+0x38>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10d      	bne.n	8002702 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026ec:	2180      	movs	r1, #128	@ 0x80
 80026ee:	0109      	lsls	r1, r1, #4
 80026f0:	430a      	orrs	r2, r1
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <HAL_TIM_Base_MspInit+0x38>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10d      	bne.n	8002742 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_TIM_Base_MspInit+0x3c>)
 8002728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_TIM_Base_MspInit+0x3c>)
 800272c:	2180      	movs	r1, #128	@ 0x80
 800272e:	0209      	lsls	r1, r1, #8
 8002730:	430a      	orrs	r2, r1
 8002732:	641a      	str	r2, [r3, #64]	@ 0x40
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_TIM_Base_MspInit+0x3c>)
 8002736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	40002000 	.word	0x40002000
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	240c      	movs	r4, #12
 800275e:	193b      	adds	r3, r7, r4
 8002760:	0018      	movs	r0, r3
 8002762:	2314      	movs	r3, #20
 8002764:	001a      	movs	r2, r3
 8002766:	2100      	movs	r1, #0
 8002768:	f005 fd54 	bl	8008214 <memset>
  if(htim->Instance==TIM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a15      	ldr	r2, [pc, #84]	@ (80027c8 <HAL_TIM_MspPostInit+0x74>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d123      	bne.n	80027be <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_TIM_MspPostInit+0x78>)
 8002778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_TIM_MspPostInit+0x78>)
 800277c:	2101      	movs	r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	635a      	str	r2, [r3, #52]	@ 0x34
 8002782:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <HAL_TIM_MspPostInit+0x78>)
 8002784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 800278e:	193b      	adds	r3, r7, r4
 8002790:	2280      	movs	r2, #128	@ 0x80
 8002792:	0212      	lsls	r2, r2, #8
 8002794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	0021      	movs	r1, r4
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2202      	movs	r2, #2
 800279c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2202      	movs	r2, #2
 80027ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 80027b0:	187a      	adds	r2, r7, r1
 80027b2:	23a0      	movs	r3, #160	@ 0xa0
 80027b4:	05db      	lsls	r3, r3, #23
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f001 fc29 	bl	8004010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b009      	add	sp, #36	@ 0x24
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b095      	sub	sp, #84	@ 0x54
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	233c      	movs	r3, #60	@ 0x3c
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	0018      	movs	r0, r3
 80027de:	2314      	movs	r3, #20
 80027e0:	001a      	movs	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f005 fd16 	bl	8008214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e8:	241c      	movs	r4, #28
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	0018      	movs	r0, r3
 80027ee:	2320      	movs	r3, #32
 80027f0:	001a      	movs	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	f005 fd0e 	bl	8008214 <memset>
  if(huart->Instance==USART1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_UART_MspInit+0x158>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d000      	beq.n	8002804 <HAL_UART_MspInit+0x34>
 8002802:	e08c      	b.n	800291e <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002804:	193b      	adds	r3, r7, r4
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002810:	193b      	adds	r3, r7, r4
 8002812:	0018      	movs	r0, r3
 8002814:	f002 fab0 	bl	8004d78 <HAL_RCCEx_PeriphCLKConfig>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800281c:	f7ff fb06 	bl	8001e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002820:	4b42      	ldr	r3, [pc, #264]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002824:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002826:	2180      	movs	r1, #128	@ 0x80
 8002828:	01c9      	lsls	r1, r1, #7
 800282a:	430a      	orrs	r2, r1
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
 800282e:	4b3f      	ldr	r3, [pc, #252]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	01db      	lsls	r3, r3, #7
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283c:	4b3b      	ldr	r3, [pc, #236]	@ (800292c <HAL_UART_MspInit+0x15c>)
 800283e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002840:	4b3a      	ldr	r3, [pc, #232]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002842:	2104      	movs	r1, #4
 8002844:	430a      	orrs	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	@ 0x34
 8002848:	4b38      	ldr	r3, [pc, #224]	@ (800292c <HAL_UART_MspInit+0x15c>)
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002854:	4b35      	ldr	r3, [pc, #212]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002858:	4b34      	ldr	r3, [pc, #208]	@ (800292c <HAL_UART_MspInit+0x15c>)
 800285a:	2102      	movs	r1, #2
 800285c:	430a      	orrs	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002860:	4b32      	ldr	r3, [pc, #200]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b2f      	ldr	r3, [pc, #188]	@ (800292c <HAL_UART_MspInit+0x15c>)
 800286e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002870:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <HAL_UART_MspInit+0x15c>)
 8002872:	2101      	movs	r1, #1
 8002874:	430a      	orrs	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34
 8002878:	4b2c      	ldr	r3, [pc, #176]	@ (800292c <HAL_UART_MspInit+0x15c>)
 800287a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002884:	213c      	movs	r1, #60	@ 0x3c
 8002886:	187b      	adds	r3, r7, r1
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	01d2      	lsls	r2, r2, #7
 800288c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	000c      	movs	r4, r1
 8002890:	193b      	adds	r3, r7, r4
 8002892:	2202      	movs	r2, #2
 8002894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	193b      	adds	r3, r7, r4
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	193b      	adds	r3, r7, r4
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_UART_MspInit+0x160>)
 80028ac:	0019      	movs	r1, r3
 80028ae:	0010      	movs	r0, r2
 80028b0:	f001 fbae 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2204      	movs	r2, #4
 80028b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2202      	movs	r2, #2
 80028be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	193b      	adds	r3, r7, r4
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80028cc:	193b      	adds	r3, r7, r4
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <HAL_UART_MspInit+0x164>)
 80028d6:	0019      	movs	r1, r3
 80028d8:	0010      	movs	r0, r2
 80028da:	f001 fb99 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028de:	0021      	movs	r1, r4
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2280      	movs	r2, #128	@ 0x80
 80028e4:	0152      	lsls	r2, r2, #5
 80028e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2202      	movs	r2, #2
 80028ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	2201      	movs	r2, #1
 80028fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002900:	187a      	adds	r2, r7, r1
 8002902:	23a0      	movs	r3, #160	@ 0xa0
 8002904:	05db      	lsls	r3, r3, #23
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f001 fb81 	bl	8004010 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	201b      	movs	r0, #27
 8002914:	f001 f81a 	bl	800394c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002918:	201b      	movs	r0, #27
 800291a:	f001 f82c 	bl	8003976 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b015      	add	sp, #84	@ 0x54
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	40013800 	.word	0x40013800
 800292c:	40021000 	.word	0x40021000
 8002930:	50000800 	.word	0x50000800
 8002934:	50000400 	.word	0x50000400

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800293c:	46c0      	nop			@ (mov r8, r8)
 800293e:	e7fd      	b.n	800293c <NMI_Handler+0x4>

08002940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	e7fd      	b.n	8002944 <HardFault_Handler+0x4>

08002948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002960:	f000 f8be 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <DMA1_Channel1_IRQHandler+0x14>)
 8002972:	0018      	movs	r0, r3
 8002974:	f001 fa0a 	bl	8003d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	2000010c 	.word	0x2000010c

08002984 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <DMA1_Channel2_3_IRQHandler+0x14>)
 800298a:	0018      	movs	r0, r3
 800298c:	f001 f9fe 	bl	8003d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	200001bc 	.word	0x200001bc

0800299c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <USART1_IRQHandler+0x14>)
 80029a2:	0018      	movs	r0, r3
 80029a4:	f003 fb1a 	bl	8005fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029a8:	46c0      	nop			@ (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	20000314 	.word	0x20000314

080029b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <SystemInit+0x14>)
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	0512      	lsls	r2, r2, #20
 80029be:	609a      	str	r2, [r3, #8]
#endif
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029cc:	480d      	ldr	r0, [pc, #52]	@ (8002a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029d0:	f7ff fff0 	bl	80029b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029d6:	e003      	b.n	80029e0 <LoopCopyDataInit>

080029d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80029da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029de:	3104      	adds	r1, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029e0:	480a      	ldr	r0, [pc, #40]	@ (8002a0c <LoopForever+0xa>)
  ldr r3, =_edata
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <LoopForever+0xe>)
  adds r2, r0, r1
 80029e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029e8:	d3f6      	bcc.n	80029d8 <CopyDataInit>
  ldr r2, =_sbss
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <LoopForever+0x12>)
  b LoopFillZerobss
 80029ec:	e002      	b.n	80029f4 <LoopFillZerobss>

080029ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  str  r3, [r2]
 80029f0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f2:	3204      	adds	r2, #4

080029f4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80029f4:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <LoopForever+0x16>)
  cmp r2, r3
 80029f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029f8:	d3f9      	bcc.n	80029ee <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80029fa:	f005 fc13 	bl	8008224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029fe:	f7fe fdb9 	bl	8001574 <main>

08002a02 <LoopForever>:

LoopForever:
    b LoopForever
 8002a02:	e7fe      	b.n	8002a02 <LoopForever>
  ldr   r0, =_estack
 8002a04:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8002a08:	080085e4 	.word	0x080085e4
  ldr r0, =_sdata
 8002a0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a10:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8002a14:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8002a18:	20000618 	.word	0x20000618

08002a1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC1_IRQHandler>

08002a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2a:	2003      	movs	r0, #3
 8002a2c:	f000 f80e 	bl	8002a4c <HAL_InitTick>
 8002a30:	1e03      	subs	r3, r0, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e001      	b.n	8002a40 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a3c:	f7ff fc86 	bl	800234c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	781b      	ldrb	r3, [r3, #0]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a54:	230f      	movs	r3, #15
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_InitTick+0x88>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02b      	beq.n	8002abc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_InitTick+0x8c>)
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <HAL_InitTick+0x88>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	23fa      	movs	r3, #250	@ 0xfa
 8002a70:	0098      	lsls	r0, r3, #2
 8002a72:	f7fd fb49 	bl	8000108 <__udivsi3>
 8002a76:	0003      	movs	r3, r0
 8002a78:	0019      	movs	r1, r3
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	f7fd fb44 	bl	8000108 <__udivsi3>
 8002a80:	0003      	movs	r3, r0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 ff87 	bl	8003996 <HAL_SYSTICK_Config>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d112      	bne.n	8002ab2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d80a      	bhi.n	8002aa8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	2301      	movs	r3, #1
 8002a96:	425b      	negs	r3, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 ff56 	bl	800394c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_InitTick+0x90>)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e00d      	b.n	8002ac4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e008      	b.n	8002ac4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ab2:	230f      	movs	r3, #15
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e003      	b.n	8002ac4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002abc:	230f      	movs	r3, #15
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b005      	add	sp, #20
 8002ad0:	bd90      	pop	{r4, r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	20000080 	.word	0x20000080
 8002ad8:	20000078 	.word	0x20000078
 8002adc:	2000007c 	.word	0x2000007c

08002ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_IncTick+0x1c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	001a      	movs	r2, r3
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_IncTick+0x20>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	18d2      	adds	r2, r2, r3
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_IncTick+0x20>)
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			@ (mov r8, r8)
 8002afc:	20000080 	.word	0x20000080
 8002b00:	20000614 	.word	0x20000614

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b02      	ldr	r3, [pc, #8]	@ (8002b14 <HAL_GetTick+0x10>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	20000614 	.word	0x20000614

08002b18 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002b28:	401a      	ands	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	ff3fffff 	.word	0xff3fffff

08002b40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	23c0      	movs	r3, #192	@ 0xc0
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	4013      	ands	r3, r2
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	2104      	movs	r1, #4
 8002b6e:	400a      	ands	r2, r1
 8002b70:	2107      	movs	r1, #7
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	43d2      	mvns	r2, r2
 8002b78:	401a      	ands	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	400b      	ands	r3, r1
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4099      	lsls	r1, r3
 8002b84:	000b      	movs	r3, r1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b8c:	46c0      	nop			@ (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b004      	add	sp, #16
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	400a      	ands	r2, r1
 8002ba8:	2107      	movs	r1, #7
 8002baa:	4091      	lsls	r1, r2
 8002bac:	000a      	movs	r2, r1
 8002bae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bb6:	40da      	lsrs	r2, r3
 8002bb8:	0013      	movs	r3, r2
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b002      	add	sp, #8
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	23c0      	movs	r3, #192	@ 0xc0
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	211f      	movs	r1, #31
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	4091      	lsls	r1, r2
 8002bfe:	000a      	movs	r2, r1
 8002c00:	43d2      	mvns	r2, r2
 8002c02:	401a      	ands	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	210f      	movs	r1, #15
 8002c0a:	4019      	ands	r1, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	201f      	movs	r0, #31
 8002c10:	4003      	ands	r3, r0
 8002c12:	4099      	lsls	r1, r3
 8002c14:	000b      	movs	r3, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b004      	add	sp, #16
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	025b      	lsls	r3, r3, #9
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	0252      	lsls	r2, r2, #9
 8002c58:	0a52      	lsrs	r2, r2, #9
 8002c5a:	43d2      	mvns	r2, r2
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b002      	add	sp, #8
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	0212      	lsls	r2, r2, #8
 8002c80:	43d2      	mvns	r2, r2
 8002c82:	401a      	ands	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	4904      	ldr	r1, [pc, #16]	@ (8002ca0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002c8e:	400b      	ands	r3, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	7fffff00 	.word	0x7fffff00

08002ca4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	0552      	lsls	r2, r2, #21
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	6fffffe8 	.word	0x6fffffe8

08002ccc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	401a      	ands	r2, r3
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	055b      	lsls	r3, r3, #21
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d101      	bne.n	8002cea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <LL_ADC_Enable+0x20>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	2201      	movs	r2, #1
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	7fffffe8 	.word	0x7fffffe8

08002d18 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <LL_ADC_Disable+0x20>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	2202      	movs	r2, #2
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d30:	46c0      	nop			@ (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	7fffffe8 	.word	0x7fffffe8

08002d3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <LL_ADC_IsEnabled+0x18>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_ADC_IsEnabled+0x1a>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <LL_ADC_REG_StartConversion+0x20>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2204      	movs	r2, #4
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d78:	46c0      	nop			@ (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	7fffffe8 	.word	0x7fffffe8

08002d84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2204      	movs	r2, #4
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b002      	add	sp, #8
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db0:	231f      	movs	r3, #31
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e17e      	b.n	80030cc <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff fadb 	bl	8002394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2254      	movs	r2, #84	@ 0x54
 8002de8:	2100      	movs	r1, #0
 8002dea:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff ff6b 	bl	8002ccc <LL_ADC_IsInternalRegulatorEnabled>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d114      	bne.n	8002e24 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff ff50 	bl	8002ca4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e04:	4bb3      	ldr	r3, [pc, #716]	@ (80030d4 <HAL_ADC_Init+0x32c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	49b3      	ldr	r1, [pc, #716]	@ (80030d8 <HAL_ADC_Init+0x330>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7fd f97c 	bl	8000108 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e16:	e002      	b.n	8002e1e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7ff ff4f 	bl	8002ccc <LL_ADC_IsInternalRegulatorEnabled>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	2210      	movs	r2, #16
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	2201      	movs	r2, #1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e4a:	231f      	movs	r3, #31
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7ff ff94 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e64:	2210      	movs	r2, #16
 8002e66:	4013      	ands	r3, r2
 8002e68:	d000      	beq.n	8002e6c <HAL_ADC_Init+0xc4>
 8002e6a:	e122      	b.n	80030b2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d000      	beq.n	8002e74 <HAL_ADC_Init+0xcc>
 8002e72:	e11e      	b.n	80030b2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	4a98      	ldr	r2, [pc, #608]	@ (80030dc <HAL_ADC_Init+0x334>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff ff57 	bl	8002d3c <LL_ADC_IsEnabled>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d000      	beq.n	8002e94 <HAL_ADC_Init+0xec>
 8002e92:	e0ad      	b.n	8002ff0 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7e1b      	ldrb	r3, [r3, #24]
 8002e9c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e9e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7e5b      	ldrb	r3, [r3, #25]
 8002ea4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ea6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e9b      	ldrb	r3, [r3, #26]
 8002eac:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002eae:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_ADC_Init+0x116>
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	e000      	b.n	8002ec0 <HAL_ADC_Init+0x118>
 8002ebe:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ec0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002ec6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da04      	bge.n	8002eda <HAL_ADC_Init+0x132>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	e001      	b.n	8002ede <HAL_ADC_Init+0x136>
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002ede:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	212c      	movs	r1, #44	@ 0x2c
 8002ee4:	5c5b      	ldrb	r3, [r3, r1]
 8002ee6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ee8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d115      	bne.n	8002f26 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7e9b      	ldrb	r3, [r3, #26]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2280      	movs	r2, #128	@ 0x80
 8002f06:	0252      	lsls	r2, r2, #9
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	e00b      	b.n	8002f26 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	2220      	movs	r2, #32
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f32:	23e0      	movs	r3, #224	@ 0xe0
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_ADC_Init+0x338>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0f9b      	lsrs	r3, r3, #30
 8002f60:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f66:	4313      	orrs	r3, r2
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	223c      	movs	r2, #60	@ 0x3c
 8002f72:	5c9b      	ldrb	r3, [r3, r2]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d111      	bne.n	8002f9c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0f9b      	lsrs	r3, r3, #30
 8002f7e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f84:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f8a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f90:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	2201      	movs	r2, #1
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	4a50      	ldr	r2, [pc, #320]	@ (80030e4 <HAL_ADC_Init+0x33c>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	23c0      	movs	r3, #192	@ 0xc0
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d018      	beq.n	8002ff0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002fc2:	2380      	movs	r3, #128	@ 0x80
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d012      	beq.n	8002ff0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002fd6:	4b44      	ldr	r3, [pc, #272]	@ (80030e8 <HAL_ADC_Init+0x340>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a44      	ldr	r2, [pc, #272]	@ (80030ec <HAL_ADC_Init+0x344>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	23f0      	movs	r3, #240	@ 0xf0
 8002fe6:	039b      	lsls	r3, r3, #14
 8002fe8:	401a      	ands	r2, r3
 8002fea:	4b3f      	ldr	r3, [pc, #252]	@ (80030e8 <HAL_ADC_Init+0x340>)
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f7ff fdad 	bl	8002b5a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003008:	4939      	ldr	r1, [pc, #228]	@ (80030f0 <HAL_ADC_Init+0x348>)
 800300a:	001a      	movs	r2, r3
 800300c:	f7ff fda5 	bl	8002b5a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2110      	movs	r1, #16
 8003024:	4249      	negs	r1, r1
 8003026:	430a      	orrs	r2, r1
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
 800302a:	e018      	b.n	800305e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	039b      	lsls	r3, r3, #14
 8003034:	429a      	cmp	r2, r3
 8003036:	d112      	bne.n	800305e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	3b01      	subs	r3, #1
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	221c      	movs	r2, #28
 8003048:	4013      	ands	r3, r2
 800304a:	2210      	movs	r2, #16
 800304c:	4252      	negs	r2, r2
 800304e:	409a      	lsls	r2, r3
 8003050:	0011      	movs	r1, r2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2100      	movs	r1, #0
 8003064:	0018      	movs	r0, r3
 8003066:	f7ff fd95 	bl	8002b94 <LL_ADC_GetSamplingTimeCommonChannels>
 800306a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003070:	429a      	cmp	r2, r3
 8003072:	d10b      	bne.n	800308c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307e:	2203      	movs	r2, #3
 8003080:	4393      	bics	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800308a:	e01c      	b.n	80030c6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	2212      	movs	r2, #18
 8003092:	4393      	bics	r3, r2
 8003094:	2210      	movs	r2, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a0:	2201      	movs	r2, #1
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80030a8:	231f      	movs	r3, #31
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030b0:	e009      	b.n	80030c6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	2210      	movs	r2, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80030be:	231f      	movs	r3, #31
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80030c6:	231f      	movs	r3, #31
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	781b      	ldrb	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b008      	add	sp, #32
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000078 	.word	0x20000078
 80030d8:	00030d40 	.word	0x00030d40
 80030dc:	fffffefd 	.word	0xfffffefd
 80030e0:	ffde0201 	.word	0xffde0201
 80030e4:	1ffffc02 	.word	0x1ffffc02
 80030e8:	40012708 	.word	0x40012708
 80030ec:	ffc3ffff 	.word	0xffc3ffff
 80030f0:	7fffff04 	.word	0x7fffff04

080030f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff fe3d 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d16c      	bne.n	80031e8 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2254      	movs	r2, #84	@ 0x54
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_ADC_Start_DMA+0x28>
 8003118:	2302      	movs	r3, #2
 800311a:	e06c      	b.n	80031f6 <HAL_ADC_Start_DMA+0x102>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2254      	movs	r2, #84	@ 0x54
 8003120:	2101      	movs	r1, #1
 8003122:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	4013      	ands	r3, r2
 800312e:	d113      	bne.n	8003158 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff fe01 	bl	8002d3c <LL_ADC_IsEnabled>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d004      	beq.n	8003148 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff fde8 	bl	8002d18 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2101      	movs	r1, #1
 8003154:	430a      	orrs	r2, r1
 8003156:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003158:	2517      	movs	r5, #23
 800315a:	197c      	adds	r4, r7, r5
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	0018      	movs	r0, r3
 8003160:	f000 fa3c 	bl	80035dc <ADC_Enable>
 8003164:	0003      	movs	r3, r0
 8003166:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003168:	002c      	movs	r4, r5
 800316a:	193b      	adds	r3, r7, r4
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d13e      	bne.n	80031f0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	4a22      	ldr	r2, [pc, #136]	@ (8003200 <HAL_ADC_Start_DMA+0x10c>)
 8003178:	4013      	ands	r3, r2
 800317a:	2280      	movs	r2, #128	@ 0x80
 800317c:	0052      	lsls	r2, r2, #1
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318e:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <HAL_ADC_Start_DMA+0x110>)
 8003190:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003196:	4a1c      	ldr	r2, [pc, #112]	@ (8003208 <HAL_ADC_Start_DMA+0x114>)
 8003198:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319e:	4a1b      	ldr	r2, [pc, #108]	@ (800320c <HAL_ADC_Start_DMA+0x118>)
 80031a0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	221c      	movs	r2, #28
 80031a8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2254      	movs	r2, #84	@ 0x54
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2110      	movs	r1, #16
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3340      	adds	r3, #64	@ 0x40
 80031cc:	0019      	movs	r1, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	193c      	adds	r4, r7, r4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f000 fc76 	bl	8003ac4 <HAL_DMA_Start_IT>
 80031d8:	0003      	movs	r3, r0
 80031da:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7ff fdbd 	bl	8002d60 <LL_ADC_REG_StartConversion>
 80031e6:	e003      	b.n	80031f0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031e8:	2317      	movs	r3, #23
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2202      	movs	r2, #2
 80031ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80031f0:	2317      	movs	r3, #23
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	781b      	ldrb	r3, [r3, #0]
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b006      	add	sp, #24
 80031fc:	bdb0      	pop	{r4, r5, r7, pc}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	fffff0fe 	.word	0xfffff0fe
 8003204:	080036d9 	.word	0x080036d9
 8003208:	080037a1 	.word	0x080037a1
 800320c:	080037bf 	.word	0x080037bf

08003210 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003218:	46c0      	nop			@ (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323a:	2317      	movs	r3, #23
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2254      	movs	r2, #84	@ 0x54
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e1be      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x3a2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2254      	movs	r2, #84	@ 0x54
 8003258:	2101      	movs	r1, #1
 800325a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff fd8f 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 8003266:	1e03      	subs	r3, r0, #0
 8003268:	d000      	beq.n	800326c <HAL_ADC_ConfigChannel+0x3c>
 800326a:	e1a1      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d100      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x46>
 8003274:	e152      	b.n	800351c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	2380      	movs	r3, #128	@ 0x80
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	429a      	cmp	r2, r3
 8003280:	d004      	beq.n	800328c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003286:	4ac2      	ldr	r2, [pc, #776]	@ (8003590 <HAL_ADC_ConfigChannel+0x360>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d108      	bne.n	800329e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0019      	movs	r1, r3
 8003296:	0010      	movs	r0, r2
 8003298:	f7ff fcc4 	bl	8002c24 <LL_ADC_REG_SetSequencerChAdd>
 800329c:	e0ed      	b.n	800347a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	211f      	movs	r1, #31
 80032a8:	400b      	ands	r3, r1
 80032aa:	210f      	movs	r1, #15
 80032ac:	4099      	lsls	r1, r3
 80032ae:	000b      	movs	r3, r1
 80032b0:	43db      	mvns	r3, r3
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	025b      	lsls	r3, r3, #9
 80032bc:	0a5b      	lsrs	r3, r3, #9
 80032be:	d105      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x9c>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	221f      	movs	r2, #31
 80032c8:	4013      	ands	r3, r2
 80032ca:	e0bc      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	d000      	beq.n	80032d8 <HAL_ADC_ConfigChannel+0xa8>
 80032d6:	e0b5      	b.n	8003444 <HAL_ADC_ConfigChannel+0x214>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2202      	movs	r2, #2
 80032de:	4013      	ands	r3, r2
 80032e0:	d000      	beq.n	80032e4 <HAL_ADC_ConfigChannel+0xb4>
 80032e2:	e0ad      	b.n	8003440 <HAL_ADC_ConfigChannel+0x210>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2204      	movs	r2, #4
 80032ea:	4013      	ands	r3, r2
 80032ec:	d000      	beq.n	80032f0 <HAL_ADC_ConfigChannel+0xc0>
 80032ee:	e0a5      	b.n	800343c <HAL_ADC_ConfigChannel+0x20c>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	4013      	ands	r3, r2
 80032f8:	d000      	beq.n	80032fc <HAL_ADC_ConfigChannel+0xcc>
 80032fa:	e09d      	b.n	8003438 <HAL_ADC_ConfigChannel+0x208>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2210      	movs	r2, #16
 8003302:	4013      	ands	r3, r2
 8003304:	d000      	beq.n	8003308 <HAL_ADC_ConfigChannel+0xd8>
 8003306:	e095      	b.n	8003434 <HAL_ADC_ConfigChannel+0x204>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2220      	movs	r2, #32
 800330e:	4013      	ands	r3, r2
 8003310:	d000      	beq.n	8003314 <HAL_ADC_ConfigChannel+0xe4>
 8003312:	e08d      	b.n	8003430 <HAL_ADC_ConfigChannel+0x200>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2240      	movs	r2, #64	@ 0x40
 800331a:	4013      	ands	r3, r2
 800331c:	d000      	beq.n	8003320 <HAL_ADC_ConfigChannel+0xf0>
 800331e:	e085      	b.n	800342c <HAL_ADC_ConfigChannel+0x1fc>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2280      	movs	r2, #128	@ 0x80
 8003326:	4013      	ands	r3, r2
 8003328:	d000      	beq.n	800332c <HAL_ADC_ConfigChannel+0xfc>
 800332a:	e07d      	b.n	8003428 <HAL_ADC_ConfigChannel+0x1f8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2380      	movs	r3, #128	@ 0x80
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4013      	ands	r3, r2
 8003336:	d000      	beq.n	800333a <HAL_ADC_ConfigChannel+0x10a>
 8003338:	e074      	b.n	8003424 <HAL_ADC_ConfigChannel+0x1f4>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d000      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x118>
 8003346:	e06b      	b.n	8003420 <HAL_ADC_ConfigChannel+0x1f0>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4013      	ands	r3, r2
 8003352:	d000      	beq.n	8003356 <HAL_ADC_ConfigChannel+0x126>
 8003354:	e062      	b.n	800341c <HAL_ADC_ConfigChannel+0x1ec>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4013      	ands	r3, r2
 8003360:	d000      	beq.n	8003364 <HAL_ADC_ConfigChannel+0x134>
 8003362:	e059      	b.n	8003418 <HAL_ADC_ConfigChannel+0x1e8>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	@ 0x80
 800336a:	015b      	lsls	r3, r3, #5
 800336c:	4013      	ands	r3, r2
 800336e:	d151      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1e4>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2380      	movs	r3, #128	@ 0x80
 8003376:	019b      	lsls	r3, r3, #6
 8003378:	4013      	ands	r3, r2
 800337a:	d149      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x1e0>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	01db      	lsls	r3, r3, #7
 8003384:	4013      	ands	r3, r2
 8003386:	d141      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1dc>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	4013      	ands	r3, r2
 8003392:	d139      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d8>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	025b      	lsls	r3, r3, #9
 800339c:	4013      	ands	r3, r2
 800339e:	d131      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x1d4>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	029b      	lsls	r3, r3, #10
 80033a8:	4013      	ands	r3, r2
 80033aa:	d129      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1d0>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	02db      	lsls	r3, r3, #11
 80033b4:	4013      	ands	r3, r2
 80033b6:	d121      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x1cc>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	@ 0x80
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	4013      	ands	r3, r2
 80033c2:	d119      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1c8>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2380      	movs	r3, #128	@ 0x80
 80033ca:	035b      	lsls	r3, r3, #13
 80033cc:	4013      	ands	r3, r2
 80033ce:	d111      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1c4>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2380      	movs	r3, #128	@ 0x80
 80033d6:	039b      	lsls	r3, r3, #14
 80033d8:	4013      	ands	r3, r2
 80033da:	d109      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x1c0>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	03db      	lsls	r3, r3, #15
 80033e4:	4013      	ands	r3, r2
 80033e6:	d001      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x1bc>
 80033e8:	2316      	movs	r3, #22
 80033ea:	e02c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 80033ec:	2300      	movs	r3, #0
 80033ee:	e02a      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 80033f0:	2315      	movs	r3, #21
 80033f2:	e028      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 80033f4:	2314      	movs	r3, #20
 80033f6:	e026      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 80033f8:	2313      	movs	r3, #19
 80033fa:	e024      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 80033fc:	2312      	movs	r3, #18
 80033fe:	e022      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003400:	2311      	movs	r3, #17
 8003402:	e020      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003404:	2310      	movs	r3, #16
 8003406:	e01e      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003408:	230f      	movs	r3, #15
 800340a:	e01c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 800340c:	230e      	movs	r3, #14
 800340e:	e01a      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003410:	230d      	movs	r3, #13
 8003412:	e018      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003414:	230c      	movs	r3, #12
 8003416:	e016      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003418:	230b      	movs	r3, #11
 800341a:	e014      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 800341c:	230a      	movs	r3, #10
 800341e:	e012      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003420:	2309      	movs	r3, #9
 8003422:	e010      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003424:	2308      	movs	r3, #8
 8003426:	e00e      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003428:	2307      	movs	r3, #7
 800342a:	e00c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 800342c:	2306      	movs	r3, #6
 800342e:	e00a      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003430:	2305      	movs	r3, #5
 8003432:	e008      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003434:	2304      	movs	r3, #4
 8003436:	e006      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003438:	2303      	movs	r3, #3
 800343a:	e004      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 800343c:	2302      	movs	r3, #2
 800343e:	e002      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_ADC_ConfigChannel+0x216>
 8003444:	2300      	movs	r3, #0
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	6852      	ldr	r2, [r2, #4]
 800344a:	201f      	movs	r0, #31
 800344c:	4002      	ands	r2, r0
 800344e:	4093      	lsls	r3, r2
 8003450:	000a      	movs	r2, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	d808      	bhi.n	800347a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	001a      	movs	r2, r3
 8003476:	f7ff fbb5 	bl	8002be4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	001a      	movs	r2, r3
 8003488:	f7ff fbf0 	bl	8002c6c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db00      	blt.n	8003496 <HAL_ADC_ConfigChannel+0x266>
 8003494:	e096      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003496:	4b3f      	ldr	r3, [pc, #252]	@ (8003594 <HAL_ADC_ConfigChannel+0x364>)
 8003498:	0018      	movs	r0, r3
 800349a:	f7ff fb51 	bl	8002b40 <LL_ADC_GetCommonPathInternalCh>
 800349e:	0003      	movs	r3, r0
 80034a0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003598 <HAL_ADC_ConfigChannel+0x368>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d123      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	2380      	movs	r3, #128	@ 0x80
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034b4:	d11e      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2280      	movs	r2, #128	@ 0x80
 80034ba:	0412      	lsls	r2, r2, #16
 80034bc:	4313      	orrs	r3, r2
 80034be:	4a35      	ldr	r2, [pc, #212]	@ (8003594 <HAL_ADC_ConfigChannel+0x364>)
 80034c0:	0019      	movs	r1, r3
 80034c2:	0010      	movs	r0, r2
 80034c4:	f7ff fb28 	bl	8002b18 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80034c8:	4b34      	ldr	r3, [pc, #208]	@ (800359c <HAL_ADC_ConfigChannel+0x36c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4934      	ldr	r1, [pc, #208]	@ (80035a0 <HAL_ADC_ConfigChannel+0x370>)
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7fc fe1a 	bl	8000108 <__udivsi3>
 80034d4:	0003      	movs	r3, r0
 80034d6:	001a      	movs	r2, r3
 80034d8:	0013      	movs	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	189b      	adds	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	3301      	adds	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034e4:	e002      	b.n	80034ec <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f9      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034f2:	e067      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <HAL_ADC_ConfigChannel+0x374>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d162      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	2380      	movs	r3, #128	@ 0x80
 8003502:	03db      	lsls	r3, r3, #15
 8003504:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003506:	d15d      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2280      	movs	r2, #128	@ 0x80
 800350c:	03d2      	lsls	r2, r2, #15
 800350e:	4313      	orrs	r3, r2
 8003510:	4a20      	ldr	r2, [pc, #128]	@ (8003594 <HAL_ADC_ConfigChannel+0x364>)
 8003512:	0019      	movs	r1, r3
 8003514:	0010      	movs	r0, r2
 8003516:	f7ff faff 	bl	8002b18 <LL_ADC_SetCommonPathInternalCh>
 800351a:	e053      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	429a      	cmp	r2, r3
 8003526:	d004      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800352c:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_ADC_ConfigChannel+0x360>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d107      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0019      	movs	r1, r3
 800353c:	0010      	movs	r0, r2
 800353e:	f7ff fb82 	bl	8002c46 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da3c      	bge.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_ADC_ConfigChannel+0x364>)
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff faf7 	bl	8002b40 <LL_ADC_GetCommonPathInternalCh>
 8003552:	0003      	movs	r3, r0
 8003554:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a0f      	ldr	r2, [pc, #60]	@ (8003598 <HAL_ADC_ConfigChannel+0x368>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d108      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4a11      	ldr	r2, [pc, #68]	@ (80035a8 <HAL_ADC_ConfigChannel+0x378>)
 8003564:	4013      	ands	r3, r2
 8003566:	4a0b      	ldr	r2, [pc, #44]	@ (8003594 <HAL_ADC_ConfigChannel+0x364>)
 8003568:	0019      	movs	r1, r3
 800356a:	0010      	movs	r0, r2
 800356c:	f7ff fad4 	bl	8002b18 <LL_ADC_SetCommonPathInternalCh>
 8003570:	e028      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a0b      	ldr	r2, [pc, #44]	@ (80035a4 <HAL_ADC_ConfigChannel+0x374>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d123      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4a0b      	ldr	r2, [pc, #44]	@ (80035ac <HAL_ADC_ConfigChannel+0x37c>)
 8003580:	4013      	ands	r3, r2
 8003582:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <HAL_ADC_ConfigChannel+0x364>)
 8003584:	0019      	movs	r1, r3
 8003586:	0010      	movs	r0, r2
 8003588:	f7ff fac6 	bl	8002b18 <LL_ADC_SetCommonPathInternalCh>
 800358c:	e01a      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x394>
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	80000004 	.word	0x80000004
 8003594:	40012708 	.word	0x40012708
 8003598:	a4000200 	.word	0xa4000200
 800359c:	20000078 	.word	0x20000078
 80035a0:	00030d40 	.word	0x00030d40
 80035a4:	a8000400 	.word	0xa8000400
 80035a8:	ff7fffff 	.word	0xff7fffff
 80035ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b4:	2220      	movs	r2, #32
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80035bc:	2317      	movs	r3, #23
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2254      	movs	r2, #84	@ 0x54
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80035cc:	2317      	movs	r3, #23
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b006      	add	sp, #24
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)

080035dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7ff fba5 	bl	8002d3c <LL_ADC_IsEnabled>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d162      	bne.n	80036bc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a32      	ldr	r2, [pc, #200]	@ (80036c8 <ADC_Enable+0xec>)
 80035fe:	4013      	ands	r3, r2
 8003600:	d00d      	beq.n	800361e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003606:	2210      	movs	r2, #16
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003612:	2201      	movs	r2, #1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e04f      	b.n	80036be <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff fb66 	bl	8002cf4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003628:	4b28      	ldr	r3, [pc, #160]	@ (80036cc <ADC_Enable+0xf0>)
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff fa88 	bl	8002b40 <LL_ADC_GetCommonPathInternalCh>
 8003630:	0002      	movs	r2, r0
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	4013      	ands	r3, r2
 8003638:	d00f      	beq.n	800365a <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800363a:	4b25      	ldr	r3, [pc, #148]	@ (80036d0 <ADC_Enable+0xf4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4925      	ldr	r1, [pc, #148]	@ (80036d4 <ADC_Enable+0xf8>)
 8003640:	0018      	movs	r0, r3
 8003642:	f7fc fd61 	bl	8000108 <__udivsi3>
 8003646:	0003      	movs	r3, r0
 8003648:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800364a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800364c:	e002      	b.n	8003654 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3b01      	subs	r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f9      	bne.n	800364e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	7e5b      	ldrb	r3, [r3, #25]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d02c      	beq.n	80036bc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003662:	f7ff fa4f 	bl	8002b04 <HAL_GetTick>
 8003666:	0003      	movs	r3, r0
 8003668:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800366a:	e020      	b.n	80036ae <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff fb63 	bl	8002d3c <LL_ADC_IsEnabled>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d104      	bne.n	8003684 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff fb38 	bl	8002cf4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003684:	f7ff fa3e 	bl	8002b04 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d90d      	bls.n	80036ae <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	2210      	movs	r2, #16
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	2201      	movs	r2, #1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e007      	b.n	80036be <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d1d7      	bne.n	800366c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b004      	add	sp, #16
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	80000017 	.word	0x80000017
 80036cc:	40012708 	.word	0x40012708
 80036d0:	20000078 	.word	0x20000078
 80036d4:	00030d40 	.word	0x00030d40

080036d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	2250      	movs	r2, #80	@ 0x50
 80036ec:	4013      	ands	r3, r2
 80036ee:	d141      	bne.n	8003774 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	2280      	movs	r2, #128	@ 0x80
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff fa5d 	bl	8002bc2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d02e      	beq.n	800376a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	7e9b      	ldrb	r3, [r3, #26]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d12a      	bne.n	800376a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2208      	movs	r2, #8
 800371c:	4013      	ands	r3, r2
 800371e:	2b08      	cmp	r3, #8
 8003720:	d123      	bne.n	800376a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0018      	movs	r0, r3
 8003728:	f7ff fb2c 	bl	8002d84 <LL_ADC_REG_IsConversionOngoing>
 800372c:	1e03      	subs	r3, r0, #0
 800372e:	d110      	bne.n	8003752 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	210c      	movs	r1, #12
 800373c:	438a      	bics	r2, r1
 800373e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	4a15      	ldr	r2, [pc, #84]	@ (800379c <ADC_DMAConvCplt+0xc4>)
 8003746:	4013      	ands	r3, r2
 8003748:	2201      	movs	r2, #1
 800374a:	431a      	orrs	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003750:	e00b      	b.n	800376a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	2220      	movs	r2, #32
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	2201      	movs	r2, #1
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	0018      	movs	r0, r3
 800376e:	f7fd fed7 	bl	8001520 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003772:	e00f      	b.n	8003794 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003778:	2210      	movs	r2, #16
 800377a:	4013      	ands	r3, r2
 800377c:	d004      	beq.n	8003788 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff fd4d 	bl	8003220 <HAL_ADC_ErrorCallback>
}
 8003786:	e005      	b.n	8003794 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	0010      	movs	r0, r2
 8003792:	4798      	blx	r3
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fffffefe 	.word	0xfffffefe

080037a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7ff fd2d 	bl	8003210 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}

080037be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d0:	2240      	movs	r2, #64	@ 0x40
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2204      	movs	r2, #4
 80037de:	431a      	orrs	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7ff fd1a 	bl	8003220 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b004      	add	sp, #16
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	0002      	movs	r2, r0
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b7f      	cmp	r3, #127	@ 0x7f
 8003806:	d809      	bhi.n	800381c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003808:	1dfb      	adds	r3, r7, #7
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	001a      	movs	r2, r3
 800380e:	231f      	movs	r3, #31
 8003810:	401a      	ands	r2, r3
 8003812:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <__NVIC_EnableIRQ+0x30>)
 8003814:	2101      	movs	r1, #1
 8003816:	4091      	lsls	r1, r2
 8003818:	000a      	movs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	e000e100 	.word	0xe000e100

08003828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	0002      	movs	r2, r0
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b7f      	cmp	r3, #127	@ 0x7f
 800383c:	d828      	bhi.n	8003890 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800383e:	4a2f      	ldr	r2, [pc, #188]	@ (80038fc <__NVIC_SetPriority+0xd4>)
 8003840:	1dfb      	adds	r3, r7, #7
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b25b      	sxtb	r3, r3
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	33c0      	adds	r3, #192	@ 0xc0
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	589b      	ldr	r3, [r3, r2]
 800384e:	1dfa      	adds	r2, r7, #7
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	0011      	movs	r1, r2
 8003854:	2203      	movs	r2, #3
 8003856:	400a      	ands	r2, r1
 8003858:	00d2      	lsls	r2, r2, #3
 800385a:	21ff      	movs	r1, #255	@ 0xff
 800385c:	4091      	lsls	r1, r2
 800385e:	000a      	movs	r2, r1
 8003860:	43d2      	mvns	r2, r2
 8003862:	401a      	ands	r2, r3
 8003864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	22ff      	movs	r2, #255	@ 0xff
 800386c:	401a      	ands	r2, r3
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	0018      	movs	r0, r3
 8003874:	2303      	movs	r3, #3
 8003876:	4003      	ands	r3, r0
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800387c:	481f      	ldr	r0, [pc, #124]	@ (80038fc <__NVIC_SetPriority+0xd4>)
 800387e:	1dfb      	adds	r3, r7, #7
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b25b      	sxtb	r3, r3
 8003884:	089b      	lsrs	r3, r3, #2
 8003886:	430a      	orrs	r2, r1
 8003888:	33c0      	adds	r3, #192	@ 0xc0
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800388e:	e031      	b.n	80038f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003890:	4a1b      	ldr	r2, [pc, #108]	@ (8003900 <__NVIC_SetPriority+0xd8>)
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	0019      	movs	r1, r3
 8003898:	230f      	movs	r3, #15
 800389a:	400b      	ands	r3, r1
 800389c:	3b08      	subs	r3, #8
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3306      	adds	r3, #6
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	18d3      	adds	r3, r2, r3
 80038a6:	3304      	adds	r3, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1dfa      	adds	r2, r7, #7
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	0011      	movs	r1, r2
 80038b0:	2203      	movs	r2, #3
 80038b2:	400a      	ands	r2, r1
 80038b4:	00d2      	lsls	r2, r2, #3
 80038b6:	21ff      	movs	r1, #255	@ 0xff
 80038b8:	4091      	lsls	r1, r2
 80038ba:	000a      	movs	r2, r1
 80038bc:	43d2      	mvns	r2, r2
 80038be:	401a      	ands	r2, r3
 80038c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	22ff      	movs	r2, #255	@ 0xff
 80038c8:	401a      	ands	r2, r3
 80038ca:	1dfb      	adds	r3, r7, #7
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	0018      	movs	r0, r3
 80038d0:	2303      	movs	r3, #3
 80038d2:	4003      	ands	r3, r0
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038d8:	4809      	ldr	r0, [pc, #36]	@ (8003900 <__NVIC_SetPriority+0xd8>)
 80038da:	1dfb      	adds	r3, r7, #7
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	001c      	movs	r4, r3
 80038e0:	230f      	movs	r3, #15
 80038e2:	4023      	ands	r3, r4
 80038e4:	3b08      	subs	r3, #8
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	430a      	orrs	r2, r1
 80038ea:	3306      	adds	r3, #6
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	18c3      	adds	r3, r0, r3
 80038f0:	3304      	adds	r3, #4
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b003      	add	sp, #12
 80038fa:	bd90      	pop	{r4, r7, pc}
 80038fc:	e000e100 	.word	0xe000e100
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	1e5a      	subs	r2, r3, #1
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	045b      	lsls	r3, r3, #17
 8003914:	429a      	cmp	r2, r3
 8003916:	d301      	bcc.n	800391c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003918:	2301      	movs	r3, #1
 800391a:	e010      	b.n	800393e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <SysTick_Config+0x44>)
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	3a01      	subs	r2, #1
 8003922:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003924:	2301      	movs	r3, #1
 8003926:	425b      	negs	r3, r3
 8003928:	2103      	movs	r1, #3
 800392a:	0018      	movs	r0, r3
 800392c:	f7ff ff7c 	bl	8003828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <SysTick_Config+0x44>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	@ (8003948 <SysTick_Config+0x44>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	e000e010 	.word	0xe000e010

0800394c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	210f      	movs	r1, #15
 8003958:	187b      	adds	r3, r7, r1
 800395a:	1c02      	adds	r2, r0, #0
 800395c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	187b      	adds	r3, r7, r1
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b25b      	sxtb	r3, r3
 8003966:	0011      	movs	r1, r2
 8003968:	0018      	movs	r0, r3
 800396a:	f7ff ff5d 	bl	8003828 <__NVIC_SetPriority>
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	0002      	movs	r2, r0
 800397e:	1dfb      	adds	r3, r7, #7
 8003980:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b25b      	sxtb	r3, r3
 8003988:	0018      	movs	r0, r3
 800398a:	f7ff ff33 	bl	80037f4 <__NVIC_EnableIRQ>
}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b002      	add	sp, #8
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff ffaf 	bl	8003904 <SysTick_Config>
 80039a6:	0003      	movs	r3, r0
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e077      	b.n	8003ab2 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a3d      	ldr	r2, [pc, #244]	@ (8003abc <HAL_DMA_Init+0x10c>)
 80039c8:	4694      	mov	ip, r2
 80039ca:	4463      	add	r3, ip
 80039cc:	2114      	movs	r1, #20
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7fc fb9a 	bl	8000108 <__udivsi3>
 80039d4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80039d6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2225      	movs	r2, #37	@ 0x25
 80039e0:	2102      	movs	r1, #2
 80039e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4934      	ldr	r1, [pc, #208]	@ (8003ac0 <HAL_DMA_Init+0x110>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fa9f 	bl	8003f70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	01db      	lsls	r3, r3, #7
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d102      	bne.n	8003a44 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4c:	21ff      	movs	r1, #255	@ 0xff
 8003a4e:	400a      	ands	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d011      	beq.n	8003a88 <HAL_DMA_Init+0xd8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d80d      	bhi.n	8003a88 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 faaa 	bl	8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	e008      	b.n	8003a9a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2225      	movs	r2, #37	@ 0x25
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	@ 0x24
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	bffdfff8 	.word	0xbffdfff8
 8003ac0:	ffff800f 	.word	0xffff800f

08003ac4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2317      	movs	r3, #23
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2224      	movs	r2, #36	@ 0x24
 8003ade:	5c9b      	ldrb	r3, [r3, r2]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_DMA_Start_IT+0x24>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e070      	b.n	8003bca <HAL_DMA_Start_IT+0x106>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2224      	movs	r2, #36	@ 0x24
 8003aec:	2101      	movs	r1, #1
 8003aee:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2225      	movs	r2, #37	@ 0x25
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d157      	bne.n	8003bac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2225      	movs	r2, #37	@ 0x25
 8003b00:	2102      	movs	r1, #2
 8003b02:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	438a      	bics	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f9e5 	bl	8003ef0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	210e      	movs	r1, #14
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e00f      	b.n	8003b60 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	210a      	movs	r1, #10
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	025b      	lsls	r3, r3, #9
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d008      	beq.n	8003b80 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b78:	2180      	movs	r1, #128	@ 0x80
 8003b7a:	0049      	lsls	r1, r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b92:	2180      	movs	r1, #128	@ 0x80
 8003b94:	0049      	lsls	r1, r1, #1
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e007      	b.n	8003bbc <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2224      	movs	r2, #36	@ 0x24
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bb4:	2317      	movs	r3, #23
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	2202      	movs	r2, #2
 8003bba:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2224      	movs	r2, #36	@ 0x24
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	5499      	strb	r1, [r3, r2]

  return status;
 8003bc4:	2317      	movs	r3, #23
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	781b      	ldrb	r3, [r3, #0]
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b006      	add	sp, #24
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e050      	b.n	8003c88 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2225      	movs	r2, #37	@ 0x25
 8003bea:	5c9b      	ldrb	r3, [r3, r2]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d008      	beq.n	8003c04 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	@ 0x24
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e041      	b.n	8003c88 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	210e      	movs	r1, #14
 8003c10:	438a      	bics	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	491c      	ldr	r1, [pc, #112]	@ (8003c90 <HAL_DMA_Abort+0xbc>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2101      	movs	r1, #1
 8003c30:	438a      	bics	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <HAL_DMA_Abort+0xc0>)
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	221c      	movs	r2, #28
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2201      	movs	r2, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	4b13      	ldr	r3, [pc, #76]	@ (8003c94 <HAL_DMA_Abort+0xc0>)
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c66:	490a      	ldr	r1, [pc, #40]	@ (8003c90 <HAL_DMA_Abort+0xbc>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003c74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2225      	movs	r2, #37	@ 0x25
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2224      	movs	r2, #36	@ 0x24
 8003c82:	2100      	movs	r1, #0
 8003c84:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	fffffeff 	.word	0xfffffeff
 8003c94:	40020000 	.word	0x40020000

08003c98 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	230f      	movs	r3, #15
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2224      	movs	r2, #36	@ 0x24
 8003cac:	2100      	movs	r1, #0
 8003cae:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2224      	movs	r2, #36	@ 0x24
 8003cb4:	5c9b      	ldrb	r3, [r3, r2]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_DMA_Abort_IT+0x26>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e05e      	b.n	8003d7c <HAL_DMA_Abort_IT+0xe4>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2224      	movs	r2, #36	@ 0x24
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2225      	movs	r2, #37	@ 0x25
 8003cca:	5c9b      	ldrb	r3, [r3, r2]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003cd8:	230f      	movs	r3, #15
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e049      	b.n	8003d76 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	210e      	movs	r1, #14
 8003cee:	438a      	bics	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	438a      	bics	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	491d      	ldr	r1, [pc, #116]	@ (8003d84 <HAL_DMA_Abort_IT+0xec>)
 8003d0e:	400a      	ands	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8003d12:	4b1d      	ldr	r3, [pc, #116]	@ (8003d88 <HAL_DMA_Abort_IT+0xf0>)
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	221c      	movs	r2, #28
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <HAL_DMA_Abort_IT+0xf0>)
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	490f      	ldr	r1, [pc, #60]	@ (8003d84 <HAL_DMA_Abort_IT+0xec>)
 8003d46:	400a      	ands	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2225      	movs	r2, #37	@ 0x25
 8003d58:	2101      	movs	r1, #1
 8003d5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	@ 0x24
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	0010      	movs	r0, r2
 8003d74:	4798      	blx	r3
    }
  }
  return status;
 8003d76:	230f      	movs	r3, #15
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b004      	add	sp, #16
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fffffeff 	.word	0xfffffeff
 8003d88:	40020000 	.word	0x40020000

08003d8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003d94:	4b55      	ldr	r3, [pc, #340]	@ (8003eec <HAL_DMA_IRQHandler+0x160>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	221c      	movs	r2, #28
 8003da8:	4013      	ands	r3, r2
 8003daa:	2204      	movs	r2, #4
 8003dac:	409a      	lsls	r2, r3
 8003dae:	0013      	movs	r3, r2
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x7a>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2204      	movs	r2, #4
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d023      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d107      	bne.n	8003dda <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8003dda:	4b44      	ldr	r3, [pc, #272]	@ (8003eec <HAL_DMA_IRQHandler+0x160>)
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	221c      	movs	r2, #28
 8003de4:	4013      	ands	r3, r2
 8003de6:	2204      	movs	r2, #4
 8003de8:	409a      	lsls	r2, r3
 8003dea:	4b40      	ldr	r3, [pc, #256]	@ (8003eec <HAL_DMA_IRQHandler+0x160>)
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d100      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x6e>
 8003df8:	e073      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	0010      	movs	r0, r2
 8003e02:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e04:	e06d      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	221c      	movs	r2, #28
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2202      	movs	r2, #2
 8003e10:	409a      	lsls	r2, r3
 8003e12:	0013      	movs	r3, r2
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	d02e      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xec>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d02a      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d10b      	bne.n	8003e46 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	210a      	movs	r1, #10
 8003e3a:	438a      	bics	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2225      	movs	r2, #37	@ 0x25
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8003e46:	4b29      	ldr	r3, [pc, #164]	@ (8003eec <HAL_DMA_IRQHandler+0x160>)
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	221c      	movs	r2, #28
 8003e50:	4013      	ands	r3, r2
 8003e52:	2202      	movs	r2, #2
 8003e54:	409a      	lsls	r2, r3
 8003e56:	4b25      	ldr	r3, [pc, #148]	@ (8003eec <HAL_DMA_IRQHandler+0x160>)
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	@ 0x24
 8003e60:	2100      	movs	r1, #0
 8003e62:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d03a      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	0010      	movs	r0, r2
 8003e74:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e76:	e034      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	221c      	movs	r2, #28
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2208      	movs	r2, #8
 8003e82:	409a      	lsls	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d02b      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x158>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2208      	movs	r2, #8
 8003e90:	4013      	ands	r3, r2
 8003e92:	d027      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	210e      	movs	r1, #14
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003ea4:	4b11      	ldr	r3, [pc, #68]	@ (8003eec <HAL_DMA_IRQHandler+0x160>)
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	221c      	movs	r2, #28
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003eec <HAL_DMA_IRQHandler+0x160>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2225      	movs	r2, #37	@ 0x25
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	@ 0x24
 8003ecc:	2100      	movs	r1, #0
 8003ece:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	0010      	movs	r0, r2
 8003ee0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	46c0      	nop			@ (mov r8, r8)
}
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40020000 	.word	0x40020000

08003ef0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003f1a:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <DMA_SetConfig+0x7c>)
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	221c      	movs	r2, #28
 8003f24:	4013      	ands	r3, r2
 8003f26:	2201      	movs	r2, #1
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <DMA_SetConfig+0x7c>)
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d108      	bne.n	8003f52 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f50:	e007      	b.n	8003f62 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	60da      	str	r2, [r3, #12]
}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b004      	add	sp, #16
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	40020000 	.word	0x40020000

08003f70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	001a      	movs	r2, r3
 8003f7e:	23ff      	movs	r3, #255	@ 0xff
 8003f80:	4013      	ands	r3, r2
 8003f82:	3b08      	subs	r3, #8
 8003f84:	2114      	movs	r1, #20
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7fc f8be 	bl	8000108 <__udivsi3>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003f96:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003f98:	4694      	mov	ip, r2
 8003f9a:	4463      	add	r3, ip
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a07      	ldr	r2, [pc, #28]	@ (8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003fa8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	221c      	movs	r2, #28
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	10008200 	.word	0x10008200
 8003fc4:	40020880 	.word	0x40020880

08003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	22ff      	movs	r2, #255	@ 0xff
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fde:	4694      	mov	ip, r2
 8003fe0:	4463      	add	r3, ip
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a07      	ldr	r2, [pc, #28]	@ (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}
 8004008:	1000823f 	.word	0x1000823f
 800400c:	40020940 	.word	0x40020940

08004010 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800401e:	e153      	b.n	80042c8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4091      	lsls	r1, r2
 800402a:	000a      	movs	r2, r1
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d100      	bne.n	8004038 <HAL_GPIO_Init+0x28>
 8004036:	e144      	b.n	80042c2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x38>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b12      	cmp	r3, #18
 8004046:	d125      	bne.n	8004094 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	0092      	lsls	r2, r2, #2
 8004052:	58d3      	ldr	r3, [r2, r3]
 8004054:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2207      	movs	r2, #7
 800405a:	4013      	ands	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	409a      	lsls	r2, r3
 8004062:	0013      	movs	r3, r2
 8004064:	43da      	mvns	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	4013      	ands	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	220f      	movs	r2, #15
 8004072:	401a      	ands	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2107      	movs	r1, #7
 8004078:	400b      	ands	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	409a      	lsls	r2, r3
 800407e:	0013      	movs	r3, r2
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3208      	adds	r2, #8
 800408e:	0092      	lsls	r2, r2, #2
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	2203      	movs	r2, #3
 80040a0:	409a      	lsls	r2, r3
 80040a2:	0013      	movs	r3, r2
 80040a4:	43da      	mvns	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4013      	ands	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2203      	movs	r2, #3
 80040b2:	401a      	ands	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	0013      	movs	r3, r2
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d00b      	beq.n	80040e8 <HAL_GPIO_Init+0xd8>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d007      	beq.n	80040e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040dc:	2b11      	cmp	r3, #17
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b12      	cmp	r3, #18
 80040e6:	d130      	bne.n	800414a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2203      	movs	r2, #3
 80040f4:	409a      	lsls	r2, r3
 80040f6:	0013      	movs	r3, r2
 80040f8:	43da      	mvns	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4013      	ands	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	409a      	lsls	r2, r3
 800410a:	0013      	movs	r3, r2
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411e:	2201      	movs	r2, #1
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	409a      	lsls	r2, r3
 8004124:	0013      	movs	r3, r2
 8004126:	43da      	mvns	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4013      	ands	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	2201      	movs	r2, #1
 8004136:	401a      	ands	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4013      	ands	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	0013      	movs	r3, r2
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	2380      	movs	r3, #128	@ 0x80
 8004188:	055b      	lsls	r3, r3, #21
 800418a:	4013      	ands	r3, r2
 800418c:	d100      	bne.n	8004190 <HAL_GPIO_Init+0x180>
 800418e:	e098      	b.n	80042c2 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004190:	4a53      	ldr	r2, [pc, #332]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3318      	adds	r3, #24
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	589b      	ldr	r3, [r3, r2]
 800419c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	220f      	movs	r2, #15
 80041a8:	409a      	lsls	r2, r3
 80041aa:	0013      	movs	r3, r2
 80041ac:	43da      	mvns	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4013      	ands	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	23a0      	movs	r3, #160	@ 0xa0
 80041b8:	05db      	lsls	r3, r3, #23
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d019      	beq.n	80041f2 <HAL_GPIO_Init+0x1e2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a48      	ldr	r2, [pc, #288]	@ (80042e4 <HAL_GPIO_Init+0x2d4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_GPIO_Init+0x1de>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a47      	ldr	r2, [pc, #284]	@ (80042e8 <HAL_GPIO_Init+0x2d8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00d      	beq.n	80041ea <HAL_GPIO_Init+0x1da>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a46      	ldr	r2, [pc, #280]	@ (80042ec <HAL_GPIO_Init+0x2dc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <HAL_GPIO_Init+0x1d6>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a45      	ldr	r2, [pc, #276]	@ (80042f0 <HAL_GPIO_Init+0x2e0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_GPIO_Init+0x1d2>
 80041de:	2305      	movs	r3, #5
 80041e0:	e008      	b.n	80041f4 <HAL_GPIO_Init+0x1e4>
 80041e2:	2306      	movs	r3, #6
 80041e4:	e006      	b.n	80041f4 <HAL_GPIO_Init+0x1e4>
 80041e6:	2303      	movs	r3, #3
 80041e8:	e004      	b.n	80041f4 <HAL_GPIO_Init+0x1e4>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_Init+0x1e4>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_GPIO_Init+0x1e4>
 80041f2:	2300      	movs	r3, #0
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	2103      	movs	r1, #3
 80041f8:	400a      	ands	r2, r1
 80041fa:	00d2      	lsls	r2, r2, #3
 80041fc:	4093      	lsls	r3, r2
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004204:	4936      	ldr	r1, [pc, #216]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	089b      	lsrs	r3, r3, #2
 800420a:	3318      	adds	r3, #24
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004212:	4a33      	ldr	r2, [pc, #204]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	58d3      	ldr	r3, [r2, r3]
 8004218:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43da      	mvns	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	4013      	ands	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	2380      	movs	r3, #128	@ 0x80
 800422a:	025b      	lsls	r3, r3, #9
 800422c:	4013      	ands	r3, r2
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004238:	4929      	ldr	r1, [pc, #164]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 800423a:	2280      	movs	r2, #128	@ 0x80
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004240:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 8004242:	2384      	movs	r3, #132	@ 0x84
 8004244:	58d3      	ldr	r3, [r2, r3]
 8004246:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	43da      	mvns	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4013      	ands	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	4013      	ands	r3, r2
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004266:	491e      	ldr	r1, [pc, #120]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 8004268:	2284      	movs	r2, #132	@ 0x84
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800426e:	4b1c      	ldr	r3, [pc, #112]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	43da      	mvns	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4013      	ands	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	2380      	movs	r3, #128	@ 0x80
 8004284:	035b      	lsls	r3, r3, #13
 8004286:	4013      	ands	r3, r2
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004292:	4b13      	ldr	r3, [pc, #76]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004298:	4b11      	ldr	r3, [pc, #68]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	43da      	mvns	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4013      	ands	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	2380      	movs	r3, #128	@ 0x80
 80042ae:	039b      	lsls	r3, r3, #14
 80042b0:	4013      	ands	r3, r2
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80042bc:	4b08      	ldr	r3, [pc, #32]	@ (80042e0 <HAL_GPIO_Init+0x2d0>)
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	40da      	lsrs	r2, r3
 80042d0:	1e13      	subs	r3, r2, #0
 80042d2:	d000      	beq.n	80042d6 <HAL_GPIO_Init+0x2c6>
 80042d4:	e6a4      	b.n	8004020 <HAL_GPIO_Init+0x10>
  }
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	46c0      	nop			@ (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b006      	add	sp, #24
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021800 	.word	0x40021800
 80042e4:	50000400 	.word	0x50000400
 80042e8:	50000800 	.word	0x50000800
 80042ec:	50000c00 	.word	0x50000c00
 80042f0:	50001400 	.word	0x50001400

080042f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	0008      	movs	r0, r1
 80042fe:	0011      	movs	r1, r2
 8004300:	1cbb      	adds	r3, r7, #2
 8004302:	1c02      	adds	r2, r0, #0
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	1c7b      	adds	r3, r7, #1
 8004308:	1c0a      	adds	r2, r1, #0
 800430a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800430c:	1c7b      	adds	r3, r7, #1
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004314:	1cbb      	adds	r3, r7, #2
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800431c:	e003      	b.n	8004326 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800431e:	1cbb      	adds	r3, r7, #2
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	000a      	movs	r2, r1
 8004338:	1cbb      	adds	r3, r7, #2
 800433a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004342:	1cbb      	adds	r3, r7, #2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4013      	ands	r3, r2
 800434a:	041a      	lsls	r2, r3, #16
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43db      	mvns	r3, r3
 8004350:	1cb9      	adds	r1, r7, #2
 8004352:	8809      	ldrh	r1, [r1, #0]
 8004354:	400b      	ands	r3, r1
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	619a      	str	r2, [r3, #24]
}
 800435c:	46c0      	nop			@ (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b004      	add	sp, #16
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e08f      	b.n	8004496 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2241      	movs	r2, #65	@ 0x41
 800437a:	5c9b      	ldrb	r3, [r3, r2]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2240      	movs	r2, #64	@ 0x40
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0018      	movs	r0, r3
 800438e:	f7fe f88d 	bl	80024ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2241      	movs	r2, #65	@ 0x41
 8004396:	2124      	movs	r1, #36	@ 0x24
 8004398:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	438a      	bics	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	493b      	ldr	r1, [pc, #236]	@ (80044a0 <HAL_I2C_Init+0x13c>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4938      	ldr	r1, [pc, #224]	@ (80044a4 <HAL_I2C_Init+0x140>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d108      	bne.n	80043e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2180      	movs	r1, #128	@ 0x80
 80043da:	0209      	lsls	r1, r1, #8
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	e007      	b.n	80043f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2184      	movs	r1, #132	@ 0x84
 80043ec:	0209      	lsls	r1, r1, #8
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d109      	bne.n	800440e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2180      	movs	r1, #128	@ 0x80
 8004406:	0109      	lsls	r1, r1, #4
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	e007      	b.n	800441e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4923      	ldr	r1, [pc, #140]	@ (80044a8 <HAL_I2C_Init+0x144>)
 800441a:	400a      	ands	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4920      	ldr	r1, [pc, #128]	@ (80044ac <HAL_I2C_Init+0x148>)
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	491a      	ldr	r1, [pc, #104]	@ (80044a4 <HAL_I2C_Init+0x140>)
 800443a:	400a      	ands	r2, r1
 800443c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1a      	ldr	r2, [r3, #32]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2241      	movs	r2, #65	@ 0x41
 8004482:	2120      	movs	r1, #32
 8004484:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2242      	movs	r2, #66	@ 0x42
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	f0ffffff 	.word	0xf0ffffff
 80044a4:	ffff7fff 	.word	0xffff7fff
 80044a8:	fffff7ff 	.word	0xfffff7ff
 80044ac:	02008000 	.word	0x02008000

080044b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2241      	movs	r2, #65	@ 0x41
 80044be:	5c9b      	ldrb	r3, [r3, r2]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d138      	bne.n	8004538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2240      	movs	r2, #64	@ 0x40
 80044ca:	5c9b      	ldrb	r3, [r3, r2]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e032      	b.n	800453a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2240      	movs	r2, #64	@ 0x40
 80044d8:	2101      	movs	r1, #1
 80044da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2241      	movs	r2, #65	@ 0x41
 80044e0:	2124      	movs	r1, #36	@ 0x24
 80044e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	438a      	bics	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4911      	ldr	r1, [pc, #68]	@ (8004544 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004500:	400a      	ands	r2, r1
 8004502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2101      	movs	r1, #1
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2241      	movs	r2, #65	@ 0x41
 8004528:	2120      	movs	r1, #32
 800452a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2240      	movs	r2, #64	@ 0x40
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b002      	add	sp, #8
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	ffffefff 	.word	0xffffefff

08004548 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2241      	movs	r2, #65	@ 0x41
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d139      	bne.n	80045d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2240      	movs	r2, #64	@ 0x40
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004568:	2302      	movs	r3, #2
 800456a:	e033      	b.n	80045d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2240      	movs	r2, #64	@ 0x40
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2241      	movs	r2, #65	@ 0x41
 8004578:	2124      	movs	r1, #36	@ 0x24
 800457a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2101      	movs	r1, #1
 8004588:	438a      	bics	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a11      	ldr	r2, [pc, #68]	@ (80045dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2241      	movs	r2, #65	@ 0x41
 80045c2:	2120      	movs	r1, #32
 80045c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2240      	movs	r2, #64	@ 0x40
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	fffff0ff 	.word	0xfffff0ff

080045e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e20f      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d100      	bne.n	80045fe <HAL_RCC_OscConfig+0x1e>
 80045fc:	e069      	b.n	80046d2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fe:	4bc8      	ldr	r3, [pc, #800]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2238      	movs	r2, #56	@ 0x38
 8004604:	4013      	ands	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d15d      	bne.n	80046d2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e1fb      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	2380      	movs	r3, #128	@ 0x80
 8004620:	025b      	lsls	r3, r3, #9
 8004622:	429a      	cmp	r2, r3
 8004624:	d107      	bne.n	8004636 <HAL_RCC_OscConfig+0x56>
 8004626:	4bbe      	ldr	r3, [pc, #760]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4bbd      	ldr	r3, [pc, #756]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800462c:	2180      	movs	r1, #128	@ 0x80
 800462e:	0249      	lsls	r1, r1, #9
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e020      	b.n	8004678 <HAL_RCC_OscConfig+0x98>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	23a0      	movs	r3, #160	@ 0xa0
 800463c:	02db      	lsls	r3, r3, #11
 800463e:	429a      	cmp	r2, r3
 8004640:	d10e      	bne.n	8004660 <HAL_RCC_OscConfig+0x80>
 8004642:	4bb7      	ldr	r3, [pc, #732]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4bb6      	ldr	r3, [pc, #728]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004648:	2180      	movs	r1, #128	@ 0x80
 800464a:	02c9      	lsls	r1, r1, #11
 800464c:	430a      	orrs	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	4bb3      	ldr	r3, [pc, #716]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4bb2      	ldr	r3, [pc, #712]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004656:	2180      	movs	r1, #128	@ 0x80
 8004658:	0249      	lsls	r1, r1, #9
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0x98>
 8004660:	4baf      	ldr	r3, [pc, #700]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4bae      	ldr	r3, [pc, #696]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004666:	49af      	ldr	r1, [pc, #700]	@ (8004924 <HAL_RCC_OscConfig+0x344>)
 8004668:	400a      	ands	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	4bac      	ldr	r3, [pc, #688]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4bab      	ldr	r3, [pc, #684]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004672:	49ad      	ldr	r1, [pc, #692]	@ (8004928 <HAL_RCC_OscConfig+0x348>)
 8004674:	400a      	ands	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d014      	beq.n	80046aa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fe fa40 	bl	8002b04 <HAL_GetTick>
 8004684:	0003      	movs	r3, r0
 8004686:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800468a:	f7fe fa3b 	bl	8002b04 <HAL_GetTick>
 800468e:	0002      	movs	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	@ 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1ba      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469c:	4ba0      	ldr	r3, [pc, #640]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	4013      	ands	r3, r2
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0xaa>
 80046a8:	e013      	b.n	80046d2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fe fa2b 	bl	8002b04 <HAL_GetTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80046b4:	f7fe fa26 	bl	8002b04 <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	@ 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e1a5      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c6:	4b96      	ldr	r3, [pc, #600]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	2380      	movs	r3, #128	@ 0x80
 80046cc:	029b      	lsls	r3, r3, #10
 80046ce:	4013      	ands	r3, r2
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d100      	bne.n	80046de <HAL_RCC_OscConfig+0xfe>
 80046dc:	e086      	b.n	80047ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046de:	4b90      	ldr	r3, [pc, #576]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2238      	movs	r2, #56	@ 0x38
 80046e4:	4013      	ands	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d12f      	bne.n	800474e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e18b      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fa:	4b89      	ldr	r3, [pc, #548]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4a8b      	ldr	r2, [pc, #556]	@ (800492c <HAL_RCC_OscConfig+0x34c>)
 8004700:	4013      	ands	r3, r2
 8004702:	0019      	movs	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	021a      	lsls	r2, r3, #8
 800470a:	4b85      	ldr	r3, [pc, #532]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d112      	bne.n	800473c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004716:	4b82      	ldr	r3, [pc, #520]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a85      	ldr	r2, [pc, #532]	@ (8004930 <HAL_RCC_OscConfig+0x350>)
 800471c:	4013      	ands	r3, r2
 800471e:	0019      	movs	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	4b7e      	ldr	r3, [pc, #504]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800472a:	4b7d      	ldr	r3, [pc, #500]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	0adb      	lsrs	r3, r3, #11
 8004730:	2207      	movs	r2, #7
 8004732:	4013      	ands	r3, r2
 8004734:	4a7f      	ldr	r2, [pc, #508]	@ (8004934 <HAL_RCC_OscConfig+0x354>)
 8004736:	40da      	lsrs	r2, r3
 8004738:	4b7f      	ldr	r3, [pc, #508]	@ (8004938 <HAL_RCC_OscConfig+0x358>)
 800473a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800473c:	4b7f      	ldr	r3, [pc, #508]	@ (800493c <HAL_RCC_OscConfig+0x35c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0018      	movs	r0, r3
 8004742:	f7fe f983 	bl	8002a4c <HAL_InitTick>
 8004746:	1e03      	subs	r3, r0, #0
 8004748:	d050      	beq.n	80047ec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e161      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d030      	beq.n	80047b8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004756:	4b72      	ldr	r3, [pc, #456]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a75      	ldr	r2, [pc, #468]	@ (8004930 <HAL_RCC_OscConfig+0x350>)
 800475c:	4013      	ands	r3, r2
 800475e:	0019      	movs	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	4b6e      	ldr	r3, [pc, #440]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800476a:	4b6d      	ldr	r3, [pc, #436]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b6c      	ldr	r3, [pc, #432]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004770:	2180      	movs	r1, #128	@ 0x80
 8004772:	0049      	lsls	r1, r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe f9c4 	bl	8002b04 <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004782:	f7fe f9bf 	bl	8002b04 <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e13e      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004794:	4b62      	ldr	r3, [pc, #392]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2380      	movs	r3, #128	@ 0x80
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4013      	ands	r3, r2
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a0:	4b5f      	ldr	r3, [pc, #380]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a61      	ldr	r2, [pc, #388]	@ (800492c <HAL_RCC_OscConfig+0x34c>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	021a      	lsls	r2, r3, #8
 80047b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	e019      	b.n	80047ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80047b8:	4b59      	ldr	r3, [pc, #356]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b58      	ldr	r3, [pc, #352]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80047be:	4960      	ldr	r1, [pc, #384]	@ (8004940 <HAL_RCC_OscConfig+0x360>)
 80047c0:	400a      	ands	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fe f99e 	bl	8002b04 <HAL_GetTick>
 80047c8:	0003      	movs	r3, r0
 80047ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80047ce:	f7fe f999 	bl	8002b04 <HAL_GetTick>
 80047d2:	0002      	movs	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e118      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	2380      	movs	r3, #128	@ 0x80
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4013      	ands	r3, r2
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2208      	movs	r2, #8
 80047f2:	4013      	ands	r3, r2
 80047f4:	d042      	beq.n	800487c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80047f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2238      	movs	r2, #56	@ 0x38
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b18      	cmp	r3, #24
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d138      	bne.n	800487c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e101      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004816:	4b42      	ldr	r3, [pc, #264]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004818:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800481a:	4b41      	ldr	r3, [pc, #260]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800481c:	2101      	movs	r1, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fe f96f 	bl	8002b04 <HAL_GetTick>
 8004826:	0003      	movs	r3, r0
 8004828:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800482c:	f7fe f96a 	bl	8002b04 <HAL_GetTick>
 8004830:	0002      	movs	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0e9      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800483e:	4b38      	ldr	r3, [pc, #224]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004842:	2202      	movs	r2, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d0f1      	beq.n	800482c <HAL_RCC_OscConfig+0x24c>
 8004848:	e018      	b.n	800487c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800484a:	4b35      	ldr	r3, [pc, #212]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 800484c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800484e:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004850:	2101      	movs	r1, #1
 8004852:	438a      	bics	r2, r1
 8004854:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fe f955 	bl	8002b04 <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004860:	f7fe f950 	bl	8002b04 <HAL_GetTick>
 8004864:	0002      	movs	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0cf      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004872:	4b2b      	ldr	r3, [pc, #172]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	d1f1      	bne.n	8004860 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2204      	movs	r2, #4
 8004882:	4013      	ands	r3, r2
 8004884:	d100      	bne.n	8004888 <HAL_RCC_OscConfig+0x2a8>
 8004886:	e084      	b.n	8004992 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004888:	230f      	movs	r3, #15
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004890:	4b23      	ldr	r3, [pc, #140]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2238      	movs	r2, #56	@ 0x38
 8004896:	4013      	ands	r3, r2
 8004898:	2b20      	cmp	r3, #32
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d000      	beq.n	80048a6 <HAL_RCC_OscConfig+0x2c6>
 80048a4:	e075      	b.n	8004992 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0b3      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x2e0>
 80048b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048b8:	2101      	movs	r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048be:	e01c      	b.n	80048fa <HAL_RCC_OscConfig+0x31a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d10c      	bne.n	80048e2 <HAL_RCC_OscConfig+0x302>
 80048c8:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048cc:	4b14      	ldr	r3, [pc, #80]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048ce:	2104      	movs	r1, #4
 80048d0:	430a      	orrs	r2, r1
 80048d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048d4:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048d8:	4b11      	ldr	r3, [pc, #68]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048da:	2101      	movs	r1, #1
 80048dc:	430a      	orrs	r2, r1
 80048de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048e0:	e00b      	b.n	80048fa <HAL_RCC_OscConfig+0x31a>
 80048e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048e8:	2101      	movs	r1, #1
 80048ea:	438a      	bics	r2, r1
 80048ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <HAL_RCC_OscConfig+0x340>)
 80048f4:	2104      	movs	r1, #4
 80048f6:	438a      	bics	r2, r1
 80048f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d028      	beq.n	8004954 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fe f8ff 	bl	8002b04 <HAL_GetTick>
 8004906:	0003      	movs	r3, r0
 8004908:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800490a:	e01d      	b.n	8004948 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fe f8fa 	bl	8002b04 <HAL_GetTick>
 8004910:	0002      	movs	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	4a0b      	ldr	r2, [pc, #44]	@ (8004944 <HAL_RCC_OscConfig+0x364>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d915      	bls.n	8004948 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e078      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
 8004920:	40021000 	.word	0x40021000
 8004924:	fffeffff 	.word	0xfffeffff
 8004928:	fffbffff 	.word	0xfffbffff
 800492c:	ffff80ff 	.word	0xffff80ff
 8004930:	ffffc7ff 	.word	0xffffc7ff
 8004934:	02dc6c00 	.word	0x02dc6c00
 8004938:	20000078 	.word	0x20000078
 800493c:	2000007c 	.word	0x2000007c
 8004940:	fffffeff 	.word	0xfffffeff
 8004944:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004948:	4b34      	ldr	r3, [pc, #208]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 800494a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494c:	2202      	movs	r2, #2
 800494e:	4013      	ands	r3, r2
 8004950:	d0dc      	beq.n	800490c <HAL_RCC_OscConfig+0x32c>
 8004952:	e013      	b.n	800497c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fe f8d6 	bl	8002b04 <HAL_GetTick>
 8004958:	0003      	movs	r3, r0
 800495a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800495c:	e009      	b.n	8004972 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fe f8d1 	bl	8002b04 <HAL_GetTick>
 8004962:	0002      	movs	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	4a2d      	ldr	r2, [pc, #180]	@ (8004a20 <HAL_RCC_OscConfig+0x440>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e04f      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004972:	4b2a      	ldr	r3, [pc, #168]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 8004974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004976:	2202      	movs	r2, #2
 8004978:	4013      	ands	r3, r2
 800497a:	d1f0      	bne.n	800495e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800497c:	230f      	movs	r3, #15
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b25      	ldr	r3, [pc, #148]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 8004988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800498a:	4b24      	ldr	r3, [pc, #144]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 800498c:	4925      	ldr	r1, [pc, #148]	@ (8004a24 <HAL_RCC_OscConfig+0x444>)
 800498e:	400a      	ands	r2, r1
 8004990:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2210      	movs	r2, #16
 8004998:	4013      	ands	r3, r2
 800499a:	d039      	beq.n	8004a10 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049a4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 80049aa:	2180      	movs	r1, #128	@ 0x80
 80049ac:	03c9      	lsls	r1, r1, #15
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fe f8a7 	bl	8002b04 <HAL_GetTick>
 80049b6:	0003      	movs	r3, r0
 80049b8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049bc:	f7fe f8a2 	bl	8002b04 <HAL_GetTick>
 80049c0:	0002      	movs	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e021      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80049ce:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	4013      	ands	r3, r2
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x3dc>
 80049da:	e019      	b.n	8004a10 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049dc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 80049e2:	4911      	ldr	r1, [pc, #68]	@ (8004a28 <HAL_RCC_OscConfig+0x448>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fe f88c 	bl	8002b04 <HAL_GetTick>
 80049ec:	0003      	movs	r3, r0
 80049ee:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f2:	f7fe f887 	bl	8002b04 <HAL_GetTick>
 80049f6:	0002      	movs	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <HAL_RCC_OscConfig+0x43c>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	041b      	lsls	r3, r3, #16
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b006      	add	sp, #24
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	00001388 	.word	0x00001388
 8004a24:	efffffff 	.word	0xefffffff
 8004a28:	ffbfffff 	.word	0xffbfffff

08004a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0f6      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b7d      	ldr	r3, [pc, #500]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2207      	movs	r2, #7
 8004a46:	4013      	ands	r3, r2
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d91e      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2207      	movs	r2, #7
 8004a54:	4393      	bics	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	4b77      	ldr	r3, [pc, #476]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a60:	f7fe f850 	bl	8002b04 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a68:	e009      	b.n	8004a7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6a:	f7fe f84b 	bl	8002b04 <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	4a71      	ldr	r2, [pc, #452]	@ (8004c3c <HAL_RCC_ClockConfig+0x210>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0d7      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2207      	movs	r2, #7
 8004a84:	4013      	ands	r3, r2
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d017      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004aa0:	4b67      	ldr	r3, [pc, #412]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a67      	ldr	r2, [pc, #412]	@ (8004c44 <HAL_RCC_ClockConfig+0x218>)
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004aaa:	21b0      	movs	r1, #176	@ 0xb0
 8004aac:	0109      	lsls	r1, r1, #4
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab2:	4b63      	ldr	r3, [pc, #396]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a64      	ldr	r2, [pc, #400]	@ (8004c48 <HAL_RCC_ClockConfig+0x21c>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2201      	movs	r2, #1
 8004acc:	4013      	ands	r3, r2
 8004ace:	d100      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xa6>
 8004ad0:	e061      	b.n	8004b96 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	221c      	movs	r2, #28
 8004ad8:	4393      	bics	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b57      	ldr	r3, [pc, #348]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aee:	4b54      	ldr	r3, [pc, #336]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	2380      	movs	r3, #128	@ 0x80
 8004af4:	029b      	lsls	r3, r3, #10
 8004af6:	4013      	ands	r3, r2
 8004af8:	d12b      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e097      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b06:	4b4e      	ldr	r3, [pc, #312]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d11f      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e08b      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004b1e:	4b48      	ldr	r3, [pc, #288]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	4013      	ands	r3, r2
 8004b28:	d113      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d106      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004b36:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d108      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e074      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004b44:	4b3e      	ldr	r3, [pc, #248]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	2202      	movs	r2, #2
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e06d      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b3b      	ldr	r3, [pc, #236]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2207      	movs	r2, #7
 8004b58:	4393      	bics	r3, r2
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4b37      	ldr	r3, [pc, #220]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b66:	f7fd ffcd 	bl	8002b04 <HAL_GetTick>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	e009      	b.n	8004b84 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b70:	f7fd ffc8 	bl	8002b04 <HAL_GetTick>
 8004b74:	0002      	movs	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	4a30      	ldr	r2, [pc, #192]	@ (8004c3c <HAL_RCC_ClockConfig+0x210>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e054      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b84:	4b2e      	ldr	r3, [pc, #184]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2238      	movs	r2, #56	@ 0x38
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d1ec      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b96:	4b28      	ldr	r3, [pc, #160]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2207      	movs	r2, #7
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d21e      	bcs.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba4:	4b24      	ldr	r3, [pc, #144]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2207      	movs	r2, #7
 8004baa:	4393      	bics	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	4b22      	ldr	r3, [pc, #136]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bb6:	f7fd ffa5 	bl	8002b04 <HAL_GetTick>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bbe:	e009      	b.n	8004bd4 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc0:	f7fd ffa0 	bl	8002b04 <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	4a1c      	ldr	r2, [pc, #112]	@ (8004c3c <HAL_RCC_ClockConfig+0x210>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e02c      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bd4:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <HAL_RCC_ClockConfig+0x20c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2207      	movs	r2, #7
 8004bda:	4013      	ands	r3, r2
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d1ee      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2204      	movs	r2, #4
 8004be8:	4013      	ands	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004bec:	4b14      	ldr	r3, [pc, #80]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a16      	ldr	r2, [pc, #88]	@ (8004c4c <HAL_RCC_ClockConfig+0x220>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c00:	f000 f82c 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 8004c04:	0001      	movs	r1, r0
 8004c06:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <HAL_RCC_ClockConfig+0x214>)
 8004c08:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	220f      	movs	r2, #15
 8004c0e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c10:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <HAL_RCC_ClockConfig+0x224>)
 8004c12:	0092      	lsls	r2, r2, #2
 8004c14:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c16:	221f      	movs	r2, #31
 8004c18:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c1a:	000a      	movs	r2, r1
 8004c1c:	40da      	lsrs	r2, r3
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <HAL_RCC_ClockConfig+0x228>)
 8004c20:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c22:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <HAL_RCC_ClockConfig+0x22c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f7fd ff10 	bl	8002a4c <HAL_InitTick>
 8004c2c:	0003      	movs	r3, r0
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	00001388 	.word	0x00001388
 8004c40:	40021000 	.word	0x40021000
 8004c44:	ffff84ff 	.word	0xffff84ff
 8004c48:	fffff0ff 	.word	0xfffff0ff
 8004c4c:	ffff8fff 	.word	0xffff8fff
 8004c50:	08008500 	.word	0x08008500
 8004c54:	20000078 	.word	0x20000078
 8004c58:	2000007c 	.word	0x2000007c

08004c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8004c62:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	2207      	movs	r2, #7
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c70:	4b23      	ldr	r3, [pc, #140]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2238      	movs	r2, #56	@ 0x38
 8004c76:	4013      	ands	r3, r2
 8004c78:	d10f      	bne.n	8004c9a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004c7a:	4b21      	ldr	r3, [pc, #132]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	0adb      	lsrs	r3, r3, #11
 8004c80:	2207      	movs	r2, #7
 8004c82:	4013      	ands	r3, r2
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	0013      	movs	r3, r2
 8004c8a:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	481d      	ldr	r0, [pc, #116]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004c90:	f7fb fa3a 	bl	8000108 <__udivsi3>
 8004c94:	0003      	movs	r3, r0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e027      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c9a:	4b19      	ldr	r3, [pc, #100]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2238      	movs	r2, #56	@ 0x38
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d102      	bne.n	8004cac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ca6:	4b18      	ldr	r3, [pc, #96]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e01e      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004cac:	4b14      	ldr	r3, [pc, #80]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2238      	movs	r2, #56	@ 0x38
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d103      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e014      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2238      	movs	r2, #56	@ 0x38
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b18      	cmp	r3, #24
 8004cca:	d103      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ccc:	23fa      	movs	r3, #250	@ 0xfa
 8004cce:	01db      	lsls	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2238      	movs	r2, #56	@ 0x38
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d102      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8004ce0:	4b08      	ldr	r3, [pc, #32]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e001      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7fb fa0b 	bl	8000108 <__udivsi3>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b004      	add	sp, #16
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000
 8004d04:	02dc6c00 	.word	0x02dc6c00
 8004d08:	007a1200 	.word	0x007a1200

08004d0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d10:	f7ff ffa4 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 8004d14:	0001      	movs	r1, r0
 8004d16:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <HAL_RCC_GetHCLKFreq+0x30>)
 8004d18:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	220f      	movs	r2, #15
 8004d1e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <HAL_RCC_GetHCLKFreq+0x34>)
 8004d22:	0092      	lsls	r2, r2, #2
 8004d24:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004d26:	221f      	movs	r2, #31
 8004d28:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d2a:	000a      	movs	r2, r1
 8004d2c:	40da      	lsrs	r2, r3
 8004d2e:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCC_GetHCLKFreq+0x38>)
 8004d30:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004d32:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <HAL_RCC_GetHCLKFreq+0x38>)
 8004d34:	681b      	ldr	r3, [r3, #0]
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	08008500 	.word	0x08008500
 8004d44:	20000078 	.word	0x20000078

08004d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004d4c:	f7ff ffde 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d50:	0001      	movs	r1, r0
 8004d52:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0b1b      	lsrs	r3, r3, #12
 8004d58:	2207      	movs	r2, #7
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	58d3      	ldr	r3, [r2, r3]
 8004d62:	221f      	movs	r2, #31
 8004d64:	4013      	ands	r3, r2
 8004d66:	40d9      	lsrs	r1, r3
 8004d68:	000b      	movs	r3, r1
}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40021000 	.word	0x40021000
 8004d74:	08008540 	.word	0x08008540

08004d78 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004d80:	2313      	movs	r3, #19
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d88:	2312      	movs	r3, #18
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2240      	movs	r2, #64	@ 0x40
 8004d96:	4013      	ands	r3, r2
 8004d98:	d100      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004d9a:	e079      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9c:	2011      	movs	r0, #17
 8004d9e:	183b      	adds	r3, r7, r0
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da8:	2380      	movs	r3, #128	@ 0x80
 8004daa:	055b      	lsls	r3, r3, #21
 8004dac:	4013      	ands	r3, r2
 8004dae:	d110      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db0:	4b67      	ldr	r3, [pc, #412]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db4:	4b66      	ldr	r3, [pc, #408]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004db6:	2180      	movs	r1, #128	@ 0x80
 8004db8:	0549      	lsls	r1, r1, #21
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004dbe:	4b64      	ldr	r3, [pc, #400]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dc2:	2380      	movs	r3, #128	@ 0x80
 8004dc4:	055b      	lsls	r3, r3, #21
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dcc:	183b      	adds	r3, r7, r0
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dd6:	23c0      	movs	r3, #192	@ 0xc0
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4013      	ands	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d019      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d014      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004dee:	4b58      	ldr	r3, [pc, #352]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	4a58      	ldr	r2, [pc, #352]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004df8:	4b55      	ldr	r3, [pc, #340]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dfc:	4b54      	ldr	r3, [pc, #336]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dfe:	2180      	movs	r1, #128	@ 0x80
 8004e00:	0249      	lsls	r1, r1, #9
 8004e02:	430a      	orrs	r2, r1
 8004e04:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e06:	4b52      	ldr	r3, [pc, #328]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e0a:	4b51      	ldr	r3, [pc, #324]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e0c:	4952      	ldr	r1, [pc, #328]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e0e:	400a      	ands	r2, r1
 8004e10:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004e12:	4b4f      	ldr	r3, [pc, #316]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d016      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fd fe70 	bl	8002b04 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e28:	e00c      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fd fe6b 	bl	8002b04 <HAL_GetTick>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	4a49      	ldr	r2, [pc, #292]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d904      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8004e3a:	2313      	movs	r3, #19
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2203      	movs	r2, #3
 8004e40:	701a      	strb	r2, [r3, #0]
          break;
 8004e42:	e004      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e44:	4b42      	ldr	r3, [pc, #264]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	2202      	movs	r2, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d0ed      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8004e4e:	2313      	movs	r3, #19
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e58:	4b3d      	ldr	r3, [pc, #244]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	4b3a      	ldr	r3, [pc, #232]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e6c:	e005      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	2312      	movs	r3, #18
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	2213      	movs	r2, #19
 8004e74:	18ba      	adds	r2, r7, r2
 8004e76:	7812      	ldrb	r2, [r2, #0]
 8004e78:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e7a:	2311      	movs	r3, #17
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e84:	4b32      	ldr	r3, [pc, #200]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e88:	4b31      	ldr	r3, [pc, #196]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e8a:	4935      	ldr	r1, [pc, #212]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004e8c:	400a      	ands	r2, r1
 8004e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2201      	movs	r2, #1
 8004e96:	4013      	ands	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	4393      	bics	r3, r2
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	4b29      	ldr	r3, [pc, #164]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb8:	4b25      	ldr	r3, [pc, #148]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebc:	4a29      	ldr	r2, [pc, #164]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	4b22      	ldr	r3, [pc, #136]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d008      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	0899      	lsrs	r1, r3, #2
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2208      	movs	r2, #8
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef2:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	4b13      	ldr	r3, [pc, #76]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f10:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	4a15      	ldr	r2, [pc, #84]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	0019      	movs	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2280      	movs	r2, #128	@ 0x80
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	22e0      	movs	r2, #224	@ 0xe0
 8004f34:	4393      	bics	r3, r2
 8004f36:	0019      	movs	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004f42:	2312      	movs	r3, #18
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	781b      	ldrb	r3, [r3, #0]
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b006      	add	sp, #24
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	fffffcff 	.word	0xfffffcff
 8004f58:	fffeffff 	.word	0xfffeffff
 8004f5c:	00001388 	.word	0x00001388
 8004f60:	efffffff 	.word	0xefffffff
 8004f64:	ffffcfff 	.word	0xffffcfff
 8004f68:	ffffefff 	.word	0xffffefff
 8004f6c:	ffff3fff 	.word	0xffff3fff

08004f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0a8      	b.n	80050d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	2382      	movs	r3, #130	@ 0x82
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d009      	beq.n	8004faa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	61da      	str	r2, [r3, #28]
 8004f9c:	e005      	b.n	8004faa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	225d      	movs	r2, #93	@ 0x5d
 8004fb4:	5c9b      	ldrb	r3, [r3, r2]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	225c      	movs	r2, #92	@ 0x5c
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7fd fafe 	bl	80025c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	225d      	movs	r2, #93	@ 0x5d
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2140      	movs	r1, #64	@ 0x40
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	23e0      	movs	r3, #224	@ 0xe0
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e002      	b.n	8004ffc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ff6:	2380      	movs	r3, #128	@ 0x80
 8004ff8:	015b      	lsls	r3, r3, #5
 8004ffa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	23f0      	movs	r3, #240	@ 0xf0
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	429a      	cmp	r2, r3
 8005006:	d008      	beq.n	800501a <HAL_SPI_Init+0xaa>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	23e0      	movs	r3, #224	@ 0xe0
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	429a      	cmp	r2, r3
 8005012:	d002      	beq.n	800501a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	2382      	movs	r3, #130	@ 0x82
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	401a      	ands	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6899      	ldr	r1, [r3, #8]
 8005028:	2384      	movs	r3, #132	@ 0x84
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	400b      	ands	r3, r1
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2102      	movs	r1, #2
 8005036:	400b      	ands	r3, r1
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2101      	movs	r1, #1
 8005040:	400b      	ands	r3, r1
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6999      	ldr	r1, [r3, #24]
 8005048:	2380      	movs	r3, #128	@ 0x80
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	400b      	ands	r3, r1
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	2138      	movs	r1, #56	@ 0x38
 8005056:	400b      	ands	r3, r1
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	400b      	ands	r3, r1
 8005062:	431a      	orrs	r2, r3
 8005064:	0011      	movs	r1, r2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	401a      	ands	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	2204      	movs	r2, #4
 8005080:	401a      	ands	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	2110      	movs	r1, #16
 8005088:	400b      	ands	r3, r1
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005090:	2108      	movs	r1, #8
 8005092:	400b      	ands	r3, r1
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68d9      	ldr	r1, [r3, #12]
 800509a:	23f0      	movs	r3, #240	@ 0xf0
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	400b      	ands	r3, r1
 80050a0:	431a      	orrs	r2, r3
 80050a2:	0011      	movs	r1, r2
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	2380      	movs	r3, #128	@ 0x80
 80050a8:	015b      	lsls	r3, r3, #5
 80050aa:	401a      	ands	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4907      	ldr	r1, [pc, #28]	@ (80050dc <HAL_SPI_Init+0x16c>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	225d      	movs	r2, #93	@ 0x5d
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b004      	add	sp, #16
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	fffff7ff 	.word	0xfffff7ff

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e04a      	b.n	8005188 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	223d      	movs	r2, #61	@ 0x3d
 80050f6:	5c9b      	ldrb	r3, [r3, r2]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	223c      	movs	r2, #60	@ 0x3c
 8005102:	2100      	movs	r1, #0
 8005104:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f7fd fb03 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	223d      	movs	r2, #61	@ 0x3d
 8005112:	2102      	movs	r1, #2
 8005114:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	0019      	movs	r1, r3
 8005120:	0010      	movs	r0, r2
 8005122:	f000 fa6b 	bl	80055fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2248      	movs	r2, #72	@ 0x48
 800512a:	2101      	movs	r1, #1
 800512c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	223e      	movs	r2, #62	@ 0x3e
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	223f      	movs	r2, #63	@ 0x3f
 800513a:	2101      	movs	r1, #1
 800513c:	5499      	strb	r1, [r3, r2]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2240      	movs	r2, #64	@ 0x40
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2241      	movs	r2, #65	@ 0x41
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2242      	movs	r2, #66	@ 0x42
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2243      	movs	r2, #67	@ 0x43
 800515a:	2101      	movs	r1, #1
 800515c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2244      	movs	r2, #68	@ 0x44
 8005162:	2101      	movs	r1, #1
 8005164:	5499      	strb	r1, [r3, r2]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2245      	movs	r2, #69	@ 0x45
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2246      	movs	r2, #70	@ 0x46
 8005172:	2101      	movs	r1, #1
 8005174:	5499      	strb	r1, [r3, r2]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2247      	movs	r2, #71	@ 0x47
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	223d      	movs	r2, #61	@ 0x3d
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	0018      	movs	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	b002      	add	sp, #8
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e04a      	b.n	8005238 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	223d      	movs	r2, #61	@ 0x3d
 80051a6:	5c9b      	ldrb	r3, [r3, r2]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d107      	bne.n	80051be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	223c      	movs	r2, #60	@ 0x3c
 80051b2:	2100      	movs	r1, #0
 80051b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	0018      	movs	r0, r3
 80051ba:	f7fd fa8b 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	223d      	movs	r2, #61	@ 0x3d
 80051c2:	2102      	movs	r1, #2
 80051c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	0019      	movs	r1, r3
 80051d0:	0010      	movs	r0, r2
 80051d2:	f000 fa13 	bl	80055fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2248      	movs	r2, #72	@ 0x48
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	223e      	movs	r2, #62	@ 0x3e
 80051e2:	2101      	movs	r1, #1
 80051e4:	5499      	strb	r1, [r3, r2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	223f      	movs	r2, #63	@ 0x3f
 80051ea:	2101      	movs	r1, #1
 80051ec:	5499      	strb	r1, [r3, r2]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2240      	movs	r2, #64	@ 0x40
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2241      	movs	r2, #65	@ 0x41
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2242      	movs	r2, #66	@ 0x42
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2243      	movs	r2, #67	@ 0x43
 800520a:	2101      	movs	r1, #1
 800520c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2244      	movs	r2, #68	@ 0x44
 8005212:	2101      	movs	r1, #1
 8005214:	5499      	strb	r1, [r3, r2]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2245      	movs	r2, #69	@ 0x45
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2246      	movs	r2, #70	@ 0x46
 8005222:	2101      	movs	r1, #1
 8005224:	5499      	strb	r1, [r3, r2]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2247      	movs	r2, #71	@ 0x47
 800522a:	2101      	movs	r1, #1
 800522c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	223d      	movs	r2, #61	@ 0x3d
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b002      	add	sp, #8
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <HAL_TIM_PWM_Start+0x22>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	223e      	movs	r2, #62	@ 0x3e
 8005254:	5c9b      	ldrb	r3, [r3, r2]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	4193      	sbcs	r3, r2
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e037      	b.n	80052d2 <HAL_TIM_PWM_Start+0x92>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d108      	bne.n	800527a <HAL_TIM_PWM_Start+0x3a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	223f      	movs	r2, #63	@ 0x3f
 800526c:	5c9b      	ldrb	r3, [r3, r2]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	1e5a      	subs	r2, r3, #1
 8005274:	4193      	sbcs	r3, r2
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e02b      	b.n	80052d2 <HAL_TIM_PWM_Start+0x92>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d108      	bne.n	8005292 <HAL_TIM_PWM_Start+0x52>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2240      	movs	r2, #64	@ 0x40
 8005284:	5c9b      	ldrb	r3, [r3, r2]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	1e5a      	subs	r2, r3, #1
 800528c:	4193      	sbcs	r3, r2
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e01f      	b.n	80052d2 <HAL_TIM_PWM_Start+0x92>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	d108      	bne.n	80052aa <HAL_TIM_PWM_Start+0x6a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2241      	movs	r2, #65	@ 0x41
 800529c:	5c9b      	ldrb	r3, [r3, r2]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	1e5a      	subs	r2, r3, #1
 80052a4:	4193      	sbcs	r3, r2
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e013      	b.n	80052d2 <HAL_TIM_PWM_Start+0x92>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d108      	bne.n	80052c2 <HAL_TIM_PWM_Start+0x82>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2242      	movs	r2, #66	@ 0x42
 80052b4:	5c9b      	ldrb	r3, [r3, r2]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	1e5a      	subs	r2, r3, #1
 80052bc:	4193      	sbcs	r3, r2
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e007      	b.n	80052d2 <HAL_TIM_PWM_Start+0x92>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2243      	movs	r2, #67	@ 0x43
 80052c6:	5c9b      	ldrb	r3, [r3, r2]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	1e5a      	subs	r2, r3, #1
 80052ce:	4193      	sbcs	r3, r2
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e081      	b.n	80053de <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0xaa>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	223e      	movs	r2, #62	@ 0x3e
 80052e4:	2102      	movs	r1, #2
 80052e6:	5499      	strb	r1, [r3, r2]
 80052e8:	e023      	b.n	8005332 <HAL_TIM_PWM_Start+0xf2>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xba>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	223f      	movs	r2, #63	@ 0x3f
 80052f4:	2102      	movs	r1, #2
 80052f6:	5499      	strb	r1, [r3, r2]
 80052f8:	e01b      	b.n	8005332 <HAL_TIM_PWM_Start+0xf2>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d104      	bne.n	800530a <HAL_TIM_PWM_Start+0xca>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2240      	movs	r2, #64	@ 0x40
 8005304:	2102      	movs	r1, #2
 8005306:	5499      	strb	r1, [r3, r2]
 8005308:	e013      	b.n	8005332 <HAL_TIM_PWM_Start+0xf2>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0xda>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2241      	movs	r2, #65	@ 0x41
 8005314:	2102      	movs	r1, #2
 8005316:	5499      	strb	r1, [r3, r2]
 8005318:	e00b      	b.n	8005332 <HAL_TIM_PWM_Start+0xf2>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b10      	cmp	r3, #16
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0xea>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2242      	movs	r2, #66	@ 0x42
 8005324:	2102      	movs	r1, #2
 8005326:	5499      	strb	r1, [r3, r2]
 8005328:	e003      	b.n	8005332 <HAL_TIM_PWM_Start+0xf2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2243      	movs	r2, #67	@ 0x43
 800532e:	2102      	movs	r1, #2
 8005330:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	0018      	movs	r0, r3
 800533c:	f000 fc7e 	bl	8005c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a28      	ldr	r2, [pc, #160]	@ (80053e8 <HAL_TIM_PWM_Start+0x1a8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_TIM_PWM_Start+0x11e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a27      	ldr	r2, [pc, #156]	@ (80053ec <HAL_TIM_PWM_Start+0x1ac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIM_PWM_Start+0x11e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a25      	ldr	r2, [pc, #148]	@ (80053f0 <HAL_TIM_PWM_Start+0x1b0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_TIM_PWM_Start+0x122>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_TIM_PWM_Start+0x124>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2180      	movs	r1, #128	@ 0x80
 8005374:	0209      	lsls	r1, r1, #8
 8005376:	430a      	orrs	r2, r1
 8005378:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_TIM_PWM_Start+0x1a8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00a      	beq.n	800539a <HAL_TIM_PWM_Start+0x15a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	05db      	lsls	r3, r3, #23
 800538c:	429a      	cmp	r2, r3
 800538e:	d004      	beq.n	800539a <HAL_TIM_PWM_Start+0x15a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a17      	ldr	r2, [pc, #92]	@ (80053f4 <HAL_TIM_PWM_Start+0x1b4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d116      	bne.n	80053c8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a15      	ldr	r2, [pc, #84]	@ (80053f8 <HAL_TIM_PWM_Start+0x1b8>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	d016      	beq.n	80053da <HAL_TIM_PWM_Start+0x19a>
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	2380      	movs	r3, #128	@ 0x80
 80053b0:	025b      	lsls	r3, r3, #9
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d011      	beq.n	80053da <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2101      	movs	r1, #1
 80053c2:	430a      	orrs	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	e008      	b.n	80053da <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2101      	movs	r1, #1
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e000      	b.n	80053dc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	0018      	movs	r0, r3
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b004      	add	sp, #16
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800
 80053f4:	40000400 	.word	0x40000400
 80053f8:	00010007 	.word	0x00010007

080053fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005408:	2317      	movs	r3, #23
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	223c      	movs	r2, #60	@ 0x3c
 8005414:	5c9b      	ldrb	r3, [r3, r2]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_TIM_PWM_ConfigChannel+0x22>
 800541a:	2302      	movs	r3, #2
 800541c:	e0e5      	b.n	80055ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	223c      	movs	r2, #60	@ 0x3c
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b14      	cmp	r3, #20
 800542a:	d900      	bls.n	800542e <HAL_TIM_PWM_ConfigChannel+0x32>
 800542c:	e0d1      	b.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	009a      	lsls	r2, r3, #2
 8005432:	4b70      	ldr	r3, [pc, #448]	@ (80055f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005434:	18d3      	adds	r3, r2, r3
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0011      	movs	r1, r2
 8005442:	0018      	movs	r0, r3
 8005444:	f000 f95e 	bl	8005704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2108      	movs	r1, #8
 8005454:	430a      	orrs	r2, r1
 8005456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2104      	movs	r1, #4
 8005464:	438a      	bics	r2, r1
 8005466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6999      	ldr	r1, [r3, #24]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	619a      	str	r2, [r3, #24]
      break;
 800547a:	e0af      	b.n	80055dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f000 f9bd 	bl	8005804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2180      	movs	r1, #128	@ 0x80
 8005496:	0109      	lsls	r1, r1, #4
 8005498:	430a      	orrs	r2, r1
 800549a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4954      	ldr	r1, [pc, #336]	@ (80055f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054a8:	400a      	ands	r2, r1
 80054aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	619a      	str	r2, [r3, #24]
      break;
 80054c0:	e08c      	b.n	80055dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	0011      	movs	r1, r2
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 fa18 	bl	8005900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69da      	ldr	r2, [r3, #28]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2108      	movs	r1, #8
 80054dc:	430a      	orrs	r2, r1
 80054de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2104      	movs	r1, #4
 80054ec:	438a      	bics	r2, r1
 80054ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69d9      	ldr	r1, [r3, #28]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	61da      	str	r2, [r3, #28]
      break;
 8005502:	e06b      	b.n	80055dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	0011      	movs	r1, r2
 800550c:	0018      	movs	r0, r3
 800550e:	f000 fa79 	bl	8005a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2180      	movs	r1, #128	@ 0x80
 800551e:	0109      	lsls	r1, r1, #4
 8005520:	430a      	orrs	r2, r1
 8005522:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4932      	ldr	r1, [pc, #200]	@ (80055f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005530:	400a      	ands	r2, r1
 8005532:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69d9      	ldr	r1, [r3, #28]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	021a      	lsls	r2, r3, #8
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	61da      	str	r2, [r3, #28]
      break;
 8005548:	e048      	b.n	80055dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	0011      	movs	r1, r2
 8005552:	0018      	movs	r0, r3
 8005554:	f000 faba 	bl	8005acc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2108      	movs	r1, #8
 8005564:	430a      	orrs	r2, r1
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2104      	movs	r1, #4
 8005574:	438a      	bics	r2, r1
 8005576:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800558a:	e027      	b.n	80055dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f000 faf3 	bl	8005b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2180      	movs	r1, #128	@ 0x80
 80055a6:	0109      	lsls	r1, r1, #4
 80055a8:	430a      	orrs	r2, r1
 80055aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4910      	ldr	r1, [pc, #64]	@ (80055f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055d0:	e004      	b.n	80055dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80055d2:	2317      	movs	r3, #23
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
      break;
 80055da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	223c      	movs	r2, #60	@ 0x3c
 80055e0:	2100      	movs	r1, #0
 80055e2:	5499      	strb	r1, [r3, r2]

  return status;
 80055e4:	2317      	movs	r3, #23
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	781b      	ldrb	r3, [r3, #0]
}
 80055ea:	0018      	movs	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	b006      	add	sp, #24
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	08008560 	.word	0x08008560
 80055f8:	fffffbff 	.word	0xfffffbff

080055fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a37      	ldr	r2, [pc, #220]	@ (80056ec <TIM_Base_SetConfig+0xf0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d008      	beq.n	8005626 <TIM_Base_SetConfig+0x2a>
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	2380      	movs	r3, #128	@ 0x80
 8005618:	05db      	lsls	r3, r3, #23
 800561a:	429a      	cmp	r2, r3
 800561c:	d003      	beq.n	8005626 <TIM_Base_SetConfig+0x2a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a33      	ldr	r2, [pc, #204]	@ (80056f0 <TIM_Base_SetConfig+0xf4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d108      	bne.n	8005638 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2270      	movs	r2, #112	@ 0x70
 800562a:	4393      	bics	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a2c      	ldr	r2, [pc, #176]	@ (80056ec <TIM_Base_SetConfig+0xf0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d014      	beq.n	800566a <TIM_Base_SetConfig+0x6e>
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	2380      	movs	r3, #128	@ 0x80
 8005644:	05db      	lsls	r3, r3, #23
 8005646:	429a      	cmp	r2, r3
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0x6e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a28      	ldr	r2, [pc, #160]	@ (80056f0 <TIM_Base_SetConfig+0xf4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0x6e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a27      	ldr	r2, [pc, #156]	@ (80056f4 <TIM_Base_SetConfig+0xf8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0x6e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <TIM_Base_SetConfig+0xfc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0x6e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a25      	ldr	r2, [pc, #148]	@ (80056fc <TIM_Base_SetConfig+0x100>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a24      	ldr	r2, [pc, #144]	@ (8005700 <TIM_Base_SetConfig+0x104>)
 800566e:	4013      	ands	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2280      	movs	r2, #128	@ 0x80
 8005680:	4393      	bics	r3, r2
 8005682:	001a      	movs	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a11      	ldr	r2, [pc, #68]	@ (80056ec <TIM_Base_SetConfig+0xf0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0xbe>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a12      	ldr	r2, [pc, #72]	@ (80056f8 <TIM_Base_SetConfig+0xfc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0xbe>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a11      	ldr	r2, [pc, #68]	@ (80056fc <TIM_Base_SetConfig+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d103      	bne.n	80056c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2201      	movs	r2, #1
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d106      	bne.n	80056e2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2201      	movs	r2, #1
 80056da:	4393      	bics	r3, r2
 80056dc:	001a      	movs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]
  }
}
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b004      	add	sp, #16
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40002000 	.word	0x40002000
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800
 8005700:	fffffcff 	.word	0xfffffcff

08005704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	2201      	movs	r2, #1
 800571a:	4393      	bics	r3, r2
 800571c:	001a      	movs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a2e      	ldr	r2, [pc, #184]	@ (80057ec <TIM_OC1_SetConfig+0xe8>)
 8005732:	4013      	ands	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2203      	movs	r2, #3
 800573a:	4393      	bics	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2202      	movs	r2, #2
 800574c:	4393      	bics	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a24      	ldr	r2, [pc, #144]	@ (80057f0 <TIM_OC1_SetConfig+0xec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_OC1_SetConfig+0x6e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a23      	ldr	r2, [pc, #140]	@ (80057f4 <TIM_OC1_SetConfig+0xf0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC1_SetConfig+0x6e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a22      	ldr	r2, [pc, #136]	@ (80057f8 <TIM_OC1_SetConfig+0xf4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10c      	bne.n	800578c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2208      	movs	r2, #8
 8005776:	4393      	bics	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2204      	movs	r2, #4
 8005788:	4393      	bics	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <TIM_OC1_SetConfig+0xec>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_OC1_SetConfig+0xa0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <TIM_OC1_SetConfig+0xf0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC1_SetConfig+0xa0>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a16      	ldr	r2, [pc, #88]	@ (80057f8 <TIM_OC1_SetConfig+0xf4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d111      	bne.n	80057c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4a15      	ldr	r2, [pc, #84]	@ (80057fc <TIM_OC1_SetConfig+0xf8>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4a14      	ldr	r2, [pc, #80]	@ (8005800 <TIM_OC1_SetConfig+0xfc>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b006      	add	sp, #24
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	fffeff8f 	.word	0xfffeff8f
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800
 80057fc:	fffffeff 	.word	0xfffffeff
 8005800:	fffffdff 	.word	0xfffffdff

08005804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	2210      	movs	r2, #16
 800581a:	4393      	bics	r3, r2
 800581c:	001a      	movs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a2c      	ldr	r2, [pc, #176]	@ (80058e4 <TIM_OC2_SetConfig+0xe0>)
 8005832:	4013      	ands	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a2b      	ldr	r2, [pc, #172]	@ (80058e8 <TIM_OC2_SetConfig+0xe4>)
 800583a:	4013      	ands	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2220      	movs	r2, #32
 800584e:	4393      	bics	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a22      	ldr	r2, [pc, #136]	@ (80058ec <TIM_OC2_SetConfig+0xe8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10d      	bne.n	8005882 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2280      	movs	r2, #128	@ 0x80
 800586a:	4393      	bics	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2240      	movs	r2, #64	@ 0x40
 800587e:	4393      	bics	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a19      	ldr	r2, [pc, #100]	@ (80058ec <TIM_OC2_SetConfig+0xe8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_OC2_SetConfig+0x96>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <TIM_OC2_SetConfig+0xec>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC2_SetConfig+0x96>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a17      	ldr	r2, [pc, #92]	@ (80058f4 <TIM_OC2_SetConfig+0xf0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d113      	bne.n	80058c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4a16      	ldr	r2, [pc, #88]	@ (80058f8 <TIM_OC2_SetConfig+0xf4>)
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4a15      	ldr	r2, [pc, #84]	@ (80058fc <TIM_OC2_SetConfig+0xf8>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	46c0      	nop			@ (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	b006      	add	sp, #24
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	feff8fff 	.word	0xfeff8fff
 80058e8:	fffffcff 	.word	0xfffffcff
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800
 80058f8:	fffffbff 	.word	0xfffffbff
 80058fc:	fffff7ff 	.word	0xfffff7ff

08005900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	4a31      	ldr	r2, [pc, #196]	@ (80059dc <TIM_OC3_SetConfig+0xdc>)
 8005916:	401a      	ands	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a2d      	ldr	r2, [pc, #180]	@ (80059e0 <TIM_OC3_SetConfig+0xe0>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2203      	movs	r2, #3
 8005934:	4393      	bics	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	4a27      	ldr	r2, [pc, #156]	@ (80059e4 <TIM_OC3_SetConfig+0xe4>)
 8005946:	4013      	ands	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a23      	ldr	r2, [pc, #140]	@ (80059e8 <TIM_OC3_SetConfig+0xe8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d10d      	bne.n	800597a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4a22      	ldr	r2, [pc, #136]	@ (80059ec <TIM_OC3_SetConfig+0xec>)
 8005962:	4013      	ands	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4a1e      	ldr	r2, [pc, #120]	@ (80059f0 <TIM_OC3_SetConfig+0xf0>)
 8005976:	4013      	ands	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1a      	ldr	r2, [pc, #104]	@ (80059e8 <TIM_OC3_SetConfig+0xe8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <TIM_OC3_SetConfig+0x92>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1b      	ldr	r2, [pc, #108]	@ (80059f4 <TIM_OC3_SetConfig+0xf4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_OC3_SetConfig+0x92>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1a      	ldr	r2, [pc, #104]	@ (80059f8 <TIM_OC3_SetConfig+0xf8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d113      	bne.n	80059ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4a19      	ldr	r2, [pc, #100]	@ (80059fc <TIM_OC3_SetConfig+0xfc>)
 8005996:	4013      	ands	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4a18      	ldr	r2, [pc, #96]	@ (8005a00 <TIM_OC3_SetConfig+0x100>)
 800599e:	4013      	ands	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	46c0      	nop			@ (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b006      	add	sp, #24
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	fffffeff 	.word	0xfffffeff
 80059e0:	fffeff8f 	.word	0xfffeff8f
 80059e4:	fffffdff 	.word	0xfffffdff
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	fffff7ff 	.word	0xfffff7ff
 80059f0:	fffffbff 	.word	0xfffffbff
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800
 80059fc:	ffffefff 	.word	0xffffefff
 8005a00:	ffffdfff 	.word	0xffffdfff

08005a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	4a24      	ldr	r2, [pc, #144]	@ (8005aac <TIM_OC4_SetConfig+0xa8>)
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a20      	ldr	r2, [pc, #128]	@ (8005ab0 <TIM_OC4_SetConfig+0xac>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab4 <TIM_OC4_SetConfig+0xb0>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab8 <TIM_OC4_SetConfig+0xb4>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	031b      	lsls	r3, r3, #12
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a17      	ldr	r2, [pc, #92]	@ (8005abc <TIM_OC4_SetConfig+0xb8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_OC4_SetConfig+0x70>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a16      	ldr	r2, [pc, #88]	@ (8005ac0 <TIM_OC4_SetConfig+0xbc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC4_SetConfig+0x70>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a15      	ldr	r2, [pc, #84]	@ (8005ac4 <TIM_OC4_SetConfig+0xc0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d109      	bne.n	8005a88 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4a14      	ldr	r2, [pc, #80]	@ (8005ac8 <TIM_OC4_SetConfig+0xc4>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	019b      	lsls	r3, r3, #6
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b006      	add	sp, #24
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	ffffefff 	.word	0xffffefff
 8005ab0:	feff8fff 	.word	0xfeff8fff
 8005ab4:	fffffcff 	.word	0xfffffcff
 8005ab8:	ffffdfff 	.word	0xffffdfff
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800
 8005ac8:	ffffbfff 	.word	0xffffbfff

08005acc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	4a21      	ldr	r2, [pc, #132]	@ (8005b68 <TIM_OC5_SetConfig+0x9c>)
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <TIM_OC5_SetConfig+0xa0>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4a19      	ldr	r2, [pc, #100]	@ (8005b70 <TIM_OC5_SetConfig+0xa4>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <TIM_OC5_SetConfig+0xa8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_OC5_SetConfig+0x66>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a14      	ldr	r2, [pc, #80]	@ (8005b78 <TIM_OC5_SetConfig+0xac>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_OC5_SetConfig+0x66>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a13      	ldr	r2, [pc, #76]	@ (8005b7c <TIM_OC5_SetConfig+0xb0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d109      	bne.n	8005b46 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4a0c      	ldr	r2, [pc, #48]	@ (8005b68 <TIM_OC5_SetConfig+0x9c>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	46c0      	nop			@ (mov r8, r8)
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b006      	add	sp, #24
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	fffeffff 	.word	0xfffeffff
 8005b6c:	fffeff8f 	.word	0xfffeff8f
 8005b70:	fffdffff 	.word	0xfffdffff
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	4a22      	ldr	r2, [pc, #136]	@ (8005c20 <TIM_OC6_SetConfig+0xa0>)
 8005b96:	401a      	ands	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a1e      	ldr	r2, [pc, #120]	@ (8005c24 <TIM_OC6_SetConfig+0xa4>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8005c28 <TIM_OC6_SetConfig+0xa8>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	051b      	lsls	r3, r3, #20
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <TIM_OC6_SetConfig+0xac>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_OC6_SetConfig+0x68>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a15      	ldr	r2, [pc, #84]	@ (8005c30 <TIM_OC6_SetConfig+0xb0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC6_SetConfig+0x68>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a14      	ldr	r2, [pc, #80]	@ (8005c34 <TIM_OC6_SetConfig+0xb4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d109      	bne.n	8005bfc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4a13      	ldr	r2, [pc, #76]	@ (8005c38 <TIM_OC6_SetConfig+0xb8>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	029b      	lsls	r3, r3, #10
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b006      	add	sp, #24
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	46c0      	nop			@ (mov r8, r8)
 8005c20:	ffefffff 	.word	0xffefffff
 8005c24:	feff8fff 	.word	0xfeff8fff
 8005c28:	ffdfffff 	.word	0xffdfffff
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800
 8005c38:	fffbffff 	.word	0xfffbffff

08005c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	221f      	movs	r2, #31
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2201      	movs	r2, #1
 8005c50:	409a      	lsls	r2, r3
 8005c52:	0013      	movs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	43d2      	mvns	r2, r2
 8005c5e:	401a      	ands	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1a      	ldr	r2, [r3, #32]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	211f      	movs	r1, #31
 8005c6c:	400b      	ands	r3, r1
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	4099      	lsls	r1, r3
 8005c72:	000b      	movs	r3, r1
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	46c0      	nop			@ (mov r8, r8)
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b006      	add	sp, #24
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	223c      	movs	r2, #60	@ 0x3c
 8005c92:	5c9b      	ldrb	r3, [r3, r2]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e050      	b.n	8005d3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	223c      	movs	r2, #60	@ 0x3c
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	223d      	movs	r2, #61	@ 0x3d
 8005ca8:	2102      	movs	r1, #2
 8005caa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a21      	ldr	r2, [pc, #132]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a20      	ldr	r2, [pc, #128]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2270      	movs	r2, #112	@ 0x70
 8005cdc:	4393      	bics	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a14      	ldr	r2, [pc, #80]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00a      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	2380      	movs	r3, #128	@ 0x80
 8005d02:	05db      	lsls	r3, r3, #23
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d004      	beq.n	8005d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a10      	ldr	r2, [pc, #64]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d10c      	bne.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2280      	movs	r2, #128	@ 0x80
 8005d16:	4393      	bics	r3, r2
 8005d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	223d      	movs	r2, #61	@ 0x3d
 8005d30:	2101      	movs	r1, #1
 8005d32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	223c      	movs	r2, #60	@ 0x3c
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b004      	add	sp, #16
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	ff0fffff 	.word	0xff0fffff
 8005d50:	40000400 	.word	0x40000400

08005d54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	223c      	movs	r2, #60	@ 0x3c
 8005d66:	5c9b      	ldrb	r3, [r3, r2]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e06f      	b.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	223c      	movs	r2, #60	@ 0x3c
 8005d74:	2101      	movs	r1, #1
 8005d76:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	22ff      	movs	r2, #255	@ 0xff
 8005d7c:	4393      	bics	r3, r2
 8005d7e:	001a      	movs	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4a33      	ldr	r2, [pc, #204]	@ (8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005d8c:	401a      	ands	r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a30      	ldr	r2, [pc, #192]	@ (8005e5c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a2e      	ldr	r2, [pc, #184]	@ (8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005da8:	401a      	ands	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005db6:	401a      	ands	r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4a29      	ldr	r2, [pc, #164]	@ (8005e68 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005dc4:	401a      	ands	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4a26      	ldr	r2, [pc, #152]	@ (8005e6c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a24      	ldr	r2, [pc, #144]	@ (8005e70 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005de0:	401a      	ands	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a21      	ldr	r2, [pc, #132]	@ (8005e74 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005df0:	401a      	ands	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d11c      	bne.n	8005e3e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a1d      	ldr	r2, [pc, #116]	@ (8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005e08:	401a      	ands	r2, r3
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	051b      	lsls	r3, r3, #20
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005e18:	401a      	ands	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a17      	ldr	r2, [pc, #92]	@ (8005e84 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005e26:	401a      	ands	r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005e34:	401a      	ands	r2, r3
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	223c      	movs	r2, #60	@ 0x3c
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	0018      	movs	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b004      	add	sp, #16
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	fffffcff 	.word	0xfffffcff
 8005e5c:	fffffbff 	.word	0xfffffbff
 8005e60:	fffff7ff 	.word	0xfffff7ff
 8005e64:	ffffefff 	.word	0xffffefff
 8005e68:	ffffdfff 	.word	0xffffdfff
 8005e6c:	ffffbfff 	.word	0xffffbfff
 8005e70:	fff0ffff 	.word	0xfff0ffff
 8005e74:	efffffff 	.word	0xefffffff
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	ff0fffff 	.word	0xff0fffff
 8005e80:	feffffff 	.word	0xfeffffff
 8005e84:	fdffffff 	.word	0xfdffffff
 8005e88:	dfffffff 	.word	0xdfffffff

08005e8c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	@ 0x30
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	1dbb      	adds	r3, r7, #6
 8005e98:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2288      	movs	r2, #136	@ 0x88
 8005e9e:	589b      	ldr	r3, [r3, r2]
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d000      	beq.n	8005ea6 <HAL_UART_Transmit_IT+0x1a>
 8005ea4:	e08d      	b.n	8005fc2 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_UART_Transmit_IT+0x28>
 8005eac:	1dbb      	adds	r3, r7, #6
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e085      	b.n	8005fc4 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	2380      	movs	r3, #128	@ 0x80
 8005ebe:	015b      	lsls	r3, r3, #5
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d109      	bne.n	8005ed8 <HAL_UART_Transmit_IT+0x4c>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d105      	bne.n	8005ed8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d001      	beq.n	8005ed8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e075      	b.n	8005fc4 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1dba      	adds	r2, r7, #6
 8005ee2:	2154      	movs	r1, #84	@ 0x54
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1dba      	adds	r2, r7, #6
 8005eec:	2156      	movs	r1, #86	@ 0x56
 8005eee:	8812      	ldrh	r2, [r2, #0]
 8005ef0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2290      	movs	r2, #144	@ 0x90
 8005efc:	2100      	movs	r1, #0
 8005efe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2288      	movs	r2, #136	@ 0x88
 8005f04:	2121      	movs	r1, #33	@ 0x21
 8005f06:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005f0c:	2380      	movs	r3, #128	@ 0x80
 8005f0e:	059b      	lsls	r3, r3, #22
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d12a      	bne.n	8005f6a <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d107      	bne.n	8005f30 <HAL_UART_Transmit_IT+0xa4>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a28      	ldr	r2, [pc, #160]	@ (8005fcc <HAL_UART_Transmit_IT+0x140>)
 8005f2c:	679a      	str	r2, [r3, #120]	@ 0x78
 8005f2e:	e002      	b.n	8005f36 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4a27      	ldr	r2, [pc, #156]	@ (8005fd0 <HAL_UART_Transmit_IT+0x144>)
 8005f34:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f36:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f3c:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f40:	2301      	movs	r3, #1
 8005f42:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f383 8810 	msr	PRIMASK, r3
}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2180      	movs	r1, #128	@ 0x80
 8005f58:	0409      	lsls	r1, r1, #16
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	f383 8810 	msr	PRIMASK, r3
}
 8005f68:	e029      	b.n	8005fbe <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	2380      	movs	r3, #128	@ 0x80
 8005f70:	015b      	lsls	r3, r3, #5
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d107      	bne.n	8005f86 <HAL_UART_Transmit_IT+0xfa>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4a14      	ldr	r2, [pc, #80]	@ (8005fd4 <HAL_UART_Transmit_IT+0x148>)
 8005f82:	679a      	str	r2, [r3, #120]	@ 0x78
 8005f84:	e002      	b.n	8005f8c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a13      	ldr	r2, [pc, #76]	@ (8005fd8 <HAL_UART_Transmit_IT+0x14c>)
 8005f8a:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f90:	613b      	str	r3, [r7, #16]
  return(result);
 8005f92:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f96:	2301      	movs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f383 8810 	msr	PRIMASK, r3
}
 8005fa0:	46c0      	nop			@ (mov r8, r8)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2180      	movs	r1, #128	@ 0x80
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f383 8810 	msr	PRIMASK, r3
}
 8005fbc:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e000      	b.n	8005fc4 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
  }
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b00c      	add	sp, #48	@ 0x30
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	080072c9 	.word	0x080072c9
 8005fd0:	080071dd 	.word	0x080071dd
 8005fd4:	0800711f 	.word	0x0800711f
 8005fd8:	0800706b 	.word	0x0800706b

08005fdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fdc:	b5b0      	push	{r4, r5, r7, lr}
 8005fde:	b0aa      	sub	sp, #168	@ 0xa8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	22a4      	movs	r2, #164	@ 0xa4
 8005fec:	18b9      	adds	r1, r7, r2
 8005fee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	20a0      	movs	r0, #160	@ 0xa0
 8005ff8:	1839      	adds	r1, r7, r0
 8005ffa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	249c      	movs	r4, #156	@ 0x9c
 8006004:	1939      	adds	r1, r7, r4
 8006006:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006008:	0011      	movs	r1, r2
 800600a:	18bb      	adds	r3, r7, r2
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4aa2      	ldr	r2, [pc, #648]	@ (8006298 <HAL_UART_IRQHandler+0x2bc>)
 8006010:	4013      	ands	r3, r2
 8006012:	2298      	movs	r2, #152	@ 0x98
 8006014:	18bd      	adds	r5, r7, r2
 8006016:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006018:	18bb      	adds	r3, r7, r2
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d11a      	bne.n	8006056 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006020:	187b      	adds	r3, r7, r1
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2220      	movs	r2, #32
 8006026:	4013      	ands	r3, r2
 8006028:	d015      	beq.n	8006056 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800602a:	183b      	adds	r3, r7, r0
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2220      	movs	r2, #32
 8006030:	4013      	ands	r3, r2
 8006032:	d105      	bne.n	8006040 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006034:	193b      	adds	r3, r7, r4
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	055b      	lsls	r3, r3, #21
 800603c:	4013      	ands	r3, r2
 800603e:	d00a      	beq.n	8006056 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006044:	2b00      	cmp	r3, #0
 8006046:	d100      	bne.n	800604a <HAL_UART_IRQHandler+0x6e>
 8006048:	e2fb      	b.n	8006642 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	0010      	movs	r0, r2
 8006052:	4798      	blx	r3
      }
      return;
 8006054:	e2f5      	b.n	8006642 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006056:	2398      	movs	r3, #152	@ 0x98
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d100      	bne.n	8006062 <HAL_UART_IRQHandler+0x86>
 8006060:	e122      	b.n	80062a8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006062:	239c      	movs	r3, #156	@ 0x9c
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a8c      	ldr	r2, [pc, #560]	@ (800629c <HAL_UART_IRQHandler+0x2c0>)
 800606a:	4013      	ands	r3, r2
 800606c:	d106      	bne.n	800607c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800606e:	23a0      	movs	r3, #160	@ 0xa0
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a8a      	ldr	r2, [pc, #552]	@ (80062a0 <HAL_UART_IRQHandler+0x2c4>)
 8006076:	4013      	ands	r3, r2
 8006078:	d100      	bne.n	800607c <HAL_UART_IRQHandler+0xa0>
 800607a:	e115      	b.n	80062a8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800607c:	23a4      	movs	r3, #164	@ 0xa4
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2201      	movs	r2, #1
 8006084:	4013      	ands	r3, r2
 8006086:	d012      	beq.n	80060ae <HAL_UART_IRQHandler+0xd2>
 8006088:	23a0      	movs	r3, #160	@ 0xa0
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	2380      	movs	r3, #128	@ 0x80
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4013      	ands	r3, r2
 8006094:	d00b      	beq.n	80060ae <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2201      	movs	r2, #1
 800609c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2290      	movs	r2, #144	@ 0x90
 80060a2:	589b      	ldr	r3, [r3, r2]
 80060a4:	2201      	movs	r2, #1
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2190      	movs	r1, #144	@ 0x90
 80060ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ae:	23a4      	movs	r3, #164	@ 0xa4
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2202      	movs	r2, #2
 80060b6:	4013      	ands	r3, r2
 80060b8:	d011      	beq.n	80060de <HAL_UART_IRQHandler+0x102>
 80060ba:	239c      	movs	r3, #156	@ 0x9c
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	4013      	ands	r3, r2
 80060c4:	d00b      	beq.n	80060de <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2202      	movs	r2, #2
 80060cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2290      	movs	r2, #144	@ 0x90
 80060d2:	589b      	ldr	r3, [r3, r2]
 80060d4:	2204      	movs	r2, #4
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2190      	movs	r1, #144	@ 0x90
 80060dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060de:	23a4      	movs	r3, #164	@ 0xa4
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2204      	movs	r2, #4
 80060e6:	4013      	ands	r3, r2
 80060e8:	d011      	beq.n	800610e <HAL_UART_IRQHandler+0x132>
 80060ea:	239c      	movs	r3, #156	@ 0x9c
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	4013      	ands	r3, r2
 80060f4:	d00b      	beq.n	800610e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2204      	movs	r2, #4
 80060fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2290      	movs	r2, #144	@ 0x90
 8006102:	589b      	ldr	r3, [r3, r2]
 8006104:	2202      	movs	r2, #2
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2190      	movs	r1, #144	@ 0x90
 800610c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800610e:	23a4      	movs	r3, #164	@ 0xa4
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2208      	movs	r2, #8
 8006116:	4013      	ands	r3, r2
 8006118:	d017      	beq.n	800614a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800611a:	23a0      	movs	r3, #160	@ 0xa0
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2220      	movs	r2, #32
 8006122:	4013      	ands	r3, r2
 8006124:	d105      	bne.n	8006132 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006126:	239c      	movs	r3, #156	@ 0x9c
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5b      	ldr	r2, [pc, #364]	@ (800629c <HAL_UART_IRQHandler+0x2c0>)
 800612e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006130:	d00b      	beq.n	800614a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2208      	movs	r2, #8
 8006138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2290      	movs	r2, #144	@ 0x90
 800613e:	589b      	ldr	r3, [r3, r2]
 8006140:	2208      	movs	r2, #8
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2190      	movs	r1, #144	@ 0x90
 8006148:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800614a:	23a4      	movs	r3, #164	@ 0xa4
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	2380      	movs	r3, #128	@ 0x80
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	4013      	ands	r3, r2
 8006156:	d013      	beq.n	8006180 <HAL_UART_IRQHandler+0x1a4>
 8006158:	23a0      	movs	r3, #160	@ 0xa0
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	2380      	movs	r3, #128	@ 0x80
 8006160:	04db      	lsls	r3, r3, #19
 8006162:	4013      	ands	r3, r2
 8006164:	d00c      	beq.n	8006180 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2280      	movs	r2, #128	@ 0x80
 800616c:	0112      	lsls	r2, r2, #4
 800616e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2290      	movs	r2, #144	@ 0x90
 8006174:	589b      	ldr	r3, [r3, r2]
 8006176:	2220      	movs	r2, #32
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2190      	movs	r1, #144	@ 0x90
 800617e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2290      	movs	r2, #144	@ 0x90
 8006184:	589b      	ldr	r3, [r3, r2]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d100      	bne.n	800618c <HAL_UART_IRQHandler+0x1b0>
 800618a:	e25c      	b.n	8006646 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800618c:	23a4      	movs	r3, #164	@ 0xa4
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2220      	movs	r2, #32
 8006194:	4013      	ands	r3, r2
 8006196:	d015      	beq.n	80061c4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006198:	23a0      	movs	r3, #160	@ 0xa0
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	4013      	ands	r3, r2
 80061a2:	d106      	bne.n	80061b2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061a4:	239c      	movs	r3, #156	@ 0x9c
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	2380      	movs	r3, #128	@ 0x80
 80061ac:	055b      	lsls	r3, r3, #21
 80061ae:	4013      	ands	r3, r2
 80061b0:	d008      	beq.n	80061c4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	0010      	movs	r0, r2
 80061c2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2290      	movs	r2, #144	@ 0x90
 80061c8:	589b      	ldr	r3, [r3, r2]
 80061ca:	2194      	movs	r1, #148	@ 0x94
 80061cc:	187a      	adds	r2, r7, r1
 80061ce:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2240      	movs	r2, #64	@ 0x40
 80061d8:	4013      	ands	r3, r2
 80061da:	2b40      	cmp	r3, #64	@ 0x40
 80061dc:	d004      	beq.n	80061e8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061de:	187b      	adds	r3, r7, r1
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2228      	movs	r2, #40	@ 0x28
 80061e4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061e6:	d04c      	beq.n	8006282 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 fec0 	bl	8006f70 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2240      	movs	r2, #64	@ 0x40
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b40      	cmp	r3, #64	@ 0x40
 80061fc:	d13c      	bne.n	8006278 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80061fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006202:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	2090      	movs	r0, #144	@ 0x90
 8006208:	183a      	adds	r2, r7, r0
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006212:	f383 8810 	msr	PRIMASK, r3
}
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2140      	movs	r1, #64	@ 0x40
 8006224:	438a      	bics	r2, r1
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	183b      	adds	r3, r7, r0
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006230:	f383 8810 	msr	PRIMASK, r3
}
 8006234:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2280      	movs	r2, #128	@ 0x80
 800623a:	589b      	ldr	r3, [r3, r2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d016      	beq.n	800626e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2280      	movs	r2, #128	@ 0x80
 8006244:	589b      	ldr	r3, [r3, r2]
 8006246:	4a17      	ldr	r2, [pc, #92]	@ (80062a4 <HAL_UART_IRQHandler+0x2c8>)
 8006248:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2280      	movs	r2, #128	@ 0x80
 800624e:	589b      	ldr	r3, [r3, r2]
 8006250:	0018      	movs	r0, r3
 8006252:	f7fd fd21 	bl	8003c98 <HAL_DMA_Abort_IT>
 8006256:	1e03      	subs	r3, r0, #0
 8006258:	d01c      	beq.n	8006294 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2280      	movs	r2, #128	@ 0x80
 800625e:	589b      	ldr	r3, [r3, r2]
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	2180      	movs	r1, #128	@ 0x80
 8006266:	5852      	ldr	r2, [r2, r1]
 8006268:	0010      	movs	r0, r2
 800626a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	e012      	b.n	8006294 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f000 f9f9 	bl	8006668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006276:	e00d      	b.n	8006294 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f000 f9f4 	bl	8006668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e008      	b.n	8006294 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0018      	movs	r0, r3
 8006286:	f000 f9ef 	bl	8006668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2290      	movs	r2, #144	@ 0x90
 800628e:	2100      	movs	r1, #0
 8006290:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006292:	e1d8      	b.n	8006646 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	46c0      	nop			@ (mov r8, r8)
    return;
 8006296:	e1d6      	b.n	8006646 <HAL_UART_IRQHandler+0x66a>
 8006298:	0000080f 	.word	0x0000080f
 800629c:	10000001 	.word	0x10000001
 80062a0:	04000120 	.word	0x04000120
 80062a4:	0800703d 	.word	0x0800703d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d000      	beq.n	80062b2 <HAL_UART_IRQHandler+0x2d6>
 80062b0:	e15d      	b.n	800656e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062b2:	23a4      	movs	r3, #164	@ 0xa4
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2210      	movs	r2, #16
 80062ba:	4013      	ands	r3, r2
 80062bc:	d100      	bne.n	80062c0 <HAL_UART_IRQHandler+0x2e4>
 80062be:	e156      	b.n	800656e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062c0:	23a0      	movs	r3, #160	@ 0xa0
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2210      	movs	r2, #16
 80062c8:	4013      	ands	r3, r2
 80062ca:	d100      	bne.n	80062ce <HAL_UART_IRQHandler+0x2f2>
 80062cc:	e14f      	b.n	800656e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2210      	movs	r2, #16
 80062d4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2240      	movs	r2, #64	@ 0x40
 80062de:	4013      	ands	r3, r2
 80062e0:	2b40      	cmp	r3, #64	@ 0x40
 80062e2:	d000      	beq.n	80062e6 <HAL_UART_IRQHandler+0x30a>
 80062e4:	e0c3      	b.n	800646e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2280      	movs	r2, #128	@ 0x80
 80062ea:	589b      	ldr	r3, [r3, r2]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	217e      	movs	r1, #126	@ 0x7e
 80062f2:	187b      	adds	r3, r7, r1
 80062f4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80062f6:	187b      	adds	r3, r7, r1
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d100      	bne.n	8006300 <HAL_UART_IRQHandler+0x324>
 80062fe:	e097      	b.n	8006430 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	225c      	movs	r2, #92	@ 0x5c
 8006304:	5a9b      	ldrh	r3, [r3, r2]
 8006306:	187a      	adds	r2, r7, r1
 8006308:	8812      	ldrh	r2, [r2, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d300      	bcc.n	8006310 <HAL_UART_IRQHandler+0x334>
 800630e:	e08f      	b.n	8006430 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	187a      	adds	r2, r7, r1
 8006314:	215e      	movs	r1, #94	@ 0x5e
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2280      	movs	r2, #128	@ 0x80
 800631e:	589b      	ldr	r3, [r3, r2]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2220      	movs	r2, #32
 8006326:	4013      	ands	r3, r2
 8006328:	d170      	bne.n	800640c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800632a:	f3ef 8310 	mrs	r3, PRIMASK
 800632e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006332:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006334:	2301      	movs	r3, #1
 8006336:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633a:	f383 8810 	msr	PRIMASK, r3
}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	49c4      	ldr	r1, [pc, #784]	@ (800665c <HAL_UART_IRQHandler+0x680>)
 800634c:	400a      	ands	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006352:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	f383 8810 	msr	PRIMASK, r3
}
 800635a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800635c:	f3ef 8310 	mrs	r3, PRIMASK
 8006360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	677b      	str	r3, [r7, #116]	@ 0x74
 8006366:	2301      	movs	r3, #1
 8006368:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636c:	f383 8810 	msr	PRIMASK, r3
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2101      	movs	r1, #1
 800637e:	438a      	bics	r2, r1
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006384:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006388:	f383 8810 	msr	PRIMASK, r3
}
 800638c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800638e:	f3ef 8310 	mrs	r3, PRIMASK
 8006392:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006396:	673b      	str	r3, [r7, #112]	@ 0x70
 8006398:	2301      	movs	r3, #1
 800639a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639e:	f383 8810 	msr	PRIMASK, r3
}
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2140      	movs	r1, #64	@ 0x40
 80063b0:	438a      	bics	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063b6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ba:	f383 8810 	msr	PRIMASK, r3
}
 80063be:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	228c      	movs	r2, #140	@ 0x8c
 80063c4:	2120      	movs	r1, #32
 80063c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063ce:	f3ef 8310 	mrs	r3, PRIMASK
 80063d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80063d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063d8:	2301      	movs	r3, #1
 80063da:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063de:	f383 8810 	msr	PRIMASK, r3
}
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2110      	movs	r1, #16
 80063f0:	438a      	bics	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063fa:	f383 8810 	msr	PRIMASK, r3
}
 80063fe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2280      	movs	r2, #128	@ 0x80
 8006404:	589b      	ldr	r3, [r3, r2]
 8006406:	0018      	movs	r0, r3
 8006408:	f7fd fbe4 	bl	8003bd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	225c      	movs	r2, #92	@ 0x5c
 8006416:	5a9a      	ldrh	r2, [r3, r2]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	215e      	movs	r1, #94	@ 0x5e
 800641c:	5a5b      	ldrh	r3, [r3, r1]
 800641e:	b29b      	uxth	r3, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	b29a      	uxth	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0011      	movs	r1, r2
 8006428:	0018      	movs	r0, r3
 800642a:	f000 f925 	bl	8006678 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800642e:	e10c      	b.n	800664a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	225c      	movs	r2, #92	@ 0x5c
 8006434:	5a9b      	ldrh	r3, [r3, r2]
 8006436:	227e      	movs	r2, #126	@ 0x7e
 8006438:	18ba      	adds	r2, r7, r2
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d000      	beq.n	8006442 <HAL_UART_IRQHandler+0x466>
 8006440:	e103      	b.n	800664a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2280      	movs	r2, #128	@ 0x80
 8006446:	589b      	ldr	r3, [r3, r2]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2220      	movs	r2, #32
 800644e:	4013      	ands	r3, r2
 8006450:	2b20      	cmp	r3, #32
 8006452:	d000      	beq.n	8006456 <HAL_UART_IRQHandler+0x47a>
 8006454:	e0f9      	b.n	800664a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	225c      	movs	r2, #92	@ 0x5c
 8006460:	5a9a      	ldrh	r2, [r3, r2]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	0011      	movs	r1, r2
 8006466:	0018      	movs	r0, r3
 8006468:	f000 f906 	bl	8006678 <HAL_UARTEx_RxEventCallback>
      return;
 800646c:	e0ed      	b.n	800664a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	225c      	movs	r2, #92	@ 0x5c
 8006472:	5a99      	ldrh	r1, [r3, r2]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	225e      	movs	r2, #94	@ 0x5e
 8006478:	5a9b      	ldrh	r3, [r3, r2]
 800647a:	b29a      	uxth	r2, r3
 800647c:	208e      	movs	r0, #142	@ 0x8e
 800647e:	183b      	adds	r3, r7, r0
 8006480:	1a8a      	subs	r2, r1, r2
 8006482:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	225e      	movs	r2, #94	@ 0x5e
 8006488:	5a9b      	ldrh	r3, [r3, r2]
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d100      	bne.n	8006492 <HAL_UART_IRQHandler+0x4b6>
 8006490:	e0dd      	b.n	800664e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8006492:	183b      	adds	r3, r7, r0
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d100      	bne.n	800649c <HAL_UART_IRQHandler+0x4c0>
 800649a:	e0d8      	b.n	800664e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800649c:	f3ef 8310 	mrs	r3, PRIMASK
 80064a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80064a2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a4:	2488      	movs	r4, #136	@ 0x88
 80064a6:	193a      	adds	r2, r7, r4
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	2301      	movs	r3, #1
 80064ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f383 8810 	msr	PRIMASK, r3
}
 80064b4:	46c0      	nop			@ (mov r8, r8)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4967      	ldr	r1, [pc, #412]	@ (8006660 <HAL_UART_IRQHandler+0x684>)
 80064c2:	400a      	ands	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	193b      	adds	r3, r7, r4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f383 8810 	msr	PRIMASK, r3
}
 80064d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064d4:	f3ef 8310 	mrs	r3, PRIMASK
 80064d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80064da:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064dc:	2484      	movs	r4, #132	@ 0x84
 80064de:	193a      	adds	r2, r7, r4
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	2301      	movs	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f383 8810 	msr	PRIMASK, r3
}
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	495a      	ldr	r1, [pc, #360]	@ (8006664 <HAL_UART_IRQHandler+0x688>)
 80064fa:	400a      	ands	r2, r1
 80064fc:	609a      	str	r2, [r3, #8]
 80064fe:	193b      	adds	r3, r7, r4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f383 8810 	msr	PRIMASK, r3
}
 800650a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	228c      	movs	r2, #140	@ 0x8c
 8006510:	2120      	movs	r1, #32
 8006512:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006520:	f3ef 8310 	mrs	r3, PRIMASK
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006528:	2480      	movs	r4, #128	@ 0x80
 800652a:	193a      	adds	r2, r7, r4
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	2301      	movs	r3, #1
 8006530:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			@ (mov r8, r8)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2110      	movs	r1, #16
 8006546:	438a      	bics	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	193b      	adds	r3, r7, r4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006552:	f383 8810 	msr	PRIMASK, r3
}
 8006556:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800655e:	183b      	adds	r3, r7, r0
 8006560:	881a      	ldrh	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0011      	movs	r1, r2
 8006566:	0018      	movs	r0, r3
 8006568:	f000 f886 	bl	8006678 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800656c:	e06f      	b.n	800664e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800656e:	23a4      	movs	r3, #164	@ 0xa4
 8006570:	18fb      	adds	r3, r7, r3
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	2380      	movs	r3, #128	@ 0x80
 8006576:	035b      	lsls	r3, r3, #13
 8006578:	4013      	ands	r3, r2
 800657a:	d010      	beq.n	800659e <HAL_UART_IRQHandler+0x5c2>
 800657c:	239c      	movs	r3, #156	@ 0x9c
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	2380      	movs	r3, #128	@ 0x80
 8006584:	03db      	lsls	r3, r3, #15
 8006586:	4013      	ands	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2280      	movs	r2, #128	@ 0x80
 8006590:	0352      	lsls	r2, r2, #13
 8006592:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	0018      	movs	r0, r3
 8006598:	f001 fca6 	bl	8007ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800659c:	e05a      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800659e:	23a4      	movs	r3, #164	@ 0xa4
 80065a0:	18fb      	adds	r3, r7, r3
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2280      	movs	r2, #128	@ 0x80
 80065a6:	4013      	ands	r3, r2
 80065a8:	d016      	beq.n	80065d8 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065aa:	23a0      	movs	r3, #160	@ 0xa0
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2280      	movs	r2, #128	@ 0x80
 80065b2:	4013      	ands	r3, r2
 80065b4:	d106      	bne.n	80065c4 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065b6:	239c      	movs	r3, #156	@ 0x9c
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	2380      	movs	r3, #128	@ 0x80
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	4013      	ands	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d042      	beq.n	8006652 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	0010      	movs	r0, r2
 80065d4:	4798      	blx	r3
    }
    return;
 80065d6:	e03c      	b.n	8006652 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065d8:	23a4      	movs	r3, #164	@ 0xa4
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2240      	movs	r2, #64	@ 0x40
 80065e0:	4013      	ands	r3, r2
 80065e2:	d00a      	beq.n	80065fa <HAL_UART_IRQHandler+0x61e>
 80065e4:	23a0      	movs	r3, #160	@ 0xa0
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2240      	movs	r2, #64	@ 0x40
 80065ec:	4013      	ands	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	0018      	movs	r0, r3
 80065f4:	f000 fee2 	bl	80073bc <UART_EndTransmit_IT>
    return;
 80065f8:	e02c      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80065fa:	23a4      	movs	r3, #164	@ 0xa4
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	041b      	lsls	r3, r3, #16
 8006604:	4013      	ands	r3, r2
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0x644>
 8006608:	23a0      	movs	r3, #160	@ 0xa0
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	2380      	movs	r3, #128	@ 0x80
 8006610:	05db      	lsls	r3, r3, #23
 8006612:	4013      	ands	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f001 fc75 	bl	8007f08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800661e:	e019      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006620:	23a4      	movs	r3, #164	@ 0xa4
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	2380      	movs	r3, #128	@ 0x80
 8006628:	045b      	lsls	r3, r3, #17
 800662a:	4013      	ands	r3, r2
 800662c:	d012      	beq.n	8006654 <HAL_UART_IRQHandler+0x678>
 800662e:	23a0      	movs	r3, #160	@ 0xa0
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	da0d      	bge.n	8006654 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	0018      	movs	r0, r3
 800663c:	f001 fc5c 	bl	8007ef8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006640:	e008      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
      return;
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	e006      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
    return;
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	e004      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
      return;
 800664a:	46c0      	nop			@ (mov r8, r8)
 800664c:	e002      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
      return;
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	e000      	b.n	8006654 <HAL_UART_IRQHandler+0x678>
    return;
 8006652:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006654:	46bd      	mov	sp, r7
 8006656:	b02a      	add	sp, #168	@ 0xa8
 8006658:	bdb0      	pop	{r4, r5, r7, pc}
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	fffffeff 	.word	0xfffffeff
 8006660:	fffffedf 	.word	0xfffffedf
 8006664:	effffffe 	.word	0xeffffffe

08006668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006670:	46c0      	nop			@ (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	000a      	movs	r2, r1
 8006682:	1cbb      	adds	r3, r7, #2
 8006684:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	46bd      	mov	sp, r7
 800668a:	b002      	add	sp, #8
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006698:	231e      	movs	r3, #30
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4aab      	ldr	r2, [pc, #684]	@ (800696c <UART_SetConfig+0x2dc>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4aa6      	ldr	r2, [pc, #664]	@ (8006970 <UART_SetConfig+0x2e0>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	0019      	movs	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	4a9d      	ldr	r2, [pc, #628]	@ (8006974 <UART_SetConfig+0x2e4>)
 80066fe:	4013      	ands	r3, r2
 8006700:	0019      	movs	r1, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	430a      	orrs	r2, r1
 800670a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	220f      	movs	r2, #15
 8006714:	4393      	bics	r3, r2
 8006716:	0019      	movs	r1, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a93      	ldr	r2, [pc, #588]	@ (8006978 <UART_SetConfig+0x2e8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d127      	bne.n	800677e <UART_SetConfig+0xee>
 800672e:	4b93      	ldr	r3, [pc, #588]	@ (800697c <UART_SetConfig+0x2ec>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006732:	2203      	movs	r2, #3
 8006734:	4013      	ands	r3, r2
 8006736:	2b03      	cmp	r3, #3
 8006738:	d017      	beq.n	800676a <UART_SetConfig+0xda>
 800673a:	d81b      	bhi.n	8006774 <UART_SetConfig+0xe4>
 800673c:	2b02      	cmp	r3, #2
 800673e:	d00a      	beq.n	8006756 <UART_SetConfig+0xc6>
 8006740:	d818      	bhi.n	8006774 <UART_SetConfig+0xe4>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <UART_SetConfig+0xbc>
 8006746:	2b01      	cmp	r3, #1
 8006748:	d00a      	beq.n	8006760 <UART_SetConfig+0xd0>
 800674a:	e013      	b.n	8006774 <UART_SetConfig+0xe4>
 800674c:	231f      	movs	r3, #31
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e021      	b.n	800679a <UART_SetConfig+0x10a>
 8006756:	231f      	movs	r3, #31
 8006758:	18fb      	adds	r3, r7, r3
 800675a:	2202      	movs	r2, #2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e01c      	b.n	800679a <UART_SetConfig+0x10a>
 8006760:	231f      	movs	r3, #31
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2204      	movs	r2, #4
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e017      	b.n	800679a <UART_SetConfig+0x10a>
 800676a:	231f      	movs	r3, #31
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	2208      	movs	r2, #8
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e012      	b.n	800679a <UART_SetConfig+0x10a>
 8006774:	231f      	movs	r3, #31
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	2210      	movs	r2, #16
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e00d      	b.n	800679a <UART_SetConfig+0x10a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7f      	ldr	r2, [pc, #508]	@ (8006980 <UART_SetConfig+0x2f0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d104      	bne.n	8006792 <UART_SetConfig+0x102>
 8006788:	231f      	movs	r3, #31
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e003      	b.n	800679a <UART_SetConfig+0x10a>
 8006792:	231f      	movs	r3, #31
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	2210      	movs	r2, #16
 8006798:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69da      	ldr	r2, [r3, #28]
 800679e:	2380      	movs	r3, #128	@ 0x80
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d000      	beq.n	80067a8 <UART_SetConfig+0x118>
 80067a6:	e06f      	b.n	8006888 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80067a8:	231f      	movs	r3, #31
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d01f      	beq.n	80067f2 <UART_SetConfig+0x162>
 80067b2:	dc22      	bgt.n	80067fa <UART_SetConfig+0x16a>
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d017      	beq.n	80067e8 <UART_SetConfig+0x158>
 80067b8:	dc1f      	bgt.n	80067fa <UART_SetConfig+0x16a>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <UART_SetConfig+0x134>
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d005      	beq.n	80067ce <UART_SetConfig+0x13e>
 80067c2:	e01a      	b.n	80067fa <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fe fac0 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 80067c8:	0003      	movs	r3, r0
 80067ca:	61bb      	str	r3, [r7, #24]
        break;
 80067cc:	e01c      	b.n	8006808 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80067ce:	4b6b      	ldr	r3, [pc, #428]	@ (800697c <UART_SetConfig+0x2ec>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2207      	movs	r2, #7
 80067d6:	4013      	ands	r3, r2
 80067d8:	3301      	adds	r3, #1
 80067da:	0019      	movs	r1, r3
 80067dc:	4869      	ldr	r0, [pc, #420]	@ (8006984 <UART_SetConfig+0x2f4>)
 80067de:	f7f9 fc93 	bl	8000108 <__udivsi3>
 80067e2:	0003      	movs	r3, r0
 80067e4:	61bb      	str	r3, [r7, #24]
        break;
 80067e6:	e00f      	b.n	8006808 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e8:	f7fe fa38 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 80067ec:	0003      	movs	r3, r0
 80067ee:	61bb      	str	r3, [r7, #24]
        break;
 80067f0:	e00a      	b.n	8006808 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f2:	2380      	movs	r3, #128	@ 0x80
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	61bb      	str	r3, [r7, #24]
        break;
 80067f8:	e006      	b.n	8006808 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067fe:	231e      	movs	r3, #30
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
        break;
 8006806:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d100      	bne.n	8006810 <UART_SetConfig+0x180>
 800680e:	e097      	b.n	8006940 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006814:	4b5c      	ldr	r3, [pc, #368]	@ (8006988 <UART_SetConfig+0x2f8>)
 8006816:	0052      	lsls	r2, r2, #1
 8006818:	5ad3      	ldrh	r3, [r2, r3]
 800681a:	0019      	movs	r1, r3
 800681c:	69b8      	ldr	r0, [r7, #24]
 800681e:	f7f9 fc73 	bl	8000108 <__udivsi3>
 8006822:	0003      	movs	r3, r0
 8006824:	005a      	lsls	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	18d2      	adds	r2, r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	0019      	movs	r1, r3
 8006834:	0010      	movs	r0, r2
 8006836:	f7f9 fc67 	bl	8000108 <__udivsi3>
 800683a:	0003      	movs	r3, r0
 800683c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d91c      	bls.n	800687e <UART_SetConfig+0x1ee>
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	2380      	movs	r3, #128	@ 0x80
 8006848:	025b      	lsls	r3, r3, #9
 800684a:	429a      	cmp	r2, r3
 800684c:	d217      	bcs.n	800687e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	b29a      	uxth	r2, r3
 8006852:	200e      	movs	r0, #14
 8006854:	183b      	adds	r3, r7, r0
 8006856:	210f      	movs	r1, #15
 8006858:	438a      	bics	r2, r1
 800685a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	2207      	movs	r2, #7
 8006864:	4013      	ands	r3, r2
 8006866:	b299      	uxth	r1, r3
 8006868:	183b      	adds	r3, r7, r0
 800686a:	183a      	adds	r2, r7, r0
 800686c:	8812      	ldrh	r2, [r2, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	183a      	adds	r2, r7, r0
 8006878:	8812      	ldrh	r2, [r2, #0]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	e060      	b.n	8006940 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800687e:	231e      	movs	r3, #30
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e05b      	b.n	8006940 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006888:	231f      	movs	r3, #31
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d01f      	beq.n	80068d2 <UART_SetConfig+0x242>
 8006892:	dc22      	bgt.n	80068da <UART_SetConfig+0x24a>
 8006894:	2b04      	cmp	r3, #4
 8006896:	d017      	beq.n	80068c8 <UART_SetConfig+0x238>
 8006898:	dc1f      	bgt.n	80068da <UART_SetConfig+0x24a>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <UART_SetConfig+0x214>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d005      	beq.n	80068ae <UART_SetConfig+0x21e>
 80068a2:	e01a      	b.n	80068da <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fe fa50 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 80068a8:	0003      	movs	r3, r0
 80068aa:	61bb      	str	r3, [r7, #24]
        break;
 80068ac:	e01c      	b.n	80068e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80068ae:	4b33      	ldr	r3, [pc, #204]	@ (800697c <UART_SetConfig+0x2ec>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	2207      	movs	r2, #7
 80068b6:	4013      	ands	r3, r2
 80068b8:	3301      	adds	r3, #1
 80068ba:	0019      	movs	r1, r3
 80068bc:	4831      	ldr	r0, [pc, #196]	@ (8006984 <UART_SetConfig+0x2f4>)
 80068be:	f7f9 fc23 	bl	8000108 <__udivsi3>
 80068c2:	0003      	movs	r3, r0
 80068c4:	61bb      	str	r3, [r7, #24]
        break;
 80068c6:	e00f      	b.n	80068e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c8:	f7fe f9c8 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 80068cc:	0003      	movs	r3, r0
 80068ce:	61bb      	str	r3, [r7, #24]
        break;
 80068d0:	e00a      	b.n	80068e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d2:	2380      	movs	r3, #128	@ 0x80
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	61bb      	str	r3, [r7, #24]
        break;
 80068d8:	e006      	b.n	80068e8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068de:	231e      	movs	r3, #30
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
        break;
 80068e6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d028      	beq.n	8006940 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068f2:	4b25      	ldr	r3, [pc, #148]	@ (8006988 <UART_SetConfig+0x2f8>)
 80068f4:	0052      	lsls	r2, r2, #1
 80068f6:	5ad3      	ldrh	r3, [r2, r3]
 80068f8:	0019      	movs	r1, r3
 80068fa:	69b8      	ldr	r0, [r7, #24]
 80068fc:	f7f9 fc04 	bl	8000108 <__udivsi3>
 8006900:	0003      	movs	r3, r0
 8006902:	001a      	movs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	18d2      	adds	r2, r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	0019      	movs	r1, r3
 8006912:	0010      	movs	r0, r2
 8006914:	f7f9 fbf8 	bl	8000108 <__udivsi3>
 8006918:	0003      	movs	r3, r0
 800691a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d90a      	bls.n	8006938 <UART_SetConfig+0x2a8>
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	2380      	movs	r3, #128	@ 0x80
 8006926:	025b      	lsls	r3, r3, #9
 8006928:	429a      	cmp	r2, r3
 800692a:	d205      	bcs.n	8006938 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e003      	b.n	8006940 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006938:	231e      	movs	r3, #30
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	2201      	movs	r2, #1
 800693e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	226a      	movs	r2, #106	@ 0x6a
 8006944:	2101      	movs	r1, #1
 8006946:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2268      	movs	r2, #104	@ 0x68
 800694c:	2101      	movs	r1, #1
 800694e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800695c:	231e      	movs	r3, #30
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	781b      	ldrb	r3, [r3, #0]
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b008      	add	sp, #32
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	cfff69f3 	.word	0xcfff69f3
 8006970:	ffffcfff 	.word	0xffffcfff
 8006974:	11fff4ff 	.word	0x11fff4ff
 8006978:	40013800 	.word	0x40013800
 800697c:	40021000 	.word	0x40021000
 8006980:	40004400 	.word	0x40004400
 8006984:	02dc6c00 	.word	0x02dc6c00
 8006988:	080085b4 	.word	0x080085b4

0800698c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	2208      	movs	r2, #8
 800699a:	4013      	ands	r3, r2
 800699c:	d00b      	beq.n	80069b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad0 <UART_AdvFeatureConfig+0x144>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	0019      	movs	r1, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ba:	2201      	movs	r2, #1
 80069bc:	4013      	ands	r3, r2
 80069be:	d00b      	beq.n	80069d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4a43      	ldr	r2, [pc, #268]	@ (8006ad4 <UART_AdvFeatureConfig+0x148>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	0019      	movs	r1, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069dc:	2202      	movs	r2, #2
 80069de:	4013      	ands	r3, r2
 80069e0:	d00b      	beq.n	80069fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a3b      	ldr	r2, [pc, #236]	@ (8006ad8 <UART_AdvFeatureConfig+0x14c>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	0019      	movs	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	2204      	movs	r2, #4
 8006a00:	4013      	ands	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4a34      	ldr	r2, [pc, #208]	@ (8006adc <UART_AdvFeatureConfig+0x150>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	0019      	movs	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a20:	2210      	movs	r2, #16
 8006a22:	4013      	ands	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae0 <UART_AdvFeatureConfig+0x154>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	0019      	movs	r1, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a42:	2220      	movs	r2, #32
 8006a44:	4013      	ands	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	4a25      	ldr	r2, [pc, #148]	@ (8006ae4 <UART_AdvFeatureConfig+0x158>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	0019      	movs	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a64:	2240      	movs	r2, #64	@ 0x40
 8006a66:	4013      	ands	r3, r2
 8006a68:	d01d      	beq.n	8006aa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <UART_AdvFeatureConfig+0x15c>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	0019      	movs	r1, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a86:	2380      	movs	r3, #128	@ 0x80
 8006a88:	035b      	lsls	r3, r3, #13
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d10b      	bne.n	8006aa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a15      	ldr	r2, [pc, #84]	@ (8006aec <UART_AdvFeatureConfig+0x160>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aaa:	2280      	movs	r2, #128	@ 0x80
 8006aac:	4013      	ands	r3, r2
 8006aae:	d00b      	beq.n	8006ac8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8006af0 <UART_AdvFeatureConfig+0x164>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	0019      	movs	r1, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }
}
 8006ac8:	46c0      	nop			@ (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b002      	add	sp, #8
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	ffff7fff 	.word	0xffff7fff
 8006ad4:	fffdffff 	.word	0xfffdffff
 8006ad8:	fffeffff 	.word	0xfffeffff
 8006adc:	fffbffff 	.word	0xfffbffff
 8006ae0:	ffffefff 	.word	0xffffefff
 8006ae4:	ffffdfff 	.word	0xffffdfff
 8006ae8:	ffefffff 	.word	0xffefffff
 8006aec:	ff9fffff 	.word	0xff9fffff
 8006af0:	fff7ffff 	.word	0xfff7ffff

08006af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b092      	sub	sp, #72	@ 0x48
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2290      	movs	r2, #144	@ 0x90
 8006b00:	2100      	movs	r1, #0
 8006b02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b04:	f7fb fffe 	bl	8002b04 <HAL_GetTick>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2208      	movs	r2, #8
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d12d      	bne.n	8006b76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1c:	2280      	movs	r2, #128	@ 0x80
 8006b1e:	0391      	lsls	r1, r2, #14
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4a47      	ldr	r2, [pc, #284]	@ (8006c40 <UART_CheckIdleState+0x14c>)
 8006b24:	9200      	str	r2, [sp, #0]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f000 f88e 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b2c:	1e03      	subs	r3, r0, #0
 8006b2e:	d022      	beq.n	8006b76 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b30:	f3ef 8310 	mrs	r3, PRIMASK
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	f383 8810 	msr	PRIMASK, r3
}
 8006b44:	46c0      	nop			@ (mov r8, r8)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2180      	movs	r1, #128	@ 0x80
 8006b52:	438a      	bics	r2, r1
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	f383 8810 	msr	PRIMASK, r3
}
 8006b60:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2288      	movs	r2, #136	@ 0x88
 8006b66:	2120      	movs	r1, #32
 8006b68:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2284      	movs	r2, #132	@ 0x84
 8006b6e:	2100      	movs	r1, #0
 8006b70:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e060      	b.n	8006c38 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d146      	bne.n	8006c12 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b86:	2280      	movs	r2, #128	@ 0x80
 8006b88:	03d1      	lsls	r1, r2, #15
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8006c40 <UART_CheckIdleState+0x14c>)
 8006b8e:	9200      	str	r2, [sp, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f000 f859 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b96:	1e03      	subs	r3, r0, #0
 8006b98:	d03b      	beq.n	8006c12 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f383 8810 	msr	PRIMASK, r3
}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4922      	ldr	r1, [pc, #136]	@ (8006c44 <UART_CheckIdleState+0x150>)
 8006bbc:	400a      	ands	r2, r1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f383 8810 	msr	PRIMASK, r3
}
 8006bca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f383 8810 	msr	PRIMASK, r3
}
 8006be0:	46c0      	nop			@ (mov r8, r8)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2101      	movs	r1, #1
 8006bee:	438a      	bics	r2, r1
 8006bf0:	609a      	str	r2, [r3, #8]
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	f383 8810 	msr	PRIMASK, r3
}
 8006bfc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	228c      	movs	r2, #140	@ 0x8c
 8006c02:	2120      	movs	r1, #32
 8006c04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2284      	movs	r2, #132	@ 0x84
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e012      	b.n	8006c38 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2288      	movs	r2, #136	@ 0x88
 8006c16:	2120      	movs	r1, #32
 8006c18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	228c      	movs	r2, #140	@ 0x8c
 8006c1e:	2120      	movs	r1, #32
 8006c20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2284      	movs	r2, #132	@ 0x84
 8006c32:	2100      	movs	r1, #0
 8006c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	0018      	movs	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b010      	add	sp, #64	@ 0x40
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	01ffffff 	.word	0x01ffffff
 8006c44:	fffffedf 	.word	0xfffffedf

08006c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c58:	e051      	b.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	d04e      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c60:	f7fb ff50 	bl	8002b04 <HAL_GetTick>
 8006c64:	0002      	movs	r2, r0
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d302      	bcc.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e051      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2204      	movs	r2, #4
 8006c82:	4013      	ands	r3, r2
 8006c84:	d03b      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b80      	cmp	r3, #128	@ 0x80
 8006c8a:	d038      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b40      	cmp	r3, #64	@ 0x40
 8006c90:	d035      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d111      	bne.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	0018      	movs	r0, r3
 8006cac:	f000 f960 	bl	8006f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2290      	movs	r2, #144	@ 0x90
 8006cb4:	2108      	movs	r1, #8
 8006cb6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2284      	movs	r2, #132	@ 0x84
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e02c      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69da      	ldr	r2, [r3, #28]
 8006cca:	2380      	movs	r3, #128	@ 0x80
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	401a      	ands	r2, r3
 8006cd0:	2380      	movs	r3, #128	@ 0x80
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d112      	bne.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2280      	movs	r2, #128	@ 0x80
 8006cde:	0112      	lsls	r2, r2, #4
 8006ce0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 f943 	bl	8006f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2290      	movs	r2, #144	@ 0x90
 8006cee:	2120      	movs	r1, #32
 8006cf0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2284      	movs	r2, #132	@ 0x84
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e00f      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	425a      	negs	r2, r3
 8006d0e:	4153      	adcs	r3, r2
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	001a      	movs	r2, r3
 8006d14:	1dfb      	adds	r3, r7, #7
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d09e      	beq.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b098      	sub	sp, #96	@ 0x60
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	1dbb      	adds	r3, r7, #6
 8006d34:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1dba      	adds	r2, r7, #6
 8006d40:	215c      	movs	r1, #92	@ 0x5c
 8006d42:	8812      	ldrh	r2, [r2, #0]
 8006d44:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1dba      	adds	r2, r7, #6
 8006d4a:	215e      	movs	r1, #94	@ 0x5e
 8006d4c:	8812      	ldrh	r2, [r2, #0]
 8006d4e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	2380      	movs	r3, #128	@ 0x80
 8006d5c:	015b      	lsls	r3, r3, #5
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d10d      	bne.n	8006d7e <UART_Start_Receive_IT+0x56>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <UART_Start_Receive_IT+0x4c>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2260      	movs	r2, #96	@ 0x60
 8006d6e:	497b      	ldr	r1, [pc, #492]	@ (8006f5c <UART_Start_Receive_IT+0x234>)
 8006d70:	5299      	strh	r1, [r3, r2]
 8006d72:	e02e      	b.n	8006dd2 <UART_Start_Receive_IT+0xaa>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2260      	movs	r2, #96	@ 0x60
 8006d78:	21ff      	movs	r1, #255	@ 0xff
 8006d7a:	5299      	strh	r1, [r3, r2]
 8006d7c:	e029      	b.n	8006dd2 <UART_Start_Receive_IT+0xaa>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10d      	bne.n	8006da2 <UART_Start_Receive_IT+0x7a>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d104      	bne.n	8006d98 <UART_Start_Receive_IT+0x70>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2260      	movs	r2, #96	@ 0x60
 8006d92:	21ff      	movs	r1, #255	@ 0xff
 8006d94:	5299      	strh	r1, [r3, r2]
 8006d96:	e01c      	b.n	8006dd2 <UART_Start_Receive_IT+0xaa>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2260      	movs	r2, #96	@ 0x60
 8006d9c:	217f      	movs	r1, #127	@ 0x7f
 8006d9e:	5299      	strh	r1, [r3, r2]
 8006da0:	e017      	b.n	8006dd2 <UART_Start_Receive_IT+0xaa>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	2380      	movs	r3, #128	@ 0x80
 8006da8:	055b      	lsls	r3, r3, #21
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d10d      	bne.n	8006dca <UART_Start_Receive_IT+0xa2>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <UART_Start_Receive_IT+0x98>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2260      	movs	r2, #96	@ 0x60
 8006dba:	217f      	movs	r1, #127	@ 0x7f
 8006dbc:	5299      	strh	r1, [r3, r2]
 8006dbe:	e008      	b.n	8006dd2 <UART_Start_Receive_IT+0xaa>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2260      	movs	r2, #96	@ 0x60
 8006dc4:	213f      	movs	r1, #63	@ 0x3f
 8006dc6:	5299      	strh	r1, [r3, r2]
 8006dc8:	e003      	b.n	8006dd2 <UART_Start_Receive_IT+0xaa>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2260      	movs	r2, #96	@ 0x60
 8006dce:	2100      	movs	r1, #0
 8006dd0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2290      	movs	r2, #144	@ 0x90
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	228c      	movs	r2, #140	@ 0x8c
 8006dde:	2122      	movs	r1, #34	@ 0x22
 8006de0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006de2:	f3ef 8310 	mrs	r3, PRIMASK
 8006de6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8006de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dec:	2301      	movs	r3, #1
 8006dee:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df2:	f383 8810 	msr	PRIMASK, r3
}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2101      	movs	r1, #1
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
 8006e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e0e:	f383 8810 	msr	PRIMASK, r3
}
 8006e12:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006e18:	2380      	movs	r3, #128	@ 0x80
 8006e1a:	059b      	lsls	r3, r3, #22
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d150      	bne.n	8006ec2 <UART_Start_Receive_IT+0x19a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2268      	movs	r2, #104	@ 0x68
 8006e24:	5a9b      	ldrh	r3, [r3, r2]
 8006e26:	1dba      	adds	r2, r7, #6
 8006e28:	8812      	ldrh	r2, [r2, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d349      	bcc.n	8006ec2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	2380      	movs	r3, #128	@ 0x80
 8006e34:	015b      	lsls	r3, r3, #5
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d107      	bne.n	8006e4a <UART_Start_Receive_IT+0x122>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d103      	bne.n	8006e4a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a46      	ldr	r2, [pc, #280]	@ (8006f60 <UART_Start_Receive_IT+0x238>)
 8006e46:	675a      	str	r2, [r3, #116]	@ 0x74
 8006e48:	e002      	b.n	8006e50 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a45      	ldr	r2, [pc, #276]	@ (8006f64 <UART_Start_Receive_IT+0x23c>)
 8006e4e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d019      	beq.n	8006e8c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e58:	f3ef 8310 	mrs	r3, PRIMASK
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e62:	2301      	movs	r3, #1
 8006e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	f383 8810 	msr	PRIMASK, r3
}
 8006e6c:	46c0      	nop			@ (mov r8, r8)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2180      	movs	r1, #128	@ 0x80
 8006e7a:	0049      	lsls	r1, r1, #1
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e86:	f383 8810 	msr	PRIMASK, r3
}
 8006e8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e96:	2301      	movs	r3, #1
 8006e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ea0:	46c0      	nop			@ (mov r8, r8)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2180      	movs	r1, #128	@ 0x80
 8006eae:	0549      	lsls	r1, r1, #21
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	f383 8810 	msr	PRIMASK, r3
}
 8006ebe:	46c0      	nop			@ (mov r8, r8)
 8006ec0:	e047      	b.n	8006f52 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	2380      	movs	r3, #128	@ 0x80
 8006ec8:	015b      	lsls	r3, r3, #5
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d107      	bne.n	8006ede <UART_Start_Receive_IT+0x1b6>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4a23      	ldr	r2, [pc, #140]	@ (8006f68 <UART_Start_Receive_IT+0x240>)
 8006eda:	675a      	str	r2, [r3, #116]	@ 0x74
 8006edc:	e002      	b.n	8006ee4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a22      	ldr	r2, [pc, #136]	@ (8006f6c <UART_Start_Receive_IT+0x244>)
 8006ee2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d019      	beq.n	8006f20 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006eec:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ef2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	f383 8810 	msr	PRIMASK, r3
}
 8006f00:	46c0      	nop			@ (mov r8, r8)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2190      	movs	r1, #144	@ 0x90
 8006f0e:	0049      	lsls	r1, r1, #1
 8006f10:	430a      	orrs	r2, r1
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	f383 8810 	msr	PRIMASK, r3
}
 8006f1e:	e018      	b.n	8006f52 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f20:	f3ef 8310 	mrs	r3, PRIMASK
 8006f24:	613b      	str	r3, [r7, #16]
  return(result);
 8006f26:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f28:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f383 8810 	msr	PRIMASK, r3
}
 8006f34:	46c0      	nop			@ (mov r8, r8)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2120      	movs	r1, #32
 8006f42:	430a      	orrs	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f383 8810 	msr	PRIMASK, r3
}
 8006f50:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	0018      	movs	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b018      	add	sp, #96	@ 0x60
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	000001ff 	.word	0x000001ff
 8006f60:	08007ab9 	.word	0x08007ab9
 8006f64:	08007785 	.word	0x08007785
 8006f68:	080075cd 	.word	0x080075cd
 8006f6c:	08007415 	.word	0x08007415

08006f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08e      	sub	sp, #56	@ 0x38
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f78:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f82:	2301      	movs	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	f383 8810 	msr	PRIMASK, r3
}
 8006f8c:	46c0      	nop			@ (mov r8, r8)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4926      	ldr	r1, [pc, #152]	@ (8007034 <UART_EndRxTransfer+0xc4>)
 8006f9a:	400a      	ands	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	f383 8810 	msr	PRIMASK, r3
}
 8006fa8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006faa:	f3ef 8310 	mrs	r3, PRIMASK
 8006fae:	623b      	str	r3, [r7, #32]
  return(result);
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	f383 8810 	msr	PRIMASK, r3
}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	491b      	ldr	r1, [pc, #108]	@ (8007038 <UART_EndRxTransfer+0xc8>)
 8006fcc:	400a      	ands	r2, r1
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	f383 8810 	msr	PRIMASK, r3
}
 8006fda:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d118      	bne.n	8007016 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fee:	2301      	movs	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f383 8810 	msr	PRIMASK, r3
}
 8006ff8:	46c0      	nop			@ (mov r8, r8)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2110      	movs	r1, #16
 8007006:	438a      	bics	r2, r1
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f383 8810 	msr	PRIMASK, r3
}
 8007014:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	228c      	movs	r2, #140	@ 0x8c
 800701a:	2120      	movs	r1, #32
 800701c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800702a:	46c0      	nop			@ (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	b00e      	add	sp, #56	@ 0x38
 8007030:	bd80      	pop	{r7, pc}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	fffffedf 	.word	0xfffffedf
 8007038:	effffffe 	.word	0xeffffffe

0800703c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	225e      	movs	r2, #94	@ 0x5e
 800704e:	2100      	movs	r1, #0
 8007050:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2256      	movs	r2, #86	@ 0x56
 8007056:	2100      	movs	r1, #0
 8007058:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	0018      	movs	r0, r3
 800705e:	f7ff fb03 	bl	8006668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007062:	46c0      	nop			@ (mov r8, r8)
 8007064:	46bd      	mov	sp, r7
 8007066:	b004      	add	sp, #16
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b08a      	sub	sp, #40	@ 0x28
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2288      	movs	r2, #136	@ 0x88
 8007076:	589b      	ldr	r3, [r3, r2]
 8007078:	2b21      	cmp	r3, #33	@ 0x21
 800707a:	d14c      	bne.n	8007116 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2256      	movs	r2, #86	@ 0x56
 8007080:	5a9b      	ldrh	r3, [r3, r2]
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d132      	bne.n	80070ee <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007088:	f3ef 8310 	mrs	r3, PRIMASK
 800708c:	60bb      	str	r3, [r7, #8]
  return(result);
 800708e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
 8007092:	2301      	movs	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f383 8810 	msr	PRIMASK, r3
}
 800709c:	46c0      	nop			@ (mov r8, r8)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2180      	movs	r1, #128	@ 0x80
 80070aa:	438a      	bics	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f383 8810 	msr	PRIMASK, r3
}
 80070b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80070ba:	f3ef 8310 	mrs	r3, PRIMASK
 80070be:	617b      	str	r3, [r7, #20]
  return(result);
 80070c0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	2301      	movs	r3, #1
 80070c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	f383 8810 	msr	PRIMASK, r3
}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2140      	movs	r1, #64	@ 0x40
 80070dc:	430a      	orrs	r2, r1
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80070ec:	e013      	b.n	8007116 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2256      	movs	r2, #86	@ 0x56
 8007108:	5a9b      	ldrh	r3, [r3, r2]
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b299      	uxth	r1, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2256      	movs	r2, #86	@ 0x56
 8007114:	5299      	strh	r1, [r3, r2]
}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	46bd      	mov	sp, r7
 800711a:	b00a      	add	sp, #40	@ 0x28
 800711c:	bd80      	pop	{r7, pc}

0800711e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b08c      	sub	sp, #48	@ 0x30
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2288      	movs	r2, #136	@ 0x88
 800712a:	589b      	ldr	r3, [r3, r2]
 800712c:	2b21      	cmp	r3, #33	@ 0x21
 800712e:	d151      	bne.n	80071d4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2256      	movs	r2, #86	@ 0x56
 8007134:	5a9b      	ldrh	r3, [r3, r2]
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d132      	bne.n	80071a2 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800713c:	f3ef 8310 	mrs	r3, PRIMASK
 8007140:	60fb      	str	r3, [r7, #12]
  return(result);
 8007142:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007146:	2301      	movs	r3, #1
 8007148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f383 8810 	msr	PRIMASK, r3
}
 8007150:	46c0      	nop			@ (mov r8, r8)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2180      	movs	r1, #128	@ 0x80
 800715e:	438a      	bics	r2, r1
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f383 8810 	msr	PRIMASK, r3
}
 800716c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800716e:	f3ef 8310 	mrs	r3, PRIMASK
 8007172:	61bb      	str	r3, [r7, #24]
  return(result);
 8007174:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
 8007178:	2301      	movs	r3, #1
 800717a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	f383 8810 	msr	PRIMASK, r3
}
 8007182:	46c0      	nop			@ (mov r8, r8)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2140      	movs	r1, #64	@ 0x40
 8007190:	430a      	orrs	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	f383 8810 	msr	PRIMASK, r3
}
 800719e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80071a0:	e018      	b.n	80071d4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80071a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	001a      	movs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	05d2      	lsls	r2, r2, #23
 80071b4:	0dd2      	lsrs	r2, r2, #23
 80071b6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2256      	movs	r2, #86	@ 0x56
 80071c6:	5a9b      	ldrh	r3, [r3, r2]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b299      	uxth	r1, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2256      	movs	r2, #86	@ 0x56
 80071d2:	5299      	strh	r1, [r3, r2]
}
 80071d4:	46c0      	nop			@ (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b00c      	add	sp, #48	@ 0x30
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	@ 0x30
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2288      	movs	r2, #136	@ 0x88
 80071e8:	589b      	ldr	r3, [r3, r2]
 80071ea:	2b21      	cmp	r3, #33	@ 0x21
 80071ec:	d165      	bne.n	80072ba <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80071ee:	232e      	movs	r3, #46	@ 0x2e
 80071f0:	18fb      	adds	r3, r7, r3
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	216a      	movs	r1, #106	@ 0x6a
 80071f6:	5a52      	ldrh	r2, [r2, r1]
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e059      	b.n	80072b0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2256      	movs	r2, #86	@ 0x56
 8007200:	5a9b      	ldrh	r3, [r3, r2]
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d133      	bne.n	8007270 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007208:	f3ef 8310 	mrs	r3, PRIMASK
 800720c:	60fb      	str	r3, [r7, #12]
  return(result);
 800720e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007212:	2301      	movs	r3, #1
 8007214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f383 8810 	msr	PRIMASK, r3
}
 800721c:	46c0      	nop			@ (mov r8, r8)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4926      	ldr	r1, [pc, #152]	@ (80072c4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800722a:	400a      	ands	r2, r1
 800722c:	609a      	str	r2, [r3, #8]
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f383 8810 	msr	PRIMASK, r3
}
 8007238:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800723a:	f3ef 8310 	mrs	r3, PRIMASK
 800723e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007240:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
 8007244:	2301      	movs	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f383 8810 	msr	PRIMASK, r3
}
 800724e:	46c0      	nop			@ (mov r8, r8)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2140      	movs	r1, #64	@ 0x40
 800725c:	430a      	orrs	r2, r1
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	f383 8810 	msr	PRIMASK, r3
}
 800726a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800726c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800726e:	e024      	b.n	80072ba <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	2280      	movs	r2, #128	@ 0x80
 8007278:	4013      	ands	r3, r2
 800727a:	d013      	beq.n	80072a4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2256      	movs	r2, #86	@ 0x56
 8007296:	5a9b      	ldrh	r3, [r3, r2]
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b299      	uxth	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2256      	movs	r2, #86	@ 0x56
 80072a2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80072a4:	212e      	movs	r1, #46	@ 0x2e
 80072a6:	187b      	adds	r3, r7, r1
 80072a8:	881a      	ldrh	r2, [r3, #0]
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	3a01      	subs	r2, #1
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	232e      	movs	r3, #46	@ 0x2e
 80072b2:	18fb      	adds	r3, r7, r3
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1a0      	bne.n	80071fc <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80072ba:	46c0      	nop			@ (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b00c      	add	sp, #48	@ 0x30
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			@ (mov r8, r8)
 80072c4:	ff7fffff 	.word	0xff7fffff

080072c8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08c      	sub	sp, #48	@ 0x30
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2288      	movs	r2, #136	@ 0x88
 80072d4:	589b      	ldr	r3, [r3, r2]
 80072d6:	2b21      	cmp	r3, #33	@ 0x21
 80072d8:	d16a      	bne.n	80073b0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80072da:	232e      	movs	r3, #46	@ 0x2e
 80072dc:	18fb      	adds	r3, r7, r3
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	216a      	movs	r1, #106	@ 0x6a
 80072e2:	5a52      	ldrh	r2, [r2, r1]
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e05e      	b.n	80073a6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2256      	movs	r2, #86	@ 0x56
 80072ec:	5a9b      	ldrh	r3, [r3, r2]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d133      	bne.n	800735c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072f4:	f3ef 8310 	mrs	r3, PRIMASK
 80072f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80072fa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80072fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80072fe:	2301      	movs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			@ (mov r8, r8)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4928      	ldr	r1, [pc, #160]	@ (80073b8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8007316:	400a      	ands	r2, r1
 8007318:	609a      	str	r2, [r3, #8]
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f383 8810 	msr	PRIMASK, r3
}
 8007324:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007326:	f3ef 8310 	mrs	r3, PRIMASK
 800732a:	617b      	str	r3, [r7, #20]
  return(result);
 800732c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800732e:	623b      	str	r3, [r7, #32]
 8007330:	2301      	movs	r3, #1
 8007332:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f383 8810 	msr	PRIMASK, r3
}
 800733a:	46c0      	nop			@ (mov r8, r8)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2140      	movs	r1, #64	@ 0x40
 8007348:	430a      	orrs	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8007358:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800735a:	e029      	b.n	80073b0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	2280      	movs	r2, #128	@ 0x80
 8007364:	4013      	ands	r3, r2
 8007366:	d018      	beq.n	800739a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800736c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800736e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	001a      	movs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	05d2      	lsls	r2, r2, #23
 800737a:	0dd2      	lsrs	r2, r2, #23
 800737c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007382:	1c9a      	adds	r2, r3, #2
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2256      	movs	r2, #86	@ 0x56
 800738c:	5a9b      	ldrh	r3, [r3, r2]
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b299      	uxth	r1, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2256      	movs	r2, #86	@ 0x56
 8007398:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800739a:	212e      	movs	r1, #46	@ 0x2e
 800739c:	187b      	adds	r3, r7, r1
 800739e:	881a      	ldrh	r2, [r3, #0]
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	3a01      	subs	r2, #1
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	232e      	movs	r3, #46	@ 0x2e
 80073a8:	18fb      	adds	r3, r7, r3
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d19b      	bne.n	80072e8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80073b0:	46c0      	nop			@ (mov r8, r8)
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b00c      	add	sp, #48	@ 0x30
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	ff7fffff 	.word	0xff7fffff

080073bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073c4:	f3ef 8310 	mrs	r3, PRIMASK
 80073c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ca:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	2301      	movs	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f383 8810 	msr	PRIMASK, r3
}
 80073d8:	46c0      	nop			@ (mov r8, r8)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2140      	movs	r1, #64	@ 0x40
 80073e6:	438a      	bics	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f383 8810 	msr	PRIMASK, r3
}
 80073f4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2288      	movs	r2, #136	@ 0x88
 80073fa:	2120      	movs	r1, #32
 80073fc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	0018      	movs	r0, r3
 8007408:	f7fa fd24 	bl	8001e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800740c:	46c0      	nop			@ (mov r8, r8)
 800740e:	46bd      	mov	sp, r7
 8007410:	b006      	add	sp, #24
 8007412:	bd80      	pop	{r7, pc}

08007414 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b094      	sub	sp, #80	@ 0x50
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800741c:	204e      	movs	r0, #78	@ 0x4e
 800741e:	183b      	adds	r3, r7, r0
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	2160      	movs	r1, #96	@ 0x60
 8007424:	5a52      	ldrh	r2, [r2, r1]
 8007426:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	228c      	movs	r2, #140	@ 0x8c
 800742c:	589b      	ldr	r3, [r3, r2]
 800742e:	2b22      	cmp	r3, #34	@ 0x22
 8007430:	d000      	beq.n	8007434 <UART_RxISR_8BIT+0x20>
 8007432:	e0ba      	b.n	80075aa <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800743a:	214c      	movs	r1, #76	@ 0x4c
 800743c:	187b      	adds	r3, r7, r1
 800743e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007440:	187b      	adds	r3, r7, r1
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b2da      	uxtb	r2, r3
 8007446:	183b      	adds	r3, r7, r0
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b2d9      	uxtb	r1, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007450:	400a      	ands	r2, r1
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	225e      	movs	r2, #94	@ 0x5e
 8007464:	5a9b      	ldrh	r3, [r3, r2]
 8007466:	b29b      	uxth	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	b299      	uxth	r1, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	225e      	movs	r2, #94	@ 0x5e
 8007470:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	225e      	movs	r2, #94	@ 0x5e
 8007476:	5a9b      	ldrh	r3, [r3, r2]
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d000      	beq.n	8007480 <UART_RxISR_8BIT+0x6c>
 800747e:	e09c      	b.n	80075ba <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007480:	f3ef 8310 	mrs	r3, PRIMASK
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800748a:	2301      	movs	r3, #1
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	f383 8810 	msr	PRIMASK, r3
}
 8007494:	46c0      	nop			@ (mov r8, r8)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4948      	ldr	r1, [pc, #288]	@ (80075c4 <UART_RxISR_8BIT+0x1b0>)
 80074a2:	400a      	ands	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	f383 8810 	msr	PRIMASK, r3
}
 80074b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074b2:	f3ef 8310 	mrs	r3, PRIMASK
 80074b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80074bc:	2301      	movs	r3, #1
 80074be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c2:	f383 8810 	msr	PRIMASK, r3
}
 80074c6:	46c0      	nop			@ (mov r8, r8)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2101      	movs	r1, #1
 80074d4:	438a      	bics	r2, r1
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074da:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074de:	f383 8810 	msr	PRIMASK, r3
}
 80074e2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	228c      	movs	r2, #140	@ 0x8c
 80074e8:	2120      	movs	r1, #32
 80074ea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	2380      	movs	r3, #128	@ 0x80
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	4013      	ands	r3, r2
 8007504:	d018      	beq.n	8007538 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007506:	f3ef 8310 	mrs	r3, PRIMASK
 800750a:	61bb      	str	r3, [r7, #24]
  return(result);
 800750c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800750e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007510:	2301      	movs	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f383 8810 	msr	PRIMASK, r3
}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4928      	ldr	r1, [pc, #160]	@ (80075c8 <UART_RxISR_8BIT+0x1b4>)
 8007528:	400a      	ands	r2, r1
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800752e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f383 8810 	msr	PRIMASK, r3
}
 8007536:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d12f      	bne.n	80075a0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007546:	f3ef 8310 	mrs	r3, PRIMASK
 800754a:	60fb      	str	r3, [r7, #12]
  return(result);
 800754c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007550:	2301      	movs	r3, #1
 8007552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f383 8810 	msr	PRIMASK, r3
}
 800755a:	46c0      	nop			@ (mov r8, r8)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2110      	movs	r1, #16
 8007568:	438a      	bics	r2, r1
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f383 8810 	msr	PRIMASK, r3
}
 8007576:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	2210      	movs	r2, #16
 8007580:	4013      	ands	r3, r2
 8007582:	2b10      	cmp	r3, #16
 8007584:	d103      	bne.n	800758e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2210      	movs	r2, #16
 800758c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	225c      	movs	r2, #92	@ 0x5c
 8007592:	5a9a      	ldrh	r2, [r3, r2]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	0011      	movs	r1, r2
 8007598:	0018      	movs	r0, r3
 800759a:	f7ff f86d 	bl	8006678 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800759e:	e00c      	b.n	80075ba <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7fa fc48 	bl	8001e38 <HAL_UART_RxCpltCallback>
}
 80075a8:	e007      	b.n	80075ba <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699a      	ldr	r2, [r3, #24]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2108      	movs	r1, #8
 80075b6:	430a      	orrs	r2, r1
 80075b8:	619a      	str	r2, [r3, #24]
}
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	46bd      	mov	sp, r7
 80075be:	b014      	add	sp, #80	@ 0x50
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	46c0      	nop			@ (mov r8, r8)
 80075c4:	fffffedf 	.word	0xfffffedf
 80075c8:	fbffffff 	.word	0xfbffffff

080075cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b094      	sub	sp, #80	@ 0x50
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075d4:	204e      	movs	r0, #78	@ 0x4e
 80075d6:	183b      	adds	r3, r7, r0
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	2160      	movs	r1, #96	@ 0x60
 80075dc:	5a52      	ldrh	r2, [r2, r1]
 80075de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	228c      	movs	r2, #140	@ 0x8c
 80075e4:	589b      	ldr	r3, [r3, r2]
 80075e6:	2b22      	cmp	r3, #34	@ 0x22
 80075e8:	d000      	beq.n	80075ec <UART_RxISR_16BIT+0x20>
 80075ea:	e0ba      	b.n	8007762 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075f2:	214c      	movs	r1, #76	@ 0x4c
 80075f4:	187b      	adds	r3, r7, r1
 80075f6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80075fe:	187b      	adds	r3, r7, r1
 8007600:	183a      	adds	r2, r7, r0
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	8812      	ldrh	r2, [r2, #0]
 8007606:	4013      	ands	r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800760c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007612:	1c9a      	adds	r2, r3, #2
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	225e      	movs	r2, #94	@ 0x5e
 800761c:	5a9b      	ldrh	r3, [r3, r2]
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b299      	uxth	r1, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	225e      	movs	r2, #94	@ 0x5e
 8007628:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	225e      	movs	r2, #94	@ 0x5e
 800762e:	5a9b      	ldrh	r3, [r3, r2]
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d000      	beq.n	8007638 <UART_RxISR_16BIT+0x6c>
 8007636:	e09c      	b.n	8007772 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007638:	f3ef 8310 	mrs	r3, PRIMASK
 800763c:	623b      	str	r3, [r7, #32]
  return(result);
 800763e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007640:	647b      	str	r3, [r7, #68]	@ 0x44
 8007642:	2301      	movs	r3, #1
 8007644:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	f383 8810 	msr	PRIMASK, r3
}
 800764c:	46c0      	nop			@ (mov r8, r8)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4948      	ldr	r1, [pc, #288]	@ (800777c <UART_RxISR_16BIT+0x1b0>)
 800765a:	400a      	ands	r2, r1
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007660:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007664:	f383 8810 	msr	PRIMASK, r3
}
 8007668:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800766a:	f3ef 8310 	mrs	r3, PRIMASK
 800766e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	643b      	str	r3, [r7, #64]	@ 0x40
 8007674:	2301      	movs	r3, #1
 8007676:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	f383 8810 	msr	PRIMASK, r3
}
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2101      	movs	r1, #1
 800768c:	438a      	bics	r2, r1
 800768e:	609a      	str	r2, [r3, #8]
 8007690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007696:	f383 8810 	msr	PRIMASK, r3
}
 800769a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	228c      	movs	r2, #140	@ 0x8c
 80076a0:	2120      	movs	r1, #32
 80076a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	2380      	movs	r3, #128	@ 0x80
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	4013      	ands	r3, r2
 80076bc:	d018      	beq.n	80076f0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	617b      	str	r3, [r7, #20]
  return(result);
 80076c4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c8:	2301      	movs	r3, #1
 80076ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	f383 8810 	msr	PRIMASK, r3
}
 80076d2:	46c0      	nop			@ (mov r8, r8)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4928      	ldr	r1, [pc, #160]	@ (8007780 <UART_RxISR_16BIT+0x1b4>)
 80076e0:	400a      	ands	r2, r1
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f383 8810 	msr	PRIMASK, r3
}
 80076ee:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d12f      	bne.n	8007758 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80076fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007702:	60bb      	str	r3, [r7, #8]
  return(result);
 8007704:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007708:	2301      	movs	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f383 8810 	msr	PRIMASK, r3
}
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2110      	movs	r1, #16
 8007720:	438a      	bics	r2, r1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f383 8810 	msr	PRIMASK, r3
}
 800772e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	2210      	movs	r2, #16
 8007738:	4013      	ands	r3, r2
 800773a:	2b10      	cmp	r3, #16
 800773c:	d103      	bne.n	8007746 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2210      	movs	r2, #16
 8007744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	225c      	movs	r2, #92	@ 0x5c
 800774a:	5a9a      	ldrh	r2, [r3, r2]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	0011      	movs	r1, r2
 8007750:	0018      	movs	r0, r3
 8007752:	f7fe ff91 	bl	8006678 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007756:	e00c      	b.n	8007772 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0018      	movs	r0, r3
 800775c:	f7fa fb6c 	bl	8001e38 <HAL_UART_RxCpltCallback>
}
 8007760:	e007      	b.n	8007772 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699a      	ldr	r2, [r3, #24]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2108      	movs	r1, #8
 800776e:	430a      	orrs	r2, r1
 8007770:	619a      	str	r2, [r3, #24]
}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	46bd      	mov	sp, r7
 8007776:	b014      	add	sp, #80	@ 0x50
 8007778:	bd80      	pop	{r7, pc}
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	fffffedf 	.word	0xfffffedf
 8007780:	fbffffff 	.word	0xfbffffff

08007784 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b0a0      	sub	sp, #128	@ 0x80
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800778c:	237a      	movs	r3, #122	@ 0x7a
 800778e:	18fb      	adds	r3, r7, r3
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	2160      	movs	r1, #96	@ 0x60
 8007794:	5a52      	ldrh	r2, [r2, r1]
 8007796:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	228c      	movs	r2, #140	@ 0x8c
 80077b4:	589b      	ldr	r3, [r3, r2]
 80077b6:	2b22      	cmp	r3, #34	@ 0x22
 80077b8:	d000      	beq.n	80077bc <UART_RxISR_8BIT_FIFOEN+0x38>
 80077ba:	e166      	b.n	8007a8a <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077bc:	236e      	movs	r3, #110	@ 0x6e
 80077be:	18fb      	adds	r3, r7, r3
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	2168      	movs	r1, #104	@ 0x68
 80077c4:	5a52      	ldrh	r2, [r2, r1]
 80077c6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077c8:	e10d      	b.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077d0:	216c      	movs	r1, #108	@ 0x6c
 80077d2:	187b      	adds	r3, r7, r1
 80077d4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	237a      	movs	r3, #122	@ 0x7a
 80077de:	18fb      	adds	r3, r7, r3
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	b2d9      	uxtb	r1, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e8:	400a      	ands	r2, r1
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	225e      	movs	r2, #94	@ 0x5e
 80077fc:	5a9b      	ldrh	r3, [r3, r2]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b299      	uxth	r1, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	225e      	movs	r2, #94	@ 0x5e
 8007808:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007814:	2207      	movs	r2, #7
 8007816:	4013      	ands	r3, r2
 8007818:	d049      	beq.n	80078ae <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800781a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800781c:	2201      	movs	r2, #1
 800781e:	4013      	ands	r3, r2
 8007820:	d010      	beq.n	8007844 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007822:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007824:	2380      	movs	r3, #128	@ 0x80
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4013      	ands	r3, r2
 800782a:	d00b      	beq.n	8007844 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2201      	movs	r2, #1
 8007832:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2290      	movs	r2, #144	@ 0x90
 8007838:	589b      	ldr	r3, [r3, r2]
 800783a:	2201      	movs	r2, #1
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2190      	movs	r1, #144	@ 0x90
 8007842:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007844:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007846:	2202      	movs	r2, #2
 8007848:	4013      	ands	r3, r2
 800784a:	d00f      	beq.n	800786c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800784c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800784e:	2201      	movs	r2, #1
 8007850:	4013      	ands	r3, r2
 8007852:	d00b      	beq.n	800786c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2202      	movs	r2, #2
 800785a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2290      	movs	r2, #144	@ 0x90
 8007860:	589b      	ldr	r3, [r3, r2]
 8007862:	2204      	movs	r2, #4
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2190      	movs	r1, #144	@ 0x90
 800786a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800786c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800786e:	2204      	movs	r2, #4
 8007870:	4013      	ands	r3, r2
 8007872:	d00f      	beq.n	8007894 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007876:	2201      	movs	r2, #1
 8007878:	4013      	ands	r3, r2
 800787a:	d00b      	beq.n	8007894 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2204      	movs	r2, #4
 8007882:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2290      	movs	r2, #144	@ 0x90
 8007888:	589b      	ldr	r3, [r3, r2]
 800788a:	2202      	movs	r2, #2
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2190      	movs	r1, #144	@ 0x90
 8007892:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2290      	movs	r2, #144	@ 0x90
 8007898:	589b      	ldr	r3, [r3, r2]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7fe fee1 	bl	8006668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2290      	movs	r2, #144	@ 0x90
 80078aa:	2100      	movs	r1, #0
 80078ac:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	225e      	movs	r2, #94	@ 0x5e
 80078b2:	5a9b      	ldrh	r3, [r3, r2]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d000      	beq.n	80078bc <UART_RxISR_8BIT_FIFOEN+0x138>
 80078ba:	e094      	b.n	80079e6 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80078bc:	f3ef 8310 	mrs	r3, PRIMASK
 80078c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078c6:	2301      	movs	r3, #1
 80078c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078cc:	f383 8810 	msr	PRIMASK, r3
}
 80078d0:	46c0      	nop			@ (mov r8, r8)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4971      	ldr	r1, [pc, #452]	@ (8007aa4 <UART_RxISR_8BIT_FIFOEN+0x320>)
 80078de:	400a      	ands	r2, r1
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078e4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e8:	f383 8810 	msr	PRIMASK, r3
}
 80078ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80078ee:	f3ef 8310 	mrs	r3, PRIMASK
 80078f2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80078f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80078f8:	2301      	movs	r3, #1
 80078fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078fe:	f383 8810 	msr	PRIMASK, r3
}
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4966      	ldr	r1, [pc, #408]	@ (8007aa8 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8007910:	400a      	ands	r2, r1
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800791a:	f383 8810 	msr	PRIMASK, r3
}
 800791e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	228c      	movs	r2, #140	@ 0x8c
 8007924:	2120      	movs	r1, #32
 8007926:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	2380      	movs	r3, #128	@ 0x80
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	4013      	ands	r3, r2
 8007940:	d018      	beq.n	8007974 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007942:	f3ef 8310 	mrs	r3, PRIMASK
 8007946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8007948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800794a:	663b      	str	r3, [r7, #96]	@ 0x60
 800794c:	2301      	movs	r3, #1
 800794e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	f383 8810 	msr	PRIMASK, r3
}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4952      	ldr	r1, [pc, #328]	@ (8007aac <UART_RxISR_8BIT_FIFOEN+0x328>)
 8007964:	400a      	ands	r2, r1
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800796a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796e:	f383 8810 	msr	PRIMASK, r3
}
 8007972:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d12f      	bne.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007982:	f3ef 8310 	mrs	r3, PRIMASK
 8007986:	623b      	str	r3, [r7, #32]
  return(result);
 8007988:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800798c:	2301      	movs	r3, #1
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	f383 8810 	msr	PRIMASK, r3
}
 8007996:	46c0      	nop			@ (mov r8, r8)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2110      	movs	r1, #16
 80079a4:	438a      	bics	r2, r1
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ae:	f383 8810 	msr	PRIMASK, r3
}
 80079b2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	2210      	movs	r2, #16
 80079bc:	4013      	ands	r3, r2
 80079be:	2b10      	cmp	r3, #16
 80079c0:	d103      	bne.n	80079ca <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2210      	movs	r2, #16
 80079c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	225c      	movs	r2, #92	@ 0x5c
 80079ce:	5a9a      	ldrh	r2, [r3, r2]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	0011      	movs	r1, r2
 80079d4:	0018      	movs	r0, r3
 80079d6:	f7fe fe4f 	bl	8006678 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80079da:	e00e      	b.n	80079fa <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	0018      	movs	r0, r3
 80079e0:	f7fa fa2a 	bl	8001e38 <HAL_UART_RxCpltCallback>
        break;
 80079e4:	e009      	b.n	80079fa <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079e6:	236e      	movs	r3, #110	@ 0x6e
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d004      	beq.n	80079fa <UART_RxISR_8BIT_FIFOEN+0x276>
 80079f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079f2:	2220      	movs	r2, #32
 80079f4:	4013      	ands	r3, r2
 80079f6:	d000      	beq.n	80079fa <UART_RxISR_8BIT_FIFOEN+0x276>
 80079f8:	e6e7      	b.n	80077ca <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079fa:	205a      	movs	r0, #90	@ 0x5a
 80079fc:	183b      	adds	r3, r7, r0
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	215e      	movs	r1, #94	@ 0x5e
 8007a02:	5a52      	ldrh	r2, [r2, r1]
 8007a04:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a06:	0001      	movs	r1, r0
 8007a08:	187b      	adds	r3, r7, r1
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d044      	beq.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0x316>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2268      	movs	r2, #104	@ 0x68
 8007a14:	5a9b      	ldrh	r3, [r3, r2]
 8007a16:	187a      	adds	r2, r7, r1
 8007a18:	8812      	ldrh	r2, [r2, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d23d      	bcs.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a24:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a28:	2301      	movs	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f383 8810 	msr	PRIMASK, r3
}
 8007a32:	46c0      	nop			@ (mov r8, r8)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	491c      	ldr	r1, [pc, #112]	@ (8007ab0 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8007a40:	400a      	ands	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]
 8007a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f383 8810 	msr	PRIMASK, r3
}
 8007a4e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a18      	ldr	r2, [pc, #96]	@ (8007ab4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007a54:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a56:	f3ef 8310 	mrs	r3, PRIMASK
 8007a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a5c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a60:	2301      	movs	r3, #1
 8007a62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	f383 8810 	msr	PRIMASK, r3
}
 8007a6a:	46c0      	nop			@ (mov r8, r8)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2120      	movs	r1, #32
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f383 8810 	msr	PRIMASK, r3
}
 8007a86:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a88:	e007      	b.n	8007a9a <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699a      	ldr	r2, [r3, #24]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2108      	movs	r1, #8
 8007a96:	430a      	orrs	r2, r1
 8007a98:	619a      	str	r2, [r3, #24]
}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b020      	add	sp, #128	@ 0x80
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			@ (mov r8, r8)
 8007aa4:	fffffeff 	.word	0xfffffeff
 8007aa8:	effffffe 	.word	0xeffffffe
 8007aac:	fbffffff 	.word	0xfbffffff
 8007ab0:	efffffff 	.word	0xefffffff
 8007ab4:	08007415 	.word	0x08007415

08007ab8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b0a2      	sub	sp, #136	@ 0x88
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ac0:	2382      	movs	r3, #130	@ 0x82
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	2160      	movs	r1, #96	@ 0x60
 8007ac8:	5a52      	ldrh	r2, [r2, r1]
 8007aca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	2284      	movs	r2, #132	@ 0x84
 8007ad4:	18ba      	adds	r2, r7, r2
 8007ad6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	228c      	movs	r2, #140	@ 0x8c
 8007aec:	589b      	ldr	r3, [r3, r2]
 8007aee:	2b22      	cmp	r3, #34	@ 0x22
 8007af0:	d000      	beq.n	8007af4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007af2:	e170      	b.n	8007dd6 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007af4:	2376      	movs	r3, #118	@ 0x76
 8007af6:	18fb      	adds	r3, r7, r3
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	2168      	movs	r1, #104	@ 0x68
 8007afc:	5a52      	ldrh	r2, [r2, r1]
 8007afe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b00:	e115      	b.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b08:	2174      	movs	r1, #116	@ 0x74
 8007b0a:	187b      	adds	r3, r7, r1
 8007b0c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b12:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b14:	187b      	adds	r3, r7, r1
 8007b16:	2282      	movs	r2, #130	@ 0x82
 8007b18:	18ba      	adds	r2, r7, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	8812      	ldrh	r2, [r2, #0]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	225e      	movs	r2, #94	@ 0x5e
 8007b34:	5a9b      	ldrh	r3, [r3, r2]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b299      	uxth	r1, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	225e      	movs	r2, #94	@ 0x5e
 8007b40:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	2184      	movs	r1, #132	@ 0x84
 8007b4a:	187a      	adds	r2, r7, r1
 8007b4c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b4e:	187b      	adds	r3, r7, r1
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2207      	movs	r2, #7
 8007b54:	4013      	ands	r3, r2
 8007b56:	d04e      	beq.n	8007bf6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b58:	187b      	adds	r3, r7, r1
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	4013      	ands	r3, r2
 8007b60:	d010      	beq.n	8007b84 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8007b62:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d00b      	beq.n	8007b84 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2201      	movs	r2, #1
 8007b72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2290      	movs	r2, #144	@ 0x90
 8007b78:	589b      	ldr	r3, [r3, r2]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2190      	movs	r1, #144	@ 0x90
 8007b82:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b84:	2384      	movs	r3, #132	@ 0x84
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	d00f      	beq.n	8007bb0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b92:	2201      	movs	r2, #1
 8007b94:	4013      	ands	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2290      	movs	r2, #144	@ 0x90
 8007ba4:	589b      	ldr	r3, [r3, r2]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2190      	movs	r1, #144	@ 0x90
 8007bae:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb0:	2384      	movs	r3, #132	@ 0x84
 8007bb2:	18fb      	adds	r3, r7, r3
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	4013      	ands	r3, r2
 8007bba:	d00f      	beq.n	8007bdc <UART_RxISR_16BIT_FIFOEN+0x124>
 8007bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d00b      	beq.n	8007bdc <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2290      	movs	r2, #144	@ 0x90
 8007bd0:	589b      	ldr	r3, [r3, r2]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2190      	movs	r1, #144	@ 0x90
 8007bda:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2290      	movs	r2, #144	@ 0x90
 8007be0:	589b      	ldr	r3, [r3, r2]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d007      	beq.n	8007bf6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f7fe fd3d 	bl	8006668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2290      	movs	r2, #144	@ 0x90
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	225e      	movs	r2, #94	@ 0x5e
 8007bfa:	5a9b      	ldrh	r3, [r3, r2]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d000      	beq.n	8007c04 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007c02:	e094      	b.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c04:	f3ef 8310 	mrs	r3, PRIMASK
 8007c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8007c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c0e:	2301      	movs	r3, #1
 8007c10:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c14:	f383 8810 	msr	PRIMASK, r3
}
 8007c18:	46c0      	nop			@ (mov r8, r8)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4972      	ldr	r1, [pc, #456]	@ (8007df0 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8007c26:	400a      	ands	r2, r1
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c30:	f383 8810 	msr	PRIMASK, r3
}
 8007c34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c36:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c40:	2301      	movs	r3, #1
 8007c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c46:	f383 8810 	msr	PRIMASK, r3
}
 8007c4a:	46c0      	nop			@ (mov r8, r8)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4967      	ldr	r1, [pc, #412]	@ (8007df4 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8007c58:	400a      	ands	r2, r1
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c5e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c62:	f383 8810 	msr	PRIMASK, r3
}
 8007c66:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	228c      	movs	r2, #140	@ 0x8c
 8007c6c:	2120      	movs	r1, #32
 8007c6e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	2380      	movs	r3, #128	@ 0x80
 8007c84:	041b      	lsls	r3, r3, #16
 8007c86:	4013      	ands	r3, r2
 8007c88:	d018      	beq.n	8007cbc <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c94:	2301      	movs	r3, #1
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9a:	f383 8810 	msr	PRIMASK, r3
}
 8007c9e:	46c0      	nop			@ (mov r8, r8)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4953      	ldr	r1, [pc, #332]	@ (8007df8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8007cac:	400a      	ands	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb6:	f383 8810 	msr	PRIMASK, r3
}
 8007cba:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d12f      	bne.n	8007d24 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007cca:	f3ef 8310 	mrs	r3, PRIMASK
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cda:	f383 8810 	msr	PRIMASK, r3
}
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2110      	movs	r1, #16
 8007cec:	438a      	bics	r2, r1
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf6:	f383 8810 	msr	PRIMASK, r3
}
 8007cfa:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	2210      	movs	r2, #16
 8007d04:	4013      	ands	r3, r2
 8007d06:	2b10      	cmp	r3, #16
 8007d08:	d103      	bne.n	8007d12 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2210      	movs	r2, #16
 8007d10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	225c      	movs	r2, #92	@ 0x5c
 8007d16:	5a9a      	ldrh	r2, [r3, r2]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	0011      	movs	r1, r2
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f7fe fcab 	bl	8006678 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007d22:	e010      	b.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7fa f886 	bl	8001e38 <HAL_UART_RxCpltCallback>
        break;
 8007d2c:	e00b      	b.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d2e:	2376      	movs	r3, #118	@ 0x76
 8007d30:	18fb      	adds	r3, r7, r3
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d006      	beq.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8007d38:	2384      	movs	r3, #132	@ 0x84
 8007d3a:	18fb      	adds	r3, r7, r3
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	4013      	ands	r3, r2
 8007d42:	d000      	beq.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8007d44:	e6dd      	b.n	8007b02 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d46:	205e      	movs	r0, #94	@ 0x5e
 8007d48:	183b      	adds	r3, r7, r0
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	215e      	movs	r1, #94	@ 0x5e
 8007d4e:	5a52      	ldrh	r2, [r2, r1]
 8007d50:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d52:	0001      	movs	r1, r0
 8007d54:	187b      	adds	r3, r7, r1
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d044      	beq.n	8007de6 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2268      	movs	r2, #104	@ 0x68
 8007d60:	5a9b      	ldrh	r3, [r3, r2]
 8007d62:	187a      	adds	r2, r7, r1
 8007d64:	8812      	ldrh	r2, [r2, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d23d      	bcs.n	8007de6 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d70:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d74:	2301      	movs	r3, #1
 8007d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f383 8810 	msr	PRIMASK, r3
}
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	491c      	ldr	r1, [pc, #112]	@ (8007dfc <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007d8c:	400a      	ands	r2, r1
 8007d8e:	609a      	str	r2, [r3, #8]
 8007d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f383 8810 	msr	PRIMASK, r3
}
 8007d9a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a18      	ldr	r2, [pc, #96]	@ (8007e00 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8007da0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007da2:	f3ef 8310 	mrs	r3, PRIMASK
 8007da6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007da8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007daa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dac:	2301      	movs	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	f383 8810 	msr	PRIMASK, r3
}
 8007db6:	46c0      	nop			@ (mov r8, r8)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2120      	movs	r1, #32
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	f383 8810 	msr	PRIMASK, r3
}
 8007dd2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dd4:	e007      	b.n	8007de6 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2108      	movs	r1, #8
 8007de2:	430a      	orrs	r2, r1
 8007de4:	619a      	str	r2, [r3, #24]
}
 8007de6:	46c0      	nop			@ (mov r8, r8)
 8007de8:	46bd      	mov	sp, r7
 8007dea:	b022      	add	sp, #136	@ 0x88
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	46c0      	nop			@ (mov r8, r8)
 8007df0:	fffffeff 	.word	0xfffffeff
 8007df4:	effffffe 	.word	0xeffffffe
 8007df8:	fbffffff 	.word	0xfbffffff
 8007dfc:	efffffff 	.word	0xefffffff
 8007e00:	080075cd 	.word	0x080075cd

08007e04 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e05d      	b.n	8007ed8 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2288      	movs	r2, #136	@ 0x88
 8007e20:	589b      	ldr	r3, [r3, r2]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2284      	movs	r2, #132	@ 0x84
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7fa fccd 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2288      	movs	r2, #136	@ 0x88
 8007e3a:	2124      	movs	r1, #36	@ 0x24
 8007e3c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2101      	movs	r1, #1
 8007e4a:	438a      	bics	r2, r1
 8007e4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f7fe fd97 	bl	800698c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	0018      	movs	r0, r3
 8007e62:	f7fe fc15 	bl	8006690 <UART_SetConfig>
 8007e66:	0003      	movs	r3, r0
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e033      	b.n	8007ed8 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2180      	movs	r1, #128	@ 0x80
 8007e7c:	01c9      	lsls	r1, r1, #7
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4a15      	ldr	r2, [pc, #84]	@ (8007ee0 <HAL_RS485Ex_Init+0xdc>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	0019      	movs	r1, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	055b      	lsls	r3, r3, #21
 8007e9c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	041b      	lsls	r3, r3, #16
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee4 <HAL_RS485Ex_Init+0xe0>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	0019      	movs	r1, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2101      	movs	r1, #1
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f7fe fe0f 	bl	8006af4 <UART_CheckIdleState>
 8007ed6:	0003      	movs	r3, r0
}
 8007ed8:	0018      	movs	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	b006      	add	sp, #24
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	ffff7fff 	.word	0xffff7fff
 8007ee4:	fc00ffff 	.word	0xfc00ffff

08007ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ef0:	46c0      	nop			@ (mov r8, r8)
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b002      	add	sp, #8
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f00:	46c0      	nop			@ (mov r8, r8)
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b002      	add	sp, #8
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f10:	46c0      	nop			@ (mov r8, r8)
 8007f12:	46bd      	mov	sp, r7
 8007f14:	b002      	add	sp, #8
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2284      	movs	r2, #132	@ 0x84
 8007f24:	5c9b      	ldrb	r3, [r3, r2]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_UARTEx_DisableFifoMode+0x16>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e027      	b.n	8007f7e <HAL_UARTEx_DisableFifoMode+0x66>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2284      	movs	r2, #132	@ 0x84
 8007f32:	2101      	movs	r1, #1
 8007f34:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2288      	movs	r2, #136	@ 0x88
 8007f3a:	2124      	movs	r1, #36	@ 0x24
 8007f3c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2101      	movs	r1, #1
 8007f52:	438a      	bics	r2, r1
 8007f54:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a0b      	ldr	r2, [pc, #44]	@ (8007f88 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2288      	movs	r2, #136	@ 0x88
 8007f70:	2120      	movs	r1, #32
 8007f72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2284      	movs	r2, #132	@ 0x84
 8007f78:	2100      	movs	r1, #0
 8007f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	0018      	movs	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b004      	add	sp, #16
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	46c0      	nop			@ (mov r8, r8)
 8007f88:	dfffffff 	.word	0xdfffffff

08007f8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2284      	movs	r2, #132	@ 0x84
 8007f9a:	5c9b      	ldrb	r3, [r3, r2]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e02e      	b.n	8008002 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2284      	movs	r2, #132	@ 0x84
 8007fa8:	2101      	movs	r1, #1
 8007faa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2288      	movs	r2, #136	@ 0x88
 8007fb0:	2124      	movs	r1, #36	@ 0x24
 8007fb2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	438a      	bics	r2, r1
 8007fca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	08d9      	lsrs	r1, r3, #3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 f8b8 	bl	8008158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2288      	movs	r2, #136	@ 0x88
 8007ff4:	2120      	movs	r1, #32
 8007ff6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2284      	movs	r2, #132	@ 0x84
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	0018      	movs	r0, r3
 8008004:	46bd      	mov	sp, r7
 8008006:	b004      	add	sp, #16
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2284      	movs	r2, #132	@ 0x84
 800801a:	5c9b      	ldrb	r3, [r3, r2]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008020:	2302      	movs	r3, #2
 8008022:	e02f      	b.n	8008084 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2284      	movs	r2, #132	@ 0x84
 8008028:	2101      	movs	r1, #1
 800802a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2288      	movs	r2, #136	@ 0x88
 8008030:	2124      	movs	r1, #36	@ 0x24
 8008032:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2101      	movs	r1, #1
 8008048:	438a      	bics	r2, r1
 800804a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4a0e      	ldr	r2, [pc, #56]	@ (800808c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008054:	4013      	ands	r3, r2
 8008056:	0019      	movs	r1, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	0018      	movs	r0, r3
 8008066:	f000 f877 	bl	8008158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2288      	movs	r2, #136	@ 0x88
 8008076:	2120      	movs	r1, #32
 8008078:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2284      	movs	r2, #132	@ 0x84
 800807e:	2100      	movs	r1, #0
 8008080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	0018      	movs	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	b004      	add	sp, #16
 800808a:	bd80      	pop	{r7, pc}
 800808c:	f1ffffff 	.word	0xf1ffffff

08008090 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	@ 0x28
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	1dbb      	adds	r3, r7, #6
 800809c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800809e:	2327      	movs	r3, #39	@ 0x27
 80080a0:	18fb      	adds	r3, r7, r3
 80080a2:	2200      	movs	r2, #0
 80080a4:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	228c      	movs	r2, #140	@ 0x8c
 80080aa:	589b      	ldr	r3, [r3, r2]
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d14e      	bne.n	800814e <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 80080b6:	1dbb      	adds	r3, r7, #6
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e046      	b.n	8008150 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	2380      	movs	r3, #128	@ 0x80
 80080c8:	015b      	lsls	r3, r3, #5
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d109      	bne.n	80080e2 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d105      	bne.n	80080e2 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2201      	movs	r2, #1
 80080da:	4013      	ands	r3, r2
 80080dc:	d001      	beq.n	80080e2 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e036      	b.n	8008150 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80080ee:	1dbb      	adds	r3, r7, #6
 80080f0:	881a      	ldrh	r2, [r3, #0]
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	0018      	movs	r0, r3
 80080f8:	f7fe fe16 	bl	8006d28 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d11c      	bne.n	800813e <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2210      	movs	r2, #16
 800810a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800810c:	f3ef 8310 	mrs	r3, PRIMASK
 8008110:	617b      	str	r3, [r7, #20]
  return(result);
 8008112:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	623b      	str	r3, [r7, #32]
 8008116:	2301      	movs	r3, #1
 8008118:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	f383 8810 	msr	PRIMASK, r3
}
 8008120:	46c0      	nop			@ (mov r8, r8)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2110      	movs	r1, #16
 800812e:	430a      	orrs	r2, r1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f383 8810 	msr	PRIMASK, r3
}
 800813c:	e003      	b.n	8008146 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800813e:	2327      	movs	r3, #39	@ 0x27
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8008146:	2327      	movs	r3, #39	@ 0x27
 8008148:	18fb      	adds	r3, r7, r3
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	e000      	b.n	8008150 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800814e:	2302      	movs	r3, #2
  }
}
 8008150:	0018      	movs	r0, r3
 8008152:	46bd      	mov	sp, r7
 8008154:	b00a      	add	sp, #40	@ 0x28
 8008156:	bd80      	pop	{r7, pc}

08008158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008164:	2b00      	cmp	r3, #0
 8008166:	d108      	bne.n	800817a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	226a      	movs	r2, #106	@ 0x6a
 800816c:	2101      	movs	r1, #1
 800816e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2268      	movs	r2, #104	@ 0x68
 8008174:	2101      	movs	r1, #1
 8008176:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008178:	e043      	b.n	8008202 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800817a:	260f      	movs	r6, #15
 800817c:	19bb      	adds	r3, r7, r6
 800817e:	2208      	movs	r2, #8
 8008180:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008182:	200e      	movs	r0, #14
 8008184:	183b      	adds	r3, r7, r0
 8008186:	2208      	movs	r2, #8
 8008188:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	0e5b      	lsrs	r3, r3, #25
 8008192:	b2da      	uxtb	r2, r3
 8008194:	240d      	movs	r4, #13
 8008196:	193b      	adds	r3, r7, r4
 8008198:	2107      	movs	r1, #7
 800819a:	400a      	ands	r2, r1
 800819c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	0f5b      	lsrs	r3, r3, #29
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	250c      	movs	r5, #12
 80081aa:	197b      	adds	r3, r7, r5
 80081ac:	2107      	movs	r1, #7
 80081ae:	400a      	ands	r2, r1
 80081b0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081b2:	183b      	adds	r3, r7, r0
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	197a      	adds	r2, r7, r5
 80081b8:	7812      	ldrb	r2, [r2, #0]
 80081ba:	4914      	ldr	r1, [pc, #80]	@ (800820c <UARTEx_SetNbDataToProcess+0xb4>)
 80081bc:	5c8a      	ldrb	r2, [r1, r2]
 80081be:	435a      	muls	r2, r3
 80081c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80081c2:	197b      	adds	r3, r7, r5
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	4a12      	ldr	r2, [pc, #72]	@ (8008210 <UARTEx_SetNbDataToProcess+0xb8>)
 80081c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ca:	0019      	movs	r1, r3
 80081cc:	f7f8 f826 	bl	800021c <__divsi3>
 80081d0:	0003      	movs	r3, r0
 80081d2:	b299      	uxth	r1, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	226a      	movs	r2, #106	@ 0x6a
 80081d8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081da:	19bb      	adds	r3, r7, r6
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	193a      	adds	r2, r7, r4
 80081e0:	7812      	ldrb	r2, [r2, #0]
 80081e2:	490a      	ldr	r1, [pc, #40]	@ (800820c <UARTEx_SetNbDataToProcess+0xb4>)
 80081e4:	5c8a      	ldrb	r2, [r1, r2]
 80081e6:	435a      	muls	r2, r3
 80081e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80081ea:	193b      	adds	r3, r7, r4
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	4a08      	ldr	r2, [pc, #32]	@ (8008210 <UARTEx_SetNbDataToProcess+0xb8>)
 80081f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081f2:	0019      	movs	r1, r3
 80081f4:	f7f8 f812 	bl	800021c <__divsi3>
 80081f8:	0003      	movs	r3, r0
 80081fa:	b299      	uxth	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2268      	movs	r2, #104	@ 0x68
 8008200:	5299      	strh	r1, [r3, r2]
}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	46bd      	mov	sp, r7
 8008206:	b005      	add	sp, #20
 8008208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	080085cc 	.word	0x080085cc
 8008210:	080085d4 	.word	0x080085d4

08008214 <memset>:
 8008214:	0003      	movs	r3, r0
 8008216:	1882      	adds	r2, r0, r2
 8008218:	4293      	cmp	r3, r2
 800821a:	d100      	bne.n	800821e <memset+0xa>
 800821c:	4770      	bx	lr
 800821e:	7019      	strb	r1, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	e7f9      	b.n	8008218 <memset+0x4>

08008224 <__libc_init_array>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	2600      	movs	r6, #0
 8008228:	4c0c      	ldr	r4, [pc, #48]	@ (800825c <__libc_init_array+0x38>)
 800822a:	4d0d      	ldr	r5, [pc, #52]	@ (8008260 <__libc_init_array+0x3c>)
 800822c:	1b64      	subs	r4, r4, r5
 800822e:	10a4      	asrs	r4, r4, #2
 8008230:	42a6      	cmp	r6, r4
 8008232:	d109      	bne.n	8008248 <__libc_init_array+0x24>
 8008234:	2600      	movs	r6, #0
 8008236:	f000 f819 	bl	800826c <_init>
 800823a:	4c0a      	ldr	r4, [pc, #40]	@ (8008264 <__libc_init_array+0x40>)
 800823c:	4d0a      	ldr	r5, [pc, #40]	@ (8008268 <__libc_init_array+0x44>)
 800823e:	1b64      	subs	r4, r4, r5
 8008240:	10a4      	asrs	r4, r4, #2
 8008242:	42a6      	cmp	r6, r4
 8008244:	d105      	bne.n	8008252 <__libc_init_array+0x2e>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	00b3      	lsls	r3, r6, #2
 800824a:	58eb      	ldr	r3, [r5, r3]
 800824c:	4798      	blx	r3
 800824e:	3601      	adds	r6, #1
 8008250:	e7ee      	b.n	8008230 <__libc_init_array+0xc>
 8008252:	00b3      	lsls	r3, r6, #2
 8008254:	58eb      	ldr	r3, [r5, r3]
 8008256:	4798      	blx	r3
 8008258:	3601      	adds	r6, #1
 800825a:	e7f2      	b.n	8008242 <__libc_init_array+0x1e>
 800825c:	080085dc 	.word	0x080085dc
 8008260:	080085dc 	.word	0x080085dc
 8008264:	080085e0 	.word	0x080085e0
 8008268:	080085dc 	.word	0x080085dc

0800826c <_init>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	46c0      	nop			@ (mov r8, r8)
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr

08008278 <_fini>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	46c0      	nop			@ (mov r8, r8)
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr
