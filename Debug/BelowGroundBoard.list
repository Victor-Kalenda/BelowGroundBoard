
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080062b0  080062b0  000072b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800658c  0800658c  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  0800658c  0800658c  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800658c  0800658c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800658c  0800658c  0000758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006594  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000070  08006604  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08006604  00008510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017332  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8a  00000000  00000000  0001f3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00022158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110b  00000000  00000000  000236d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017731  00000000  00000000  000247e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2d2  00000000  00000000  0003bf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097495  00000000  00000000  000561e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed67b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd0  00000000  00000000  000ed6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f2690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006298 	.word	0x08006298

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006298 	.word	0x08006298

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 80003fc:	230f      	movs	r3, #15
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e011      	b.n	800042a <HAL_ADC_ConvCpltCallback+0x36>
	{
		holding_register_database[i + 1] = (uint16_t)raw_data[i];
 8000406:	200f      	movs	r0, #15
 8000408:	183b      	adds	r3, r7, r0
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_ADC_ConvCpltCallback+0x4c>)
 800040e:	0092      	lsls	r2, r2, #2
 8000410:	58d1      	ldr	r1, [r2, r3]
 8000412:	183b      	adds	r3, r7, r0
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	b289      	uxth	r1, r1
 800041a:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <HAL_ADC_ConvCpltCallback+0x50>)
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++)
 8000420:	183b      	adds	r3, r7, r0
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	183b      	adds	r3, r7, r0
 8000426:	3201      	adds	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	230f      	movs	r3, #15
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b07      	cmp	r3, #7
 8000432:	d9e8      	bls.n	8000406 <HAL_ADC_ConvCpltCallback+0x12>
	}
}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	200002e4 	.word	0x200002e4
 8000444:	20000000 	.word	0x20000000

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f001 f8ec 	bl	800162a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f849 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 fafd 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 800045a:	f000 fadd 	bl	8000a18 <MX_DMA_Init>
  MX_ADC1_Init();
 800045e:	f000 f887 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000462:	f000 f95f 	bl	8000724 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000466:	f000 f99d 	bl	80007a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800046a:	f000 f9d9 	bl	8000820 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800046e:	f000 fa83 	bl	8000978 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  modbus_set_rx(255);
 8000472:	20ff      	movs	r0, #255	@ 0xff
 8000474:	f000 fd7e 	bl	8000f74 <modbus_set_rx>
  HAL_ADC_Start_DMA(&hadc1, raw_data, 8);
 8000478:	4918      	ldr	r1, [pc, #96]	@ (80004dc <main+0x94>)
 800047a:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <main+0x98>)
 800047c:	2208      	movs	r2, #8
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fc3e 	bl	8001d00 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(modbus_rx())
 8000484:	f000 fd62 	bl	8000f4c <modbus_rx>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d0fb      	beq.n	8000484 <main+0x3c>
	  {
		  int8_t status = 0;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000492:	2000      	movs	r0, #0
 8000494:	f000 fb82 	bl	8000b9c <get_rx_buffer>
 8000498:	0003      	movs	r3, r0
 800049a:	001a      	movs	r2, r3
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <main+0x9c>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d114      	bne.n	80004ce <main+0x86>
		  {
			  switch(get_rx_buffer(1))
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fb79 	bl	8000b9c <get_rx_buffer>
 80004aa:	0003      	movs	r3, r0
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d002      	beq.n	80004b6 <main+0x6e>
 80004b0:	2b10      	cmp	r3, #16
 80004b2:	d006      	beq.n	80004c2 <main+0x7a>
 80004b4:	e00b      	b.n	80004ce <main+0x86>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80004b6:	1dfc      	adds	r4, r7, #7
 80004b8:	f000 fb86 	bl	8000bc8 <return_holding_registers>
 80004bc:	0003      	movs	r3, r0
 80004be:	7023      	strb	r3, [r4, #0]
					  break;
 80004c0:	e005      	b.n	80004ce <main+0x86>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80004c2:	1dfc      	adds	r4, r7, #7
 80004c4:	f000 fc10 	bl	8000ce8 <edit_multiple_registers>
 80004c8:	0003      	movs	r3, r0
 80004ca:	7023      	strb	r3, [r4, #0]
					  break;
 80004cc:	46c0      	nop			@ (mov r8, r8)
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx(255); // may be able to set size to 12
 80004ce:	1dfc      	adds	r4, r7, #7
 80004d0:	20ff      	movs	r0, #255	@ 0xff
 80004d2:	f000 fd4f 	bl	8000f74 <modbus_set_rx>
 80004d6:	0003      	movs	r3, r0
 80004d8:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 80004da:	e7d3      	b.n	8000484 <main+0x3c>
 80004dc:	200002e4 	.word	0x200002e4
 80004e0:	2000008c 	.word	0x2000008c
 80004e4:	20000000 	.word	0x20000000

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b08f      	sub	sp, #60	@ 0x3c
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2418      	movs	r4, #24
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2320      	movs	r3, #32
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f005 fea1 	bl	8006240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f005 fe9a 	bl	8006240 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2202      	movs	r2, #2
 8000510:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	0152      	lsls	r2, r2, #5
 8000520:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2240      	movs	r2, #64	@ 0x40
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fd68 	bl	8003000 <HAL_RCC_OscConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000534:	f000 fb1e 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2207      	movs	r2, #7
 800053c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2100      	movs	r1, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f002 ff76 	bl	800344c <HAL_RCC_ClockConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000564:	f000 fb06 	bl	8000b74 <Error_Handler>
  }
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b00f      	add	sp, #60	@ 0x3c
 800056e:	bd90      	pop	{r4, r7, pc}

08000570 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	0018      	movs	r0, r3
 800057a:	230c      	movs	r3, #12
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f005 fe5e 	bl	8006240 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000584:	4b5d      	ldr	r3, [pc, #372]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000586:	4a5e      	ldr	r2, [pc, #376]	@ (8000700 <MX_ADC1_Init+0x190>)
 8000588:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800058a:	4b5c      	ldr	r3, [pc, #368]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800058c:	22c0      	movs	r2, #192	@ 0xc0
 800058e:	0612      	lsls	r2, r2, #24
 8000590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000592:	4b5a      	ldr	r3, [pc, #360]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000598:	4b58      	ldr	r3, [pc, #352]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800059e:	4b57      	ldr	r3, [pc, #348]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	0612      	lsls	r2, r2, #24
 80005a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a6:	4b55      	ldr	r3, [pc, #340]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ac:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005b2:	4b52      	ldr	r3, [pc, #328]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b8:	4b50      	ldr	r3, [pc, #320]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80005be:	4b4f      	ldr	r3, [pc, #316]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ca:	4b4c      	ldr	r3, [pc, #304]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d0:	4b4a      	ldr	r3, [pc, #296]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005d2:	222c      	movs	r2, #44	@ 0x2c
 80005d4:	2101      	movs	r1, #1
 80005d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d8:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005de:	4b47      	ldr	r3, [pc, #284]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e4:	4b45      	ldr	r3, [pc, #276]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005e6:	223c      	movs	r2, #60	@ 0x3c
 80005e8:	2100      	movs	r1, #0
 80005ea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005ec:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4b42      	ldr	r3, [pc, #264]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 f9dd 	bl	80019b4 <HAL_ADC_Init>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005fe:	f000 fab9 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2201      	movs	r2, #1
 800060c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fc11 	bl	8001e3c <HAL_ADC_ConfigChannel>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800061e:	f000 faa9 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4a37      	ldr	r2, [pc, #220]	@ (8000704 <MX_ADC1_Init+0x194>)
 8000626:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fc04 	bl	8001e3c <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000638:	f000 fa9c 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4a32      	ldr	r2, [pc, #200]	@ (8000708 <MX_ADC1_Init+0x198>)
 8000640:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fbf7 	bl	8001e3c <HAL_ADC_ConfigChannel>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000652:	f000 fa8f 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4a2c      	ldr	r2, [pc, #176]	@ (800070c <MX_ADC1_Init+0x19c>)
 800065a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fbea 	bl	8001e3c <HAL_ADC_ConfigChannel>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800066c:	f000 fa82 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <MX_ADC1_Init+0x1a0>)
 8000674:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fbdd 	bl	8001e3c <HAL_ADC_ConfigChannel>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000686:	f000 fa75 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <MX_ADC1_Init+0x1a4>)
 800068e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	1d3a      	adds	r2, r7, #4
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fbd0 	bl	8001e3c <HAL_ADC_ConfigChannel>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80006a0:	f000 fa68 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <MX_ADC1_Init+0x1a8>)
 80006a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3a      	adds	r2, r7, #4
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fbc3 	bl	8001e3c <HAL_ADC_ConfigChannel>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80006ba:	f000 fa5b 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <MX_ADC1_Init+0x1ac>)
 80006c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	1d3a      	adds	r2, r7, #4
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fbb6 	bl	8001e3c <HAL_ADC_ConfigChannel>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 80006d4:	f000 fa4e 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4a11      	ldr	r2, [pc, #68]	@ (8000720 <MX_ADC1_Init+0x1b0>)
 80006dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fba9 	bl	8001e3c <HAL_ADC_ConfigChannel>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 80006ee:	f000 fa41 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b004      	add	sp, #16
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40012400 	.word	0x40012400
 8000704:	04000002 	.word	0x04000002
 8000708:	08000004 	.word	0x08000004
 800070c:	0c000008 	.word	0x0c000008
 8000710:	10000010 	.word	0x10000010
 8000714:	14000020 	.word	0x14000020
 8000718:	18000040 	.word	0x18000040
 800071c:	1c000080 	.word	0x1c000080
 8000720:	20000100 	.word	0x20000100

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x7c>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_I2C1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fb0f 	bl	8002d84 <HAL_I2C_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076a:	f000 fa03 	bl	8000b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f002 fbac 	bl	8002ed0 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800077c:	f000 f9fa 	bl	8000b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f002 fbef 	bl	8002f68 <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f9f1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000014c 	.word	0x2000014c
 800079c:	40005400 	.word	0x40005400
 80007a0:	00402d41 	.word	0x00402d41

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <MX_SPI1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007b0:	2282      	movs	r2, #130	@ 0x82
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007be:	22e0      	movs	r2, #224	@ 0xe0
 80007c0:	00d2      	lsls	r2, r2, #3
 80007c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	0092      	lsls	r2, r2, #2
 80007d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007fe:	2208      	movs	r2, #8
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000802:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <MX_SPI1_Init+0x74>)
 8000804:	0018      	movs	r0, r3
 8000806:	f003 f8c3 	bl	8003990 <HAL_SPI_Init>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 f9b1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200001a0 	.word	0x200001a0
 800081c:	40013000 	.word	0x40013000

08000820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b098      	sub	sp, #96	@ 0x60
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000826:	2354      	movs	r3, #84	@ 0x54
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	0018      	movs	r0, r3
 800082c:	230c      	movs	r3, #12
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f005 fd05 	bl	8006240 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	2338      	movs	r3, #56	@ 0x38
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	231c      	movs	r3, #28
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f005 fcfd 	bl	8006240 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	0018      	movs	r0, r3
 800084a:	2334      	movs	r3, #52	@ 0x34
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f005 fcf6 	bl	8006240 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000854:	4b45      	ldr	r3, [pc, #276]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000856:	4a46      	ldr	r2, [pc, #280]	@ (8000970 <MX_TIM1_Init+0x150>)
 8000858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085a:	4b44      	ldr	r3, [pc, #272]	@ (800096c <MX_TIM1_Init+0x14c>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000868:	4a42      	ldr	r2, [pc, #264]	@ (8000974 <MX_TIM1_Init+0x154>)
 800086a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b3f      	ldr	r3, [pc, #252]	@ (800096c <MX_TIM1_Init+0x14c>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000872:	4b3e      	ldr	r3, [pc, #248]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b3c      	ldr	r3, [pc, #240]	@ (800096c <MX_TIM1_Init+0x14c>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087e:	4b3b      	ldr	r3, [pc, #236]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000880:	0018      	movs	r0, r3
 8000882:	f003 f93d 	bl	8003b00 <HAL_TIM_PWM_Init>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f973 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2154      	movs	r1, #84	@ 0x54
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a2:	187a      	adds	r2, r7, r1
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <MX_TIM1_Init+0x14c>)
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f003 fda1 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008b2:	f000 f95f 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b6:	2138      	movs	r1, #56	@ 0x38
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2260      	movs	r2, #96	@ 0x60
 80008bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e2:	1879      	adds	r1, r7, r1
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_TIM1_Init+0x14c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 f961 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008f2:	f000 f93f 	bl	8000b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	0192      	lsls	r2, r2, #6
 800091a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	0492      	lsls	r2, r2, #18
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000948:	1d3a      	adds	r2, r7, #4
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_TIM1_Init+0x14c>)
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fdb6 	bl	80044c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000958:	f000 f90c 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <MX_TIM1_Init+0x14c>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fd1e 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b018      	add	sp, #96	@ 0x60
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000204 	.word	0x20000204
 8000970:	40012c00 	.word	0x40012c00
 8000974:	0000ffff 	.word	0x0000ffff

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 800097e:	4a25      	ldr	r2, [pc, #148]	@ (8000a14 <MX_USART1_UART_Init+0x9c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 8000984:	22e1      	movs	r2, #225	@ 0xe1
 8000986:	0252      	lsls	r2, r2, #9
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009c2:	2300      	movs	r3, #0
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	f005 fa4a 	bl	8005e60 <HAL_RS485Ex_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 f8d0 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f005 faed 	bl	8005fb8 <HAL_UARTEx_SetTxFifoThreshold>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f8c7 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f005 fb24 	bl	8006038 <HAL_UARTEx_SetRxFifoThreshold>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80009f4:	f000 f8be 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f005 faa2 	bl	8005f44 <HAL_UARTEx_DisableFifoMode>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000a04:	f000 f8b6 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000250 	.word	0x20000250
 8000a14:	40013800 	.word	0x40013800

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_DMA_Init+0x38>)
 8000a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_DMA_Init+0x38>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_DMA_Init+0x38>)
 8000a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f001 fd8c 	bl	8002558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a40:	2009      	movs	r0, #9
 8000a42:	f001 fd9e 	bl	8002582 <HAL_NVIC_EnableIRQ>

}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b08b      	sub	sp, #44	@ 0x2c
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	2414      	movs	r4, #20
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2314      	movs	r3, #20
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f005 fbeb 	bl	8006240 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a70:	2104      	movs	r1, #4
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a76:	4b3b      	ldr	r3, [pc, #236]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a82:	4b38      	ldr	r3, [pc, #224]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a86:	4b37      	ldr	r3, [pc, #220]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a88:	2120      	movs	r1, #32
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a92:	2220      	movs	r2, #32
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9e:	4b31      	ldr	r3, [pc, #196]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ab8:	2102      	movs	r1, #2
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000abe:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad6:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ada:	2208      	movs	r2, #8
 8000adc:	4013      	ands	r3, r2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_C_Pin|SS_A_Pin, GPIO_PIN_RESET);
 8000ae2:	23a0      	movs	r3, #160	@ 0xa0
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <MX_GPIO_Init+0x114>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	0019      	movs	r1, r3
 8000aec:	f002 f92c 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2206      	movs	r2, #6
 8000af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <MX_GPIO_Init+0x118>)
 8000b06:	0019      	movs	r1, r3
 8000b08:	0010      	movs	r0, r2
 8000b0a:	f001 ffab 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_C_Pin SS_A_Pin */
  GPIO_InitStruct.Pin = SS_C_Pin|SS_A_Pin;
 8000b0e:	0021      	movs	r1, r4
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	22a0      	movs	r2, #160	@ 0xa0
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	000c      	movs	r4, r1
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <MX_GPIO_Init+0x114>)
 8000b30:	0019      	movs	r1, r3
 8000b32:	0010      	movs	r0, r2
 8000b34:	f001 ff96 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_B_Pin */
  GPIO_InitStruct.Pin = SS_B_Pin;
 8000b38:	0021      	movs	r1, r4
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <MX_GPIO_Init+0x11c>)
 8000b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SS_B_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <MX_GPIO_Init+0x114>)
 8000b52:	0019      	movs	r1, r3
 8000b54:	0010      	movs	r0, r2
 8000b56:	f001 ff85 	bl	8002a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b00b      	add	sp, #44	@ 0x2c
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	40021000 	.word	0x40021000
 8000b68:	50000400 	.word	0x50000400
 8000b6c:	50000c00 	.word	0x50000c00
 8000b70:	10110000 	.word	0x10110000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	e7fd      	b.n	8000b7c <Error_Handler+0x8>

08000b80 <HAL_UART_RxCpltCallback>:
};


// Recieve Interrupt Handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_UART_RxCpltCallback+0x18>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	20000508 	.word	0x20000508

08000b9c <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2bff      	cmp	r3, #255	@ 0xff
 8000bae:	d004      	beq.n	8000bba <get_rx_buffer+0x1e>
	{
		return modbus_rx_buffer[index];
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4a03      	ldr	r2, [pc, #12]	@ (8000bc4 <get_rx_buffer+0x28>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	e000      	b.n	8000bbc <get_rx_buffer+0x20>
	}
	return 0xFF;
 8000bba:	23ff      	movs	r3, #255	@ 0xff
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000304 	.word	0x20000304

08000bc8 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8000bce:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <return_holding_registers+0x114>)
 8000bd0:	789b      	ldrb	r3, [r3, #2]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <return_holding_registers+0x114>)
 8000bd8:	78db      	ldrb	r3, [r3, #3]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	1dbb      	adds	r3, r7, #6
 8000be2:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8000be4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cdc <return_holding_registers+0x114>)
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	4b3b      	ldr	r3, [pc, #236]	@ (8000cdc <return_holding_registers+0x114>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	1cbb      	adds	r3, r7, #2
 8000bf8:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000bfa:	1cbb      	adds	r3, r7, #2
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c00:	d803      	bhi.n	8000c0a <return_holding_registers+0x42>
 8000c02:	1cbb      	adds	r3, r7, #2
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <return_holding_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000c0a:	2006      	movs	r0, #6
 8000c0c:	f000 f912 	bl	8000e34 <modbus_exception>
 8000c10:	0003      	movs	r3, r0
 8000c12:	e05e      	b.n	8000cd2 <return_holding_registers+0x10a>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000c14:	1cba      	adds	r2, r7, #2
 8000c16:	1dbb      	adds	r3, r7, #6
 8000c18:	8812      	ldrh	r2, [r2, #0]
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	003b      	movs	r3, r7
 8000c22:	3a01      	subs	r2, #1
 8000c24:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000c26:	003b      	movs	r3, r7
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	2b32      	cmp	r3, #50	@ 0x32
 8000c2c:	d904      	bls.n	8000c38 <return_holding_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 f900 	bl	8000e34 <modbus_exception>
 8000c34:	0003      	movs	r3, r0
 8000c36:	e04c      	b.n	8000cd2 <return_holding_registers+0x10a>
	}

	// Return register values

	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8000c38:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <return_holding_registers+0x114>)
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8000c40:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <return_holding_registers+0x114>)
 8000c42:	785a      	ldrb	r2, [r3, #1]
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c46:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000c48:	1cbb      	adds	r3, r7, #2
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	18db      	adds	r3, r3, r3
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c54:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000c56:	1d7b      	adds	r3, r7, #5
 8000c58:	2203      	movs	r2, #3
 8000c5a:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e027      	b.n	8000cb4 <return_holding_registers+0xec>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <return_holding_registers+0x11c>)
 8000c6a:	0052      	lsls	r2, r2, #1
 8000c6c:	5ad3      	ldrh	r3, [r2, r3]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	b299      	uxth	r1, r3
 8000c72:	1d7b      	adds	r3, r7, #5
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	1d7a      	adds	r2, r7, #5
 8000c78:	1c58      	adds	r0, r3, #1
 8000c7a:	7010      	strb	r0, [r2, #0]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	b2c9      	uxtb	r1, r1
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c82:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 8000c84:	1dbb      	adds	r3, r7, #6
 8000c86:	881a      	ldrh	r2, [r3, #0]
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <return_holding_registers+0x11c>)
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	5ad1      	ldrh	r1, [r2, r3]
 8000c8e:	1d7b      	adds	r3, r7, #5
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	1d7a      	adds	r2, r7, #5
 8000c94:	1c58      	adds	r0, r3, #1
 8000c96:	7010      	strb	r0, [r2, #0]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	b2c9      	uxtb	r1, r1
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c9e:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 8000ca0:	1dbb      	adds	r3, r7, #6
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	3201      	adds	r2, #1
 8000ca8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	3201      	adds	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	1cba      	adds	r2, r7, #2
 8000cbc:	8812      	ldrh	r2, [r2, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d8d0      	bhi.n	8000c64 <return_holding_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000cc2:	1d7b      	adds	r3, r7, #5
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <return_holding_registers+0x118>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 f8d6 	bl	8000e7c <modbus_send>
 8000cd0:	0003      	movs	r3, r0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	20000304 	.word	0x20000304
 8000ce0:	20000404 	.word	0x20000404
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8000cee:	4b4e      	ldr	r3, [pc, #312]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000cf0:	789b      	ldrb	r3, [r3, #2]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000cf8:	78db      	ldrb	r3, [r3, #3]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8000d04:	4b48      	ldr	r3, [pc, #288]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d0e:	795b      	ldrb	r3, [r3, #5]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	1cbb      	adds	r3, r7, #2
 8000d18:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000d1a:	1cbb      	adds	r3, r7, #2
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000d20:	d803      	bhi.n	8000d2a <edit_multiple_registers+0x42>
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d104      	bne.n	8000d34 <edit_multiple_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000d2a:	2006      	movs	r0, #6
 8000d2c:	f000 f882 	bl	8000e34 <modbus_exception>
 8000d30:	0003      	movs	r3, r0
 8000d32:	e075      	b.n	8000e20 <edit_multiple_registers+0x138>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000d34:	1cba      	adds	r2, r7, #2
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	8812      	ldrh	r2, [r2, #0]
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	003b      	movs	r3, r7
 8000d42:	3a01      	subs	r2, #1
 8000d44:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000d46:	003b      	movs	r3, r7
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	2b32      	cmp	r3, #50	@ 0x32
 8000d4c:	d904      	bls.n	8000d58 <edit_multiple_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f000 f870 	bl	8000e34 <modbus_exception>
 8000d54:	0003      	movs	r3, r0
 8000d56:	e063      	b.n	8000e20 <edit_multiple_registers+0x138>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8000d58:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b33      	ldr	r3, [pc, #204]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000d5e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8000d60:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d62:	785a      	ldrb	r2, [r3, #1]
 8000d64:	4b31      	ldr	r3, [pc, #196]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000d66:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000d68:	1cbb      	adds	r3, r7, #2
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	18db      	adds	r3, r3, r3
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000d74:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000d76:	1d7b      	adds	r3, r7, #5
 8000d78:	2203      	movs	r2, #3
 8000d7a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e03e      	b.n	8000e02 <edit_multiple_registers+0x11a>
	{
		holding_register_database[first_register_address] = (modbus_rx_buffer[2 * i + 6] << 8) | modbus_rx_buffer[2 * i + 7];
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3303      	adds	r3, #3
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	3307      	adds	r3, #7
 8000d9c:	4922      	ldr	r1, [pc, #136]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d9e:	5ccb      	ldrb	r3, [r1, r3]
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b219      	sxth	r1, r3
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	881a      	ldrh	r2, [r3, #0]
 8000daa:	b289      	uxth	r1, r1
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <edit_multiple_registers+0x148>)
 8000dae:	0052      	lsls	r2, r2, #1
 8000db0:	52d1      	strh	r1, [r2, r3]
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8000db2:	1dbb      	adds	r3, r7, #6
 8000db4:	881a      	ldrh	r2, [r3, #0]
 8000db6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <edit_multiple_registers+0x148>)
 8000db8:	0052      	lsls	r2, r2, #1
 8000dba:	5ad3      	ldrh	r3, [r2, r3]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	1d7b      	adds	r3, r7, #5
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	1d7a      	adds	r2, r7, #5
 8000dc6:	1c58      	adds	r0, r3, #1
 8000dc8:	7010      	strb	r0, [r2, #0]
 8000dca:	001a      	movs	r2, r3
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000dd0:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 8000dd2:	1dbb      	adds	r3, r7, #6
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <edit_multiple_registers+0x148>)
 8000dd8:	0052      	lsls	r2, r2, #1
 8000dda:	5ad1      	ldrh	r1, [r2, r3]
 8000ddc:	1d7b      	adds	r3, r7, #5
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	1d7a      	adds	r2, r7, #5
 8000de2:	1c58      	adds	r0, r3, #1
 8000de4:	7010      	strb	r0, [r2, #0]
 8000de6:	001a      	movs	r2, r3
 8000de8:	b2c9      	uxtb	r1, r1
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000dec:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 8000dee:	1dbb      	adds	r3, r7, #6
 8000df0:	881a      	ldrh	r2, [r3, #0]
 8000df2:	1dbb      	adds	r3, r7, #6
 8000df4:	3201      	adds	r2, #1
 8000df6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	3201      	adds	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	1cba      	adds	r2, r7, #2
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8b9      	bhi.n	8000d84 <edit_multiple_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000e10:	1d7b      	adds	r3, r7, #5
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 f82f 	bl	8000e7c <modbus_send>
 8000e1e:	0003      	movs	r3, r0
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000304 	.word	0x20000304
 8000e2c:	20000404 	.word	0x20000404
 8000e30:	20000000 	.word	0x20000000

08000e34 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = modbus_rx_buffer[0];
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <modbus_exception+0x40>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <modbus_exception+0x44>)
 8000e46:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1] | 0x80;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <modbus_exception+0x40>)
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	4252      	negs	r2, r2
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <modbus_exception+0x44>)
 8000e56:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code;
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <modbus_exception+0x44>)
 8000e5e:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <modbus_exception+0x44>)
 8000e62:	2103      	movs	r1, #3
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 f809 	bl	8000e7c <modbus_send>
 8000e6a:	0003      	movs	r3, r0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000304 	.word	0x20000304
 8000e78:	20000404 	.word	0x20000404

08000e7c <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	000a      	movs	r2, r1
 8000e86:	1cfb      	adds	r3, r7, #3
 8000e88:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(data, size);
 8000e8a:	250e      	movs	r5, #14
 8000e8c:	197c      	adds	r4, r7, r5
 8000e8e:	1cfb      	adds	r3, r7, #3
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	0011      	movs	r1, r2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f884 	bl	8000fa4 <crc_16>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	8023      	strh	r3, [r4, #0]
	data[size] = low_byte(crc);
 8000ea0:	1cfb      	adds	r3, r7, #3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	18d3      	adds	r3, r2, r3
 8000ea8:	197a      	adds	r2, r7, r5
 8000eaa:	8812      	ldrh	r2, [r2, #0]
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	701a      	strb	r2, [r3, #0]
	data[size + 1] = high_byte(crc);
 8000eb0:	197b      	adds	r3, r7, r5
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	1cfb      	adds	r3, r7, #3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]

	int8_t status = HAL_OK;
 8000ec6:	240d      	movs	r4, #13
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, data, size + 2);
 8000ece:	1cfb      	adds	r3, r7, #3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <modbus_send+0xc4>)
 8000edc:	0018      	movs	r0, r3
 8000ede:	f003 fb8b 	bl	80045f8 <HAL_UART_Transmit_IT>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <modbus_send+0x80>
	{
		return status;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	e01d      	b.n	8000f38 <modbus_send+0xbc>
	}
	time = HAL_GetTick();
 8000efc:	f000 fc08 	bl	8001710 <HAL_GetTick>
 8000f00:	0002      	movs	r2, r0
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <modbus_send+0xc8>)
 8000f04:	601a      	str	r2, [r3, #0]
	while(!tx_int && (HAL_GetTick()) - time < 100);
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <modbus_send+0xcc>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d107      	bne.n	8000f22 <modbus_send+0xa6>
 8000f12:	f000 fbfd 	bl	8001710 <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <modbus_send+0xc8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b63      	cmp	r3, #99	@ 0x63
 8000f20:	d9f2      	bls.n	8000f08 <modbus_send+0x8c>
	if(tx_int)
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <modbus_send+0xcc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <modbus_send+0xba>
	{
		tx_int = 0;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <modbus_send+0xcc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <modbus_send+0xbc>
	}
	else
	{
		return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
	}
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b004      	add	sp, #16
 8000f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f40:	20000250 	.word	0x20000250
 8000f44:	20000504 	.word	0x20000504
 8000f48:	20000509 	.word	0x20000509

08000f4c <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	if(rx_int)
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <modbus_rx+0x24>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d004      	beq.n	8000f64 <modbus_rx+0x18>
	{
		rx_int = 0;
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <modbus_rx+0x24>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e002      	b.n	8000f6a <modbus_rx+0x1e>
	}
	return rx_int;
 8000f64:	4b02      	ldr	r3, [pc, #8]	@ (8000f70 <modbus_rx+0x24>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000508 	.word	0x20000508

08000f74 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx(uint8_t size)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	701a      	strb	r2, [r3, #0]
	return HAL_UARTEx_ReceiveToIdle_IT(&huart1, modbus_rx_buffer, size);
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4905      	ldr	r1, [pc, #20]	@ (8000f9c <modbus_set_rx+0x28>)
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <modbus_set_rx+0x2c>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f005 f896 	bl	80060bc <HAL_UARTEx_ReceiveToIdle_IT>
 8000f90:	0003      	movs	r3, r0
 8000f92:	b25b      	sxtb	r3, r3
	//return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000304 	.word	0x20000304
 8000fa0:	20000250 	.word	0x20000250

08000fa4 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	000a      	movs	r2, r1
 8000fae:	1cfb      	adds	r3, r7, #3
 8000fb0:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	22ff      	movs	r2, #255	@ 0xff
 8000fb8:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8000fba:	230e      	movs	r3, #14
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	22ff      	movs	r2, #255	@ 0xff
 8000fc0:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8000fc2:	e019      	b.n	8000ff8 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	200e      	movs	r0, #14
 8000fce:	183b      	adds	r3, r7, r0
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8000fd8:	4a13      	ldr	r2, [pc, #76]	@ (8001028 <crc_16+0x84>)
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	18d3      	adds	r3, r2, r3
 8000fde:	7819      	ldrb	r1, [r3, #0]
 8000fe0:	183b      	adds	r3, r7, r0
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	183a      	adds	r2, r7, r0
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	404a      	eors	r2, r1
 8000fea:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8000fec:	183b      	adds	r3, r7, r0
 8000fee:	490f      	ldr	r1, [pc, #60]	@ (800102c <crc_16+0x88>)
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	188a      	adds	r2, r1, r2
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	701a      	strb	r2, [r3, #0]
	while (size--)
 8000ff8:	1cfb      	adds	r3, r7, #3
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	1cfa      	adds	r2, r7, #3
 8000ffe:	1e59      	subs	r1, r3, #1
 8001000:	7011      	strb	r1, [r2, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1de      	bne.n	8000fc4 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8001006:	230f      	movs	r3, #15
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21a      	sxth	r2, r3
 8001010:	230e      	movs	r3, #14
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	080062b0 	.word	0x080062b0
 800102c:	080063b0 	.word	0x080063b0

08001030 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_MspInit+0x44>)
 8001038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_MspInit+0x44>)
 800103c:	2101      	movs	r1, #1
 800103e:	430a      	orrs	r2, r1
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_MspInit+0x44>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	2201      	movs	r2, #1
 8001048:	4013      	ands	r3, r2
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_MspInit+0x44>)
 8001050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_MspInit+0x44>)
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	0549      	lsls	r1, r1, #21
 8001058:	430a      	orrs	r2, r1
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_MspInit+0x44>)
 800105e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	055b      	lsls	r3, r3, #21
 8001064:	4013      	ands	r3, r2
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b093      	sub	sp, #76	@ 0x4c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	2334      	movs	r3, #52	@ 0x34
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	0018      	movs	r0, r3
 8001086:	2314      	movs	r3, #20
 8001088:	001a      	movs	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	f005 f8d8 	bl	8006240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	2414      	movs	r4, #20
 8001092:	193b      	adds	r3, r7, r4
 8001094:	0018      	movs	r0, r3
 8001096:	2320      	movs	r3, #32
 8001098:	001a      	movs	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	f005 f8d0 	bl	8006240 <memset>
  if(hadc->Instance==ADC1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a35      	ldr	r2, [pc, #212]	@ (800117c <HAL_ADC_MspInit+0x104>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d163      	bne.n	8001172 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2220      	movs	r2, #32
 80010ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	0018      	movs	r0, r3
 80010ba:	f002 fb6d 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	1e03      	subs	r3, r0, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80010c2:	f7ff fd57 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <HAL_ADC_MspInit+0x108>)
 80010c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <HAL_ADC_MspInit+0x108>)
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	0349      	lsls	r1, r1, #13
 80010d0:	430a      	orrs	r2, r1
 80010d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <HAL_ADC_MspInit+0x108>)
 80010d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	035b      	lsls	r3, r3, #13
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <HAL_ADC_MspInit+0x108>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <HAL_ADC_MspInit+0x108>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <HAL_ADC_MspInit+0x108>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f2:	2201      	movs	r2, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 80010fa:	2134      	movs	r1, #52	@ 0x34
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <HAL_ADC_MspInit+0x10c>)
 8001100:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2203      	movs	r2, #3
 8001106:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	187a      	adds	r2, r7, r1
 8001110:	23a0      	movs	r3, #160	@ 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fca4 	bl	8002a64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 800111e:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <HAL_ADC_MspInit+0x114>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 8001124:	2205      	movs	r2, #5
 8001126:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	0052      	lsls	r2, r2, #1
 8001140:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	00d2      	lsls	r2, r2, #3
 8001148:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 800114c:	2220      	movs	r2, #32
 800114e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 8001158:	0018      	movs	r0, r3
 800115a:	f001 fa2f 	bl	80025bc <HAL_DMA_Init>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d001      	beq.n	8001166 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001162:	f7ff fd07 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 800116a:	651a      	str	r2, [r3, #80]	@ 0x50
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_ADC_MspInit+0x110>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b013      	add	sp, #76	@ 0x4c
 8001178:	bd90      	pop	{r4, r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	40012400 	.word	0x40012400
 8001180:	40021000 	.word	0x40021000
 8001184:	000001ff 	.word	0x000001ff
 8001188:	200000f0 	.word	0x200000f0
 800118c:	40020008 	.word	0x40020008

08001190 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b093      	sub	sp, #76	@ 0x4c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	2334      	movs	r3, #52	@ 0x34
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	0018      	movs	r0, r3
 800119e:	2314      	movs	r3, #20
 80011a0:	001a      	movs	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f005 f84c 	bl	8006240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	2414      	movs	r4, #20
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	0018      	movs	r0, r3
 80011ae:	2320      	movs	r3, #32
 80011b0:	001a      	movs	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	f005 f844 	bl	8006240 <memset>
  if(hi2c->Instance==I2C1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a23      	ldr	r2, [pc, #140]	@ (800124c <HAL_I2C_MspInit+0xbc>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d13f      	bne.n	8001242 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	2202      	movs	r2, #2
 80011c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	0018      	movs	r0, r3
 80011d2:	f002 fae1 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011da:	f7ff fccb 	bl	8000b74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_I2C_MspInit+0xc0>)
 80011e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_I2C_MspInit+0xc0>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_I2C_MspInit+0xc0>)
 80011ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ee:	2201      	movs	r2, #1
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011f6:	2134      	movs	r1, #52	@ 0x34
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	22c0      	movs	r2, #192	@ 0xc0
 80011fc:	00d2      	lsls	r2, r2, #3
 80011fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2212      	movs	r2, #18
 8001204:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2206      	movs	r2, #6
 8001216:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	187a      	adds	r2, r7, r1
 800121a:	23a0      	movs	r3, #160	@ 0xa0
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	0011      	movs	r1, r2
 8001220:	0018      	movs	r0, r3
 8001222:	f001 fc1f 	bl	8002a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_I2C_MspInit+0xc0>)
 8001228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_I2C_MspInit+0xc0>)
 800122c:	2180      	movs	r1, #128	@ 0x80
 800122e:	0389      	lsls	r1, r1, #14
 8001230:	430a      	orrs	r2, r1
 8001232:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_I2C_MspInit+0xc0>)
 8001236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	039b      	lsls	r3, r3, #14
 800123c:	4013      	ands	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b013      	add	sp, #76	@ 0x4c
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	40005400 	.word	0x40005400
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b093      	sub	sp, #76	@ 0x4c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	2334      	movs	r3, #52	@ 0x34
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	0018      	movs	r0, r3
 8001262:	2314      	movs	r3, #20
 8001264:	001a      	movs	r2, r3
 8001266:	2100      	movs	r1, #0
 8001268:	f004 ffea 	bl	8006240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	2414      	movs	r4, #20
 800126e:	193b      	adds	r3, r7, r4
 8001270:	0018      	movs	r0, r3
 8001272:	2320      	movs	r3, #32
 8001274:	001a      	movs	r2, r3
 8001276:	2100      	movs	r1, #0
 8001278:	f004 ffe2 	bl	8006240 <memset>
  if(hspi->Instance==SPI1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a34      	ldr	r2, [pc, #208]	@ (8001354 <HAL_SPI_MspInit+0x100>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d162      	bne.n	800134c <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	2204      	movs	r2, #4
 800128a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800128c:	193b      	adds	r3, r7, r4
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	193b      	adds	r3, r7, r4
 8001294:	0018      	movs	r0, r3
 8001296:	f002 fa7f 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800129e:	f7ff fc69 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	0149      	lsls	r1, r1, #5
 80012ac:	430a      	orrs	r2, r1
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	015b      	lsls	r3, r3, #5
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c2:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ce:	2201      	movs	r2, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012da:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012dc:	2102      	movs	r1, #2
 80012de:	430a      	orrs	r2, r1
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HAL_SPI_MspInit+0x104>)
 80012e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e6:	2202      	movs	r2, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012ee:	2134      	movs	r1, #52	@ 0x34
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	000c      	movs	r4, r1
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	2202      	movs	r2, #2
 80012fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	193b      	adds	r3, r7, r4
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800130c:	193b      	adds	r3, r7, r4
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	193a      	adds	r2, r7, r4
 8001314:	23a0      	movs	r3, #160	@ 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f001 fba2 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001320:	0021      	movs	r1, r4
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2228      	movs	r2, #40	@ 0x28
 8001326:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2202      	movs	r2, #2
 800132c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	187b      	adds	r3, r7, r1
 8001342:	4a06      	ldr	r2, [pc, #24]	@ (800135c <HAL_SPI_MspInit+0x108>)
 8001344:	0019      	movs	r1, r3
 8001346:	0010      	movs	r0, r2
 8001348:	f001 fb8c 	bl	8002a64 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b013      	add	sp, #76	@ 0x4c
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	40013000 	.word	0x40013000
 8001358:	40021000 	.word	0x40021000
 800135c:	50000400 	.word	0x50000400

08001360 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <HAL_TIM_PWM_MspInit+0x38>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10d      	bne.n	800138e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_TIM_PWM_MspInit+0x3c>)
 8001374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_TIM_PWM_MspInit+0x3c>)
 8001378:	2180      	movs	r1, #128	@ 0x80
 800137a:	0109      	lsls	r1, r1, #4
 800137c:	430a      	orrs	r2, r1
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_TIM_PWM_MspInit+0x3c>)
 8001382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	240c      	movs	r4, #12
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	0018      	movs	r0, r3
 80013ae:	2314      	movs	r3, #20
 80013b0:	001a      	movs	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	f004 ff44 	bl	8006240 <memset>
  if(htim->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <HAL_TIM_MspPostInit+0x74>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d123      	bne.n	800140a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_TIM_MspPostInit+0x78>)
 80013c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <HAL_TIM_MspPostInit+0x78>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_TIM_MspPostInit+0x78>)
 80013d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d2:	2201      	movs	r2, #1
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	0212      	lsls	r2, r2, #8
 80013e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	0021      	movs	r1, r4
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2202      	movs	r2, #2
 80013e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2202      	movs	r2, #2
 80013fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	187a      	adds	r2, r7, r1
 80013fe:	23a0      	movs	r3, #160	@ 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f001 fb2d 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b009      	add	sp, #36	@ 0x24
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	40012c00 	.word	0x40012c00
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b095      	sub	sp, #84	@ 0x54
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	233c      	movs	r3, #60	@ 0x3c
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	0018      	movs	r0, r3
 800142a:	2314      	movs	r3, #20
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f004 ff06 	bl	8006240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	241c      	movs	r4, #28
 8001436:	193b      	adds	r3, r7, r4
 8001438:	0018      	movs	r0, r3
 800143a:	2320      	movs	r3, #32
 800143c:	001a      	movs	r2, r3
 800143e:	2100      	movs	r1, #0
 8001440:	f004 fefe 	bl	8006240 <memset>
  if(huart->Instance==USART1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <HAL_UART_MspInit+0x148>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d000      	beq.n	8001450 <HAL_UART_MspInit+0x34>
 800144e:	e084      	b.n	800155a <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001450:	193b      	adds	r3, r7, r4
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	193b      	adds	r3, r7, r4
 800145e:	0018      	movs	r0, r3
 8001460:	f002 f99a 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d001      	beq.n	800146c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001468:	f7ff fb84 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146c:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 800146e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001470:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	01c9      	lsls	r1, r1, #7
 8001476:	430a      	orrs	r2, r1
 8001478:	641a      	str	r2, [r3, #64]	@ 0x40
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 800147c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	01db      	lsls	r3, r3, #7
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 800148a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148c:	4b36      	ldr	r3, [pc, #216]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 800148e:	2104      	movs	r1, #4
 8001490:	430a      	orrs	r2, r1
 8001492:	635a      	str	r2, [r3, #52]	@ 0x34
 8001494:	4b34      	ldr	r3, [pc, #208]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001498:	2204      	movs	r2, #4
 800149a:	4013      	ands	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 80014a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 80014a6:	2102      	movs	r1, #2
 80014a8:	430a      	orrs	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 80014ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b0:	2202      	movs	r2, #2
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 80014ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 80014be:	2101      	movs	r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014c4:	4b28      	ldr	r3, [pc, #160]	@ (8001568 <HAL_UART_MspInit+0x14c>)
 80014c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c8:	2201      	movs	r2, #1
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014d0:	213c      	movs	r1, #60	@ 0x3c
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2280      	movs	r2, #128	@ 0x80
 80014d6:	01d2      	lsls	r2, r2, #7
 80014d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	000c      	movs	r4, r1
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	2202      	movs	r2, #2
 80014e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	193b      	adds	r3, r7, r4
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	4a1d      	ldr	r2, [pc, #116]	@ (800156c <HAL_UART_MspInit+0x150>)
 80014f8:	0019      	movs	r1, r3
 80014fa:	0010      	movs	r0, r2
 80014fc:	f001 fab2 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001500:	193b      	adds	r3, r7, r4
 8001502:	2204      	movs	r2, #4
 8001504:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	2202      	movs	r2, #2
 800150a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	193b      	adds	r3, r7, r4
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	193b      	adds	r3, r7, r4
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001518:	193b      	adds	r3, r7, r4
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	193b      	adds	r3, r7, r4
 8001520:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <HAL_UART_MspInit+0x154>)
 8001522:	0019      	movs	r1, r3
 8001524:	0010      	movs	r0, r2
 8001526:	f001 fa9d 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800152a:	0021      	movs	r1, r4
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	0152      	lsls	r2, r2, #5
 8001532:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2202      	movs	r2, #2
 8001538:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2201      	movs	r2, #1
 800154a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	187a      	adds	r2, r7, r1
 800154e:	23a0      	movs	r3, #160	@ 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f001 fa85 	bl	8002a64 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b015      	add	sp, #84	@ 0x54
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	40013800 	.word	0x40013800
 8001568:	40021000 	.word	0x40021000
 800156c:	50000800 	.word	0x50000800
 8001570:	50000400 	.word	0x50000400

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	46c0      	nop			@ (mov r8, r8)
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	46c0      	nop			@ (mov r8, r8)
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 f8a6 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	46c0      	nop			@ (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <DMA1_Channel1_IRQHandler+0x14>)
 80015ae:	0018      	movs	r0, r3
 80015b0:	f001 f916 	bl	80027e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b4:	46c0      	nop			@ (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	200000f0 	.word	0x200000f0

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <SystemInit+0x14>)
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	0512      	lsls	r2, r2, #20
 80015ca:	609a      	str	r2, [r3, #8]
#endif
}
 80015cc:	46c0      	nop			@ (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015dc:	f7ff fff0 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015e2:	e003      	b.n	80015ec <LoopCopyDataInit>

080015e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80015e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ea:	3104      	adds	r1, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015ec:	480a      	ldr	r0, [pc, #40]	@ (8001618 <LoopForever+0xa>)
  ldr r3, =_edata
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <LoopForever+0xe>)
  adds r2, r0, r1
 80015f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f4:	d3f6      	bcc.n	80015e4 <CopyDataInit>
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopForever+0x12>)
  b LoopFillZerobss
 80015f8:	e002      	b.n	8001600 <LoopFillZerobss>

080015fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80015fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fe:	3204      	adds	r2, #4

08001600 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <LoopForever+0x16>)
  cmp r2, r3
 8001602:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001604:	d3f9      	bcc.n	80015fa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001606:	f004 fe23 	bl	8006250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7fe ff1d 	bl	8000448 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   r0, =_estack
 8001610:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001614:	08006594 	.word	0x08006594
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800161c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001620:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001624:	20000510 	.word	0x20000510

08001628 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_IRQHandler>

0800162a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f80e 	bl	8001658 <HAL_InitTick>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d003      	beq.n	8001648 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e001      	b.n	800164c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001648:	f7ff fcf2 	bl	8001030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800164c:	1dfb      	adds	r3, r7, #7
 800164e:	781b      	ldrb	r3, [r3, #0]
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	230f      	movs	r3, #15
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001668:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <HAL_InitTick+0x88>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02b      	beq.n	80016c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <HAL_InitTick+0x8c>)
 8001672:	681c      	ldr	r4, [r3, #0]
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_InitTick+0x88>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	0019      	movs	r1, r3
 800167a:	23fa      	movs	r3, #250	@ 0xfa
 800167c:	0098      	lsls	r0, r3, #2
 800167e:	f7fe fd43 	bl	8000108 <__udivsi3>
 8001682:	0003      	movs	r3, r0
 8001684:	0019      	movs	r1, r3
 8001686:	0020      	movs	r0, r4
 8001688:	f7fe fd3e 	bl	8000108 <__udivsi3>
 800168c:	0003      	movs	r3, r0
 800168e:	0018      	movs	r0, r3
 8001690:	f000 ff87 	bl	80025a2 <HAL_SYSTICK_Config>
 8001694:	1e03      	subs	r3, r0, #0
 8001696:	d112      	bne.n	80016be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d80a      	bhi.n	80016b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2301      	movs	r3, #1
 80016a2:	425b      	negs	r3, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 ff56 	bl	8002558 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_InitTick+0x90>)
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e00d      	b.n	80016d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e008      	b.n	80016d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016be:	230f      	movs	r3, #15
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e003      	b.n	80016d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c8:	230f      	movs	r3, #15
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b005      	add	sp, #20
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	2000006c 	.word	0x2000006c
 80016e4:	20000064 	.word	0x20000064
 80016e8:	20000068 	.word	0x20000068

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_IncTick+0x1c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	001a      	movs	r2, r3
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_IncTick+0x20>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	18d2      	adds	r2, r2, r3
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_IncTick+0x20>)
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	2000006c 	.word	0x2000006c
 800170c:	2000050c 	.word	0x2000050c

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b02      	ldr	r3, [pc, #8]	@ (8001720 <HAL_GetTick+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	2000050c 	.word	0x2000050c

08001724 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001734:	401a      	ands	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	ff3fffff 	.word	0xff3fffff

0800174c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	23c0      	movs	r3, #192	@ 0xc0
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	4013      	ands	r3, r2
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}

08001766 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	2104      	movs	r1, #4
 800177a:	400a      	ands	r2, r1
 800177c:	2107      	movs	r1, #7
 800177e:	4091      	lsls	r1, r2
 8001780:	000a      	movs	r2, r1
 8001782:	43d2      	mvns	r2, r2
 8001784:	401a      	ands	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2104      	movs	r1, #4
 800178a:	400b      	ands	r3, r1
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4099      	lsls	r1, r3
 8001790:	000b      	movs	r3, r1
 8001792:	431a      	orrs	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b004      	add	sp, #16
 800179e:	bd80      	pop	{r7, pc}

080017a0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	2104      	movs	r1, #4
 80017b2:	400a      	ands	r2, r1
 80017b4:	2107      	movs	r1, #7
 80017b6:	4091      	lsls	r1, r2
 80017b8:	000a      	movs	r2, r1
 80017ba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2104      	movs	r1, #4
 80017c0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017c2:	40da      	lsrs	r2, r3
 80017c4:	0013      	movs	r3, r2
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}

080017ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	23c0      	movs	r3, #192	@ 0xc0
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4013      	ands	r3, r2
 80017e0:	d101      	bne.n	80017e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	211f      	movs	r1, #31
 8001804:	400a      	ands	r2, r1
 8001806:	210f      	movs	r1, #15
 8001808:	4091      	lsls	r1, r2
 800180a:	000a      	movs	r2, r1
 800180c:	43d2      	mvns	r2, r2
 800180e:	401a      	ands	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	0e9b      	lsrs	r3, r3, #26
 8001814:	210f      	movs	r1, #15
 8001816:	4019      	ands	r1, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	201f      	movs	r0, #31
 800181c:	4003      	ands	r3, r0
 800181e:	4099      	lsls	r1, r3
 8001820:	000b      	movs	r3, r1
 8001822:	431a      	orrs	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}

08001830 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	025b      	lsls	r3, r3, #9
 8001842:	0a5b      	lsrs	r3, r3, #9
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}

08001852 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	0252      	lsls	r2, r2, #9
 8001864:	0a52      	lsrs	r2, r2, #9
 8001866:	43d2      	mvns	r2, r2
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	0212      	lsls	r2, r2, #8
 800188c:	43d2      	mvns	r2, r2
 800188e:	401a      	ands	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	400b      	ands	r3, r1
 8001898:	4904      	ldr	r1, [pc, #16]	@ (80018ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800189a:	400b      	ands	r3, r1
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	7fffff00 	.word	0x7fffff00

080018b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80018be:	4013      	ands	r3, r2
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	0552      	lsls	r2, r2, #21
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	6fffffe8 	.word	0x6fffffe8

080018d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	401a      	ands	r2, r3
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	055b      	lsls	r3, r3, #21
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}

08001900 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <LL_ADC_Enable+0x20>)
 800190e:	4013      	ands	r3, r2
 8001910:	2201      	movs	r2, #1
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	7fffffe8 	.word	0x7fffffe8

08001924 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <LL_ADC_Disable+0x20>)
 8001932:	4013      	ands	r3, r2
 8001934:	2202      	movs	r2, #2
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	7fffffe8 	.word	0x7fffffe8

08001948 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2201      	movs	r2, #1
 8001956:	4013      	ands	r3, r2
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <LL_ADC_IsEnabled+0x18>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <LL_ADC_IsEnabled+0x1a>
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <LL_ADC_REG_StartConversion+0x20>)
 800197a:	4013      	ands	r3, r2
 800197c:	2204      	movs	r2, #4
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	7fffffe8 	.word	0x7fffffe8

08001990 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2204      	movs	r2, #4
 800199e:	4013      	ands	r3, r2
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d101      	bne.n	80019a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019bc:	231f      	movs	r3, #31
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e17e      	b.n	8001cd8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff fb47 	bl	8001078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2254      	movs	r2, #84	@ 0x54
 80019f4:	2100      	movs	r1, #0
 80019f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ff6b 	bl	80018d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d114      	bne.n	8001a30 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff ff50 	bl	80018b0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a10:	4bb3      	ldr	r3, [pc, #716]	@ (8001ce0 <HAL_ADC_Init+0x32c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	49b3      	ldr	r1, [pc, #716]	@ (8001ce4 <HAL_ADC_Init+0x330>)
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7fe fb76 	bl	8000108 <__udivsi3>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a22:	e002      	b.n	8001a2a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff4f 	bl	80018d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d10f      	bne.n	8001a5e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	2210      	movs	r2, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4e:	2201      	movs	r2, #1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a56:	231f      	movs	r3, #31
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7ff ff94 	bl	8001990 <LL_ADC_REG_IsConversionOngoing>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	2210      	movs	r2, #16
 8001a72:	4013      	ands	r3, r2
 8001a74:	d000      	beq.n	8001a78 <HAL_ADC_Init+0xc4>
 8001a76:	e122      	b.n	8001cbe <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d000      	beq.n	8001a80 <HAL_ADC_Init+0xcc>
 8001a7e:	e11e      	b.n	8001cbe <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	4a98      	ldr	r2, [pc, #608]	@ (8001ce8 <HAL_ADC_Init+0x334>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	2202      	movs	r2, #2
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff ff57 	bl	8001948 <LL_ADC_IsEnabled>
 8001a9a:	1e03      	subs	r3, r0, #0
 8001a9c:	d000      	beq.n	8001aa0 <HAL_ADC_Init+0xec>
 8001a9e:	e0ad      	b.n	8001bfc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e1b      	ldrb	r3, [r3, #24]
 8001aa8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001aaa:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7e5b      	ldrb	r3, [r3, #25]
 8001ab0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ab2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e9b      	ldrb	r3, [r3, #26]
 8001ab8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001aba:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_ADC_Init+0x116>
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	015b      	lsls	r3, r3, #5
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_Init+0x118>
 8001aca:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001acc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ad2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da04      	bge.n	8001ae6 <HAL_ADC_Init+0x132>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	085b      	lsrs	r3, r3, #1
 8001ae4:	e001      	b.n	8001aea <HAL_ADC_Init+0x136>
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001aea:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	212c      	movs	r1, #44	@ 0x2c
 8001af0:	5c5b      	ldrb	r3, [r3, r1]
 8001af2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001af4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	5c9b      	ldrb	r3, [r3, r2]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d115      	bne.n	8001b32 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7e9b      	ldrb	r3, [r3, #26]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	0252      	lsls	r2, r2, #9
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	e00b      	b.n	8001b32 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	2220      	movs	r2, #32
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3e:	23e0      	movs	r3, #224	@ 0xe0
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4a65      	ldr	r2, [pc, #404]	@ (8001cec <HAL_ADC_Init+0x338>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0f9b      	lsrs	r3, r3, #30
 8001b6c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b72:	4313      	orrs	r3, r2
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	223c      	movs	r2, #60	@ 0x3c
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d111      	bne.n	8001ba8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0f9b      	lsrs	r3, r3, #30
 8001b8a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b90:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001b96:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001b9c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	4a50      	ldr	r2, [pc, #320]	@ (8001cf0 <HAL_ADC_Init+0x33c>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	23c0      	movs	r3, #192	@ 0xc0
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d018      	beq.n	8001bfc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d012      	beq.n	8001bfc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d00c      	beq.n	8001bfc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001be2:	4b44      	ldr	r3, [pc, #272]	@ (8001cf4 <HAL_ADC_Init+0x340>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a44      	ldr	r2, [pc, #272]	@ (8001cf8 <HAL_ADC_Init+0x344>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	23f0      	movs	r3, #240	@ 0xf0
 8001bf2:	039b      	lsls	r3, r3, #14
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf4 <HAL_ADC_Init+0x340>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c04:	001a      	movs	r2, r3
 8001c06:	2100      	movs	r1, #0
 8001c08:	f7ff fdad 	bl	8001766 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c14:	4939      	ldr	r1, [pc, #228]	@ (8001cfc <HAL_ADC_Init+0x348>)
 8001c16:	001a      	movs	r2, r3
 8001c18:	f7ff fda5 	bl	8001766 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2110      	movs	r1, #16
 8001c30:	4249      	negs	r1, r1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c36:	e018      	b.n	8001c6a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	039b      	lsls	r3, r3, #14
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d112      	bne.n	8001c6a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	221c      	movs	r2, #28
 8001c54:	4013      	ands	r3, r2
 8001c56:	2210      	movs	r2, #16
 8001c58:	4252      	negs	r2, r2
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2100      	movs	r1, #0
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff fd95 	bl	80017a0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c76:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10b      	bne.n	8001c98 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	2201      	movs	r2, #1
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c96:	e01c      	b.n	8001cd2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	2212      	movs	r2, #18
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cac:	2201      	movs	r2, #1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001cb4:	231f      	movs	r3, #31
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cbc:	e009      	b.n	8001cd2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cca:	231f      	movs	r3, #31
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd2:	231f      	movs	r3, #31
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b008      	add	sp, #32
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000064 	.word	0x20000064
 8001ce4:	00030d40 	.word	0x00030d40
 8001ce8:	fffffefd 	.word	0xfffffefd
 8001cec:	ffde0201 	.word	0xffde0201
 8001cf0:	1ffffc02 	.word	0x1ffffc02
 8001cf4:	40012708 	.word	0x40012708
 8001cf8:	ffc3ffff 	.word	0xffc3ffff
 8001cfc:	7fffff04 	.word	0x7fffff04

08001d00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fe3d 	bl	8001990 <LL_ADC_REG_IsConversionOngoing>
 8001d16:	1e03      	subs	r3, r0, #0
 8001d18:	d16c      	bne.n	8001df4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2254      	movs	r2, #84	@ 0x54
 8001d1e:	5c9b      	ldrb	r3, [r3, r2]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_Start_DMA+0x28>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e06c      	b.n	8001e02 <HAL_ADC_Start_DMA+0x102>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2254      	movs	r2, #84	@ 0x54
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d113      	bne.n	8001d64 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff fe01 	bl	8001948 <LL_ADC_IsEnabled>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff fde8 	bl	8001924 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d64:	2517      	movs	r5, #23
 8001d66:	197c      	adds	r4, r7, r5
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 fa3c 	bl	80021e8 <ADC_Enable>
 8001d70:	0003      	movs	r3, r0
 8001d72:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d74:	002c      	movs	r4, r5
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d13e      	bne.n	8001dfc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d82:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <HAL_ADC_Start_DMA+0x10c>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	0052      	lsls	r2, r2, #1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <HAL_ADC_Start_DMA+0x110>)
 8001d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001da2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e14 <HAL_ADC_Start_DMA+0x114>)
 8001da4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001daa:	4a1b      	ldr	r2, [pc, #108]	@ (8001e18 <HAL_ADC_Start_DMA+0x118>)
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	221c      	movs	r2, #28
 8001db4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2254      	movs	r2, #84	@ 0x54
 8001dba:	2100      	movs	r1, #0
 8001dbc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2110      	movs	r1, #16
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3340      	adds	r3, #64	@ 0x40
 8001dd8:	0019      	movs	r1, r3
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	193c      	adds	r4, r7, r4
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f000 fc76 	bl	80026d0 <HAL_DMA_Start_IT>
 8001de4:	0003      	movs	r3, r0
 8001de6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff fdbd 	bl	800196c <LL_ADC_REG_StartConversion>
 8001df2:	e003      	b.n	8001dfc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001df4:	2317      	movs	r3, #23
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2202      	movs	r2, #2
 8001dfa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dfc:	2317      	movs	r3, #23
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b006      	add	sp, #24
 8001e08:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	fffff0fe 	.word	0xfffff0fe
 8001e10:	080022e5 	.word	0x080022e5
 8001e14:	080023ad 	.word	0x080023ad
 8001e18:	080023cb 	.word	0x080023cb

08001e1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e46:	2317      	movs	r3, #23
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2254      	movs	r2, #84	@ 0x54
 8001e56:	5c9b      	ldrb	r3, [r3, r2]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x24>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e1be      	b.n	80021de <HAL_ADC_ConfigChannel+0x3a2>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2254      	movs	r2, #84	@ 0x54
 8001e64:	2101      	movs	r1, #1
 8001e66:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fd8f 	bl	8001990 <LL_ADC_REG_IsConversionOngoing>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d000      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0x3c>
 8001e76:	e1a1      	b.n	80021bc <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d100      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x46>
 8001e80:	e152      	b.n	8002128 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d004      	beq.n	8001e98 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e92:	4ac2      	ldr	r2, [pc, #776]	@ (800219c <HAL_ADC_ConfigChannel+0x360>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d108      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	0010      	movs	r0, r2
 8001ea4:	f7ff fcc4 	bl	8001830 <LL_ADC_REG_SetSequencerChAdd>
 8001ea8:	e0ed      	b.n	8002086 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	211f      	movs	r1, #31
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	4099      	lsls	r1, r3
 8001eba:	000b      	movs	r3, r1
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	0a5b      	lsrs	r3, r3, #9
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x9c>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	221f      	movs	r2, #31
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	e0bc      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d000      	beq.n	8001ee4 <HAL_ADC_ConfigChannel+0xa8>
 8001ee2:	e0b5      	b.n	8002050 <HAL_ADC_ConfigChannel+0x214>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	4013      	ands	r3, r2
 8001eec:	d000      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0xb4>
 8001eee:	e0ad      	b.n	800204c <HAL_ADC_ConfigChannel+0x210>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d000      	beq.n	8001efc <HAL_ADC_ConfigChannel+0xc0>
 8001efa:	e0a5      	b.n	8002048 <HAL_ADC_ConfigChannel+0x20c>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2208      	movs	r2, #8
 8001f02:	4013      	ands	r3, r2
 8001f04:	d000      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0xcc>
 8001f06:	e09d      	b.n	8002044 <HAL_ADC_ConfigChannel+0x208>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d000      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0xd8>
 8001f12:	e095      	b.n	8002040 <HAL_ADC_ConfigChannel+0x204>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d000      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0xe4>
 8001f1e:	e08d      	b.n	800203c <HAL_ADC_ConfigChannel+0x200>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2240      	movs	r2, #64	@ 0x40
 8001f26:	4013      	ands	r3, r2
 8001f28:	d000      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0xf0>
 8001f2a:	e085      	b.n	8002038 <HAL_ADC_ConfigChannel+0x1fc>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2280      	movs	r2, #128	@ 0x80
 8001f32:	4013      	ands	r3, r2
 8001f34:	d000      	beq.n	8001f38 <HAL_ADC_ConfigChannel+0xfc>
 8001f36:	e07d      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1f8>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d000      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x10a>
 8001f44:	e074      	b.n	8002030 <HAL_ADC_ConfigChannel+0x1f4>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d000      	beq.n	8001f54 <HAL_ADC_ConfigChannel+0x118>
 8001f52:	e06b      	b.n	800202c <HAL_ADC_ConfigChannel+0x1f0>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d000      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x126>
 8001f60:	e062      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1ec>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d000      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x134>
 8001f6e:	e059      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1e8>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d151      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1e4>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	019b      	lsls	r3, r3, #6
 8001f84:	4013      	ands	r3, r2
 8001f86:	d149      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1e0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	01db      	lsls	r3, r3, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	d141      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1dc>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d139      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1d8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	025b      	lsls	r3, r3, #9
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d131      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1d4>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d129      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1d0>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	02db      	lsls	r3, r3, #11
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d121      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1cc>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	031b      	lsls	r3, r3, #12
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d119      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1c8>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	035b      	lsls	r3, r3, #13
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1c4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	039b      	lsls	r3, r3, #14
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1c0>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	03db      	lsls	r3, r3, #15
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d001      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x1bc>
 8001ff4:	2316      	movs	r3, #22
 8001ff6:	e02c      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e02a      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8001ffc:	2315      	movs	r3, #21
 8001ffe:	e028      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002000:	2314      	movs	r3, #20
 8002002:	e026      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002004:	2313      	movs	r3, #19
 8002006:	e024      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002008:	2312      	movs	r3, #18
 800200a:	e022      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 800200c:	2311      	movs	r3, #17
 800200e:	e020      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002010:	2310      	movs	r3, #16
 8002012:	e01e      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002014:	230f      	movs	r3, #15
 8002016:	e01c      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002018:	230e      	movs	r3, #14
 800201a:	e01a      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 800201c:	230d      	movs	r3, #13
 800201e:	e018      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002020:	230c      	movs	r3, #12
 8002022:	e016      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002024:	230b      	movs	r3, #11
 8002026:	e014      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002028:	230a      	movs	r3, #10
 800202a:	e012      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 800202c:	2309      	movs	r3, #9
 800202e:	e010      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002030:	2308      	movs	r3, #8
 8002032:	e00e      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002034:	2307      	movs	r3, #7
 8002036:	e00c      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002038:	2306      	movs	r3, #6
 800203a:	e00a      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 800203c:	2305      	movs	r3, #5
 800203e:	e008      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002040:	2304      	movs	r3, #4
 8002042:	e006      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002044:	2303      	movs	r3, #3
 8002046:	e004      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002048:	2302      	movs	r3, #2
 800204a:	e002      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_ADC_ConfigChannel+0x216>
 8002050:	2300      	movs	r3, #0
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	6852      	ldr	r2, [r2, #4]
 8002056:	201f      	movs	r0, #31
 8002058:	4002      	ands	r2, r0
 800205a:	4093      	lsls	r3, r2
 800205c:	000a      	movs	r2, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	429a      	cmp	r2, r3
 8002072:	d808      	bhi.n	8002086 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	001a      	movs	r2, r3
 8002082:	f7ff fbb5 	bl	80017f0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	001a      	movs	r2, r3
 8002094:	f7ff fbf0 	bl	8001878 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db00      	blt.n	80020a2 <HAL_ADC_ConfigChannel+0x266>
 80020a0:	e096      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a2:	4b3f      	ldr	r3, [pc, #252]	@ (80021a0 <HAL_ADC_ConfigChannel+0x364>)
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff fb51 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 80020aa:	0003      	movs	r3, r0
 80020ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a3c      	ldr	r2, [pc, #240]	@ (80021a4 <HAL_ADC_ConfigChannel+0x368>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d123      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020c0:	d11e      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	0412      	lsls	r2, r2, #16
 80020c8:	4313      	orrs	r3, r2
 80020ca:	4a35      	ldr	r2, [pc, #212]	@ (80021a0 <HAL_ADC_ConfigChannel+0x364>)
 80020cc:	0019      	movs	r1, r3
 80020ce:	0010      	movs	r0, r2
 80020d0:	f7ff fb28 	bl	8001724 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80020d4:	4b34      	ldr	r3, [pc, #208]	@ (80021a8 <HAL_ADC_ConfigChannel+0x36c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4934      	ldr	r1, [pc, #208]	@ (80021ac <HAL_ADC_ConfigChannel+0x370>)
 80020da:	0018      	movs	r0, r3
 80020dc:	f7fe f814 	bl	8000108 <__udivsi3>
 80020e0:	0003      	movs	r3, r0
 80020e2:	001a      	movs	r2, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	189b      	adds	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020fe:	e067      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2a      	ldr	r2, [pc, #168]	@ (80021b0 <HAL_ADC_ConfigChannel+0x374>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d162      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	03db      	lsls	r3, r3, #15
 8002110:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002112:	d15d      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	03d2      	lsls	r2, r2, #15
 800211a:	4313      	orrs	r3, r2
 800211c:	4a20      	ldr	r2, [pc, #128]	@ (80021a0 <HAL_ADC_ConfigChannel+0x364>)
 800211e:	0019      	movs	r1, r3
 8002120:	0010      	movs	r0, r2
 8002122:	f7ff faff 	bl	8001724 <LL_ADC_SetCommonPathInternalCh>
 8002126:	e053      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	061b      	lsls	r3, r3, #24
 8002130:	429a      	cmp	r2, r3
 8002132:	d004      	beq.n	800213e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002138:	4a18      	ldr	r2, [pc, #96]	@ (800219c <HAL_ADC_ConfigChannel+0x360>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d107      	bne.n	800214e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0019      	movs	r1, r3
 8002148:	0010      	movs	r0, r2
 800214a:	f7ff fb82 	bl	8001852 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	da3c      	bge.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002156:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_ADC_ConfigChannel+0x364>)
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff faf7 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 800215e:	0003      	movs	r3, r0
 8002160:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a0f      	ldr	r2, [pc, #60]	@ (80021a4 <HAL_ADC_ConfigChannel+0x368>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4a11      	ldr	r2, [pc, #68]	@ (80021b4 <HAL_ADC_ConfigChannel+0x378>)
 8002170:	4013      	ands	r3, r2
 8002172:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_ADC_ConfigChannel+0x364>)
 8002174:	0019      	movs	r1, r3
 8002176:	0010      	movs	r0, r2
 8002178:	f7ff fad4 	bl	8001724 <LL_ADC_SetCommonPathInternalCh>
 800217c:	e028      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a0b      	ldr	r2, [pc, #44]	@ (80021b0 <HAL_ADC_ConfigChannel+0x374>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d123      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4a0b      	ldr	r2, [pc, #44]	@ (80021b8 <HAL_ADC_ConfigChannel+0x37c>)
 800218c:	4013      	ands	r3, r2
 800218e:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <HAL_ADC_ConfigChannel+0x364>)
 8002190:	0019      	movs	r1, r3
 8002192:	0010      	movs	r0, r2
 8002194:	f7ff fac6 	bl	8001724 <LL_ADC_SetCommonPathInternalCh>
 8002198:	e01a      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x394>
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	80000004 	.word	0x80000004
 80021a0:	40012708 	.word	0x40012708
 80021a4:	a4000200 	.word	0xa4000200
 80021a8:	20000064 	.word	0x20000064
 80021ac:	00030d40 	.word	0x00030d40
 80021b0:	a8000400 	.word	0xa8000400
 80021b4:	ff7fffff 	.word	0xff7fffff
 80021b8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	2220      	movs	r2, #32
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021c8:	2317      	movs	r3, #23
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2254      	movs	r2, #84	@ 0x54
 80021d4:	2100      	movs	r1, #0
 80021d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80021d8:	2317      	movs	r3, #23
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b006      	add	sp, #24
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)

080021e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff fba5 	bl	8001948 <LL_ADC_IsEnabled>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d162      	bne.n	80022c8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a32      	ldr	r2, [pc, #200]	@ (80022d4 <ADC_Enable+0xec>)
 800220a:	4013      	ands	r3, r2
 800220c:	d00d      	beq.n	800222a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	2210      	movs	r2, #16
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221e:	2201      	movs	r2, #1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e04f      	b.n	80022ca <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0018      	movs	r0, r3
 8002230:	f7ff fb66 	bl	8001900 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002234:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <ADC_Enable+0xf0>)
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff fa88 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 800223c:	0002      	movs	r2, r0
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	4013      	ands	r3, r2
 8002244:	d00f      	beq.n	8002266 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <ADC_Enable+0xf4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4925      	ldr	r1, [pc, #148]	@ (80022e0 <ADC_Enable+0xf8>)
 800224c:	0018      	movs	r0, r3
 800224e:	f7fd ff5b 	bl	8000108 <__udivsi3>
 8002252:	0003      	movs	r3, r0
 8002254:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002256:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002258:	e002      	b.n	8002260 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3b01      	subs	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f9      	bne.n	800225a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7e5b      	ldrb	r3, [r3, #25]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d02c      	beq.n	80022c8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800226e:	f7ff fa4f 	bl	8001710 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002276:	e020      	b.n	80022ba <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff fb63 	bl	8001948 <LL_ADC_IsEnabled>
 8002282:	1e03      	subs	r3, r0, #0
 8002284:	d104      	bne.n	8002290 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fb38 	bl	8001900 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002290:	f7ff fa3e 	bl	8001710 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d90d      	bls.n	80022ba <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	2210      	movs	r2, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ae:	2201      	movs	r2, #1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e007      	b.n	80022ca <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d1d7      	bne.n	8002278 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	80000017 	.word	0x80000017
 80022d8:	40012708 	.word	0x40012708
 80022dc:	20000064 	.word	0x20000064
 80022e0:	00030d40 	.word	0x00030d40

080022e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	2250      	movs	r2, #80	@ 0x50
 80022f8:	4013      	ands	r3, r2
 80022fa:	d141      	bne.n	8002380 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff fa5d 	bl	80017ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8002314:	1e03      	subs	r3, r0, #0
 8002316:	d02e      	beq.n	8002376 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	7e9b      	ldrb	r3, [r3, #26]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d12a      	bne.n	8002376 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2208      	movs	r2, #8
 8002328:	4013      	ands	r3, r2
 800232a:	2b08      	cmp	r3, #8
 800232c:	d123      	bne.n	8002376 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0018      	movs	r0, r3
 8002334:	f7ff fb2c 	bl	8001990 <LL_ADC_REG_IsConversionOngoing>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d110      	bne.n	800235e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	210c      	movs	r1, #12
 8002348:	438a      	bics	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	4a15      	ldr	r2, [pc, #84]	@ (80023a8 <ADC_DMAConvCplt+0xc4>)
 8002352:	4013      	ands	r3, r2
 8002354:	2201      	movs	r2, #1
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	659a      	str	r2, [r3, #88]	@ 0x58
 800235c:	e00b      	b.n	8002376 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	2220      	movs	r2, #32
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	2201      	movs	r2, #1
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0018      	movs	r0, r3
 800237a:	f7fe f83b 	bl	80003f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800237e:	e00f      	b.n	80023a0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	2210      	movs	r2, #16
 8002386:	4013      	ands	r3, r2
 8002388:	d004      	beq.n	8002394 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff fd4d 	bl	8001e2c <HAL_ADC_ErrorCallback>
}
 8002392:	e005      	b.n	80023a0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	0010      	movs	r0, r2
 800239e:	4798      	blx	r3
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	fffffefe 	.word	0xfffffefe

080023ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff fd2d 	bl	8001e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}

080023ca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	2240      	movs	r2, #64	@ 0x40
 80023de:	431a      	orrs	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	2204      	movs	r2, #4
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f7ff fd1a 	bl	8001e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}

08002400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	0002      	movs	r2, r0
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800240c:	1dfb      	adds	r3, r7, #7
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b7f      	cmp	r3, #127	@ 0x7f
 8002412:	d809      	bhi.n	8002428 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	001a      	movs	r2, r3
 800241a:	231f      	movs	r3, #31
 800241c:	401a      	ands	r2, r3
 800241e:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <__NVIC_EnableIRQ+0x30>)
 8002420:	2101      	movs	r1, #1
 8002422:	4091      	lsls	r1, r2
 8002424:	000a      	movs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	0002      	movs	r2, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b7f      	cmp	r3, #127	@ 0x7f
 8002448:	d828      	bhi.n	800249c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800244a:	4a2f      	ldr	r2, [pc, #188]	@ (8002508 <__NVIC_SetPriority+0xd4>)
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	b25b      	sxtb	r3, r3
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	33c0      	adds	r3, #192	@ 0xc0
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	589b      	ldr	r3, [r3, r2]
 800245a:	1dfa      	adds	r2, r7, #7
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	0011      	movs	r1, r2
 8002460:	2203      	movs	r2, #3
 8002462:	400a      	ands	r2, r1
 8002464:	00d2      	lsls	r2, r2, #3
 8002466:	21ff      	movs	r1, #255	@ 0xff
 8002468:	4091      	lsls	r1, r2
 800246a:	000a      	movs	r2, r1
 800246c:	43d2      	mvns	r2, r2
 800246e:	401a      	ands	r2, r3
 8002470:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	22ff      	movs	r2, #255	@ 0xff
 8002478:	401a      	ands	r2, r3
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	0018      	movs	r0, r3
 8002480:	2303      	movs	r3, #3
 8002482:	4003      	ands	r3, r0
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002488:	481f      	ldr	r0, [pc, #124]	@ (8002508 <__NVIC_SetPriority+0xd4>)
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b25b      	sxtb	r3, r3
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	430a      	orrs	r2, r1
 8002494:	33c0      	adds	r3, #192	@ 0xc0
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800249a:	e031      	b.n	8002500 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249c:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <__NVIC_SetPriority+0xd8>)
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	0019      	movs	r1, r3
 80024a4:	230f      	movs	r3, #15
 80024a6:	400b      	ands	r3, r1
 80024a8:	3b08      	subs	r3, #8
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3306      	adds	r3, #6
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	18d3      	adds	r3, r2, r3
 80024b2:	3304      	adds	r3, #4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1dfa      	adds	r2, r7, #7
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	0011      	movs	r1, r2
 80024bc:	2203      	movs	r2, #3
 80024be:	400a      	ands	r2, r1
 80024c0:	00d2      	lsls	r2, r2, #3
 80024c2:	21ff      	movs	r1, #255	@ 0xff
 80024c4:	4091      	lsls	r1, r2
 80024c6:	000a      	movs	r2, r1
 80024c8:	43d2      	mvns	r2, r2
 80024ca:	401a      	ands	r2, r3
 80024cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	019b      	lsls	r3, r3, #6
 80024d2:	22ff      	movs	r2, #255	@ 0xff
 80024d4:	401a      	ands	r2, r3
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	0018      	movs	r0, r3
 80024dc:	2303      	movs	r3, #3
 80024de:	4003      	ands	r3, r0
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024e4:	4809      	ldr	r0, [pc, #36]	@ (800250c <__NVIC_SetPriority+0xd8>)
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	001c      	movs	r4, r3
 80024ec:	230f      	movs	r3, #15
 80024ee:	4023      	ands	r3, r4
 80024f0:	3b08      	subs	r3, #8
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	430a      	orrs	r2, r1
 80024f6:	3306      	adds	r3, #6
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	18c3      	adds	r3, r0, r3
 80024fc:	3304      	adds	r3, #4
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b003      	add	sp, #12
 8002506:	bd90      	pop	{r4, r7, pc}
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	045b      	lsls	r3, r3, #17
 8002520:	429a      	cmp	r2, r3
 8002522:	d301      	bcc.n	8002528 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002524:	2301      	movs	r3, #1
 8002526:	e010      	b.n	800254a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <SysTick_Config+0x44>)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	3a01      	subs	r2, #1
 800252e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002530:	2301      	movs	r3, #1
 8002532:	425b      	negs	r3, r3
 8002534:	2103      	movs	r1, #3
 8002536:	0018      	movs	r0, r3
 8002538:	f7ff ff7c 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <SysTick_Config+0x44>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <SysTick_Config+0x44>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	210f      	movs	r1, #15
 8002564:	187b      	adds	r3, r7, r1
 8002566:	1c02      	adds	r2, r0, #0
 8002568:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	187b      	adds	r3, r7, r1
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b25b      	sxtb	r3, r3
 8002572:	0011      	movs	r1, r2
 8002574:	0018      	movs	r0, r3
 8002576:	f7ff ff5d 	bl	8002434 <__NVIC_SetPriority>
}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	0002      	movs	r2, r0
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	b25b      	sxtb	r3, r3
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff ff33 	bl	8002400 <__NVIC_EnableIRQ>
}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff ffaf 	bl	8002510 <SysTick_Config>
 80025b2:	0003      	movs	r3, r0
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e077      	b.n	80026be <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a3d      	ldr	r2, [pc, #244]	@ (80026c8 <HAL_DMA_Init+0x10c>)
 80025d4:	4694      	mov	ip, r2
 80025d6:	4463      	add	r3, ip
 80025d8:	2114      	movs	r1, #20
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd94 	bl	8000108 <__udivsi3>
 80025e0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80025e2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2225      	movs	r2, #37	@ 0x25
 80025ec:	2102      	movs	r1, #2
 80025ee:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4934      	ldr	r1, [pc, #208]	@ (80026cc <HAL_DMA_Init+0x110>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 f9c3 	bl	80029c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	01db      	lsls	r3, r3, #7
 8002646:	429a      	cmp	r2, r3
 8002648:	d102      	bne.n	8002650 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002658:	21ff      	movs	r1, #255	@ 0xff
 800265a:	400a      	ands	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002666:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d011      	beq.n	8002694 <HAL_DMA_Init+0xd8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d80d      	bhi.n	8002694 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f9ce 	bl	8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	e008      	b.n	80026a6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2225      	movs	r2, #37	@ 0x25
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	@ 0x24
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	bffdfff8 	.word	0xbffdfff8
 80026cc:	ffff800f 	.word	0xffff800f

080026d0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2317      	movs	r3, #23
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2224      	movs	r2, #36	@ 0x24
 80026ea:	5c9b      	ldrb	r3, [r3, r2]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Start_IT+0x24>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e070      	b.n	80027d6 <HAL_DMA_Start_IT+0x106>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2224      	movs	r2, #36	@ 0x24
 80026f8:	2101      	movs	r1, #1
 80026fa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2225      	movs	r2, #37	@ 0x25
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d157      	bne.n	80027b8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2225      	movs	r2, #37	@ 0x25
 800270c:	2102      	movs	r1, #2
 800270e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	438a      	bics	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f909 	bl	8002944 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	210e      	movs	r1, #14
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e00f      	b.n	800276c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2104      	movs	r1, #4
 8002758:	438a      	bics	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	210a      	movs	r1, #10
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	025b      	lsls	r3, r3, #9
 8002776:	4013      	ands	r3, r2
 8002778:	d008      	beq.n	800278c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002784:	2180      	movs	r1, #128	@ 0x80
 8002786:	0049      	lsls	r1, r1, #1
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	0049      	lsls	r1, r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e007      	b.n	80027c8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2224      	movs	r2, #36	@ 0x24
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027c0:	2317      	movs	r3, #23
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2224      	movs	r2, #36	@ 0x24
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]

  return status;
 80027d0:	2317      	movs	r3, #23
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	781b      	ldrb	r3, [r3, #0]
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b006      	add	sp, #24
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80027e8:	4b55      	ldr	r3, [pc, #340]	@ (8002940 <HAL_DMA_IRQHandler+0x160>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	221c      	movs	r2, #28
 80027fc:	4013      	ands	r3, r2
 80027fe:	2204      	movs	r2, #4
 8002800:	409a      	lsls	r2, r3
 8002802:	0013      	movs	r3, r2
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	d027      	beq.n	800285a <HAL_DMA_IRQHandler+0x7a>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2204      	movs	r2, #4
 800280e:	4013      	ands	r3, r2
 8002810:	d023      	beq.n	800285a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2220      	movs	r2, #32
 800281a:	4013      	ands	r3, r2
 800281c:	d107      	bne.n	800282e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2104      	movs	r1, #4
 800282a:	438a      	bics	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800282e:	4b44      	ldr	r3, [pc, #272]	@ (8002940 <HAL_DMA_IRQHandler+0x160>)
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	221c      	movs	r2, #28
 8002838:	4013      	ands	r3, r2
 800283a:	2204      	movs	r2, #4
 800283c:	409a      	lsls	r2, r3
 800283e:	4b40      	ldr	r3, [pc, #256]	@ (8002940 <HAL_DMA_IRQHandler+0x160>)
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	2b00      	cmp	r3, #0
 800284a:	d100      	bne.n	800284e <HAL_DMA_IRQHandler+0x6e>
 800284c:	e073      	b.n	8002936 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	0010      	movs	r0, r2
 8002856:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002858:	e06d      	b.n	8002936 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	221c      	movs	r2, #28
 8002860:	4013      	ands	r3, r2
 8002862:	2202      	movs	r2, #2
 8002864:	409a      	lsls	r2, r3
 8002866:	0013      	movs	r3, r2
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	d02e      	beq.n	80028cc <HAL_DMA_IRQHandler+0xec>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2202      	movs	r2, #2
 8002872:	4013      	ands	r3, r2
 8002874:	d02a      	beq.n	80028cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2220      	movs	r2, #32
 800287e:	4013      	ands	r3, r2
 8002880:	d10b      	bne.n	800289a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	210a      	movs	r1, #10
 800288e:	438a      	bics	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2225      	movs	r2, #37	@ 0x25
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800289a:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <HAL_DMA_IRQHandler+0x160>)
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	221c      	movs	r2, #28
 80028a4:	4013      	ands	r3, r2
 80028a6:	2202      	movs	r2, #2
 80028a8:	409a      	lsls	r2, r3
 80028aa:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_DMA_IRQHandler+0x160>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	@ 0x24
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03a      	beq.n	8002936 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	0010      	movs	r0, r2
 80028c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028ca:	e034      	b.n	8002936 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	221c      	movs	r2, #28
 80028d2:	4013      	ands	r3, r2
 80028d4:	2208      	movs	r2, #8
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	d02b      	beq.n	8002938 <HAL_DMA_IRQHandler+0x158>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2208      	movs	r2, #8
 80028e4:	4013      	ands	r3, r2
 80028e6:	d027      	beq.n	8002938 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	210e      	movs	r1, #14
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_DMA_IRQHandler+0x160>)
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	221c      	movs	r2, #28
 8002902:	4013      	ands	r3, r2
 8002904:	2201      	movs	r2, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <HAL_DMA_IRQHandler+0x160>)
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2225      	movs	r2, #37	@ 0x25
 8002918:	2101      	movs	r1, #1
 800291a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	@ 0x24
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	0010      	movs	r0, r2
 8002934:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46c0      	nop			@ (mov r8, r8)
}
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40020000 	.word	0x40020000

08002944 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800295a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800296c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800296e:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <DMA_SetConfig+0x7c>)
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	221c      	movs	r2, #28
 8002978:	4013      	ands	r3, r2
 800297a:	2201      	movs	r2, #1
 800297c:	409a      	lsls	r2, r3
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <DMA_SetConfig+0x7c>)
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b10      	cmp	r3, #16
 8002992:	d108      	bne.n	80029a6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029a4:	e007      	b.n	80029b6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	60da      	str	r2, [r3, #12]
}
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	40020000 	.word	0x40020000

080029c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	23ff      	movs	r3, #255	@ 0xff
 80029d4:	4013      	ands	r3, r2
 80029d6:	3b08      	subs	r3, #8
 80029d8:	2114      	movs	r1, #20
 80029da:	0018      	movs	r0, r3
 80029dc:	f7fd fb94 	bl	8000108 <__udivsi3>
 80029e0:	0003      	movs	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80029ec:	4694      	mov	ip, r2
 80029ee:	4463      	add	r3, ip
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	001a      	movs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80029fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	221c      	movs	r2, #28
 8002a02:	4013      	ands	r3, r2
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	10008200 	.word	0x10008200
 8002a18:	40020880 	.word	0x40020880

08002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	22ff      	movs	r2, #255	@ 0xff
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a32:	4694      	mov	ip, r2
 8002a34:	4463      	add	r3, ip
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	001a      	movs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	2203      	movs	r2, #3
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	1000823f 	.word	0x1000823f
 8002a60:	40020940 	.word	0x40020940

08002a64 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a72:	e153      	b.n	8002d1c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4091      	lsls	r1, r2
 8002a7e:	000a      	movs	r2, r1
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d100      	bne.n	8002a8c <HAL_GPIO_Init+0x28>
 8002a8a:	e144      	b.n	8002d16 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x38>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b12      	cmp	r3, #18
 8002a9a:	d125      	bne.n	8002ae8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	0092      	lsls	r2, r2, #2
 8002aa6:	58d3      	ldr	r3, [r2, r3]
 8002aa8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2207      	movs	r2, #7
 8002aae:	4013      	ands	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2107      	movs	r1, #7
 8002acc:	400b      	ands	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	0013      	movs	r3, r2
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	409a      	lsls	r2, r3
 8002af6:	0013      	movs	r3, r2
 8002af8:	43da      	mvns	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2203      	movs	r2, #3
 8002b06:	401a      	ands	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d00b      	beq.n	8002b3c <HAL_GPIO_Init+0xd8>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d007      	beq.n	8002b3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b30:	2b11      	cmp	r3, #17
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b12      	cmp	r3, #18
 8002b3a:	d130      	bne.n	8002b9e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	0013      	movs	r3, r2
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b72:	2201      	movs	r2, #1
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	2201      	movs	r2, #1
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	0013      	movs	r3, r2
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d017      	beq.n	8002bd6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	0013      	movs	r3, r2
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	055b      	lsls	r3, r3, #21
 8002bde:	4013      	ands	r3, r2
 8002be0:	d100      	bne.n	8002be4 <HAL_GPIO_Init+0x180>
 8002be2:	e098      	b.n	8002d16 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002be4:	4a53      	ldr	r2, [pc, #332]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3318      	adds	r3, #24
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	589b      	ldr	r3, [r3, r2]
 8002bf0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	0013      	movs	r3, r2
 8002c00:	43da      	mvns	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	23a0      	movs	r3, #160	@ 0xa0
 8002c0c:	05db      	lsls	r3, r3, #23
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x1e2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a48      	ldr	r2, [pc, #288]	@ (8002d38 <HAL_GPIO_Init+0x2d4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x1de>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a47      	ldr	r2, [pc, #284]	@ (8002d3c <HAL_GPIO_Init+0x2d8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x1da>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a46      	ldr	r2, [pc, #280]	@ (8002d40 <HAL_GPIO_Init+0x2dc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x1d6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a45      	ldr	r2, [pc, #276]	@ (8002d44 <HAL_GPIO_Init+0x2e0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x1d2>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x1e4>
 8002c36:	2306      	movs	r3, #6
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x1e4>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x1e4>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x1e4>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x1e4>
 8002c46:	2300      	movs	r3, #0
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	00d2      	lsls	r2, r2, #3
 8002c50:	4093      	lsls	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002c58:	4936      	ldr	r1, [pc, #216]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3318      	adds	r3, #24
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002c66:	4a33      	ldr	r2, [pc, #204]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	58d3      	ldr	r3, [r2, r3]
 8002c6c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	025b      	lsls	r3, r3, #9
 8002c80:	4013      	ands	r3, r2
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002c8c:	4929      	ldr	r1, [pc, #164]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	2280      	movs	r2, #128	@ 0x80
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002c94:	4a27      	ldr	r2, [pc, #156]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002c96:	2384      	movs	r3, #132	@ 0x84
 8002c98:	58d3      	ldr	r3, [r2, r3]
 8002c9a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002cba:	491e      	ldr	r1, [pc, #120]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cbc:	2284      	movs	r2, #132	@ 0x84
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	035b      	lsls	r3, r3, #13
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002cec:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	039b      	lsls	r3, r3, #14
 8002d04:	4013      	ands	r3, r2
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002d10:	4b08      	ldr	r3, [pc, #32]	@ (8002d34 <HAL_GPIO_Init+0x2d0>)
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	40da      	lsrs	r2, r3
 8002d24:	1e13      	subs	r3, r2, #0
 8002d26:	d000      	beq.n	8002d2a <HAL_GPIO_Init+0x2c6>
 8002d28:	e6a4      	b.n	8002a74 <HAL_GPIO_Init+0x10>
  }
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b006      	add	sp, #24
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021800 	.word	0x40021800
 8002d38:	50000400 	.word	0x50000400
 8002d3c:	50000800 	.word	0x50000800
 8002d40:	50000c00 	.word	0x50000c00
 8002d44:	50001400 	.word	0x50001400

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	0008      	movs	r0, r1
 8002d52:	0011      	movs	r1, r2
 8002d54:	1cbb      	adds	r3, r7, #2
 8002d56:	1c02      	adds	r2, r0, #0
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	1c7b      	adds	r3, r7, #1
 8002d5c:	1c0a      	adds	r2, r1, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d60:	1c7b      	adds	r3, r7, #1
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d68:	1cbb      	adds	r3, r7, #2
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	881a      	ldrh	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e08f      	b.n	8002eb6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2241      	movs	r2, #65	@ 0x41
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2240      	movs	r2, #64	@ 0x40
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fe f9ef 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2241      	movs	r2, #65	@ 0x41
 8002db6:	2124      	movs	r1, #36	@ 0x24
 8002db8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	493b      	ldr	r1, [pc, #236]	@ (8002ec0 <HAL_I2C_Init+0x13c>)
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4938      	ldr	r1, [pc, #224]	@ (8002ec4 <HAL_I2C_Init+0x140>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d108      	bne.n	8002e02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2180      	movs	r1, #128	@ 0x80
 8002dfa:	0209      	lsls	r1, r1, #8
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	e007      	b.n	8002e12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2184      	movs	r1, #132	@ 0x84
 8002e0c:	0209      	lsls	r1, r1, #8
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d109      	bne.n	8002e2e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0109      	lsls	r1, r1, #4
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	e007      	b.n	8002e3e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4923      	ldr	r1, [pc, #140]	@ (8002ec8 <HAL_I2C_Init+0x144>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4920      	ldr	r1, [pc, #128]	@ (8002ecc <HAL_I2C_Init+0x148>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	491a      	ldr	r1, [pc, #104]	@ (8002ec4 <HAL_I2C_Init+0x140>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69d9      	ldr	r1, [r3, #28]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2241      	movs	r2, #65	@ 0x41
 8002ea2:	2120      	movs	r1, #32
 8002ea4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2242      	movs	r2, #66	@ 0x42
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	f0ffffff 	.word	0xf0ffffff
 8002ec4:	ffff7fff 	.word	0xffff7fff
 8002ec8:	fffff7ff 	.word	0xfffff7ff
 8002ecc:	02008000 	.word	0x02008000

08002ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2241      	movs	r2, #65	@ 0x41
 8002ede:	5c9b      	ldrb	r3, [r3, r2]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d138      	bne.n	8002f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2240      	movs	r2, #64	@ 0x40
 8002eea:	5c9b      	ldrb	r3, [r3, r2]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e032      	b.n	8002f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2240      	movs	r2, #64	@ 0x40
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2241      	movs	r2, #65	@ 0x41
 8002f00:	2124      	movs	r1, #36	@ 0x24
 8002f02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2101      	movs	r1, #1
 8002f10:	438a      	bics	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4911      	ldr	r1, [pc, #68]	@ (8002f64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f20:	400a      	ands	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2241      	movs	r2, #65	@ 0x41
 8002f48:	2120      	movs	r1, #32
 8002f4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	ffffefff 	.word	0xffffefff

08002f68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2241      	movs	r2, #65	@ 0x41
 8002f76:	5c9b      	ldrb	r3, [r3, r2]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d139      	bne.n	8002ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	5c9b      	ldrb	r3, [r3, r2]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e033      	b.n	8002ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2240      	movs	r2, #64	@ 0x40
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2241      	movs	r2, #65	@ 0x41
 8002f98:	2124      	movs	r1, #36	@ 0x24
 8002f9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	438a      	bics	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a11      	ldr	r2, [pc, #68]	@ (8002ffc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2241      	movs	r2, #65	@ 0x41
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2240      	movs	r2, #64	@ 0x40
 8002fea:	2100      	movs	r1, #0
 8002fec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
  }
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	fffff0ff 	.word	0xfffff0ff

08003000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e20f      	b.n	8003432 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2201      	movs	r2, #1
 8003018:	4013      	ands	r3, r2
 800301a:	d100      	bne.n	800301e <HAL_RCC_OscConfig+0x1e>
 800301c:	e069      	b.n	80030f2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301e:	4bc8      	ldr	r3, [pc, #800]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2238      	movs	r2, #56	@ 0x38
 8003024:	4013      	ands	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b08      	cmp	r3, #8
 800302c:	d105      	bne.n	800303a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d15d      	bne.n	80030f2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1fb      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	429a      	cmp	r2, r3
 8003044:	d107      	bne.n	8003056 <HAL_RCC_OscConfig+0x56>
 8003046:	4bbe      	ldr	r3, [pc, #760]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4bbd      	ldr	r3, [pc, #756]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800304c:	2180      	movs	r1, #128	@ 0x80
 800304e:	0249      	lsls	r1, r1, #9
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e020      	b.n	8003098 <HAL_RCC_OscConfig+0x98>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	23a0      	movs	r3, #160	@ 0xa0
 800305c:	02db      	lsls	r3, r3, #11
 800305e:	429a      	cmp	r2, r3
 8003060:	d10e      	bne.n	8003080 <HAL_RCC_OscConfig+0x80>
 8003062:	4bb7      	ldr	r3, [pc, #732]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4bb6      	ldr	r3, [pc, #728]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003068:	2180      	movs	r1, #128	@ 0x80
 800306a:	02c9      	lsls	r1, r1, #11
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	4bb3      	ldr	r3, [pc, #716]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4bb2      	ldr	r3, [pc, #712]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003076:	2180      	movs	r1, #128	@ 0x80
 8003078:	0249      	lsls	r1, r1, #9
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0x98>
 8003080:	4baf      	ldr	r3, [pc, #700]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4bae      	ldr	r3, [pc, #696]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003086:	49af      	ldr	r1, [pc, #700]	@ (8003344 <HAL_RCC_OscConfig+0x344>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4bac      	ldr	r3, [pc, #688]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4bab      	ldr	r3, [pc, #684]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003092:	49ad      	ldr	r1, [pc, #692]	@ (8003348 <HAL_RCC_OscConfig+0x348>)
 8003094:	400a      	ands	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d014      	beq.n	80030ca <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fb36 	bl	8001710 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80030aa:	f7fe fb31 	bl	8001710 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b64      	cmp	r3, #100	@ 0x64
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1ba      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030bc:	4ba0      	ldr	r3, [pc, #640]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	@ 0x80
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	4013      	ands	r3, r2
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0xaa>
 80030c8:	e013      	b.n	80030f2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe fb21 	bl	8001710 <HAL_GetTick>
 80030ce:	0003      	movs	r3, r0
 80030d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80030d4:	f7fe fb1c 	bl	8001710 <HAL_GetTick>
 80030d8:	0002      	movs	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1a5      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	4b96      	ldr	r3, [pc, #600]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	029b      	lsls	r3, r3, #10
 80030ee:	4013      	ands	r3, r2
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2202      	movs	r2, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	d100      	bne.n	80030fe <HAL_RCC_OscConfig+0xfe>
 80030fc:	e086      	b.n	800320c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fe:	4b90      	ldr	r3, [pc, #576]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2238      	movs	r2, #56	@ 0x38
 8003104:	4013      	ands	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d12f      	bne.n	800316e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e18b      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b89      	ldr	r3, [pc, #548]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a8b      	ldr	r2, [pc, #556]	@ (800334c <HAL_RCC_OscConfig+0x34c>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	4b85      	ldr	r3, [pc, #532]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d112      	bne.n	800315c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003136:	4b82      	ldr	r3, [pc, #520]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a85      	ldr	r2, [pc, #532]	@ (8003350 <HAL_RCC_OscConfig+0x350>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	4b7e      	ldr	r3, [pc, #504]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800314a:	4b7d      	ldr	r3, [pc, #500]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	0adb      	lsrs	r3, r3, #11
 8003150:	2207      	movs	r2, #7
 8003152:	4013      	ands	r3, r2
 8003154:	4a7f      	ldr	r2, [pc, #508]	@ (8003354 <HAL_RCC_OscConfig+0x354>)
 8003156:	40da      	lsrs	r2, r3
 8003158:	4b7f      	ldr	r3, [pc, #508]	@ (8003358 <HAL_RCC_OscConfig+0x358>)
 800315a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800315c:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCC_OscConfig+0x35c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0018      	movs	r0, r3
 8003162:	f7fe fa79 	bl	8001658 <HAL_InitTick>
 8003166:	1e03      	subs	r3, r0, #0
 8003168:	d050      	beq.n	800320c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e161      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d030      	beq.n	80031d8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003176:	4b72      	ldr	r3, [pc, #456]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a75      	ldr	r2, [pc, #468]	@ (8003350 <HAL_RCC_OscConfig+0x350>)
 800317c:	4013      	ands	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	4b6e      	ldr	r3, [pc, #440]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800318a:	4b6d      	ldr	r3, [pc, #436]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b6c      	ldr	r3, [pc, #432]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003190:	2180      	movs	r1, #128	@ 0x80
 8003192:	0049      	lsls	r1, r1, #1
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe faba 	bl	8001710 <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80031a2:	f7fe fab5 	bl	8001710 <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e13e      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b4:	4b62      	ldr	r3, [pc, #392]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4013      	ands	r3, r2
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b5f      	ldr	r3, [pc, #380]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a61      	ldr	r2, [pc, #388]	@ (800334c <HAL_RCC_OscConfig+0x34c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	e019      	b.n	800320c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80031d8:	4b59      	ldr	r3, [pc, #356]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b58      	ldr	r3, [pc, #352]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80031de:	4960      	ldr	r1, [pc, #384]	@ (8003360 <HAL_RCC_OscConfig+0x360>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fa94 	bl	8001710 <HAL_GetTick>
 80031e8:	0003      	movs	r3, r0
 80031ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80031ee:	f7fe fa8f 	bl	8001710 <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e118      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003200:	4b4f      	ldr	r3, [pc, #316]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4013      	ands	r3, r2
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2208      	movs	r2, #8
 8003212:	4013      	ands	r3, r2
 8003214:	d042      	beq.n	800329c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003216:	4b4a      	ldr	r3, [pc, #296]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2238      	movs	r2, #56	@ 0x38
 800321c:	4013      	ands	r3, r2
 800321e:	2b18      	cmp	r3, #24
 8003220:	d105      	bne.n	800322e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d138      	bne.n	800329c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e101      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d019      	beq.n	800326a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003236:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003238:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800323a:	4b41      	ldr	r3, [pc, #260]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800323c:	2101      	movs	r1, #1
 800323e:	430a      	orrs	r2, r1
 8003240:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe fa65 	bl	8001710 <HAL_GetTick>
 8003246:	0003      	movs	r3, r0
 8003248:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800324c:	f7fe fa60 	bl	8001710 <HAL_GetTick>
 8003250:	0002      	movs	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0e9      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800325e:	4b38      	ldr	r3, [pc, #224]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	2202      	movs	r2, #2
 8003264:	4013      	ands	r3, r2
 8003266:	d0f1      	beq.n	800324c <HAL_RCC_OscConfig+0x24c>
 8003268:	e018      	b.n	800329c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800326a:	4b35      	ldr	r3, [pc, #212]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 800326c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800326e:	4b34      	ldr	r3, [pc, #208]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003270:	2101      	movs	r1, #1
 8003272:	438a      	bics	r2, r1
 8003274:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe fa4b 	bl	8001710 <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003280:	f7fe fa46 	bl	8001710 <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0cf      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003292:	4b2b      	ldr	r3, [pc, #172]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d1f1      	bne.n	8003280 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2204      	movs	r2, #4
 80032a2:	4013      	ands	r3, r2
 80032a4:	d100      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2a8>
 80032a6:	e084      	b.n	80033b2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80032b0:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2238      	movs	r2, #56	@ 0x38
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d000      	beq.n	80032c6 <HAL_RCC_OscConfig+0x2c6>
 80032c4:	e075      	b.n	80033b2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0b3      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2e0>
 80032d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80032d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032de:	e01c      	b.n	800331a <HAL_RCC_OscConfig+0x31a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d10c      	bne.n	8003302 <HAL_RCC_OscConfig+0x302>
 80032e8:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80032ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032ec:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80032ee:	2104      	movs	r1, #4
 80032f0:	430a      	orrs	r2, r1
 80032f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032f4:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80032f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 80032fa:	2101      	movs	r1, #1
 80032fc:	430a      	orrs	r2, r1
 80032fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003300:	e00b      	b.n	800331a <HAL_RCC_OscConfig+0x31a>
 8003302:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003304:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003306:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003308:	2101      	movs	r1, #1
 800330a:	438a      	bics	r2, r1
 800330c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800330e:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003310:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003312:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <HAL_RCC_OscConfig+0x340>)
 8003314:	2104      	movs	r1, #4
 8003316:	438a      	bics	r2, r1
 8003318:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d028      	beq.n	8003374 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe f9f5 	bl	8001710 <HAL_GetTick>
 8003326:	0003      	movs	r3, r0
 8003328:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800332a:	e01d      	b.n	8003368 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe f9f0 	bl	8001710 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	4a0b      	ldr	r2, [pc, #44]	@ (8003364 <HAL_RCC_OscConfig+0x364>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d915      	bls.n	8003368 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e078      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
 8003340:	40021000 	.word	0x40021000
 8003344:	fffeffff 	.word	0xfffeffff
 8003348:	fffbffff 	.word	0xfffbffff
 800334c:	ffff80ff 	.word	0xffff80ff
 8003350:	ffffc7ff 	.word	0xffffc7ff
 8003354:	02dc6c00 	.word	0x02dc6c00
 8003358:	20000064 	.word	0x20000064
 800335c:	20000068 	.word	0x20000068
 8003360:	fffffeff 	.word	0xfffffeff
 8003364:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003368:	4b34      	ldr	r3, [pc, #208]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	2202      	movs	r2, #2
 800336e:	4013      	ands	r3, r2
 8003370:	d0dc      	beq.n	800332c <HAL_RCC_OscConfig+0x32c>
 8003372:	e013      	b.n	800339c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f9cc 	bl	8001710 <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800337c:	e009      	b.n	8003392 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe f9c7 	bl	8001710 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	4a2d      	ldr	r2, [pc, #180]	@ (8003440 <HAL_RCC_OscConfig+0x440>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e04f      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003392:	4b2a      	ldr	r3, [pc, #168]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2202      	movs	r2, #2
 8003398:	4013      	ands	r3, r2
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800339c:	230f      	movs	r3, #15
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b25      	ldr	r3, [pc, #148]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 80033a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033aa:	4b24      	ldr	r3, [pc, #144]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 80033ac:	4925      	ldr	r1, [pc, #148]	@ (8003444 <HAL_RCC_OscConfig+0x444>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2210      	movs	r2, #16
 80033b8:	4013      	ands	r3, r2
 80033ba:	d039      	beq.n	8003430 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033c4:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 80033ca:	2180      	movs	r1, #128	@ 0x80
 80033cc:	03c9      	lsls	r1, r1, #15
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fe f99d 	bl	8001710 <HAL_GetTick>
 80033d6:	0003      	movs	r3, r0
 80033d8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033dc:	f7fe f998 	bl	8001710 <HAL_GetTick>
 80033e0:	0002      	movs	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e021      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80033ee:	4b13      	ldr	r3, [pc, #76]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	041b      	lsls	r3, r3, #16
 80033f6:	4013      	ands	r3, r2
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x3dc>
 80033fa:	e019      	b.n	8003430 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033fc:	4b0f      	ldr	r3, [pc, #60]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b0e      	ldr	r3, [pc, #56]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 8003402:	4911      	ldr	r1, [pc, #68]	@ (8003448 <HAL_RCC_OscConfig+0x448>)
 8003404:	400a      	ands	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe f982 	bl	8001710 <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003412:	f7fe f97d 	bl	8001710 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e006      	b.n	8003432 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_RCC_OscConfig+0x43c>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	4013      	ands	r3, r2
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b006      	add	sp, #24
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	40021000 	.word	0x40021000
 8003440:	00001388 	.word	0x00001388
 8003444:	efffffff 	.word	0xefffffff
 8003448:	ffbfffff 	.word	0xffbfffff

0800344c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0f6      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003460:	4b7d      	ldr	r3, [pc, #500]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2207      	movs	r2, #7
 8003466:	4013      	ands	r3, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d91e      	bls.n	80034ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b7a      	ldr	r3, [pc, #488]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2207      	movs	r2, #7
 8003474:	4393      	bics	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	4b77      	ldr	r3, [pc, #476]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003480:	f7fe f946 	bl	8001710 <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003488:	e009      	b.n	800349e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	f7fe f941 	bl	8001710 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	4a71      	ldr	r2, [pc, #452]	@ (800365c <HAL_RCC_ClockConfig+0x210>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0d7      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800349e:	4b6e      	ldr	r3, [pc, #440]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2207      	movs	r2, #7
 80034a4:	4013      	ands	r3, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1ee      	bne.n	800348a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2202      	movs	r2, #2
 80034b2:	4013      	ands	r3, r2
 80034b4:	d017      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2204      	movs	r2, #4
 80034bc:	4013      	ands	r3, r2
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034c0:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a67      	ldr	r2, [pc, #412]	@ (8003664 <HAL_RCC_ClockConfig+0x218>)
 80034c6:	401a      	ands	r2, r3
 80034c8:	4b65      	ldr	r3, [pc, #404]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 80034ca:	21b0      	movs	r1, #176	@ 0xb0
 80034cc:	0109      	lsls	r1, r1, #4
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d2:	4b63      	ldr	r3, [pc, #396]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	4a64      	ldr	r2, [pc, #400]	@ (8003668 <HAL_RCC_ClockConfig+0x21c>)
 80034d8:	4013      	ands	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d100      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xa6>
 80034f0:	e061      	b.n	80035b6 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80034f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	221c      	movs	r2, #28
 80034f8:	4393      	bics	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	4b57      	ldr	r3, [pc, #348]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350e:	4b54      	ldr	r3, [pc, #336]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	029b      	lsls	r3, r3, #10
 8003516:	4013      	ands	r3, r2
 8003518:	d12b      	bne.n	8003572 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e097      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003526:	4b4e      	ldr	r3, [pc, #312]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4013      	ands	r3, r2
 8003530:	d11f      	bne.n	8003572 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e08b      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800353e:	4b48      	ldr	r3, [pc, #288]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	2380      	movs	r3, #128	@ 0x80
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	4013      	ands	r3, r2
 8003548:	d113      	bne.n	8003572 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07f      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d106      	bne.n	8003564 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003556:	4b42      	ldr	r3, [pc, #264]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	d108      	bne.n	8003572 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e074      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003564:	4b3e      	ldr	r3, [pc, #248]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06d      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b3b      	ldr	r3, [pc, #236]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2207      	movs	r2, #7
 8003578:	4393      	bics	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003586:	f7fe f8c3 	bl	8001710 <HAL_GetTick>
 800358a:	0003      	movs	r3, r0
 800358c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	e009      	b.n	80035a4 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003590:	f7fe f8be 	bl	8001710 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	4a30      	ldr	r2, [pc, #192]	@ (800365c <HAL_RCC_ClockConfig+0x210>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e054      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2238      	movs	r2, #56	@ 0x38
 80035aa:	401a      	ands	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d1ec      	bne.n	8003590 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b6:	4b28      	ldr	r3, [pc, #160]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2207      	movs	r2, #7
 80035bc:	4013      	ands	r3, r2
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d21e      	bcs.n	8003602 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c4:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2207      	movs	r2, #7
 80035ca:	4393      	bics	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	4b22      	ldr	r3, [pc, #136]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d6:	f7fe f89b 	bl	8001710 <HAL_GetTick>
 80035da:	0003      	movs	r3, r0
 80035dc:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035de:	e009      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fe f896 	bl	8001710 <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <HAL_RCC_ClockConfig+0x210>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e02c      	b.n	800364e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035f4:	4b18      	ldr	r3, [pc, #96]	@ (8003658 <HAL_RCC_ClockConfig+0x20c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2207      	movs	r2, #7
 80035fa:	4013      	ands	r3, r2
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d1ee      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2204      	movs	r2, #4
 8003608:	4013      	ands	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b14      	ldr	r3, [pc, #80]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_RCC_ClockConfig+0x220>)
 8003612:	4013      	ands	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003620:	f000 f82c 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8003624:	0001      	movs	r1, r0
 8003626:	4b0e      	ldr	r3, [pc, #56]	@ (8003660 <HAL_RCC_ClockConfig+0x214>)
 8003628:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	220f      	movs	r2, #15
 800362e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <HAL_RCC_ClockConfig+0x224>)
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003636:	221f      	movs	r2, #31
 8003638:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800363a:	000a      	movs	r2, r1
 800363c:	40da      	lsrs	r2, r3
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003640:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <HAL_RCC_ClockConfig+0x22c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0018      	movs	r0, r3
 8003648:	f7fe f806 	bl	8001658 <HAL_InitTick>
 800364c:	0003      	movs	r3, r0
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	40022000 	.word	0x40022000
 800365c:	00001388 	.word	0x00001388
 8003660:	40021000 	.word	0x40021000
 8003664:	ffff84ff 	.word	0xffff84ff
 8003668:	fffff0ff 	.word	0xfffff0ff
 800366c:	ffff8fff 	.word	0xffff8fff
 8003670:	080064b0 	.word	0x080064b0
 8003674:	20000064 	.word	0x20000064
 8003678:	20000068 	.word	0x20000068

0800367c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	2207      	movs	r2, #7
 800368a:	4013      	ands	r3, r2
 800368c:	3301      	adds	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003690:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2238      	movs	r2, #56	@ 0x38
 8003696:	4013      	ands	r3, r2
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800369a:	4b21      	ldr	r3, [pc, #132]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xa4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	0adb      	lsrs	r3, r3, #11
 80036a0:	2207      	movs	r2, #7
 80036a2:	4013      	ands	r3, r2
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	0013      	movs	r3, r2
 80036aa:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	481d      	ldr	r0, [pc, #116]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa8>)
 80036b0:	f7fc fd2a 	bl	8000108 <__udivsi3>
 80036b4:	0003      	movs	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e027      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036ba:	4b19      	ldr	r3, [pc, #100]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2238      	movs	r2, #56	@ 0x38
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d102      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036c6:	4b18      	ldr	r3, [pc, #96]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xac>)
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e01e      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80036cc:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2238      	movs	r2, #56	@ 0x38
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d103      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80036d8:	2380      	movs	r3, #128	@ 0x80
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e014      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80036e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2238      	movs	r2, #56	@ 0x38
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b18      	cmp	r3, #24
 80036ea:	d103      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80036ec:	23fa      	movs	r3, #250	@ 0xfa
 80036ee:	01db      	lsls	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e00a      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80036f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2238      	movs	r2, #56	@ 0x38
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8003700:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e001      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7fc fcfb 	bl	8000108 <__udivsi3>
 8003712:	0003      	movs	r3, r0
 8003714:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003716:	68fb      	ldr	r3, [r7, #12]
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	02dc6c00 	.word	0x02dc6c00
 8003728:	007a1200 	.word	0x007a1200

0800372c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003730:	f7ff ffa4 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8003734:	0001      	movs	r1, r0
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <HAL_RCC_GetHCLKFreq+0x30>)
 8003738:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	220f      	movs	r2, #15
 800373e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003740:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <HAL_RCC_GetHCLKFreq+0x34>)
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003746:	221f      	movs	r2, #31
 8003748:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800374a:	000a      	movs	r2, r1
 800374c:	40da      	lsrs	r2, r3
 800374e:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x38>)
 8003750:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003752:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x38>)
 8003754:	681b      	ldr	r3, [r3, #0]
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	080064b0 	.word	0x080064b0
 8003764:	20000064 	.word	0x20000064

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800376c:	f7ff ffde 	bl	800372c <HAL_RCC_GetHCLKFreq>
 8003770:	0001      	movs	r1, r0
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0b1b      	lsrs	r3, r3, #12
 8003778:	2207      	movs	r2, #7
 800377a:	401a      	ands	r2, r3
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800377e:	0092      	lsls	r2, r2, #2
 8003780:	58d3      	ldr	r3, [r2, r3]
 8003782:	221f      	movs	r2, #31
 8003784:	4013      	ands	r3, r2
 8003786:	40d9      	lsrs	r1, r3
 8003788:	000b      	movs	r3, r1
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	080064f0 	.word	0x080064f0

08003798 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037a0:	2313      	movs	r3, #19
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a8:	2312      	movs	r3, #18
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2240      	movs	r2, #64	@ 0x40
 80037b6:	4013      	ands	r3, r2
 80037b8:	d100      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x24>
 80037ba:	e079      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037bc:	2011      	movs	r0, #17
 80037be:	183b      	adds	r3, r7, r0
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	055b      	lsls	r3, r3, #21
 80037cc:	4013      	ands	r3, r2
 80037ce:	d110      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	4b67      	ldr	r3, [pc, #412]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d4:	4b66      	ldr	r3, [pc, #408]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037d6:	2180      	movs	r1, #128	@ 0x80
 80037d8:	0549      	lsls	r1, r1, #21
 80037da:	430a      	orrs	r2, r1
 80037dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037de:	4b64      	ldr	r3, [pc, #400]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037e2:	2380      	movs	r3, #128	@ 0x80
 80037e4:	055b      	lsls	r3, r3, #21
 80037e6:	4013      	ands	r3, r2
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ec:	183b      	adds	r3, r7, r0
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80037f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037f6:	23c0      	movs	r3, #192	@ 0xc0
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4013      	ands	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d019      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	429a      	cmp	r2, r3
 800380c:	d014      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800380e:	4b58      	ldr	r3, [pc, #352]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	4a58      	ldr	r2, [pc, #352]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003814:	4013      	ands	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003818:	4b55      	ldr	r3, [pc, #340]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800381a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800381c:	4b54      	ldr	r3, [pc, #336]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800381e:	2180      	movs	r1, #128	@ 0x80
 8003820:	0249      	lsls	r1, r1, #9
 8003822:	430a      	orrs	r2, r1
 8003824:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003826:	4b52      	ldr	r3, [pc, #328]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003828:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800382a:	4b51      	ldr	r3, [pc, #324]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800382c:	4952      	ldr	r1, [pc, #328]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800382e:	400a      	ands	r2, r1
 8003830:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003832:	4b4f      	ldr	r3, [pc, #316]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2201      	movs	r2, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d016      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fd ff66 	bl	8001710 <HAL_GetTick>
 8003844:	0003      	movs	r3, r0
 8003846:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003848:	e00c      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fd ff61 	bl	8001710 <HAL_GetTick>
 800384e:	0002      	movs	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	4a49      	ldr	r2, [pc, #292]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d904      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800385a:	2313      	movs	r3, #19
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2203      	movs	r2, #3
 8003860:	701a      	strb	r2, [r3, #0]
          break;
 8003862:	e004      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003864:	4b42      	ldr	r3, [pc, #264]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	2202      	movs	r2, #2
 800386a:	4013      	ands	r3, r2
 800386c:	d0ed      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800386e:	2313      	movs	r3, #19
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003878:	4b3d      	ldr	r3, [pc, #244]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800387a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387c:	4a3d      	ldr	r2, [pc, #244]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	4b3a      	ldr	r3, [pc, #232]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003888:	430a      	orrs	r2, r1
 800388a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800388c:	e005      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	2312      	movs	r3, #18
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2213      	movs	r2, #19
 8003894:	18ba      	adds	r2, r7, r2
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389a:	2311      	movs	r3, #17
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b32      	ldr	r3, [pc, #200]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038aa:	4935      	ldr	r1, [pc, #212]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4013      	ands	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038be:	2203      	movs	r2, #3
 80038c0:	4393      	bics	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b29      	ldr	r3, [pc, #164]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ca:	430a      	orrs	r2, r1
 80038cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2202      	movs	r2, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d8:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	4a29      	ldr	r2, [pc, #164]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	4b22      	ldr	r3, [pc, #136]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	4013      	ands	r3, r2
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	0899      	lsrs	r1, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003904:	430a      	orrs	r2, r1
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2208      	movs	r2, #8
 800390e:	4013      	ands	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003912:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003916:	4a1c      	ldr	r2, [pc, #112]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003922:	430a      	orrs	r2, r1
 8003924:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2204      	movs	r2, #4
 800392c:	4013      	ands	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003930:	4b0f      	ldr	r3, [pc, #60]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	4a15      	ldr	r2, [pc, #84]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	4b0c      	ldr	r3, [pc, #48]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003940:	430a      	orrs	r2, r1
 8003942:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	4013      	ands	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800394e:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	22e0      	movs	r2, #224	@ 0xe0
 8003954:	4393      	bics	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003962:	2312      	movs	r3, #18
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	781b      	ldrb	r3, [r3, #0]
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b006      	add	sp, #24
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	fffffcff 	.word	0xfffffcff
 8003978:	fffeffff 	.word	0xfffeffff
 800397c:	00001388 	.word	0x00001388
 8003980:	efffffff 	.word	0xefffffff
 8003984:	ffffcfff 	.word	0xffffcfff
 8003988:	ffffefff 	.word	0xffffefff
 800398c:	ffff3fff 	.word	0xffff3fff

08003990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0a8      	b.n	8003af4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	2382      	movs	r3, #130	@ 0x82
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d009      	beq.n	80039ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]
 80039bc:	e005      	b.n	80039ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	225d      	movs	r2, #93	@ 0x5d
 80039d4:	5c9b      	ldrb	r3, [r3, r2]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	225c      	movs	r2, #92	@ 0x5c
 80039e0:	2100      	movs	r1, #0
 80039e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7fd fc34 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	225d      	movs	r2, #93	@ 0x5d
 80039f0:	2102      	movs	r1, #2
 80039f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2140      	movs	r1, #64	@ 0x40
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	23e0      	movs	r3, #224	@ 0xe0
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d902      	bls.n	8003a16 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e002      	b.n	8003a1c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	015b      	lsls	r3, r3, #5
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	23f0      	movs	r3, #240	@ 0xf0
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d008      	beq.n	8003a3a <HAL_SPI_Init+0xaa>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	23e0      	movs	r3, #224	@ 0xe0
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d002      	beq.n	8003a3a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	2382      	movs	r3, #130	@ 0x82
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6899      	ldr	r1, [r3, #8]
 8003a48:	2384      	movs	r3, #132	@ 0x84
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2102      	movs	r1, #2
 8003a56:	400b      	ands	r3, r1
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	2101      	movs	r1, #1
 8003a60:	400b      	ands	r3, r1
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6999      	ldr	r1, [r3, #24]
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	2138      	movs	r1, #56	@ 0x38
 8003a76:	400b      	ands	r3, r1
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	2180      	movs	r1, #128	@ 0x80
 8003a80:	400b      	ands	r3, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	0011      	movs	r1, r2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	401a      	ands	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab0:	2108      	movs	r1, #8
 8003ab2:	400b      	ands	r3, r1
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68d9      	ldr	r1, [r3, #12]
 8003aba:	23f0      	movs	r3, #240	@ 0xf0
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	400b      	ands	r3, r1
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	0011      	movs	r1, r2
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	015b      	lsls	r3, r3, #5
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4907      	ldr	r1, [pc, #28]	@ (8003afc <HAL_SPI_Init+0x16c>)
 8003ae0:	400a      	ands	r2, r1
 8003ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	225d      	movs	r2, #93	@ 0x5d
 8003aee:	2101      	movs	r1, #1
 8003af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b004      	add	sp, #16
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	fffff7ff 	.word	0xfffff7ff

08003b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e04a      	b.n	8003ba8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	223d      	movs	r2, #61	@ 0x3d
 8003b16:	5c9b      	ldrb	r3, [r3, r2]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	223c      	movs	r2, #60	@ 0x3c
 8003b22:	2100      	movs	r1, #0
 8003b24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7fd fc19 	bl	8001360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223d      	movs	r2, #61	@ 0x3d
 8003b32:	2102      	movs	r1, #2
 8003b34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	0019      	movs	r1, r3
 8003b40:	0010      	movs	r0, r2
 8003b42:	f000 f935 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2248      	movs	r2, #72	@ 0x48
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	223e      	movs	r2, #62	@ 0x3e
 8003b52:	2101      	movs	r1, #1
 8003b54:	5499      	strb	r1, [r3, r2]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	223f      	movs	r2, #63	@ 0x3f
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	5499      	strb	r1, [r3, r2]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2240      	movs	r2, #64	@ 0x40
 8003b62:	2101      	movs	r1, #1
 8003b64:	5499      	strb	r1, [r3, r2]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2241      	movs	r2, #65	@ 0x41
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2242      	movs	r2, #66	@ 0x42
 8003b72:	2101      	movs	r1, #1
 8003b74:	5499      	strb	r1, [r3, r2]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2243      	movs	r2, #67	@ 0x43
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2244      	movs	r2, #68	@ 0x44
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2245      	movs	r2, #69	@ 0x45
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2246      	movs	r2, #70	@ 0x46
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2247      	movs	r2, #71	@ 0x47
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	223d      	movs	r2, #61	@ 0x3d
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbc:	2317      	movs	r3, #23
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	223c      	movs	r2, #60	@ 0x3c
 8003bc8:	5c9b      	ldrb	r3, [r3, r2]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0e5      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	223c      	movs	r2, #60	@ 0x3c
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b14      	cmp	r3, #20
 8003bde:	d900      	bls.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003be0:	e0d1      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	009a      	lsls	r2, r3, #2
 8003be6:	4b70      	ldr	r3, [pc, #448]	@ (8003da8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003be8:	18d3      	adds	r3, r2, r3
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 f95e 	bl	8003eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2108      	movs	r1, #8
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2104      	movs	r1, #4
 8003c18:	438a      	bics	r2, r1
 8003c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	619a      	str	r2, [r3, #24]
      break;
 8003c2e:	e0af      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f9bd 	bl	8003fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2180      	movs	r1, #128	@ 0x80
 8003c4a:	0109      	lsls	r1, r1, #4
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4954      	ldr	r1, [pc, #336]	@ (8003dac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6999      	ldr	r1, [r3, #24]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	021a      	lsls	r2, r3, #8
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	619a      	str	r2, [r3, #24]
      break;
 8003c74:	e08c      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	0011      	movs	r1, r2
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 fa18 	bl	80040b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2108      	movs	r1, #8
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69d9      	ldr	r1, [r3, #28]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	61da      	str	r2, [r3, #28]
      break;
 8003cb6:	e06b      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 fa79 	bl	80041b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2180      	movs	r1, #128	@ 0x80
 8003cd2:	0109      	lsls	r1, r1, #4
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4932      	ldr	r1, [pc, #200]	@ (8003dac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69d9      	ldr	r1, [r3, #28]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	61da      	str	r2, [r3, #28]
      break;
 8003cfc:	e048      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 faba 	bl	8004280 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2108      	movs	r1, #8
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2104      	movs	r1, #4
 8003d28:	438a      	bics	r2, r1
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d3e:	e027      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	0011      	movs	r1, r2
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 faf3 	bl	8004334 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2180      	movs	r1, #128	@ 0x80
 8003d5a:	0109      	lsls	r1, r1, #4
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4910      	ldr	r1, [pc, #64]	@ (8003dac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d84:	e004      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003d86:	2317      	movs	r3, #23
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
      break;
 8003d8e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	223c      	movs	r2, #60	@ 0x3c
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]

  return status;
 8003d98:	2317      	movs	r3, #23
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	781b      	ldrb	r3, [r3, #0]
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	08006510 	.word	0x08006510
 8003dac:	fffffbff 	.word	0xfffffbff

08003db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a37      	ldr	r2, [pc, #220]	@ (8003ea0 <TIM_Base_SetConfig+0xf0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d008      	beq.n	8003dda <TIM_Base_SetConfig+0x2a>
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d003      	beq.n	8003dda <TIM_Base_SetConfig+0x2a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a33      	ldr	r2, [pc, #204]	@ (8003ea4 <TIM_Base_SetConfig+0xf4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d108      	bne.n	8003dec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2270      	movs	r2, #112	@ 0x70
 8003dde:	4393      	bics	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea0 <TIM_Base_SetConfig+0xf0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d014      	beq.n	8003e1e <TIM_Base_SetConfig+0x6e>
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	05db      	lsls	r3, r3, #23
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d00f      	beq.n	8003e1e <TIM_Base_SetConfig+0x6e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a28      	ldr	r2, [pc, #160]	@ (8003ea4 <TIM_Base_SetConfig+0xf4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_Base_SetConfig+0x6e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <TIM_Base_SetConfig+0xf8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_Base_SetConfig+0x6e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a26      	ldr	r2, [pc, #152]	@ (8003eac <TIM_Base_SetConfig+0xfc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_Base_SetConfig+0x6e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a25      	ldr	r2, [pc, #148]	@ (8003eb0 <TIM_Base_SetConfig+0x100>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a24      	ldr	r2, [pc, #144]	@ (8003eb4 <TIM_Base_SetConfig+0x104>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2280      	movs	r2, #128	@ 0x80
 8003e34:	4393      	bics	r3, r2
 8003e36:	001a      	movs	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a11      	ldr	r2, [pc, #68]	@ (8003ea0 <TIM_Base_SetConfig+0xf0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0xbe>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <TIM_Base_SetConfig+0xfc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0xbe>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a11      	ldr	r2, [pc, #68]	@ (8003eb0 <TIM_Base_SetConfig+0x100>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d103      	bne.n	8003e76 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2201      	movs	r2, #1
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d106      	bne.n	8003e96 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4393      	bics	r3, r2
 8003e90:	001a      	movs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]
  }
}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40002000 	.word	0x40002000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800
 8003eb4:	fffffcff 	.word	0xfffffcff

08003eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4393      	bics	r3, r2
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa0 <TIM_OC1_SetConfig+0xe8>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2203      	movs	r2, #3
 8003eee:	4393      	bics	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2202      	movs	r2, #2
 8003f00:	4393      	bics	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a24      	ldr	r2, [pc, #144]	@ (8003fa4 <TIM_OC1_SetConfig+0xec>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_OC1_SetConfig+0x6e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a23      	ldr	r2, [pc, #140]	@ (8003fa8 <TIM_OC1_SetConfig+0xf0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_OC1_SetConfig+0x6e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a22      	ldr	r2, [pc, #136]	@ (8003fac <TIM_OC1_SetConfig+0xf4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10c      	bne.n	8003f40 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <TIM_OC1_SetConfig+0xec>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_OC1_SetConfig+0xa0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <TIM_OC1_SetConfig+0xf0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_OC1_SetConfig+0xa0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a16      	ldr	r2, [pc, #88]	@ (8003fac <TIM_OC1_SetConfig+0xf4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d111      	bne.n	8003f7c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4a15      	ldr	r2, [pc, #84]	@ (8003fb0 <TIM_OC1_SetConfig+0xf8>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4a14      	ldr	r2, [pc, #80]	@ (8003fb4 <TIM_OC1_SetConfig+0xfc>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	621a      	str	r2, [r3, #32]
}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b006      	add	sp, #24
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	fffeff8f 	.word	0xfffeff8f
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800
 8003fb0:	fffffeff 	.word	0xfffffeff
 8003fb4:	fffffdff 	.word	0xfffffdff

08003fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	2210      	movs	r2, #16
 8003fce:	4393      	bics	r3, r2
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8004098 <TIM_OC2_SetConfig+0xe0>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	@ (800409c <TIM_OC2_SetConfig+0xe4>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2220      	movs	r2, #32
 8004002:	4393      	bics	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a22      	ldr	r2, [pc, #136]	@ (80040a0 <TIM_OC2_SetConfig+0xe8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10d      	bne.n	8004036 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2280      	movs	r2, #128	@ 0x80
 800401e:	4393      	bics	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2240      	movs	r2, #64	@ 0x40
 8004032:	4393      	bics	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <TIM_OC2_SetConfig+0xe8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_OC2_SetConfig+0x96>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	@ (80040a4 <TIM_OC2_SetConfig+0xec>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC2_SetConfig+0x96>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a17      	ldr	r2, [pc, #92]	@ (80040a8 <TIM_OC2_SetConfig+0xf0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d113      	bne.n	8004076 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4a16      	ldr	r2, [pc, #88]	@ (80040ac <TIM_OC2_SetConfig+0xf4>)
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4a15      	ldr	r2, [pc, #84]	@ (80040b0 <TIM_OC2_SetConfig+0xf8>)
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b006      	add	sp, #24
 8004096:	bd80      	pop	{r7, pc}
 8004098:	feff8fff 	.word	0xfeff8fff
 800409c:	fffffcff 	.word	0xfffffcff
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40014400 	.word	0x40014400
 80040a8:	40014800 	.word	0x40014800
 80040ac:	fffffbff 	.word	0xfffffbff
 80040b0:	fffff7ff 	.word	0xfffff7ff

080040b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a31      	ldr	r2, [pc, #196]	@ (8004190 <TIM_OC3_SetConfig+0xdc>)
 80040ca:	401a      	ands	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a2d      	ldr	r2, [pc, #180]	@ (8004194 <TIM_OC3_SetConfig+0xe0>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2203      	movs	r2, #3
 80040e8:	4393      	bics	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4a27      	ldr	r2, [pc, #156]	@ (8004198 <TIM_OC3_SetConfig+0xe4>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a23      	ldr	r2, [pc, #140]	@ (800419c <TIM_OC3_SetConfig+0xe8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10d      	bne.n	800412e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <TIM_OC3_SetConfig+0xec>)
 8004116:	4013      	ands	r3, r2
 8004118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <TIM_OC3_SetConfig+0xf0>)
 800412a:	4013      	ands	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1a      	ldr	r2, [pc, #104]	@ (800419c <TIM_OC3_SetConfig+0xe8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_OC3_SetConfig+0x92>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1b      	ldr	r2, [pc, #108]	@ (80041a8 <TIM_OC3_SetConfig+0xf4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0x92>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1a      	ldr	r2, [pc, #104]	@ (80041ac <TIM_OC3_SetConfig+0xf8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d113      	bne.n	800416e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <TIM_OC3_SetConfig+0xfc>)
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4a18      	ldr	r2, [pc, #96]	@ (80041b4 <TIM_OC3_SetConfig+0x100>)
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	46c0      	nop			@ (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b006      	add	sp, #24
 800418e:	bd80      	pop	{r7, pc}
 8004190:	fffffeff 	.word	0xfffffeff
 8004194:	fffeff8f 	.word	0xfffeff8f
 8004198:	fffffdff 	.word	0xfffffdff
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	fffff7ff 	.word	0xfffff7ff
 80041a4:	fffffbff 	.word	0xfffffbff
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800
 80041b0:	ffffefff 	.word	0xffffefff
 80041b4:	ffffdfff 	.word	0xffffdfff

080041b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4a24      	ldr	r2, [pc, #144]	@ (8004260 <TIM_OC4_SetConfig+0xa8>)
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a20      	ldr	r2, [pc, #128]	@ (8004264 <TIM_OC4_SetConfig+0xac>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <TIM_OC4_SetConfig+0xb0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <TIM_OC4_SetConfig+0xb4>)
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a17      	ldr	r2, [pc, #92]	@ (8004270 <TIM_OC4_SetConfig+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_OC4_SetConfig+0x70>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <TIM_OC4_SetConfig+0xbc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC4_SetConfig+0x70>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <TIM_OC4_SetConfig+0xc0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d109      	bne.n	800423c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4a14      	ldr	r2, [pc, #80]	@ (800427c <TIM_OC4_SetConfig+0xc4>)
 800422c:	4013      	ands	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	46bd      	mov	sp, r7
 800425a:	b006      	add	sp, #24
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	ffffefff 	.word	0xffffefff
 8004264:	feff8fff 	.word	0xfeff8fff
 8004268:	fffffcff 	.word	0xfffffcff
 800426c:	ffffdfff 	.word	0xffffdfff
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800
 800427c:	ffffbfff 	.word	0xffffbfff

08004280 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a21      	ldr	r2, [pc, #132]	@ (800431c <TIM_OC5_SetConfig+0x9c>)
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004320 <TIM_OC5_SetConfig+0xa0>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4a19      	ldr	r2, [pc, #100]	@ (8004324 <TIM_OC5_SetConfig+0xa4>)
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a15      	ldr	r2, [pc, #84]	@ (8004328 <TIM_OC5_SetConfig+0xa8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_OC5_SetConfig+0x66>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a14      	ldr	r2, [pc, #80]	@ (800432c <TIM_OC5_SetConfig+0xac>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC5_SetConfig+0x66>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a13      	ldr	r2, [pc, #76]	@ (8004330 <TIM_OC5_SetConfig+0xb0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d109      	bne.n	80042fa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	4a0c      	ldr	r2, [pc, #48]	@ (800431c <TIM_OC5_SetConfig+0x9c>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	621a      	str	r2, [r3, #32]
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b006      	add	sp, #24
 800431a:	bd80      	pop	{r7, pc}
 800431c:	fffeffff 	.word	0xfffeffff
 8004320:	fffeff8f 	.word	0xfffeff8f
 8004324:	fffdffff 	.word	0xfffdffff
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	4a22      	ldr	r2, [pc, #136]	@ (80043d4 <TIM_OC6_SetConfig+0xa0>)
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a1e      	ldr	r2, [pc, #120]	@ (80043d8 <TIM_OC6_SetConfig+0xa4>)
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4a1a      	ldr	r2, [pc, #104]	@ (80043dc <TIM_OC6_SetConfig+0xa8>)
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a16      	ldr	r2, [pc, #88]	@ (80043e0 <TIM_OC6_SetConfig+0xac>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_OC6_SetConfig+0x68>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a15      	ldr	r2, [pc, #84]	@ (80043e4 <TIM_OC6_SetConfig+0xb0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC6_SetConfig+0x68>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a14      	ldr	r2, [pc, #80]	@ (80043e8 <TIM_OC6_SetConfig+0xb4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d109      	bne.n	80043b0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4a13      	ldr	r2, [pc, #76]	@ (80043ec <TIM_OC6_SetConfig+0xb8>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b006      	add	sp, #24
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	ffefffff 	.word	0xffefffff
 80043d8:	feff8fff 	.word	0xfeff8fff
 80043dc:	ffdfffff 	.word	0xffdfffff
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800
 80043ec:	fffbffff 	.word	0xfffbffff

080043f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	223c      	movs	r2, #60	@ 0x3c
 80043fe:	5c9b      	ldrb	r3, [r3, r2]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004404:	2302      	movs	r3, #2
 8004406:	e050      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	223c      	movs	r2, #60	@ 0x3c
 800440c:	2101      	movs	r1, #1
 800440e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	223d      	movs	r2, #61	@ 0x3d
 8004414:	2102      	movs	r1, #2
 8004416:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a21      	ldr	r2, [pc, #132]	@ (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d108      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a20      	ldr	r2, [pc, #128]	@ (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004436:	4013      	ands	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2270      	movs	r2, #112	@ 0x70
 8004448:	4393      	bics	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a14      	ldr	r2, [pc, #80]	@ (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00a      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	@ 0x80
 800446e:	05db      	lsls	r3, r3, #23
 8004470:	429a      	cmp	r2, r3
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a10      	ldr	r2, [pc, #64]	@ (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2280      	movs	r2, #128	@ 0x80
 8004482:	4393      	bics	r3, r2
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	223d      	movs	r2, #61	@ 0x3d
 800449c:	2101      	movs	r1, #1
 800449e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	223c      	movs	r2, #60	@ 0x3c
 80044a4:	2100      	movs	r1, #0
 80044a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	0018      	movs	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b004      	add	sp, #16
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	ff0fffff 	.word	0xff0fffff
 80044bc:	40000400 	.word	0x40000400

080044c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	223c      	movs	r2, #60	@ 0x3c
 80044d2:	5c9b      	ldrb	r3, [r3, r2]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044d8:	2302      	movs	r3, #2
 80044da:	e06f      	b.n	80045bc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	223c      	movs	r2, #60	@ 0x3c
 80044e0:	2101      	movs	r1, #1
 80044e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	22ff      	movs	r2, #255	@ 0xff
 80044e8:	4393      	bics	r3, r2
 80044ea:	001a      	movs	r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a33      	ldr	r2, [pc, #204]	@ (80045c4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80044f8:	401a      	ands	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a30      	ldr	r2, [pc, #192]	@ (80045c8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004506:	401a      	ands	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a2e      	ldr	r2, [pc, #184]	@ (80045cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004514:	401a      	ands	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a2b      	ldr	r2, [pc, #172]	@ (80045d0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004522:	401a      	ands	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a29      	ldr	r2, [pc, #164]	@ (80045d4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004530:	401a      	ands	r2, r3
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a26      	ldr	r2, [pc, #152]	@ (80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800453e:	401a      	ands	r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a24      	ldr	r2, [pc, #144]	@ (80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800454c:	401a      	ands	r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	041b      	lsls	r3, r3, #16
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a21      	ldr	r2, [pc, #132]	@ (80045e0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800455c:	401a      	ands	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1e      	ldr	r2, [pc, #120]	@ (80045e4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d11c      	bne.n	80045aa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a1d      	ldr	r2, [pc, #116]	@ (80045e8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004574:	401a      	ands	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	051b      	lsls	r3, r3, #20
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a1a      	ldr	r2, [pc, #104]	@ (80045ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004584:	401a      	ands	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a17      	ldr	r2, [pc, #92]	@ (80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004592:	401a      	ands	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a15      	ldr	r2, [pc, #84]	@ (80045f4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80045a0:	401a      	ands	r2, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	223c      	movs	r2, #60	@ 0x3c
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	fffffcff 	.word	0xfffffcff
 80045c8:	fffffbff 	.word	0xfffffbff
 80045cc:	fffff7ff 	.word	0xfffff7ff
 80045d0:	ffffefff 	.word	0xffffefff
 80045d4:	ffffdfff 	.word	0xffffdfff
 80045d8:	ffffbfff 	.word	0xffffbfff
 80045dc:	fff0ffff 	.word	0xfff0ffff
 80045e0:	efffffff 	.word	0xefffffff
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	ff0fffff 	.word	0xff0fffff
 80045ec:	feffffff 	.word	0xfeffffff
 80045f0:	fdffffff 	.word	0xfdffffff
 80045f4:	dfffffff 	.word	0xdfffffff

080045f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	@ 0x30
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	1dbb      	adds	r3, r7, #6
 8004604:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2288      	movs	r2, #136	@ 0x88
 800460a:	589b      	ldr	r3, [r3, r2]
 800460c:	2b20      	cmp	r3, #32
 800460e:	d000      	beq.n	8004612 <HAL_UART_Transmit_IT+0x1a>
 8004610:	e08d      	b.n	800472e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_UART_Transmit_IT+0x28>
 8004618:	1dbb      	adds	r3, r7, #6
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e085      	b.n	8004730 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	2380      	movs	r3, #128	@ 0x80
 800462a:	015b      	lsls	r3, r3, #5
 800462c:	429a      	cmp	r2, r3
 800462e:	d109      	bne.n	8004644 <HAL_UART_Transmit_IT+0x4c>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2201      	movs	r2, #1
 800463c:	4013      	ands	r3, r2
 800463e:	d001      	beq.n	8004644 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e075      	b.n	8004730 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1dba      	adds	r2, r7, #6
 800464e:	2154      	movs	r1, #84	@ 0x54
 8004650:	8812      	ldrh	r2, [r2, #0]
 8004652:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1dba      	adds	r2, r7, #6
 8004658:	2156      	movs	r1, #86	@ 0x56
 800465a:	8812      	ldrh	r2, [r2, #0]
 800465c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2290      	movs	r2, #144	@ 0x90
 8004668:	2100      	movs	r1, #0
 800466a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2288      	movs	r2, #136	@ 0x88
 8004670:	2121      	movs	r1, #33	@ 0x21
 8004672:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	059b      	lsls	r3, r3, #22
 800467c:	429a      	cmp	r2, r3
 800467e:	d12a      	bne.n	80046d6 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	015b      	lsls	r3, r3, #5
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <HAL_UART_Transmit_IT+0xa4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d103      	bne.n	800469c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a28      	ldr	r2, [pc, #160]	@ (8004738 <HAL_UART_Transmit_IT+0x140>)
 8004698:	679a      	str	r2, [r3, #120]	@ 0x78
 800469a:	e002      	b.n	80046a2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a27      	ldr	r2, [pc, #156]	@ (800473c <HAL_UART_Transmit_IT+0x144>)
 80046a0:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80046a8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ac:	2301      	movs	r3, #1
 80046ae:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2180      	movs	r1, #128	@ 0x80
 80046c4:	0409      	lsls	r1, r1, #16
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	f383 8810 	msr	PRIMASK, r3
}
 80046d4:	e029      	b.n	800472a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	015b      	lsls	r3, r3, #5
 80046de:	429a      	cmp	r2, r3
 80046e0:	d107      	bne.n	80046f2 <HAL_UART_Transmit_IT+0xfa>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a14      	ldr	r2, [pc, #80]	@ (8004740 <HAL_UART_Transmit_IT+0x148>)
 80046ee:	679a      	str	r2, [r3, #120]	@ 0x78
 80046f0:	e002      	b.n	80046f8 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <HAL_UART_Transmit_IT+0x14c>)
 80046f6:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046f8:	f3ef 8310 	mrs	r3, PRIMASK
 80046fc:	613b      	str	r3, [r7, #16]
  return(result);
 80046fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004702:	2301      	movs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			@ (mov r8, r8)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2180      	movs	r1, #128	@ 0x80
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b00c      	add	sp, #48	@ 0x30
 8004736:	bd80      	pop	{r7, pc}
 8004738:	0800537d 	.word	0x0800537d
 800473c:	08005291 	.word	0x08005291
 8004740:	080051d1 	.word	0x080051d1
 8004744:	0800511d 	.word	0x0800511d

08004748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004750:	46c0      	nop			@ (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	000a      	movs	r2, r1
 8004762:	1cbb      	adds	r3, r7, #2
 8004764:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004778:	231e      	movs	r3, #30
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4aab      	ldr	r2, [pc, #684]	@ (8004a4c <UART_SetConfig+0x2dc>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4aa6      	ldr	r2, [pc, #664]	@ (8004a50 <UART_SetConfig+0x2e0>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a9d      	ldr	r2, [pc, #628]	@ (8004a54 <UART_SetConfig+0x2e4>)
 80047de:	4013      	ands	r3, r2
 80047e0:	0019      	movs	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	220f      	movs	r2, #15
 80047f4:	4393      	bics	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a93      	ldr	r2, [pc, #588]	@ (8004a58 <UART_SetConfig+0x2e8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d127      	bne.n	800485e <UART_SetConfig+0xee>
 800480e:	4b93      	ldr	r3, [pc, #588]	@ (8004a5c <UART_SetConfig+0x2ec>)
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	2203      	movs	r2, #3
 8004814:	4013      	ands	r3, r2
 8004816:	2b03      	cmp	r3, #3
 8004818:	d017      	beq.n	800484a <UART_SetConfig+0xda>
 800481a:	d81b      	bhi.n	8004854 <UART_SetConfig+0xe4>
 800481c:	2b02      	cmp	r3, #2
 800481e:	d00a      	beq.n	8004836 <UART_SetConfig+0xc6>
 8004820:	d818      	bhi.n	8004854 <UART_SetConfig+0xe4>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <UART_SetConfig+0xbc>
 8004826:	2b01      	cmp	r3, #1
 8004828:	d00a      	beq.n	8004840 <UART_SetConfig+0xd0>
 800482a:	e013      	b.n	8004854 <UART_SetConfig+0xe4>
 800482c:	231f      	movs	r3, #31
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e021      	b.n	800487a <UART_SetConfig+0x10a>
 8004836:	231f      	movs	r3, #31
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2202      	movs	r2, #2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e01c      	b.n	800487a <UART_SetConfig+0x10a>
 8004840:	231f      	movs	r3, #31
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2204      	movs	r2, #4
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e017      	b.n	800487a <UART_SetConfig+0x10a>
 800484a:	231f      	movs	r3, #31
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	2208      	movs	r2, #8
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e012      	b.n	800487a <UART_SetConfig+0x10a>
 8004854:	231f      	movs	r3, #31
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2210      	movs	r2, #16
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e00d      	b.n	800487a <UART_SetConfig+0x10a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7f      	ldr	r2, [pc, #508]	@ (8004a60 <UART_SetConfig+0x2f0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d104      	bne.n	8004872 <UART_SetConfig+0x102>
 8004868:	231f      	movs	r3, #31
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	e003      	b.n	800487a <UART_SetConfig+0x10a>
 8004872:	231f      	movs	r3, #31
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	2210      	movs	r2, #16
 8004878:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	429a      	cmp	r2, r3
 8004884:	d000      	beq.n	8004888 <UART_SetConfig+0x118>
 8004886:	e06f      	b.n	8004968 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004888:	231f      	movs	r3, #31
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b08      	cmp	r3, #8
 8004890:	d01f      	beq.n	80048d2 <UART_SetConfig+0x162>
 8004892:	dc22      	bgt.n	80048da <UART_SetConfig+0x16a>
 8004894:	2b04      	cmp	r3, #4
 8004896:	d017      	beq.n	80048c8 <UART_SetConfig+0x158>
 8004898:	dc1f      	bgt.n	80048da <UART_SetConfig+0x16a>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <UART_SetConfig+0x134>
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d005      	beq.n	80048ae <UART_SetConfig+0x13e>
 80048a2:	e01a      	b.n	80048da <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7fe ff60 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 80048a8:	0003      	movs	r3, r0
 80048aa:	61bb      	str	r3, [r7, #24]
        break;
 80048ac:	e01c      	b.n	80048e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80048ae:	4b6b      	ldr	r3, [pc, #428]	@ (8004a5c <UART_SetConfig+0x2ec>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2207      	movs	r2, #7
 80048b6:	4013      	ands	r3, r2
 80048b8:	3301      	adds	r3, #1
 80048ba:	0019      	movs	r1, r3
 80048bc:	4869      	ldr	r0, [pc, #420]	@ (8004a64 <UART_SetConfig+0x2f4>)
 80048be:	f7fb fc23 	bl	8000108 <__udivsi3>
 80048c2:	0003      	movs	r3, r0
 80048c4:	61bb      	str	r3, [r7, #24]
        break;
 80048c6:	e00f      	b.n	80048e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c8:	f7fe fed8 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80048cc:	0003      	movs	r3, r0
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e00a      	b.n	80048e8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	61bb      	str	r3, [r7, #24]
        break;
 80048d8:	e006      	b.n	80048e8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048de:	231e      	movs	r3, #30
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
        break;
 80048e6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d100      	bne.n	80048f0 <UART_SetConfig+0x180>
 80048ee:	e097      	b.n	8004a20 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004a68 <UART_SetConfig+0x2f8>)
 80048f6:	0052      	lsls	r2, r2, #1
 80048f8:	5ad3      	ldrh	r3, [r2, r3]
 80048fa:	0019      	movs	r1, r3
 80048fc:	69b8      	ldr	r0, [r7, #24]
 80048fe:	f7fb fc03 	bl	8000108 <__udivsi3>
 8004902:	0003      	movs	r3, r0
 8004904:	005a      	lsls	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	18d2      	adds	r2, r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	0019      	movs	r1, r3
 8004914:	0010      	movs	r0, r2
 8004916:	f7fb fbf7 	bl	8000108 <__udivsi3>
 800491a:	0003      	movs	r3, r0
 800491c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d91c      	bls.n	800495e <UART_SetConfig+0x1ee>
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	025b      	lsls	r3, r3, #9
 800492a:	429a      	cmp	r2, r3
 800492c:	d217      	bcs.n	800495e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	b29a      	uxth	r2, r3
 8004932:	200e      	movs	r0, #14
 8004934:	183b      	adds	r3, r7, r0
 8004936:	210f      	movs	r1, #15
 8004938:	438a      	bics	r2, r1
 800493a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	b29b      	uxth	r3, r3
 8004942:	2207      	movs	r2, #7
 8004944:	4013      	ands	r3, r2
 8004946:	b299      	uxth	r1, r3
 8004948:	183b      	adds	r3, r7, r0
 800494a:	183a      	adds	r2, r7, r0
 800494c:	8812      	ldrh	r2, [r2, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	183a      	adds	r2, r7, r0
 8004958:	8812      	ldrh	r2, [r2, #0]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e060      	b.n	8004a20 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800495e:	231e      	movs	r3, #30
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e05b      	b.n	8004a20 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004968:	231f      	movs	r3, #31
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b08      	cmp	r3, #8
 8004970:	d01f      	beq.n	80049b2 <UART_SetConfig+0x242>
 8004972:	dc22      	bgt.n	80049ba <UART_SetConfig+0x24a>
 8004974:	2b04      	cmp	r3, #4
 8004976:	d017      	beq.n	80049a8 <UART_SetConfig+0x238>
 8004978:	dc1f      	bgt.n	80049ba <UART_SetConfig+0x24a>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <UART_SetConfig+0x214>
 800497e:	2b02      	cmp	r3, #2
 8004980:	d005      	beq.n	800498e <UART_SetConfig+0x21e>
 8004982:	e01a      	b.n	80049ba <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fe fef0 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004988:	0003      	movs	r3, r0
 800498a:	61bb      	str	r3, [r7, #24]
        break;
 800498c:	e01c      	b.n	80049c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800498e:	4b33      	ldr	r3, [pc, #204]	@ (8004a5c <UART_SetConfig+0x2ec>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	2207      	movs	r2, #7
 8004996:	4013      	ands	r3, r2
 8004998:	3301      	adds	r3, #1
 800499a:	0019      	movs	r1, r3
 800499c:	4831      	ldr	r0, [pc, #196]	@ (8004a64 <UART_SetConfig+0x2f4>)
 800499e:	f7fb fbb3 	bl	8000108 <__udivsi3>
 80049a2:	0003      	movs	r3, r0
 80049a4:	61bb      	str	r3, [r7, #24]
        break;
 80049a6:	e00f      	b.n	80049c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a8:	f7fe fe68 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80049ac:	0003      	movs	r3, r0
 80049ae:	61bb      	str	r3, [r7, #24]
        break;
 80049b0:	e00a      	b.n	80049c8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	2380      	movs	r3, #128	@ 0x80
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	61bb      	str	r3, [r7, #24]
        break;
 80049b8:	e006      	b.n	80049c8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049be:	231e      	movs	r3, #30
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
        break;
 80049c6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d028      	beq.n	8004a20 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049d2:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <UART_SetConfig+0x2f8>)
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	5ad3      	ldrh	r3, [r2, r3]
 80049d8:	0019      	movs	r1, r3
 80049da:	69b8      	ldr	r0, [r7, #24]
 80049dc:	f7fb fb94 	bl	8000108 <__udivsi3>
 80049e0:	0003      	movs	r3, r0
 80049e2:	001a      	movs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	18d2      	adds	r2, r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	0019      	movs	r1, r3
 80049f2:	0010      	movs	r0, r2
 80049f4:	f7fb fb88 	bl	8000108 <__udivsi3>
 80049f8:	0003      	movs	r3, r0
 80049fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d90a      	bls.n	8004a18 <UART_SetConfig+0x2a8>
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	025b      	lsls	r3, r3, #9
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d205      	bcs.n	8004a18 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	e003      	b.n	8004a20 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a18:	231e      	movs	r3, #30
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	226a      	movs	r2, #106	@ 0x6a
 8004a24:	2101      	movs	r1, #1
 8004a26:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2268      	movs	r2, #104	@ 0x68
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a3c:	231e      	movs	r3, #30
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	781b      	ldrb	r3, [r3, #0]
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b008      	add	sp, #32
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	cfff69f3 	.word	0xcfff69f3
 8004a50:	ffffcfff 	.word	0xffffcfff
 8004a54:	11fff4ff 	.word	0x11fff4ff
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40004400 	.word	0x40004400
 8004a64:	02dc6c00 	.word	0x02dc6c00
 8004a68:	08006564 	.word	0x08006564

08004a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	2208      	movs	r2, #8
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb0 <UART_AdvFeatureConfig+0x144>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4a43      	ldr	r2, [pc, #268]	@ (8004bb4 <UART_AdvFeatureConfig+0x148>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	0019      	movs	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	2202      	movs	r2, #2
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8004bb8 <UART_AdvFeatureConfig+0x14c>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ade:	2204      	movs	r2, #4
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4a34      	ldr	r2, [pc, #208]	@ (8004bbc <UART_AdvFeatureConfig+0x150>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	2210      	movs	r2, #16
 8004b02:	4013      	ands	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc0 <UART_AdvFeatureConfig+0x154>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	2220      	movs	r2, #32
 8004b24:	4013      	ands	r3, r2
 8004b26:	d00b      	beq.n	8004b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	4a25      	ldr	r2, [pc, #148]	@ (8004bc4 <UART_AdvFeatureConfig+0x158>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	0019      	movs	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	2240      	movs	r2, #64	@ 0x40
 8004b46:	4013      	ands	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc8 <UART_AdvFeatureConfig+0x15c>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b66:	2380      	movs	r3, #128	@ 0x80
 8004b68:	035b      	lsls	r3, r3, #13
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10b      	bne.n	8004b86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <UART_AdvFeatureConfig+0x160>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd0 <UART_AdvFeatureConfig+0x164>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }
}
 8004ba8:	46c0      	nop			@ (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	ffff7fff 	.word	0xffff7fff
 8004bb4:	fffdffff 	.word	0xfffdffff
 8004bb8:	fffeffff 	.word	0xfffeffff
 8004bbc:	fffbffff 	.word	0xfffbffff
 8004bc0:	ffffefff 	.word	0xffffefff
 8004bc4:	ffffdfff 	.word	0xffffdfff
 8004bc8:	ffefffff 	.word	0xffefffff
 8004bcc:	ff9fffff 	.word	0xff9fffff
 8004bd0:	fff7ffff 	.word	0xfff7ffff

08004bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b092      	sub	sp, #72	@ 0x48
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2290      	movs	r2, #144	@ 0x90
 8004be0:	2100      	movs	r1, #0
 8004be2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be4:	f7fc fd94 	bl	8001710 <HAL_GetTick>
 8004be8:	0003      	movs	r3, r0
 8004bea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d12d      	bne.n	8004c56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfc:	2280      	movs	r2, #128	@ 0x80
 8004bfe:	0391      	lsls	r1, r2, #14
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4a47      	ldr	r2, [pc, #284]	@ (8004d20 <UART_CheckIdleState+0x14c>)
 8004c04:	9200      	str	r2, [sp, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f000 f88e 	bl	8004d28 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d022      	beq.n	8004c56 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c10:	f3ef 8310 	mrs	r3, PRIMASK
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	f383 8810 	msr	PRIMASK, r3
}
 8004c24:	46c0      	nop			@ (mov r8, r8)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2180      	movs	r1, #128	@ 0x80
 8004c32:	438a      	bics	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2288      	movs	r2, #136	@ 0x88
 8004c46:	2120      	movs	r1, #32
 8004c48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2284      	movs	r2, #132	@ 0x84
 8004c4e:	2100      	movs	r1, #0
 8004c50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e060      	b.n	8004d18 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d146      	bne.n	8004cf2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c66:	2280      	movs	r2, #128	@ 0x80
 8004c68:	03d1      	lsls	r1, r2, #15
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d20 <UART_CheckIdleState+0x14c>)
 8004c6e:	9200      	str	r2, [sp, #0]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f000 f859 	bl	8004d28 <UART_WaitOnFlagUntilTimeout>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d03b      	beq.n	8004cf2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c84:	2301      	movs	r3, #1
 8004c86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f383 8810 	msr	PRIMASK, r3
}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4922      	ldr	r1, [pc, #136]	@ (8004d24 <UART_CheckIdleState+0x150>)
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f383 8810 	msr	PRIMASK, r3
}
 8004caa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cac:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f383 8810 	msr	PRIMASK, r3
}
 8004cc0:	46c0      	nop			@ (mov r8, r8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	438a      	bics	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	228c      	movs	r2, #140	@ 0x8c
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2284      	movs	r2, #132	@ 0x84
 8004cea:	2100      	movs	r1, #0
 8004cec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e012      	b.n	8004d18 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2288      	movs	r2, #136	@ 0x88
 8004cf6:	2120      	movs	r1, #32
 8004cf8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	228c      	movs	r2, #140	@ 0x8c
 8004cfe:	2120      	movs	r1, #32
 8004d00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2284      	movs	r2, #132	@ 0x84
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b010      	add	sp, #64	@ 0x40
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	01ffffff 	.word	0x01ffffff
 8004d24:	fffffedf 	.word	0xfffffedf

08004d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	1dfb      	adds	r3, r7, #7
 8004d36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d38:	e051      	b.n	8004dde <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	d04e      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d40:	f7fc fce6 	bl	8001710 <HAL_GetTick>
 8004d44:	0002      	movs	r2, r0
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e051      	b.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2204      	movs	r2, #4
 8004d62:	4013      	ands	r3, r2
 8004d64:	d03b      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b80      	cmp	r3, #128	@ 0x80
 8004d6a:	d038      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b40      	cmp	r3, #64	@ 0x40
 8004d70:	d035      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d111      	bne.n	8004da4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2208      	movs	r2, #8
 8004d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 f960 	bl	8005050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2290      	movs	r2, #144	@ 0x90
 8004d94:	2108      	movs	r1, #8
 8004d96:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2284      	movs	r2, #132	@ 0x84
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e02c      	b.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	401a      	ands	r2, r3
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d112      	bne.n	8004dde <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2280      	movs	r2, #128	@ 0x80
 8004dbe:	0112      	lsls	r2, r2, #4
 8004dc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f000 f943 	bl	8005050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2290      	movs	r2, #144	@ 0x90
 8004dce:	2120      	movs	r1, #32
 8004dd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2284      	movs	r2, #132	@ 0x84
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e00f      	b.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	425a      	negs	r2, r3
 8004dee:	4153      	adcs	r3, r2
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	001a      	movs	r2, r3
 8004df4:	1dfb      	adds	r3, r7, #7
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d09e      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b098      	sub	sp, #96	@ 0x60
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	1dbb      	adds	r3, r7, #6
 8004e14:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1dba      	adds	r2, r7, #6
 8004e20:	215c      	movs	r1, #92	@ 0x5c
 8004e22:	8812      	ldrh	r2, [r2, #0]
 8004e24:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1dba      	adds	r2, r7, #6
 8004e2a:	215e      	movs	r1, #94	@ 0x5e
 8004e2c:	8812      	ldrh	r2, [r2, #0]
 8004e2e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	2380      	movs	r3, #128	@ 0x80
 8004e3c:	015b      	lsls	r3, r3, #5
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d10d      	bne.n	8004e5e <UART_Start_Receive_IT+0x56>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <UART_Start_Receive_IT+0x4c>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2260      	movs	r2, #96	@ 0x60
 8004e4e:	497b      	ldr	r1, [pc, #492]	@ (800503c <UART_Start_Receive_IT+0x234>)
 8004e50:	5299      	strh	r1, [r3, r2]
 8004e52:	e02e      	b.n	8004eb2 <UART_Start_Receive_IT+0xaa>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2260      	movs	r2, #96	@ 0x60
 8004e58:	21ff      	movs	r1, #255	@ 0xff
 8004e5a:	5299      	strh	r1, [r3, r2]
 8004e5c:	e029      	b.n	8004eb2 <UART_Start_Receive_IT+0xaa>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <UART_Start_Receive_IT+0x7a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <UART_Start_Receive_IT+0x70>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2260      	movs	r2, #96	@ 0x60
 8004e72:	21ff      	movs	r1, #255	@ 0xff
 8004e74:	5299      	strh	r1, [r3, r2]
 8004e76:	e01c      	b.n	8004eb2 <UART_Start_Receive_IT+0xaa>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2260      	movs	r2, #96	@ 0x60
 8004e7c:	217f      	movs	r1, #127	@ 0x7f
 8004e7e:	5299      	strh	r1, [r3, r2]
 8004e80:	e017      	b.n	8004eb2 <UART_Start_Receive_IT+0xaa>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	2380      	movs	r3, #128	@ 0x80
 8004e88:	055b      	lsls	r3, r3, #21
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d10d      	bne.n	8004eaa <UART_Start_Receive_IT+0xa2>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <UART_Start_Receive_IT+0x98>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2260      	movs	r2, #96	@ 0x60
 8004e9a:	217f      	movs	r1, #127	@ 0x7f
 8004e9c:	5299      	strh	r1, [r3, r2]
 8004e9e:	e008      	b.n	8004eb2 <UART_Start_Receive_IT+0xaa>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2260      	movs	r2, #96	@ 0x60
 8004ea4:	213f      	movs	r1, #63	@ 0x3f
 8004ea6:	5299      	strh	r1, [r3, r2]
 8004ea8:	e003      	b.n	8004eb2 <UART_Start_Receive_IT+0xaa>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2260      	movs	r2, #96	@ 0x60
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2290      	movs	r2, #144	@ 0x90
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	228c      	movs	r2, #140	@ 0x8c
 8004ebe:	2122      	movs	r1, #34	@ 0x22
 8004ec0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ecc:	2301      	movs	r3, #1
 8004ece:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eee:	f383 8810 	msr	PRIMASK, r3
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	059b      	lsls	r3, r3, #22
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d150      	bne.n	8004fa2 <UART_Start_Receive_IT+0x19a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2268      	movs	r2, #104	@ 0x68
 8004f04:	5a9b      	ldrh	r3, [r3, r2]
 8004f06:	1dba      	adds	r2, r7, #6
 8004f08:	8812      	ldrh	r2, [r2, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d349      	bcc.n	8004fa2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	015b      	lsls	r3, r3, #5
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d107      	bne.n	8004f2a <UART_Start_Receive_IT+0x122>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a46      	ldr	r2, [pc, #280]	@ (8005040 <UART_Start_Receive_IT+0x238>)
 8004f26:	675a      	str	r2, [r3, #116]	@ 0x74
 8004f28:	e002      	b.n	8004f30 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a45      	ldr	r2, [pc, #276]	@ (8005044 <UART_Start_Receive_IT+0x23c>)
 8004f2e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f38:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f42:	2301      	movs	r3, #1
 8004f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			@ (mov r8, r8)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2180      	movs	r1, #128	@ 0x80
 8004f5a:	0049      	lsls	r1, r1, #1
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f76:	2301      	movs	r3, #1
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7c:	f383 8810 	msr	PRIMASK, r3
}
 8004f80:	46c0      	nop			@ (mov r8, r8)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2180      	movs	r1, #128	@ 0x80
 8004f8e:	0549      	lsls	r1, r1, #21
 8004f90:	430a      	orrs	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f96:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	f383 8810 	msr	PRIMASK, r3
}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	e047      	b.n	8005032 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	2380      	movs	r3, #128	@ 0x80
 8004fa8:	015b      	lsls	r3, r3, #5
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d107      	bne.n	8004fbe <UART_Start_Receive_IT+0x1b6>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <UART_Start_Receive_IT+0x240>)
 8004fba:	675a      	str	r2, [r3, #116]	@ 0x74
 8004fbc:	e002      	b.n	8004fc4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4a22      	ldr	r2, [pc, #136]	@ (800504c <UART_Start_Receive_IT+0x244>)
 8004fc2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d019      	beq.n	8005000 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fd2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f383 8810 	msr	PRIMASK, r3
}
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2190      	movs	r1, #144	@ 0x90
 8004fee:	0049      	lsls	r1, r1, #1
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	f383 8810 	msr	PRIMASK, r3
}
 8004ffe:	e018      	b.n	8005032 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005000:	f3ef 8310 	mrs	r3, PRIMASK
 8005004:	613b      	str	r3, [r7, #16]
  return(result);
 8005006:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005008:	653b      	str	r3, [r7, #80]	@ 0x50
 800500a:	2301      	movs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f383 8810 	msr	PRIMASK, r3
}
 8005014:	46c0      	nop			@ (mov r8, r8)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2120      	movs	r1, #32
 8005022:	430a      	orrs	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005028:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f383 8810 	msr	PRIMASK, r3
}
 8005030:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	b018      	add	sp, #96	@ 0x60
 800503a:	bd80      	pop	{r7, pc}
 800503c:	000001ff 	.word	0x000001ff
 8005040:	08005b15 	.word	0x08005b15
 8005044:	080057e1 	.word	0x080057e1
 8005048:	08005629 	.word	0x08005629
 800504c:	08005471 	.word	0x08005471

08005050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08e      	sub	sp, #56	@ 0x38
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005058:	f3ef 8310 	mrs	r3, PRIMASK
 800505c:	617b      	str	r3, [r7, #20]
  return(result);
 800505e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005060:	637b      	str	r3, [r7, #52]	@ 0x34
 8005062:	2301      	movs	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f383 8810 	msr	PRIMASK, r3
}
 800506c:	46c0      	nop			@ (mov r8, r8)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4926      	ldr	r1, [pc, #152]	@ (8005114 <UART_EndRxTransfer+0xc4>)
 800507a:	400a      	ands	r2, r1
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005080:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f383 8810 	msr	PRIMASK, r3
}
 8005088:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800508a:	f3ef 8310 	mrs	r3, PRIMASK
 800508e:	623b      	str	r3, [r7, #32]
  return(result);
 8005090:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005092:	633b      	str	r3, [r7, #48]	@ 0x30
 8005094:	2301      	movs	r3, #1
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	f383 8810 	msr	PRIMASK, r3
}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	491b      	ldr	r1, [pc, #108]	@ (8005118 <UART_EndRxTransfer+0xc8>)
 80050ac:	400a      	ands	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d118      	bne.n	80050f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050c4:	f3ef 8310 	mrs	r3, PRIMASK
 80050c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ce:	2301      	movs	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f383 8810 	msr	PRIMASK, r3
}
 80050d8:	46c0      	nop			@ (mov r8, r8)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2110      	movs	r1, #16
 80050e6:	438a      	bics	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f383 8810 	msr	PRIMASK, r3
}
 80050f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	228c      	movs	r2, #140	@ 0x8c
 80050fa:	2120      	movs	r1, #32
 80050fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b00e      	add	sp, #56	@ 0x38
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	fffffedf 	.word	0xfffffedf
 8005118:	effffffe 	.word	0xeffffffe

0800511c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	@ 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2288      	movs	r2, #136	@ 0x88
 8005128:	589b      	ldr	r3, [r3, r2]
 800512a:	2b21      	cmp	r3, #33	@ 0x21
 800512c:	d14c      	bne.n	80051c8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2256      	movs	r2, #86	@ 0x56
 8005132:	5a9b      	ldrh	r3, [r3, r2]
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d132      	bne.n	80051a0 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800513a:	f3ef 8310 	mrs	r3, PRIMASK
 800513e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005140:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
 8005144:	2301      	movs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f383 8810 	msr	PRIMASK, r3
}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2180      	movs	r1, #128	@ 0x80
 800515c:	438a      	bics	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f383 8810 	msr	PRIMASK, r3
}
 800516a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800516c:	f3ef 8310 	mrs	r3, PRIMASK
 8005170:	617b      	str	r3, [r7, #20]
  return(result);
 8005172:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005174:	623b      	str	r3, [r7, #32]
 8005176:	2301      	movs	r3, #1
 8005178:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2140      	movs	r1, #64	@ 0x40
 800518e:	430a      	orrs	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800519e:	e013      	b.n	80051c8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2256      	movs	r2, #86	@ 0x56
 80051ba:	5a9b      	ldrh	r3, [r3, r2]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b299      	uxth	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2256      	movs	r2, #86	@ 0x56
 80051c6:	5299      	strh	r1, [r3, r2]
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b00a      	add	sp, #40	@ 0x28
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08c      	sub	sp, #48	@ 0x30
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2288      	movs	r2, #136	@ 0x88
 80051dc:	589b      	ldr	r3, [r3, r2]
 80051de:	2b21      	cmp	r3, #33	@ 0x21
 80051e0:	d151      	bne.n	8005286 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2256      	movs	r2, #86	@ 0x56
 80051e6:	5a9b      	ldrh	r3, [r3, r2]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d132      	bne.n	8005254 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051ee:	f3ef 8310 	mrs	r3, PRIMASK
 80051f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80051f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f8:	2301      	movs	r3, #1
 80051fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2180      	movs	r1, #128	@ 0x80
 8005210:	438a      	bics	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f383 8810 	msr	PRIMASK, r3
}
 800521e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005220:	f3ef 8310 	mrs	r3, PRIMASK
 8005224:	61bb      	str	r3, [r7, #24]
  return(result);
 8005226:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
 800522a:	2301      	movs	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f383 8810 	msr	PRIMASK, r3
}
 8005234:	46c0      	nop			@ (mov r8, r8)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2140      	movs	r1, #64	@ 0x40
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005252:	e018      	b.n	8005286 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	001a      	movs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	05d2      	lsls	r2, r2, #23
 8005266:	0dd2      	lsrs	r2, r2, #23
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526e:	1c9a      	adds	r2, r3, #2
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2256      	movs	r2, #86	@ 0x56
 8005278:	5a9b      	ldrh	r3, [r3, r2]
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b299      	uxth	r1, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2256      	movs	r2, #86	@ 0x56
 8005284:	5299      	strh	r1, [r3, r2]
}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b00c      	add	sp, #48	@ 0x30
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	@ 0x30
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2288      	movs	r2, #136	@ 0x88
 800529c:	589b      	ldr	r3, [r3, r2]
 800529e:	2b21      	cmp	r3, #33	@ 0x21
 80052a0:	d165      	bne.n	800536e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80052a2:	232e      	movs	r3, #46	@ 0x2e
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	216a      	movs	r1, #106	@ 0x6a
 80052aa:	5a52      	ldrh	r2, [r2, r1]
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e059      	b.n	8005364 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2256      	movs	r2, #86	@ 0x56
 80052b4:	5a9b      	ldrh	r3, [r3, r2]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d133      	bne.n	8005324 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052bc:	f3ef 8310 	mrs	r3, PRIMASK
 80052c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80052c2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c6:	2301      	movs	r3, #1
 80052c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f383 8810 	msr	PRIMASK, r3
}
 80052d0:	46c0      	nop			@ (mov r8, r8)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4926      	ldr	r1, [pc, #152]	@ (8005378 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80052de:	400a      	ands	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f383 8810 	msr	PRIMASK, r3
}
 80052ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052ee:	f3ef 8310 	mrs	r3, PRIMASK
 80052f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80052f4:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f8:	2301      	movs	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2140      	movs	r1, #64	@ 0x40
 8005310:	430a      	orrs	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f383 8810 	msr	PRIMASK, r3
}
 800531e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8005320:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8005322:	e024      	b.n	800536e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	2280      	movs	r2, #128	@ 0x80
 800532c:	4013      	ands	r3, r2
 800532e:	d013      	beq.n	8005358 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2256      	movs	r2, #86	@ 0x56
 800534a:	5a9b      	ldrh	r3, [r3, r2]
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b299      	uxth	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2256      	movs	r2, #86	@ 0x56
 8005356:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005358:	212e      	movs	r1, #46	@ 0x2e
 800535a:	187b      	adds	r3, r7, r1
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	187b      	adds	r3, r7, r1
 8005360:	3a01      	subs	r2, #1
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	232e      	movs	r3, #46	@ 0x2e
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1a0      	bne.n	80052b0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b00c      	add	sp, #48	@ 0x30
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			@ (mov r8, r8)
 8005378:	ff7fffff 	.word	0xff7fffff

0800537c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	@ 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2288      	movs	r2, #136	@ 0x88
 8005388:	589b      	ldr	r3, [r3, r2]
 800538a:	2b21      	cmp	r3, #33	@ 0x21
 800538c:	d16a      	bne.n	8005464 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800538e:	232e      	movs	r3, #46	@ 0x2e
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	216a      	movs	r1, #106	@ 0x6a
 8005396:	5a52      	ldrh	r2, [r2, r1]
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e05e      	b.n	800545a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2256      	movs	r2, #86	@ 0x56
 80053a0:	5a9b      	ldrh	r3, [r3, r2]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d133      	bne.n	8005410 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053a8:	f3ef 8310 	mrs	r3, PRIMASK
 80053ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ae:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b2:	2301      	movs	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f383 8810 	msr	PRIMASK, r3
}
 80053bc:	46c0      	nop			@ (mov r8, r8)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4928      	ldr	r1, [pc, #160]	@ (800546c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80053ca:	400a      	ands	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f383 8810 	msr	PRIMASK, r3
}
 80053d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053da:	f3ef 8310 	mrs	r3, PRIMASK
 80053de:	617b      	str	r3, [r7, #20]
  return(result);
 80053e0:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053e2:	623b      	str	r3, [r7, #32]
 80053e4:	2301      	movs	r3, #1
 80053e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f383 8810 	msr	PRIMASK, r3
}
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2140      	movs	r1, #64	@ 0x40
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f383 8810 	msr	PRIMASK, r3
}
 800540a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800540c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800540e:	e029      	b.n	8005464 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	2280      	movs	r2, #128	@ 0x80
 8005418:	4013      	ands	r3, r2
 800541a:	d018      	beq.n	800544e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005420:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	001a      	movs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	05d2      	lsls	r2, r2, #23
 800542e:	0dd2      	lsrs	r2, r2, #23
 8005430:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2256      	movs	r2, #86	@ 0x56
 8005440:	5a9b      	ldrh	r3, [r3, r2]
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b299      	uxth	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2256      	movs	r2, #86	@ 0x56
 800544c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800544e:	212e      	movs	r1, #46	@ 0x2e
 8005450:	187b      	adds	r3, r7, r1
 8005452:	881a      	ldrh	r2, [r3, #0]
 8005454:	187b      	adds	r3, r7, r1
 8005456:	3a01      	subs	r2, #1
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	232e      	movs	r3, #46	@ 0x2e
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d19b      	bne.n	800539c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8005464:	46c0      	nop			@ (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b00c      	add	sp, #48	@ 0x30
 800546a:	bd80      	pop	{r7, pc}
 800546c:	ff7fffff 	.word	0xff7fffff

08005470 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b094      	sub	sp, #80	@ 0x50
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005478:	204e      	movs	r0, #78	@ 0x4e
 800547a:	183b      	adds	r3, r7, r0
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	2160      	movs	r1, #96	@ 0x60
 8005480:	5a52      	ldrh	r2, [r2, r1]
 8005482:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	228c      	movs	r2, #140	@ 0x8c
 8005488:	589b      	ldr	r3, [r3, r2]
 800548a:	2b22      	cmp	r3, #34	@ 0x22
 800548c:	d000      	beq.n	8005490 <UART_RxISR_8BIT+0x20>
 800548e:	e0ba      	b.n	8005606 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005496:	214c      	movs	r1, #76	@ 0x4c
 8005498:	187b      	adds	r3, r7, r1
 800549a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800549c:	187b      	adds	r3, r7, r1
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	183b      	adds	r3, r7, r0
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b2d9      	uxtb	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ac:	400a      	ands	r2, r1
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	225e      	movs	r2, #94	@ 0x5e
 80054c0:	5a9b      	ldrh	r3, [r3, r2]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b299      	uxth	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	225e      	movs	r2, #94	@ 0x5e
 80054cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	225e      	movs	r2, #94	@ 0x5e
 80054d2:	5a9b      	ldrh	r3, [r3, r2]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d000      	beq.n	80054dc <UART_RxISR_8BIT+0x6c>
 80054da:	e09c      	b.n	8005616 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054dc:	f3ef 8310 	mrs	r3, PRIMASK
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e6:	2301      	movs	r3, #1
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	f383 8810 	msr	PRIMASK, r3
}
 80054f0:	46c0      	nop			@ (mov r8, r8)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4948      	ldr	r1, [pc, #288]	@ (8005620 <UART_RxISR_8BIT+0x1b0>)
 80054fe:	400a      	ands	r2, r1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	f383 8810 	msr	PRIMASK, r3
}
 800550c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800550e:	f3ef 8310 	mrs	r3, PRIMASK
 8005512:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	647b      	str	r3, [r7, #68]	@ 0x44
 8005518:	2301      	movs	r3, #1
 800551a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551e:	f383 8810 	msr	PRIMASK, r3
}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2101      	movs	r1, #1
 8005530:	438a      	bics	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005536:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	228c      	movs	r2, #140	@ 0x8c
 8005544:	2120      	movs	r1, #32
 8005546:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	2380      	movs	r3, #128	@ 0x80
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	4013      	ands	r3, r2
 8005560:	d018      	beq.n	8005594 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005562:	f3ef 8310 	mrs	r3, PRIMASK
 8005566:	61bb      	str	r3, [r7, #24]
  return(result);
 8005568:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556a:	643b      	str	r3, [r7, #64]	@ 0x40
 800556c:	2301      	movs	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4928      	ldr	r1, [pc, #160]	@ (8005624 <UART_RxISR_8BIT+0x1b4>)
 8005584:	400a      	ands	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	f383 8810 	msr	PRIMASK, r3
}
 8005592:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d12f      	bne.n	80055fc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055a2:	f3ef 8310 	mrs	r3, PRIMASK
 80055a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80055a8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ac:	2301      	movs	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f383 8810 	msr	PRIMASK, r3
}
 80055b6:	46c0      	nop			@ (mov r8, r8)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2110      	movs	r1, #16
 80055c4:	438a      	bics	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2210      	movs	r2, #16
 80055dc:	4013      	ands	r3, r2
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d103      	bne.n	80055ea <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2210      	movs	r2, #16
 80055e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	225c      	movs	r2, #92	@ 0x5c
 80055ee:	5a9a      	ldrh	r2, [r3, r2]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	0011      	movs	r1, r2
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7ff f8af 	bl	8004758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055fa:	e00c      	b.n	8005616 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	0018      	movs	r0, r3
 8005600:	f7fb fabe 	bl	8000b80 <HAL_UART_RxCpltCallback>
}
 8005604:	e007      	b.n	8005616 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2108      	movs	r1, #8
 8005612:	430a      	orrs	r2, r1
 8005614:	619a      	str	r2, [r3, #24]
}
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	46bd      	mov	sp, r7
 800561a:	b014      	add	sp, #80	@ 0x50
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	fffffedf 	.word	0xfffffedf
 8005624:	fbffffff 	.word	0xfbffffff

08005628 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b094      	sub	sp, #80	@ 0x50
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005630:	204e      	movs	r0, #78	@ 0x4e
 8005632:	183b      	adds	r3, r7, r0
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	2160      	movs	r1, #96	@ 0x60
 8005638:	5a52      	ldrh	r2, [r2, r1]
 800563a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	228c      	movs	r2, #140	@ 0x8c
 8005640:	589b      	ldr	r3, [r3, r2]
 8005642:	2b22      	cmp	r3, #34	@ 0x22
 8005644:	d000      	beq.n	8005648 <UART_RxISR_16BIT+0x20>
 8005646:	e0ba      	b.n	80057be <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564e:	214c      	movs	r1, #76	@ 0x4c
 8005650:	187b      	adds	r3, r7, r1
 8005652:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005658:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800565a:	187b      	adds	r3, r7, r1
 800565c:	183a      	adds	r2, r7, r0
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	4013      	ands	r3, r2
 8005664:	b29a      	uxth	r2, r3
 8005666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005668:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566e:	1c9a      	adds	r2, r3, #2
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	225e      	movs	r2, #94	@ 0x5e
 8005678:	5a9b      	ldrh	r3, [r3, r2]
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b299      	uxth	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	225e      	movs	r2, #94	@ 0x5e
 8005684:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	225e      	movs	r2, #94	@ 0x5e
 800568a:	5a9b      	ldrh	r3, [r3, r2]
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d000      	beq.n	8005694 <UART_RxISR_16BIT+0x6c>
 8005692:	e09c      	b.n	80057ce <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005694:	f3ef 8310 	mrs	r3, PRIMASK
 8005698:	623b      	str	r3, [r7, #32]
  return(result);
 800569a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800569c:	647b      	str	r3, [r7, #68]	@ 0x44
 800569e:	2301      	movs	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	f383 8810 	msr	PRIMASK, r3
}
 80056a8:	46c0      	nop			@ (mov r8, r8)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4948      	ldr	r1, [pc, #288]	@ (80057d8 <UART_RxISR_16BIT+0x1b0>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	f383 8810 	msr	PRIMASK, r3
}
 80056c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056c6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d0:	2301      	movs	r3, #1
 80056d2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d6:	f383 8810 	msr	PRIMASK, r3
}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2101      	movs	r1, #1
 80056e8:	438a      	bics	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f2:	f383 8810 	msr	PRIMASK, r3
}
 80056f6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	228c      	movs	r2, #140	@ 0x8c
 80056fc:	2120      	movs	r1, #32
 80056fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	4013      	ands	r3, r2
 8005718:	d018      	beq.n	800574c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800571a:	f3ef 8310 	mrs	r3, PRIMASK
 800571e:	617b      	str	r3, [r7, #20]
  return(result);
 8005720:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005724:	2301      	movs	r3, #1
 8005726:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f383 8810 	msr	PRIMASK, r3
}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4928      	ldr	r1, [pc, #160]	@ (80057dc <UART_RxISR_16BIT+0x1b4>)
 800573c:	400a      	ands	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d12f      	bne.n	80057b4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800575a:	f3ef 8310 	mrs	r3, PRIMASK
 800575e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005760:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005764:	2301      	movs	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f383 8810 	msr	PRIMASK, r3
}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2110      	movs	r1, #16
 800577c:	438a      	bics	r2, r1
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f383 8810 	msr	PRIMASK, r3
}
 800578a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	2210      	movs	r2, #16
 8005794:	4013      	ands	r3, r2
 8005796:	2b10      	cmp	r3, #16
 8005798:	d103      	bne.n	80057a2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2210      	movs	r2, #16
 80057a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	225c      	movs	r2, #92	@ 0x5c
 80057a6:	5a9a      	ldrh	r2, [r3, r2]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	0011      	movs	r1, r2
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fe ffd3 	bl	8004758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057b2:	e00c      	b.n	80057ce <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7fb f9e2 	bl	8000b80 <HAL_UART_RxCpltCallback>
}
 80057bc:	e007      	b.n	80057ce <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2108      	movs	r1, #8
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b014      	add	sp, #80	@ 0x50
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	fffffedf 	.word	0xfffffedf
 80057dc:	fbffffff 	.word	0xfbffffff

080057e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b0a0      	sub	sp, #128	@ 0x80
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057e8:	237a      	movs	r3, #122	@ 0x7a
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	2160      	movs	r1, #96	@ 0x60
 80057f0:	5a52      	ldrh	r2, [r2, r1]
 80057f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	228c      	movs	r2, #140	@ 0x8c
 8005810:	589b      	ldr	r3, [r3, r2]
 8005812:	2b22      	cmp	r3, #34	@ 0x22
 8005814:	d000      	beq.n	8005818 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005816:	e166      	b.n	8005ae6 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005818:	236e      	movs	r3, #110	@ 0x6e
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	2168      	movs	r1, #104	@ 0x68
 8005820:	5a52      	ldrh	r2, [r2, r1]
 8005822:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005824:	e10d      	b.n	8005a42 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800582c:	216c      	movs	r1, #108	@ 0x6c
 800582e:	187b      	adds	r3, r7, r1
 8005830:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005832:	187b      	adds	r3, r7, r1
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b2da      	uxtb	r2, r3
 8005838:	237a      	movs	r3, #122	@ 0x7a
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b2d9      	uxtb	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	400a      	ands	r2, r1
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	225e      	movs	r2, #94	@ 0x5e
 8005858:	5a9b      	ldrh	r3, [r3, r2]
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b299      	uxth	r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	225e      	movs	r2, #94	@ 0x5e
 8005864:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800586e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005870:	2207      	movs	r2, #7
 8005872:	4013      	ands	r3, r2
 8005874:	d049      	beq.n	800590a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005876:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005878:	2201      	movs	r2, #1
 800587a:	4013      	ands	r3, r2
 800587c:	d010      	beq.n	80058a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800587e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005880:	2380      	movs	r3, #128	@ 0x80
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4013      	ands	r3, r2
 8005886:	d00b      	beq.n	80058a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2201      	movs	r2, #1
 800588e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2290      	movs	r2, #144	@ 0x90
 8005894:	589b      	ldr	r3, [r3, r2]
 8005896:	2201      	movs	r2, #1
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2190      	movs	r1, #144	@ 0x90
 800589e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058a2:	2202      	movs	r2, #2
 80058a4:	4013      	ands	r3, r2
 80058a6:	d00f      	beq.n	80058c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80058a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058aa:	2201      	movs	r2, #1
 80058ac:	4013      	ands	r3, r2
 80058ae:	d00b      	beq.n	80058c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2202      	movs	r2, #2
 80058b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2290      	movs	r2, #144	@ 0x90
 80058bc:	589b      	ldr	r3, [r3, r2]
 80058be:	2204      	movs	r2, #4
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2190      	movs	r1, #144	@ 0x90
 80058c6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058ca:	2204      	movs	r2, #4
 80058cc:	4013      	ands	r3, r2
 80058ce:	d00f      	beq.n	80058f0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80058d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d2:	2201      	movs	r2, #1
 80058d4:	4013      	ands	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2204      	movs	r2, #4
 80058de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2290      	movs	r2, #144	@ 0x90
 80058e4:	589b      	ldr	r3, [r3, r2]
 80058e6:	2202      	movs	r2, #2
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2190      	movs	r1, #144	@ 0x90
 80058ee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2290      	movs	r2, #144	@ 0x90
 80058f4:	589b      	ldr	r3, [r3, r2]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7fe ff23 	bl	8004748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2290      	movs	r2, #144	@ 0x90
 8005906:	2100      	movs	r1, #0
 8005908:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	225e      	movs	r2, #94	@ 0x5e
 800590e:	5a9b      	ldrh	r3, [r3, r2]
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d000      	beq.n	8005918 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005916:	e094      	b.n	8005a42 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005918:	f3ef 8310 	mrs	r3, PRIMASK
 800591c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800591e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005920:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005922:	2301      	movs	r3, #1
 8005924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005928:	f383 8810 	msr	PRIMASK, r3
}
 800592c:	46c0      	nop			@ (mov r8, r8)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4971      	ldr	r1, [pc, #452]	@ (8005b00 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800593a:	400a      	ands	r2, r1
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005940:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005944:	f383 8810 	msr	PRIMASK, r3
}
 8005948:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800594a:	f3ef 8310 	mrs	r3, PRIMASK
 800594e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005952:	667b      	str	r3, [r7, #100]	@ 0x64
 8005954:	2301      	movs	r3, #1
 8005956:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595a:	f383 8810 	msr	PRIMASK, r3
}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4966      	ldr	r1, [pc, #408]	@ (8005b04 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800596c:	400a      	ands	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
 8005970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005976:	f383 8810 	msr	PRIMASK, r3
}
 800597a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	228c      	movs	r2, #140	@ 0x8c
 8005980:	2120      	movs	r1, #32
 8005982:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	4013      	ands	r3, r2
 800599c:	d018      	beq.n	80059d0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800599e:	f3ef 8310 	mrs	r3, PRIMASK
 80059a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80059a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80059a8:	2301      	movs	r3, #1
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	f383 8810 	msr	PRIMASK, r3
}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4952      	ldr	r1, [pc, #328]	@ (8005b08 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80059c0:	400a      	ands	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ca:	f383 8810 	msr	PRIMASK, r3
}
 80059ce:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d12f      	bne.n	8005a38 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059de:	f3ef 8310 	mrs	r3, PRIMASK
 80059e2:	623b      	str	r3, [r7, #32]
  return(result);
 80059e4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059e8:	2301      	movs	r3, #1
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	f383 8810 	msr	PRIMASK, r3
}
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2110      	movs	r1, #16
 8005a00:	438a      	bics	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	f383 8810 	msr	PRIMASK, r3
}
 8005a0e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	2210      	movs	r2, #16
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d103      	bne.n	8005a26 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2210      	movs	r2, #16
 8005a24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	225c      	movs	r2, #92	@ 0x5c
 8005a2a:	5a9a      	ldrh	r2, [r3, r2]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	0011      	movs	r1, r2
 8005a30:	0018      	movs	r0, r3
 8005a32:	f7fe fe91 	bl	8004758 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005a36:	e00e      	b.n	8005a56 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7fb f8a0 	bl	8000b80 <HAL_UART_RxCpltCallback>
        break;
 8005a40:	e009      	b.n	8005a56 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a42:	236e      	movs	r3, #110	@ 0x6e
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <UART_RxISR_8BIT_FIFOEN+0x276>
 8005a4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a4e:	2220      	movs	r2, #32
 8005a50:	4013      	ands	r3, r2
 8005a52:	d000      	beq.n	8005a56 <UART_RxISR_8BIT_FIFOEN+0x276>
 8005a54:	e6e7      	b.n	8005826 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a56:	205a      	movs	r0, #90	@ 0x5a
 8005a58:	183b      	adds	r3, r7, r0
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	215e      	movs	r1, #94	@ 0x5e
 8005a5e:	5a52      	ldrh	r2, [r2, r1]
 8005a60:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a62:	0001      	movs	r1, r0
 8005a64:	187b      	adds	r3, r7, r1
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d044      	beq.n	8005af6 <UART_RxISR_8BIT_FIFOEN+0x316>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2268      	movs	r2, #104	@ 0x68
 8005a70:	5a9b      	ldrh	r3, [r3, r2]
 8005a72:	187a      	adds	r2, r7, r1
 8005a74:	8812      	ldrh	r2, [r2, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d23d      	bcs.n	8005af6 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a80:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a82:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a84:	2301      	movs	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	491c      	ldr	r1, [pc, #112]	@ (8005b0c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f383 8810 	msr	PRIMASK, r3
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a18      	ldr	r2, [pc, #96]	@ (8005b10 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005ab0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab6:	617b      	str	r3, [r7, #20]
  return(result);
 8005ab8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005abc:	2301      	movs	r3, #1
 8005abe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f383 8810 	msr	PRIMASK, r3
}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2120      	movs	r1, #32
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f383 8810 	msr	PRIMASK, r3
}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae4:	e007      	b.n	8005af6 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2108      	movs	r1, #8
 8005af2:	430a      	orrs	r2, r1
 8005af4:	619a      	str	r2, [r3, #24]
}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b020      	add	sp, #128	@ 0x80
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			@ (mov r8, r8)
 8005b00:	fffffeff 	.word	0xfffffeff
 8005b04:	effffffe 	.word	0xeffffffe
 8005b08:	fbffffff 	.word	0xfbffffff
 8005b0c:	efffffff 	.word	0xefffffff
 8005b10:	08005471 	.word	0x08005471

08005b14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b0a2      	sub	sp, #136	@ 0x88
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005b1c:	2382      	movs	r3, #130	@ 0x82
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	2160      	movs	r1, #96	@ 0x60
 8005b24:	5a52      	ldrh	r2, [r2, r1]
 8005b26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	2284      	movs	r2, #132	@ 0x84
 8005b30:	18ba      	adds	r2, r7, r2
 8005b32:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	228c      	movs	r2, #140	@ 0x8c
 8005b48:	589b      	ldr	r3, [r3, r2]
 8005b4a:	2b22      	cmp	r3, #34	@ 0x22
 8005b4c:	d000      	beq.n	8005b50 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005b4e:	e170      	b.n	8005e32 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b50:	2376      	movs	r3, #118	@ 0x76
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	2168      	movs	r1, #104	@ 0x68
 8005b58:	5a52      	ldrh	r2, [r2, r1]
 8005b5a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b5c:	e115      	b.n	8005d8a <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b64:	2174      	movs	r1, #116	@ 0x74
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	2282      	movs	r2, #130	@ 0x82
 8005b74:	18ba      	adds	r2, r7, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	8812      	ldrh	r2, [r2, #0]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	225e      	movs	r2, #94	@ 0x5e
 8005b90:	5a9b      	ldrh	r3, [r3, r2]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b299      	uxth	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	225e      	movs	r2, #94	@ 0x5e
 8005b9c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	2184      	movs	r1, #132	@ 0x84
 8005ba6:	187a      	adds	r2, r7, r1
 8005ba8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2207      	movs	r2, #7
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d04e      	beq.n	8005c52 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb4:	187b      	adds	r3, r7, r1
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d010      	beq.n	8005be0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005bbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005bc0:	2380      	movs	r3, #128	@ 0x80
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2290      	movs	r2, #144	@ 0x90
 8005bd4:	589b      	ldr	r3, [r3, r2]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2190      	movs	r1, #144	@ 0x90
 8005bde:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be0:	2384      	movs	r3, #132	@ 0x84
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2202      	movs	r2, #2
 8005be8:	4013      	ands	r3, r2
 8005bea:	d00f      	beq.n	8005c0c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2290      	movs	r2, #144	@ 0x90
 8005c00:	589b      	ldr	r3, [r3, r2]
 8005c02:	2204      	movs	r2, #4
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2190      	movs	r1, #144	@ 0x90
 8005c0a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c0c:	2384      	movs	r3, #132	@ 0x84
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2204      	movs	r2, #4
 8005c14:	4013      	ands	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2204      	movs	r2, #4
 8005c26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2290      	movs	r2, #144	@ 0x90
 8005c2c:	589b      	ldr	r3, [r3, r2]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2190      	movs	r1, #144	@ 0x90
 8005c36:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2290      	movs	r2, #144	@ 0x90
 8005c3c:	589b      	ldr	r3, [r3, r2]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7fe fd7f 	bl	8004748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2290      	movs	r2, #144	@ 0x90
 8005c4e:	2100      	movs	r1, #0
 8005c50:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	225e      	movs	r2, #94	@ 0x5e
 8005c56:	5a9b      	ldrh	r3, [r3, r2]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d000      	beq.n	8005c60 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005c5e:	e094      	b.n	8005d8a <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c70:	f383 8810 	msr	PRIMASK, r3
}
 8005c74:	46c0      	nop			@ (mov r8, r8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4972      	ldr	r1, [pc, #456]	@ (8005e4c <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c88:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8c:	f383 8810 	msr	PRIMASK, r3
}
 8005c90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c92:	f3ef 8310 	mrs	r3, PRIMASK
 8005c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca2:	f383 8810 	msr	PRIMASK, r3
}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4967      	ldr	r1, [pc, #412]	@ (8005e50 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	228c      	movs	r2, #140	@ 0x8c
 8005cc8:	2120      	movs	r1, #32
 8005cca:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	2380      	movs	r3, #128	@ 0x80
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4953      	ldr	r1, [pc, #332]	@ (8005e54 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005d08:	400a      	ands	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	f383 8810 	msr	PRIMASK, r3
}
 8005d16:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d12f      	bne.n	8005d80 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d26:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d30:	2301      	movs	r3, #1
 8005d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	f383 8810 	msr	PRIMASK, r3
}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2110      	movs	r1, #16
 8005d48:	438a      	bics	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	f383 8810 	msr	PRIMASK, r3
}
 8005d56:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d103      	bne.n	8005d6e <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2210      	movs	r2, #16
 8005d6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	225c      	movs	r2, #92	@ 0x5c
 8005d72:	5a9a      	ldrh	r2, [r3, r2]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0011      	movs	r1, r2
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7fe fced 	bl	8004758 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005d7e:	e010      	b.n	8005da2 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fa fefc 	bl	8000b80 <HAL_UART_RxCpltCallback>
        break;
 8005d88:	e00b      	b.n	8005da2 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d8a:	2376      	movs	r3, #118	@ 0x76
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d006      	beq.n	8005da2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005d94:	2384      	movs	r3, #132	@ 0x84
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d000      	beq.n	8005da2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005da0:	e6dd      	b.n	8005b5e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005da2:	205e      	movs	r0, #94	@ 0x5e
 8005da4:	183b      	adds	r3, r7, r0
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	215e      	movs	r1, #94	@ 0x5e
 8005daa:	5a52      	ldrh	r2, [r2, r1]
 8005dac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dae:	0001      	movs	r1, r0
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d044      	beq.n	8005e42 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2268      	movs	r2, #104	@ 0x68
 8005dbc:	5a9b      	ldrh	r3, [r3, r2]
 8005dbe:	187a      	adds	r2, r7, r1
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d23d      	bcs.n	8005e42 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dca:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f383 8810 	msr	PRIMASK, r3
}
 8005dda:	46c0      	nop			@ (mov r8, r8)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	491c      	ldr	r1, [pc, #112]	@ (8005e58 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005de8:	400a      	ands	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005dfc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e04:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e08:	2301      	movs	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f383 8810 	msr	PRIMASK, r3
}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2120      	movs	r1, #32
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e30:	e007      	b.n	8005e42 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2108      	movs	r1, #8
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	619a      	str	r2, [r3, #24]
}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b022      	add	sp, #136	@ 0x88
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	fffffeff 	.word	0xfffffeff
 8005e50:	effffffe 	.word	0xeffffffe
 8005e54:	fbffffff 	.word	0xfbffffff
 8005e58:	efffffff 	.word	0xefffffff
 8005e5c:	08005629 	.word	0x08005629

08005e60 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e05d      	b.n	8005f34 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2288      	movs	r2, #136	@ 0x88
 8005e7c:	589b      	ldr	r3, [r3, r2]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d107      	bne.n	8005e92 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2284      	movs	r2, #132	@ 0x84
 8005e86:	2100      	movs	r1, #0
 8005e88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7fb fac5 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2288      	movs	r2, #136	@ 0x88
 8005e96:	2124      	movs	r1, #36	@ 0x24
 8005e98:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	438a      	bics	r2, r1
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7fe fdd9 	bl	8004a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7fe fc57 	bl	8004770 <UART_SetConfig>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e033      	b.n	8005f34 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2180      	movs	r1, #128	@ 0x80
 8005ed8:	01c9      	lsls	r1, r1, #7
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4a15      	ldr	r2, [pc, #84]	@ (8005f3c <HAL_RS485Ex_Init+0xdc>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	0019      	movs	r1, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	055b      	lsls	r3, r3, #21
 8005ef8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	041b      	lsls	r3, r3, #16
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f40 <HAL_RS485Ex_Init+0xe0>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	0019      	movs	r1, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2101      	movs	r1, #1
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7fe fe51 	bl	8004bd4 <UART_CheckIdleState>
 8005f32:	0003      	movs	r3, r0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b006      	add	sp, #24
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	ffff7fff 	.word	0xffff7fff
 8005f40:	fc00ffff 	.word	0xfc00ffff

08005f44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2284      	movs	r2, #132	@ 0x84
 8005f50:	5c9b      	ldrb	r3, [r3, r2]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_UARTEx_DisableFifoMode+0x16>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e027      	b.n	8005faa <HAL_UARTEx_DisableFifoMode+0x66>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2284      	movs	r2, #132	@ 0x84
 8005f5e:	2101      	movs	r1, #1
 8005f60:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2288      	movs	r2, #136	@ 0x88
 8005f66:	2124      	movs	r1, #36	@ 0x24
 8005f68:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	438a      	bics	r2, r1
 8005f80:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2288      	movs	r2, #136	@ 0x88
 8005f9c:	2120      	movs	r1, #32
 8005f9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2284      	movs	r2, #132	@ 0x84
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	dfffffff 	.word	0xdfffffff

08005fb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2284      	movs	r2, #132	@ 0x84
 8005fc6:	5c9b      	ldrb	r3, [r3, r2]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e02e      	b.n	800602e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2284      	movs	r2, #132	@ 0x84
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2288      	movs	r2, #136	@ 0x88
 8005fdc:	2124      	movs	r1, #36	@ 0x24
 8005fde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	438a      	bics	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	08d9      	lsrs	r1, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0018      	movs	r0, r3
 8006010:	f000 f8b8 	bl	8006184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2288      	movs	r2, #136	@ 0x88
 8006020:	2120      	movs	r1, #32
 8006022:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2284      	movs	r2, #132	@ 0x84
 8006028:	2100      	movs	r1, #0
 800602a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	0018      	movs	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	b004      	add	sp, #16
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2284      	movs	r2, #132	@ 0x84
 8006046:	5c9b      	ldrb	r3, [r3, r2]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e02f      	b.n	80060b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2284      	movs	r2, #132	@ 0x84
 8006054:	2101      	movs	r1, #1
 8006056:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2288      	movs	r2, #136	@ 0x88
 800605c:	2124      	movs	r1, #36	@ 0x24
 800605e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2101      	movs	r1, #1
 8006074:	438a      	bics	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	4a0e      	ldr	r2, [pc, #56]	@ (80060b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006080:	4013      	ands	r3, r2
 8006082:	0019      	movs	r1, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 f877 	bl	8006184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2288      	movs	r2, #136	@ 0x88
 80060a2:	2120      	movs	r1, #32
 80060a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2284      	movs	r2, #132	@ 0x84
 80060aa:	2100      	movs	r1, #0
 80060ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b004      	add	sp, #16
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	f1ffffff 	.word	0xf1ffffff

080060bc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	@ 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	1dbb      	adds	r3, r7, #6
 80060c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ca:	2327      	movs	r3, #39	@ 0x27
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	228c      	movs	r2, #140	@ 0x8c
 80060d6:	589b      	ldr	r3, [r3, r2]
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d14e      	bne.n	800617a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 80060e2:	1dbb      	adds	r3, r7, #6
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e046      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	2380      	movs	r3, #128	@ 0x80
 80060f4:	015b      	lsls	r3, r3, #5
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d109      	bne.n	800610e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2201      	movs	r2, #1
 8006106:	4013      	ands	r3, r2
 8006108:	d001      	beq.n	800610e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e036      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800611a:	1dbb      	adds	r3, r7, #6
 800611c:	881a      	ldrh	r2, [r3, #0]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	0018      	movs	r0, r3
 8006124:	f7fe fe70 	bl	8004e08 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d11c      	bne.n	800616a <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2210      	movs	r2, #16
 8006136:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006138:	f3ef 8310 	mrs	r3, PRIMASK
 800613c:	617b      	str	r3, [r7, #20]
  return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	2301      	movs	r3, #1
 8006144:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	f383 8810 	msr	PRIMASK, r3
}
 800614c:	46c0      	nop			@ (mov r8, r8)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2110      	movs	r1, #16
 800615a:	430a      	orrs	r2, r1
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f383 8810 	msr	PRIMASK, r3
}
 8006168:	e003      	b.n	8006172 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800616a:	2327      	movs	r3, #39	@ 0x27
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8006172:	2327      	movs	r3, #39	@ 0x27
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	e000      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b00a      	add	sp, #40	@ 0x28
 8006182:	bd80      	pop	{r7, pc}

08006184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006190:	2b00      	cmp	r3, #0
 8006192:	d108      	bne.n	80061a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	226a      	movs	r2, #106	@ 0x6a
 8006198:	2101      	movs	r1, #1
 800619a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2268      	movs	r2, #104	@ 0x68
 80061a0:	2101      	movs	r1, #1
 80061a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061a4:	e043      	b.n	800622e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061a6:	260f      	movs	r6, #15
 80061a8:	19bb      	adds	r3, r7, r6
 80061aa:	2208      	movs	r2, #8
 80061ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061ae:	200e      	movs	r0, #14
 80061b0:	183b      	adds	r3, r7, r0
 80061b2:	2208      	movs	r2, #8
 80061b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	0e5b      	lsrs	r3, r3, #25
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	240d      	movs	r4, #13
 80061c2:	193b      	adds	r3, r7, r4
 80061c4:	2107      	movs	r1, #7
 80061c6:	400a      	ands	r2, r1
 80061c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	0f5b      	lsrs	r3, r3, #29
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	250c      	movs	r5, #12
 80061d6:	197b      	adds	r3, r7, r5
 80061d8:	2107      	movs	r1, #7
 80061da:	400a      	ands	r2, r1
 80061dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061de:	183b      	adds	r3, r7, r0
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	197a      	adds	r2, r7, r5
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	4914      	ldr	r1, [pc, #80]	@ (8006238 <UARTEx_SetNbDataToProcess+0xb4>)
 80061e8:	5c8a      	ldrb	r2, [r1, r2]
 80061ea:	435a      	muls	r2, r3
 80061ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ee:	197b      	adds	r3, r7, r5
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	4a12      	ldr	r2, [pc, #72]	@ (800623c <UARTEx_SetNbDataToProcess+0xb8>)
 80061f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061f6:	0019      	movs	r1, r3
 80061f8:	f7fa f810 	bl	800021c <__divsi3>
 80061fc:	0003      	movs	r3, r0
 80061fe:	b299      	uxth	r1, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	226a      	movs	r2, #106	@ 0x6a
 8006204:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006206:	19bb      	adds	r3, r7, r6
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	193a      	adds	r2, r7, r4
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	490a      	ldr	r1, [pc, #40]	@ (8006238 <UARTEx_SetNbDataToProcess+0xb4>)
 8006210:	5c8a      	ldrb	r2, [r1, r2]
 8006212:	435a      	muls	r2, r3
 8006214:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006216:	193b      	adds	r3, r7, r4
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	4a08      	ldr	r2, [pc, #32]	@ (800623c <UARTEx_SetNbDataToProcess+0xb8>)
 800621c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800621e:	0019      	movs	r1, r3
 8006220:	f7f9 fffc 	bl	800021c <__divsi3>
 8006224:	0003      	movs	r3, r0
 8006226:	b299      	uxth	r1, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2268      	movs	r2, #104	@ 0x68
 800622c:	5299      	strh	r1, [r3, r2]
}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	46bd      	mov	sp, r7
 8006232:	b005      	add	sp, #20
 8006234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	0800657c 	.word	0x0800657c
 800623c:	08006584 	.word	0x08006584

08006240 <memset>:
 8006240:	0003      	movs	r3, r0
 8006242:	1882      	adds	r2, r0, r2
 8006244:	4293      	cmp	r3, r2
 8006246:	d100      	bne.n	800624a <memset+0xa>
 8006248:	4770      	bx	lr
 800624a:	7019      	strb	r1, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	e7f9      	b.n	8006244 <memset+0x4>

08006250 <__libc_init_array>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	2600      	movs	r6, #0
 8006254:	4c0c      	ldr	r4, [pc, #48]	@ (8006288 <__libc_init_array+0x38>)
 8006256:	4d0d      	ldr	r5, [pc, #52]	@ (800628c <__libc_init_array+0x3c>)
 8006258:	1b64      	subs	r4, r4, r5
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	42a6      	cmp	r6, r4
 800625e:	d109      	bne.n	8006274 <__libc_init_array+0x24>
 8006260:	2600      	movs	r6, #0
 8006262:	f000 f819 	bl	8006298 <_init>
 8006266:	4c0a      	ldr	r4, [pc, #40]	@ (8006290 <__libc_init_array+0x40>)
 8006268:	4d0a      	ldr	r5, [pc, #40]	@ (8006294 <__libc_init_array+0x44>)
 800626a:	1b64      	subs	r4, r4, r5
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	42a6      	cmp	r6, r4
 8006270:	d105      	bne.n	800627e <__libc_init_array+0x2e>
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	00b3      	lsls	r3, r6, #2
 8006276:	58eb      	ldr	r3, [r5, r3]
 8006278:	4798      	blx	r3
 800627a:	3601      	adds	r6, #1
 800627c:	e7ee      	b.n	800625c <__libc_init_array+0xc>
 800627e:	00b3      	lsls	r3, r6, #2
 8006280:	58eb      	ldr	r3, [r5, r3]
 8006282:	4798      	blx	r3
 8006284:	3601      	adds	r6, #1
 8006286:	e7f2      	b.n	800626e <__libc_init_array+0x1e>
 8006288:	0800658c 	.word	0x0800658c
 800628c:	0800658c 	.word	0x0800658c
 8006290:	08006590 	.word	0x08006590
 8006294:	0800658c 	.word	0x0800658c

08006298 <_init>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr

080062a4 <_fini>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr
