
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  080079a0  080079a0  000089a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca4  08007ca4  00009070  2**0
                  CONTENTS
  4 .ARM          00000000  08007ca4  08007ca4  00009070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ca4  08007ca4  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ca4  08007ca4  00008ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ca8  08007ca8  00008ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007cac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000070  08007d1c  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08007d1c  000097a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019565  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320f  00000000  00000000  000225fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00025810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122f  00000000  00000000  00026f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001892e  00000000  00000000  0002813f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7de  00000000  00000000  00040a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c91a  00000000  00000000  0005c24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8b65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005594  00000000  00000000  000f8ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000fe13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007988 	.word	0x08007988

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08007988 	.word	0x08007988

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_ErrorCallback>:
{
	i2c_rx_int = 1;
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	// Do something
}
 80003fc:	46c0      	nop			@ (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}

08000404 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	4a05      	ldr	r2, [pc, #20]	@ (8000428 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000414:	401a      	ands	r2, r3
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	431a      	orrs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	60da      	str	r2, [r3, #12]
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffdfffff 	.word	0xffdfffff

0800042c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	2204      	movs	r2, #4
 800043c:	4393      	bics	r3, r2
 800043e:	001a      	movs	r2, r3
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	60da      	str	r2, [r3, #12]
}
 8000448:	46c0      	nop			@ (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_ADC_REG_SetSequencerChannels>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	025b      	lsls	r3, r3, #9
 800045e:	0a5a      	lsrs	r2, r3, #9
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000464:	46c0      	nop			@ (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	019b      	lsls	r3, r3, #6
 800047c:	401a      	ands	r2, r3
 800047e:	2380      	movs	r3, #128	@ 0x80
 8000480:	019b      	lsls	r3, r3, #6
 8000482:	429a      	cmp	r2, r3
 8000484:	d101      	bne.n	800048a <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <LL_ADC_IsActiveFlag_CCRDY+0x20>
 800048a:	2300      	movs	r3, #0
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}

08000494 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	low_half_safe = 0;
 800049c:	4b03      	ldr	r3, [pc, #12]	@ (80004ac <HAL_ADC_ConvCpltCallback+0x18>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]

//	for(uint8_t i = 0; i < 9; i++)
//	{
//		holding_register_database[i + 3] = (uint16_t)raw_data[i];
//	}
}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	20000490 	.word	0x20000490

080004b0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	low_half_safe = 1;
 80004b8:	4b03      	ldr	r3, [pc, #12]	@ (80004c8 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	20000490 	.word	0x20000490

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f001 fd36 	bl	8001f42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f8d5 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fbe7 	bl	8000cac <MX_GPIO_Init>
  MX_DMA_Init();
 80004de:	f000 fbb7 	bl	8000c50 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e2:	f000 f90d 	bl	8000700 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004e6:	f000 fa15 	bl	8000914 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004ea:	f000 fa53 	bl	8000994 <MX_SPI1_Init>
  MX_TIM1_Init();
 80004ee:	f000 fa8f 	bl	8000a10 <MX_TIM1_Init>
  MX_TIM14_Init();
 80004f2:	f000 fb37 	bl	8000b64 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80004f6:	f000 fb5b 	bl	8000bb0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80004fa:	4b55      	ldr	r3, [pc, #340]	@ (8000650 <main+0x184>)
 80004fc:	2240      	movs	r2, #64	@ 0x40
 80004fe:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 8000500:	4b53      	ldr	r3, [pc, #332]	@ (8000650 <main+0x184>)
 8000502:	2280      	movs	r2, #128	@ 0x80
 8000504:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 8000506:	4b52      	ldr	r3, [pc, #328]	@ (8000650 <main+0x184>)
 8000508:	2201      	movs	r2, #1
 800050a:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 800050c:	4b51      	ldr	r3, [pc, #324]	@ (8000654 <main+0x188>)
 800050e:	4a52      	ldr	r2, [pc, #328]	@ (8000658 <main+0x18c>)
 8000510:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 8000512:	4b50      	ldr	r3, [pc, #320]	@ (8000654 <main+0x188>)
 8000514:	4a50      	ldr	r2, [pc, #320]	@ (8000658 <main+0x18c>)
 8000516:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 8000518:	4b4e      	ldr	r3, [pc, #312]	@ (8000654 <main+0x188>)
 800051a:	4a50      	ldr	r2, [pc, #320]	@ (800065c <main+0x190>)
 800051c:	609a      	str	r2, [r3, #8]


  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 800051e:	4b50      	ldr	r3, [pc, #320]	@ (8000660 <main+0x194>)
 8000520:	22fe      	movs	r2, #254	@ 0xfe
 8000522:	0592      	lsls	r2, r2, #22
 8000524:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8000526:	4b4e      	ldr	r3, [pc, #312]	@ (8000660 <main+0x194>)
 8000528:	4a4e      	ldr	r2, [pc, #312]	@ (8000664 <main+0x198>)
 800052a:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 800052c:	4b4c      	ldr	r3, [pc, #304]	@ (8000660 <main+0x194>)
 800052e:	4a4e      	ldr	r2, [pc, #312]	@ (8000668 <main+0x19c>)
 8000530:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 8000532:	4b4b      	ldr	r3, [pc, #300]	@ (8000660 <main+0x194>)
 8000534:	4a4b      	ldr	r2, [pc, #300]	@ (8000664 <main+0x198>)
 8000536:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8000538:	4b49      	ldr	r3, [pc, #292]	@ (8000660 <main+0x194>)
 800053a:	22fe      	movs	r2, #254	@ 0xfe
 800053c:	0592      	lsls	r2, r2, #22
 800053e:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 8000540:	4b47      	ldr	r3, [pc, #284]	@ (8000660 <main+0x194>)
 8000542:	4a4a      	ldr	r2, [pc, #296]	@ (800066c <main+0x1a0>)
 8000544:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8000546:	4b46      	ldr	r3, [pc, #280]	@ (8000660 <main+0x194>)
 8000548:	4a48      	ldr	r2, [pc, #288]	@ (800066c <main+0x1a0>)
 800054a:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 800054c:	4b44      	ldr	r3, [pc, #272]	@ (8000660 <main+0x194>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 8000552:	4b43      	ldr	r3, [pc, #268]	@ (8000660 <main+0x194>)
 8000554:	4a46      	ldr	r2, [pc, #280]	@ (8000670 <main+0x1a4>)
 8000556:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8000558:	4b41      	ldr	r3, [pc, #260]	@ (8000660 <main+0x194>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 800055e:	4b40      	ldr	r3, [pc, #256]	@ (8000660 <main+0x194>)
 8000560:	2200      	movs	r2, #0
 8000562:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 8000564:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <main+0x194>)
 8000566:	2200      	movs	r2, #0
 8000568:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 800056a:	4b3d      	ldr	r3, [pc, #244]	@ (8000660 <main+0x194>)
 800056c:	2200      	movs	r2, #0
 800056e:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 8000570:	4b3b      	ldr	r3, [pc, #236]	@ (8000660 <main+0x194>)
 8000572:	2200      	movs	r2, #0
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8000576:	f001 f81d 	bl	80015b4 <modbus_set_rx>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <main+0xb6>
  {
	  Error_Handler();
 800057e:	f000 fc4d 	bl	8000e1c <Error_Handler>
  }

  low_half_safe = 0;
 8000582:	4b3c      	ldr	r3, [pc, #240]	@ (8000674 <main+0x1a8>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[3]), 9) != HAL_OK)
 8000588:	493b      	ldr	r1, [pc, #236]	@ (8000678 <main+0x1ac>)
 800058a:	4b3c      	ldr	r3, [pc, #240]	@ (800067c <main+0x1b0>)
 800058c:	2209      	movs	r2, #9
 800058e:	0018      	movs	r0, r3
 8000590:	f002 f866 	bl	8002660 <HAL_ADC_Start_DMA>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <main+0xd0>
  {
	  Error_Handler();
 8000598:	f000 fc40 	bl	8000e1c <Error_Handler>
  //bno055_queue_transaction();

  while (1)
  {

	  if(modbus_rx())
 800059c:	f000 fff4 	bl	8001588 <modbus_rx>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d0fb      	beq.n	800059c <main+0xd0>
	  {
		  int8_t status = 0;
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fd28 	bl	8001000 <get_rx_buffer>
 80005b0:	0003      	movs	r3, r0
 80005b2:	001a      	movs	r2, r3
 80005b4:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <main+0x1b4>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d11b      	bne.n	80005f4 <main+0x128>
		  {
			  switch(get_rx_buffer(1))
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fd1f 	bl	8001000 <get_rx_buffer>
 80005c2:	0003      	movs	r3, r0
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d002      	beq.n	80005ce <main+0x102>
 80005c8:	2b10      	cmp	r3, #16
 80005ca:	d006      	beq.n	80005da <main+0x10e>
 80005cc:	e00b      	b.n	80005e6 <main+0x11a>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80005ce:	1dfc      	adds	r4, r7, #7
 80005d0:	f000 fd48 	bl	8001064 <return_holding_registers>
 80005d4:	0003      	movs	r3, r0
 80005d6:	7023      	strb	r3, [r4, #0]
					  break;
 80005d8:	e034      	b.n	8000644 <main+0x178>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80005da:	1dfc      	adds	r4, r7, #7
 80005dc:	f000 fdde 	bl	800119c <edit_multiple_registers>
 80005e0:	0003      	movs	r3, r0
 80005e2:	7023      	strb	r3, [r4, #0]
					  break;
 80005e4:	e02e      	b.n	8000644 <main+0x178>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80005e6:	1dfc      	adds	r4, r7, #7
 80005e8:	2004      	movs	r0, #4
 80005ea:	f000 fecd 	bl	8001388 <modbus_exception>
 80005ee:	0003      	movs	r3, r0
 80005f0:	7023      	strb	r3, [r4, #0]
					  break;
 80005f2:	e027      	b.n	8000644 <main+0x178>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fd03 	bl	8001000 <get_rx_buffer>
 80005fa:	0003      	movs	r3, r0
 80005fc:	2bff      	cmp	r3, #255	@ 0xff
 80005fe:	d121      	bne.n	8000644 <main+0x178>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fcfd 	bl	8001000 <get_rx_buffer>
 8000606:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000608:	2b03      	cmp	r3, #3
 800060a:	d11b      	bne.n	8000644 <main+0x178>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800060c:	2002      	movs	r0, #2
 800060e:	f000 fcf7 	bl	8001000 <get_rx_buffer>
 8000612:	0003      	movs	r3, r0
 8000614:	021c      	lsls	r4, r3, #8
 8000616:	2003      	movs	r0, #3
 8000618:	f000 fcf2 	bl	8001000 <get_rx_buffer>
 800061c:	0003      	movs	r3, r0
 800061e:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000620:	d110      	bne.n	8000644 <main+0x178>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8000622:	2004      	movs	r0, #4
 8000624:	f000 fcec 	bl	8001000 <get_rx_buffer>
 8000628:	0003      	movs	r3, r0
 800062a:	021c      	lsls	r4, r3, #8
 800062c:	2005      	movs	r0, #5
 800062e:	f000 fce7 	bl	8001000 <get_rx_buffer>
 8000632:	0003      	movs	r3, r0
 8000634:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d104      	bne.n	8000644 <main+0x178>
		  {

			  status = return_holding_registers();
 800063a:	1dfc      	adds	r4, r7, #7
 800063c:	f000 fd12 	bl	8001064 <return_holding_registers>
 8000640:	0003      	movs	r3, r0
 8000642:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 8000644:	1dfc      	adds	r4, r7, #7
 8000646:	f000 ffb5 	bl	80015b4 <modbus_set_rx>
 800064a:	0003      	movs	r3, r0
 800064c:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 800064e:	e7a5      	b.n	800059c <main+0xd0>
 8000650:	2000047c 	.word	0x2000047c
 8000654:	20000484 	.word	0x20000484
 8000658:	50000800 	.word	0x50000800
 800065c:	50000400 	.word	0x50000400
 8000660:	20000444 	.word	0x20000444
 8000664:	3dcccccd 	.word	0x3dcccccd
 8000668:	40a00000 	.word	0x40a00000
 800066c:	42c80000 	.word	0x42c80000
 8000670:	42200000 	.word	0x42200000
 8000674:	20000490 	.word	0x20000490
 8000678:	20000006 	.word	0x20000006
 800067c:	2000008c 	.word	0x2000008c
 8000680:	20000000 	.word	0x20000000

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08f      	sub	sp, #60	@ 0x3c
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	2418      	movs	r4, #24
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0018      	movs	r0, r3
 8000690:	2320      	movs	r3, #32
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f007 f941 	bl	800791c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	0018      	movs	r0, r3
 800069e:	2314      	movs	r3, #20
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f007 f93a 	bl	800791c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	0252      	lsls	r2, r2, #9
 80006b4:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	0018      	movs	r0, r3
 80006ba:	f004 f897 	bl	80047ec <HAL_RCC_OscConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006c2:	f000 fbab 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2201      	movs	r2, #1
 80006d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f004 faa5 	bl	8004c38 <HAL_RCC_ClockConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006f2:	f000 fb93 	bl	8000e1c <Error_Handler>
  }
}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b00f      	add	sp, #60	@ 0x3c
 80006fc:	bd90      	pop	{r4, r7, pc}
	...

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	003b      	movs	r3, r7
 8000708:	0018      	movs	r0, r3
 800070a:	230c      	movs	r3, #12
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f007 f904 	bl	800791c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000714:	4b74      	ldr	r3, [pc, #464]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000716:	4a75      	ldr	r2, [pc, #468]	@ (80008ec <MX_ADC1_Init+0x1ec>)
 8000718:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800071a:	4b73      	ldr	r3, [pc, #460]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800071c:	22c0      	movs	r2, #192	@ 0xc0
 800071e:	0612      	lsls	r2, r2, #24
 8000720:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000722:	4b71      	ldr	r3, [pc, #452]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000728:	4b6f      	ldr	r3, [pc, #444]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800072e:	4b6e      	ldr	r3, [pc, #440]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000730:	2280      	movs	r2, #128	@ 0x80
 8000732:	0612      	lsls	r2, r2, #24
 8000734:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000736:	4b6c      	ldr	r3, [pc, #432]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000738:	2208      	movs	r2, #8
 800073a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800073c:	4b6a      	ldr	r3, [pc, #424]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000742:	4b69      	ldr	r3, [pc, #420]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000744:	2200      	movs	r2, #0
 8000746:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000748:	4b67      	ldr	r3, [pc, #412]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800074a:	2201      	movs	r2, #1
 800074c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800074e:	4b66      	ldr	r3, [pc, #408]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000754:	4b64      	ldr	r3, [pc, #400]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000756:	2220      	movs	r2, #32
 8000758:	2100      	movs	r1, #0
 800075a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b62      	ldr	r3, [pc, #392]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000762:	4b61      	ldr	r3, [pc, #388]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000768:	4b5f      	ldr	r3, [pc, #380]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800076a:	222c      	movs	r2, #44	@ 0x2c
 800076c:	2101      	movs	r1, #1
 800076e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000770:	4b5d      	ldr	r3, [pc, #372]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000772:	2200      	movs	r2, #0
 8000774:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000776:	4b5c      	ldr	r3, [pc, #368]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077c:	4b5a      	ldr	r3, [pc, #360]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800077e:	223c      	movs	r2, #60	@ 0x3c
 8000780:	2100      	movs	r1, #0
 8000782:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000784:	4b58      	ldr	r3, [pc, #352]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000786:	2200      	movs	r2, #0
 8000788:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078a:	4b57      	ldr	r3, [pc, #348]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fdc1 	bl	8002314 <HAL_ADC_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000796:	f000 fb41 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800079a:	003b      	movs	r3, r7
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2201      	movs	r2, #1
 80007a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	003a      	movs	r2, r7
 80007a8:	4b4f      	ldr	r3, [pc, #316]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 ffed 	bl	800278c <HAL_ADC_ConfigChannel>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80007b6:	f000 fb31 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ba:	003b      	movs	r3, r7
 80007bc:	4a4c      	ldr	r2, [pc, #304]	@ (80008f0 <MX_ADC1_Init+0x1f0>)
 80007be:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	003a      	movs	r2, r7
 80007c2:	4b49      	ldr	r3, [pc, #292]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 ffe0 	bl	800278c <HAL_ADC_ConfigChannel>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80007d0:	f000 fb24 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007d4:	003b      	movs	r3, r7
 80007d6:	4a47      	ldr	r2, [pc, #284]	@ (80008f4 <MX_ADC1_Init+0x1f4>)
 80007d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	003a      	movs	r2, r7
 80007dc:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 ffd3 	bl	800278c <HAL_ADC_ConfigChannel>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80007ea:	f000 fb17 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ee:	003b      	movs	r3, r7
 80007f0:	4a41      	ldr	r2, [pc, #260]	@ (80008f8 <MX_ADC1_Init+0x1f8>)
 80007f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	003a      	movs	r2, r7
 80007f6:	4b3c      	ldr	r3, [pc, #240]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 ffc6 	bl	800278c <HAL_ADC_ConfigChannel>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000804:	f000 fb0a 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000808:	003b      	movs	r3, r7
 800080a:	4a3c      	ldr	r2, [pc, #240]	@ (80008fc <MX_ADC1_Init+0x1fc>)
 800080c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	003a      	movs	r2, r7
 8000810:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f001 ffb9 	bl	800278c <HAL_ADC_ConfigChannel>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800081e:	f000 fafd 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000822:	003b      	movs	r3, r7
 8000824:	4a36      	ldr	r2, [pc, #216]	@ (8000900 <MX_ADC1_Init+0x200>)
 8000826:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	003a      	movs	r2, r7
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f001 ffac 	bl	800278c <HAL_ADC_ConfigChannel>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000838:	f000 faf0 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800083c:	003b      	movs	r3, r7
 800083e:	4a31      	ldr	r2, [pc, #196]	@ (8000904 <MX_ADC1_Init+0x204>)
 8000840:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	003a      	movs	r2, r7
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f001 ff9f 	bl	800278c <HAL_ADC_ConfigChannel>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000852:	f000 fae3 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000856:	003b      	movs	r3, r7
 8000858:	4a2b      	ldr	r2, [pc, #172]	@ (8000908 <MX_ADC1_Init+0x208>)
 800085a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	003a      	movs	r2, r7
 800085e:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f001 ff92 	bl	800278c <HAL_ADC_ConfigChannel>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800086c:	f000 fad6 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000870:	003b      	movs	r3, r7
 8000872:	4a26      	ldr	r2, [pc, #152]	@ (800090c <MX_ADC1_Init+0x20c>)
 8000874:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	003a      	movs	r2, r7
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ADC1_Init+0x1e8>)
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f001 ff85 	bl	800278c <HAL_ADC_ConfigChannel>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000886:	f000 fac9 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_ADC1_Init+0x1ec>)
 800088c:	2100      	movs	r1, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fdb8 	bl	8000404 <LL_ADC_REG_SetSequencerConfigurable>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_ADC1_Init+0x1ec>)
 8000896:	2100      	movs	r1, #0
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fdc7 	bl	800042c <LL_ADC_REG_SetSequencerScanDirection>

  LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_0 | LL_ADC_CHANNEL_1 |
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_ADC1_Init+0x210>)
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_ADC1_Init+0x1ec>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff fdd3 	bl	8000450 <LL_ADC_REG_SetSequencerChannels>
		  	  	  	  	  	  	  	  	LL_ADC_CHANNEL_2 | LL_ADC_CHANNEL_3 |
										LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_5 |
										LL_ADC_CHANNEL_6 | LL_ADC_CHANNEL_7 |
										LL_ADC_CHANNEL_8);
  uint32_t setup_adc_time = HAL_GetTick();
 80008aa:	f001 fbbd 	bl	8002028 <HAL_GetTick>
 80008ae:	0003      	movs	r3, r0
 80008b0:	60fb      	str	r3, [r7, #12]

  while(LL_ADC_IsActiveFlag_CCRDY(ADC1) && HAL_GetTick() - setup_adc_time <= 100);
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_ADC1_Init+0x1ec>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff fdd8 	bl	800046c <LL_ADC_IsActiveFlag_CCRDY>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d006      	beq.n	80008ce <MX_ADC1_Init+0x1ce>
 80008c0:	f001 fbb2 	bl	8002028 <HAL_GetTick>
 80008c4:	0002      	movs	r2, r0
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b64      	cmp	r3, #100	@ 0x64
 80008cc:	d9f2      	bls.n	80008b4 <MX_ADC1_Init+0x1b4>
  if(!LL_ADC_IsActiveFlag_CCRDY(ADC1))
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_ADC1_Init+0x1ec>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff fdcb 	bl	800046c <LL_ADC_IsActiveFlag_CCRDY>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d101      	bne.n	80008de <MX_ADC1_Init+0x1de>
  {
	  Error_Handler();
 80008da:	f000 fa9f 	bl	8000e1c <Error_Handler>
  }
//  LL_ADC_SetCommonPathInternalCh(ADC1_COMMON, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
  /* USER CODE END ADC1_Init 2 */

}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b004      	add	sp, #16
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	2000008c 	.word	0x2000008c
 80008ec:	40012400 	.word	0x40012400
 80008f0:	04000002 	.word	0x04000002
 80008f4:	08000004 	.word	0x08000004
 80008f8:	0c000008 	.word	0x0c000008
 80008fc:	10000010 	.word	0x10000010
 8000900:	14000020 	.word	0x14000020
 8000904:	18000040 	.word	0x18000040
 8000908:	1c000080 	.word	0x1c000080
 800090c:	20000100 	.word	0x20000100
 8000910:	3c0001ff 	.word	0x3c0001ff

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <MX_I2C1_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2C;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <MX_I2C1_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_I2C1_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000950:	0018      	movs	r0, r3
 8000952:	f002 ffb1 	bl	80038b8 <HAL_I2C_Init>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095a:	f000 fa5f 	bl	8000e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000960:	2100      	movs	r1, #0
 8000962:	0018      	movs	r0, r3
 8000964:	f003 feaa 	bl	80046bc <HAL_I2CEx_ConfigAnalogFilter>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 fa56 	bl	8000e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000972:	2100      	movs	r1, #0
 8000974:	0018      	movs	r0, r3
 8000976:	f003 feed 	bl	8004754 <HAL_I2CEx_ConfigDigitalFilter>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 fa4d 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000014c 	.word	0x2000014c
 800098c:	40005400 	.word	0x40005400
 8000990:	00201d2c 	.word	0x00201d2c

08000994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_SPI1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <MX_SPI1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009a0:	2282      	movs	r2, #130	@ 0x82
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009ae:	22e0      	movs	r2, #224	@ 0xe0
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f2:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <MX_SPI1_Init+0x74>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 fbc1 	bl	800517c <HAL_SPI_Init>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 fa0d 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001fc 	.word	0x200001fc
 8000a0c:	40013000 	.word	0x40013000

08000a10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b098      	sub	sp, #96	@ 0x60
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	2354      	movs	r3, #84	@ 0x54
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f006 ff7b 	bl	800791c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a26:	2338      	movs	r3, #56	@ 0x38
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	231c      	movs	r3, #28
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f006 ff73 	bl	800791c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2334      	movs	r3, #52	@ 0x34
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f006 ff6c 	bl	800791c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a44:	4b45      	ldr	r3, [pc, #276]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a46:	4a46      	ldr	r2, [pc, #280]	@ (8000b60 <MX_TIM1_Init+0x150>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000a4a:	4b44      	ldr	r3, [pc, #272]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a4c:	2209      	movs	r2, #9
 8000a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b42      	ldr	r3, [pc, #264]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a56:	4b41      	ldr	r3, [pc, #260]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a58:	2263      	movs	r2, #99	@ 0x63
 8000a5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a62:	4b3e      	ldr	r3, [pc, #248]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b3c      	ldr	r3, [pc, #240]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f004 fc93 	bl	800539c <HAL_TIM_PWM_Init>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f9cf 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2154      	movs	r1, #84	@ 0x54
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a92:	187a      	adds	r2, r7, r1
 8000a94:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f005 f8f7 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000aa2:	f000 f9bb 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	2138      	movs	r1, #56	@ 0x38
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2260      	movs	r2, #96	@ 0x60
 8000aac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad2:	1879      	adds	r1, r7, r1
 8000ad4:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f004 fcb7 	bl	800544c <HAL_TIM_PWM_ConfigChannel>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000ae2:	f000 f99b 	bl	8000e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2280      	movs	r2, #128	@ 0x80
 8000b08:	0192      	lsls	r2, r2, #6
 8000b0a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	0492      	lsls	r2, r2, #18
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b38:	1d3a      	adds	r2, r7, #4
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f005 f90c 	bl	8005d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000b48:	f000 f968 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b4c:	4b03      	ldr	r3, [pc, #12]	@ (8000b5c <MX_TIM1_Init+0x14c>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 f80c 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b018      	add	sp, #96	@ 0x60
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000260 	.word	0x20000260
 8000b60:	40012c00 	.word	0x40012c00

08000b64 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_TIM14_Init+0x40>)
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <MX_TIM14_Init+0x44>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <MX_TIM14_Init+0x40>)
 8000b70:	220b      	movs	r2, #11
 8000b72:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_TIM14_Init+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_TIM14_Init+0x40>)
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bac <MX_TIM14_Init+0x48>)
 8000b7e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_TIM14_Init+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_TIM14_Init+0x40>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <MX_TIM14_Init+0x40>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f004 fbac 	bl	80052ec <HAL_TIM_Base_Init>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b98:	f000 f940 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	200002ac 	.word	0x200002ac
 8000ba8:	40002000 	.word	0x40002000
 8000bac:	0000ffff 	.word	0x0000ffff

08000bb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bb6:	4a25      	ldr	r2, [pc, #148]	@ (8000c4c <MX_USART1_UART_Init+0x9c>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bba:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bbc:	2296      	movs	r2, #150	@ 0x96
 8000bbe:	0192      	lsls	r2, r2, #6
 8000bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000bf8:	4813      	ldr	r0, [pc, #76]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f006 fc80 	bl	8007504 <HAL_RS485Ex_Init>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000c08:	f000 f908 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f006 fd3b 	bl	800768c <HAL_UARTEx_SetTxFifoThreshold>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f8ff 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f006 fd72 	bl	800770c <HAL_UARTEx_SetRxFifoThreshold>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000c2c:	f000 f8f6 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <MX_USART1_UART_Init+0x98>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f006 fcf0 	bl	8007618 <HAL_UARTEx_DisableFifoMode>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f000 f8ee 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	200002f8 	.word	0x200002f8
 8000c4c:	40013800 	.word	0x40013800

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_DMA_Init+0x58>)
 8000c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <MX_DMA_Init+0x58>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_DMA_Init+0x58>)
 8000c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c66:	2201      	movs	r2, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2009      	movs	r0, #9
 8000c74:	f002 f918 	bl	8002ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c78:	2009      	movs	r0, #9
 8000c7a:	f002 f92a 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	200a      	movs	r0, #10
 8000c84:	f002 f910 	bl	8002ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f002 f922 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	200b      	movs	r0, #11
 8000c94:	f002 f908 	bl	8002ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8000c98:	200b      	movs	r0, #11
 8000c9a:	f002 f91a 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	40021000 	.word	0x40021000

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b08b      	sub	sp, #44	@ 0x2c
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	2414      	movs	r4, #20
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2314      	movs	r3, #20
 8000cba:	001a      	movs	r2, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f006 fe2d 	bl	800791c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b50      	ldr	r3, [pc, #320]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000cc8:	2104      	movs	r1, #4
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cce:	4b4d      	ldr	r3, [pc, #308]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cda:	4b4a      	ldr	r3, [pc, #296]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cde:	4b49      	ldr	r3, [pc, #292]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ce6:	4b47      	ldr	r3, [pc, #284]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cea:	2220      	movs	r2, #32
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b44      	ldr	r3, [pc, #272]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cf6:	4b43      	ldr	r3, [pc, #268]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cfe:	4b41      	ldr	r3, [pc, #260]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d10:	2102      	movs	r1, #2
 8000d12:	430a      	orrs	r2, r1
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d16:	4b3b      	ldr	r3, [pc, #236]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	4b38      	ldr	r3, [pc, #224]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d26:	4b37      	ldr	r3, [pc, #220]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d28:	2108      	movs	r1, #8
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d2e:	4b35      	ldr	r3, [pc, #212]	@ (8000e04 <MX_GPIO_Init+0x158>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d32:	2208      	movs	r2, #8
 8000d34:	4013      	ands	r3, r2
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 8000d3a:	4b33      	ldr	r3, [pc, #204]	@ (8000e08 <MX_GPIO_Init+0x15c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	21c0      	movs	r1, #192	@ 0xc0
 8000d40:	0018      	movs	r0, r3
 8000d42:	f002 fd9b 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8000d46:	4b31      	ldr	r3, [pc, #196]	@ (8000e0c <MX_GPIO_Init+0x160>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f002 fd95 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator_C_EN_Pin Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Encoder_Pulse_B_Pin;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	4a2e      	ldr	r2, [pc, #184]	@ (8000e10 <MX_GPIO_Init+0x164>)
 8000d56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	4a2b      	ldr	r2, [pc, #172]	@ (8000e14 <MX_GPIO_Init+0x168>)
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	f002 fc14 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 8000d70:	0021      	movs	r1, r4
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2280      	movs	r2, #128	@ 0x80
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7a:	000c      	movs	r4, r1
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <MX_GPIO_Init+0x16c>)
 8000d80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	4a22      	ldr	r2, [pc, #136]	@ (8000e14 <MX_GPIO_Init+0x168>)
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	0010      	movs	r0, r2
 8000d90:	f002 fc02 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	22c0      	movs	r2, #192	@ 0xc0
 8000d98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <MX_GPIO_Init+0x15c>)
 8000db0:	0019      	movs	r1, r3
 8000db2:	0010      	movs	r0, r2
 8000db4:	f002 fbf0 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	2203      	movs	r2, #3
 8000dce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e0c <MX_GPIO_Init+0x160>)
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0010      	movs	r0, r2
 8000dd8:	f002 fbde 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 8000ddc:	0021      	movs	r1, r4
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2202      	movs	r2, #2
 8000de2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	4a06      	ldr	r2, [pc, #24]	@ (8000e0c <MX_GPIO_Init+0x160>)
 8000df4:	0019      	movs	r1, r3
 8000df6:	0010      	movs	r0, r2
 8000df8:	f002 fbce 	bl	8003598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b00b      	add	sp, #44	@ 0x2c
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	50000800 	.word	0x50000800
 8000e0c:	50000c00 	.word	0x50000c00
 8000e10:	00004001 	.word	0x00004001
 8000e14:	50000400 	.word	0x50000400
 8000e18:	10110000 	.word	0x10110000

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	000a      	movs	r2, r1
 8000e32:	1cbb      	adds	r3, r7, #2
 8000e34:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a45      	ldr	r2, [pc, #276]	@ (8000f50 <HAL_UARTEx_RxEventCallback+0x128>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d000      	beq.n	8000e42 <HAL_UARTEx_RxEventCallback+0x1a>
 8000e40:	e081      	b.n	8000f46 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8000e42:	4b44      	ldr	r3, [pc, #272]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b43      	ldr	r3, [pc, #268]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e4a:	801a      	strh	r2, [r3, #0]
		/*
		 * If the data is large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8000e4c:	4b42      	ldr	r3, [pc, #264]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	001a      	movs	r2, r3
 8000e54:	1cbb      	adds	r3, r7, #2
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	18d2      	adds	r2, r2, r3
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dd29      	ble.n	8000eb6 <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8000e62:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	240e      	movs	r4, #14
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2180      	movs	r1, #128	@ 0x80
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000e74:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <HAL_UARTEx_RxEventCallback+0x134>)
 8000e7e:	18d0      	adds	r0, r2, r3
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x138>)
 8000e86:	0019      	movs	r1, r3
 8000e88:	f006 fd74 	bl	8007974 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000e8c:	1cba      	adds	r2, r7, #2
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	8812      	ldrh	r2, [r2, #0]
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000e9a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	881a      	ldrh	r2, [r3, #0]
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x138>)
 8000ea2:	18d1      	adds	r1, r2, r3
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	001a      	movs	r2, r3
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <HAL_UARTEx_RxEventCallback+0x134>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f006 fd60 	bl	8007974 <memcpy>
 8000eb4:	e014      	b.n	8000ee0 <HAL_UARTEx_RxEventCallback+0xb8>
		 * If the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8000eb6:	4b28      	ldr	r3, [pc, #160]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x130>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <HAL_UARTEx_RxEventCallback+0x134>)
 8000ec0:	18d0      	adds	r0, r2, r3
 8000ec2:	1cbb      	adds	r3, r7, #2
 8000ec4:	881a      	ldrh	r2, [r3, #0]
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x138>)
 8000ec8:	0019      	movs	r1, r3
 8000eca:	f006 fd53 	bl	8007974 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000ece:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x130>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	1cbb      	adds	r3, r7, #2
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000ede:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d027      	beq.n	8000f3a <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8000eea:	f001 f89d 	bl	8002028 <HAL_GetTick>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <HAL_UARTEx_RxEventCallback+0x140>)
 8000ef2:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x130>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_UARTEx_RxEventCallback+0x144>)
 8000efc:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x138>)
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x138>)
 8000f0c:	7952      	ldrb	r2, [r2, #5]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	3301      	adds	r3, #1
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	18db      	adds	r3, r3, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4910      	ldr	r1, [pc, #64]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x138>)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f006 fc34 	bl	8007790 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2104      	movs	r1, #4
 8000f34:	438a      	bics	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			uart_rx_int = 1;
		}
	}
}
 8000f38:	e005      	b.n	8000f46 <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	801a      	strh	r2, [r3, #0]
			uart_rx_int = 1;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_UARTEx_RxEventCallback+0x150>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b005      	add	sp, #20
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	40013800 	.word	0x40013800
 8000f54:	2000079c 	.word	0x2000079c
 8000f58:	2000079a 	.word	0x2000079a
 8000f5c:	20000494 	.word	0x20000494
 8000f60:	20000694 	.word	0x20000694
 8000f64:	20000062 	.word	0x20000062
 8000f68:	20000794 	.word	0x20000794
 8000f6c:	20000798 	.word	0x20000798
 8000f70:	200002f8 	.word	0x200002f8
 8000f74:	2000038c 	.word	0x2000038c
 8000f78:	2000079e 	.word	0x2000079e

08000f7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_UART_TxCpltCallback+0x18>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	2000079f 	.word	0x2000079f

08000f98 <handle_chunk_miss>:

// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <handle_chunk_miss+0x5c>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d120      	bne.n	8000fea <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8000fa8:	f001 f83e 	bl	8002028 <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <handle_chunk_miss+0x60>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b0a      	cmp	r3, #10
 8000fb6:	d918      	bls.n	8000fea <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <handle_chunk_miss+0x5c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <handle_chunk_miss+0x64>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 fff9 	bl	8005fb8 <HAL_UART_Abort>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	001a      	movs	r2, r3
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d104      	bne.n	8000fe2 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8000fd8:	1dfc      	adds	r4, r7, #7
 8000fda:	f000 faeb 	bl	80015b4 <modbus_set_rx>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	e000      	b.n	8000fec <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b003      	add	sp, #12
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	20000062 	.word	0x20000062
 8000ff8:	20000794 	.word	0x20000794
 8000ffc:	200002f8 	.word	0x200002f8

08001000 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	0002      	movs	r2, r0
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2bff      	cmp	r3, #255	@ 0xff
 8001012:	d01e      	beq.n	8001052 <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <get_rx_buffer+0x5c>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	001a      	movs	r2, r3
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8001022:	2bff      	cmp	r3, #255	@ 0xff
 8001024:	dd0b      	ble.n	800103e <get_rx_buffer+0x3e>
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <get_rx_buffer+0x5c>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	001a      	movs	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	18d3      	adds	r3, r2, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	3bff      	subs	r3, #255	@ 0xff
 8001038:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <get_rx_buffer+0x60>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	e00a      	b.n	8001054 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <get_rx_buffer+0x5c>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	001a      	movs	r2, r3
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <get_rx_buffer+0x60>)
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	e000      	b.n	8001054 <get_rx_buffer+0x54>
	}
	return 0xFF;
 8001052:	23ff      	movs	r3, #255	@ 0xff
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000798 	.word	0x20000798
 8001060:	20000494 	.word	0x20000494

08001064 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff ffc8 	bl	8001000 <get_rx_buffer>
 8001070:	0003      	movs	r3, r0
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21c      	sxth	r4, r3
 8001076:	2003      	movs	r0, #3
 8001078:	f7ff ffc2 	bl	8001000 <get_rx_buffer>
 800107c:	0003      	movs	r3, r0
 800107e:	b21b      	sxth	r3, r3
 8001080:	4323      	orrs	r3, r4
 8001082:	b21a      	sxth	r2, r3
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001088:	2004      	movs	r0, #4
 800108a:	f7ff ffb9 	bl	8001000 <get_rx_buffer>
 800108e:	0003      	movs	r3, r0
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21c      	sxth	r4, r3
 8001094:	2005      	movs	r0, #5
 8001096:	f7ff ffb3 	bl	8001000 <get_rx_buffer>
 800109a:	0003      	movs	r3, r0
 800109c:	b21b      	sxth	r3, r3
 800109e:	4323      	orrs	r3, r4
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	1cbb      	adds	r3, r7, #2
 80010a4:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	2b7d      	cmp	r3, #125	@ 0x7d
 80010ac:	d803      	bhi.n	80010b6 <return_holding_registers+0x52>
 80010ae:	1cbb      	adds	r3, r7, #2
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d104      	bne.n	80010c0 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80010b6:	2006      	movs	r0, #6
 80010b8:	f000 f966 	bl	8001388 <modbus_exception>
 80010bc:	0003      	movs	r3, r0
 80010be:	e065      	b.n	800118c <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80010c0:	1cba      	adds	r2, r7, #2
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	18d3      	adds	r3, r2, r3
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	003b      	movs	r3, r7
 80010ce:	3a01      	subs	r2, #1
 80010d0:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80010d2:	003b      	movs	r3, r7
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	2b31      	cmp	r3, #49	@ 0x31
 80010d8:	d904      	bls.n	80010e4 <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80010da:	2005      	movs	r0, #5
 80010dc:	f000 f954 	bl	8001388 <modbus_exception>
 80010e0:	0003      	movs	r3, r0
 80010e2:	e053      	b.n	800118c <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff8b 	bl	8001000 <get_rx_buffer>
 80010ea:	0003      	movs	r3, r0
 80010ec:	001a      	movs	r2, r3
 80010ee:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <return_holding_registers+0x130>)
 80010f0:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff ff84 	bl	8001000 <get_rx_buffer>
 80010f8:	0003      	movs	r3, r0
 80010fa:	001a      	movs	r2, r3
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <return_holding_registers+0x130>)
 80010fe:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001100:	1cbb      	adds	r3, r7, #2
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	18db      	adds	r3, r3, r3
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <return_holding_registers+0x130>)
 800110c:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	2203      	movs	r2, #3
 8001112:	701a      	strb	r2, [r3, #0]
//		prim = __get_PRIMASK();
//		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001114:	1dbb      	adds	r3, r7, #6
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e028      	b.n	800116e <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	881a      	ldrh	r2, [r3, #0]
 8001120:	1dbb      	adds	r3, r7, #6
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	18d2      	adds	r2, r2, r3
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <return_holding_registers+0x134>)
 8001128:	0052      	lsls	r2, r2, #1
 800112a:	5ad3      	ldrh	r3, [r2, r3]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b299      	uxth	r1, r3
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	1dfa      	adds	r2, r7, #7
 8001136:	1c58      	adds	r0, r3, #1
 8001138:	7010      	strb	r0, [r2, #0]
 800113a:	001a      	movs	r2, r3
 800113c:	b2c9      	uxtb	r1, r1
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <return_holding_registers+0x130>)
 8001140:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	881a      	ldrh	r2, [r3, #0]
 8001146:	1dbb      	adds	r3, r7, #6
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	18d2      	adds	r2, r2, r3
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <return_holding_registers+0x134>)
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	5ad1      	ldrh	r1, [r2, r3]
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	1dfa      	adds	r2, r7, #7
 8001158:	1c58      	adds	r0, r3, #1
 800115a:	7010      	strb	r0, [r2, #0]
 800115c:	001a      	movs	r2, r3
 800115e:	b2c9      	uxtb	r1, r1
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <return_holding_registers+0x130>)
 8001162:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001164:	1dbb      	adds	r3, r7, #6
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	3201      	adds	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	1cba      	adds	r2, r7, #2
 8001176:	8812      	ldrh	r2, [r2, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8cf      	bhi.n	800111c <return_holding_registers+0xb8>
//		{
//			__enable_irq();
//		}
	}

	return modbus_send(modbus_tx_buffer, index);
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <return_holding_registers+0x130>)
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f000 f995 	bl	80014b4 <modbus_send>
 800118a:	0003      	movs	r3, r0
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b003      	add	sp, #12
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000594 	.word	0x20000594
 8001198:	20000000 	.word	0x20000000

0800119c <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80011a2:	2002      	movs	r0, #2
 80011a4:	f7ff ff2c 	bl	8001000 <get_rx_buffer>
 80011a8:	0003      	movs	r3, r0
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21c      	sxth	r4, r3
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff ff26 	bl	8001000 <get_rx_buffer>
 80011b4:	0003      	movs	r3, r0
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4323      	orrs	r3, r4
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	230c      	movs	r3, #12
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80011c2:	2004      	movs	r0, #4
 80011c4:	f7ff ff1c 	bl	8001000 <get_rx_buffer>
 80011c8:	0003      	movs	r3, r0
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21c      	sxth	r4, r3
 80011ce:	2005      	movs	r0, #5
 80011d0:	f7ff ff16 	bl	8001000 <get_rx_buffer>
 80011d4:	0003      	movs	r3, r0
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4323      	orrs	r3, r4
 80011da:	b21a      	sxth	r2, r3
 80011dc:	210a      	movs	r1, #10
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 80011e2:	000a      	movs	r2, r1
 80011e4:	18bb      	adds	r3, r7, r2
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	2b7d      	cmp	r3, #125	@ 0x7d
 80011ea:	d803      	bhi.n	80011f4 <edit_multiple_registers+0x58>
 80011ec:	18bb      	adds	r3, r7, r2
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d104      	bne.n	80011fe <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80011f4:	2006      	movs	r0, #6
 80011f6:	f000 f8c7 	bl	8001388 <modbus_exception>
 80011fa:	0003      	movs	r3, r0
 80011fc:	e0bc      	b.n	8001378 <edit_multiple_registers+0x1dc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80011fe:	230a      	movs	r3, #10
 8001200:	18fa      	adds	r2, r7, r3
 8001202:	230c      	movs	r3, #12
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	8812      	ldrh	r2, [r2, #0]
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	b29a      	uxth	r2, r3
 800120e:	2108      	movs	r1, #8
 8001210:	187b      	adds	r3, r7, r1
 8001212:	3a01      	subs	r2, #1
 8001214:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001216:	187b      	adds	r3, r7, r1
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	2b31      	cmp	r3, #49	@ 0x31
 800121c:	d904      	bls.n	8001228 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800121e:	2005      	movs	r0, #5
 8001220:	f000 f8b2 	bl	8001388 <modbus_exception>
 8001224:	0003      	movs	r3, r0
 8001226:	e0a7      	b.n	8001378 <edit_multiple_registers+0x1dc>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= QUARTERNION_Z)) ||
 8001228:	220c      	movs	r2, #12
 800122a:	18bb      	adds	r3, r7, r2
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d903      	bls.n	800123a <edit_multiple_registers+0x9e>
 8001232:	18bb      	adds	r3, r7, r2
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	2b21      	cmp	r3, #33	@ 0x21
 8001238:	d908      	bls.n	800124c <edit_multiple_registers+0xb0>
 800123a:	2208      	movs	r2, #8
 800123c:	18bb      	adds	r3, r7, r2
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d908      	bls.n	8001256 <edit_multiple_registers+0xba>
		((last_register_address >= ADC_0) && (last_register_address <= QUARTERNION_Z)))
 8001244:	18bb      	adds	r3, r7, r2
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	2b21      	cmp	r3, #33	@ 0x21
 800124a:	d804      	bhi.n	8001256 <edit_multiple_registers+0xba>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 800124c:	2004      	movs	r0, #4
 800124e:	f000 f89b 	bl	8001388 <modbus_exception>
 8001252:	0003      	movs	r3, r0
 8001254:	e090      	b.n	8001378 <edit_multiple_registers+0x1dc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fed2 	bl	8001000 <get_rx_buffer>
 800125c:	0003      	movs	r3, r0
 800125e:	001a      	movs	r2, r3
 8001260:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <edit_multiple_registers+0x1e4>)
 8001262:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fecb 	bl	8001000 <get_rx_buffer>
 800126a:	0003      	movs	r3, r0
 800126c:	001a      	movs	r2, r3
 800126e:	4b44      	ldr	r3, [pc, #272]	@ (8001380 <edit_multiple_registers+0x1e4>)
 8001270:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8001272:	2002      	movs	r0, #2
 8001274:	f7ff fec4 	bl	8001000 <get_rx_buffer>
 8001278:	0003      	movs	r3, r0
 800127a:	001a      	movs	r2, r3
 800127c:	4b40      	ldr	r3, [pc, #256]	@ (8001380 <edit_multiple_registers+0x1e4>)
 800127e:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001280:	2003      	movs	r0, #3
 8001282:	f7ff febd 	bl	8001000 <get_rx_buffer>
 8001286:	0003      	movs	r3, r0
 8001288:	001a      	movs	r2, r3
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <edit_multiple_registers+0x1e4>)
 800128c:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 800128e:	2004      	movs	r0, #4
 8001290:	f7ff feb6 	bl	8001000 <get_rx_buffer>
 8001294:	0003      	movs	r3, r0
 8001296:	001a      	movs	r2, r3
 8001298:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <edit_multiple_registers+0x1e4>)
 800129a:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 800129c:	2005      	movs	r0, #5
 800129e:	f7ff feaf 	bl	8001000 <get_rx_buffer>
 80012a2:	0003      	movs	r3, r0
 80012a4:	001a      	movs	r2, r3
 80012a6:	4b36      	ldr	r3, [pc, #216]	@ (8001380 <edit_multiple_registers+0x1e4>)
 80012a8:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	2206      	movs	r2, #6
 80012ae:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 80012b0:	230f      	movs	r3, #15
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e032      	b.n	8001320 <edit_multiple_registers+0x184>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 80012ba:	250f      	movs	r5, #15
 80012bc:	197b      	adds	r3, r7, r5
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	18db      	adds	r3, r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	3307      	adds	r3, #7
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff fe99 	bl	8001000 <get_rx_buffer>
 80012ce:	0003      	movs	r3, r0
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21c      	sxth	r4, r3
 80012d4:	197b      	adds	r3, r7, r5
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	18db      	adds	r3, r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fe8d 	bl	8001000 <get_rx_buffer>
 80012e6:	0003      	movs	r3, r0
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4323      	orrs	r3, r4
 80012ec:	b219      	sxth	r1, r3
 80012ee:	200c      	movs	r0, #12
 80012f0:	183b      	adds	r3, r7, r0
 80012f2:	881a      	ldrh	r2, [r3, #0]
 80012f4:	197b      	adds	r3, r7, r5
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	18d2      	adds	r2, r2, r3
 80012fa:	b289      	uxth	r1, r1
 80012fc:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <edit_multiple_registers+0x1e8>)
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8001302:	197b      	adds	r3, r7, r5
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b29a      	uxth	r2, r3
 8001308:	183b      	adds	r3, r7, r0
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	18d3      	adds	r3, r2, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	0018      	movs	r0, r3
 8001312:	f000 f863 	bl	80013dc <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8001316:	197b      	adds	r3, r7, r5
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	197b      	adds	r3, r7, r5
 800131c:	3201      	adds	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	230f      	movs	r3, #15
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	220a      	movs	r2, #10
 800132a:	18ba      	adds	r2, r7, r2
 800132c:	8812      	ldrh	r2, [r2, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d8c3      	bhi.n	80012ba <edit_multiple_registers+0x11e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f000 fe82 	bl	800203c <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8001338:	1dbc      	adds	r4, r7, #6
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <edit_multiple_registers+0x1e4>)
 8001340:	0011      	movs	r1, r2
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f8b6 	bl	80014b4 <modbus_send>
 8001348:	0003      	movs	r3, r0
 800134a:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 800134c:	1dbb      	adds	r3, r7, #6
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10d      	bne.n	8001372 <edit_multiple_registers+0x1d6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8001356:	230c      	movs	r3, #12
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d808      	bhi.n	8001372 <edit_multiple_registers+0x1d6>
 8001360:	2308      	movs	r3, #8
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <edit_multiple_registers+0x1d6>
		{
			return modbus_change_baud_rate();
 800136a:	f000 f945 	bl	80015f8 <modbus_change_baud_rate>
 800136e:	0003      	movs	r3, r0
 8001370:	e002      	b.n	8001378 <edit_multiple_registers+0x1dc>
		}
	}
	return status;
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b25b      	sxtb	r3, r3
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b004      	add	sp, #16
 800137e:	bdb0      	pop	{r4, r5, r7, pc}
 8001380:	20000594 	.word	0x20000594
 8001384:	20000000 	.word	0x20000000

08001388 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fe33 	bl	8001000 <get_rx_buffer>
 800139a:	0003      	movs	r3, r0
 800139c:	001a      	movs	r2, r3
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <modbus_exception+0x50>)
 80013a0:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff fe2c 	bl	8001000 <get_rx_buffer>
 80013a8:	0003      	movs	r3, r0
 80013aa:	001a      	movs	r2, r3
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	425b      	negs	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <modbus_exception+0x50>)
 80013b6:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3b03      	subs	r3, #3
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <modbus_exception+0x50>)
 80013c2:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <modbus_exception+0x50>)
 80013c6:	2103      	movs	r1, #3
 80013c8:	0018      	movs	r0, r3
 80013ca:	f000 f873 	bl	80014b4 <modbus_send>
 80013ce:	0003      	movs	r3, r0
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000594 	.word	0x20000594

080013dc <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	0002      	movs	r2, r0
 80013e4:	1dbb      	adds	r3, r7, #6
 80013e6:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	2b24      	cmp	r3, #36	@ 0x24
 80013ee:	dd00      	ble.n	80013f2 <handle_range+0x16>
 80013f0:	e058      	b.n	80014a4 <handle_range+0xc8>
 80013f2:	2b22      	cmp	r3, #34	@ 0x22
 80013f4:	da3f      	bge.n	8001476 <handle_range+0x9a>
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d02f      	beq.n	800145a <handle_range+0x7e>
 80013fa:	dc53      	bgt.n	80014a4 <handle_range+0xc8>
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <handle_range+0x2a>
 8001400:	2b01      	cmp	r3, #1
 8001402:	d00e      	beq.n	8001422 <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 8001404:	e04e      	b.n	80014a4 <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 8001406:	1dbb      	adds	r3, r7, #6
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <handle_range+0xd0>)
 800140c:	0052      	lsls	r2, r2, #1
 800140e:	5ad3      	ldrh	r3, [r2, r3]
 8001410:	2bff      	cmp	r3, #255	@ 0xff
 8001412:	d940      	bls.n	8001496 <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <handle_range+0xd0>)
 800141a:	0052      	lsls	r2, r2, #1
 800141c:	21ff      	movs	r1, #255	@ 0xff
 800141e:	52d1      	strh	r1, [r2, r3]
			break;
 8001420:	e039      	b.n	8001496 <handle_range+0xba>
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 8001422:	1dbb      	adds	r3, r7, #6
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <handle_range+0xd0>)
 8001428:	0052      	lsls	r2, r2, #1
 800142a:	5ad3      	ldrh	r3, [r2, r3]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d806      	bhi.n	800143e <handle_range+0x62>
				holding_register_database[holding_register] = BAUD_RATE_4800;
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <handle_range+0xd0>)
 8001436:	0052      	lsls	r2, r2, #1
 8001438:	2102      	movs	r1, #2
 800143a:	52d1      	strh	r1, [r2, r3]
			break;
 800143c:	e02d      	b.n	800149a <handle_range+0xbe>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 800143e:	1dbb      	adds	r3, r7, #6
 8001440:	881a      	ldrh	r2, [r3, #0]
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <handle_range+0xd0>)
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	5ad3      	ldrh	r3, [r2, r3]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d926      	bls.n	800149a <handle_range+0xbe>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 800144c:	1dbb      	adds	r3, r7, #6
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <handle_range+0xd0>)
 8001452:	0052      	lsls	r2, r2, #1
 8001454:	2109      	movs	r1, #9
 8001456:	52d1      	strh	r1, [r2, r3]
			break;
 8001458:	e01f      	b.n	800149a <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 800145a:	1dbb      	adds	r3, r7, #6
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <handle_range+0xd0>)
 8001460:	0052      	lsls	r2, r2, #1
 8001462:	5ad3      	ldrh	r3, [r2, r3]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d91a      	bls.n	800149e <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 8001468:	1dbb      	adds	r3, r7, #6
 800146a:	881a      	ldrh	r2, [r3, #0]
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <handle_range+0xd0>)
 800146e:	0052      	lsls	r2, r2, #1
 8001470:	2101      	movs	r1, #1
 8001472:	52d1      	strh	r1, [r2, r3]
			break;
 8001474:	e013      	b.n	800149e <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <handle_range+0xd0>)
 800147c:	0052      	lsls	r2, r2, #1
 800147e:	5ad2      	ldrh	r2, [r2, r3]
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	429a      	cmp	r2, r3
 8001486:	d30c      	bcc.n	80014a2 <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 8001488:	1dbb      	adds	r3, r7, #6
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <handle_range+0xd0>)
 800148e:	0052      	lsls	r2, r2, #1
 8001490:	4907      	ldr	r1, [pc, #28]	@ (80014b0 <handle_range+0xd4>)
 8001492:	52d1      	strh	r1, [r2, r3]
			break;
 8001494:	e005      	b.n	80014a2 <handle_range+0xc6>
			break;
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	e004      	b.n	80014a4 <handle_range+0xc8>
			break;
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	e002      	b.n	80014a4 <handle_range+0xc8>
			break;
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	e000      	b.n	80014a4 <handle_range+0xc8>
			break;
 80014a2:	46c0      	nop			@ (mov r8, r8)
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000000 	.word	0x20000000
 80014b0:	00000fff 	.word	0x00000fff

080014b4 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	000a      	movs	r2, r1
 80014be:	1cfb      	adds	r3, r7, #3
 80014c0:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 80014c2:	250e      	movs	r5, #14
 80014c4:	197c      	adds	r4, r7, r5
 80014c6:	1cfb      	adds	r3, r7, #3
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <modbus_send+0xc4>)
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 f8f8 	bl	80016c4 <crc_16>
 80014d4:	0003      	movs	r3, r0
 80014d6:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80014d8:	1cfb      	adds	r3, r7, #3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	197a      	adds	r2, r7, r5
 80014de:	8812      	ldrh	r2, [r2, #0]
 80014e0:	b2d1      	uxtb	r1, r2
 80014e2:	4a25      	ldr	r2, [pc, #148]	@ (8001578 <modbus_send+0xc4>)
 80014e4:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 80014e6:	197b      	adds	r3, r7, r5
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	1cfb      	adds	r3, r7, #3
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2d1      	uxtb	r1, r2
 80014f6:	4a20      	ldr	r2, [pc, #128]	@ (8001578 <modbus_send+0xc4>)
 80014f8:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0;
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <modbus_send+0xc8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	time = HAL_GetTick();
 8001500:	f000 fd92 	bl	8002028 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <modbus_send+0xcc>)
 8001508:	601a      	str	r2, [r3, #0]
	int8_t status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 800150a:	1cfb      	adds	r3, r7, #3
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	3302      	adds	r3, #2
 8001512:	b29a      	uxth	r2, r3
 8001514:	4918      	ldr	r1, [pc, #96]	@ (8001578 <modbus_send+0xc4>)
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <modbus_send+0xd0>)
 8001518:	0018      	movs	r0, r3
 800151a:	f004 fcbb 	bl	8005e94 <HAL_UART_Transmit_DMA>
 800151e:	0003      	movs	r3, r0
 8001520:	001a      	movs	r2, r3
 8001522:	210d      	movs	r1, #13
 8001524:	187b      	adds	r3, r7, r1
 8001526:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8001528:	000a      	movs	r2, r1
 800152a:	18bb      	adds	r3, r7, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <modbus_send+0x88>
	{
		return status;
 8001534:	18bb      	adds	r3, r7, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b25b      	sxtb	r3, r3
 800153a:	e018      	b.n	800156e <modbus_send+0xba>
	}
	while(!uart_tx_int && (HAL_GetTick() - time < 100));
 800153c:	46c0      	nop			@ (mov r8, r8)
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <modbus_send+0xc8>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <modbus_send+0xa4>
 8001548:	f000 fd6e 	bl	8002028 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <modbus_send+0xcc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b63      	cmp	r3, #99	@ 0x63
 8001556:	d9f2      	bls.n	800153e <modbus_send+0x8a>
	if(HAL_GetTick() - time >= 100)
 8001558:	f000 fd66 	bl	8002028 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <modbus_send+0xcc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b63      	cmp	r3, #99	@ 0x63
 8001566:	d901      	bls.n	800156c <modbus_send+0xb8>
	{
		return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e000      	b.n	800156e <modbus_send+0xba>
	}
	return HAL_OK;
 800156c:	2300      	movs	r3, #0

//	return HAL_UART_Transmit(&huart1, modbus_tx_buffer, size + 2, 100);
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bdb0      	pop	{r4, r5, r7, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	20000594 	.word	0x20000594
 800157c:	2000079f 	.word	0x2000079f
 8001580:	20000790 	.word	0x20000790
 8001584:	200002f8 	.word	0x200002f8

08001588 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <modbus_rx+0x28>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <modbus_rx+0x28>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
		return 1;
 800159c:	2301      	movs	r3, #1
 800159e:	e004      	b.n	80015aa <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 80015a0:	f7ff fcfa 	bl	8000f98 <handle_chunk_miss>
	{
		// TODO: log the error, reset the uart
	}
	return uart_rx_int;
 80015a4:	4b02      	ldr	r3, [pc, #8]	@ (80015b0 <modbus_rx+0x28>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000079e 	.word	0x2000079e

080015b4 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 80015ba:	490c      	ldr	r1, [pc, #48]	@ (80015ec <modbus_set_rx+0x38>)
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <modbus_set_rx+0x3c>)
 80015be:	2206      	movs	r2, #6
 80015c0:	0018      	movs	r0, r3
 80015c2:	f006 f8e5 	bl	8007790 <HAL_UARTEx_ReceiveToIdle_DMA>
 80015c6:	0003      	movs	r3, r0
 80015c8:	001a      	movs	r2, r3
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <modbus_set_rx+0x40>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <modbus_set_rx+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2104      	movs	r1, #4
 80015da:	438a      	bics	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

	return status;
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b25b      	sxtb	r3, r3
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000694 	.word	0x20000694
 80015f0:	200002f8 	.word	0x200002f8
 80015f4:	2000038c 	.word	0x2000038c

080015f8 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8001604:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <modbus_change_baud_rate+0xc0>)
 8001606:	885b      	ldrh	r3, [r3, #2]
 8001608:	2b09      	cmp	r3, #9
 800160a:	d82c      	bhi.n	8001666 <modbus_change_baud_rate+0x6e>
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <modbus_change_baud_rate+0xc4>)
 8001610:	18d3      	adds	r3, r2, r3
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8001616:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 8001618:	2296      	movs	r2, #150	@ 0x96
 800161a:	0152      	lsls	r2, r2, #5
 800161c:	605a      	str	r2, [r3, #4]
			break;
 800161e:	e033      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 8001622:	2296      	movs	r2, #150	@ 0x96
 8001624:	0192      	lsls	r2, r2, #6
 8001626:	605a      	str	r2, [r3, #4]
			break;
 8001628:	e02e      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 800162a:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 800162c:	2296      	movs	r2, #150	@ 0x96
 800162e:	01d2      	lsls	r2, r2, #7
 8001630:	605a      	str	r2, [r3, #4]
			break;
 8001632:	e029      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 8001636:	2296      	movs	r2, #150	@ 0x96
 8001638:	0212      	lsls	r2, r2, #8
 800163a:	605a      	str	r2, [r3, #4]
			break;
 800163c:	e024      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 8001640:	22e1      	movs	r2, #225	@ 0xe1
 8001642:	0212      	lsls	r2, r2, #8
 8001644:	605a      	str	r2, [r3, #4]
			break;
 8001646:	e01f      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 800164a:	22e1      	movs	r2, #225	@ 0xe1
 800164c:	0252      	lsls	r2, r2, #9
 800164e:	605a      	str	r2, [r3, #4]
			break;
 8001650:	e01a      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8001652:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 8001654:	22fa      	movs	r2, #250	@ 0xfa
 8001656:	0252      	lsls	r2, r2, #9
 8001658:	605a      	str	r2, [r3, #4]
			break;
 800165a:	e015      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 800165e:	22fa      	movs	r2, #250	@ 0xfa
 8001660:	0292      	lsls	r2, r2, #10
 8001662:	605a      	str	r2, [r3, #4]
			break;
 8001664:	e010      	b.n	8001688 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <modbus_change_baud_rate+0xc0>)
 8001668:	2203      	movs	r2, #3
 800166a:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 800166e:	2296      	movs	r2, #150	@ 0x96
 8001670:	0192      	lsls	r2, r2, #6
 8001672:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 8001676:	0018      	movs	r0, r3
 8001678:	f005 f910 	bl	800689c <UART_SetConfig>
 800167c:	0003      	movs	r3, r0
 800167e:	001a      	movs	r2, r3
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				// Log error, reset UART
			}
			return MB_ILLEGAL_DATA_VALUE;
 8001684:	2306      	movs	r3, #6
 8001686:	e013      	b.n	80016b0 <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <modbus_change_baud_rate+0xc8>)
 800168a:	0018      	movs	r0, r3
 800168c:	f005 f906 	bl	800689c <UART_SetConfig>
 8001690:	0003      	movs	r3, r0
 8001692:	001a      	movs	r2, r3
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		// Log error, reset UART
	}

	if(status != HAL_OK)
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b25b      	sxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <modbus_change_baud_rate+0xb2>
	{
		return status;
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	e002      	b.n	80016b0 <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b25b      	sxtb	r3, r3
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	08007ba0 	.word	0x08007ba0
 80016c0:	200002f8 	.word	0x200002f8

080016c4 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	000a      	movs	r2, r1
 80016ce:	1cfb      	adds	r3, r7, #3
 80016d0:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 80016d2:	230f      	movs	r3, #15
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	22ff      	movs	r2, #255	@ 0xff
 80016d8:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 80016da:	230e      	movs	r3, #14
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	22ff      	movs	r2, #255	@ 0xff
 80016e0:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 80016e2:	e019      	b.n	8001718 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	200e      	movs	r0, #14
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4053      	eors	r3, r2
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 80016f8:	4a13      	ldr	r2, [pc, #76]	@ (8001748 <crc_16+0x84>)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	18d3      	adds	r3, r2, r3
 80016fe:	7819      	ldrb	r1, [r3, #0]
 8001700:	183b      	adds	r3, r7, r0
 8001702:	200f      	movs	r0, #15
 8001704:	183a      	adds	r2, r7, r0
 8001706:	7812      	ldrb	r2, [r2, #0]
 8001708:	404a      	eors	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 800170c:	183b      	adds	r3, r7, r0
 800170e:	490f      	ldr	r1, [pc, #60]	@ (800174c <crc_16+0x88>)
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	188a      	adds	r2, r1, r2
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	701a      	strb	r2, [r3, #0]
	while (size--)
 8001718:	1cfb      	adds	r3, r7, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	1cfa      	adds	r2, r7, #3
 800171e:	1e59      	subs	r1, r3, #1
 8001720:	7011      	strb	r1, [r2, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1de      	bne.n	80016e4 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8001726:	230f      	movs	r3, #15
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	230e      	movs	r3, #14
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	b29b      	uxth	r3, r3
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	080079a0 	.word	0x080079a0
 800174c:	08007aa0 	.word	0x08007aa0

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_MspInit+0x44>)
 8001758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_MspInit+0x44>)
 800175c:	2101      	movs	r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_MspInit+0x44>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	2201      	movs	r2, #1
 8001768:	4013      	ands	r3, r2
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_MspInit+0x44>)
 8001770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_MspInit+0x44>)
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	0549      	lsls	r1, r1, #21
 8001778:	430a      	orrs	r2, r1
 800177a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_MspInit+0x44>)
 800177e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	055b      	lsls	r3, r3, #21
 8001784:	4013      	ands	r3, r2
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b093      	sub	sp, #76	@ 0x4c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	2334      	movs	r3, #52	@ 0x34
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	0018      	movs	r0, r3
 80017a6:	2314      	movs	r3, #20
 80017a8:	001a      	movs	r2, r3
 80017aa:	2100      	movs	r1, #0
 80017ac:	f006 f8b6 	bl	800791c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	2414      	movs	r4, #20
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	0018      	movs	r0, r3
 80017b6:	2320      	movs	r3, #32
 80017b8:	001a      	movs	r2, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	f006 f8ae 	bl	800791c <memset>
  if(hadc->Instance==ADC1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a35      	ldr	r2, [pc, #212]	@ (800189c <HAL_ADC_MspInit+0x104>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d163      	bne.n	8001892 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	2220      	movs	r2, #32
 80017ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	0018      	movs	r0, r3
 80017da:	f003 fbd3 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80017e2:	f7ff fb1b 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017e6:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <HAL_ADC_MspInit+0x108>)
 80017e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ea:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <HAL_ADC_MspInit+0x108>)
 80017ec:	2180      	movs	r1, #128	@ 0x80
 80017ee:	0349      	lsls	r1, r1, #13
 80017f0:	430a      	orrs	r2, r1
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80017f4:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <HAL_ADC_MspInit+0x108>)
 80017f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	035b      	lsls	r3, r3, #13
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <HAL_ADC_MspInit+0x108>)
 8001804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <HAL_ADC_MspInit+0x108>)
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	635a      	str	r2, [r3, #52]	@ 0x34
 800180e:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <HAL_ADC_MspInit+0x108>)
 8001810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001812:	2201      	movs	r2, #1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800181a:	2134      	movs	r1, #52	@ 0x34
 800181c:	187b      	adds	r3, r7, r1
 800181e:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <HAL_ADC_MspInit+0x10c>)
 8001820:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001822:	187b      	adds	r3, r7, r1
 8001824:	2203      	movs	r2, #3
 8001826:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	187b      	adds	r3, r7, r1
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	187a      	adds	r2, r7, r1
 8001830:	23a0      	movs	r3, #160	@ 0xa0
 8001832:	05db      	lsls	r3, r3, #23
 8001834:	0011      	movs	r1, r2
 8001836:	0018      	movs	r0, r3
 8001838:	f001 feae 	bl	8003598 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 800183c:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 800183e:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <HAL_ADC_MspInit+0x114>)
 8001840:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001842:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 8001844:	2205      	movs	r2, #5
 8001846:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800184e:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 8001856:	2280      	movs	r2, #128	@ 0x80
 8001858:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 800185c:	2280      	movs	r2, #128	@ 0x80
 800185e:	0052      	lsls	r2, r2, #1
 8001860:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	00d2      	lsls	r2, r2, #3
 8001868:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 8001878:	0018      	movs	r0, r3
 800187a:	f001 fb47 	bl	8002f0c <HAL_DMA_Init>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d001      	beq.n	8001886 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001882:	f7ff facb 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 800188a:	651a      	str	r2, [r3, #80]	@ 0x50
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_ADC_MspInit+0x110>)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b013      	add	sp, #76	@ 0x4c
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	40012400 	.word	0x40012400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	000001ff 	.word	0x000001ff
 80018a8:	200000f0 	.word	0x200000f0
 80018ac:	40020044 	.word	0x40020044

080018b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b093      	sub	sp, #76	@ 0x4c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	2334      	movs	r3, #52	@ 0x34
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	0018      	movs	r0, r3
 80018be:	2314      	movs	r3, #20
 80018c0:	001a      	movs	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	f006 f82a 	bl	800791c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	2414      	movs	r4, #20
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	2320      	movs	r3, #32
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f006 f822 	bl	800791c <memset>
  if(hi2c->Instance==I2C1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a3c      	ldr	r2, [pc, #240]	@ (80019d0 <HAL_I2C_MspInit+0x120>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d171      	bne.n	80019c6 <HAL_I2C_MspInit+0x116>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	0018      	movs	r0, r3
 80018f2:	f003 fb47 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018fa:	f7ff fa8f 	bl	8000e1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <HAL_I2C_MspInit+0x124>)
 8001900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001902:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <HAL_I2C_MspInit+0x124>)
 8001904:	2101      	movs	r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34
 800190a:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <HAL_I2C_MspInit+0x124>)
 800190c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190e:	2201      	movs	r2, #1
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001916:	2134      	movs	r1, #52	@ 0x34
 8001918:	187b      	adds	r3, r7, r1
 800191a:	22c0      	movs	r2, #192	@ 0xc0
 800191c:	00d2      	lsls	r2, r2, #3
 800191e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2212      	movs	r2, #18
 8001924:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001932:	187b      	adds	r3, r7, r1
 8001934:	2206      	movs	r2, #6
 8001936:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	187a      	adds	r2, r7, r1
 800193a:	23a0      	movs	r3, #160	@ 0xa0
 800193c:	05db      	lsls	r3, r3, #23
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f001 fe29 	bl	8003598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_I2C_MspInit+0x124>)
 8001948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_I2C_MspInit+0x124>)
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	0389      	lsls	r1, r1, #14
 8001950:	430a      	orrs	r2, r1
 8001952:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001954:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <HAL_I2C_MspInit+0x124>)
 8001956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	039b      	lsls	r3, r3, #14
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001962:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <HAL_I2C_MspInit+0x12c>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 800196a:	220a      	movs	r2, #10
 800196c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	0152      	lsls	r2, r2, #5
 8001998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 800199c:	0018      	movs	r0, r3
 800199e:	f001 fab5 	bl	8002f0c <HAL_DMA_Init>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80019a6:	f7ff fa39 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 80019ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_I2C_MspInit+0x128>)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2103      	movs	r1, #3
 80019ba:	2017      	movs	r0, #23
 80019bc:	f001 fa74 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80019c0:	2017      	movs	r0, #23
 80019c2:	f001 fa86 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b013      	add	sp, #76	@ 0x4c
 80019cc:	bd90      	pop	{r4, r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	40005400 	.word	0x40005400
 80019d4:	40021000 	.word	0x40021000
 80019d8:	200001a0 	.word	0x200001a0
 80019dc:	40020030 	.word	0x40020030

080019e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b093      	sub	sp, #76	@ 0x4c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	2334      	movs	r3, #52	@ 0x34
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	0018      	movs	r0, r3
 80019ee:	2314      	movs	r3, #20
 80019f0:	001a      	movs	r2, r3
 80019f2:	2100      	movs	r1, #0
 80019f4:	f005 ff92 	bl	800791c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	2414      	movs	r4, #20
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	0018      	movs	r0, r3
 80019fe:	2320      	movs	r3, #32
 8001a00:	001a      	movs	r2, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	f005 ff8a 	bl	800791c <memset>
  if(hspi->Instance==SPI1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a34      	ldr	r2, [pc, #208]	@ (8001ae0 <HAL_SPI_MspInit+0x100>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d162      	bne.n	8001ad8 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	2204      	movs	r2, #4
 8001a16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	0018      	movs	r0, r3
 8001a22:	f003 faaf 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a2a:	f7ff f9f7 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a34:	2180      	movs	r1, #128	@ 0x80
 8001a36:	0149      	lsls	r1, r1, #5
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	015b      	lsls	r3, r3, #5
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a56:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a68:	2102      	movs	r1, #2
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <HAL_SPI_MspInit+0x104>)
 8001a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a72:	2202      	movs	r2, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a7a:	2134      	movs	r1, #52	@ 0x34
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	000c      	movs	r4, r1
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2202      	movs	r2, #2
 8001a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	193a      	adds	r2, r7, r4
 8001aa0:	23a0      	movs	r3, #160	@ 0xa0
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	0011      	movs	r1, r2
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f001 fd76 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001aac:	0021      	movs	r1, r4
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2228      	movs	r2, #40	@ 0x28
 8001ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <HAL_SPI_MspInit+0x108>)
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	f001 fd60 	bl	8003598 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b013      	add	sp, #76	@ 0x4c
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	40013000 	.word	0x40013000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	50000400 	.word	0x50000400

08001aec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_TIM_PWM_MspInit+0x38>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10d      	bne.n	8001b1a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	0109      	lsls	r1, r1, #4
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b004      	add	sp, #16
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			@ (mov r8, r8)
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40021000 	.word	0x40021000

08001b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_TIM_Base_MspInit+0x38>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d10d      	bne.n	8001b5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_TIM_Base_MspInit+0x3c>)
 8001b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_TIM_Base_MspInit+0x3c>)
 8001b44:	2180      	movs	r1, #128	@ 0x80
 8001b46:	0209      	lsls	r1, r1, #8
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_TIM_Base_MspInit+0x3c>)
 8001b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b004      	add	sp, #16
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	40002000 	.word	0x40002000
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	240c      	movs	r4, #12
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	0018      	movs	r0, r3
 8001b7a:	2314      	movs	r3, #20
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	2100      	movs	r1, #0
 8001b80:	f005 fecc 	bl	800791c <memset>
  if(htim->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a15      	ldr	r2, [pc, #84]	@ (8001be0 <HAL_TIM_MspPostInit+0x74>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d123      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_TIM_MspPostInit+0x78>)
 8001b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_TIM_MspPostInit+0x78>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_TIM_MspPostInit+0x78>)
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	0212      	lsls	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	0021      	movs	r1, r4
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	187a      	adds	r2, r7, r1
 8001bca:	23a0      	movs	r3, #160	@ 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	0011      	movs	r1, r2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f001 fce1 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b009      	add	sp, #36	@ 0x24
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b095      	sub	sp, #84	@ 0x54
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	233c      	movs	r3, #60	@ 0x3c
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f005 fe8e 	bl	800791c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c00:	241c      	movs	r4, #28
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	0018      	movs	r0, r3
 8001c06:	2320      	movs	r3, #32
 8001c08:	001a      	movs	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f005 fe86 	bl	800791c <memset>
  if(huart->Instance==USART1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a74      	ldr	r2, [pc, #464]	@ (8001de8 <HAL_UART_MspInit+0x200>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d000      	beq.n	8001c1c <HAL_UART_MspInit+0x34>
 8001c1a:	e0e1      	b.n	8001de0 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f003 f9aa 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c34:	f7ff f8f2 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c38:	4b6c      	ldr	r3, [pc, #432]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c3e:	2180      	movs	r1, #128	@ 0x80
 8001c40:	01c9      	lsls	r1, r1, #7
 8001c42:	430a      	orrs	r2, r1
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c46:	4b69      	ldr	r3, [pc, #420]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c4a:	2380      	movs	r3, #128	@ 0x80
 8001c4c:	01db      	lsls	r3, r3, #7
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	4b65      	ldr	r3, [pc, #404]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c58:	4b64      	ldr	r3, [pc, #400]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c5a:	2104      	movs	r1, #4
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c60:	4b62      	ldr	r3, [pc, #392]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c64:	2204      	movs	r2, #4
 8001c66:	4013      	ands	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c70:	4b5e      	ldr	r3, [pc, #376]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c72:	2102      	movs	r1, #2
 8001c74:	430a      	orrs	r2, r1
 8001c76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c78:	4b5c      	ldr	r3, [pc, #368]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b59      	ldr	r3, [pc, #356]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c88:	4b58      	ldr	r3, [pc, #352]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c90:	4b56      	ldr	r3, [pc, #344]	@ (8001dec <HAL_UART_MspInit+0x204>)
 8001c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c9c:	213c      	movs	r1, #60	@ 0x3c
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	01d2      	lsls	r2, r2, #7
 8001ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	2202      	movs	r2, #2
 8001cac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	193b      	adds	r3, r7, r4
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001cba:	193b      	adds	r3, r7, r4
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8001df0 <HAL_UART_MspInit+0x208>)
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	0010      	movs	r0, r2
 8001cc8:	f001 fc66 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	2204      	movs	r2, #4
 8001cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	193b      	adds	r3, r7, r4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001ce4:	193b      	adds	r3, r7, r4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	193b      	adds	r3, r7, r4
 8001cec:	4a41      	ldr	r2, [pc, #260]	@ (8001df4 <HAL_UART_MspInit+0x20c>)
 8001cee:	0019      	movs	r1, r3
 8001cf0:	0010      	movs	r0, r2
 8001cf2:	f001 fc51 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cf6:	0021      	movs	r1, r4
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2280      	movs	r2, #128	@ 0x80
 8001cfc:	0152      	lsls	r2, r2, #5
 8001cfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2202      	movs	r2, #2
 8001d04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2201      	movs	r2, #1
 8001d16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	187a      	adds	r2, r7, r1
 8001d1a:	23a0      	movs	r3, #160	@ 0xa0
 8001d1c:	05db      	lsls	r3, r3, #23
 8001d1e:	0011      	movs	r1, r2
 8001d20:	0018      	movs	r0, r3
 8001d22:	f001 fc39 	bl	8003598 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001d26:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d28:	4a34      	ldr	r2, [pc, #208]	@ (8001dfc <HAL_UART_MspInit+0x214>)
 8001d2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d2c:	4b32      	ldr	r3, [pc, #200]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d2e:	2232      	movs	r2, #50	@ 0x32
 8001d30:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d38:	4b2f      	ldr	r3, [pc, #188]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d40:	2280      	movs	r2, #128	@ 0x80
 8001d42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d44:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d50:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d58:	22c0      	movs	r2, #192	@ 0xc0
 8001d5a:	0192      	lsls	r2, r2, #6
 8001d5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d60:	0018      	movs	r0, r3
 8001d62:	f001 f8d3 	bl	8002f0c <HAL_DMA_Init>
 8001d66:	1e03      	subs	r3, r0, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8001d6a:	f7ff f857 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d74:	505a      	str	r2, [r3, r1]
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <HAL_UART_MspInit+0x210>)
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001d7c:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001d7e:	4a21      	ldr	r2, [pc, #132]	@ (8001e04 <HAL_UART_MspInit+0x21c>)
 8001d80:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001d84:	2233      	movs	r2, #51	@ 0x33
 8001d86:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da0:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001dac:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001dae:	2280      	movs	r2, #128	@ 0x80
 8001db0:	0192      	lsls	r2, r2, #6
 8001db2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f001 f8a8 	bl	8002f0c <HAL_DMA_Init>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8001dc0:	f7ff f82c 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001dc8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_UART_MspInit+0x218>)
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	201b      	movs	r0, #27
 8001dd6:	f001 f867 	bl	8002ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dda:	201b      	movs	r0, #27
 8001ddc:	f001 f879 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b015      	add	sp, #84	@ 0x54
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40021000 	.word	0x40021000
 8001df0:	50000800 	.word	0x50000800
 8001df4:	50000400 	.word	0x50000400
 8001df8:	2000038c 	.word	0x2000038c
 8001dfc:	40020008 	.word	0x40020008
 8001e00:	200003e8 	.word	0x200003e8
 8001e04:	4002001c 	.word	0x4002001c

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	e7fd      	b.n	8001e0c <NMI_Handler+0x4>

08001e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	e7fd      	b.n	8001e14 <HardFault_Handler+0x4>

08001e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1c:	46c0      	nop			@ (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e30:	f000 f8e8 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <DMA1_Channel1_IRQHandler+0x14>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f001 fa50 	bl	80032e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e48:	46c0      	nop			@ (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	2000038c 	.word	0x2000038c

08001e54 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f001 fa44 	bl	80032e8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f001 fa40 	bl	80032e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001e68:	46c0      	nop			@ (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	200003e8 	.word	0x200003e8
 8001e74:	200001a0 	.word	0x200001a0

08001e78 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <DMAMUX1_DMA1_CH4_5_IRQHandler+0x14>)
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f001 fa32 	bl	80032e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	200000f0 	.word	0x200000f0

08001e90 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <I2C1_IRQHandler+0x2c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	23e0      	movs	r3, #224	@ 0xe0
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d004      	beq.n	8001eac <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <I2C1_IRQHandler+0x2c>)
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f001 fdc7 	bl	8003a38 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001eaa:	e003      	b.n	8001eb4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <I2C1_IRQHandler+0x2c>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f001 fda8 	bl	8003a04 <HAL_I2C_EV_IRQHandler>
}
 8001eb4:	46c0      	nop			@ (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	2000014c 	.word	0x2000014c

08001ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <USART1_IRQHandler+0x14>)
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f004 f982 	bl	80061d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	200002f8 	.word	0x200002f8

08001ed8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <SystemInit+0x14>)
 8001ede:	2280      	movs	r2, #128	@ 0x80
 8001ee0:	0512      	lsls	r2, r2, #20
 8001ee2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ef2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef4:	f7ff fff0 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ef8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001efa:	e003      	b.n	8001f04 <LoopCopyDataInit>

08001efc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001efe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f02:	3104      	adds	r1, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f04:	480a      	ldr	r0, [pc, #40]	@ (8001f30 <LoopForever+0xa>)
  ldr r3, =_edata
 8001f06:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <LoopForever+0xe>)
  adds r2, r0, r1
 8001f08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f0c:	d3f6      	bcc.n	8001efc <CopyDataInit>
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <LoopForever+0x12>)
  b LoopFillZerobss
 8001f10:	e002      	b.n	8001f18 <LoopFillZerobss>

08001f12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  str  r3, [r2]
 8001f14:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f16:	3204      	adds	r2, #4

08001f18 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <LoopForever+0x16>)
  cmp r2, r3
 8001f1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f1c:	d3f9      	bcc.n	8001f12 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001f1e:	f005 fd05 	bl	800792c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f22:	f7fe fad3 	bl	80004cc <main>

08001f26 <LoopForever>:

LoopForever:
    b LoopForever
 8001f26:	e7fe      	b.n	8001f26 <LoopForever>
  ldr   r0, =_estack
 8001f28:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001f2c:	08007cac 	.word	0x08007cac
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f34:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001f38:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001f3c:	200007a4 	.word	0x200007a4

08001f40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_IRQHandler>

08001f42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f000 f80e 	bl	8001f70 <HAL_InitTick>
 8001f54:	1e03      	subs	r3, r0, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e001      	b.n	8001f64 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f60:	f7ff fbf6 	bl	8001750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	781b      	ldrb	r3, [r3, #0]
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_InitTick+0x88>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d02b      	beq.n	8001fe0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001f88:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <HAL_InitTick+0x8c>)
 8001f8a:	681c      	ldr	r4, [r3, #0]
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <HAL_InitTick+0x88>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	0019      	movs	r1, r3
 8001f92:	23fa      	movs	r3, #250	@ 0xfa
 8001f94:	0098      	lsls	r0, r3, #2
 8001f96:	f7fe f8b7 	bl	8000108 <__udivsi3>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	f7fe f8b2 	bl	8000108 <__udivsi3>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 ffa3 	bl	8002ef2 <HAL_SYSTICK_Config>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d112      	bne.n	8001fd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d80a      	bhi.n	8001fcc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	425b      	negs	r3, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 ff72 	bl	8002ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_InitTick+0x90>)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e00d      	b.n	8001fe8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001fcc:	230f      	movs	r3, #15
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	e008      	b.n	8001fe8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e003      	b.n	8001fe8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001fe8:	230f      	movs	r3, #15
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b005      	add	sp, #20
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	2000006c 	.word	0x2000006c
 8001ffc:	20000064 	.word	0x20000064
 8002000:	20000068 	.word	0x20000068

08002004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_IncTick+0x1c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	001a      	movs	r2, r3
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_IncTick+0x20>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	18d2      	adds	r2, r2, r3
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <HAL_IncTick+0x20>)
 8002016:	601a      	str	r2, [r3, #0]
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	2000006c 	.word	0x2000006c
 8002024:	200007a0 	.word	0x200007a0

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b02      	ldr	r3, [pc, #8]	@ (8002038 <HAL_GetTick+0x10>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	200007a0 	.word	0x200007a0

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fff0 	bl	8002028 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	001a      	movs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	189b      	adds	r3, r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	f7ff ffe0 	bl	8002028 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	46c0      	nop			@ (mov r8, r8)
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	2000006c 	.word	0x2000006c

08002084 <LL_ADC_SetCommonPathInternalCh>:
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002094:	401a      	ands	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	ff3fffff 	.word	0xff3fffff

080020ac <LL_ADC_GetCommonPathInternalCh>:
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	23c0      	movs	r3, #192	@ 0xc0
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	4013      	ands	r3, r2
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	2104      	movs	r1, #4
 80020da:	400a      	ands	r2, r1
 80020dc:	2107      	movs	r1, #7
 80020de:	4091      	lsls	r1, r2
 80020e0:	000a      	movs	r2, r1
 80020e2:	43d2      	mvns	r2, r2
 80020e4:	401a      	ands	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2104      	movs	r1, #4
 80020ea:	400b      	ands	r3, r1
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4099      	lsls	r1, r3
 80020f0:	000b      	movs	r3, r1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	615a      	str	r2, [r3, #20]
}
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}

08002100 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	2104      	movs	r1, #4
 8002112:	400a      	ands	r2, r1
 8002114:	2107      	movs	r1, #7
 8002116:	4091      	lsls	r1, r2
 8002118:	000a      	movs	r2, r1
 800211a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2104      	movs	r1, #4
 8002120:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002122:	40da      	lsrs	r2, r3
 8002124:	0013      	movs	r3, r2
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}

0800212e <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	23c0      	movs	r3, #192	@ 0xc0
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4013      	ands	r3, r2
 8002140:	d101      	bne.n	8002146 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <LL_ADC_REG_SetSequencerRanks>:
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	211f      	movs	r1, #31
 8002164:	400a      	ands	r2, r1
 8002166:	210f      	movs	r1, #15
 8002168:	4091      	lsls	r1, r2
 800216a:	000a      	movs	r2, r1
 800216c:	43d2      	mvns	r2, r2
 800216e:	401a      	ands	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	210f      	movs	r1, #15
 8002176:	4019      	ands	r1, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	201f      	movs	r0, #31
 800217c:	4003      	ands	r3, r0
 800217e:	4099      	lsls	r1, r3
 8002180:	000b      	movs	r3, r1
 8002182:	431a      	orrs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}

08002190 <LL_ADC_REG_SetSequencerChAdd>:
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	0a5b      	lsrs	r3, r3, #9
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <LL_ADC_REG_SetSequencerChRem>:
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	0252      	lsls	r2, r2, #9
 80021c4:	0a52      	lsrs	r2, r2, #9
 80021c6:	43d2      	mvns	r2, r2
 80021c8:	401a      	ands	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b002      	add	sp, #8
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <LL_ADC_SetChannelSamplingTime>:
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	0212      	lsls	r2, r2, #8
 80021ec:	43d2      	mvns	r2, r2
 80021ee:	401a      	ands	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	400b      	ands	r3, r1
 80021f8:	4904      	ldr	r1, [pc, #16]	@ (800220c <LL_ADC_SetChannelSamplingTime+0x34>)
 80021fa:	400b      	ands	r3, r1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	615a      	str	r2, [r3, #20]
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	7fffff00 	.word	0x7fffff00

08002210 <LL_ADC_EnableInternalRegulator>:
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a05      	ldr	r2, [pc, #20]	@ (8002234 <LL_ADC_EnableInternalRegulator+0x24>)
 800221e:	4013      	ands	r3, r2
 8002220:	2280      	movs	r2, #128	@ 0x80
 8002222:	0552      	lsls	r2, r2, #21
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	609a      	str	r2, [r3, #8]
}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b002      	add	sp, #8
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	6fffffe8 	.word	0x6fffffe8

08002238 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	401a      	ands	r2, r3
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	055b      	lsls	r3, r3, #21
 800224e:	429a      	cmp	r2, r3
 8002250:	d101      	bne.n	8002256 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <LL_ADC_Enable>:
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <LL_ADC_Enable+0x20>)
 800226e:	4013      	ands	r3, r2
 8002270:	2201      	movs	r2, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	609a      	str	r2, [r3, #8]
}
 8002278:	46c0      	nop			@ (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	7fffffe8 	.word	0x7fffffe8

08002284 <LL_ADC_Disable>:
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <LL_ADC_Disable+0x20>)
 8002292:	4013      	ands	r3, r2
 8002294:	2202      	movs	r2, #2
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
}
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	7fffffe8 	.word	0x7fffffe8

080022a8 <LL_ADC_IsEnabled>:
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <LL_ADC_IsEnabled+0x18>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_ADC_IsEnabled+0x1a>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <LL_ADC_REG_StartConversion>:
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <LL_ADC_REG_StartConversion+0x20>)
 80022da:	4013      	ands	r3, r2
 80022dc:	2204      	movs	r2, #4
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	7fffffe8 	.word	0x7fffffe8

080022f0 <LL_ADC_REG_IsConversionOngoing>:
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2204      	movs	r2, #4
 80022fe:	4013      	ands	r3, r2
 8002300:	2b04      	cmp	r3, #4
 8002302:	d101      	bne.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231c:	231f      	movs	r3, #31
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e17e      	b.n	8002638 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fa27 	bl	8001798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2254      	movs	r2, #84	@ 0x54
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff ff6b 	bl	8002238 <LL_ADC_IsInternalRegulatorEnabled>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d114      	bne.n	8002390 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff ff50 	bl	8002210 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002370:	4bb3      	ldr	r3, [pc, #716]	@ (8002640 <HAL_ADC_Init+0x32c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	49b3      	ldr	r1, [pc, #716]	@ (8002644 <HAL_ADC_Init+0x330>)
 8002376:	0018      	movs	r0, r3
 8002378:	f7fd fec6 	bl	8000108 <__udivsi3>
 800237c:	0003      	movs	r3, r0
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002382:	e002      	b.n	800238a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3b01      	subs	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff ff4f 	bl	8002238 <LL_ADC_IsInternalRegulatorEnabled>
 800239a:	1e03      	subs	r3, r0, #0
 800239c:	d10f      	bne.n	80023be <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	2210      	movs	r2, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ae:	2201      	movs	r2, #1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023b6:	231f      	movs	r3, #31
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff ff94 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 80023c8:	0003      	movs	r3, r0
 80023ca:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	2210      	movs	r2, #16
 80023d2:	4013      	ands	r3, r2
 80023d4:	d000      	beq.n	80023d8 <HAL_ADC_Init+0xc4>
 80023d6:	e122      	b.n	800261e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d000      	beq.n	80023e0 <HAL_ADC_Init+0xcc>
 80023de:	e11e      	b.n	800261e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	4a98      	ldr	r2, [pc, #608]	@ (8002648 <HAL_ADC_Init+0x334>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	2202      	movs	r2, #2
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff ff57 	bl	80022a8 <LL_ADC_IsEnabled>
 80023fa:	1e03      	subs	r3, r0, #0
 80023fc:	d000      	beq.n	8002400 <HAL_ADC_Init+0xec>
 80023fe:	e0ad      	b.n	800255c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800240a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7e5b      	ldrb	r3, [r3, #25]
 8002410:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002412:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e9b      	ldrb	r3, [r3, #26]
 8002418:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800241a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_ADC_Init+0x116>
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	015b      	lsls	r3, r3, #5
 8002428:	e000      	b.n	800242c <HAL_ADC_Init+0x118>
 800242a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800242c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002432:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	da04      	bge.n	8002446 <HAL_ADC_Init+0x132>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	e001      	b.n	800244a <HAL_ADC_Init+0x136>
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800244a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	212c      	movs	r1, #44	@ 0x2c
 8002450:	5c5b      	ldrb	r3, [r3, r1]
 8002452:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002454:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	5c9b      	ldrb	r3, [r3, r2]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d115      	bne.n	8002492 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7e9b      	ldrb	r3, [r3, #26]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2280      	movs	r2, #128	@ 0x80
 8002472:	0252      	lsls	r2, r2, #9
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e00b      	b.n	8002492 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	2220      	movs	r2, #32
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248a:	2201      	movs	r2, #1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249e:	23e0      	movs	r3, #224	@ 0xe0
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80024a8:	4313      	orrs	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4a65      	ldr	r2, [pc, #404]	@ (800264c <HAL_ADC_Init+0x338>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0f9b      	lsrs	r3, r3, #30
 80024cc:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024d2:	4313      	orrs	r3, r2
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	223c      	movs	r2, #60	@ 0x3c
 80024de:	5c9b      	ldrb	r3, [r3, r2]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d111      	bne.n	8002508 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0f9b      	lsrs	r3, r3, #30
 80024ea:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024f0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80024f6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80024fc:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	2201      	movs	r2, #1
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	4a50      	ldr	r2, [pc, #320]	@ (8002650 <HAL_ADC_Init+0x33c>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	430a      	orrs	r2, r1
 800251c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	23c0      	movs	r3, #192	@ 0xc0
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	429a      	cmp	r2, r3
 8002528:	d018      	beq.n	800255c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	05db      	lsls	r3, r3, #23
 8002532:	429a      	cmp	r2, r3
 8002534:	d012      	beq.n	800255c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	429a      	cmp	r2, r3
 8002540:	d00c      	beq.n	800255c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_ADC_Init+0x340>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a44      	ldr	r2, [pc, #272]	@ (8002658 <HAL_ADC_Init+0x344>)
 8002548:	4013      	ands	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	23f0      	movs	r3, #240	@ 0xf0
 8002552:	039b      	lsls	r3, r3, #14
 8002554:	401a      	ands	r2, r3
 8002556:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <HAL_ADC_Init+0x340>)
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002564:	001a      	movs	r2, r3
 8002566:	2100      	movs	r1, #0
 8002568:	f7ff fdad 	bl	80020c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002574:	4939      	ldr	r1, [pc, #228]	@ (800265c <HAL_ADC_Init+0x348>)
 8002576:	001a      	movs	r2, r3
 8002578:	f7ff fda5 	bl	80020c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2110      	movs	r1, #16
 8002590:	4249      	negs	r1, r1
 8002592:	430a      	orrs	r2, r1
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28
 8002596:	e018      	b.n	80025ca <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	039b      	lsls	r3, r3, #14
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d112      	bne.n	80025ca <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	221c      	movs	r2, #28
 80025b4:	4013      	ands	r3, r2
 80025b6:	2210      	movs	r2, #16
 80025b8:	4252      	negs	r2, r2
 80025ba:	409a      	lsls	r2, r3
 80025bc:	0011      	movs	r1, r2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2100      	movs	r1, #0
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff fd95 	bl	8002100 <LL_ADC_GetSamplingTimeCommonChannels>
 80025d6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10b      	bne.n	80025f8 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	2203      	movs	r2, #3
 80025ec:	4393      	bics	r3, r2
 80025ee:	2201      	movs	r2, #1
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025f6:	e01c      	b.n	8002632 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	2212      	movs	r2, #18
 80025fe:	4393      	bics	r3, r2
 8002600:	2210      	movs	r2, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	2201      	movs	r2, #1
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002614:	231f      	movs	r3, #31
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800261c:	e009      	b.n	8002632 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	2210      	movs	r2, #16
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800262a:	231f      	movs	r3, #31
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002632:	231f      	movs	r3, #31
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	781b      	ldrb	r3, [r3, #0]
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b008      	add	sp, #32
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000064 	.word	0x20000064
 8002644:	00030d40 	.word	0x00030d40
 8002648:	fffffefd 	.word	0xfffffefd
 800264c:	ffde0201 	.word	0xffde0201
 8002650:	1ffffc02 	.word	0x1ffffc02
 8002654:	40012708 	.word	0x40012708
 8002658:	ffc3ffff 	.word	0xffc3ffff
 800265c:	7fffff04 	.word	0x7fffff04

08002660 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff fe3d 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d16c      	bne.n	8002754 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2254      	movs	r2, #84	@ 0x54
 800267e:	5c9b      	ldrb	r3, [r3, r2]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_ADC_Start_DMA+0x28>
 8002684:	2302      	movs	r3, #2
 8002686:	e06c      	b.n	8002762 <HAL_ADC_Start_DMA+0x102>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2254      	movs	r2, #84	@ 0x54
 800268c:	2101      	movs	r1, #1
 800268e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	d113      	bne.n	80026c4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff fe01 	bl	80022a8 <LL_ADC_IsEnabled>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff fde8 	bl	8002284 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026c4:	2517      	movs	r5, #23
 80026c6:	197c      	adds	r4, r7, r5
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fa34 	bl	8002b38 <ADC_Enable>
 80026d0:	0003      	movs	r3, r0
 80026d2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026d4:	002c      	movs	r4, r5
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d13e      	bne.n	800275c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	4a22      	ldr	r2, [pc, #136]	@ (800276c <HAL_ADC_Start_DMA+0x10c>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	0052      	lsls	r2, r2, #1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002770 <HAL_ADC_Start_DMA+0x110>)
 80026fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002702:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <HAL_ADC_Start_DMA+0x114>)
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270a:	4a1b      	ldr	r2, [pc, #108]	@ (8002778 <HAL_ADC_Start_DMA+0x118>)
 800270c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	221c      	movs	r2, #28
 8002714:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2254      	movs	r2, #84	@ 0x54
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2110      	movs	r1, #16
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3340      	adds	r3, #64	@ 0x40
 8002738:	0019      	movs	r1, r3
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	193c      	adds	r4, r7, r4
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f000 fc6e 	bl	8003020 <HAL_DMA_Start_IT>
 8002744:	0003      	movs	r3, r0
 8002746:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff fdbd 	bl	80022cc <LL_ADC_REG_StartConversion>
 8002752:	e003      	b.n	800275c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002754:	2317      	movs	r3, #23
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2202      	movs	r2, #2
 800275a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800275c:	2317      	movs	r3, #23
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b006      	add	sp, #24
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	fffff0fe 	.word	0xfffff0fe
 8002770:	08002c35 	.word	0x08002c35
 8002774:	08002cfd 	.word	0x08002cfd
 8002778:	08002d1b 	.word	0x08002d1b

0800277c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002784:	46c0      	nop			@ (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002796:	2317      	movs	r3, #23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2254      	movs	r2, #84	@ 0x54
 80027a6:	5c9b      	ldrb	r3, [r3, r2]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x24>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e1be      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x3a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2254      	movs	r2, #84	@ 0x54
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fd97 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d000      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x3c>
 80027c6:	e1a1      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d100      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x46>
 80027d0:	e152      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	429a      	cmp	r2, r3
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027e2:	4ac2      	ldr	r2, [pc, #776]	@ (8002aec <HAL_ADC_ConfigChannel+0x360>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d108      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0019      	movs	r1, r3
 80027f2:	0010      	movs	r0, r2
 80027f4:	f7ff fccc 	bl	8002190 <LL_ADC_REG_SetSequencerChAdd>
 80027f8:	e0ed      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	211f      	movs	r1, #31
 8002804:	400b      	ands	r3, r1
 8002806:	210f      	movs	r1, #15
 8002808:	4099      	lsls	r1, r3
 800280a:	000b      	movs	r3, r1
 800280c:	43db      	mvns	r3, r3
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	025b      	lsls	r3, r3, #9
 8002818:	0a5b      	lsrs	r3, r3, #9
 800281a:	d105      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x9c>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	221f      	movs	r2, #31
 8002824:	4013      	ands	r3, r2
 8002826:	e0bc      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	4013      	ands	r3, r2
 8002830:	d000      	beq.n	8002834 <HAL_ADC_ConfigChannel+0xa8>
 8002832:	e0b5      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x214>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d000      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xb4>
 800283e:	e0ad      	b.n	800299c <HAL_ADC_ConfigChannel+0x210>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2204      	movs	r2, #4
 8002846:	4013      	ands	r3, r2
 8002848:	d000      	beq.n	800284c <HAL_ADC_ConfigChannel+0xc0>
 800284a:	e0a5      	b.n	8002998 <HAL_ADC_ConfigChannel+0x20c>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2208      	movs	r2, #8
 8002852:	4013      	ands	r3, r2
 8002854:	d000      	beq.n	8002858 <HAL_ADC_ConfigChannel+0xcc>
 8002856:	e09d      	b.n	8002994 <HAL_ADC_ConfigChannel+0x208>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	4013      	ands	r3, r2
 8002860:	d000      	beq.n	8002864 <HAL_ADC_ConfigChannel+0xd8>
 8002862:	e095      	b.n	8002990 <HAL_ADC_ConfigChannel+0x204>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2220      	movs	r2, #32
 800286a:	4013      	ands	r3, r2
 800286c:	d000      	beq.n	8002870 <HAL_ADC_ConfigChannel+0xe4>
 800286e:	e08d      	b.n	800298c <HAL_ADC_ConfigChannel+0x200>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2240      	movs	r2, #64	@ 0x40
 8002876:	4013      	ands	r3, r2
 8002878:	d000      	beq.n	800287c <HAL_ADC_ConfigChannel+0xf0>
 800287a:	e085      	b.n	8002988 <HAL_ADC_ConfigChannel+0x1fc>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2280      	movs	r2, #128	@ 0x80
 8002882:	4013      	ands	r3, r2
 8002884:	d000      	beq.n	8002888 <HAL_ADC_ConfigChannel+0xfc>
 8002886:	e07d      	b.n	8002984 <HAL_ADC_ConfigChannel+0x1f8>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4013      	ands	r3, r2
 8002892:	d000      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x10a>
 8002894:	e074      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1f4>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d000      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x118>
 80028a2:	e06b      	b.n	800297c <HAL_ADC_ConfigChannel+0x1f0>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4013      	ands	r3, r2
 80028ae:	d000      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0x126>
 80028b0:	e062      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1ec>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	d000      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x134>
 80028be:	e059      	b.n	8002974 <HAL_ADC_ConfigChannel+0x1e8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	4013      	ands	r3, r2
 80028ca:	d151      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1e4>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	019b      	lsls	r3, r3, #6
 80028d4:	4013      	ands	r3, r2
 80028d6:	d149      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1e0>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	@ 0x80
 80028de:	01db      	lsls	r3, r3, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	d141      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1dc>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	4013      	ands	r3, r2
 80028ee:	d139      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1d8>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	4013      	ands	r3, r2
 80028fa:	d131      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1d4>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	4013      	ands	r3, r2
 8002906:	d129      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	02db      	lsls	r3, r3, #11
 8002910:	4013      	ands	r3, r2
 8002912:	d121      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1cc>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	031b      	lsls	r3, r3, #12
 800291c:	4013      	ands	r3, r2
 800291e:	d119      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1c8>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	035b      	lsls	r3, r3, #13
 8002928:	4013      	ands	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1c4>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	@ 0x80
 8002932:	039b      	lsls	r3, r3, #14
 8002934:	4013      	ands	r3, r2
 8002936:	d109      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1c0>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	03db      	lsls	r3, r3, #15
 8002940:	4013      	ands	r3, r2
 8002942:	d001      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x1bc>
 8002944:	2316      	movs	r3, #22
 8002946:	e02c      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002948:	2300      	movs	r3, #0
 800294a:	e02a      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 800294c:	2315      	movs	r3, #21
 800294e:	e028      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002950:	2314      	movs	r3, #20
 8002952:	e026      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002954:	2313      	movs	r3, #19
 8002956:	e024      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002958:	2312      	movs	r3, #18
 800295a:	e022      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 800295c:	2311      	movs	r3, #17
 800295e:	e020      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002960:	2310      	movs	r3, #16
 8002962:	e01e      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002964:	230f      	movs	r3, #15
 8002966:	e01c      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002968:	230e      	movs	r3, #14
 800296a:	e01a      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 800296c:	230d      	movs	r3, #13
 800296e:	e018      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002970:	230c      	movs	r3, #12
 8002972:	e016      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002974:	230b      	movs	r3, #11
 8002976:	e014      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002978:	230a      	movs	r3, #10
 800297a:	e012      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 800297c:	2309      	movs	r3, #9
 800297e:	e010      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002980:	2308      	movs	r3, #8
 8002982:	e00e      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002984:	2307      	movs	r3, #7
 8002986:	e00c      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002988:	2306      	movs	r3, #6
 800298a:	e00a      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 800298c:	2305      	movs	r3, #5
 800298e:	e008      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002990:	2304      	movs	r3, #4
 8002992:	e006      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002994:	2303      	movs	r3, #3
 8002996:	e004      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 8002998:	2302      	movs	r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x216>
 80029a0:	2300      	movs	r3, #0
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6852      	ldr	r2, [r2, #4]
 80029a6:	201f      	movs	r0, #31
 80029a8:	4002      	ands	r2, r0
 80029aa:	4093      	lsls	r3, r2
 80029ac:	000a      	movs	r2, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d808      	bhi.n	80029d6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	f7ff fbbd 	bl	8002150 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	001a      	movs	r2, r3
 80029e4:	f7ff fbf8 	bl	80021d8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db00      	blt.n	80029f2 <HAL_ADC_ConfigChannel+0x266>
 80029f0:	e096      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f2:	4b3f      	ldr	r3, [pc, #252]	@ (8002af0 <HAL_ADC_ConfigChannel+0x364>)
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7ff fb59 	bl	80020ac <LL_ADC_GetCommonPathInternalCh>
 80029fa:	0003      	movs	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3c      	ldr	r2, [pc, #240]	@ (8002af4 <HAL_ADC_ConfigChannel+0x368>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d123      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a10:	d11e      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2280      	movs	r2, #128	@ 0x80
 8002a16:	0412      	lsls	r2, r2, #16
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	4a35      	ldr	r2, [pc, #212]	@ (8002af0 <HAL_ADC_ConfigChannel+0x364>)
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f7ff fb30 	bl	8002084 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002a24:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <HAL_ADC_ConfigChannel+0x36c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4934      	ldr	r1, [pc, #208]	@ (8002afc <HAL_ADC_ConfigChannel+0x370>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7fd fb6c 	bl	8000108 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	0013      	movs	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	189b      	adds	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a40:	e002      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f9      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a4e:	e067      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2a      	ldr	r2, [pc, #168]	@ (8002b00 <HAL_ADC_ConfigChannel+0x374>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d162      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	03db      	lsls	r3, r3, #15
 8002a60:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a62:	d15d      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2280      	movs	r2, #128	@ 0x80
 8002a68:	03d2      	lsls	r2, r2, #15
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	4a20      	ldr	r2, [pc, #128]	@ (8002af0 <HAL_ADC_ConfigChannel+0x364>)
 8002a6e:	0019      	movs	r1, r3
 8002a70:	0010      	movs	r0, r2
 8002a72:	f7ff fb07 	bl	8002084 <LL_ADC_SetCommonPathInternalCh>
 8002a76:	e053      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	061b      	lsls	r3, r3, #24
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d004      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a88:	4a18      	ldr	r2, [pc, #96]	@ (8002aec <HAL_ADC_ConfigChannel+0x360>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d107      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0019      	movs	r1, r3
 8002a98:	0010      	movs	r0, r2
 8002a9a:	f7ff fb8a 	bl	80021b2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da3c      	bge.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_ADC_ConfigChannel+0x364>)
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff faff 	bl	80020ac <LL_ADC_GetCommonPathInternalCh>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8002af4 <HAL_ADC_ConfigChannel+0x368>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d108      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <HAL_ADC_ConfigChannel+0x378>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8002af0 <HAL_ADC_ConfigChannel+0x364>)
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	f7ff fadc 	bl	8002084 <LL_ADC_SetCommonPathInternalCh>
 8002acc:	e028      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b00 <HAL_ADC_ConfigChannel+0x374>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d123      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4a0b      	ldr	r2, [pc, #44]	@ (8002b08 <HAL_ADC_ConfigChannel+0x37c>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <HAL_ADC_ConfigChannel+0x364>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f7ff face 	bl	8002084 <LL_ADC_SetCommonPathInternalCh>
 8002ae8:	e01a      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x394>
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	80000004 	.word	0x80000004
 8002af0:	40012708 	.word	0x40012708
 8002af4:	a4000200 	.word	0xa4000200
 8002af8:	20000064 	.word	0x20000064
 8002afc:	00030d40 	.word	0x00030d40
 8002b00:	a8000400 	.word	0xa8000400
 8002b04:	ff7fffff 	.word	0xff7fffff
 8002b08:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	2220      	movs	r2, #32
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b18:	2317      	movs	r3, #23
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2254      	movs	r2, #84	@ 0x54
 8002b24:	2100      	movs	r1, #0
 8002b26:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002b28:	2317      	movs	r3, #23
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b006      	add	sp, #24
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			@ (mov r8, r8)

08002b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff fbad 	bl	80022a8 <LL_ADC_IsEnabled>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d162      	bne.n	8002c18 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a32      	ldr	r2, [pc, #200]	@ (8002c24 <ADC_Enable+0xec>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b62:	2210      	movs	r2, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6e:	2201      	movs	r2, #1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e04f      	b.n	8002c1a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff fb6e 	bl	8002260 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002b84:	4b28      	ldr	r3, [pc, #160]	@ (8002c28 <ADC_Enable+0xf0>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7ff fa90 	bl	80020ac <LL_ADC_GetCommonPathInternalCh>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	2380      	movs	r3, #128	@ 0x80
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	4013      	ands	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b96:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <ADC_Enable+0xf4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4925      	ldr	r1, [pc, #148]	@ (8002c30 <ADC_Enable+0xf8>)
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7fd fab3 	bl	8000108 <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002ba6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ba8:	e002      	b.n	8002bb0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f9      	bne.n	8002baa <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7e5b      	ldrb	r3, [r3, #25]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d02c      	beq.n	8002c18 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002bbe:	f7ff fa33 	bl	8002028 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc6:	e020      	b.n	8002c0a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff fb6b 	bl	80022a8 <LL_ADC_IsEnabled>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d104      	bne.n	8002be0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff fb40 	bl	8002260 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be0:	f7ff fa22 	bl	8002028 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d90d      	bls.n	8002c0a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	2201      	movs	r2, #1
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d1d7      	bne.n	8002bc8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b004      	add	sp, #16
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	80000017 	.word	0x80000017
 8002c28:	40012708 	.word	0x40012708
 8002c2c:	20000064 	.word	0x20000064
 8002c30:	00030d40 	.word	0x00030d40

08002c34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	2250      	movs	r2, #80	@ 0x50
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d141      	bne.n	8002cd0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff fa65 	bl	800212e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d02e      	beq.n	8002cc6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	7e9b      	ldrb	r3, [r3, #26]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d12a      	bne.n	8002cc6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2208      	movs	r2, #8
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d123      	bne.n	8002cc6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff fb34 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d110      	bne.n	8002cae <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	210c      	movs	r1, #12
 8002c98:	438a      	bics	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <ADC_DMAConvCplt+0xc4>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cac:	e00b      	b.n	8002cc6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd fbe3 	bl	8000494 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cce:	e00f      	b.n	8002cf0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff fd4d 	bl	800277c <HAL_ADC_ErrorCallback>
}
 8002ce2:	e005      	b.n	8002cf0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	0010      	movs	r0, r2
 8002cee:	4798      	blx	r3
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fffffefe 	.word	0xfffffefe

08002cfc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7fd fbcf 	bl	80004b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	2240      	movs	r2, #64	@ 0x40
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	2204      	movs	r2, #4
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff fd1a 	bl	800277c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d48:	46c0      	nop			@ (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	0002      	movs	r2, r0
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d62:	d809      	bhi.n	8002d78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d64:	1dfb      	adds	r3, r7, #7
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	001a      	movs	r2, r3
 8002d6a:	231f      	movs	r3, #31
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <__NVIC_EnableIRQ+0x30>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	4091      	lsls	r1, r2
 8002d74:	000a      	movs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d78:	46c0      	nop			@ (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d98:	d828      	bhi.n	8002dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e58 <__NVIC_SetPriority+0xd4>)
 8002d9c:	1dfb      	adds	r3, r7, #7
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	33c0      	adds	r3, #192	@ 0xc0
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	589b      	ldr	r3, [r3, r2]
 8002daa:	1dfa      	adds	r2, r7, #7
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	0011      	movs	r1, r2
 8002db0:	2203      	movs	r2, #3
 8002db2:	400a      	ands	r2, r1
 8002db4:	00d2      	lsls	r2, r2, #3
 8002db6:	21ff      	movs	r1, #255	@ 0xff
 8002db8:	4091      	lsls	r1, r2
 8002dba:	000a      	movs	r2, r1
 8002dbc:	43d2      	mvns	r2, r2
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	22ff      	movs	r2, #255	@ 0xff
 8002dc8:	401a      	ands	r2, r3
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	4003      	ands	r3, r0
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dd8:	481f      	ldr	r0, [pc, #124]	@ (8002e58 <__NVIC_SetPriority+0xd4>)
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	430a      	orrs	r2, r1
 8002de4:	33c0      	adds	r3, #192	@ 0xc0
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dea:	e031      	b.n	8002e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dec:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <__NVIC_SetPriority+0xd8>)
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	0019      	movs	r1, r3
 8002df4:	230f      	movs	r3, #15
 8002df6:	400b      	ands	r3, r1
 8002df8:	3b08      	subs	r3, #8
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3306      	adds	r3, #6
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	3304      	adds	r3, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	1dfa      	adds	r2, r7, #7
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	400a      	ands	r2, r1
 8002e10:	00d2      	lsls	r2, r2, #3
 8002e12:	21ff      	movs	r1, #255	@ 0xff
 8002e14:	4091      	lsls	r1, r2
 8002e16:	000a      	movs	r2, r1
 8002e18:	43d2      	mvns	r2, r2
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	22ff      	movs	r2, #255	@ 0xff
 8002e24:	401a      	ands	r2, r3
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	4003      	ands	r3, r0
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e34:	4809      	ldr	r0, [pc, #36]	@ (8002e5c <__NVIC_SetPriority+0xd8>)
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	001c      	movs	r4, r3
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	4023      	ands	r3, r4
 8002e40:	3b08      	subs	r3, #8
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	430a      	orrs	r2, r1
 8002e46:	3306      	adds	r3, #6
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	18c3      	adds	r3, r0, r3
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	601a      	str	r2, [r3, #0]
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b003      	add	sp, #12
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	045b      	lsls	r3, r3, #17
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d301      	bcc.n	8002e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e74:	2301      	movs	r3, #1
 8002e76:	e010      	b.n	8002e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <SysTick_Config+0x44>)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e80:	2301      	movs	r3, #1
 8002e82:	425b      	negs	r3, r3
 8002e84:	2103      	movs	r1, #3
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff ff7c 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <SysTick_Config+0x44>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <SysTick_Config+0x44>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	1c02      	adds	r2, r0, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	0011      	movs	r1, r2
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff ff5d 	bl	8002d84 <__NVIC_SetPriority>
}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	0002      	movs	r2, r0
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7ff ff33 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff ffaf 	bl	8002e60 <SysTick_Config>
 8002f02:	0003      	movs	r3, r0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e077      	b.n	800300e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	@ (8003018 <HAL_DMA_Init+0x10c>)
 8002f24:	4694      	mov	ip, r2
 8002f26:	4463      	add	r3, ip
 8002f28:	2114      	movs	r1, #20
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7fd f8ec 	bl	8000108 <__udivsi3>
 8002f30:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002f32:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2225      	movs	r2, #37	@ 0x25
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4934      	ldr	r1, [pc, #208]	@ (800301c <HAL_DMA_Init+0x110>)
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 fab5 	bl	80034f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	01db      	lsls	r3, r3, #7
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d102      	bne.n	8002fa0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	21ff      	movs	r1, #255	@ 0xff
 8002faa:	400a      	ands	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fb6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_DMA_Init+0xd8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d80d      	bhi.n	8002fe4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fac0 	bl	8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	e008      	b.n	8002ff6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2225      	movs	r2, #37	@ 0x25
 8003000:	2101      	movs	r1, #1
 8003002:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2224      	movs	r2, #36	@ 0x24
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b002      	add	sp, #8
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	bffdfff8 	.word	0xbffdfff8
 800301c:	ffff800f 	.word	0xffff800f

08003020 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2317      	movs	r3, #23
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2224      	movs	r2, #36	@ 0x24
 800303a:	5c9b      	ldrb	r3, [r3, r2]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Start_IT+0x24>
 8003040:	2302      	movs	r3, #2
 8003042:	e070      	b.n	8003126 <HAL_DMA_Start_IT+0x106>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2224      	movs	r2, #36	@ 0x24
 8003048:	2101      	movs	r1, #1
 800304a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2225      	movs	r2, #37	@ 0x25
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d157      	bne.n	8003108 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2225      	movs	r2, #37	@ 0x25
 800305c:	2102      	movs	r1, #2
 800305e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	438a      	bics	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f9fb 	bl	8003478 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	210e      	movs	r1, #14
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e00f      	b.n	80030bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2104      	movs	r1, #4
 80030a8:	438a      	bics	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	210a      	movs	r1, #10
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	025b      	lsls	r3, r3, #9
 80030c6:	4013      	ands	r3, r2
 80030c8:	d008      	beq.n	80030dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d4:	2180      	movs	r1, #128	@ 0x80
 80030d6:	0049      	lsls	r1, r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ee:	2180      	movs	r1, #128	@ 0x80
 80030f0:	0049      	lsls	r1, r1, #1
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e007      	b.n	8003118 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2224      	movs	r2, #36	@ 0x24
 800310c:	2100      	movs	r1, #0
 800310e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003110:	2317      	movs	r3, #23
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2202      	movs	r2, #2
 8003116:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2224      	movs	r2, #36	@ 0x24
 800311c:	2100      	movs	r1, #0
 800311e:	5499      	strb	r1, [r3, r2]

  return status;
 8003120:	2317      	movs	r3, #23
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	781b      	ldrb	r3, [r3, #0]
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b006      	add	sp, #24
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e050      	b.n	80031e4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2225      	movs	r2, #37	@ 0x25
 8003146:	5c9b      	ldrb	r3, [r3, r2]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d008      	beq.n	8003160 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2204      	movs	r2, #4
 8003152:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	@ 0x24
 8003158:	2100      	movs	r1, #0
 800315a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e041      	b.n	80031e4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	210e      	movs	r1, #14
 800316c:	438a      	bics	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	491c      	ldr	r1, [pc, #112]	@ (80031ec <HAL_DMA_Abort+0xbc>)
 800317c:	400a      	ands	r2, r1
 800317e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003190:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <HAL_DMA_Abort+0xc0>)
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	221c      	movs	r2, #28
 800319a:	4013      	ands	r3, r2
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	4b13      	ldr	r3, [pc, #76]	@ (80031f0 <HAL_DMA_Abort+0xc0>)
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00c      	beq.n	80031d2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c2:	490a      	ldr	r1, [pc, #40]	@ (80031ec <HAL_DMA_Abort+0xbc>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80031d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2225      	movs	r2, #37	@ 0x25
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2224      	movs	r2, #36	@ 0x24
 80031de:	2100      	movs	r1, #0
 80031e0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	fffffeff 	.word	0xfffffeff
 80031f0:	40020000 	.word	0x40020000

080031f4 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	230f      	movs	r3, #15
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	@ 0x24
 8003208:	2100      	movs	r1, #0
 800320a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	@ 0x24
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_DMA_Abort_IT+0x26>
 8003216:	2302      	movs	r3, #2
 8003218:	e05e      	b.n	80032d8 <HAL_DMA_Abort_IT+0xe4>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2224      	movs	r2, #36	@ 0x24
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2225      	movs	r2, #37	@ 0x25
 8003226:	5c9b      	ldrb	r3, [r3, r2]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d007      	beq.n	800323e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e049      	b.n	80032d2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	210e      	movs	r1, #14
 800324a:	438a      	bics	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	438a      	bics	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003268:	491d      	ldr	r1, [pc, #116]	@ (80032e0 <HAL_DMA_Abort_IT+0xec>)
 800326a:	400a      	ands	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800326e:	4b1d      	ldr	r3, [pc, #116]	@ (80032e4 <HAL_DMA_Abort_IT+0xf0>)
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	221c      	movs	r2, #28
 8003278:	4013      	ands	r3, r2
 800327a:	2201      	movs	r2, #1
 800327c:	409a      	lsls	r2, r3
 800327e:	4b19      	ldr	r3, [pc, #100]	@ (80032e4 <HAL_DMA_Abort_IT+0xf0>)
 8003280:	430a      	orrs	r2, r1
 8003282:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800328c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00c      	beq.n	80032b0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a0:	490f      	ldr	r1, [pc, #60]	@ (80032e0 <HAL_DMA_Abort_IT+0xec>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80032ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2225      	movs	r2, #37	@ 0x25
 80032b4:	2101      	movs	r1, #1
 80032b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	@ 0x24
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	0010      	movs	r0, r2
 80032d0:	4798      	blx	r3
    }
  }
  return status;
 80032d2:	230f      	movs	r3, #15
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	781b      	ldrb	r3, [r3, #0]
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b004      	add	sp, #16
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fffffeff 	.word	0xfffffeff
 80032e4:	40020000 	.word	0x40020000

080032e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80032f0:	4b55      	ldr	r3, [pc, #340]	@ (8003448 <HAL_DMA_IRQHandler+0x160>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	221c      	movs	r2, #28
 8003304:	4013      	ands	r3, r2
 8003306:	2204      	movs	r2, #4
 8003308:	409a      	lsls	r2, r3
 800330a:	0013      	movs	r3, r2
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	d027      	beq.n	8003362 <HAL_DMA_IRQHandler+0x7a>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2204      	movs	r2, #4
 8003316:	4013      	ands	r3, r2
 8003318:	d023      	beq.n	8003362 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2220      	movs	r2, #32
 8003322:	4013      	ands	r3, r2
 8003324:	d107      	bne.n	8003336 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2104      	movs	r1, #4
 8003332:	438a      	bics	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8003336:	4b44      	ldr	r3, [pc, #272]	@ (8003448 <HAL_DMA_IRQHandler+0x160>)
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	221c      	movs	r2, #28
 8003340:	4013      	ands	r3, r2
 8003342:	2204      	movs	r2, #4
 8003344:	409a      	lsls	r2, r3
 8003346:	4b40      	ldr	r3, [pc, #256]	@ (8003448 <HAL_DMA_IRQHandler+0x160>)
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	2b00      	cmp	r3, #0
 8003352:	d100      	bne.n	8003356 <HAL_DMA_IRQHandler+0x6e>
 8003354:	e073      	b.n	800343e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	0010      	movs	r0, r2
 800335e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003360:	e06d      	b.n	800343e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	221c      	movs	r2, #28
 8003368:	4013      	ands	r3, r2
 800336a:	2202      	movs	r2, #2
 800336c:	409a      	lsls	r2, r3
 800336e:	0013      	movs	r3, r2
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	d02e      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xec>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2202      	movs	r2, #2
 800337a:	4013      	ands	r3, r2
 800337c:	d02a      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2220      	movs	r2, #32
 8003386:	4013      	ands	r3, r2
 8003388:	d10b      	bne.n	80033a2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	210a      	movs	r1, #10
 8003396:	438a      	bics	r2, r1
 8003398:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2225      	movs	r2, #37	@ 0x25
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80033a2:	4b29      	ldr	r3, [pc, #164]	@ (8003448 <HAL_DMA_IRQHandler+0x160>)
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	221c      	movs	r2, #28
 80033ac:	4013      	ands	r3, r2
 80033ae:	2202      	movs	r2, #2
 80033b0:	409a      	lsls	r2, r3
 80033b2:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_DMA_IRQHandler+0x160>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d03a      	beq.n	800343e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	0010      	movs	r0, r2
 80033d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033d2:	e034      	b.n	800343e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	221c      	movs	r2, #28
 80033da:	4013      	ands	r3, r2
 80033dc:	2208      	movs	r2, #8
 80033de:	409a      	lsls	r2, r3
 80033e0:	0013      	movs	r3, r2
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	d02b      	beq.n	8003440 <HAL_DMA_IRQHandler+0x158>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2208      	movs	r2, #8
 80033ec:	4013      	ands	r3, r2
 80033ee:	d027      	beq.n	8003440 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	210e      	movs	r1, #14
 80033fc:	438a      	bics	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_DMA_IRQHandler+0x160>)
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	221c      	movs	r2, #28
 800340a:	4013      	ands	r3, r2
 800340c:	2201      	movs	r2, #1
 800340e:	409a      	lsls	r2, r3
 8003410:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <HAL_DMA_IRQHandler+0x160>)
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2225      	movs	r2, #37	@ 0x25
 8003420:	2101      	movs	r1, #1
 8003422:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	@ 0x24
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	0010      	movs	r0, r2
 800343c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	46c0      	nop			@ (mov r8, r8)
}
 8003442:	46bd      	mov	sp, r7
 8003444:	b004      	add	sp, #16
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40020000 	.word	0x40020000

0800344c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2225      	movs	r2, #37	@ 0x25
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	b2db      	uxtb	r3, r3
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800348e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80034a2:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <DMA_SetConfig+0x7c>)
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	221c      	movs	r2, #28
 80034ac:	4013      	ands	r3, r2
 80034ae:	2201      	movs	r2, #1
 80034b0:	409a      	lsls	r2, r3
 80034b2:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <DMA_SetConfig+0x7c>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d108      	bne.n	80034da <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034d8:	e007      	b.n	80034ea <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	60da      	str	r2, [r3, #12]
}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	40020000 	.word	0x40020000

080034f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	001a      	movs	r2, r3
 8003506:	23ff      	movs	r3, #255	@ 0xff
 8003508:	4013      	ands	r3, r2
 800350a:	3b08      	subs	r3, #8
 800350c:	2114      	movs	r1, #20
 800350e:	0018      	movs	r0, r3
 8003510:	f7fc fdfa 	bl	8000108 <__udivsi3>
 8003514:	0003      	movs	r3, r0
 8003516:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800351e:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003520:	4694      	mov	ip, r2
 8003522:	4463      	add	r3, ip
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	001a      	movs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a07      	ldr	r2, [pc, #28]	@ (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003530:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	221c      	movs	r2, #28
 8003536:	4013      	ands	r3, r2
 8003538:	2201      	movs	r2, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}
 8003548:	10008200 	.word	0x10008200
 800354c:	40020880 	.word	0x40020880

08003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	22ff      	movs	r2, #255	@ 0xff
 800355e:	4013      	ands	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003566:	4694      	mov	ip, r2
 8003568:	4463      	add	r3, ip
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	001a      	movs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a07      	ldr	r2, [pc, #28]	@ (8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003576:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3b01      	subs	r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	4013      	ands	r3, r2
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b004      	add	sp, #16
 800358e:	bd80      	pop	{r7, pc}
 8003590:	1000823f 	.word	0x1000823f
 8003594:	40020940 	.word	0x40020940

08003598 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035a6:	e153      	b.n	8003850 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4091      	lsls	r1, r2
 80035b2:	000a      	movs	r2, r1
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d100      	bne.n	80035c0 <HAL_GPIO_Init+0x28>
 80035be:	e144      	b.n	800384a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x38>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b12      	cmp	r3, #18
 80035ce:	d125      	bne.n	800361c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	58d3      	ldr	r3, [r2, r3]
 80035dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2207      	movs	r2, #7
 80035e2:	4013      	ands	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	409a      	lsls	r2, r3
 80035ea:	0013      	movs	r3, r2
 80035ec:	43da      	mvns	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	220f      	movs	r2, #15
 80035fa:	401a      	ands	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2107      	movs	r1, #7
 8003600:	400b      	ands	r3, r1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	409a      	lsls	r2, r3
 8003606:	0013      	movs	r3, r2
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	08da      	lsrs	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3208      	adds	r2, #8
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	6979      	ldr	r1, [r7, #20]
 800361a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	409a      	lsls	r2, r3
 800362a:	0013      	movs	r3, r2
 800362c:	43da      	mvns	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4013      	ands	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	401a      	ands	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	409a      	lsls	r2, r3
 8003642:	0013      	movs	r3, r2
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d00b      	beq.n	8003670 <HAL_GPIO_Init+0xd8>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d007      	beq.n	8003670 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003664:	2b11      	cmp	r3, #17
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b12      	cmp	r3, #18
 800366e:	d130      	bne.n	80036d2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	409a      	lsls	r2, r3
 800367e:	0013      	movs	r3, r2
 8003680:	43da      	mvns	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4013      	ands	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	409a      	lsls	r2, r3
 8003692:	0013      	movs	r3, r2
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036a6:	2201      	movs	r2, #1
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	409a      	lsls	r2, r3
 80036ac:	0013      	movs	r3, r2
 80036ae:	43da      	mvns	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4013      	ands	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	2201      	movs	r2, #1
 80036be:	401a      	ands	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	409a      	lsls	r2, r3
 80036c4:	0013      	movs	r3, r2
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d017      	beq.n	800370a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	2203      	movs	r2, #3
 80036e6:	409a      	lsls	r2, r3
 80036e8:	0013      	movs	r3, r2
 80036ea:	43da      	mvns	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4013      	ands	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	0013      	movs	r3, r2
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	055b      	lsls	r3, r3, #21
 8003712:	4013      	ands	r3, r2
 8003714:	d100      	bne.n	8003718 <HAL_GPIO_Init+0x180>
 8003716:	e098      	b.n	800384a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003718:	4a53      	ldr	r2, [pc, #332]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3318      	adds	r3, #24
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	589b      	ldr	r3, [r3, r2]
 8003724:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2203      	movs	r2, #3
 800372a:	4013      	ands	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	220f      	movs	r2, #15
 8003730:	409a      	lsls	r2, r3
 8003732:	0013      	movs	r3, r2
 8003734:	43da      	mvns	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4013      	ands	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	23a0      	movs	r3, #160	@ 0xa0
 8003740:	05db      	lsls	r3, r3, #23
 8003742:	429a      	cmp	r2, r3
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x1e2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a48      	ldr	r2, [pc, #288]	@ (800386c <HAL_GPIO_Init+0x2d4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x1de>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a47      	ldr	r2, [pc, #284]	@ (8003870 <HAL_GPIO_Init+0x2d8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x1da>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <HAL_GPIO_Init+0x2dc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x1d6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a45      	ldr	r2, [pc, #276]	@ (8003878 <HAL_GPIO_Init+0x2e0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x1d2>
 8003766:	2305      	movs	r3, #5
 8003768:	e008      	b.n	800377c <HAL_GPIO_Init+0x1e4>
 800376a:	2306      	movs	r3, #6
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x1e4>
 800376e:	2303      	movs	r3, #3
 8003770:	e004      	b.n	800377c <HAL_GPIO_Init+0x1e4>
 8003772:	2302      	movs	r3, #2
 8003774:	e002      	b.n	800377c <HAL_GPIO_Init+0x1e4>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_GPIO_Init+0x1e4>
 800377a:	2300      	movs	r3, #0
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	2103      	movs	r1, #3
 8003780:	400a      	ands	r2, r1
 8003782:	00d2      	lsls	r2, r2, #3
 8003784:	4093      	lsls	r3, r2
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800378c:	4936      	ldr	r1, [pc, #216]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	3318      	adds	r3, #24
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800379a:	4a33      	ldr	r2, [pc, #204]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	58d3      	ldr	r3, [r2, r3]
 80037a0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	43da      	mvns	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	4013      	ands	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	2380      	movs	r3, #128	@ 0x80
 80037b2:	025b      	lsls	r3, r3, #9
 80037b4:	4013      	ands	r3, r2
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80037c0:	4929      	ldr	r1, [pc, #164]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037c2:	2280      	movs	r2, #128	@ 0x80
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80037c8:	4a27      	ldr	r2, [pc, #156]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037ca:	2384      	movs	r3, #132	@ 0x84
 80037cc:	58d3      	ldr	r3, [r2, r3]
 80037ce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	4013      	ands	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	029b      	lsls	r3, r3, #10
 80037e2:	4013      	ands	r3, r2
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80037ee:	491e      	ldr	r1, [pc, #120]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037f0:	2284      	movs	r2, #132	@ 0x84
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80037f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	43da      	mvns	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4013      	ands	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	2380      	movs	r3, #128	@ 0x80
 800380c:	035b      	lsls	r3, r3, #13
 800380e:	4013      	ands	r3, r2
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800381a:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	43da      	mvns	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	4013      	ands	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	039b      	lsls	r3, r3, #14
 8003838:	4013      	ands	r3, r2
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003844:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <HAL_GPIO_Init+0x2d0>)
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	3301      	adds	r3, #1
 800384e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	40da      	lsrs	r2, r3
 8003858:	1e13      	subs	r3, r2, #0
 800385a:	d000      	beq.n	800385e <HAL_GPIO_Init+0x2c6>
 800385c:	e6a4      	b.n	80035a8 <HAL_GPIO_Init+0x10>
  }
}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b006      	add	sp, #24
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021800 	.word	0x40021800
 800386c:	50000400 	.word	0x50000400
 8003870:	50000800 	.word	0x50000800
 8003874:	50000c00 	.word	0x50000c00
 8003878:	50001400 	.word	0x50001400

0800387c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	0008      	movs	r0, r1
 8003886:	0011      	movs	r1, r2
 8003888:	1cbb      	adds	r3, r7, #2
 800388a:	1c02      	adds	r2, r0, #0
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	1c7b      	adds	r3, r7, #1
 8003890:	1c0a      	adds	r2, r1, #0
 8003892:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003894:	1c7b      	adds	r3, r7, #1
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389c:	1cbb      	adds	r3, r7, #2
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a4:	e003      	b.n	80038ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a6:	1cbb      	adds	r3, r7, #2
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b002      	add	sp, #8
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e08f      	b.n	80039ea <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2241      	movs	r2, #65	@ 0x41
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2240      	movs	r2, #64	@ 0x40
 80038da:	2100      	movs	r1, #0
 80038dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7fd ffe5 	bl	80018b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2241      	movs	r2, #65	@ 0x41
 80038ea:	2124      	movs	r1, #36	@ 0x24
 80038ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	438a      	bics	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	493b      	ldr	r1, [pc, #236]	@ (80039f4 <HAL_I2C_Init+0x13c>)
 8003908:	400a      	ands	r2, r1
 800390a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4938      	ldr	r1, [pc, #224]	@ (80039f8 <HAL_I2C_Init+0x140>)
 8003918:	400a      	ands	r2, r1
 800391a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d108      	bne.n	8003936 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	0209      	lsls	r1, r1, #8
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	e007      	b.n	8003946 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2184      	movs	r1, #132	@ 0x84
 8003940:	0209      	lsls	r1, r1, #8
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d109      	bne.n	8003962 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2180      	movs	r1, #128	@ 0x80
 800395a:	0109      	lsls	r1, r1, #4
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	e007      	b.n	8003972 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4923      	ldr	r1, [pc, #140]	@ (80039fc <HAL_I2C_Init+0x144>)
 800396e:	400a      	ands	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4920      	ldr	r1, [pc, #128]	@ (8003a00 <HAL_I2C_Init+0x148>)
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	491a      	ldr	r1, [pc, #104]	@ (80039f8 <HAL_I2C_Init+0x140>)
 800398e:	400a      	ands	r2, r1
 8003990:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2241      	movs	r2, #65	@ 0x41
 80039d6:	2120      	movs	r1, #32
 80039d8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2242      	movs	r2, #66	@ 0x42
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b002      	add	sp, #8
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	f0ffffff 	.word	0xf0ffffff
 80039f8:	ffff7fff 	.word	0xffff7fff
 80039fc:	fffff7ff 	.word	0xfffff7ff
 8003a00:	02008000 	.word	0x02008000

08003a04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	68f9      	ldr	r1, [r7, #12]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
  }
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b004      	add	sp, #16
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2280      	movs	r2, #128	@ 0x80
 8003a5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a60:	d00a      	beq.n	8003a78 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	2201      	movs	r2, #1
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2280      	movs	r2, #128	@ 0x80
 8003a74:	0052      	lsls	r2, r2, #1
 8003a76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2280      	movs	r2, #128	@ 0x80
 8003a86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a88:	d00a      	beq.n	8003aa0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	2208      	movs	r2, #8
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	00d2      	lsls	r2, r2, #3
 8003a9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2280      	movs	r2, #128	@ 0x80
 8003aae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2280      	movs	r2, #128	@ 0x80
 8003ac4:	0092      	lsls	r2, r2, #2
 8003ac6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	220b      	movs	r2, #11
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d005      	beq.n	8003ae2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 fc1d 	bl	800431c <I2C_ITError>
  }
}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b006      	add	sp, #24
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b002      	add	sp, #8
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b002      	add	sp, #8
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	0008      	movs	r0, r1
 8003b14:	0011      	movs	r1, r2
 8003b16:	1cfb      	adds	r3, r7, #3
 8003b18:	1c02      	adds	r2, r0, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	003b      	movs	r3, r7
 8003b1e:	1c0a      	adds	r2, r1, #0
 8003b20:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b002      	add	sp, #8
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2240      	movs	r2, #64	@ 0x40
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <I2C_Slave_ISR_IT+0x24>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0e7      	b.n	8003d40 <I2C_Slave_ISR_IT+0x1f4>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2240      	movs	r2, #64	@ 0x40
 8003b74:	2101      	movs	r1, #1
 8003b76:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d00a      	beq.n	8003b96 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b86:	d006      	beq.n	8003b96 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	0011      	movs	r1, r2
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f9e4 	bl	8003f5c <I2C_ITSlaveCplt>
 8003b94:	e0cf      	b.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2210      	movs	r2, #16
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d052      	beq.n	8003c44 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ba4:	d04e      	beq.n	8003c44 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d12d      	bne.n	8003c0c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2241      	movs	r2, #65	@ 0x41
 8003bb4:	5c9b      	ldrb	r3, [r3, r2]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b28      	cmp	r3, #40	@ 0x28
 8003bba:	d10b      	bne.n	8003bd4 <I2C_Slave_ISR_IT+0x88>
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	049b      	lsls	r3, r3, #18
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d106      	bne.n	8003bd4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	0011      	movs	r1, r2
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 fb4d 	bl	800426c <I2C_ITListenCplt>
 8003bd2:	e036      	b.n	8003c42 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2241      	movs	r2, #65	@ 0x41
 8003bd8:	5c9b      	ldrb	r3, [r3, r2]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b29      	cmp	r3, #41	@ 0x29
 8003bde:	d110      	bne.n	8003c02 <I2C_Slave_ISR_IT+0xb6>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4a59      	ldr	r2, [pc, #356]	@ (8003d48 <I2C_Slave_ISR_IT+0x1fc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00c      	beq.n	8003c02 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2210      	movs	r2, #16
 8003bee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 fcbd 	bl	8004572 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 f94a 	bl	8003e94 <I2C_ITSlaveSeqCplt>
 8003c00:	e01f      	b.n	8003c42 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c0a:	e091      	b.n	8003d30 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2210      	movs	r2, #16
 8003c12:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c18:	2204      	movs	r2, #4
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <I2C_Slave_ISR_IT+0xe6>
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	2380      	movs	r3, #128	@ 0x80
 8003c2a:	045b      	lsls	r3, r3, #17
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d000      	beq.n	8003c32 <I2C_Slave_ISR_IT+0xe6>
 8003c30:	e07e      	b.n	8003d30 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	0011      	movs	r1, r2
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 fb6e 	bl	800431c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c40:	e076      	b.n	8003d30 <I2C_Slave_ISR_IT+0x1e4>
 8003c42:	e075      	b.n	8003d30 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2204      	movs	r2, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d02f      	beq.n	8003cac <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c52:	d02b      	beq.n	8003cac <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d14c      	bne.n	8003d34 <I2C_Slave_ISR_IT+0x1e8>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d48 <I2C_Slave_ISR_IT+0x1fc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d048      	beq.n	8003d34 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 f8f5 	bl	8003e94 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003caa:	e043      	b.n	8003d34 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2208      	movs	r2, #8
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d00a      	beq.n	8003cca <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cba:	d006      	beq.n	8003cca <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 f842 	bl	8003d4c <I2C_ITAddrCplt>
 8003cc8:	e035      	b.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d031      	beq.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cd8:	d02d      	beq.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d018      	beq.n	8003d16 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003d14:	e00f      	b.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	045b      	lsls	r3, r3, #17
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d002      	beq.n	8003d26 <I2C_Slave_ISR_IT+0x1da>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 f8b3 	bl	8003e94 <I2C_ITSlaveSeqCplt>
 8003d2e:	e002      	b.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003d30:	46c0      	nop			@ (mov r8, r8)
 8003d32:	e000      	b.n	8003d36 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003d34:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2240      	movs	r2, #64	@ 0x40
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b006      	add	sp, #24
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	ffff0000 	.word	0xffff0000

08003d4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d4c:	b5b0      	push	{r4, r5, r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2241      	movs	r2, #65	@ 0x41
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	001a      	movs	r2, r3
 8003d60:	2328      	movs	r3, #40	@ 0x28
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b28      	cmp	r3, #40	@ 0x28
 8003d66:	d000      	beq.n	8003d6a <I2C_ITAddrCplt+0x1e>
 8003d68:	e088      	b.n	8003e7c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	250f      	movs	r5, #15
 8003d76:	197b      	adds	r3, r7, r5
 8003d78:	2101      	movs	r1, #1
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	200c      	movs	r0, #12
 8003d8a:	183b      	adds	r3, r7, r0
 8003d8c:	21fe      	movs	r1, #254	@ 0xfe
 8003d8e:	400a      	ands	r2, r1
 8003d90:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	240a      	movs	r4, #10
 8003d9c:	193b      	adds	r3, r7, r4
 8003d9e:	0592      	lsls	r2, r2, #22
 8003da0:	0d92      	lsrs	r2, r2, #22
 8003da2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	2308      	movs	r3, #8
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	21fe      	movs	r1, #254	@ 0xfe
 8003db2:	400a      	ands	r2, r1
 8003db4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d148      	bne.n	8003e50 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003dbe:	0021      	movs	r1, r4
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	09db      	lsrs	r3, r3, #7
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	183b      	adds	r3, r7, r0
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	4053      	eors	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d120      	bne.n	8003e1a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003dd8:	183b      	adds	r3, r7, r0
 8003dda:	187a      	adds	r2, r7, r1
 8003ddc:	8812      	ldrh	r2, [r2, #0]
 8003dde:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d14c      	bne.n	8003e8c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2240      	movs	r2, #64	@ 0x40
 8003e04:	2100      	movs	r1, #0
 8003e06:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e08:	183b      	adds	r3, r7, r0
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	197b      	adds	r3, r7, r5
 8003e0e:	7819      	ldrb	r1, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff fe79 	bl	8003b0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e18:	e038      	b.n	8003e8c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003e1a:	240c      	movs	r4, #12
 8003e1c:	193b      	adds	r3, r7, r4
 8003e1e:	2208      	movs	r2, #8
 8003e20:	18ba      	adds	r2, r7, r2
 8003e22:	8812      	ldrh	r2, [r2, #0]
 8003e24:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 fbe0 	bl	80045f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2240      	movs	r2, #64	@ 0x40
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e3c:	193b      	adds	r3, r7, r4
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	230f      	movs	r3, #15
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	7819      	ldrb	r1, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7ff fe5e 	bl	8003b0a <HAL_I2C_AddrCallback>
}
 8003e4e:	e01d      	b.n	8003e8c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e50:	2380      	movs	r3, #128	@ 0x80
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 fbcb 	bl	80045f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2240      	movs	r2, #64	@ 0x40
 8003e62:	2100      	movs	r1, #0
 8003e64:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e66:	230c      	movs	r3, #12
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	881a      	ldrh	r2, [r3, #0]
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	7819      	ldrb	r1, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fe48 	bl	8003b0a <HAL_I2C_AddrCallback>
}
 8003e7a:	e007      	b.n	8003e8c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2208      	movs	r2, #8
 8003e82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2240      	movs	r2, #64	@ 0x40
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b004      	add	sp, #16
 8003e92:	bdb0      	pop	{r4, r5, r7, pc}

08003e94 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2242      	movs	r2, #66	@ 0x42
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	01db      	lsls	r3, r3, #7
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d008      	beq.n	8003ec8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4924      	ldr	r1, [pc, #144]	@ (8003f54 <I2C_ITSlaveSeqCplt+0xc0>)
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e00c      	b.n	8003ee2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	2380      	movs	r3, #128	@ 0x80
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	491e      	ldr	r1, [pc, #120]	@ (8003f58 <I2C_ITSlaveSeqCplt+0xc4>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2241      	movs	r2, #65	@ 0x41
 8003ee6:	5c9b      	ldrb	r3, [r3, r2]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b29      	cmp	r3, #41	@ 0x29
 8003eec:	d114      	bne.n	8003f18 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2241      	movs	r2, #65	@ 0x41
 8003ef2:	2128      	movs	r1, #40	@ 0x28
 8003ef4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2221      	movs	r2, #33	@ 0x21
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2101      	movs	r1, #1
 8003f00:	0018      	movs	r0, r3
 8003f02:	f000 fb77 	bl	80045f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2240      	movs	r2, #64	@ 0x40
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff fdea 	bl	8003aea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f16:	e019      	b.n	8003f4c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2241      	movs	r2, #65	@ 0x41
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f22:	d113      	bne.n	8003f4c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2241      	movs	r2, #65	@ 0x41
 8003f28:	2128      	movs	r1, #40	@ 0x28
 8003f2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2222      	movs	r2, #34	@ 0x22
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2102      	movs	r1, #2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 fb5c 	bl	80045f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2240      	movs	r2, #64	@ 0x40
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff fdd7 	bl	8003afa <HAL_I2C_SlaveRxCpltCallback>
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b004      	add	sp, #16
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	ffffbfff 	.word	0xffffbfff
 8003f58:	ffff7fff 	.word	0xffff7fff

08003f5c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f78:	200b      	movs	r0, #11
 8003f7a:	183b      	adds	r3, r7, r0
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	2141      	movs	r1, #65	@ 0x41
 8003f80:	5c52      	ldrb	r2, [r2, r1]
 8003f82:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f8c:	183b      	adds	r3, r7, r0
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b21      	cmp	r3, #33	@ 0x21
 8003f92:	d003      	beq.n	8003f9c <I2C_ITSlaveCplt+0x40>
 8003f94:	183b      	adds	r3, r7, r0
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b29      	cmp	r3, #41	@ 0x29
 8003f9a:	d109      	bne.n	8003fb0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f9c:	4aac      	ldr	r2, [pc, #688]	@ (8004250 <I2C_ITSlaveCplt+0x2f4>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fb26 	bl	80045f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2221      	movs	r2, #33	@ 0x21
 8003fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fae:	e020      	b.n	8003ff2 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fb0:	220b      	movs	r2, #11
 8003fb2:	18bb      	adds	r3, r7, r2
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b22      	cmp	r3, #34	@ 0x22
 8003fb8:	d003      	beq.n	8003fc2 <I2C_ITSlaveCplt+0x66>
 8003fba:	18bb      	adds	r3, r7, r2
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc0:	d109      	bne.n	8003fd6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003fc2:	4aa4      	ldr	r2, [pc, #656]	@ (8004254 <I2C_ITSlaveCplt+0x2f8>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f000 fb13 	bl	80045f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2222      	movs	r2, #34	@ 0x22
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fd4:	e00d      	b.n	8003ff2 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003fd6:	230b      	movs	r3, #11
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b28      	cmp	r3, #40	@ 0x28
 8003fde:	d108      	bne.n	8003ff2 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003fe0:	4a9d      	ldr	r2, [pc, #628]	@ (8004258 <I2C_ITSlaveCplt+0x2fc>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 fb04 	bl	80045f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2180      	movs	r1, #128	@ 0x80
 8003ffe:	0209      	lsls	r1, r1, #8
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4993      	ldr	r1, [pc, #588]	@ (800425c <I2C_ITSlaveCplt+0x300>)
 8004010:	400a      	ands	r2, r1
 8004012:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0018      	movs	r0, r3
 8004018:	f000 faab 	bl	8004572 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	2380      	movs	r3, #128	@ 0x80
 8004020:	01db      	lsls	r3, r3, #7
 8004022:	4013      	ands	r3, r2
 8004024:	d013      	beq.n	800404e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	498b      	ldr	r1, [pc, #556]	@ (8004260 <I2C_ITSlaveCplt+0x304>)
 8004032:	400a      	ands	r2, r1
 8004034:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01f      	beq.n	800407e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800404c:	e017      	b.n	800407e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	4013      	ands	r3, r2
 8004056:	d012      	beq.n	800407e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4980      	ldr	r1, [pc, #512]	@ (8004264 <I2C_ITSlaveCplt+0x308>)
 8004064:	400a      	ands	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2204      	movs	r2, #4
 8004082:	4013      	ands	r3, r2
 8004084:	d020      	beq.n	80040c8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2204      	movs	r2, #4
 800408a:	4393      	bics	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	2204      	movs	r2, #4
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2210      	movs	r2, #16
 80040e2:	4013      	ands	r3, r2
 80040e4:	d04f      	beq.n	8004186 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2210      	movs	r2, #16
 80040ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040ec:	d04b      	beq.n	8004186 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d12d      	bne.n	8004154 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2241      	movs	r2, #65	@ 0x41
 80040fc:	5c9b      	ldrb	r3, [r3, r2]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b28      	cmp	r3, #40	@ 0x28
 8004102:	d10b      	bne.n	800411c <I2C_ITSlaveCplt+0x1c0>
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	2380      	movs	r3, #128	@ 0x80
 8004108:	049b      	lsls	r3, r3, #18
 800410a:	429a      	cmp	r2, r3
 800410c:	d106      	bne.n	800411c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0011      	movs	r1, r2
 8004114:	0018      	movs	r0, r3
 8004116:	f000 f8a9 	bl	800426c <I2C_ITListenCplt>
 800411a:	e034      	b.n	8004186 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2241      	movs	r2, #65	@ 0x41
 8004120:	5c9b      	ldrb	r3, [r3, r2]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b29      	cmp	r3, #41	@ 0x29
 8004126:	d110      	bne.n	800414a <I2C_ITSlaveCplt+0x1ee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a4f      	ldr	r2, [pc, #316]	@ (8004268 <I2C_ITSlaveCplt+0x30c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00c      	beq.n	800414a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2210      	movs	r2, #16
 8004136:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 fa19 	bl	8004572 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	f7ff fea6 	bl	8003e94 <I2C_ITSlaveSeqCplt>
 8004148:	e01d      	b.n	8004186 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2210      	movs	r2, #16
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e018      	b.n	8004186 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2210      	movs	r2, #16
 800415a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	2204      	movs	r2, #4
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d004      	beq.n	8004178 <I2C_ITSlaveCplt+0x21c>
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	2380      	movs	r3, #128	@ 0x80
 8004172:	045b      	lsls	r3, r3, #17
 8004174:	429a      	cmp	r2, r3
 8004176:	d106      	bne.n	8004186 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0011      	movs	r1, r2
 8004180:	0018      	movs	r0, r3
 8004182:	f000 f8cb 	bl	800431c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2242      	movs	r2, #66	@ 0x42
 800418a:	2100      	movs	r1, #0
 800418c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f000 f8b9 	bl	800431c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2241      	movs	r2, #65	@ 0x41
 80041ae:	5c9b      	ldrb	r3, [r3, r2]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b28      	cmp	r3, #40	@ 0x28
 80041b4:	d147      	bne.n	8004246 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0011      	movs	r1, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 f855 	bl	800426c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041c2:	e040      	b.n	8004246 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4a27      	ldr	r2, [pc, #156]	@ (8004268 <I2C_ITSlaveCplt+0x30c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d016      	beq.n	80041fc <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f7ff fe5f 	bl	8003e94 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a23      	ldr	r2, [pc, #140]	@ (8004268 <I2C_ITSlaveCplt+0x30c>)
 80041da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2241      	movs	r2, #65	@ 0x41
 80041e0:	2120      	movs	r1, #32
 80041e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2240      	movs	r2, #64	@ 0x40
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7ff fc98 	bl	8003b2a <HAL_I2C_ListenCpltCallback>
}
 80041fa:	e024      	b.n	8004246 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2241      	movs	r2, #65	@ 0x41
 8004200:	5c9b      	ldrb	r3, [r3, r2]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b22      	cmp	r3, #34	@ 0x22
 8004206:	d10f      	bne.n	8004228 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2241      	movs	r2, #65	@ 0x41
 800420c:	2120      	movs	r1, #32
 800420e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2240      	movs	r2, #64	@ 0x40
 800421a:	2100      	movs	r1, #0
 800421c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0018      	movs	r0, r3
 8004222:	f7ff fc6a 	bl	8003afa <HAL_I2C_SlaveRxCpltCallback>
}
 8004226:	e00e      	b.n	8004246 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2241      	movs	r2, #65	@ 0x41
 800422c:	2120      	movs	r1, #32
 800422e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2240      	movs	r2, #64	@ 0x40
 800423a:	2100      	movs	r1, #0
 800423c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f7ff fc52 	bl	8003aea <HAL_I2C_SlaveTxCpltCallback>
}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	46bd      	mov	sp, r7
 800424a:	b006      	add	sp, #24
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	00008001 	.word	0x00008001
 8004254:	00008002 	.word	0x00008002
 8004258:	00008003 	.word	0x00008003
 800425c:	fe00e800 	.word	0xfe00e800
 8004260:	ffffbfff 	.word	0xffffbfff
 8004264:	ffff7fff 	.word	0xffff7fff
 8004268:	ffff0000 	.word	0xffff0000

0800426c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a26      	ldr	r2, [pc, #152]	@ (8004314 <I2C_ITListenCplt+0xa8>)
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2241      	movs	r2, #65	@ 0x41
 8004286:	2120      	movs	r1, #32
 8004288:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2242      	movs	r2, #66	@ 0x42
 800428e:	2100      	movs	r1, #0
 8004290:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2204      	movs	r2, #4
 800429c:	4013      	ands	r3, r2
 800429e:	d022      	beq.n	80042e6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	2204      	movs	r2, #4
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <I2C_ITListenCplt+0xac>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0011      	movs	r1, r2
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 f981 	bl	80045f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2210      	movs	r2, #16
 80042f8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2240      	movs	r2, #64	@ 0x40
 80042fe:	2100      	movs	r1, #0
 8004300:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff fc10 	bl	8003b2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	ffff0000 	.word	0xffff0000
 8004318:	00008003 	.word	0x00008003

0800431c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004326:	200f      	movs	r0, #15
 8004328:	183b      	adds	r3, r7, r0
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	2141      	movs	r1, #65	@ 0x41
 800432e:	5c52      	ldrb	r2, [r2, r1]
 8004330:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2242      	movs	r2, #66	@ 0x42
 8004336:	2100      	movs	r1, #0
 8004338:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a72      	ldr	r2, [pc, #456]	@ (8004508 <I2C_ITError+0x1ec>)
 800433e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004352:	183b      	adds	r3, r7, r0
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b28      	cmp	r3, #40	@ 0x28
 8004358:	d007      	beq.n	800436a <I2C_ITError+0x4e>
 800435a:	183b      	adds	r3, r7, r0
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b29      	cmp	r3, #41	@ 0x29
 8004360:	d003      	beq.n	800436a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004362:	183b      	adds	r3, r7, r0
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b2a      	cmp	r3, #42	@ 0x2a
 8004368:	d10c      	bne.n	8004384 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2103      	movs	r1, #3
 800436e:	0018      	movs	r0, r3
 8004370:	f000 f940 	bl	80045f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2241      	movs	r2, #65	@ 0x41
 8004378:	2128      	movs	r1, #40	@ 0x28
 800437a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a63      	ldr	r2, [pc, #396]	@ (800450c <I2C_ITError+0x1f0>)
 8004380:	635a      	str	r2, [r3, #52]	@ 0x34
 8004382:	e032      	b.n	80043ea <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004384:	4a62      	ldr	r2, [pc, #392]	@ (8004510 <I2C_ITError+0x1f4>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0011      	movs	r1, r2
 800438a:	0018      	movs	r0, r3
 800438c:	f000 f932 	bl	80045f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	0018      	movs	r0, r3
 8004394:	f000 f8ed 	bl	8004572 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2241      	movs	r2, #65	@ 0x41
 800439c:	5c9b      	ldrb	r3, [r3, r2]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b60      	cmp	r3, #96	@ 0x60
 80043a2:	d01f      	beq.n	80043e4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2241      	movs	r2, #65	@ 0x41
 80043a8:	2120      	movs	r1, #32
 80043aa:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2220      	movs	r2, #32
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d114      	bne.n	80043e4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2210      	movs	r2, #16
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d109      	bne.n	80043dc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2210      	movs	r2, #16
 80043ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d4:	2204      	movs	r2, #4
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2220      	movs	r2, #32
 80043e2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d03b      	beq.n	8004470 <I2C_ITError+0x154>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b11      	cmp	r3, #17
 80043fc:	d002      	beq.n	8004404 <I2C_ITError+0xe8>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b21      	cmp	r3, #33	@ 0x21
 8004402:	d135      	bne.n	8004470 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	401a      	ands	r2, r3
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	01db      	lsls	r3, r3, #7
 8004414:	429a      	cmp	r2, r3
 8004416:	d107      	bne.n	8004428 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	493c      	ldr	r1, [pc, #240]	@ (8004514 <I2C_ITError+0x1f8>)
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff f80d 	bl	800344c <HAL_DMA_GetState>
 8004432:	0003      	movs	r3, r0
 8004434:	2b01      	cmp	r3, #1
 8004436:	d016      	beq.n	8004466 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443c:	4a36      	ldr	r2, [pc, #216]	@ (8004518 <I2C_ITError+0x1fc>)
 800443e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2240      	movs	r2, #64	@ 0x40
 8004444:	2100      	movs	r1, #0
 8004446:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	0018      	movs	r0, r3
 800444e:	f7fe fed1 	bl	80031f4 <HAL_DMA_Abort_IT>
 8004452:	1e03      	subs	r3, r0, #0
 8004454:	d051      	beq.n	80044fa <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	0018      	movs	r0, r3
 8004462:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004464:	e049      	b.n	80044fa <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 f859 	bl	8004520 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800446e:	e044      	b.n	80044fa <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d03b      	beq.n	80044f0 <I2C_ITError+0x1d4>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b12      	cmp	r3, #18
 800447c:	d002      	beq.n	8004484 <I2C_ITError+0x168>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b22      	cmp	r3, #34	@ 0x22
 8004482:	d135      	bne.n	80044f0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	2380      	movs	r3, #128	@ 0x80
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	401a      	ands	r2, r3
 8004490:	2380      	movs	r3, #128	@ 0x80
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	429a      	cmp	r2, r3
 8004496:	d107      	bne.n	80044a8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	491e      	ldr	r1, [pc, #120]	@ (800451c <I2C_ITError+0x200>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7fe ffcd 	bl	800344c <HAL_DMA_GetState>
 80044b2:	0003      	movs	r3, r0
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d016      	beq.n	80044e6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044bc:	4a16      	ldr	r2, [pc, #88]	@ (8004518 <I2C_ITError+0x1fc>)
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2240      	movs	r2, #64	@ 0x40
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7fe fe91 	bl	80031f4 <HAL_DMA_Abort_IT>
 80044d2:	1e03      	subs	r3, r0, #0
 80044d4:	d013      	beq.n	80044fe <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	0018      	movs	r0, r3
 80044e2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044e4:	e00b      	b.n	80044fe <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f000 f819 	bl	8004520 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ee:	e006      	b.n	80044fe <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 f814 	bl	8004520 <I2C_TreatErrorCallback>
  }
}
 80044f8:	e002      	b.n	8004500 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	e000      	b.n	8004500 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044fe:	46c0      	nop			@ (mov r8, r8)
}
 8004500:	46c0      	nop			@ (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bd80      	pop	{r7, pc}
 8004508:	ffff0000 	.word	0xffff0000
 800450c:	08003b4d 	.word	0x08003b4d
 8004510:	00008003 	.word	0x00008003
 8004514:	ffffbfff 	.word	0xffffbfff
 8004518:	080045b7 	.word	0x080045b7
 800451c:	ffff7fff 	.word	0xffff7fff

08004520 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2241      	movs	r2, #65	@ 0x41
 800452c:	5c9b      	ldrb	r3, [r3, r2]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b60      	cmp	r3, #96	@ 0x60
 8004532:	d10f      	bne.n	8004554 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2241      	movs	r2, #65	@ 0x41
 8004538:	2120      	movs	r1, #32
 800453a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2240      	movs	r2, #64	@ 0x40
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff faf4 	bl	8003b3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004552:	e00a      	b.n	800456a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2240      	movs	r2, #64	@ 0x40
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0018      	movs	r0, r3
 8004566:	f7fb ff45 	bl	80003f4 <HAL_I2C_ErrorCallback>
}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b002      	add	sp, #8
 8004570:	bd80      	pop	{r7, pc}

08004572 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	2b02      	cmp	r3, #2
 8004586:	d103      	bne.n	8004590 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	2b01      	cmp	r3, #1
 800459c:	d007      	beq.n	80045ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	619a      	str	r2, [r3, #24]
  }
}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	2200      	movs	r2, #0
 80045d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	2200      	movs	r2, #0
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f7ff ff9a 	bl	8004520 <I2C_TreatErrorCallback>
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b004      	add	sp, #16
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	000a      	movs	r2, r1
 80045fe:	1cbb      	adds	r3, r7, #2
 8004600:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004606:	1cbb      	adds	r3, r7, #2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2201      	movs	r2, #1
 800460c:	4013      	ands	r3, r2
 800460e:	d010      	beq.n	8004632 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2242      	movs	r2, #66	@ 0x42
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	@ 0x41
 800461c:	5c9b      	ldrb	r3, [r3, r2]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	001a      	movs	r2, r3
 8004622:	2328      	movs	r3, #40	@ 0x28
 8004624:	4013      	ands	r3, r2
 8004626:	2b28      	cmp	r3, #40	@ 0x28
 8004628:	d003      	beq.n	8004632 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	22b0      	movs	r2, #176	@ 0xb0
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004632:	1cbb      	adds	r3, r7, #2
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	2202      	movs	r2, #2
 8004638:	4013      	ands	r3, r2
 800463a:	d010      	beq.n	800465e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2244      	movs	r2, #68	@ 0x44
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2241      	movs	r2, #65	@ 0x41
 8004648:	5c9b      	ldrb	r3, [r3, r2]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	001a      	movs	r2, r3
 800464e:	2328      	movs	r3, #40	@ 0x28
 8004650:	4013      	ands	r3, r2
 8004652:	2b28      	cmp	r3, #40	@ 0x28
 8004654:	d003      	beq.n	800465e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	22b0      	movs	r2, #176	@ 0xb0
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800465e:	1cbb      	adds	r3, r7, #2
 8004660:	2200      	movs	r2, #0
 8004662:	5e9b      	ldrsh	r3, [r3, r2]
 8004664:	2b00      	cmp	r3, #0
 8004666:	da03      	bge.n	8004670 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	22b8      	movs	r2, #184	@ 0xb8
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004670:	1cbb      	adds	r3, r7, #2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	2b10      	cmp	r3, #16
 8004676:	d103      	bne.n	8004680 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2290      	movs	r2, #144	@ 0x90
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004680:	1cbb      	adds	r3, r7, #2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	2b20      	cmp	r3, #32
 8004686:	d103      	bne.n	8004690 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004690:	1cbb      	adds	r3, r7, #2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d103      	bne.n	80046a0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2240      	movs	r2, #64	@ 0x40
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	43d9      	mvns	r1, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	400a      	ands	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b004      	add	sp, #16
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2241      	movs	r2, #65	@ 0x41
 80046ca:	5c9b      	ldrb	r3, [r3, r2]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d138      	bne.n	8004744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2240      	movs	r2, #64	@ 0x40
 80046d6:	5c9b      	ldrb	r3, [r3, r2]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046dc:	2302      	movs	r3, #2
 80046de:	e032      	b.n	8004746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2240      	movs	r2, #64	@ 0x40
 80046e4:	2101      	movs	r1, #1
 80046e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2241      	movs	r2, #65	@ 0x41
 80046ec:	2124      	movs	r1, #36	@ 0x24
 80046ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	438a      	bics	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4911      	ldr	r1, [pc, #68]	@ (8004750 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800470c:	400a      	ands	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2101      	movs	r1, #1
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2241      	movs	r2, #65	@ 0x41
 8004734:	2120      	movs	r1, #32
 8004736:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2240      	movs	r2, #64	@ 0x40
 800473c:	2100      	movs	r1, #0
 800473e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b002      	add	sp, #8
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	ffffefff 	.word	0xffffefff

08004754 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2241      	movs	r2, #65	@ 0x41
 8004762:	5c9b      	ldrb	r3, [r3, r2]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b20      	cmp	r3, #32
 8004768:	d139      	bne.n	80047de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2240      	movs	r2, #64	@ 0x40
 800476e:	5c9b      	ldrb	r3, [r3, r2]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004774:	2302      	movs	r3, #2
 8004776:	e033      	b.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2240      	movs	r2, #64	@ 0x40
 800477c:	2101      	movs	r1, #1
 800477e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2241      	movs	r2, #65	@ 0x41
 8004784:	2124      	movs	r1, #36	@ 0x24
 8004786:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2101      	movs	r1, #1
 8004794:	438a      	bics	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a11      	ldr	r2, [pc, #68]	@ (80047e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2101      	movs	r1, #1
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2241      	movs	r2, #65	@ 0x41
 80047ce:	2120      	movs	r1, #32
 80047d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2240      	movs	r2, #64	@ 0x40
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b004      	add	sp, #16
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	fffff0ff 	.word	0xfffff0ff

080047ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e20f      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d100      	bne.n	800480a <HAL_RCC_OscConfig+0x1e>
 8004808:	e069      	b.n	80048de <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480a:	4bc8      	ldr	r3, [pc, #800]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2238      	movs	r2, #56	@ 0x38
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d105      	bne.n	8004826 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d15d      	bne.n	80048de <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1fb      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	2380      	movs	r3, #128	@ 0x80
 800482c:	025b      	lsls	r3, r3, #9
 800482e:	429a      	cmp	r2, r3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_OscConfig+0x56>
 8004832:	4bbe      	ldr	r3, [pc, #760]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4bbd      	ldr	r3, [pc, #756]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004838:	2180      	movs	r1, #128	@ 0x80
 800483a:	0249      	lsls	r1, r1, #9
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e020      	b.n	8004884 <HAL_RCC_OscConfig+0x98>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	23a0      	movs	r3, #160	@ 0xa0
 8004848:	02db      	lsls	r3, r3, #11
 800484a:	429a      	cmp	r2, r3
 800484c:	d10e      	bne.n	800486c <HAL_RCC_OscConfig+0x80>
 800484e:	4bb7      	ldr	r3, [pc, #732]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4bb6      	ldr	r3, [pc, #728]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004854:	2180      	movs	r1, #128	@ 0x80
 8004856:	02c9      	lsls	r1, r1, #11
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	4bb3      	ldr	r3, [pc, #716]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4bb2      	ldr	r3, [pc, #712]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004862:	2180      	movs	r1, #128	@ 0x80
 8004864:	0249      	lsls	r1, r1, #9
 8004866:	430a      	orrs	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x98>
 800486c:	4baf      	ldr	r3, [pc, #700]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4bae      	ldr	r3, [pc, #696]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004872:	49af      	ldr	r1, [pc, #700]	@ (8004b30 <HAL_RCC_OscConfig+0x344>)
 8004874:	400a      	ands	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	4bac      	ldr	r3, [pc, #688]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4bab      	ldr	r3, [pc, #684]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 800487e:	49ad      	ldr	r1, [pc, #692]	@ (8004b34 <HAL_RCC_OscConfig+0x348>)
 8004880:	400a      	ands	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d014      	beq.n	80048b6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fd fbcc 	bl	8002028 <HAL_GetTick>
 8004890:	0003      	movs	r3, r0
 8004892:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004896:	f7fd fbc7 	bl	8002028 <HAL_GetTick>
 800489a:	0002      	movs	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	@ 0x64
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1ba      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a8:	4ba0      	ldr	r3, [pc, #640]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	4013      	ands	r3, r2
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0xaa>
 80048b4:	e013      	b.n	80048de <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fd fbb7 	bl	8002028 <HAL_GetTick>
 80048ba:	0003      	movs	r3, r0
 80048bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80048c0:	f7fd fbb2 	bl	8002028 <HAL_GetTick>
 80048c4:	0002      	movs	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	@ 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e1a5      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d2:	4b96      	ldr	r3, [pc, #600]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	4013      	ands	r3, r2
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2202      	movs	r2, #2
 80048e4:	4013      	ands	r3, r2
 80048e6:	d100      	bne.n	80048ea <HAL_RCC_OscConfig+0xfe>
 80048e8:	e086      	b.n	80049f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b90      	ldr	r3, [pc, #576]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2238      	movs	r2, #56	@ 0x38
 80048f0:	4013      	ands	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d12f      	bne.n	800495a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e18b      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004906:	4b89      	ldr	r3, [pc, #548]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4a8b      	ldr	r2, [pc, #556]	@ (8004b38 <HAL_RCC_OscConfig+0x34c>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	021a      	lsls	r2, r3, #8
 8004916:	4b85      	ldr	r3, [pc, #532]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d112      	bne.n	8004948 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004922:	4b82      	ldr	r3, [pc, #520]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a85      	ldr	r2, [pc, #532]	@ (8004b3c <HAL_RCC_OscConfig+0x350>)
 8004928:	4013      	ands	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	4b7e      	ldr	r3, [pc, #504]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004932:	430a      	orrs	r2, r1
 8004934:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004936:	4b7d      	ldr	r3, [pc, #500]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	0adb      	lsrs	r3, r3, #11
 800493c:	2207      	movs	r2, #7
 800493e:	4013      	ands	r3, r2
 8004940:	4a7f      	ldr	r2, [pc, #508]	@ (8004b40 <HAL_RCC_OscConfig+0x354>)
 8004942:	40da      	lsrs	r2, r3
 8004944:	4b7f      	ldr	r3, [pc, #508]	@ (8004b44 <HAL_RCC_OscConfig+0x358>)
 8004946:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004948:	4b7f      	ldr	r3, [pc, #508]	@ (8004b48 <HAL_RCC_OscConfig+0x35c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0018      	movs	r0, r3
 800494e:	f7fd fb0f 	bl	8001f70 <HAL_InitTick>
 8004952:	1e03      	subs	r3, r0, #0
 8004954:	d050      	beq.n	80049f8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e161      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d030      	beq.n	80049c4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004962:	4b72      	ldr	r3, [pc, #456]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	@ (8004b3c <HAL_RCC_OscConfig+0x350>)
 8004968:	4013      	ands	r3, r2
 800496a:	0019      	movs	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	4b6e      	ldr	r3, [pc, #440]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004976:	4b6d      	ldr	r3, [pc, #436]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b6c      	ldr	r3, [pc, #432]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 800497c:	2180      	movs	r1, #128	@ 0x80
 800497e:	0049      	lsls	r1, r1, #1
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd fb50 	bl	8002028 <HAL_GetTick>
 8004988:	0003      	movs	r3, r0
 800498a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800498e:	f7fd fb4b 	bl	8002028 <HAL_GetTick>
 8004992:	0002      	movs	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e13e      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a0:	4b62      	ldr	r3, [pc, #392]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4013      	ands	r3, r2
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ac:	4b5f      	ldr	r3, [pc, #380]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a61      	ldr	r2, [pc, #388]	@ (8004b38 <HAL_RCC_OscConfig+0x34c>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	021a      	lsls	r2, r3, #8
 80049bc:	4b5b      	ldr	r3, [pc, #364]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	e019      	b.n	80049f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80049c4:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b58      	ldr	r3, [pc, #352]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80049ca:	4960      	ldr	r1, [pc, #384]	@ (8004b4c <HAL_RCC_OscConfig+0x360>)
 80049cc:	400a      	ands	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fd fb2a 	bl	8002028 <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80049da:	f7fd fb25 	bl	8002028 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e118      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ec:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4013      	ands	r3, r2
 80049f6:	d1f0      	bne.n	80049da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2208      	movs	r2, #8
 80049fe:	4013      	ands	r3, r2
 8004a00:	d042      	beq.n	8004a88 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004a02:	4b4a      	ldr	r3, [pc, #296]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2238      	movs	r2, #56	@ 0x38
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b18      	cmp	r3, #24
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d138      	bne.n	8004a88 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e101      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d019      	beq.n	8004a56 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a22:	4b42      	ldr	r3, [pc, #264]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a26:	4b41      	ldr	r3, [pc, #260]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fd fafb 	bl	8002028 <HAL_GetTick>
 8004a32:	0003      	movs	r3, r0
 8004a34:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004a38:	f7fd faf6 	bl	8002028 <HAL_GetTick>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0e9      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004a4a:	4b38      	ldr	r3, [pc, #224]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d0f1      	beq.n	8004a38 <HAL_RCC_OscConfig+0x24c>
 8004a54:	e018      	b.n	8004a88 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a56:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a5a:	4b34      	ldr	r3, [pc, #208]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	438a      	bics	r2, r1
 8004a60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fd fae1 	bl	8002028 <HAL_GetTick>
 8004a66:	0003      	movs	r3, r0
 8004a68:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004a6c:	f7fd fadc 	bl	8002028 <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0cf      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a82:	2202      	movs	r2, #2
 8004a84:	4013      	ands	r3, r2
 8004a86:	d1f1      	bne.n	8004a6c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d100      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2a8>
 8004a92:	e084      	b.n	8004b9e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a94:	230f      	movs	r3, #15
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004a9c:	4b23      	ldr	r3, [pc, #140]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2238      	movs	r2, #56	@ 0x38
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d000      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2c6>
 8004ab0:	e075      	b.n	8004b9e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0b3      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d106      	bne.n	8004acc <HAL_RCC_OscConfig+0x2e0>
 8004abe:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004ac0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aca:	e01c      	b.n	8004b06 <HAL_RCC_OscConfig+0x31a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	d10c      	bne.n	8004aee <HAL_RCC_OscConfig+0x302>
 8004ad4:	4b15      	ldr	r3, [pc, #84]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004ad6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ad8:	4b14      	ldr	r3, [pc, #80]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004ada:	2104      	movs	r1, #4
 8004adc:	430a      	orrs	r2, r1
 8004ade:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ae0:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ae4:	4b11      	ldr	r3, [pc, #68]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aec:	e00b      	b.n	8004b06 <HAL_RCC_OscConfig+0x31a>
 8004aee:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004af0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004af2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004af4:	2101      	movs	r1, #1
 8004af6:	438a      	bics	r2, r1
 8004af8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004afa:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004afc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004afe:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <HAL_RCC_OscConfig+0x340>)
 8004b00:	2104      	movs	r1, #4
 8004b02:	438a      	bics	r2, r1
 8004b04:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d028      	beq.n	8004b60 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fd fa8b 	bl	8002028 <HAL_GetTick>
 8004b12:	0003      	movs	r3, r0
 8004b14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004b16:	e01d      	b.n	8004b54 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd fa86 	bl	8002028 <HAL_GetTick>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a0b      	ldr	r2, [pc, #44]	@ (8004b50 <HAL_RCC_OscConfig+0x364>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d915      	bls.n	8004b54 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e078      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	fffeffff 	.word	0xfffeffff
 8004b34:	fffbffff 	.word	0xfffbffff
 8004b38:	ffff80ff 	.word	0xffff80ff
 8004b3c:	ffffc7ff 	.word	0xffffc7ff
 8004b40:	02dc6c00 	.word	0x02dc6c00
 8004b44:	20000064 	.word	0x20000064
 8004b48:	20000068 	.word	0x20000068
 8004b4c:	fffffeff 	.word	0xfffffeff
 8004b50:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004b54:	4b34      	ldr	r3, [pc, #208]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	2202      	movs	r2, #2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d0dc      	beq.n	8004b18 <HAL_RCC_OscConfig+0x32c>
 8004b5e:	e013      	b.n	8004b88 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd fa62 	bl	8002028 <HAL_GetTick>
 8004b64:	0003      	movs	r3, r0
 8004b66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004b68:	e009      	b.n	8004b7e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fd fa5d 	bl	8002028 <HAL_GetTick>
 8004b6e:	0002      	movs	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	4a2d      	ldr	r2, [pc, #180]	@ (8004c2c <HAL_RCC_OscConfig+0x440>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e04f      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b82:	2202      	movs	r2, #2
 8004b84:	4013      	ands	r3, r2
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b88:	230f      	movs	r3, #15
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b92:	4b25      	ldr	r3, [pc, #148]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b96:	4b24      	ldr	r3, [pc, #144]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004b98:	4925      	ldr	r1, [pc, #148]	@ (8004c30 <HAL_RCC_OscConfig+0x444>)
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d039      	beq.n	8004c1c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004bb6:	2180      	movs	r1, #128	@ 0x80
 8004bb8:	03c9      	lsls	r1, r1, #15
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbe:	f7fd fa33 	bl	8002028 <HAL_GetTick>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc8:	f7fd fa2e 	bl	8002028 <HAL_GetTick>
 8004bcc:	0002      	movs	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e021      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004bda:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	4013      	ands	r3, r2
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x3dc>
 8004be6:	e019      	b.n	8004c1c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004be8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004bee:	4911      	ldr	r1, [pc, #68]	@ (8004c34 <HAL_RCC_OscConfig+0x448>)
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fd fa18 	bl	8002028 <HAL_GetTick>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bfe:	f7fd fa13 	bl	8002028 <HAL_GetTick>
 8004c02:	0002      	movs	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e006      	b.n	8004c1e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_OscConfig+0x43c>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	0018      	movs	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b006      	add	sp, #24
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	00001388 	.word	0x00001388
 8004c30:	efffffff 	.word	0xefffffff
 8004c34:	ffbfffff 	.word	0xffbfffff

08004c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0f6      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b7d      	ldr	r3, [pc, #500]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2207      	movs	r2, #7
 8004c52:	4013      	ands	r3, r2
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d91e      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2207      	movs	r2, #7
 8004c60:	4393      	bics	r3, r2
 8004c62:	0019      	movs	r1, r3
 8004c64:	4b77      	ldr	r3, [pc, #476]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c6c:	f7fd f9dc 	bl	8002028 <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c74:	e009      	b.n	8004c8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c76:	f7fd f9d7 	bl	8002028 <HAL_GetTick>
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	4a71      	ldr	r2, [pc, #452]	@ (8004e48 <HAL_RCC_ClockConfig+0x210>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0d7      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2207      	movs	r2, #7
 8004c90:	4013      	ands	r3, r2
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1ee      	bne.n	8004c76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d017      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d008      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cac:	4b67      	ldr	r3, [pc, #412]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a67      	ldr	r2, [pc, #412]	@ (8004e50 <HAL_RCC_ClockConfig+0x218>)
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	4b65      	ldr	r3, [pc, #404]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004cb6:	21b0      	movs	r1, #176	@ 0xb0
 8004cb8:	0109      	lsls	r1, r1, #4
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbe:	4b63      	ldr	r3, [pc, #396]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	4a64      	ldr	r2, [pc, #400]	@ (8004e54 <HAL_RCC_ClockConfig+0x21c>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b5f      	ldr	r3, [pc, #380]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d100      	bne.n	8004cde <HAL_RCC_ClockConfig+0xa6>
 8004cdc:	e061      	b.n	8004da2 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004cde:	4b5b      	ldr	r3, [pc, #364]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	221c      	movs	r2, #28
 8004ce4:	4393      	bics	r3, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b57      	ldr	r3, [pc, #348]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cfa:	4b54      	ldr	r3, [pc, #336]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	4013      	ands	r3, r2
 8004d04:	d12b      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e097      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d12:	4b4e      	ldr	r3, [pc, #312]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	2380      	movs	r3, #128	@ 0x80
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d11f      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e08b      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004d2a:	4b48      	ldr	r3, [pc, #288]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	2380      	movs	r3, #128	@ 0x80
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	4013      	ands	r3, r2
 8004d34:	d113      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d106      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004d42:	4b42      	ldr	r3, [pc, #264]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e074      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004d50:	4b3e      	ldr	r3, [pc, #248]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	2202      	movs	r2, #2
 8004d56:	4013      	ands	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e06d      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2207      	movs	r2, #7
 8004d64:	4393      	bics	r3, r2
 8004d66:	0019      	movs	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	4b37      	ldr	r3, [pc, #220]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d72:	f7fd f959 	bl	8002028 <HAL_GetTick>
 8004d76:	0003      	movs	r3, r0
 8004d78:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e009      	b.n	8004d90 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fd f954 	bl	8002028 <HAL_GetTick>
 8004d80:	0002      	movs	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	4a30      	ldr	r2, [pc, #192]	@ (8004e48 <HAL_RCC_ClockConfig+0x210>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e054      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d90:	4b2e      	ldr	r3, [pc, #184]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2238      	movs	r2, #56	@ 0x38
 8004d96:	401a      	ands	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d1ec      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da2:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2207      	movs	r2, #7
 8004da8:	4013      	ands	r3, r2
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d21e      	bcs.n	8004dee <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db0:	4b24      	ldr	r3, [pc, #144]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2207      	movs	r2, #7
 8004db6:	4393      	bics	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	4b22      	ldr	r3, [pc, #136]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004dc2:	f7fd f931 	bl	8002028 <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dca:	e009      	b.n	8004de0 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004dcc:	f7fd f92c 	bl	8002028 <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <HAL_RCC_ClockConfig+0x210>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e02c      	b.n	8004e3a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004de0:	4b18      	ldr	r3, [pc, #96]	@ (8004e44 <HAL_RCC_ClockConfig+0x20c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2207      	movs	r2, #7
 8004de6:	4013      	ands	r3, r2
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d1ee      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2204      	movs	r2, #4
 8004df4:	4013      	ands	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004df8:	4b14      	ldr	r3, [pc, #80]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a16      	ldr	r2, [pc, #88]	@ (8004e58 <HAL_RCC_ClockConfig+0x220>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	4b11      	ldr	r3, [pc, #68]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004e0c:	f000 f82c 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8004e10:	0001      	movs	r1, r0
 8004e12:	4b0e      	ldr	r3, [pc, #56]	@ (8004e4c <HAL_RCC_ClockConfig+0x214>)
 8004e14:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	220f      	movs	r2, #15
 8004e1a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e5c <HAL_RCC_ClockConfig+0x224>)
 8004e1e:	0092      	lsls	r2, r2, #2
 8004e20:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004e22:	221f      	movs	r2, #31
 8004e24:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004e26:	000a      	movs	r2, r1
 8004e28:	40da      	lsrs	r2, r3
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <HAL_RCC_ClockConfig+0x228>)
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <HAL_RCC_ClockConfig+0x22c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fd f89c 	bl	8001f70 <HAL_InitTick>
 8004e38:	0003      	movs	r3, r0
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b004      	add	sp, #16
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	40022000 	.word	0x40022000
 8004e48:	00001388 	.word	0x00001388
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	ffff84ff 	.word	0xffff84ff
 8004e54:	fffff0ff 	.word	0xfffff0ff
 8004e58:	ffff8fff 	.word	0xffff8fff
 8004e5c:	08007bc8 	.word	0x08007bc8
 8004e60:	20000064 	.word	0x20000064
 8004e64:	20000068 	.word	0x20000068

08004e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	2207      	movs	r2, #7
 8004e76:	4013      	ands	r3, r2
 8004e78:	3301      	adds	r3, #1
 8004e7a:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e7c:	4b23      	ldr	r3, [pc, #140]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2238      	movs	r2, #56	@ 0x38
 8004e82:	4013      	ands	r3, r2
 8004e84:	d10f      	bne.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e86:	4b21      	ldr	r3, [pc, #132]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	0adb      	lsrs	r3, r3, #11
 8004e8c:	2207      	movs	r2, #7
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2201      	movs	r2, #1
 8004e92:	409a      	lsls	r2, r3
 8004e94:	0013      	movs	r3, r2
 8004e96:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	481d      	ldr	r0, [pc, #116]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e9c:	f7fb f934 	bl	8000108 <__udivsi3>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e027      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ea6:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2238      	movs	r2, #56	@ 0x38
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eb2:	4b18      	ldr	r3, [pc, #96]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xac>)
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e01e      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004eb8:	4b14      	ldr	r3, [pc, #80]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2238      	movs	r2, #56	@ 0x38
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d103      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004ec4:	2380      	movs	r3, #128	@ 0x80
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2238      	movs	r2, #56	@ 0x38
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b18      	cmp	r3, #24
 8004ed6:	d103      	bne.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ed8:	23fa      	movs	r3, #250	@ 0xfa
 8004eda:	01db      	lsls	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2238      	movs	r2, #56	@ 0x38
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d102      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8004eec:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e001      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7fb f905 	bl	8000108 <__udivsi3>
 8004efe:	0003      	movs	r3, r0
 8004f00:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	02dc6c00 	.word	0x02dc6c00
 8004f14:	007a1200 	.word	0x007a1200

08004f18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004f1c:	f7ff ffa4 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8004f20:	0001      	movs	r1, r0
 8004f22:	4b09      	ldr	r3, [pc, #36]	@ (8004f48 <HAL_RCC_GetHCLKFreq+0x30>)
 8004f24:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	220f      	movs	r2, #15
 8004f2a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004f2c:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <HAL_RCC_GetHCLKFreq+0x34>)
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f32:	221f      	movs	r2, #31
 8004f34:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004f36:	000a      	movs	r2, r1
 8004f38:	40da      	lsrs	r2, r3
 8004f3a:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <HAL_RCC_GetHCLKFreq+0x38>)
 8004f3c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004f3e:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <HAL_RCC_GetHCLKFreq+0x38>)
 8004f40:	681b      	ldr	r3, [r3, #0]
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	08007bc8 	.word	0x08007bc8
 8004f50:	20000064 	.word	0x20000064

08004f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004f58:	f7ff ffde 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 8004f5c:	0001      	movs	r1, r0
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0b1b      	lsrs	r3, r3, #12
 8004f64:	2207      	movs	r2, #7
 8004f66:	401a      	ands	r2, r3
 8004f68:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004f6a:	0092      	lsls	r2, r2, #2
 8004f6c:	58d3      	ldr	r3, [r2, r3]
 8004f6e:	221f      	movs	r2, #31
 8004f70:	4013      	ands	r3, r2
 8004f72:	40d9      	lsrs	r1, r3
 8004f74:	000b      	movs	r3, r1
}
 8004f76:	0018      	movs	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08007c08 	.word	0x08007c08

08004f84 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004f8c:	2313      	movs	r3, #19
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f94:	2312      	movs	r3, #18
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2240      	movs	r2, #64	@ 0x40
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d100      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004fa6:	e079      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa8:	2011      	movs	r0, #17
 8004faa:	183b      	adds	r3, r7, r0
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	055b      	lsls	r3, r3, #21
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d110      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbc:	4b67      	ldr	r3, [pc, #412]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc0:	4b66      	ldr	r3, [pc, #408]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fc2:	2180      	movs	r1, #128	@ 0x80
 8004fc4:	0549      	lsls	r1, r1, #21
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fca:	4b64      	ldr	r3, [pc, #400]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fce:	2380      	movs	r3, #128	@ 0x80
 8004fd0:	055b      	lsls	r3, r3, #21
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd8:	183b      	adds	r3, r7, r0
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004fde:	4b5f      	ldr	r3, [pc, #380]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fe2:	23c0      	movs	r3, #192	@ 0xc0
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d019      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d014      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004ffa:	4b58      	ldr	r3, [pc, #352]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffe:	4a58      	ldr	r2, [pc, #352]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005000:	4013      	ands	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005004:	4b55      	ldr	r3, [pc, #340]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005006:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005008:	4b54      	ldr	r3, [pc, #336]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800500a:	2180      	movs	r1, #128	@ 0x80
 800500c:	0249      	lsls	r1, r1, #9
 800500e:	430a      	orrs	r2, r1
 8005010:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005012:	4b52      	ldr	r3, [pc, #328]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005014:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005016:	4b51      	ldr	r3, [pc, #324]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005018:	4952      	ldr	r1, [pc, #328]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800501a:	400a      	ands	r2, r1
 800501c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800501e:	4b4f      	ldr	r3, [pc, #316]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2201      	movs	r2, #1
 8005028:	4013      	ands	r3, r2
 800502a:	d016      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fc fffc 	bl	8002028 <HAL_GetTick>
 8005030:	0003      	movs	r3, r0
 8005032:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005034:	e00c      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fc fff7 	bl	8002028 <HAL_GetTick>
 800503a:	0002      	movs	r2, r0
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	4a49      	ldr	r2, [pc, #292]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d904      	bls.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005046:	2313      	movs	r3, #19
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	2203      	movs	r2, #3
 800504c:	701a      	strb	r2, [r3, #0]
          break;
 800504e:	e004      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005050:	4b42      	ldr	r3, [pc, #264]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005054:	2202      	movs	r2, #2
 8005056:	4013      	ands	r3, r2
 8005058:	d0ed      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800505a:	2313      	movs	r3, #19
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005064:	4b3d      	ldr	r3, [pc, #244]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005068:	4a3d      	ldr	r2, [pc, #244]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800506a:	4013      	ands	r3, r2
 800506c:	0019      	movs	r1, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	4b3a      	ldr	r3, [pc, #232]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005074:	430a      	orrs	r2, r1
 8005076:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005078:	e005      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	2312      	movs	r3, #18
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	2213      	movs	r2, #19
 8005080:	18ba      	adds	r2, r7, r2
 8005082:	7812      	ldrb	r2, [r2, #0]
 8005084:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005086:	2311      	movs	r3, #17
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005090:	4b32      	ldr	r3, [pc, #200]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005094:	4b31      	ldr	r3, [pc, #196]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005096:	4935      	ldr	r1, [pc, #212]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005098:	400a      	ands	r2, r1
 800509a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2201      	movs	r2, #1
 80050a2:	4013      	ands	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050a6:	4b2d      	ldr	r3, [pc, #180]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050aa:	2203      	movs	r2, #3
 80050ac:	4393      	bics	r3, r2
 80050ae:	0019      	movs	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	4b29      	ldr	r3, [pc, #164]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050b6:	430a      	orrs	r2, r1
 80050b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050c4:	4b25      	ldr	r3, [pc, #148]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	4a29      	ldr	r2, [pc, #164]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	0019      	movs	r1, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	4b22      	ldr	r3, [pc, #136]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050d4:	430a      	orrs	r2, r1
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2220      	movs	r2, #32
 80050de:	4013      	ands	r3, r2
 80050e0:	d008      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e2:	4b1e      	ldr	r3, [pc, #120]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	0899      	lsrs	r1, r3, #2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	4b1b      	ldr	r3, [pc, #108]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2208      	movs	r2, #8
 80050fa:	4013      	ands	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050fe:	4b17      	ldr	r3, [pc, #92]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005102:	4a1c      	ldr	r2, [pc, #112]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005104:	4013      	ands	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800510e:	430a      	orrs	r2, r1
 8005110:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2204      	movs	r2, #4
 8005118:	4013      	ands	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800511c:	4b0f      	ldr	r3, [pc, #60]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	4a15      	ldr	r2, [pc, #84]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800512c:	430a      	orrs	r2, r1
 800512e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2280      	movs	r2, #128	@ 0x80
 8005136:	4013      	ands	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800513a:	4b08      	ldr	r3, [pc, #32]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	22e0      	movs	r2, #224	@ 0xe0
 8005140:	4393      	bics	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b04      	ldr	r3, [pc, #16]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
  }
  return status;
 800514e:	2312      	movs	r3, #18
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	781b      	ldrb	r3, [r3, #0]
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b006      	add	sp, #24
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	fffffcff 	.word	0xfffffcff
 8005164:	fffeffff 	.word	0xfffeffff
 8005168:	00001388 	.word	0x00001388
 800516c:	efffffff 	.word	0xefffffff
 8005170:	ffffcfff 	.word	0xffffcfff
 8005174:	ffffefff 	.word	0xffffefff
 8005178:	ffff3fff 	.word	0xffff3fff

0800517c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0a8      	b.n	80052e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	2382      	movs	r3, #130	@ 0x82
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	429a      	cmp	r2, r3
 80051a0:	d009      	beq.n	80051b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	61da      	str	r2, [r3, #28]
 80051a8:	e005      	b.n	80051b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	225d      	movs	r2, #93	@ 0x5d
 80051c0:	5c9b      	ldrb	r3, [r3, r2]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	225c      	movs	r2, #92	@ 0x5c
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7fc fc04 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	225d      	movs	r2, #93	@ 0x5d
 80051dc:	2102      	movs	r1, #2
 80051de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2140      	movs	r1, #64	@ 0x40
 80051ec:	438a      	bics	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	23e0      	movs	r3, #224	@ 0xe0
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d902      	bls.n	8005202 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e002      	b.n	8005208 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	015b      	lsls	r3, r3, #5
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	23f0      	movs	r3, #240	@ 0xf0
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	429a      	cmp	r2, r3
 8005212:	d008      	beq.n	8005226 <HAL_SPI_Init+0xaa>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	23e0      	movs	r3, #224	@ 0xe0
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	429a      	cmp	r2, r3
 800521e:	d002      	beq.n	8005226 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	2382      	movs	r3, #130	@ 0x82
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	401a      	ands	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	2384      	movs	r3, #132	@ 0x84
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	400b      	ands	r3, r1
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2102      	movs	r1, #2
 8005242:	400b      	ands	r3, r1
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2101      	movs	r1, #1
 800524c:	400b      	ands	r3, r1
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6999      	ldr	r1, [r3, #24]
 8005254:	2380      	movs	r3, #128	@ 0x80
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	400b      	ands	r3, r1
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	2138      	movs	r1, #56	@ 0x38
 8005262:	400b      	ands	r3, r1
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	2180      	movs	r1, #128	@ 0x80
 800526c:	400b      	ands	r3, r1
 800526e:	431a      	orrs	r2, r3
 8005270:	0011      	movs	r1, r2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005276:	2380      	movs	r3, #128	@ 0x80
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	401a      	ands	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	2204      	movs	r2, #4
 800528c:	401a      	ands	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	2110      	movs	r1, #16
 8005294:	400b      	ands	r3, r1
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529c:	2108      	movs	r1, #8
 800529e:	400b      	ands	r3, r1
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68d9      	ldr	r1, [r3, #12]
 80052a6:	23f0      	movs	r3, #240	@ 0xf0
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	400b      	ands	r3, r1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	0011      	movs	r1, r2
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	2380      	movs	r3, #128	@ 0x80
 80052b4:	015b      	lsls	r3, r3, #5
 80052b6:	401a      	ands	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4907      	ldr	r1, [pc, #28]	@ (80052e8 <HAL_SPI_Init+0x16c>)
 80052cc:	400a      	ands	r2, r1
 80052ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	225d      	movs	r2, #93	@ 0x5d
 80052da:	2101      	movs	r1, #1
 80052dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b004      	add	sp, #16
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	fffff7ff 	.word	0xfffff7ff

080052ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e04a      	b.n	8005394 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	223d      	movs	r2, #61	@ 0x3d
 8005302:	5c9b      	ldrb	r3, [r3, r2]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d107      	bne.n	800531a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	223c      	movs	r2, #60	@ 0x3c
 800530e:	2100      	movs	r1, #0
 8005310:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f7fc fc09 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223d      	movs	r2, #61	@ 0x3d
 800531e:	2102      	movs	r1, #2
 8005320:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	0019      	movs	r1, r3
 800532c:	0010      	movs	r0, r2
 800532e:	f000 f98d 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2248      	movs	r2, #72	@ 0x48
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	223e      	movs	r2, #62	@ 0x3e
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	223f      	movs	r2, #63	@ 0x3f
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2240      	movs	r2, #64	@ 0x40
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2241      	movs	r2, #65	@ 0x41
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2242      	movs	r2, #66	@ 0x42
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2243      	movs	r2, #67	@ 0x43
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2244      	movs	r2, #68	@ 0x44
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2245      	movs	r2, #69	@ 0x45
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2246      	movs	r2, #70	@ 0x46
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2247      	movs	r2, #71	@ 0x47
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	223d      	movs	r2, #61	@ 0x3d
 800538e:	2101      	movs	r1, #1
 8005390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e04a      	b.n	8005444 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	223d      	movs	r2, #61	@ 0x3d
 80053b2:	5c9b      	ldrb	r3, [r3, r2]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	223c      	movs	r2, #60	@ 0x3c
 80053be:	2100      	movs	r1, #0
 80053c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7fc fb91 	bl	8001aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	223d      	movs	r2, #61	@ 0x3d
 80053ce:	2102      	movs	r1, #2
 80053d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	0019      	movs	r1, r3
 80053dc:	0010      	movs	r0, r2
 80053de:	f000 f935 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2248      	movs	r2, #72	@ 0x48
 80053e6:	2101      	movs	r1, #1
 80053e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	223e      	movs	r2, #62	@ 0x3e
 80053ee:	2101      	movs	r1, #1
 80053f0:	5499      	strb	r1, [r3, r2]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	223f      	movs	r2, #63	@ 0x3f
 80053f6:	2101      	movs	r1, #1
 80053f8:	5499      	strb	r1, [r3, r2]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2240      	movs	r2, #64	@ 0x40
 80053fe:	2101      	movs	r1, #1
 8005400:	5499      	strb	r1, [r3, r2]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2241      	movs	r2, #65	@ 0x41
 8005406:	2101      	movs	r1, #1
 8005408:	5499      	strb	r1, [r3, r2]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2242      	movs	r2, #66	@ 0x42
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2243      	movs	r2, #67	@ 0x43
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2244      	movs	r2, #68	@ 0x44
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2245      	movs	r2, #69	@ 0x45
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2246      	movs	r2, #70	@ 0x46
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2247      	movs	r2, #71	@ 0x47
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	223d      	movs	r2, #61	@ 0x3d
 800543e:	2101      	movs	r1, #1
 8005440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	0018      	movs	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	b002      	add	sp, #8
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2317      	movs	r3, #23
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	223c      	movs	r2, #60	@ 0x3c
 8005464:	5c9b      	ldrb	r3, [r3, r2]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_TIM_PWM_ConfigChannel+0x22>
 800546a:	2302      	movs	r3, #2
 800546c:	e0e5      	b.n	800563a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	223c      	movs	r2, #60	@ 0x3c
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b14      	cmp	r3, #20
 800547a:	d900      	bls.n	800547e <HAL_TIM_PWM_ConfigChannel+0x32>
 800547c:	e0d1      	b.n	8005622 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	009a      	lsls	r2, r3, #2
 8005482:	4b70      	ldr	r3, [pc, #448]	@ (8005644 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005484:	18d3      	adds	r3, r2, r3
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0011      	movs	r1, r2
 8005492:	0018      	movs	r0, r3
 8005494:	f000 f95e 	bl	8005754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2108      	movs	r1, #8
 80054a4:	430a      	orrs	r2, r1
 80054a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2104      	movs	r1, #4
 80054b4:	438a      	bics	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6999      	ldr	r1, [r3, #24]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	619a      	str	r2, [r3, #24]
      break;
 80054ca:	e0af      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	0011      	movs	r1, r2
 80054d4:	0018      	movs	r0, r3
 80054d6:	f000 f9bd 	bl	8005854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2180      	movs	r1, #128	@ 0x80
 80054e6:	0109      	lsls	r1, r1, #4
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4954      	ldr	r1, [pc, #336]	@ (8005648 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054f8:	400a      	ands	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6999      	ldr	r1, [r3, #24]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	619a      	str	r2, [r3, #24]
      break;
 8005510:	e08c      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0011      	movs	r1, r2
 800551a:	0018      	movs	r0, r3
 800551c:	f000 fa18 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2108      	movs	r1, #8
 800552c:	430a      	orrs	r2, r1
 800552e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2104      	movs	r1, #4
 800553c:	438a      	bics	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69d9      	ldr	r1, [r3, #28]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	61da      	str	r2, [r3, #28]
      break;
 8005552:	e06b      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f000 fa79 	bl	8005a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2180      	movs	r1, #128	@ 0x80
 800556e:	0109      	lsls	r1, r1, #4
 8005570:	430a      	orrs	r2, r1
 8005572:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4932      	ldr	r1, [pc, #200]	@ (8005648 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005580:	400a      	ands	r2, r1
 8005582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69d9      	ldr	r1, [r3, #28]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	61da      	str	r2, [r3, #28]
      break;
 8005598:	e048      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	0011      	movs	r1, r2
 80055a2:	0018      	movs	r0, r3
 80055a4:	f000 faba 	bl	8005b1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2108      	movs	r1, #8
 80055b4:	430a      	orrs	r2, r1
 80055b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2104      	movs	r1, #4
 80055c4:	438a      	bics	r2, r1
 80055c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055da:	e027      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	0011      	movs	r1, r2
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 faf3 	bl	8005bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2180      	movs	r1, #128	@ 0x80
 80055f6:	0109      	lsls	r1, r1, #4
 80055f8:	430a      	orrs	r2, r1
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4910      	ldr	r1, [pc, #64]	@ (8005648 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005608:	400a      	ands	r2, r1
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	021a      	lsls	r2, r3, #8
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005620:	e004      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005622:	2317      	movs	r3, #23
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]
      break;
 800562a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	223c      	movs	r2, #60	@ 0x3c
 8005630:	2100      	movs	r1, #0
 8005632:	5499      	strb	r1, [r3, r2]

  return status;
 8005634:	2317      	movs	r3, #23
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	781b      	ldrb	r3, [r3, #0]
}
 800563a:	0018      	movs	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	b006      	add	sp, #24
 8005640:	bd80      	pop	{r7, pc}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	08007c28 	.word	0x08007c28
 8005648:	fffffbff 	.word	0xfffffbff

0800564c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a37      	ldr	r2, [pc, #220]	@ (800573c <TIM_Base_SetConfig+0xf0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d008      	beq.n	8005676 <TIM_Base_SetConfig+0x2a>
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	2380      	movs	r3, #128	@ 0x80
 8005668:	05db      	lsls	r3, r3, #23
 800566a:	429a      	cmp	r2, r3
 800566c:	d003      	beq.n	8005676 <TIM_Base_SetConfig+0x2a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a33      	ldr	r2, [pc, #204]	@ (8005740 <TIM_Base_SetConfig+0xf4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d108      	bne.n	8005688 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2270      	movs	r2, #112	@ 0x70
 800567a:	4393      	bics	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <TIM_Base_SetConfig+0xf0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d014      	beq.n	80056ba <TIM_Base_SetConfig+0x6e>
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	05db      	lsls	r3, r3, #23
 8005696:	429a      	cmp	r2, r3
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0x6e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a28      	ldr	r2, [pc, #160]	@ (8005740 <TIM_Base_SetConfig+0xf4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x6e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a27      	ldr	r2, [pc, #156]	@ (8005744 <TIM_Base_SetConfig+0xf8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x6e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a26      	ldr	r2, [pc, #152]	@ (8005748 <TIM_Base_SetConfig+0xfc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x6e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a25      	ldr	r2, [pc, #148]	@ (800574c <TIM_Base_SetConfig+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a24      	ldr	r2, [pc, #144]	@ (8005750 <TIM_Base_SetConfig+0x104>)
 80056be:	4013      	ands	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2280      	movs	r2, #128	@ 0x80
 80056d0:	4393      	bics	r3, r2
 80056d2:	001a      	movs	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a11      	ldr	r2, [pc, #68]	@ (800573c <TIM_Base_SetConfig+0xf0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d007      	beq.n	800570a <TIM_Base_SetConfig+0xbe>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a12      	ldr	r2, [pc, #72]	@ (8005748 <TIM_Base_SetConfig+0xfc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_Base_SetConfig+0xbe>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a11      	ldr	r2, [pc, #68]	@ (800574c <TIM_Base_SetConfig+0x100>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d103      	bne.n	8005712 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2201      	movs	r2, #1
 800571e:	4013      	ands	r3, r2
 8005720:	2b01      	cmp	r3, #1
 8005722:	d106      	bne.n	8005732 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2201      	movs	r2, #1
 800572a:	4393      	bics	r3, r2
 800572c:	001a      	movs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]
  }
}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	46bd      	mov	sp, r7
 8005736:	b004      	add	sp, #16
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40000400 	.word	0x40000400
 8005744:	40002000 	.word	0x40002000
 8005748:	40014400 	.word	0x40014400
 800574c:	40014800 	.word	0x40014800
 8005750:	fffffcff 	.word	0xfffffcff

08005754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	2201      	movs	r2, #1
 800576a:	4393      	bics	r3, r2
 800576c:	001a      	movs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a2e      	ldr	r2, [pc, #184]	@ (800583c <TIM_OC1_SetConfig+0xe8>)
 8005782:	4013      	ands	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2203      	movs	r2, #3
 800578a:	4393      	bics	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2202      	movs	r2, #2
 800579c:	4393      	bics	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a24      	ldr	r2, [pc, #144]	@ (8005840 <TIM_OC1_SetConfig+0xec>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d007      	beq.n	80057c2 <TIM_OC1_SetConfig+0x6e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a23      	ldr	r2, [pc, #140]	@ (8005844 <TIM_OC1_SetConfig+0xf0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d003      	beq.n	80057c2 <TIM_OC1_SetConfig+0x6e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <TIM_OC1_SetConfig+0xf4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10c      	bne.n	80057dc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2208      	movs	r2, #8
 80057c6:	4393      	bics	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2204      	movs	r2, #4
 80057d8:	4393      	bics	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a18      	ldr	r2, [pc, #96]	@ (8005840 <TIM_OC1_SetConfig+0xec>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a17      	ldr	r2, [pc, #92]	@ (8005844 <TIM_OC1_SetConfig+0xf0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <TIM_OC1_SetConfig+0xf4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d111      	bne.n	8005818 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4a15      	ldr	r2, [pc, #84]	@ (800584c <TIM_OC1_SetConfig+0xf8>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4a14      	ldr	r2, [pc, #80]	@ (8005850 <TIM_OC1_SetConfig+0xfc>)
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	46c0      	nop			@ (mov r8, r8)
 8005834:	46bd      	mov	sp, r7
 8005836:	b006      	add	sp, #24
 8005838:	bd80      	pop	{r7, pc}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	fffeff8f 	.word	0xfffeff8f
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800
 800584c:	fffffeff 	.word	0xfffffeff
 8005850:	fffffdff 	.word	0xfffffdff

08005854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	2210      	movs	r2, #16
 800586a:	4393      	bics	r3, r2
 800586c:	001a      	movs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a2c      	ldr	r2, [pc, #176]	@ (8005934 <TIM_OC2_SetConfig+0xe0>)
 8005882:	4013      	ands	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a2b      	ldr	r2, [pc, #172]	@ (8005938 <TIM_OC2_SetConfig+0xe4>)
 800588a:	4013      	ands	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2220      	movs	r2, #32
 800589e:	4393      	bics	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a22      	ldr	r2, [pc, #136]	@ (800593c <TIM_OC2_SetConfig+0xe8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2280      	movs	r2, #128	@ 0x80
 80058ba:	4393      	bics	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2240      	movs	r2, #64	@ 0x40
 80058ce:	4393      	bics	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a19      	ldr	r2, [pc, #100]	@ (800593c <TIM_OC2_SetConfig+0xe8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <TIM_OC2_SetConfig+0x96>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a18      	ldr	r2, [pc, #96]	@ (8005940 <TIM_OC2_SetConfig+0xec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC2_SetConfig+0x96>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a17      	ldr	r2, [pc, #92]	@ (8005944 <TIM_OC2_SetConfig+0xf0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d113      	bne.n	8005912 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4a16      	ldr	r2, [pc, #88]	@ (8005948 <TIM_OC2_SetConfig+0xf4>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4a15      	ldr	r2, [pc, #84]	@ (800594c <TIM_OC2_SetConfig+0xf8>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	621a      	str	r2, [r3, #32]
}
 800592c:	46c0      	nop			@ (mov r8, r8)
 800592e:	46bd      	mov	sp, r7
 8005930:	b006      	add	sp, #24
 8005932:	bd80      	pop	{r7, pc}
 8005934:	feff8fff 	.word	0xfeff8fff
 8005938:	fffffcff 	.word	0xfffffcff
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	fffffbff 	.word	0xfffffbff
 800594c:	fffff7ff 	.word	0xfffff7ff

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	4a31      	ldr	r2, [pc, #196]	@ (8005a2c <TIM_OC3_SetConfig+0xdc>)
 8005966:	401a      	ands	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a30 <TIM_OC3_SetConfig+0xe0>)
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2203      	movs	r2, #3
 8005984:	4393      	bics	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4a27      	ldr	r2, [pc, #156]	@ (8005a34 <TIM_OC3_SetConfig+0xe4>)
 8005996:	4013      	ands	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <TIM_OC3_SetConfig+0xe8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10d      	bne.n	80059ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <TIM_OC3_SetConfig+0xec>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a40 <TIM_OC3_SetConfig+0xf0>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a38 <TIM_OC3_SetConfig+0xe8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_OC3_SetConfig+0x92>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a44 <TIM_OC3_SetConfig+0xf4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x92>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <TIM_OC3_SetConfig+0xf8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d113      	bne.n	8005a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <TIM_OC3_SetConfig+0xfc>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <TIM_OC3_SetConfig+0x100>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	46c0      	nop			@ (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b006      	add	sp, #24
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	fffffeff 	.word	0xfffffeff
 8005a30:	fffeff8f 	.word	0xfffeff8f
 8005a34:	fffffdff 	.word	0xfffffdff
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	fffff7ff 	.word	0xfffff7ff
 8005a40:	fffffbff 	.word	0xfffffbff
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800
 8005a4c:	ffffefff 	.word	0xffffefff
 8005a50:	ffffdfff 	.word	0xffffdfff

08005a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	4a24      	ldr	r2, [pc, #144]	@ (8005afc <TIM_OC4_SetConfig+0xa8>)
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a20      	ldr	r2, [pc, #128]	@ (8005b00 <TIM_OC4_SetConfig+0xac>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a1f      	ldr	r2, [pc, #124]	@ (8005b04 <TIM_OC4_SetConfig+0xb0>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <TIM_OC4_SetConfig+0xb4>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a17      	ldr	r2, [pc, #92]	@ (8005b0c <TIM_OC4_SetConfig+0xb8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x70>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a16      	ldr	r2, [pc, #88]	@ (8005b10 <TIM_OC4_SetConfig+0xbc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC4_SetConfig+0x70>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <TIM_OC4_SetConfig+0xc0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d109      	bne.n	8005ad8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	@ (8005b18 <TIM_OC4_SetConfig+0xc4>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	019b      	lsls	r3, r3, #6
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b006      	add	sp, #24
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	ffffefff 	.word	0xffffefff
 8005b00:	feff8fff 	.word	0xfeff8fff
 8005b04:	fffffcff 	.word	0xfffffcff
 8005b08:	ffffdfff 	.word	0xffffdfff
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40014400 	.word	0x40014400
 8005b14:	40014800 	.word	0x40014800
 8005b18:	ffffbfff 	.word	0xffffbfff

08005b1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	4a21      	ldr	r2, [pc, #132]	@ (8005bb8 <TIM_OC5_SetConfig+0x9c>)
 8005b32:	401a      	ands	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <TIM_OC5_SetConfig+0xa0>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4a19      	ldr	r2, [pc, #100]	@ (8005bc0 <TIM_OC5_SetConfig+0xa4>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <TIM_OC5_SetConfig+0xa8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_OC5_SetConfig+0x66>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <TIM_OC5_SetConfig+0xac>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_OC5_SetConfig+0x66>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <TIM_OC5_SetConfig+0xb0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d109      	bne.n	8005b96 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb8 <TIM_OC5_SetConfig+0x9c>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b006      	add	sp, #24
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	fffeffff 	.word	0xfffeffff
 8005bbc:	fffeff8f 	.word	0xfffeff8f
 8005bc0:	fffdffff 	.word	0xfffdffff
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	4a22      	ldr	r2, [pc, #136]	@ (8005c70 <TIM_OC6_SetConfig+0xa0>)
 8005be6:	401a      	ands	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005c74 <TIM_OC6_SetConfig+0xa4>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005c78 <TIM_OC6_SetConfig+0xa8>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	051b      	lsls	r3, r3, #20
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <TIM_OC6_SetConfig+0xac>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC6_SetConfig+0x68>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a15      	ldr	r2, [pc, #84]	@ (8005c80 <TIM_OC6_SetConfig+0xb0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC6_SetConfig+0x68>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a14      	ldr	r2, [pc, #80]	@ (8005c84 <TIM_OC6_SetConfig+0xb4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d109      	bne.n	8005c4c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4a13      	ldr	r2, [pc, #76]	@ (8005c88 <TIM_OC6_SetConfig+0xb8>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	029b      	lsls	r3, r3, #10
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b006      	add	sp, #24
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	ffefffff 	.word	0xffefffff
 8005c74:	feff8fff 	.word	0xfeff8fff
 8005c78:	ffdfffff 	.word	0xffdfffff
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800
 8005c88:	fffbffff 	.word	0xfffbffff

08005c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	223c      	movs	r2, #60	@ 0x3c
 8005c9a:	5c9b      	ldrb	r3, [r3, r2]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e050      	b.n	8005d46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	223c      	movs	r2, #60	@ 0x3c
 8005ca8:	2101      	movs	r1, #1
 8005caa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	223d      	movs	r2, #61	@ 0x3d
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a21      	ldr	r2, [pc, #132]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d108      	bne.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a20      	ldr	r2, [pc, #128]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2270      	movs	r2, #112	@ 0x70
 8005ce4:	4393      	bics	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a14      	ldr	r2, [pc, #80]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00a      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	05db      	lsls	r3, r3, #23
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a10      	ldr	r2, [pc, #64]	@ (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d10c      	bne.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2280      	movs	r2, #128	@ 0x80
 8005d1e:	4393      	bics	r3, r2
 8005d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	223d      	movs	r2, #61	@ 0x3d
 8005d38:	2101      	movs	r1, #1
 8005d3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	223c      	movs	r2, #60	@ 0x3c
 8005d40:	2100      	movs	r1, #0
 8005d42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b004      	add	sp, #16
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	ff0fffff 	.word	0xff0fffff
 8005d58:	40000400 	.word	0x40000400

08005d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	223c      	movs	r2, #60	@ 0x3c
 8005d6e:	5c9b      	ldrb	r3, [r3, r2]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e06f      	b.n	8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	223c      	movs	r2, #60	@ 0x3c
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	22ff      	movs	r2, #255	@ 0xff
 8005d84:	4393      	bics	r3, r2
 8005d86:	001a      	movs	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a33      	ldr	r2, [pc, #204]	@ (8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005d94:	401a      	ands	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a30      	ldr	r2, [pc, #192]	@ (8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005da2:	401a      	ands	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a2e      	ldr	r2, [pc, #184]	@ (8005e68 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005db0:	401a      	ands	r2, r3
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e6c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a29      	ldr	r2, [pc, #164]	@ (8005e70 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005dcc:	401a      	ands	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4a26      	ldr	r2, [pc, #152]	@ (8005e74 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005dda:	401a      	ands	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a24      	ldr	r2, [pc, #144]	@ (8005e78 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005de8:	401a      	ands	r2, r3
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a21      	ldr	r2, [pc, #132]	@ (8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005df8:	401a      	ands	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	@ (8005e80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d11c      	bne.n	8005e46 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e84 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005e10:	401a      	ands	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e16:	051b      	lsls	r3, r3, #20
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005e20:	401a      	ands	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005e2e:	401a      	ands	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005e3c:	401a      	ands	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	223c      	movs	r2, #60	@ 0x3c
 8005e52:	2100      	movs	r1, #0
 8005e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	0018      	movs	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b004      	add	sp, #16
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	fffffcff 	.word	0xfffffcff
 8005e64:	fffffbff 	.word	0xfffffbff
 8005e68:	fffff7ff 	.word	0xfffff7ff
 8005e6c:	ffffefff 	.word	0xffffefff
 8005e70:	ffffdfff 	.word	0xffffdfff
 8005e74:	ffffbfff 	.word	0xffffbfff
 8005e78:	fff0ffff 	.word	0xfff0ffff
 8005e7c:	efffffff 	.word	0xefffffff
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	ff0fffff 	.word	0xff0fffff
 8005e88:	feffffff 	.word	0xfeffffff
 8005e8c:	fdffffff 	.word	0xfdffffff
 8005e90:	dfffffff 	.word	0xdfffffff

08005e94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	1dbb      	adds	r3, r7, #6
 8005ea0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2288      	movs	r2, #136	@ 0x88
 8005ea6:	589b      	ldr	r3, [r3, r2]
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d000      	beq.n	8005eae <HAL_UART_Transmit_DMA+0x1a>
 8005eac:	e079      	b.n	8005fa2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_UART_Transmit_DMA+0x28>
 8005eb4:	1dbb      	adds	r3, r7, #6
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e071      	b.n	8005fa4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	2380      	movs	r3, #128	@ 0x80
 8005ec6:	015b      	lsls	r3, r3, #5
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d109      	bne.n	8005ee0 <HAL_UART_Transmit_DMA+0x4c>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4013      	ands	r3, r2
 8005eda:	d001      	beq.n	8005ee0 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e061      	b.n	8005fa4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1dba      	adds	r2, r7, #6
 8005eea:	2154      	movs	r1, #84	@ 0x54
 8005eec:	8812      	ldrh	r2, [r2, #0]
 8005eee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1dba      	adds	r2, r7, #6
 8005ef4:	2156      	movs	r1, #86	@ 0x56
 8005ef6:	8812      	ldrh	r2, [r2, #0]
 8005ef8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2290      	movs	r2, #144	@ 0x90
 8005efe:	2100      	movs	r1, #0
 8005f00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2288      	movs	r2, #136	@ 0x88
 8005f06:	2121      	movs	r1, #33	@ 0x21
 8005f08:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d028      	beq.n	8005f64 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f16:	4a25      	ldr	r2, [pc, #148]	@ (8005fac <HAL_UART_Transmit_DMA+0x118>)
 8005f18:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f1e:	4a24      	ldr	r2, [pc, #144]	@ (8005fb0 <HAL_UART_Transmit_DMA+0x11c>)
 8005f20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f26:	4a23      	ldr	r2, [pc, #140]	@ (8005fb4 <HAL_UART_Transmit_DMA+0x120>)
 8005f28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f2e:	2200      	movs	r2, #0
 8005f30:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3328      	adds	r3, #40	@ 0x28
 8005f42:	001a      	movs	r2, r3
 8005f44:	1dbb      	adds	r3, r7, #6
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	f7fd f86a 	bl	8003020 <HAL_DMA_Start_IT>
 8005f4c:	1e03      	subs	r3, r0, #0
 8005f4e:	d009      	beq.n	8005f64 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2290      	movs	r2, #144	@ 0x90
 8005f54:	2110      	movs	r1, #16
 8005f56:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2288      	movs	r2, #136	@ 0x88
 8005f5c:	2120      	movs	r1, #32
 8005f5e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e01f      	b.n	8005fa4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2240      	movs	r2, #64	@ 0x40
 8005f6a:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f70:	613b      	str	r3, [r7, #16]
  return(result);
 8005f72:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	2301      	movs	r3, #1
 8005f78:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f383 8810 	msr	PRIMASK, r3
}
 8005f80:	46c0      	nop			@ (mov r8, r8)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2180      	movs	r1, #128	@ 0x80
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f383 8810 	msr	PRIMASK, r3
}
 8005f9c:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e000      	b.n	8005fa4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
  }
}
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b008      	add	sp, #32
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	080071cd 	.word	0x080071cd
 8005fb0:	08007265 	.word	0x08007265
 8005fb4:	080073f7 	.word	0x080073f7

08005fb8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b096      	sub	sp, #88	@ 0x58
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fca:	2301      	movs	r3, #1
 8005fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f383 8810 	msr	PRIMASK, r3
}
 8005fd4:	46c0      	nop			@ (mov r8, r8)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4979      	ldr	r1, [pc, #484]	@ (80061c8 <HAL_UART_Abort+0x210>)
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fec:	f383 8810 	msr	PRIMASK, r3
}
 8005ff0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8005ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006002:	f383 8810 	msr	PRIMASK, r3
}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	496e      	ldr	r1, [pc, #440]	@ (80061cc <HAL_UART_Abort+0x214>)
 8006014:	400a      	ands	r2, r1
 8006016:	609a      	str	r2, [r3, #8]
 8006018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800601a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800601e:	f383 8810 	msr	PRIMASK, r3
}
 8006022:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d118      	bne.n	800605e <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800602c:	f3ef 8310 	mrs	r3, PRIMASK
 8006030:	623b      	str	r3, [r7, #32]
  return(result);
 8006032:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006036:	2301      	movs	r3, #1
 8006038:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	f383 8810 	msr	PRIMASK, r3
}
 8006040:	46c0      	nop			@ (mov r8, r8)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2110      	movs	r1, #16
 800604e:	438a      	bics	r2, r1
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006054:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	f383 8810 	msr	PRIMASK, r3
}
 800605c:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2280      	movs	r2, #128	@ 0x80
 8006066:	4013      	ands	r3, r2
 8006068:	2b80      	cmp	r3, #128	@ 0x80
 800606a:	d135      	bne.n	80060d8 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800606c:	f3ef 8310 	mrs	r3, PRIMASK
 8006070:	617b      	str	r3, [r7, #20]
  return(result);
 8006072:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006076:	2301      	movs	r3, #1
 8006078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	f383 8810 	msr	PRIMASK, r3
}
 8006080:	46c0      	nop			@ (mov r8, r8)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2180      	movs	r1, #128	@ 0x80
 800608e:	438a      	bics	r2, r1
 8006090:	609a      	str	r2, [r3, #8]
 8006092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f383 8810 	msr	PRIMASK, r3
}
 800609c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060aa:	2200      	movs	r2, #0
 80060ac:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b2:	0018      	movs	r0, r3
 80060b4:	f7fd f83c 	bl	8003130 <HAL_DMA_Abort>
 80060b8:	1e03      	subs	r3, r0, #0
 80060ba:	d00d      	beq.n	80060d8 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c0:	0018      	movs	r0, r3
 80060c2:	f7fd f9cf 	bl	8003464 <HAL_DMA_GetError>
 80060c6:	0003      	movs	r3, r0
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d105      	bne.n	80060d8 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2290      	movs	r2, #144	@ 0x90
 80060d0:	2110      	movs	r1, #16
 80060d2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e072      	b.n	80061be <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2240      	movs	r2, #64	@ 0x40
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b40      	cmp	r3, #64	@ 0x40
 80060e4:	d139      	bne.n	800615a <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80060e6:	f3ef 8310 	mrs	r3, PRIMASK
 80060ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f0:	2301      	movs	r3, #1
 80060f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f383 8810 	msr	PRIMASK, r3
}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2140      	movs	r1, #64	@ 0x40
 8006108:	438a      	bics	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800610e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f383 8810 	msr	PRIMASK, r3
}
 8006116:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2280      	movs	r2, #128	@ 0x80
 800611c:	589b      	ldr	r3, [r3, r2]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01b      	beq.n	800615a <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2280      	movs	r2, #128	@ 0x80
 8006126:	589b      	ldr	r3, [r3, r2]
 8006128:	2200      	movs	r2, #0
 800612a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2280      	movs	r2, #128	@ 0x80
 8006130:	589b      	ldr	r3, [r3, r2]
 8006132:	0018      	movs	r0, r3
 8006134:	f7fc fffc 	bl	8003130 <HAL_DMA_Abort>
 8006138:	1e03      	subs	r3, r0, #0
 800613a:	d00e      	beq.n	800615a <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2280      	movs	r2, #128	@ 0x80
 8006140:	589b      	ldr	r3, [r3, r2]
 8006142:	0018      	movs	r0, r3
 8006144:	f7fd f98e 	bl	8003464 <HAL_DMA_GetError>
 8006148:	0003      	movs	r3, r0
 800614a:	2b20      	cmp	r3, #32
 800614c:	d105      	bne.n	800615a <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2290      	movs	r2, #144	@ 0x90
 8006152:	2110      	movs	r1, #16
 8006154:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e031      	b.n	80061be <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2256      	movs	r2, #86	@ 0x56
 800615e:	2100      	movs	r1, #0
 8006160:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	225e      	movs	r2, #94	@ 0x5e
 8006166:	2100      	movs	r1, #0
 8006168:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	220f      	movs	r2, #15
 8006170:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006176:	2380      	movs	r3, #128	@ 0x80
 8006178:	059b      	lsls	r3, r3, #22
 800617a:	429a      	cmp	r2, r3
 800617c:	d107      	bne.n	800618e <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2110      	movs	r1, #16
 800618a:	430a      	orrs	r2, r1
 800618c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2108      	movs	r1, #8
 800619a:	430a      	orrs	r2, r1
 800619c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2288      	movs	r2, #136	@ 0x88
 80061a2:	2120      	movs	r1, #32
 80061a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	228c      	movs	r2, #140	@ 0x8c
 80061aa:	2120      	movs	r1, #32
 80061ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2290      	movs	r2, #144	@ 0x90
 80061b8:	2100      	movs	r1, #0
 80061ba:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	0018      	movs	r0, r3
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b016      	add	sp, #88	@ 0x58
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	fffffe1f 	.word	0xfffffe1f
 80061cc:	ef7ffffe 	.word	0xef7ffffe

080061d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061d0:	b5b0      	push	{r4, r5, r7, lr}
 80061d2:	b0aa      	sub	sp, #168	@ 0xa8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	22a4      	movs	r2, #164	@ 0xa4
 80061e0:	18b9      	adds	r1, r7, r2
 80061e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	20a0      	movs	r0, #160	@ 0xa0
 80061ec:	1839      	adds	r1, r7, r0
 80061ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	249c      	movs	r4, #156	@ 0x9c
 80061f8:	1939      	adds	r1, r7, r4
 80061fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061fc:	0011      	movs	r1, r2
 80061fe:	18bb      	adds	r3, r7, r2
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4aa2      	ldr	r2, [pc, #648]	@ (800648c <HAL_UART_IRQHandler+0x2bc>)
 8006204:	4013      	ands	r3, r2
 8006206:	2298      	movs	r2, #152	@ 0x98
 8006208:	18bd      	adds	r5, r7, r2
 800620a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800620c:	18bb      	adds	r3, r7, r2
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d11a      	bne.n	800624a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006214:	187b      	adds	r3, r7, r1
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2220      	movs	r2, #32
 800621a:	4013      	ands	r3, r2
 800621c:	d015      	beq.n	800624a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800621e:	183b      	adds	r3, r7, r0
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2220      	movs	r2, #32
 8006224:	4013      	ands	r3, r2
 8006226:	d105      	bne.n	8006234 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006228:	193b      	adds	r3, r7, r4
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	2380      	movs	r3, #128	@ 0x80
 800622e:	055b      	lsls	r3, r3, #21
 8006230:	4013      	ands	r3, r2
 8006232:	d00a      	beq.n	800624a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006238:	2b00      	cmp	r3, #0
 800623a:	d100      	bne.n	800623e <HAL_UART_IRQHandler+0x6e>
 800623c:	e2fb      	b.n	8006836 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	0010      	movs	r0, r2
 8006246:	4798      	blx	r3
      }
      return;
 8006248:	e2f5      	b.n	8006836 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800624a:	2398      	movs	r3, #152	@ 0x98
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d100      	bne.n	8006256 <HAL_UART_IRQHandler+0x86>
 8006254:	e122      	b.n	800649c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006256:	239c      	movs	r3, #156	@ 0x9c
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a8c      	ldr	r2, [pc, #560]	@ (8006490 <HAL_UART_IRQHandler+0x2c0>)
 800625e:	4013      	ands	r3, r2
 8006260:	d106      	bne.n	8006270 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006262:	23a0      	movs	r3, #160	@ 0xa0
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a8a      	ldr	r2, [pc, #552]	@ (8006494 <HAL_UART_IRQHandler+0x2c4>)
 800626a:	4013      	ands	r3, r2
 800626c:	d100      	bne.n	8006270 <HAL_UART_IRQHandler+0xa0>
 800626e:	e115      	b.n	800649c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006270:	23a4      	movs	r3, #164	@ 0xa4
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2201      	movs	r2, #1
 8006278:	4013      	ands	r3, r2
 800627a:	d012      	beq.n	80062a2 <HAL_UART_IRQHandler+0xd2>
 800627c:	23a0      	movs	r3, #160	@ 0xa0
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	2380      	movs	r3, #128	@ 0x80
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d00b      	beq.n	80062a2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2201      	movs	r2, #1
 8006290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2290      	movs	r2, #144	@ 0x90
 8006296:	589b      	ldr	r3, [r3, r2]
 8006298:	2201      	movs	r2, #1
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2190      	movs	r1, #144	@ 0x90
 80062a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a2:	23a4      	movs	r3, #164	@ 0xa4
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2202      	movs	r2, #2
 80062aa:	4013      	ands	r3, r2
 80062ac:	d011      	beq.n	80062d2 <HAL_UART_IRQHandler+0x102>
 80062ae:	239c      	movs	r3, #156	@ 0x9c
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2201      	movs	r2, #1
 80062b6:	4013      	ands	r3, r2
 80062b8:	d00b      	beq.n	80062d2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2202      	movs	r2, #2
 80062c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2290      	movs	r2, #144	@ 0x90
 80062c6:	589b      	ldr	r3, [r3, r2]
 80062c8:	2204      	movs	r2, #4
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2190      	movs	r1, #144	@ 0x90
 80062d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d2:	23a4      	movs	r3, #164	@ 0xa4
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2204      	movs	r2, #4
 80062da:	4013      	ands	r3, r2
 80062dc:	d011      	beq.n	8006302 <HAL_UART_IRQHandler+0x132>
 80062de:	239c      	movs	r3, #156	@ 0x9c
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	4013      	ands	r3, r2
 80062e8:	d00b      	beq.n	8006302 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2204      	movs	r2, #4
 80062f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2290      	movs	r2, #144	@ 0x90
 80062f6:	589b      	ldr	r3, [r3, r2]
 80062f8:	2202      	movs	r2, #2
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2190      	movs	r1, #144	@ 0x90
 8006300:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006302:	23a4      	movs	r3, #164	@ 0xa4
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	4013      	ands	r3, r2
 800630c:	d017      	beq.n	800633e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800630e:	23a0      	movs	r3, #160	@ 0xa0
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2220      	movs	r2, #32
 8006316:	4013      	ands	r3, r2
 8006318:	d105      	bne.n	8006326 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800631a:	239c      	movs	r3, #156	@ 0x9c
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5b      	ldr	r2, [pc, #364]	@ (8006490 <HAL_UART_IRQHandler+0x2c0>)
 8006322:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006324:	d00b      	beq.n	800633e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2208      	movs	r2, #8
 800632c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2290      	movs	r2, #144	@ 0x90
 8006332:	589b      	ldr	r3, [r3, r2]
 8006334:	2208      	movs	r2, #8
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2190      	movs	r1, #144	@ 0x90
 800633c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800633e:	23a4      	movs	r3, #164	@ 0xa4
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	2380      	movs	r3, #128	@ 0x80
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	4013      	ands	r3, r2
 800634a:	d013      	beq.n	8006374 <HAL_UART_IRQHandler+0x1a4>
 800634c:	23a0      	movs	r3, #160	@ 0xa0
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	2380      	movs	r3, #128	@ 0x80
 8006354:	04db      	lsls	r3, r3, #19
 8006356:	4013      	ands	r3, r2
 8006358:	d00c      	beq.n	8006374 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2280      	movs	r2, #128	@ 0x80
 8006360:	0112      	lsls	r2, r2, #4
 8006362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2290      	movs	r2, #144	@ 0x90
 8006368:	589b      	ldr	r3, [r3, r2]
 800636a:	2220      	movs	r2, #32
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2190      	movs	r1, #144	@ 0x90
 8006372:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2290      	movs	r2, #144	@ 0x90
 8006378:	589b      	ldr	r3, [r3, r2]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d100      	bne.n	8006380 <HAL_UART_IRQHandler+0x1b0>
 800637e:	e25c      	b.n	800683a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006380:	23a4      	movs	r3, #164	@ 0xa4
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2220      	movs	r2, #32
 8006388:	4013      	ands	r3, r2
 800638a:	d015      	beq.n	80063b8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800638c:	23a0      	movs	r3, #160	@ 0xa0
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2220      	movs	r2, #32
 8006394:	4013      	ands	r3, r2
 8006396:	d106      	bne.n	80063a6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006398:	239c      	movs	r3, #156	@ 0x9c
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	055b      	lsls	r3, r3, #21
 80063a2:	4013      	ands	r3, r2
 80063a4:	d008      	beq.n	80063b8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	0010      	movs	r0, r2
 80063b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2290      	movs	r2, #144	@ 0x90
 80063bc:	589b      	ldr	r3, [r3, r2]
 80063be:	2194      	movs	r1, #148	@ 0x94
 80063c0:	187a      	adds	r2, r7, r1
 80063c2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2240      	movs	r2, #64	@ 0x40
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b40      	cmp	r3, #64	@ 0x40
 80063d0:	d004      	beq.n	80063dc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063d2:	187b      	adds	r3, r7, r1
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2228      	movs	r2, #40	@ 0x28
 80063d8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063da:	d04c      	beq.n	8006476 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 fe8e 	bl	8007100 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2240      	movs	r2, #64	@ 0x40
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b40      	cmp	r3, #64	@ 0x40
 80063f0:	d13c      	bne.n	800646c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063f2:	f3ef 8310 	mrs	r3, PRIMASK
 80063f6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80063f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	2090      	movs	r0, #144	@ 0x90
 80063fc:	183a      	adds	r2, r7, r0
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	2301      	movs	r3, #1
 8006402:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006406:	f383 8810 	msr	PRIMASK, r3
}
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2140      	movs	r1, #64	@ 0x40
 8006418:	438a      	bics	r2, r1
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	183b      	adds	r3, r7, r0
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006422:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006424:	f383 8810 	msr	PRIMASK, r3
}
 8006428:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2280      	movs	r2, #128	@ 0x80
 800642e:	589b      	ldr	r3, [r3, r2]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d016      	beq.n	8006462 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2280      	movs	r2, #128	@ 0x80
 8006438:	589b      	ldr	r3, [r3, r2]
 800643a:	4a17      	ldr	r2, [pc, #92]	@ (8006498 <HAL_UART_IRQHandler+0x2c8>)
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2280      	movs	r2, #128	@ 0x80
 8006442:	589b      	ldr	r3, [r3, r2]
 8006444:	0018      	movs	r0, r3
 8006446:	f7fc fed5 	bl	80031f4 <HAL_DMA_Abort_IT>
 800644a:	1e03      	subs	r3, r0, #0
 800644c:	d01c      	beq.n	8006488 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2280      	movs	r2, #128	@ 0x80
 8006452:	589b      	ldr	r3, [r3, r2]
 8006454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	2180      	movs	r1, #128	@ 0x80
 800645a:	5852      	ldr	r2, [r2, r1]
 800645c:	0010      	movs	r0, r2
 800645e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	e012      	b.n	8006488 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	0018      	movs	r0, r3
 8006466:	f000 fa11 	bl	800688c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646a:	e00d      	b.n	8006488 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fa0c 	bl	800688c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	e008      	b.n	8006488 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0018      	movs	r0, r3
 800647a:	f000 fa07 	bl	800688c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2290      	movs	r2, #144	@ 0x90
 8006482:	2100      	movs	r1, #0
 8006484:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006486:	e1d8      	b.n	800683a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	46c0      	nop			@ (mov r8, r8)
    return;
 800648a:	e1d6      	b.n	800683a <HAL_UART_IRQHandler+0x66a>
 800648c:	0000080f 	.word	0x0000080f
 8006490:	10000001 	.word	0x10000001
 8006494:	04000120 	.word	0x04000120
 8006498:	0800747d 	.word	0x0800747d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d000      	beq.n	80064a6 <HAL_UART_IRQHandler+0x2d6>
 80064a4:	e15d      	b.n	8006762 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064a6:	23a4      	movs	r3, #164	@ 0xa4
 80064a8:	18fb      	adds	r3, r7, r3
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2210      	movs	r2, #16
 80064ae:	4013      	ands	r3, r2
 80064b0:	d100      	bne.n	80064b4 <HAL_UART_IRQHandler+0x2e4>
 80064b2:	e156      	b.n	8006762 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064b4:	23a0      	movs	r3, #160	@ 0xa0
 80064b6:	18fb      	adds	r3, r7, r3
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2210      	movs	r2, #16
 80064bc:	4013      	ands	r3, r2
 80064be:	d100      	bne.n	80064c2 <HAL_UART_IRQHandler+0x2f2>
 80064c0:	e14f      	b.n	8006762 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2210      	movs	r2, #16
 80064c8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2240      	movs	r2, #64	@ 0x40
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b40      	cmp	r3, #64	@ 0x40
 80064d6:	d000      	beq.n	80064da <HAL_UART_IRQHandler+0x30a>
 80064d8:	e0c3      	b.n	8006662 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2280      	movs	r2, #128	@ 0x80
 80064de:	589b      	ldr	r3, [r3, r2]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	217e      	movs	r1, #126	@ 0x7e
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80064ea:	187b      	adds	r3, r7, r1
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d100      	bne.n	80064f4 <HAL_UART_IRQHandler+0x324>
 80064f2:	e097      	b.n	8006624 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	225c      	movs	r2, #92	@ 0x5c
 80064f8:	5a9b      	ldrh	r3, [r3, r2]
 80064fa:	187a      	adds	r2, r7, r1
 80064fc:	8812      	ldrh	r2, [r2, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d300      	bcc.n	8006504 <HAL_UART_IRQHandler+0x334>
 8006502:	e08f      	b.n	8006624 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	187a      	adds	r2, r7, r1
 8006508:	215e      	movs	r1, #94	@ 0x5e
 800650a:	8812      	ldrh	r2, [r2, #0]
 800650c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2280      	movs	r2, #128	@ 0x80
 8006512:	589b      	ldr	r3, [r3, r2]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2220      	movs	r2, #32
 800651a:	4013      	ands	r3, r2
 800651c:	d170      	bne.n	8006600 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006526:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006528:	2301      	movs	r3, #1
 800652a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	49c4      	ldr	r1, [pc, #784]	@ (8006850 <HAL_UART_IRQHandler+0x680>)
 8006540:	400a      	ands	r2, r1
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006546:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006550:	f3ef 8310 	mrs	r3, PRIMASK
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	677b      	str	r3, [r7, #116]	@ 0x74
 800655a:	2301      	movs	r3, #1
 800655c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006560:	f383 8810 	msr	PRIMASK, r3
}
 8006564:	46c0      	nop			@ (mov r8, r8)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2101      	movs	r1, #1
 8006572:	438a      	bics	r2, r1
 8006574:	609a      	str	r2, [r3, #8]
 8006576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006578:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657c:	f383 8810 	msr	PRIMASK, r3
}
 8006580:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006582:	f3ef 8310 	mrs	r3, PRIMASK
 8006586:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658a:	673b      	str	r3, [r7, #112]	@ 0x70
 800658c:	2301      	movs	r3, #1
 800658e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006592:	f383 8810 	msr	PRIMASK, r3
}
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2140      	movs	r1, #64	@ 0x40
 80065a4:	438a      	bics	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065aa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ae:	f383 8810 	msr	PRIMASK, r3
}
 80065b2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	228c      	movs	r2, #140	@ 0x8c
 80065b8:	2120      	movs	r1, #32
 80065ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80065c2:	f3ef 8310 	mrs	r3, PRIMASK
 80065c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80065c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065cc:	2301      	movs	r3, #1
 80065ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065d2:	f383 8810 	msr	PRIMASK, r3
}
 80065d6:	46c0      	nop			@ (mov r8, r8)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2110      	movs	r1, #16
 80065e4:	438a      	bics	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065ee:	f383 8810 	msr	PRIMASK, r3
}
 80065f2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2280      	movs	r2, #128	@ 0x80
 80065f8:	589b      	ldr	r3, [r3, r2]
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7fc fd98 	bl	8003130 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	225c      	movs	r2, #92	@ 0x5c
 800660a:	5a9a      	ldrh	r2, [r3, r2]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	215e      	movs	r1, #94	@ 0x5e
 8006610:	5a5b      	ldrh	r3, [r3, r1]
 8006612:	b29b      	uxth	r3, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0011      	movs	r1, r2
 800661c:	0018      	movs	r0, r3
 800661e:	f7fa fc03 	bl	8000e28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006622:	e10c      	b.n	800683e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	225c      	movs	r2, #92	@ 0x5c
 8006628:	5a9b      	ldrh	r3, [r3, r2]
 800662a:	227e      	movs	r2, #126	@ 0x7e
 800662c:	18ba      	adds	r2, r7, r2
 800662e:	8812      	ldrh	r2, [r2, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d000      	beq.n	8006636 <HAL_UART_IRQHandler+0x466>
 8006634:	e103      	b.n	800683e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2280      	movs	r2, #128	@ 0x80
 800663a:	589b      	ldr	r3, [r3, r2]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2220      	movs	r2, #32
 8006642:	4013      	ands	r3, r2
 8006644:	2b20      	cmp	r3, #32
 8006646:	d000      	beq.n	800664a <HAL_UART_IRQHandler+0x47a>
 8006648:	e0f9      	b.n	800683e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	225c      	movs	r2, #92	@ 0x5c
 8006654:	5a9a      	ldrh	r2, [r3, r2]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	0011      	movs	r1, r2
 800665a:	0018      	movs	r0, r3
 800665c:	f7fa fbe4 	bl	8000e28 <HAL_UARTEx_RxEventCallback>
      return;
 8006660:	e0ed      	b.n	800683e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	225c      	movs	r2, #92	@ 0x5c
 8006666:	5a99      	ldrh	r1, [r3, r2]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	225e      	movs	r2, #94	@ 0x5e
 800666c:	5a9b      	ldrh	r3, [r3, r2]
 800666e:	b29a      	uxth	r2, r3
 8006670:	208e      	movs	r0, #142	@ 0x8e
 8006672:	183b      	adds	r3, r7, r0
 8006674:	1a8a      	subs	r2, r1, r2
 8006676:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	225e      	movs	r2, #94	@ 0x5e
 800667c:	5a9b      	ldrh	r3, [r3, r2]
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d100      	bne.n	8006686 <HAL_UART_IRQHandler+0x4b6>
 8006684:	e0dd      	b.n	8006842 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8006686:	183b      	adds	r3, r7, r0
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d100      	bne.n	8006690 <HAL_UART_IRQHandler+0x4c0>
 800668e:	e0d8      	b.n	8006842 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006690:	f3ef 8310 	mrs	r3, PRIMASK
 8006694:	60fb      	str	r3, [r7, #12]
  return(result);
 8006696:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006698:	2488      	movs	r4, #136	@ 0x88
 800669a:	193a      	adds	r2, r7, r4
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	2301      	movs	r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f383 8810 	msr	PRIMASK, r3
}
 80066a8:	46c0      	nop			@ (mov r8, r8)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4967      	ldr	r1, [pc, #412]	@ (8006854 <HAL_UART_IRQHandler+0x684>)
 80066b6:	400a      	ands	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	193b      	adds	r3, r7, r4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f383 8810 	msr	PRIMASK, r3
}
 80066c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80066c8:	f3ef 8310 	mrs	r3, PRIMASK
 80066cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80066ce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066d0:	2484      	movs	r4, #132	@ 0x84
 80066d2:	193a      	adds	r2, r7, r4
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	2301      	movs	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f383 8810 	msr	PRIMASK, r3
}
 80066e0:	46c0      	nop			@ (mov r8, r8)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	495a      	ldr	r1, [pc, #360]	@ (8006858 <HAL_UART_IRQHandler+0x688>)
 80066ee:	400a      	ands	r2, r1
 80066f0:	609a      	str	r2, [r3, #8]
 80066f2:	193b      	adds	r3, r7, r4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	f383 8810 	msr	PRIMASK, r3
}
 80066fe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	228c      	movs	r2, #140	@ 0x8c
 8006704:	2120      	movs	r1, #32
 8006706:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006714:	f3ef 8310 	mrs	r3, PRIMASK
 8006718:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671c:	2480      	movs	r4, #128	@ 0x80
 800671e:	193a      	adds	r2, r7, r4
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	2301      	movs	r3, #1
 8006724:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	f383 8810 	msr	PRIMASK, r3
}
 800672c:	46c0      	nop			@ (mov r8, r8)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2110      	movs	r1, #16
 800673a:	438a      	bics	r2, r1
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	193b      	adds	r3, r7, r4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	f383 8810 	msr	PRIMASK, r3
}
 800674a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006752:	183b      	adds	r3, r7, r0
 8006754:	881a      	ldrh	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	0011      	movs	r1, r2
 800675a:	0018      	movs	r0, r3
 800675c:	f7fa fb64 	bl	8000e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006760:	e06f      	b.n	8006842 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006762:	23a4      	movs	r3, #164	@ 0xa4
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	035b      	lsls	r3, r3, #13
 800676c:	4013      	ands	r3, r2
 800676e:	d010      	beq.n	8006792 <HAL_UART_IRQHandler+0x5c2>
 8006770:	239c      	movs	r3, #156	@ 0x9c
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	03db      	lsls	r3, r3, #15
 800677a:	4013      	ands	r3, r2
 800677c:	d009      	beq.n	8006792 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2280      	movs	r2, #128	@ 0x80
 8006784:	0352      	lsls	r2, r2, #13
 8006786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	0018      	movs	r0, r3
 800678c:	f000 ff2c 	bl	80075e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006790:	e05a      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006792:	23a4      	movs	r3, #164	@ 0xa4
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2280      	movs	r2, #128	@ 0x80
 800679a:	4013      	ands	r3, r2
 800679c:	d016      	beq.n	80067cc <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800679e:	23a0      	movs	r3, #160	@ 0xa0
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2280      	movs	r2, #128	@ 0x80
 80067a6:	4013      	ands	r3, r2
 80067a8:	d106      	bne.n	80067b8 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067aa:	239c      	movs	r3, #156	@ 0x9c
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	2380      	movs	r3, #128	@ 0x80
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	4013      	ands	r3, r2
 80067b6:	d009      	beq.n	80067cc <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d042      	beq.n	8006846 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	0010      	movs	r0, r2
 80067c8:	4798      	blx	r3
    }
    return;
 80067ca:	e03c      	b.n	8006846 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067cc:	23a4      	movs	r3, #164	@ 0xa4
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2240      	movs	r2, #64	@ 0x40
 80067d4:	4013      	ands	r3, r2
 80067d6:	d00a      	beq.n	80067ee <HAL_UART_IRQHandler+0x61e>
 80067d8:	23a0      	movs	r3, #160	@ 0xa0
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2240      	movs	r2, #64	@ 0x40
 80067e0:	4013      	ands	r3, r2
 80067e2:	d004      	beq.n	80067ee <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	0018      	movs	r0, r3
 80067e8:	f000 fe5f 	bl	80074aa <UART_EndTransmit_IT>
    return;
 80067ec:	e02c      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067ee:	23a4      	movs	r3, #164	@ 0xa4
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	2380      	movs	r3, #128	@ 0x80
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	4013      	ands	r3, r2
 80067fa:	d00b      	beq.n	8006814 <HAL_UART_IRQHandler+0x644>
 80067fc:	23a0      	movs	r3, #160	@ 0xa0
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2380      	movs	r3, #128	@ 0x80
 8006804:	05db      	lsls	r3, r3, #23
 8006806:	4013      	ands	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f000 fefb 	bl	8007608 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006812:	e019      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006814:	23a4      	movs	r3, #164	@ 0xa4
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	2380      	movs	r3, #128	@ 0x80
 800681c:	045b      	lsls	r3, r3, #17
 800681e:	4013      	ands	r3, r2
 8006820:	d012      	beq.n	8006848 <HAL_UART_IRQHandler+0x678>
 8006822:	23a0      	movs	r3, #160	@ 0xa0
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	da0d      	bge.n	8006848 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0018      	movs	r0, r3
 8006830:	f000 fee2 	bl	80075f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006834:	e008      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
      return;
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	e006      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
    return;
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	e004      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
      return;
 800683e:	46c0      	nop			@ (mov r8, r8)
 8006840:	e002      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
      return;
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	e000      	b.n	8006848 <HAL_UART_IRQHandler+0x678>
    return;
 8006846:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006848:	46bd      	mov	sp, r7
 800684a:	b02a      	add	sp, #168	@ 0xa8
 800684c:	bdb0      	pop	{r4, r5, r7, pc}
 800684e:	46c0      	nop			@ (mov r8, r8)
 8006850:	fffffeff 	.word	0xfffffeff
 8006854:	fffffedf 	.word	0xfffffedf
 8006858:	effffffe 	.word	0xeffffffe

0800685c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006864:	46c0      	nop			@ (mov r8, r8)
 8006866:	46bd      	mov	sp, r7
 8006868:	b002      	add	sp, #8
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006874:	46c0      	nop			@ (mov r8, r8)
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006884:	46c0      	nop			@ (mov r8, r8)
 8006886:	46bd      	mov	sp, r7
 8006888:	b002      	add	sp, #8
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006894:	46c0      	nop			@ (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b002      	add	sp, #8
 800689a:	bd80      	pop	{r7, pc}

0800689c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a4:	231e      	movs	r3, #30
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4aab      	ldr	r2, [pc, #684]	@ (8006b78 <UART_SetConfig+0x2dc>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	0019      	movs	r1, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4aa6      	ldr	r2, [pc, #664]	@ (8006b7c <UART_SetConfig+0x2e0>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	0019      	movs	r1, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4a9d      	ldr	r2, [pc, #628]	@ (8006b80 <UART_SetConfig+0x2e4>)
 800690a:	4013      	ands	r3, r2
 800690c:	0019      	movs	r1, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	220f      	movs	r2, #15
 8006920:	4393      	bics	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a93      	ldr	r2, [pc, #588]	@ (8006b84 <UART_SetConfig+0x2e8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d127      	bne.n	800698a <UART_SetConfig+0xee>
 800693a:	4b93      	ldr	r3, [pc, #588]	@ (8006b88 <UART_SetConfig+0x2ec>)
 800693c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693e:	2203      	movs	r2, #3
 8006940:	4013      	ands	r3, r2
 8006942:	2b03      	cmp	r3, #3
 8006944:	d017      	beq.n	8006976 <UART_SetConfig+0xda>
 8006946:	d81b      	bhi.n	8006980 <UART_SetConfig+0xe4>
 8006948:	2b02      	cmp	r3, #2
 800694a:	d00a      	beq.n	8006962 <UART_SetConfig+0xc6>
 800694c:	d818      	bhi.n	8006980 <UART_SetConfig+0xe4>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <UART_SetConfig+0xbc>
 8006952:	2b01      	cmp	r3, #1
 8006954:	d00a      	beq.n	800696c <UART_SetConfig+0xd0>
 8006956:	e013      	b.n	8006980 <UART_SetConfig+0xe4>
 8006958:	231f      	movs	r3, #31
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	e021      	b.n	80069a6 <UART_SetConfig+0x10a>
 8006962:	231f      	movs	r3, #31
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	2202      	movs	r2, #2
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	e01c      	b.n	80069a6 <UART_SetConfig+0x10a>
 800696c:	231f      	movs	r3, #31
 800696e:	18fb      	adds	r3, r7, r3
 8006970:	2204      	movs	r2, #4
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	e017      	b.n	80069a6 <UART_SetConfig+0x10a>
 8006976:	231f      	movs	r3, #31
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	2208      	movs	r2, #8
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e012      	b.n	80069a6 <UART_SetConfig+0x10a>
 8006980:	231f      	movs	r3, #31
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	2210      	movs	r2, #16
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e00d      	b.n	80069a6 <UART_SetConfig+0x10a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a7f      	ldr	r2, [pc, #508]	@ (8006b8c <UART_SetConfig+0x2f0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d104      	bne.n	800699e <UART_SetConfig+0x102>
 8006994:	231f      	movs	r3, #31
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e003      	b.n	80069a6 <UART_SetConfig+0x10a>
 800699e:	231f      	movs	r3, #31
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	2210      	movs	r2, #16
 80069a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69da      	ldr	r2, [r3, #28]
 80069aa:	2380      	movs	r3, #128	@ 0x80
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d000      	beq.n	80069b4 <UART_SetConfig+0x118>
 80069b2:	e06f      	b.n	8006a94 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80069b4:	231f      	movs	r3, #31
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d01f      	beq.n	80069fe <UART_SetConfig+0x162>
 80069be:	dc22      	bgt.n	8006a06 <UART_SetConfig+0x16a>
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d017      	beq.n	80069f4 <UART_SetConfig+0x158>
 80069c4:	dc1f      	bgt.n	8006a06 <UART_SetConfig+0x16a>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <UART_SetConfig+0x134>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d005      	beq.n	80069da <UART_SetConfig+0x13e>
 80069ce:	e01a      	b.n	8006a06 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d0:	f7fe fac0 	bl	8004f54 <HAL_RCC_GetPCLK1Freq>
 80069d4:	0003      	movs	r3, r0
 80069d6:	61bb      	str	r3, [r7, #24]
        break;
 80069d8:	e01c      	b.n	8006a14 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80069da:	4b6b      	ldr	r3, [pc, #428]	@ (8006b88 <UART_SetConfig+0x2ec>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	2207      	movs	r2, #7
 80069e2:	4013      	ands	r3, r2
 80069e4:	3301      	adds	r3, #1
 80069e6:	0019      	movs	r1, r3
 80069e8:	4869      	ldr	r0, [pc, #420]	@ (8006b90 <UART_SetConfig+0x2f4>)
 80069ea:	f7f9 fb8d 	bl	8000108 <__udivsi3>
 80069ee:	0003      	movs	r3, r0
 80069f0:	61bb      	str	r3, [r7, #24]
        break;
 80069f2:	e00f      	b.n	8006a14 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f4:	f7fe fa38 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 80069f8:	0003      	movs	r3, r0
 80069fa:	61bb      	str	r3, [r7, #24]
        break;
 80069fc:	e00a      	b.n	8006a14 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fe:	2380      	movs	r3, #128	@ 0x80
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	61bb      	str	r3, [r7, #24]
        break;
 8006a04:	e006      	b.n	8006a14 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a0a:	231e      	movs	r3, #30
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
        break;
 8006a12:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d100      	bne.n	8006a1c <UART_SetConfig+0x180>
 8006a1a:	e097      	b.n	8006b4c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a20:	4b5c      	ldr	r3, [pc, #368]	@ (8006b94 <UART_SetConfig+0x2f8>)
 8006a22:	0052      	lsls	r2, r2, #1
 8006a24:	5ad3      	ldrh	r3, [r2, r3]
 8006a26:	0019      	movs	r1, r3
 8006a28:	69b8      	ldr	r0, [r7, #24]
 8006a2a:	f7f9 fb6d 	bl	8000108 <__udivsi3>
 8006a2e:	0003      	movs	r3, r0
 8006a30:	005a      	lsls	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	18d2      	adds	r2, r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	0019      	movs	r1, r3
 8006a40:	0010      	movs	r0, r2
 8006a42:	f7f9 fb61 	bl	8000108 <__udivsi3>
 8006a46:	0003      	movs	r3, r0
 8006a48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b0f      	cmp	r3, #15
 8006a4e:	d91c      	bls.n	8006a8a <UART_SetConfig+0x1ee>
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	2380      	movs	r3, #128	@ 0x80
 8006a54:	025b      	lsls	r3, r3, #9
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d217      	bcs.n	8006a8a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	200e      	movs	r0, #14
 8006a60:	183b      	adds	r3, r7, r0
 8006a62:	210f      	movs	r1, #15
 8006a64:	438a      	bics	r2, r1
 8006a66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2207      	movs	r2, #7
 8006a70:	4013      	ands	r3, r2
 8006a72:	b299      	uxth	r1, r3
 8006a74:	183b      	adds	r3, r7, r0
 8006a76:	183a      	adds	r2, r7, r0
 8006a78:	8812      	ldrh	r2, [r2, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	183a      	adds	r2, r7, r0
 8006a84:	8812      	ldrh	r2, [r2, #0]
 8006a86:	60da      	str	r2, [r3, #12]
 8006a88:	e060      	b.n	8006b4c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006a8a:	231e      	movs	r3, #30
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e05b      	b.n	8006b4c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a94:	231f      	movs	r3, #31
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d01f      	beq.n	8006ade <UART_SetConfig+0x242>
 8006a9e:	dc22      	bgt.n	8006ae6 <UART_SetConfig+0x24a>
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d017      	beq.n	8006ad4 <UART_SetConfig+0x238>
 8006aa4:	dc1f      	bgt.n	8006ae6 <UART_SetConfig+0x24a>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <UART_SetConfig+0x214>
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d005      	beq.n	8006aba <UART_SetConfig+0x21e>
 8006aae:	e01a      	b.n	8006ae6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7fe fa50 	bl	8004f54 <HAL_RCC_GetPCLK1Freq>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	61bb      	str	r3, [r7, #24]
        break;
 8006ab8:	e01c      	b.n	8006af4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006aba:	4b33      	ldr	r3, [pc, #204]	@ (8006b88 <UART_SetConfig+0x2ec>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	0019      	movs	r1, r3
 8006ac8:	4831      	ldr	r0, [pc, #196]	@ (8006b90 <UART_SetConfig+0x2f4>)
 8006aca:	f7f9 fb1d 	bl	8000108 <__udivsi3>
 8006ace:	0003      	movs	r3, r0
 8006ad0:	61bb      	str	r3, [r7, #24]
        break;
 8006ad2:	e00f      	b.n	8006af4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad4:	f7fe f9c8 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8006ad8:	0003      	movs	r3, r0
 8006ada:	61bb      	str	r3, [r7, #24]
        break;
 8006adc:	e00a      	b.n	8006af4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ade:	2380      	movs	r3, #128	@ 0x80
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	61bb      	str	r3, [r7, #24]
        break;
 8006ae4:	e006      	b.n	8006af4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aea:	231e      	movs	r3, #30
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	2201      	movs	r2, #1
 8006af0:	701a      	strb	r2, [r3, #0]
        break;
 8006af2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d028      	beq.n	8006b4c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006afe:	4b25      	ldr	r3, [pc, #148]	@ (8006b94 <UART_SetConfig+0x2f8>)
 8006b00:	0052      	lsls	r2, r2, #1
 8006b02:	5ad3      	ldrh	r3, [r2, r3]
 8006b04:	0019      	movs	r1, r3
 8006b06:	69b8      	ldr	r0, [r7, #24]
 8006b08:	f7f9 fafe 	bl	8000108 <__udivsi3>
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	001a      	movs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	18d2      	adds	r2, r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	0010      	movs	r0, r2
 8006b20:	f7f9 faf2 	bl	8000108 <__udivsi3>
 8006b24:	0003      	movs	r3, r0
 8006b26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d90a      	bls.n	8006b44 <UART_SetConfig+0x2a8>
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	2380      	movs	r3, #128	@ 0x80
 8006b32:	025b      	lsls	r3, r3, #9
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d205      	bcs.n	8006b44 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60da      	str	r2, [r3, #12]
 8006b42:	e003      	b.n	8006b4c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b44:	231e      	movs	r3, #30
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	2201      	movs	r2, #1
 8006b4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	226a      	movs	r2, #106	@ 0x6a
 8006b50:	2101      	movs	r1, #1
 8006b52:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2268      	movs	r2, #104	@ 0x68
 8006b58:	2101      	movs	r1, #1
 8006b5a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b68:	231e      	movs	r3, #30
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	781b      	ldrb	r3, [r3, #0]
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b008      	add	sp, #32
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	46c0      	nop			@ (mov r8, r8)
 8006b78:	cfff69f3 	.word	0xcfff69f3
 8006b7c:	ffffcfff 	.word	0xffffcfff
 8006b80:	11fff4ff 	.word	0x11fff4ff
 8006b84:	40013800 	.word	0x40013800
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40004400 	.word	0x40004400
 8006b90:	02dc6c00 	.word	0x02dc6c00
 8006b94:	08007c7c 	.word	0x08007c7c

08006b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d00b      	beq.n	8006bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8006cdc <UART_AdvFeatureConfig+0x144>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	0019      	movs	r1, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4a43      	ldr	r2, [pc, #268]	@ (8006ce0 <UART_AdvFeatureConfig+0x148>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	0019      	movs	r1, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be8:	2202      	movs	r2, #2
 8006bea:	4013      	ands	r3, r2
 8006bec:	d00b      	beq.n	8006c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ce4 <UART_AdvFeatureConfig+0x14c>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	0019      	movs	r1, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d00b      	beq.n	8006c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4a34      	ldr	r2, [pc, #208]	@ (8006ce8 <UART_AdvFeatureConfig+0x150>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d00b      	beq.n	8006c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4a2c      	ldr	r2, [pc, #176]	@ (8006cec <UART_AdvFeatureConfig+0x154>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	2220      	movs	r2, #32
 8006c50:	4013      	ands	r3, r2
 8006c52:	d00b      	beq.n	8006c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	4a25      	ldr	r2, [pc, #148]	@ (8006cf0 <UART_AdvFeatureConfig+0x158>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	0019      	movs	r1, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	2240      	movs	r2, #64	@ 0x40
 8006c72:	4013      	ands	r3, r2
 8006c74:	d01d      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf4 <UART_AdvFeatureConfig+0x15c>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	0019      	movs	r1, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c92:	2380      	movs	r3, #128	@ 0x80
 8006c94:	035b      	lsls	r3, r3, #13
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d10b      	bne.n	8006cb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a15      	ldr	r2, [pc, #84]	@ (8006cf8 <UART_AdvFeatureConfig+0x160>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	0019      	movs	r1, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	2280      	movs	r2, #128	@ 0x80
 8006cb8:	4013      	ands	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8006cfc <UART_AdvFeatureConfig+0x164>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	0019      	movs	r1, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }
}
 8006cd4:	46c0      	nop			@ (mov r8, r8)
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	ffff7fff 	.word	0xffff7fff
 8006ce0:	fffdffff 	.word	0xfffdffff
 8006ce4:	fffeffff 	.word	0xfffeffff
 8006ce8:	fffbffff 	.word	0xfffbffff
 8006cec:	ffffefff 	.word	0xffffefff
 8006cf0:	ffffdfff 	.word	0xffffdfff
 8006cf4:	ffefffff 	.word	0xffefffff
 8006cf8:	ff9fffff 	.word	0xff9fffff
 8006cfc:	fff7ffff 	.word	0xfff7ffff

08006d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b092      	sub	sp, #72	@ 0x48
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2290      	movs	r2, #144	@ 0x90
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d10:	f7fb f98a 	bl	8002028 <HAL_GetTick>
 8006d14:	0003      	movs	r3, r0
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2208      	movs	r2, #8
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d12d      	bne.n	8006d82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d28:	2280      	movs	r2, #128	@ 0x80
 8006d2a:	0391      	lsls	r1, r2, #14
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4a47      	ldr	r2, [pc, #284]	@ (8006e4c <UART_CheckIdleState+0x14c>)
 8006d30:	9200      	str	r2, [sp, #0]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f000 f88e 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006d38:	1e03      	subs	r3, r0, #0
 8006d3a:	d022      	beq.n	8006d82 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d46:	2301      	movs	r3, #1
 8006d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	f383 8810 	msr	PRIMASK, r3
}
 8006d50:	46c0      	nop			@ (mov r8, r8)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2180      	movs	r1, #128	@ 0x80
 8006d5e:	438a      	bics	r2, r1
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d68:	f383 8810 	msr	PRIMASK, r3
}
 8006d6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2288      	movs	r2, #136	@ 0x88
 8006d72:	2120      	movs	r1, #32
 8006d74:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2284      	movs	r2, #132	@ 0x84
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e060      	b.n	8006e44 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d146      	bne.n	8006e1e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d92:	2280      	movs	r2, #128	@ 0x80
 8006d94:	03d1      	lsls	r1, r2, #15
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4a2c      	ldr	r2, [pc, #176]	@ (8006e4c <UART_CheckIdleState+0x14c>)
 8006d9a:	9200      	str	r2, [sp, #0]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f000 f859 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006da2:	1e03      	subs	r3, r0, #0
 8006da4:	d03b      	beq.n	8006e1e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006da6:	f3ef 8310 	mrs	r3, PRIMASK
 8006daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db0:	2301      	movs	r3, #1
 8006db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f383 8810 	msr	PRIMASK, r3
}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4922      	ldr	r1, [pc, #136]	@ (8006e50 <UART_CheckIdleState+0x150>)
 8006dc8:	400a      	ands	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f383 8810 	msr	PRIMASK, r3
}
 8006dd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ddc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dde:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de2:	2301      	movs	r3, #1
 8006de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f383 8810 	msr	PRIMASK, r3
}
 8006dec:	46c0      	nop			@ (mov r8, r8)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2101      	movs	r1, #1
 8006dfa:	438a      	bics	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	f383 8810 	msr	PRIMASK, r3
}
 8006e08:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	228c      	movs	r2, #140	@ 0x8c
 8006e0e:	2120      	movs	r1, #32
 8006e10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2284      	movs	r2, #132	@ 0x84
 8006e16:	2100      	movs	r1, #0
 8006e18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e012      	b.n	8006e44 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2288      	movs	r2, #136	@ 0x88
 8006e22:	2120      	movs	r1, #32
 8006e24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	228c      	movs	r2, #140	@ 0x8c
 8006e2a:	2120      	movs	r1, #32
 8006e2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2284      	movs	r2, #132	@ 0x84
 8006e3e:	2100      	movs	r1, #0
 8006e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	0018      	movs	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b010      	add	sp, #64	@ 0x40
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	01ffffff 	.word	0x01ffffff
 8006e50:	fffffedf 	.word	0xfffffedf

08006e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	1dfb      	adds	r3, r7, #7
 8006e62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e64:	e051      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	d04e      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6c:	f7fb f8dc 	bl	8002028 <HAL_GetTick>
 8006e70:	0002      	movs	r2, r0
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d302      	bcc.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e051      	b.n	8006f2a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d03b      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b80      	cmp	r3, #128	@ 0x80
 8006e96:	d038      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b40      	cmp	r3, #64	@ 0x40
 8006e9c:	d035      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d111      	bne.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f000 f922 	bl	8007100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2290      	movs	r2, #144	@ 0x90
 8006ec0:	2108      	movs	r1, #8
 8006ec2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2284      	movs	r2, #132	@ 0x84
 8006ec8:	2100      	movs	r1, #0
 8006eca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e02c      	b.n	8006f2a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	401a      	ands	r2, r3
 8006edc:	2380      	movs	r3, #128	@ 0x80
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d112      	bne.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2280      	movs	r2, #128	@ 0x80
 8006eea:	0112      	lsls	r2, r2, #4
 8006eec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f000 f905 	bl	8007100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2290      	movs	r2, #144	@ 0x90
 8006efa:	2120      	movs	r1, #32
 8006efc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2284      	movs	r2, #132	@ 0x84
 8006f02:	2100      	movs	r1, #0
 8006f04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e00f      	b.n	8006f2a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	425a      	negs	r2, r3
 8006f1a:	4153      	adcs	r3, r2
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	001a      	movs	r2, r3
 8006f20:	1dfb      	adds	r3, r7, #7
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d09e      	beq.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b004      	add	sp, #16
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b090      	sub	sp, #64	@ 0x40
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	1dbb      	adds	r3, r7, #6
 8006f40:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	1dba      	adds	r2, r7, #6
 8006f4c:	215c      	movs	r1, #92	@ 0x5c
 8006f4e:	8812      	ldrh	r2, [r2, #0]
 8006f50:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2290      	movs	r2, #144	@ 0x90
 8006f56:	2100      	movs	r1, #0
 8006f58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	228c      	movs	r2, #140	@ 0x8c
 8006f5e:	2122      	movs	r1, #34	@ 0x22
 8006f60:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2280      	movs	r2, #128	@ 0x80
 8006f66:	589b      	ldr	r3, [r3, r2]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d02d      	beq.n	8006fc8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2280      	movs	r2, #128	@ 0x80
 8006f70:	589b      	ldr	r3, [r3, r2]
 8006f72:	4a40      	ldr	r2, [pc, #256]	@ (8007074 <UART_Start_Receive_DMA+0x140>)
 8006f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2280      	movs	r2, #128	@ 0x80
 8006f7a:	589b      	ldr	r3, [r3, r2]
 8006f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007078 <UART_Start_Receive_DMA+0x144>)
 8006f7e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2280      	movs	r2, #128	@ 0x80
 8006f84:	589b      	ldr	r3, [r3, r2]
 8006f86:	4a3d      	ldr	r2, [pc, #244]	@ (800707c <UART_Start_Receive_DMA+0x148>)
 8006f88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2280      	movs	r2, #128	@ 0x80
 8006f8e:	589b      	ldr	r3, [r3, r2]
 8006f90:	2200      	movs	r2, #0
 8006f92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2280      	movs	r2, #128	@ 0x80
 8006f98:	5898      	ldr	r0, [r3, r2]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3324      	adds	r3, #36	@ 0x24
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa6:	001a      	movs	r2, r3
 8006fa8:	1dbb      	adds	r3, r7, #6
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	f7fc f838 	bl	8003020 <HAL_DMA_Start_IT>
 8006fb0:	1e03      	subs	r3, r0, #0
 8006fb2:	d009      	beq.n	8006fc8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2290      	movs	r2, #144	@ 0x90
 8006fb8:	2110      	movs	r1, #16
 8006fba:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	228c      	movs	r2, #140	@ 0x8c
 8006fc0:	2120      	movs	r1, #32
 8006fc2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e050      	b.n	800706a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d019      	beq.n	8007004 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fda:	2301      	movs	r3, #1
 8006fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			@ (mov r8, r8)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2180      	movs	r1, #128	@ 0x80
 8006ff2:	0049      	lsls	r1, r1, #1
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	f383 8810 	msr	PRIMASK, r3
}
 8007002:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007004:	f3ef 8310 	mrs	r3, PRIMASK
 8007008:	613b      	str	r3, [r7, #16]
  return(result);
 800700a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800700e:	2301      	movs	r3, #1
 8007010:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f383 8810 	msr	PRIMASK, r3
}
 8007018:	46c0      	nop			@ (mov r8, r8)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2101      	movs	r1, #1
 8007026:	430a      	orrs	r2, r1
 8007028:	609a      	str	r2, [r3, #8]
 800702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	f383 8810 	msr	PRIMASK, r3
}
 8007034:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007036:	f3ef 8310 	mrs	r3, PRIMASK
 800703a:	61fb      	str	r3, [r7, #28]
  return(result);
 800703c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007040:	2301      	movs	r3, #1
 8007042:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	f383 8810 	msr	PRIMASK, r3
}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2140      	movs	r1, #64	@ 0x40
 8007058:	430a      	orrs	r2, r1
 800705a:	609a      	str	r2, [r3, #8]
 800705c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	f383 8810 	msr	PRIMASK, r3
}
 8007066:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	0018      	movs	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	b010      	add	sp, #64	@ 0x40
 8007070:	bd80      	pop	{r7, pc}
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	08007285 	.word	0x08007285
 8007078:	080073b5 	.word	0x080073b5
 800707c:	080073f7 	.word	0x080073f7

08007080 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	@ 0x28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007088:	f3ef 8310 	mrs	r3, PRIMASK
 800708c:	60bb      	str	r3, [r7, #8]
  return(result);
 800708e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
 8007092:	2301      	movs	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f383 8810 	msr	PRIMASK, r3
}
 800709c:	46c0      	nop			@ (mov r8, r8)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	21c0      	movs	r1, #192	@ 0xc0
 80070aa:	438a      	bics	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f383 8810 	msr	PRIMASK, r3
}
 80070b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80070ba:	f3ef 8310 	mrs	r3, PRIMASK
 80070be:	617b      	str	r3, [r7, #20]
  return(result);
 80070c0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	2301      	movs	r3, #1
 80070c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	f383 8810 	msr	PRIMASK, r3
}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4908      	ldr	r1, [pc, #32]	@ (80070fc <UART_EndTxTransfer+0x7c>)
 80070dc:	400a      	ands	r2, r1
 80070de:	609a      	str	r2, [r3, #8]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2288      	movs	r2, #136	@ 0x88
 80070f0:	2120      	movs	r1, #32
 80070f2:	5099      	str	r1, [r3, r2]
}
 80070f4:	46c0      	nop			@ (mov r8, r8)
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b00a      	add	sp, #40	@ 0x28
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	ff7fffff 	.word	0xff7fffff

08007100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08e      	sub	sp, #56	@ 0x38
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007108:	f3ef 8310 	mrs	r3, PRIMASK
 800710c:	617b      	str	r3, [r7, #20]
  return(result);
 800710e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
 8007112:	2301      	movs	r3, #1
 8007114:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	f383 8810 	msr	PRIMASK, r3
}
 800711c:	46c0      	nop			@ (mov r8, r8)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4926      	ldr	r1, [pc, #152]	@ (80071c4 <UART_EndRxTransfer+0xc4>)
 800712a:	400a      	ands	r2, r1
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800713a:	f3ef 8310 	mrs	r3, PRIMASK
 800713e:	623b      	str	r3, [r7, #32]
  return(result);
 8007140:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007142:	633b      	str	r3, [r7, #48]	@ 0x30
 8007144:	2301      	movs	r3, #1
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	f383 8810 	msr	PRIMASK, r3
}
 800714e:	46c0      	nop			@ (mov r8, r8)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	491b      	ldr	r1, [pc, #108]	@ (80071c8 <UART_EndRxTransfer+0xc8>)
 800715c:	400a      	ands	r2, r1
 800715e:	609a      	str	r2, [r3, #8]
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	f383 8810 	msr	PRIMASK, r3
}
 800716a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d118      	bne.n	80071a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007174:	f3ef 8310 	mrs	r3, PRIMASK
 8007178:	60bb      	str	r3, [r7, #8]
  return(result);
 800717a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800717e:	2301      	movs	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f383 8810 	msr	PRIMASK, r3
}
 8007188:	46c0      	nop			@ (mov r8, r8)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2110      	movs	r1, #16
 8007196:	438a      	bics	r2, r1
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f383 8810 	msr	PRIMASK, r3
}
 80071a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	228c      	movs	r2, #140	@ 0x8c
 80071aa:	2120      	movs	r1, #32
 80071ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071ba:	46c0      	nop			@ (mov r8, r8)
 80071bc:	46bd      	mov	sp, r7
 80071be:	b00e      	add	sp, #56	@ 0x38
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			@ (mov r8, r8)
 80071c4:	fffffedf 	.word	0xfffffedf
 80071c8:	effffffe 	.word	0xeffffffe

080071cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08c      	sub	sp, #48	@ 0x30
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2220      	movs	r2, #32
 80071e2:	4013      	ands	r3, r2
 80071e4:	d135      	bne.n	8007252 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80071e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e8:	2256      	movs	r2, #86	@ 0x56
 80071ea:	2100      	movs	r1, #0
 80071ec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80071ee:	f3ef 8310 	mrs	r3, PRIMASK
 80071f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80071f4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071f8:	2301      	movs	r3, #1
 80071fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f383 8810 	msr	PRIMASK, r3
}
 8007202:	46c0      	nop			@ (mov r8, r8)
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2180      	movs	r1, #128	@ 0x80
 8007210:	438a      	bics	r2, r1
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f383 8810 	msr	PRIMASK, r3
}
 800721e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007220:	f3ef 8310 	mrs	r3, PRIMASK
 8007224:	61bb      	str	r3, [r7, #24]
  return(result);
 8007226:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
 800722a:	2301      	movs	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	f383 8810 	msr	PRIMASK, r3
}
 8007234:	46c0      	nop			@ (mov r8, r8)
 8007236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2140      	movs	r1, #64	@ 0x40
 8007242:	430a      	orrs	r2, r1
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	f383 8810 	msr	PRIMASK, r3
}
 8007250:	e004      	b.n	800725c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8007252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007254:	0018      	movs	r0, r3
 8007256:	f7f9 fe91 	bl	8000f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	46c0      	nop			@ (mov r8, r8)
 800725e:	46bd      	mov	sp, r7
 8007260:	b00c      	add	sp, #48	@ 0x30
 8007262:	bd80      	pop	{r7, pc}

08007264 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007270:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	0018      	movs	r0, r3
 8007276:	f7ff faf1 	bl	800685c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800727a:	46c0      	nop			@ (mov r8, r8)
 800727c:	46bd      	mov	sp, r7
 800727e:	b004      	add	sp, #16
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b094      	sub	sp, #80	@ 0x50
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2220      	movs	r2, #32
 800729a:	4013      	ands	r3, r2
 800729c:	d16f      	bne.n	800737e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800729e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072a0:	225e      	movs	r2, #94	@ 0x5e
 80072a2:	2100      	movs	r1, #0
 80072a4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072a6:	f3ef 8310 	mrs	r3, PRIMASK
 80072aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80072ac:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072b0:	2301      	movs	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f383 8810 	msr	PRIMASK, r3
}
 80072ba:	46c0      	nop			@ (mov r8, r8)
 80072bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	493a      	ldr	r1, [pc, #232]	@ (80073b0 <UART_DMAReceiveCplt+0x12c>)
 80072c8:	400a      	ands	r2, r1
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	f383 8810 	msr	PRIMASK, r3
}
 80072d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072d8:	f3ef 8310 	mrs	r3, PRIMASK
 80072dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072e2:	2301      	movs	r3, #1
 80072e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e8:	f383 8810 	msr	PRIMASK, r3
}
 80072ec:	46c0      	nop			@ (mov r8, r8)
 80072ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2101      	movs	r1, #1
 80072fa:	438a      	bics	r2, r1
 80072fc:	609a      	str	r2, [r3, #8]
 80072fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800730a:	f3ef 8310 	mrs	r3, PRIMASK
 800730e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007312:	643b      	str	r3, [r7, #64]	@ 0x40
 8007314:	2301      	movs	r3, #1
 8007316:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731a:	f383 8810 	msr	PRIMASK, r3
}
 800731e:	46c0      	nop			@ (mov r8, r8)
 8007320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2140      	movs	r1, #64	@ 0x40
 800732c:	438a      	bics	r2, r1
 800732e:	609a      	str	r2, [r3, #8]
 8007330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	f383 8810 	msr	PRIMASK, r3
}
 800733a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800733c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800733e:	228c      	movs	r2, #140	@ 0x8c
 8007340:	2120      	movs	r1, #32
 8007342:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d118      	bne.n	800737e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800734c:	f3ef 8310 	mrs	r3, PRIMASK
 8007350:	60fb      	str	r3, [r7, #12]
  return(result);
 8007352:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007356:	2301      	movs	r3, #1
 8007358:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f383 8810 	msr	PRIMASK, r3
}
 8007360:	46c0      	nop			@ (mov r8, r8)
 8007362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2110      	movs	r1, #16
 800736e:	438a      	bics	r2, r1
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007374:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f383 8810 	msr	PRIMASK, r3
}
 800737c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800737e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007380:	2200      	movs	r2, #0
 8007382:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d108      	bne.n	800739e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800738c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800738e:	225c      	movs	r2, #92	@ 0x5c
 8007390:	5a9a      	ldrh	r2, [r3, r2]
 8007392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007394:	0011      	movs	r1, r2
 8007396:	0018      	movs	r0, r3
 8007398:	f7f9 fd46 	bl	8000e28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800739c:	e003      	b.n	80073a6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800739e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7ff fa63 	bl	800686c <HAL_UART_RxCpltCallback>
}
 80073a6:	46c0      	nop			@ (mov r8, r8)
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b014      	add	sp, #80	@ 0x50
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	46c0      	nop			@ (mov r8, r8)
 80073b0:	fffffeff 	.word	0xfffffeff

080073b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10a      	bne.n	80073e6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	225c      	movs	r2, #92	@ 0x5c
 80073d4:	5a9b      	ldrh	r3, [r3, r2]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	0011      	movs	r1, r2
 80073de:	0018      	movs	r0, r3
 80073e0:	f7f9 fd22 	bl	8000e28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073e4:	e003      	b.n	80073ee <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7ff fa47 	bl	800687c <HAL_UART_RxHalfCpltCallback>
}
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b004      	add	sp, #16
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2288      	movs	r2, #136	@ 0x88
 8007408:	589b      	ldr	r3, [r3, r2]
 800740a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	228c      	movs	r2, #140	@ 0x8c
 8007410:	589b      	ldr	r3, [r3, r2]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2280      	movs	r2, #128	@ 0x80
 800741c:	4013      	ands	r3, r2
 800741e:	2b80      	cmp	r3, #128	@ 0x80
 8007420:	d10a      	bne.n	8007438 <UART_DMAError+0x42>
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b21      	cmp	r3, #33	@ 0x21
 8007426:	d107      	bne.n	8007438 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2256      	movs	r2, #86	@ 0x56
 800742c:	2100      	movs	r1, #0
 800742e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	0018      	movs	r0, r3
 8007434:	f7ff fe24 	bl	8007080 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	2240      	movs	r2, #64	@ 0x40
 8007440:	4013      	ands	r3, r2
 8007442:	2b40      	cmp	r3, #64	@ 0x40
 8007444:	d10a      	bne.n	800745c <UART_DMAError+0x66>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b22      	cmp	r3, #34	@ 0x22
 800744a:	d107      	bne.n	800745c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	225e      	movs	r2, #94	@ 0x5e
 8007450:	2100      	movs	r1, #0
 8007452:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	0018      	movs	r0, r3
 8007458:	f7ff fe52 	bl	8007100 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2290      	movs	r2, #144	@ 0x90
 8007460:	589b      	ldr	r3, [r3, r2]
 8007462:	2210      	movs	r2, #16
 8007464:	431a      	orrs	r2, r3
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2190      	movs	r1, #144	@ 0x90
 800746a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	0018      	movs	r0, r3
 8007470:	f7ff fa0c 	bl	800688c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007474:	46c0      	nop			@ (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b006      	add	sp, #24
 800747a:	bd80      	pop	{r7, pc}

0800747c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	225e      	movs	r2, #94	@ 0x5e
 800748e:	2100      	movs	r1, #0
 8007490:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2256      	movs	r2, #86	@ 0x56
 8007496:	2100      	movs	r1, #0
 8007498:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	0018      	movs	r0, r3
 800749e:	f7ff f9f5 	bl	800688c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a2:	46c0      	nop			@ (mov r8, r8)
 80074a4:	46bd      	mov	sp, r7
 80074a6:	b004      	add	sp, #16
 80074a8:	bd80      	pop	{r7, pc}

080074aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b086      	sub	sp, #24
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074b2:	f3ef 8310 	mrs	r3, PRIMASK
 80074b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80074b8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	2301      	movs	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f383 8810 	msr	PRIMASK, r3
}
 80074c6:	46c0      	nop			@ (mov r8, r8)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2140      	movs	r1, #64	@ 0x40
 80074d4:	438a      	bics	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f383 8810 	msr	PRIMASK, r3
}
 80074e2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2288      	movs	r2, #136	@ 0x88
 80074e8:	2120      	movs	r1, #32
 80074ea:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	0018      	movs	r0, r3
 80074f6:	f7f9 fd41 	bl	8000f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fa:	46c0      	nop			@ (mov r8, r8)
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b006      	add	sp, #24
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e05d      	b.n	80075d8 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2288      	movs	r2, #136	@ 0x88
 8007520:	589b      	ldr	r3, [r3, r2]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d107      	bne.n	8007536 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2284      	movs	r2, #132	@ 0x84
 800752a:	2100      	movs	r1, #0
 800752c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	0018      	movs	r0, r3
 8007532:	f7fa fb59 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2288      	movs	r2, #136	@ 0x88
 800753a:	2124      	movs	r1, #36	@ 0x24
 800753c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2101      	movs	r1, #1
 800754a:	438a      	bics	r2, r1
 800754c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	0018      	movs	r0, r3
 800755a:	f7ff fb1d 	bl	8006b98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	0018      	movs	r0, r3
 8007562:	f7ff f99b 	bl	800689c <UART_SetConfig>
 8007566:	0003      	movs	r3, r0
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e033      	b.n	80075d8 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2180      	movs	r1, #128	@ 0x80
 800757c:	01c9      	lsls	r1, r1, #7
 800757e:	430a      	orrs	r2, r1
 8007580:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	4a15      	ldr	r2, [pc, #84]	@ (80075e0 <HAL_RS485Ex_Init+0xdc>)
 800758a:	4013      	ands	r3, r2
 800758c:	0019      	movs	r1, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	430a      	orrs	r2, r1
 8007596:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	055b      	lsls	r3, r3, #21
 800759c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	041b      	lsls	r3, r3, #16
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a0d      	ldr	r2, [pc, #52]	@ (80075e4 <HAL_RS485Ex_Init+0xe0>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	0019      	movs	r1, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2101      	movs	r1, #1
 80075ca:	430a      	orrs	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7ff fb95 	bl	8006d00 <UART_CheckIdleState>
 80075d6:	0003      	movs	r3, r0
}
 80075d8:	0018      	movs	r0, r3
 80075da:	46bd      	mov	sp, r7
 80075dc:	b006      	add	sp, #24
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	ffff7fff 	.word	0xffff7fff
 80075e4:	fc00ffff 	.word	0xfc00ffff

080075e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075f0:	46c0      	nop			@ (mov r8, r8)
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b002      	add	sp, #8
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007600:	46c0      	nop			@ (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b002      	add	sp, #8
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007610:	46c0      	nop			@ (mov r8, r8)
 8007612:	46bd      	mov	sp, r7
 8007614:	b002      	add	sp, #8
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2284      	movs	r2, #132	@ 0x84
 8007624:	5c9b      	ldrb	r3, [r3, r2]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_UARTEx_DisableFifoMode+0x16>
 800762a:	2302      	movs	r3, #2
 800762c:	e027      	b.n	800767e <HAL_UARTEx_DisableFifoMode+0x66>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2284      	movs	r2, #132	@ 0x84
 8007632:	2101      	movs	r1, #1
 8007634:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2288      	movs	r2, #136	@ 0x88
 800763a:	2124      	movs	r1, #36	@ 0x24
 800763c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2101      	movs	r1, #1
 8007652:	438a      	bics	r2, r1
 8007654:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a0b      	ldr	r2, [pc, #44]	@ (8007688 <HAL_UARTEx_DisableFifoMode+0x70>)
 800765a:	4013      	ands	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2288      	movs	r2, #136	@ 0x88
 8007670:	2120      	movs	r1, #32
 8007672:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2284      	movs	r2, #132	@ 0x84
 8007678:	2100      	movs	r1, #0
 800767a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	0018      	movs	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	b004      	add	sp, #16
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			@ (mov r8, r8)
 8007688:	dfffffff 	.word	0xdfffffff

0800768c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2284      	movs	r2, #132	@ 0x84
 800769a:	5c9b      	ldrb	r3, [r3, r2]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e02e      	b.n	8007702 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2284      	movs	r2, #132	@ 0x84
 80076a8:	2101      	movs	r1, #1
 80076aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2288      	movs	r2, #136	@ 0x88
 80076b0:	2124      	movs	r1, #36	@ 0x24
 80076b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2101      	movs	r1, #1
 80076c8:	438a      	bics	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	08d9      	lsrs	r1, r3, #3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	0018      	movs	r0, r3
 80076e4:	f000 f8bc 	bl	8007860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2288      	movs	r2, #136	@ 0x88
 80076f4:	2120      	movs	r1, #32
 80076f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2284      	movs	r2, #132	@ 0x84
 80076fc:	2100      	movs	r1, #0
 80076fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	0018      	movs	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	b004      	add	sp, #16
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2284      	movs	r2, #132	@ 0x84
 800771a:	5c9b      	ldrb	r3, [r3, r2]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007720:	2302      	movs	r3, #2
 8007722:	e02f      	b.n	8007784 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2284      	movs	r2, #132	@ 0x84
 8007728:	2101      	movs	r1, #1
 800772a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2288      	movs	r2, #136	@ 0x88
 8007730:	2124      	movs	r1, #36	@ 0x24
 8007732:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2101      	movs	r1, #1
 8007748:	438a      	bics	r2, r1
 800774a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4a0e      	ldr	r2, [pc, #56]	@ (800778c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007754:	4013      	ands	r3, r2
 8007756:	0019      	movs	r1, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	0018      	movs	r0, r3
 8007766:	f000 f87b 	bl	8007860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2288      	movs	r2, #136	@ 0x88
 8007776:	2120      	movs	r1, #32
 8007778:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2284      	movs	r2, #132	@ 0x84
 800777e:	2100      	movs	r1, #0
 8007780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	0018      	movs	r0, r3
 8007786:	46bd      	mov	sp, r7
 8007788:	b004      	add	sp, #16
 800778a:	bd80      	pop	{r7, pc}
 800778c:	f1ffffff 	.word	0xf1ffffff

08007790 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007790:	b5b0      	push	{r4, r5, r7, lr}
 8007792:	b08a      	sub	sp, #40	@ 0x28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	1dbb      	adds	r3, r7, #6
 800779c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	228c      	movs	r2, #140	@ 0x8c
 80077a2:	589b      	ldr	r3, [r3, r2]
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d156      	bne.n	8007856 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80077ae:	1dbb      	adds	r3, r7, #6
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e04e      	b.n	8007858 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	2380      	movs	r3, #128	@ 0x80
 80077c0:	015b      	lsls	r3, r3, #5
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d109      	bne.n	80077da <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d105      	bne.n	80077da <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2201      	movs	r2, #1
 80077d2:	4013      	ands	r3, r2
 80077d4:	d001      	beq.n	80077da <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e03e      	b.n	8007858 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80077e6:	2527      	movs	r5, #39	@ 0x27
 80077e8:	197c      	adds	r4, r7, r5
 80077ea:	1dbb      	adds	r3, r7, #6
 80077ec:	881a      	ldrh	r2, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	0018      	movs	r0, r3
 80077f4:	f7ff fb9e 	bl	8006f34 <UART_Start_Receive_DMA>
 80077f8:	0003      	movs	r3, r0
 80077fa:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80077fc:	197b      	adds	r3, r7, r5
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d124      	bne.n	800784e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007808:	2b01      	cmp	r3, #1
 800780a:	d11c      	bne.n	8007846 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2210      	movs	r2, #16
 8007812:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007814:	f3ef 8310 	mrs	r3, PRIMASK
 8007818:	617b      	str	r3, [r7, #20]
  return(result);
 800781a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	2301      	movs	r3, #1
 8007820:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f383 8810 	msr	PRIMASK, r3
}
 8007828:	46c0      	nop			@ (mov r8, r8)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2110      	movs	r1, #16
 8007836:	430a      	orrs	r2, r1
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f383 8810 	msr	PRIMASK, r3
}
 8007844:	e003      	b.n	800784e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007846:	2327      	movs	r3, #39	@ 0x27
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800784e:	2327      	movs	r3, #39	@ 0x27
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	e000      	b.n	8007858 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007856:	2302      	movs	r3, #2
  }
}
 8007858:	0018      	movs	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	b00a      	add	sp, #40	@ 0x28
 800785e:	bdb0      	pop	{r4, r5, r7, pc}

08007860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800786c:	2b00      	cmp	r3, #0
 800786e:	d108      	bne.n	8007882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	226a      	movs	r2, #106	@ 0x6a
 8007874:	2101      	movs	r1, #1
 8007876:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2268      	movs	r2, #104	@ 0x68
 800787c:	2101      	movs	r1, #1
 800787e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007880:	e043      	b.n	800790a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007882:	260f      	movs	r6, #15
 8007884:	19bb      	adds	r3, r7, r6
 8007886:	2208      	movs	r2, #8
 8007888:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800788a:	200e      	movs	r0, #14
 800788c:	183b      	adds	r3, r7, r0
 800788e:	2208      	movs	r2, #8
 8007890:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	0e5b      	lsrs	r3, r3, #25
 800789a:	b2da      	uxtb	r2, r3
 800789c:	240d      	movs	r4, #13
 800789e:	193b      	adds	r3, r7, r4
 80078a0:	2107      	movs	r1, #7
 80078a2:	400a      	ands	r2, r1
 80078a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	0f5b      	lsrs	r3, r3, #29
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	250c      	movs	r5, #12
 80078b2:	197b      	adds	r3, r7, r5
 80078b4:	2107      	movs	r1, #7
 80078b6:	400a      	ands	r2, r1
 80078b8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078ba:	183b      	adds	r3, r7, r0
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	197a      	adds	r2, r7, r5
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	4914      	ldr	r1, [pc, #80]	@ (8007914 <UARTEx_SetNbDataToProcess+0xb4>)
 80078c4:	5c8a      	ldrb	r2, [r1, r2]
 80078c6:	435a      	muls	r2, r3
 80078c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ca:	197b      	adds	r3, r7, r5
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	4a12      	ldr	r2, [pc, #72]	@ (8007918 <UARTEx_SetNbDataToProcess+0xb8>)
 80078d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d2:	0019      	movs	r1, r3
 80078d4:	f7f8 fca2 	bl	800021c <__divsi3>
 80078d8:	0003      	movs	r3, r0
 80078da:	b299      	uxth	r1, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	226a      	movs	r2, #106	@ 0x6a
 80078e0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078e2:	19bb      	adds	r3, r7, r6
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	193a      	adds	r2, r7, r4
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	490a      	ldr	r1, [pc, #40]	@ (8007914 <UARTEx_SetNbDataToProcess+0xb4>)
 80078ec:	5c8a      	ldrb	r2, [r1, r2]
 80078ee:	435a      	muls	r2, r3
 80078f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80078f2:	193b      	adds	r3, r7, r4
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4a08      	ldr	r2, [pc, #32]	@ (8007918 <UARTEx_SetNbDataToProcess+0xb8>)
 80078f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078fa:	0019      	movs	r1, r3
 80078fc:	f7f8 fc8e 	bl	800021c <__divsi3>
 8007900:	0003      	movs	r3, r0
 8007902:	b299      	uxth	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2268      	movs	r2, #104	@ 0x68
 8007908:	5299      	strh	r1, [r3, r2]
}
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	46bd      	mov	sp, r7
 800790e:	b005      	add	sp, #20
 8007910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	08007c94 	.word	0x08007c94
 8007918:	08007c9c 	.word	0x08007c9c

0800791c <memset>:
 800791c:	0003      	movs	r3, r0
 800791e:	1882      	adds	r2, r0, r2
 8007920:	4293      	cmp	r3, r2
 8007922:	d100      	bne.n	8007926 <memset+0xa>
 8007924:	4770      	bx	lr
 8007926:	7019      	strb	r1, [r3, #0]
 8007928:	3301      	adds	r3, #1
 800792a:	e7f9      	b.n	8007920 <memset+0x4>

0800792c <__libc_init_array>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	2600      	movs	r6, #0
 8007930:	4c0c      	ldr	r4, [pc, #48]	@ (8007964 <__libc_init_array+0x38>)
 8007932:	4d0d      	ldr	r5, [pc, #52]	@ (8007968 <__libc_init_array+0x3c>)
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	42a6      	cmp	r6, r4
 800793a:	d109      	bne.n	8007950 <__libc_init_array+0x24>
 800793c:	2600      	movs	r6, #0
 800793e:	f000 f823 	bl	8007988 <_init>
 8007942:	4c0a      	ldr	r4, [pc, #40]	@ (800796c <__libc_init_array+0x40>)
 8007944:	4d0a      	ldr	r5, [pc, #40]	@ (8007970 <__libc_init_array+0x44>)
 8007946:	1b64      	subs	r4, r4, r5
 8007948:	10a4      	asrs	r4, r4, #2
 800794a:	42a6      	cmp	r6, r4
 800794c:	d105      	bne.n	800795a <__libc_init_array+0x2e>
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	00b3      	lsls	r3, r6, #2
 8007952:	58eb      	ldr	r3, [r5, r3]
 8007954:	4798      	blx	r3
 8007956:	3601      	adds	r6, #1
 8007958:	e7ee      	b.n	8007938 <__libc_init_array+0xc>
 800795a:	00b3      	lsls	r3, r6, #2
 800795c:	58eb      	ldr	r3, [r5, r3]
 800795e:	4798      	blx	r3
 8007960:	3601      	adds	r6, #1
 8007962:	e7f2      	b.n	800794a <__libc_init_array+0x1e>
 8007964:	08007ca4 	.word	0x08007ca4
 8007968:	08007ca4 	.word	0x08007ca4
 800796c:	08007ca8 	.word	0x08007ca8
 8007970:	08007ca4 	.word	0x08007ca4

08007974 <memcpy>:
 8007974:	2300      	movs	r3, #0
 8007976:	b510      	push	{r4, lr}
 8007978:	429a      	cmp	r2, r3
 800797a:	d100      	bne.n	800797e <memcpy+0xa>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	5ccc      	ldrb	r4, [r1, r3]
 8007980:	54c4      	strb	r4, [r0, r3]
 8007982:	3301      	adds	r3, #1
 8007984:	e7f8      	b.n	8007978 <memcpy+0x4>
	...

08007988 <_init>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr

08007994 <_fini>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	46c0      	nop			@ (mov r8, r8)
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr
