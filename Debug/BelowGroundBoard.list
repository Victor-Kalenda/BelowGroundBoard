
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a500  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800a5c0  0800a5c0  0000b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a940  0800a940  0000c080  2**0
                  CONTENTS
  4 .ARM          00000000  0800a940  0800a940  0000c080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a940  0800a940  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a940  0800a940  0000b940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a944  0800a944  0000b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a948  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  20000080  0800a9c8  0000c080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800a9c8  0000c71c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a58a  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003523  00000000  00000000  00026632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00029b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001274  00000000  00000000  0002b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cd6  00000000  00000000  0002c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3bd  00000000  00000000  00045202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c7e6  00000000  00000000  000615bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdda5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ac  00000000  00000000  000fdde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00103694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a5a8 	.word	0x0800a5a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800a5a8 	.word	0x0800a5a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb6d 	bl	8000adc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 faed 	bl	80009ec <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb5f 	bl	8000adc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb55 	bl	8000adc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fafb 	bl	8000a3c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 faf1 	bl	8000a3c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fe5f 	bl	800113c <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fcb5 	bl	8000df4 <__aeabi_fsub>
 800048a:	f000 fe57 	bl	800113c <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	46ce      	mov	lr, r9
 800049c:	4647      	mov	r7, r8
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5a      	lsrs	r2, r3, #9
 80004a2:	024e      	lsls	r6, r1, #9
 80004a4:	0045      	lsls	r5, r0, #1
 80004a6:	0fc4      	lsrs	r4, r0, #31
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	4691      	mov	r9, r2
 80004ac:	0e2d      	lsrs	r5, r5, #24
 80004ae:	0a72      	lsrs	r2, r6, #9
 80004b0:	0e00      	lsrs	r0, r0, #24
 80004b2:	4694      	mov	ip, r2
 80004b4:	b580      	push	{r7, lr}
 80004b6:	099b      	lsrs	r3, r3, #6
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	09b6      	lsrs	r6, r6, #6
 80004bc:	1a2a      	subs	r2, r5, r0
 80004be:	428c      	cmp	r4, r1
 80004c0:	d021      	beq.n	8000506 <__aeabi_fadd+0x6e>
 80004c2:	2a00      	cmp	r2, #0
 80004c4:	dd0d      	ble.n	80004e2 <__aeabi_fadd+0x4a>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d12d      	bne.n	8000526 <__aeabi_fadd+0x8e>
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x38>
 80004ce:	e08d      	b.n	80005ec <__aeabi_fadd+0x154>
 80004d0:	1e51      	subs	r1, r2, #1
 80004d2:	2a01      	cmp	r2, #1
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x40>
 80004d6:	e11d      	b.n	8000714 <__aeabi_fadd+0x27c>
 80004d8:	2aff      	cmp	r2, #255	@ 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x46>
 80004dc:	e0ab      	b.n	8000636 <__aeabi_fadd+0x19e>
 80004de:	000a      	movs	r2, r1
 80004e0:	e027      	b.n	8000532 <__aeabi_fadd+0x9a>
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d04d      	beq.n	8000582 <__aeabi_fadd+0xea>
 80004e6:	1b42      	subs	r2, r0, r5
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_fadd+0x56>
 80004ec:	e0cc      	b.n	8000688 <__aeabi_fadd+0x1f0>
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x5c>
 80004f2:	e079      	b.n	80005e8 <__aeabi_fadd+0x150>
 80004f4:	1e54      	subs	r4, r2, #1
 80004f6:	2a01      	cmp	r2, #1
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e128      	b.n	800074e <__aeabi_fadd+0x2b6>
 80004fc:	2aff      	cmp	r2, #255	@ 0xff
 80004fe:	d100      	bne.n	8000502 <__aeabi_fadd+0x6a>
 8000500:	e097      	b.n	8000632 <__aeabi_fadd+0x19a>
 8000502:	0022      	movs	r2, r4
 8000504:	e0c5      	b.n	8000692 <__aeabi_fadd+0x1fa>
 8000506:	2a00      	cmp	r2, #0
 8000508:	dc00      	bgt.n	800050c <__aeabi_fadd+0x74>
 800050a:	e096      	b.n	800063a <__aeabi_fadd+0x1a2>
 800050c:	2800      	cmp	r0, #0
 800050e:	d04f      	beq.n	80005b0 <__aeabi_fadd+0x118>
 8000510:	2dff      	cmp	r5, #255	@ 0xff
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x7e>
 8000514:	e08f      	b.n	8000636 <__aeabi_fadd+0x19e>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	04c9      	lsls	r1, r1, #19
 800051a:	430e      	orrs	r6, r1
 800051c:	2a1b      	cmp	r2, #27
 800051e:	dd51      	ble.n	80005c4 <__aeabi_fadd+0x12c>
 8000520:	002a      	movs	r2, r5
 8000522:	3301      	adds	r3, #1
 8000524:	e018      	b.n	8000558 <__aeabi_fadd+0xc0>
 8000526:	2dff      	cmp	r5, #255	@ 0xff
 8000528:	d100      	bne.n	800052c <__aeabi_fadd+0x94>
 800052a:	e084      	b.n	8000636 <__aeabi_fadd+0x19e>
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	04c9      	lsls	r1, r1, #19
 8000530:	430e      	orrs	r6, r1
 8000532:	2101      	movs	r1, #1
 8000534:	2a1b      	cmp	r2, #27
 8000536:	dc08      	bgt.n	800054a <__aeabi_fadd+0xb2>
 8000538:	0031      	movs	r1, r6
 800053a:	2020      	movs	r0, #32
 800053c:	40d1      	lsrs	r1, r2
 800053e:	1a82      	subs	r2, r0, r2
 8000540:	4096      	lsls	r6, r2
 8000542:	0032      	movs	r2, r6
 8000544:	1e50      	subs	r0, r2, #1
 8000546:	4182      	sbcs	r2, r0
 8000548:	4311      	orrs	r1, r2
 800054a:	1a5b      	subs	r3, r3, r1
 800054c:	015a      	lsls	r2, r3, #5
 800054e:	d459      	bmi.n	8000604 <__aeabi_fadd+0x16c>
 8000550:	2107      	movs	r1, #7
 8000552:	002a      	movs	r2, r5
 8000554:	4019      	ands	r1, r3
 8000556:	d049      	beq.n	80005ec <__aeabi_fadd+0x154>
 8000558:	210f      	movs	r1, #15
 800055a:	4019      	ands	r1, r3
 800055c:	2904      	cmp	r1, #4
 800055e:	d000      	beq.n	8000562 <__aeabi_fadd+0xca>
 8000560:	3304      	adds	r3, #4
 8000562:	0159      	lsls	r1, r3, #5
 8000564:	d542      	bpl.n	80005ec <__aeabi_fadd+0x154>
 8000566:	1c50      	adds	r0, r2, #1
 8000568:	2afe      	cmp	r2, #254	@ 0xfe
 800056a:	d03a      	beq.n	80005e2 <__aeabi_fadd+0x14a>
 800056c:	019b      	lsls	r3, r3, #6
 800056e:	b2c0      	uxtb	r0, r0
 8000570:	0a5b      	lsrs	r3, r3, #9
 8000572:	05c0      	lsls	r0, r0, #23
 8000574:	4318      	orrs	r0, r3
 8000576:	07e4      	lsls	r4, r4, #31
 8000578:	4320      	orrs	r0, r4
 800057a:	bcc0      	pop	{r6, r7}
 800057c:	46b9      	mov	r9, r7
 800057e:	46b0      	mov	r8, r6
 8000580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000582:	20fe      	movs	r0, #254	@ 0xfe
 8000584:	4680      	mov	r8, r0
 8000586:	1c6f      	adds	r7, r5, #1
 8000588:	0038      	movs	r0, r7
 800058a:	4647      	mov	r7, r8
 800058c:	4207      	tst	r7, r0
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0xfa>
 8000590:	e08e      	b.n	80006b0 <__aeabi_fadd+0x218>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d000      	beq.n	8000598 <__aeabi_fadd+0x100>
 8000596:	e0b4      	b.n	8000702 <__aeabi_fadd+0x26a>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x106>
 800059c:	e0db      	b.n	8000756 <__aeabi_fadd+0x2be>
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d06c      	beq.n	800067c <__aeabi_fadd+0x1e4>
 80005a2:	1b98      	subs	r0, r3, r6
 80005a4:	0145      	lsls	r5, r0, #5
 80005a6:	d400      	bmi.n	80005aa <__aeabi_fadd+0x112>
 80005a8:	e0f7      	b.n	800079a <__aeabi_fadd+0x302>
 80005aa:	000c      	movs	r4, r1
 80005ac:	1af3      	subs	r3, r6, r3
 80005ae:	e03d      	b.n	800062c <__aeabi_fadd+0x194>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d01b      	beq.n	80005ec <__aeabi_fadd+0x154>
 80005b4:	1e51      	subs	r1, r2, #1
 80005b6:	2a01      	cmp	r2, #1
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x124>
 80005ba:	e082      	b.n	80006c2 <__aeabi_fadd+0x22a>
 80005bc:	2aff      	cmp	r2, #255	@ 0xff
 80005be:	d03a      	beq.n	8000636 <__aeabi_fadd+0x19e>
 80005c0:	000a      	movs	r2, r1
 80005c2:	e7ab      	b.n	800051c <__aeabi_fadd+0x84>
 80005c4:	0031      	movs	r1, r6
 80005c6:	2020      	movs	r0, #32
 80005c8:	40d1      	lsrs	r1, r2
 80005ca:	1a82      	subs	r2, r0, r2
 80005cc:	4096      	lsls	r6, r2
 80005ce:	0032      	movs	r2, r6
 80005d0:	1e50      	subs	r0, r2, #1
 80005d2:	4182      	sbcs	r2, r0
 80005d4:	430a      	orrs	r2, r1
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	015a      	lsls	r2, r3, #5
 80005da:	d5b9      	bpl.n	8000550 <__aeabi_fadd+0xb8>
 80005dc:	1c6a      	adds	r2, r5, #1
 80005de:	2dfe      	cmp	r5, #254	@ 0xfe
 80005e0:	d175      	bne.n	80006ce <__aeabi_fadd+0x236>
 80005e2:	20ff      	movs	r0, #255	@ 0xff
 80005e4:	2300      	movs	r3, #0
 80005e6:	e7c4      	b.n	8000572 <__aeabi_fadd+0xda>
 80005e8:	000c      	movs	r4, r1
 80005ea:	0033      	movs	r3, r6
 80005ec:	08db      	lsrs	r3, r3, #3
 80005ee:	2aff      	cmp	r2, #255	@ 0xff
 80005f0:	d146      	bne.n	8000680 <__aeabi_fadd+0x1e8>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f5      	beq.n	80005e2 <__aeabi_fadd+0x14a>
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	03d2      	lsls	r2, r2, #15
 80005fa:	4313      	orrs	r3, r2
 80005fc:	025b      	lsls	r3, r3, #9
 80005fe:	20ff      	movs	r0, #255	@ 0xff
 8000600:	0a5b      	lsrs	r3, r3, #9
 8000602:	e7b6      	b.n	8000572 <__aeabi_fadd+0xda>
 8000604:	019f      	lsls	r7, r3, #6
 8000606:	09bf      	lsrs	r7, r7, #6
 8000608:	0038      	movs	r0, r7
 800060a:	f000 fdf9 	bl	8001200 <__clzsi2>
 800060e:	3805      	subs	r0, #5
 8000610:	4087      	lsls	r7, r0
 8000612:	4285      	cmp	r5, r0
 8000614:	dc24      	bgt.n	8000660 <__aeabi_fadd+0x1c8>
 8000616:	003b      	movs	r3, r7
 8000618:	2120      	movs	r1, #32
 800061a:	1b42      	subs	r2, r0, r5
 800061c:	3201      	adds	r2, #1
 800061e:	40d3      	lsrs	r3, r2
 8000620:	1a8a      	subs	r2, r1, r2
 8000622:	4097      	lsls	r7, r2
 8000624:	1e7a      	subs	r2, r7, #1
 8000626:	4197      	sbcs	r7, r2
 8000628:	2200      	movs	r2, #0
 800062a:	433b      	orrs	r3, r7
 800062c:	0759      	lsls	r1, r3, #29
 800062e:	d193      	bne.n	8000558 <__aeabi_fadd+0xc0>
 8000630:	e797      	b.n	8000562 <__aeabi_fadd+0xca>
 8000632:	000c      	movs	r4, r1
 8000634:	0033      	movs	r3, r6
 8000636:	08db      	lsrs	r3, r3, #3
 8000638:	e7db      	b.n	80005f2 <__aeabi_fadd+0x15a>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d014      	beq.n	8000668 <__aeabi_fadd+0x1d0>
 800063e:	1b42      	subs	r2, r0, r5
 8000640:	2d00      	cmp	r5, #0
 8000642:	d14b      	bne.n	80006dc <__aeabi_fadd+0x244>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0d0      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000648:	1e51      	subs	r1, r2, #1
 800064a:	2a01      	cmp	r2, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x1b8>
 800064e:	e09e      	b.n	800078e <__aeabi_fadd+0x2f6>
 8000650:	2aff      	cmp	r2, #255	@ 0xff
 8000652:	d0ef      	beq.n	8000634 <__aeabi_fadd+0x19c>
 8000654:	000a      	movs	r2, r1
 8000656:	2a1b      	cmp	r2, #27
 8000658:	dd5f      	ble.n	800071a <__aeabi_fadd+0x282>
 800065a:	0002      	movs	r2, r0
 800065c:	1c73      	adds	r3, r6, #1
 800065e:	e77b      	b.n	8000558 <__aeabi_fadd+0xc0>
 8000660:	4b50      	ldr	r3, [pc, #320]	@ (80007a4 <__aeabi_fadd+0x30c>)
 8000662:	1a2a      	subs	r2, r5, r0
 8000664:	403b      	ands	r3, r7
 8000666:	e7e1      	b.n	800062c <__aeabi_fadd+0x194>
 8000668:	21fe      	movs	r1, #254	@ 0xfe
 800066a:	1c6a      	adds	r2, r5, #1
 800066c:	4211      	tst	r1, r2
 800066e:	d13b      	bne.n	80006e8 <__aeabi_fadd+0x250>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d15d      	bne.n	8000730 <__aeabi_fadd+0x298>
 8000674:	2b00      	cmp	r3, #0
 8000676:	d07f      	beq.n	8000778 <__aeabi_fadd+0x2e0>
 8000678:	2e00      	cmp	r6, #0
 800067a:	d17f      	bne.n	800077c <__aeabi_fadd+0x2e4>
 800067c:	2200      	movs	r2, #0
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	025b      	lsls	r3, r3, #9
 8000682:	0a5b      	lsrs	r3, r3, #9
 8000684:	b2d0      	uxtb	r0, r2
 8000686:	e774      	b.n	8000572 <__aeabi_fadd+0xda>
 8000688:	28ff      	cmp	r0, #255	@ 0xff
 800068a:	d0d2      	beq.n	8000632 <__aeabi_fadd+0x19a>
 800068c:	2480      	movs	r4, #128	@ 0x80
 800068e:	04e4      	lsls	r4, r4, #19
 8000690:	4323      	orrs	r3, r4
 8000692:	2401      	movs	r4, #1
 8000694:	2a1b      	cmp	r2, #27
 8000696:	dc07      	bgt.n	80006a8 <__aeabi_fadd+0x210>
 8000698:	001c      	movs	r4, r3
 800069a:	2520      	movs	r5, #32
 800069c:	40d4      	lsrs	r4, r2
 800069e:	1aaa      	subs	r2, r5, r2
 80006a0:	4093      	lsls	r3, r2
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	4193      	sbcs	r3, r2
 80006a6:	431c      	orrs	r4, r3
 80006a8:	1b33      	subs	r3, r6, r4
 80006aa:	0005      	movs	r5, r0
 80006ac:	000c      	movs	r4, r1
 80006ae:	e74d      	b.n	800054c <__aeabi_fadd+0xb4>
 80006b0:	1b9f      	subs	r7, r3, r6
 80006b2:	017a      	lsls	r2, r7, #5
 80006b4:	d422      	bmi.n	80006fc <__aeabi_fadd+0x264>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d1a6      	bne.n	8000608 <__aeabi_fadd+0x170>
 80006ba:	2400      	movs	r4, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	e757      	b.n	8000572 <__aeabi_fadd+0xda>
 80006c2:	199b      	adds	r3, r3, r6
 80006c4:	2501      	movs	r5, #1
 80006c6:	3201      	adds	r2, #1
 80006c8:	0159      	lsls	r1, r3, #5
 80006ca:	d400      	bmi.n	80006ce <__aeabi_fadd+0x236>
 80006cc:	e740      	b.n	8000550 <__aeabi_fadd+0xb8>
 80006ce:	2101      	movs	r1, #1
 80006d0:	4835      	ldr	r0, [pc, #212]	@ (80007a8 <__aeabi_fadd+0x310>)
 80006d2:	4019      	ands	r1, r3
 80006d4:	085b      	lsrs	r3, r3, #1
 80006d6:	4003      	ands	r3, r0
 80006d8:	430b      	orrs	r3, r1
 80006da:	e7a7      	b.n	800062c <__aeabi_fadd+0x194>
 80006dc:	28ff      	cmp	r0, #255	@ 0xff
 80006de:	d0a9      	beq.n	8000634 <__aeabi_fadd+0x19c>
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	04c9      	lsls	r1, r1, #19
 80006e4:	430b      	orrs	r3, r1
 80006e6:	e7b6      	b.n	8000656 <__aeabi_fadd+0x1be>
 80006e8:	2aff      	cmp	r2, #255	@ 0xff
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0x256>
 80006ec:	e779      	b.n	80005e2 <__aeabi_fadd+0x14a>
 80006ee:	199b      	adds	r3, r3, r6
 80006f0:	085b      	lsrs	r3, r3, #1
 80006f2:	0759      	lsls	r1, r3, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fadd+0x260>
 80006f6:	e72f      	b.n	8000558 <__aeabi_fadd+0xc0>
 80006f8:	08db      	lsrs	r3, r3, #3
 80006fa:	e7c1      	b.n	8000680 <__aeabi_fadd+0x1e8>
 80006fc:	000c      	movs	r4, r1
 80006fe:	1af7      	subs	r7, r6, r3
 8000700:	e782      	b.n	8000608 <__aeabi_fadd+0x170>
 8000702:	2b00      	cmp	r3, #0
 8000704:	d12c      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d193      	bne.n	8000632 <__aeabi_fadd+0x19a>
 800070a:	2380      	movs	r3, #128	@ 0x80
 800070c:	2400      	movs	r4, #0
 800070e:	20ff      	movs	r0, #255	@ 0xff
 8000710:	03db      	lsls	r3, r3, #15
 8000712:	e72e      	b.n	8000572 <__aeabi_fadd+0xda>
 8000714:	2501      	movs	r5, #1
 8000716:	1b9b      	subs	r3, r3, r6
 8000718:	e718      	b.n	800054c <__aeabi_fadd+0xb4>
 800071a:	0019      	movs	r1, r3
 800071c:	2520      	movs	r5, #32
 800071e:	40d1      	lsrs	r1, r2
 8000720:	1aaa      	subs	r2, r5, r2
 8000722:	4093      	lsls	r3, r2
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	4193      	sbcs	r3, r2
 8000728:	430b      	orrs	r3, r1
 800072a:	0005      	movs	r5, r0
 800072c:	199b      	adds	r3, r3, r6
 800072e:	e753      	b.n	80005d8 <__aeabi_fadd+0x140>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x29e>
 8000734:	e77e      	b.n	8000634 <__aeabi_fadd+0x19c>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fadd+0x2a4>
 800073a:	e77c      	b.n	8000636 <__aeabi_fadd+0x19e>
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	03d2      	lsls	r2, r2, #15
 8000740:	4591      	cmp	r9, r2
 8000742:	d302      	bcc.n	800074a <__aeabi_fadd+0x2b2>
 8000744:	4594      	cmp	ip, r2
 8000746:	d200      	bcs.n	800074a <__aeabi_fadd+0x2b2>
 8000748:	0033      	movs	r3, r6
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	e753      	b.n	80005f6 <__aeabi_fadd+0x15e>
 800074e:	000c      	movs	r4, r1
 8000750:	1af3      	subs	r3, r6, r3
 8000752:	3501      	adds	r5, #1
 8000754:	e6fa      	b.n	800054c <__aeabi_fadd+0xb4>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d0af      	beq.n	80006ba <__aeabi_fadd+0x222>
 800075a:	000c      	movs	r4, r1
 800075c:	0033      	movs	r3, r6
 800075e:	e78d      	b.n	800067c <__aeabi_fadd+0x1e4>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x2ce>
 8000764:	e767      	b.n	8000636 <__aeabi_fadd+0x19e>
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	03d2      	lsls	r2, r2, #15
 800076a:	4591      	cmp	r9, r2
 800076c:	d3ed      	bcc.n	800074a <__aeabi_fadd+0x2b2>
 800076e:	4594      	cmp	ip, r2
 8000770:	d2eb      	bcs.n	800074a <__aeabi_fadd+0x2b2>
 8000772:	000c      	movs	r4, r1
 8000774:	0033      	movs	r3, r6
 8000776:	e7e8      	b.n	800074a <__aeabi_fadd+0x2b2>
 8000778:	0033      	movs	r3, r6
 800077a:	e77f      	b.n	800067c <__aeabi_fadd+0x1e4>
 800077c:	199b      	adds	r3, r3, r6
 800077e:	2200      	movs	r2, #0
 8000780:	0159      	lsls	r1, r3, #5
 8000782:	d5b9      	bpl.n	80006f8 <__aeabi_fadd+0x260>
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <__aeabi_fadd+0x30c>)
 8000786:	4013      	ands	r3, r2
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	2201      	movs	r2, #1
 800078c:	e778      	b.n	8000680 <__aeabi_fadd+0x1e8>
 800078e:	199b      	adds	r3, r3, r6
 8000790:	3201      	adds	r2, #1
 8000792:	3501      	adds	r5, #1
 8000794:	0159      	lsls	r1, r3, #5
 8000796:	d49a      	bmi.n	80006ce <__aeabi_fadd+0x236>
 8000798:	e6da      	b.n	8000550 <__aeabi_fadd+0xb8>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d08d      	beq.n	80006ba <__aeabi_fadd+0x222>
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	e76e      	b.n	8000680 <__aeabi_fadd+0x1e8>
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	fbffffff 	.word	0xfbffffff
 80007a8:	7dffffff 	.word	0x7dffffff

080007ac <__aeabi_fdiv>:
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	464f      	mov	r7, r9
 80007b0:	4646      	mov	r6, r8
 80007b2:	46d6      	mov	lr, sl
 80007b4:	0244      	lsls	r4, r0, #9
 80007b6:	b5c0      	push	{r6, r7, lr}
 80007b8:	0047      	lsls	r7, r0, #1
 80007ba:	1c0e      	adds	r6, r1, #0
 80007bc:	0a64      	lsrs	r4, r4, #9
 80007be:	0e3f      	lsrs	r7, r7, #24
 80007c0:	0fc5      	lsrs	r5, r0, #31
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d03c      	beq.n	8000840 <__aeabi_fdiv+0x94>
 80007c6:	2fff      	cmp	r7, #255	@ 0xff
 80007c8:	d042      	beq.n	8000850 <__aeabi_fdiv+0xa4>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	4699      	mov	r9, r3
 80007d0:	469a      	mov	sl, r3
 80007d2:	00e4      	lsls	r4, r4, #3
 80007d4:	04d2      	lsls	r2, r2, #19
 80007d6:	4314      	orrs	r4, r2
 80007d8:	3f7f      	subs	r7, #127	@ 0x7f
 80007da:	0273      	lsls	r3, r6, #9
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	4698      	mov	r8, r3
 80007e0:	0073      	lsls	r3, r6, #1
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	0ff6      	lsrs	r6, r6, #31
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d01b      	beq.n	8000822 <__aeabi_fdiv+0x76>
 80007ea:	2bff      	cmp	r3, #255	@ 0xff
 80007ec:	d013      	beq.n	8000816 <__aeabi_fdiv+0x6a>
 80007ee:	4642      	mov	r2, r8
 80007f0:	2180      	movs	r1, #128	@ 0x80
 80007f2:	00d2      	lsls	r2, r2, #3
 80007f4:	04c9      	lsls	r1, r1, #19
 80007f6:	4311      	orrs	r1, r2
 80007f8:	4688      	mov	r8, r1
 80007fa:	2000      	movs	r0, #0
 80007fc:	3b7f      	subs	r3, #127	@ 0x7f
 80007fe:	0029      	movs	r1, r5
 8000800:	1aff      	subs	r7, r7, r3
 8000802:	464b      	mov	r3, r9
 8000804:	4071      	eors	r1, r6
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d900      	bls.n	800080e <__aeabi_fdiv+0x62>
 800080c:	e0b5      	b.n	800097a <__aeabi_fdiv+0x1ce>
 800080e:	4a74      	ldr	r2, [pc, #464]	@ (80009e0 <__aeabi_fdiv+0x234>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58d3      	ldr	r3, [r2, r3]
 8000814:	469f      	mov	pc, r3
 8000816:	4643      	mov	r3, r8
 8000818:	2b00      	cmp	r3, #0
 800081a:	d13f      	bne.n	800089c <__aeabi_fdiv+0xf0>
 800081c:	3fff      	subs	r7, #255	@ 0xff
 800081e:	3302      	adds	r3, #2
 8000820:	e003      	b.n	800082a <__aeabi_fdiv+0x7e>
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d12d      	bne.n	8000884 <__aeabi_fdiv+0xd8>
 8000828:	2301      	movs	r3, #1
 800082a:	0029      	movs	r1, r5
 800082c:	464a      	mov	r2, r9
 800082e:	4071      	eors	r1, r6
 8000830:	b2c9      	uxtb	r1, r1
 8000832:	431a      	orrs	r2, r3
 8000834:	2a0e      	cmp	r2, #14
 8000836:	d838      	bhi.n	80008aa <__aeabi_fdiv+0xfe>
 8000838:	486a      	ldr	r0, [pc, #424]	@ (80009e4 <__aeabi_fdiv+0x238>)
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	5882      	ldr	r2, [r0, r2]
 800083e:	4697      	mov	pc, r2
 8000840:	2c00      	cmp	r4, #0
 8000842:	d113      	bne.n	800086c <__aeabi_fdiv+0xc0>
 8000844:	2304      	movs	r3, #4
 8000846:	4699      	mov	r9, r3
 8000848:	3b03      	subs	r3, #3
 800084a:	2700      	movs	r7, #0
 800084c:	469a      	mov	sl, r3
 800084e:	e7c4      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000850:	2c00      	cmp	r4, #0
 8000852:	d105      	bne.n	8000860 <__aeabi_fdiv+0xb4>
 8000854:	2308      	movs	r3, #8
 8000856:	4699      	mov	r9, r3
 8000858:	3b06      	subs	r3, #6
 800085a:	27ff      	movs	r7, #255	@ 0xff
 800085c:	469a      	mov	sl, r3
 800085e:	e7bc      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000860:	230c      	movs	r3, #12
 8000862:	4699      	mov	r9, r3
 8000864:	3b09      	subs	r3, #9
 8000866:	27ff      	movs	r7, #255	@ 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e7b6      	b.n	80007da <__aeabi_fdiv+0x2e>
 800086c:	0020      	movs	r0, r4
 800086e:	f000 fcc7 	bl	8001200 <__clzsi2>
 8000872:	2776      	movs	r7, #118	@ 0x76
 8000874:	1f43      	subs	r3, r0, #5
 8000876:	409c      	lsls	r4, r3
 8000878:	2300      	movs	r3, #0
 800087a:	427f      	negs	r7, r7
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	1a3f      	subs	r7, r7, r0
 8000882:	e7aa      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000884:	4640      	mov	r0, r8
 8000886:	f000 fcbb 	bl	8001200 <__clzsi2>
 800088a:	4642      	mov	r2, r8
 800088c:	1f43      	subs	r3, r0, #5
 800088e:	409a      	lsls	r2, r3
 8000890:	2376      	movs	r3, #118	@ 0x76
 8000892:	425b      	negs	r3, r3
 8000894:	1a1b      	subs	r3, r3, r0
 8000896:	4690      	mov	r8, r2
 8000898:	2000      	movs	r0, #0
 800089a:	e7b0      	b.n	80007fe <__aeabi_fdiv+0x52>
 800089c:	2303      	movs	r3, #3
 800089e:	464a      	mov	r2, r9
 80008a0:	431a      	orrs	r2, r3
 80008a2:	4691      	mov	r9, r2
 80008a4:	2003      	movs	r0, #3
 80008a6:	33fc      	adds	r3, #252	@ 0xfc
 80008a8:	e7a9      	b.n	80007fe <__aeabi_fdiv+0x52>
 80008aa:	000d      	movs	r5, r1
 80008ac:	20ff      	movs	r0, #255	@ 0xff
 80008ae:	2200      	movs	r2, #0
 80008b0:	05c0      	lsls	r0, r0, #23
 80008b2:	07ed      	lsls	r5, r5, #31
 80008b4:	4310      	orrs	r0, r2
 80008b6:	4328      	orrs	r0, r5
 80008b8:	bce0      	pop	{r5, r6, r7}
 80008ba:	46ba      	mov	sl, r7
 80008bc:	46b1      	mov	r9, r6
 80008be:	46a8      	mov	r8, r5
 80008c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c2:	000d      	movs	r5, r1
 80008c4:	2000      	movs	r0, #0
 80008c6:	2200      	movs	r2, #0
 80008c8:	e7f2      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80008ca:	4653      	mov	r3, sl
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d0ed      	beq.n	80008ac <__aeabi_fdiv+0x100>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d033      	beq.n	800093c <__aeabi_fdiv+0x190>
 80008d4:	46a0      	mov	r8, r4
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <__aeabi_fdiv+0x13a>
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e7e7      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80008e0:	0035      	movs	r5, r6
 80008e2:	2803      	cmp	r0, #3
 80008e4:	d07a      	beq.n	80009dc <__aeabi_fdiv+0x230>
 80008e6:	003b      	movs	r3, r7
 80008e8:	337f      	adds	r3, #127	@ 0x7f
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd2d      	ble.n	800094a <__aeabi_fdiv+0x19e>
 80008ee:	4642      	mov	r2, r8
 80008f0:	0752      	lsls	r2, r2, #29
 80008f2:	d007      	beq.n	8000904 <__aeabi_fdiv+0x158>
 80008f4:	220f      	movs	r2, #15
 80008f6:	4641      	mov	r1, r8
 80008f8:	400a      	ands	r2, r1
 80008fa:	2a04      	cmp	r2, #4
 80008fc:	d002      	beq.n	8000904 <__aeabi_fdiv+0x158>
 80008fe:	2204      	movs	r2, #4
 8000900:	4694      	mov	ip, r2
 8000902:	44e0      	add	r8, ip
 8000904:	4642      	mov	r2, r8
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	d505      	bpl.n	8000916 <__aeabi_fdiv+0x16a>
 800090a:	4642      	mov	r2, r8
 800090c:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <__aeabi_fdiv+0x23c>)
 800090e:	401a      	ands	r2, r3
 8000910:	003b      	movs	r3, r7
 8000912:	4690      	mov	r8, r2
 8000914:	3380      	adds	r3, #128	@ 0x80
 8000916:	2bfe      	cmp	r3, #254	@ 0xfe
 8000918:	dcc8      	bgt.n	80008ac <__aeabi_fdiv+0x100>
 800091a:	4642      	mov	r2, r8
 800091c:	0192      	lsls	r2, r2, #6
 800091e:	0a52      	lsrs	r2, r2, #9
 8000920:	b2d8      	uxtb	r0, r3
 8000922:	e7c5      	b.n	80008b0 <__aeabi_fdiv+0x104>
 8000924:	2280      	movs	r2, #128	@ 0x80
 8000926:	2500      	movs	r5, #0
 8000928:	20ff      	movs	r0, #255	@ 0xff
 800092a:	03d2      	lsls	r2, r2, #15
 800092c:	e7c0      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800092e:	2280      	movs	r2, #128	@ 0x80
 8000930:	03d2      	lsls	r2, r2, #15
 8000932:	4214      	tst	r4, r2
 8000934:	d002      	beq.n	800093c <__aeabi_fdiv+0x190>
 8000936:	4643      	mov	r3, r8
 8000938:	4213      	tst	r3, r2
 800093a:	d049      	beq.n	80009d0 <__aeabi_fdiv+0x224>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	03d2      	lsls	r2, r2, #15
 8000940:	4322      	orrs	r2, r4
 8000942:	0252      	lsls	r2, r2, #9
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	0a52      	lsrs	r2, r2, #9
 8000948:	e7b2      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800094a:	2201      	movs	r2, #1
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b1b      	cmp	r3, #27
 8000950:	dcc3      	bgt.n	80008da <__aeabi_fdiv+0x12e>
 8000952:	4642      	mov	r2, r8
 8000954:	40da      	lsrs	r2, r3
 8000956:	4643      	mov	r3, r8
 8000958:	379e      	adds	r7, #158	@ 0x9e
 800095a:	40bb      	lsls	r3, r7
 800095c:	1e59      	subs	r1, r3, #1
 800095e:	418b      	sbcs	r3, r1
 8000960:	431a      	orrs	r2, r3
 8000962:	0753      	lsls	r3, r2, #29
 8000964:	d004      	beq.n	8000970 <__aeabi_fdiv+0x1c4>
 8000966:	230f      	movs	r3, #15
 8000968:	4013      	ands	r3, r2
 800096a:	2b04      	cmp	r3, #4
 800096c:	d000      	beq.n	8000970 <__aeabi_fdiv+0x1c4>
 800096e:	3204      	adds	r2, #4
 8000970:	0153      	lsls	r3, r2, #5
 8000972:	d529      	bpl.n	80009c8 <__aeabi_fdiv+0x21c>
 8000974:	2001      	movs	r0, #1
 8000976:	2200      	movs	r2, #0
 8000978:	e79a      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800097a:	4642      	mov	r2, r8
 800097c:	0163      	lsls	r3, r4, #5
 800097e:	0155      	lsls	r5, r2, #5
 8000980:	42ab      	cmp	r3, r5
 8000982:	d215      	bcs.n	80009b0 <__aeabi_fdiv+0x204>
 8000984:	201b      	movs	r0, #27
 8000986:	2200      	movs	r2, #0
 8000988:	3f01      	subs	r7, #1
 800098a:	2601      	movs	r6, #1
 800098c:	001c      	movs	r4, r3
 800098e:	0052      	lsls	r2, r2, #1
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2c00      	cmp	r4, #0
 8000994:	db01      	blt.n	800099a <__aeabi_fdiv+0x1ee>
 8000996:	429d      	cmp	r5, r3
 8000998:	d801      	bhi.n	800099e <__aeabi_fdiv+0x1f2>
 800099a:	1b5b      	subs	r3, r3, r5
 800099c:	4332      	orrs	r2, r6
 800099e:	3801      	subs	r0, #1
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d1f3      	bne.n	800098c <__aeabi_fdiv+0x1e0>
 80009a4:	1e58      	subs	r0, r3, #1
 80009a6:	4183      	sbcs	r3, r0
 80009a8:	4313      	orrs	r3, r2
 80009aa:	4698      	mov	r8, r3
 80009ac:	000d      	movs	r5, r1
 80009ae:	e79a      	b.n	80008e6 <__aeabi_fdiv+0x13a>
 80009b0:	201a      	movs	r0, #26
 80009b2:	2201      	movs	r2, #1
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	e7e8      	b.n	800098a <__aeabi_fdiv+0x1de>
 80009b8:	3b02      	subs	r3, #2
 80009ba:	425a      	negs	r2, r3
 80009bc:	4153      	adcs	r3, r2
 80009be:	425b      	negs	r3, r3
 80009c0:	0035      	movs	r5, r6
 80009c2:	2200      	movs	r2, #0
 80009c4:	b2d8      	uxtb	r0, r3
 80009c6:	e773      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009c8:	0192      	lsls	r2, r2, #6
 80009ca:	2000      	movs	r0, #0
 80009cc:	0a52      	lsrs	r2, r2, #9
 80009ce:	e76f      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009d0:	431a      	orrs	r2, r3
 80009d2:	0252      	lsls	r2, r2, #9
 80009d4:	0035      	movs	r5, r6
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	0a52      	lsrs	r2, r2, #9
 80009da:	e769      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009dc:	4644      	mov	r4, r8
 80009de:	e7ad      	b.n	800093c <__aeabi_fdiv+0x190>
 80009e0:	0800a5c0 	.word	0x0800a5c0
 80009e4:	0800a600 	.word	0x0800a600
 80009e8:	f7ffffff 	.word	0xf7ffffff

080009ec <__eqsf2>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	0042      	lsls	r2, r0, #1
 80009f0:	024e      	lsls	r6, r1, #9
 80009f2:	004c      	lsls	r4, r1, #1
 80009f4:	0245      	lsls	r5, r0, #9
 80009f6:	0a6d      	lsrs	r5, r5, #9
 80009f8:	0e12      	lsrs	r2, r2, #24
 80009fa:	0fc3      	lsrs	r3, r0, #31
 80009fc:	0a76      	lsrs	r6, r6, #9
 80009fe:	0e24      	lsrs	r4, r4, #24
 8000a00:	0fc9      	lsrs	r1, r1, #31
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d010      	beq.n	8000a28 <__eqsf2+0x3c>
 8000a06:	2cff      	cmp	r4, #255	@ 0xff
 8000a08:	d00c      	beq.n	8000a24 <__eqsf2+0x38>
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	42a2      	cmp	r2, r4
 8000a0e:	d10a      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a10:	42b5      	cmp	r5, r6
 8000a12:	d108      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d00f      	beq.n	8000a38 <__eqsf2+0x4c>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d104      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	1e43      	subs	r3, r0, #1
 8000a20:	4198      	sbcs	r0, r3
 8000a22:	e000      	b.n	8000a26 <__eqsf2+0x3a>
 8000a24:	2001      	movs	r0, #1
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	2001      	movs	r0, #1
 8000a2a:	2cff      	cmp	r4, #255	@ 0xff
 8000a2c:	d1fb      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a2e:	4335      	orrs	r5, r6
 8000a30:	d1f9      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a32:	404b      	eors	r3, r1
 8000a34:	0018      	movs	r0, r3
 8000a36:	e7f6      	b.n	8000a26 <__eqsf2+0x3a>
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e7f4      	b.n	8000a26 <__eqsf2+0x3a>

08000a3c <__gesf2>:
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	0042      	lsls	r2, r0, #1
 8000a40:	0244      	lsls	r4, r0, #9
 8000a42:	024d      	lsls	r5, r1, #9
 8000a44:	0fc3      	lsrs	r3, r0, #31
 8000a46:	0048      	lsls	r0, r1, #1
 8000a48:	0a64      	lsrs	r4, r4, #9
 8000a4a:	0e12      	lsrs	r2, r2, #24
 8000a4c:	0a6d      	lsrs	r5, r5, #9
 8000a4e:	0e00      	lsrs	r0, r0, #24
 8000a50:	0fc9      	lsrs	r1, r1, #31
 8000a52:	2aff      	cmp	r2, #255	@ 0xff
 8000a54:	d019      	beq.n	8000a8a <__gesf2+0x4e>
 8000a56:	28ff      	cmp	r0, #255	@ 0xff
 8000a58:	d00b      	beq.n	8000a72 <__gesf2+0x36>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d11e      	bne.n	8000a9c <__gesf2+0x60>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d10b      	bne.n	8000a7a <__gesf2+0x3e>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d027      	beq.n	8000ab6 <__gesf2+0x7a>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d134      	bne.n	8000ad4 <__gesf2+0x98>
 8000a6a:	2900      	cmp	r1, #0
 8000a6c:	d02f      	beq.n	8000ace <__gesf2+0x92>
 8000a6e:	0008      	movs	r0, r1
 8000a70:	bd30      	pop	{r4, r5, pc}
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d128      	bne.n	8000ac8 <__gesf2+0x8c>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d101      	bne.n	8000a7e <__gesf2+0x42>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d0f5      	beq.n	8000a6a <__gesf2+0x2e>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d107      	bne.n	8000a92 <__gesf2+0x56>
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d023      	beq.n	8000ace <__gesf2+0x92>
 8000a86:	0018      	movs	r0, r3
 8000a88:	e7f2      	b.n	8000a70 <__gesf2+0x34>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d11c      	bne.n	8000ac8 <__gesf2+0x8c>
 8000a8e:	28ff      	cmp	r0, #255	@ 0xff
 8000a90:	d014      	beq.n	8000abc <__gesf2+0x80>
 8000a92:	1e58      	subs	r0, r3, #1
 8000a94:	2302      	movs	r3, #2
 8000a96:	4018      	ands	r0, r3
 8000a98:	3801      	subs	r0, #1
 8000a9a:	e7e9      	b.n	8000a70 <__gesf2+0x34>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d0f8      	beq.n	8000a92 <__gesf2+0x56>
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d1f6      	bne.n	8000a92 <__gesf2+0x56>
 8000aa4:	4282      	cmp	r2, r0
 8000aa6:	dcf4      	bgt.n	8000a92 <__gesf2+0x56>
 8000aa8:	dbeb      	blt.n	8000a82 <__gesf2+0x46>
 8000aaa:	42ac      	cmp	r4, r5
 8000aac:	d8f1      	bhi.n	8000a92 <__gesf2+0x56>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	42ac      	cmp	r4, r5
 8000ab2:	d2dd      	bcs.n	8000a70 <__gesf2+0x34>
 8000ab4:	e7e5      	b.n	8000a82 <__gesf2+0x46>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d0da      	beq.n	8000a70 <__gesf2+0x34>
 8000aba:	e7ea      	b.n	8000a92 <__gesf2+0x56>
 8000abc:	2d00      	cmp	r5, #0
 8000abe:	d103      	bne.n	8000ac8 <__gesf2+0x8c>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	d1e6      	bne.n	8000a92 <__gesf2+0x56>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7d3      	b.n	8000a70 <__gesf2+0x34>
 8000ac8:	2002      	movs	r0, #2
 8000aca:	4240      	negs	r0, r0
 8000acc:	e7d0      	b.n	8000a70 <__gesf2+0x34>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	4240      	negs	r0, r0
 8000ad2:	e7cd      	b.n	8000a70 <__gesf2+0x34>
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d0e8      	beq.n	8000aaa <__gesf2+0x6e>
 8000ad8:	e7db      	b.n	8000a92 <__gesf2+0x56>
 8000ada:	46c0      	nop			@ (mov r8, r8)

08000adc <__lesf2>:
 8000adc:	b530      	push	{r4, r5, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0244      	lsls	r4, r0, #9
 8000ae2:	024d      	lsls	r5, r1, #9
 8000ae4:	0fc3      	lsrs	r3, r0, #31
 8000ae6:	0048      	lsls	r0, r1, #1
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0e00      	lsrs	r0, r0, #24
 8000af0:	0fc9      	lsrs	r1, r1, #31
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d01a      	beq.n	8000b2c <__lesf2+0x50>
 8000af6:	28ff      	cmp	r0, #255	@ 0xff
 8000af8:	d00e      	beq.n	8000b18 <__lesf2+0x3c>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11e      	bne.n	8000b3c <__lesf2+0x60>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d10e      	bne.n	8000b20 <__lesf2+0x44>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d02a      	beq.n	8000b5c <__lesf2+0x80>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d00c      	beq.n	8000b24 <__lesf2+0x48>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d01d      	beq.n	8000b4a <__lesf2+0x6e>
 8000b0e:	1e58      	subs	r0, r3, #1
 8000b10:	2302      	movs	r3, #2
 8000b12:	4018      	ands	r0, r3
 8000b14:	3801      	subs	r0, #1
 8000b16:	e010      	b.n	8000b3a <__lesf2+0x5e>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d10d      	bne.n	8000b38 <__lesf2+0x5c>
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d120      	bne.n	8000b62 <__lesf2+0x86>
 8000b20:	2c00      	cmp	r4, #0
 8000b22:	d11e      	bne.n	8000b62 <__lesf2+0x86>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	d023      	beq.n	8000b70 <__lesf2+0x94>
 8000b28:	0008      	movs	r0, r1
 8000b2a:	e006      	b.n	8000b3a <__lesf2+0x5e>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d103      	bne.n	8000b38 <__lesf2+0x5c>
 8000b30:	28ff      	cmp	r0, #255	@ 0xff
 8000b32:	d1ec      	bne.n	8000b0e <__lesf2+0x32>
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d017      	beq.n	8000b68 <__lesf2+0x8c>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d0e6      	beq.n	8000b0e <__lesf2+0x32>
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d1e4      	bne.n	8000b0e <__lesf2+0x32>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	dce2      	bgt.n	8000b0e <__lesf2+0x32>
 8000b48:	db04      	blt.n	8000b54 <__lesf2+0x78>
 8000b4a:	42ac      	cmp	r4, r5
 8000b4c:	d8df      	bhi.n	8000b0e <__lesf2+0x32>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	42ac      	cmp	r4, r5
 8000b52:	d2f2      	bcs.n	8000b3a <__lesf2+0x5e>
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00b      	beq.n	8000b70 <__lesf2+0x94>
 8000b58:	0018      	movs	r0, r3
 8000b5a:	e7ee      	b.n	8000b3a <__lesf2+0x5e>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d0ec      	beq.n	8000b3a <__lesf2+0x5e>
 8000b60:	e7d5      	b.n	8000b0e <__lesf2+0x32>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d1d3      	bne.n	8000b0e <__lesf2+0x32>
 8000b66:	e7f5      	b.n	8000b54 <__lesf2+0x78>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d0e5      	beq.n	8000b3a <__lesf2+0x5e>
 8000b6e:	e7ce      	b.n	8000b0e <__lesf2+0x32>
 8000b70:	2001      	movs	r0, #1
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7e1      	b.n	8000b3a <__lesf2+0x5e>
 8000b76:	46c0      	nop			@ (mov r8, r8)

08000b78 <__aeabi_fmul>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	464f      	mov	r7, r9
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	0243      	lsls	r3, r0, #9
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	0045      	lsls	r5, r0, #1
 8000b86:	b5c0      	push	{r6, r7, lr}
 8000b88:	4699      	mov	r9, r3
 8000b8a:	1c0f      	adds	r7, r1, #0
 8000b8c:	0e2d      	lsrs	r5, r5, #24
 8000b8e:	0fc6      	lsrs	r6, r0, #31
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fmul+0x1e>
 8000b94:	e088      	b.n	8000ca8 <__aeabi_fmul+0x130>
 8000b96:	2dff      	cmp	r5, #255	@ 0xff
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fmul+0x24>
 8000b9a:	e08d      	b.n	8000cb8 <__aeabi_fmul+0x140>
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	04d2      	lsls	r2, r2, #19
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	4698      	mov	r8, r3
 8000baa:	469a      	mov	sl, r3
 8000bac:	3d7f      	subs	r5, #127	@ 0x7f
 8000bae:	027c      	lsls	r4, r7, #9
 8000bb0:	007b      	lsls	r3, r7, #1
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	0e1b      	lsrs	r3, r3, #24
 8000bb6:	0fff      	lsrs	r7, r7, #31
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d068      	beq.n	8000c8e <__aeabi_fmul+0x116>
 8000bbc:	2bff      	cmp	r3, #255	@ 0xff
 8000bbe:	d021      	beq.n	8000c04 <__aeabi_fmul+0x8c>
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	00e4      	lsls	r4, r4, #3
 8000bc4:	04d2      	lsls	r2, r2, #19
 8000bc6:	4314      	orrs	r4, r2
 8000bc8:	4642      	mov	r2, r8
 8000bca:	3b7f      	subs	r3, #127	@ 0x7f
 8000bcc:	195b      	adds	r3, r3, r5
 8000bce:	2100      	movs	r1, #0
 8000bd0:	1c5d      	adds	r5, r3, #1
 8000bd2:	2a0a      	cmp	r2, #10
 8000bd4:	dc2e      	bgt.n	8000c34 <__aeabi_fmul+0xbc>
 8000bd6:	407e      	eors	r6, r7
 8000bd8:	4642      	mov	r2, r8
 8000bda:	2a02      	cmp	r2, #2
 8000bdc:	dc23      	bgt.n	8000c26 <__aeabi_fmul+0xae>
 8000bde:	3a01      	subs	r2, #1
 8000be0:	2a01      	cmp	r2, #1
 8000be2:	d900      	bls.n	8000be6 <__aeabi_fmul+0x6e>
 8000be4:	e0bd      	b.n	8000d62 <__aeabi_fmul+0x1ea>
 8000be6:	2902      	cmp	r1, #2
 8000be8:	d06e      	beq.n	8000cc8 <__aeabi_fmul+0x150>
 8000bea:	2901      	cmp	r1, #1
 8000bec:	d12c      	bne.n	8000c48 <__aeabi_fmul+0xd0>
 8000bee:	2000      	movs	r0, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	05c0      	lsls	r0, r0, #23
 8000bf4:	07f6      	lsls	r6, r6, #31
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	4330      	orrs	r0, r6
 8000bfa:	bce0      	pop	{r5, r6, r7}
 8000bfc:	46ba      	mov	sl, r7
 8000bfe:	46b1      	mov	r9, r6
 8000c00:	46a8      	mov	r8, r5
 8000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c04:	002b      	movs	r3, r5
 8000c06:	33ff      	adds	r3, #255	@ 0xff
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d065      	beq.n	8000cd8 <__aeabi_fmul+0x160>
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4641      	mov	r1, r8
 8000c10:	4311      	orrs	r1, r2
 8000c12:	0032      	movs	r2, r6
 8000c14:	3501      	adds	r5, #1
 8000c16:	4688      	mov	r8, r1
 8000c18:	407a      	eors	r2, r7
 8000c1a:	35ff      	adds	r5, #255	@ 0xff
 8000c1c:	290a      	cmp	r1, #10
 8000c1e:	dd00      	ble.n	8000c22 <__aeabi_fmul+0xaa>
 8000c20:	e0d8      	b.n	8000dd4 <__aeabi_fmul+0x25c>
 8000c22:	0016      	movs	r6, r2
 8000c24:	2103      	movs	r1, #3
 8000c26:	4640      	mov	r0, r8
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4082      	lsls	r2, r0
 8000c2c:	20a6      	movs	r0, #166	@ 0xa6
 8000c2e:	00c0      	lsls	r0, r0, #3
 8000c30:	4202      	tst	r2, r0
 8000c32:	d020      	beq.n	8000c76 <__aeabi_fmul+0xfe>
 8000c34:	4653      	mov	r3, sl
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d046      	beq.n	8000cc8 <__aeabi_fmul+0x150>
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fmul+0xc8>
 8000c3e:	e0bb      	b.n	8000db8 <__aeabi_fmul+0x240>
 8000c40:	4651      	mov	r1, sl
 8000c42:	464c      	mov	r4, r9
 8000c44:	2901      	cmp	r1, #1
 8000c46:	d0d2      	beq.n	8000bee <__aeabi_fmul+0x76>
 8000c48:	002b      	movs	r3, r5
 8000c4a:	337f      	adds	r3, #127	@ 0x7f
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dd70      	ble.n	8000d32 <__aeabi_fmul+0x1ba>
 8000c50:	0762      	lsls	r2, r4, #29
 8000c52:	d004      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c54:	220f      	movs	r2, #15
 8000c56:	4022      	ands	r2, r4
 8000c58:	2a04      	cmp	r2, #4
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c5c:	3404      	adds	r4, #4
 8000c5e:	0122      	lsls	r2, r4, #4
 8000c60:	d503      	bpl.n	8000c6a <__aeabi_fmul+0xf2>
 8000c62:	4b63      	ldr	r3, [pc, #396]	@ (8000df0 <__aeabi_fmul+0x278>)
 8000c64:	401c      	ands	r4, r3
 8000c66:	002b      	movs	r3, r5
 8000c68:	3380      	adds	r3, #128	@ 0x80
 8000c6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c6c:	dc2c      	bgt.n	8000cc8 <__aeabi_fmul+0x150>
 8000c6e:	01a2      	lsls	r2, r4, #6
 8000c70:	0a52      	lsrs	r2, r2, #9
 8000c72:	b2d8      	uxtb	r0, r3
 8000c74:	e7bd      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000c76:	2090      	movs	r0, #144	@ 0x90
 8000c78:	0080      	lsls	r0, r0, #2
 8000c7a:	4202      	tst	r2, r0
 8000c7c:	d127      	bne.n	8000cce <__aeabi_fmul+0x156>
 8000c7e:	38b9      	subs	r0, #185	@ 0xb9
 8000c80:	38ff      	subs	r0, #255	@ 0xff
 8000c82:	4210      	tst	r0, r2
 8000c84:	d06d      	beq.n	8000d62 <__aeabi_fmul+0x1ea>
 8000c86:	003e      	movs	r6, r7
 8000c88:	46a1      	mov	r9, r4
 8000c8a:	468a      	mov	sl, r1
 8000c8c:	e7d2      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d141      	bne.n	8000d16 <__aeabi_fmul+0x19e>
 8000c92:	2301      	movs	r3, #1
 8000c94:	4642      	mov	r2, r8
 8000c96:	431a      	orrs	r2, r3
 8000c98:	4690      	mov	r8, r2
 8000c9a:	002b      	movs	r3, r5
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	1c5d      	adds	r5, r3, #1
 8000ca2:	2a0a      	cmp	r2, #10
 8000ca4:	dd97      	ble.n	8000bd6 <__aeabi_fmul+0x5e>
 8000ca6:	e7c5      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d126      	bne.n	8000cfa <__aeabi_fmul+0x182>
 8000cac:	2304      	movs	r3, #4
 8000cae:	4698      	mov	r8, r3
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e77a      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d118      	bne.n	8000cee <__aeabi_fmul+0x176>
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	3b06      	subs	r3, #6
 8000cc2:	25ff      	movs	r5, #255	@ 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e772      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cc8:	20ff      	movs	r0, #255	@ 0xff
 8000cca:	2200      	movs	r2, #0
 8000ccc:	e791      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000cce:	2280      	movs	r2, #128	@ 0x80
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	20ff      	movs	r0, #255	@ 0xff
 8000cd4:	03d2      	lsls	r2, r2, #15
 8000cd6:	e78c      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000cd8:	4641      	mov	r1, r8
 8000cda:	2202      	movs	r2, #2
 8000cdc:	3501      	adds	r5, #1
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	35ff      	adds	r5, #255	@ 0xff
 8000ce4:	290a      	cmp	r1, #10
 8000ce6:	dca5      	bgt.n	8000c34 <__aeabi_fmul+0xbc>
 8000ce8:	2102      	movs	r1, #2
 8000cea:	407e      	eors	r6, r7
 8000cec:	e774      	b.n	8000bd8 <__aeabi_fmul+0x60>
 8000cee:	230c      	movs	r3, #12
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	3b09      	subs	r3, #9
 8000cf4:	25ff      	movs	r5, #255	@ 0xff
 8000cf6:	469a      	mov	sl, r3
 8000cf8:	e759      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fa80 	bl	8001200 <__clzsi2>
 8000d00:	464a      	mov	r2, r9
 8000d02:	1f43      	subs	r3, r0, #5
 8000d04:	2576      	movs	r5, #118	@ 0x76
 8000d06:	409a      	lsls	r2, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	426d      	negs	r5, r5
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	4698      	mov	r8, r3
 8000d10:	469a      	mov	sl, r3
 8000d12:	1a2d      	subs	r5, r5, r0
 8000d14:	e74b      	b.n	8000bae <__aeabi_fmul+0x36>
 8000d16:	0020      	movs	r0, r4
 8000d18:	f000 fa72 	bl	8001200 <__clzsi2>
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	1f43      	subs	r3, r0, #5
 8000d20:	409c      	lsls	r4, r3
 8000d22:	1a2b      	subs	r3, r5, r0
 8000d24:	3b76      	subs	r3, #118	@ 0x76
 8000d26:	2100      	movs	r1, #0
 8000d28:	1c5d      	adds	r5, r3, #1
 8000d2a:	2a0a      	cmp	r2, #10
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_fmul+0x1b8>
 8000d2e:	e752      	b.n	8000bd6 <__aeabi_fmul+0x5e>
 8000d30:	e780      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000d32:	2201      	movs	r2, #1
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b1b      	cmp	r3, #27
 8000d38:	dd00      	ble.n	8000d3c <__aeabi_fmul+0x1c4>
 8000d3a:	e758      	b.n	8000bee <__aeabi_fmul+0x76>
 8000d3c:	359e      	adds	r5, #158	@ 0x9e
 8000d3e:	0022      	movs	r2, r4
 8000d40:	40ac      	lsls	r4, r5
 8000d42:	40da      	lsrs	r2, r3
 8000d44:	1e63      	subs	r3, r4, #1
 8000d46:	419c      	sbcs	r4, r3
 8000d48:	4322      	orrs	r2, r4
 8000d4a:	0753      	lsls	r3, r2, #29
 8000d4c:	d004      	beq.n	8000d58 <__aeabi_fmul+0x1e0>
 8000d4e:	230f      	movs	r3, #15
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fmul+0x1e0>
 8000d56:	3204      	adds	r2, #4
 8000d58:	0153      	lsls	r3, r2, #5
 8000d5a:	d537      	bpl.n	8000dcc <__aeabi_fmul+0x254>
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	e747      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000d62:	0c21      	lsrs	r1, r4, #16
 8000d64:	464a      	mov	r2, r9
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	0c24      	lsrs	r4, r4, #16
 8000d6a:	0027      	movs	r7, r4
 8000d6c:	0c10      	lsrs	r0, r2, #16
 8000d6e:	0412      	lsls	r2, r2, #16
 8000d70:	0c12      	lsrs	r2, r2, #16
 8000d72:	4344      	muls	r4, r0
 8000d74:	4357      	muls	r7, r2
 8000d76:	4348      	muls	r0, r1
 8000d78:	4351      	muls	r1, r2
 8000d7a:	0c3a      	lsrs	r2, r7, #16
 8000d7c:	1909      	adds	r1, r1, r4
 8000d7e:	1852      	adds	r2, r2, r1
 8000d80:	4294      	cmp	r4, r2
 8000d82:	d903      	bls.n	8000d8c <__aeabi_fmul+0x214>
 8000d84:	2180      	movs	r1, #128	@ 0x80
 8000d86:	0249      	lsls	r1, r1, #9
 8000d88:	468c      	mov	ip, r1
 8000d8a:	4460      	add	r0, ip
 8000d8c:	043f      	lsls	r7, r7, #16
 8000d8e:	0411      	lsls	r1, r2, #16
 8000d90:	0c3f      	lsrs	r7, r7, #16
 8000d92:	19c9      	adds	r1, r1, r7
 8000d94:	018c      	lsls	r4, r1, #6
 8000d96:	1e67      	subs	r7, r4, #1
 8000d98:	41bc      	sbcs	r4, r7
 8000d9a:	0c12      	lsrs	r2, r2, #16
 8000d9c:	0e89      	lsrs	r1, r1, #26
 8000d9e:	1812      	adds	r2, r2, r0
 8000da0:	430c      	orrs	r4, r1
 8000da2:	0192      	lsls	r2, r2, #6
 8000da4:	4314      	orrs	r4, r2
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	d50e      	bpl.n	8000dc8 <__aeabi_fmul+0x250>
 8000daa:	2301      	movs	r3, #1
 8000dac:	0862      	lsrs	r2, r4, #1
 8000dae:	401c      	ands	r4, r3
 8000db0:	4314      	orrs	r4, r2
 8000db2:	e749      	b.n	8000c48 <__aeabi_fmul+0xd0>
 8000db4:	003e      	movs	r6, r7
 8000db6:	46a1      	mov	r9, r4
 8000db8:	2280      	movs	r2, #128	@ 0x80
 8000dba:	464b      	mov	r3, r9
 8000dbc:	03d2      	lsls	r2, r2, #15
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	0252      	lsls	r2, r2, #9
 8000dc2:	20ff      	movs	r0, #255	@ 0xff
 8000dc4:	0a52      	lsrs	r2, r2, #9
 8000dc6:	e714      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dc8:	001d      	movs	r5, r3
 8000dca:	e73d      	b.n	8000c48 <__aeabi_fmul+0xd0>
 8000dcc:	0192      	lsls	r2, r2, #6
 8000dce:	2000      	movs	r0, #0
 8000dd0:	0a52      	lsrs	r2, r2, #9
 8000dd2:	e70e      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dd4:	290f      	cmp	r1, #15
 8000dd6:	d1ed      	bne.n	8000db4 <__aeabi_fmul+0x23c>
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	464b      	mov	r3, r9
 8000ddc:	03d2      	lsls	r2, r2, #15
 8000dde:	4213      	tst	r3, r2
 8000de0:	d0ea      	beq.n	8000db8 <__aeabi_fmul+0x240>
 8000de2:	4214      	tst	r4, r2
 8000de4:	d1e8      	bne.n	8000db8 <__aeabi_fmul+0x240>
 8000de6:	003e      	movs	r6, r7
 8000de8:	20ff      	movs	r0, #255	@ 0xff
 8000dea:	4322      	orrs	r2, r4
 8000dec:	e701      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	f7ffffff 	.word	0xf7ffffff

08000df4 <__aeabi_fsub>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	4647      	mov	r7, r8
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	024e      	lsls	r6, r1, #9
 8000dfc:	0243      	lsls	r3, r0, #9
 8000dfe:	0045      	lsls	r5, r0, #1
 8000e00:	0a72      	lsrs	r2, r6, #9
 8000e02:	0fc4      	lsrs	r4, r0, #31
 8000e04:	0048      	lsls	r0, r1, #1
 8000e06:	b580      	push	{r7, lr}
 8000e08:	4694      	mov	ip, r2
 8000e0a:	0a5f      	lsrs	r7, r3, #9
 8000e0c:	0e2d      	lsrs	r5, r5, #24
 8000e0e:	099b      	lsrs	r3, r3, #6
 8000e10:	0e00      	lsrs	r0, r0, #24
 8000e12:	0fc9      	lsrs	r1, r1, #31
 8000e14:	09b6      	lsrs	r6, r6, #6
 8000e16:	28ff      	cmp	r0, #255	@ 0xff
 8000e18:	d024      	beq.n	8000e64 <__aeabi_fsub+0x70>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4051      	eors	r1, r2
 8000e1e:	1a2a      	subs	r2, r5, r0
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d00f      	beq.n	8000e44 <__aeabi_fsub+0x50>
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_fsub+0x36>
 8000e28:	e16a      	b.n	8001100 <__aeabi_fsub+0x30c>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d135      	bne.n	8000e9a <__aeabi_fsub+0xa6>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x40>
 8000e32:	e0a2      	b.n	8000f7a <__aeabi_fsub+0x186>
 8000e34:	1e51      	subs	r1, r2, #1
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x48>
 8000e3a:	e124      	b.n	8001086 <__aeabi_fsub+0x292>
 8000e3c:	2aff      	cmp	r2, #255	@ 0xff
 8000e3e:	d021      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e40:	000a      	movs	r2, r1
 8000e42:	e02f      	b.n	8000ea4 <__aeabi_fsub+0xb0>
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	dc00      	bgt.n	8000e4a <__aeabi_fsub+0x56>
 8000e48:	e167      	b.n	800111a <__aeabi_fsub+0x326>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d05e      	beq.n	8000f0c <__aeabi_fsub+0x118>
 8000e4e:	2dff      	cmp	r5, #255	@ 0xff
 8000e50:	d018      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	04c9      	lsls	r1, r1, #19
 8000e56:	430e      	orrs	r6, r1
 8000e58:	2a1b      	cmp	r2, #27
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_fsub+0x6a>
 8000e5c:	e076      	b.n	8000f4c <__aeabi_fsub+0x158>
 8000e5e:	002a      	movs	r2, r5
 8000e60:	3301      	adds	r3, #1
 8000e62:	e032      	b.n	8000eca <__aeabi_fsub+0xd6>
 8000e64:	002a      	movs	r2, r5
 8000e66:	3aff      	subs	r2, #255	@ 0xff
 8000e68:	4691      	mov	r9, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d042      	beq.n	8000ef4 <__aeabi_fsub+0x100>
 8000e6e:	428c      	cmp	r4, r1
 8000e70:	d055      	beq.n	8000f1e <__aeabi_fsub+0x12a>
 8000e72:	464a      	mov	r2, r9
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x86>
 8000e78:	e09c      	b.n	8000fb4 <__aeabi_fsub+0x1c0>
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_fsub+0x8c>
 8000e7e:	e077      	b.n	8000f70 <__aeabi_fsub+0x17c>
 8000e80:	000c      	movs	r4, r1
 8000e82:	0033      	movs	r3, r6
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x98>
 8000e8a:	e06e      	b.n	8000f6a <__aeabi_fsub+0x176>
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	03d2      	lsls	r2, r2, #15
 8000e90:	4313      	orrs	r3, r2
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	20ff      	movs	r0, #255	@ 0xff
 8000e96:	0a5b      	lsrs	r3, r3, #9
 8000e98:	e024      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000e9a:	2dff      	cmp	r5, #255	@ 0xff
 8000e9c:	d0f2      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	04c9      	lsls	r1, r1, #19
 8000ea2:	430e      	orrs	r6, r1
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2a1b      	cmp	r2, #27
 8000ea8:	dc08      	bgt.n	8000ebc <__aeabi_fsub+0xc8>
 8000eaa:	0031      	movs	r1, r6
 8000eac:	2020      	movs	r0, #32
 8000eae:	40d1      	lsrs	r1, r2
 8000eb0:	1a82      	subs	r2, r0, r2
 8000eb2:	4096      	lsls	r6, r2
 8000eb4:	0032      	movs	r2, r6
 8000eb6:	1e50      	subs	r0, r2, #1
 8000eb8:	4182      	sbcs	r2, r0
 8000eba:	4311      	orrs	r1, r2
 8000ebc:	1a5b      	subs	r3, r3, r1
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d460      	bmi.n	8000f84 <__aeabi_fsub+0x190>
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	002a      	movs	r2, r5
 8000ec6:	4019      	ands	r1, r3
 8000ec8:	d057      	beq.n	8000f7a <__aeabi_fsub+0x186>
 8000eca:	210f      	movs	r1, #15
 8000ecc:	4019      	ands	r1, r3
 8000ece:	2904      	cmp	r1, #4
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_fsub+0xe0>
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	0159      	lsls	r1, r3, #5
 8000ed6:	d550      	bpl.n	8000f7a <__aeabi_fsub+0x186>
 8000ed8:	1c50      	adds	r0, r2, #1
 8000eda:	2afe      	cmp	r2, #254	@ 0xfe
 8000edc:	d045      	beq.n	8000f6a <__aeabi_fsub+0x176>
 8000ede:	019b      	lsls	r3, r3, #6
 8000ee0:	b2c0      	uxtb	r0, r0
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	05c0      	lsls	r0, r0, #23
 8000ee6:	4318      	orrs	r0, r3
 8000ee8:	07e4      	lsls	r4, r4, #31
 8000eea:	4320      	orrs	r0, r4
 8000eec:	bcc0      	pop	{r6, r7}
 8000eee:	46b9      	mov	r9, r7
 8000ef0:	46b0      	mov	r8, r6
 8000ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4051      	eors	r1, r2
 8000ef8:	428c      	cmp	r4, r1
 8000efa:	d1ba      	bne.n	8000e72 <__aeabi_fsub+0x7e>
 8000efc:	464a      	mov	r2, r9
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d010      	beq.n	8000f24 <__aeabi_fsub+0x130>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x114>
 8000f06:	e098      	b.n	800103a <__aeabi_fsub+0x246>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e7bb      	b.n	8000e84 <__aeabi_fsub+0x90>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d034      	beq.n	8000f7a <__aeabi_fsub+0x186>
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	2a01      	cmp	r2, #1
 8000f14:	d06e      	beq.n	8000ff4 <__aeabi_fsub+0x200>
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d0b4      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	e79c      	b.n	8000e58 <__aeabi_fsub+0x64>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x130>
 8000f22:	e088      	b.n	8001036 <__aeabi_fsub+0x242>
 8000f24:	20fe      	movs	r0, #254	@ 0xfe
 8000f26:	1c6a      	adds	r2, r5, #1
 8000f28:	4210      	tst	r0, r2
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x13a>
 8000f2c:	e092      	b.n	8001054 <__aeabi_fsub+0x260>
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x140>
 8000f32:	e0a4      	b.n	800107e <__aeabi_fsub+0x28a>
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x146>
 8000f38:	e0cb      	b.n	80010d2 <__aeabi_fsub+0x2de>
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x14c>
 8000f3e:	e0ca      	b.n	80010d6 <__aeabi_fsub+0x2e2>
 8000f40:	2200      	movs	r2, #0
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	0a5b      	lsrs	r3, r3, #9
 8000f48:	b2d0      	uxtb	r0, r2
 8000f4a:	e7cb      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000f4c:	0031      	movs	r1, r6
 8000f4e:	2020      	movs	r0, #32
 8000f50:	40d1      	lsrs	r1, r2
 8000f52:	1a82      	subs	r2, r0, r2
 8000f54:	4096      	lsls	r6, r2
 8000f56:	0032      	movs	r2, r6
 8000f58:	1e50      	subs	r0, r2, #1
 8000f5a:	4182      	sbcs	r2, r0
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	189b      	adds	r3, r3, r2
 8000f60:	015a      	lsls	r2, r3, #5
 8000f62:	d5ae      	bpl.n	8000ec2 <__aeabi_fsub+0xce>
 8000f64:	1c6a      	adds	r2, r5, #1
 8000f66:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f68:	d14a      	bne.n	8001000 <__aeabi_fsub+0x20c>
 8000f6a:	20ff      	movs	r0, #255	@ 0xff
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e7b9      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000f70:	22ff      	movs	r2, #255	@ 0xff
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d14b      	bne.n	800100e <__aeabi_fsub+0x21a>
 8000f76:	000c      	movs	r4, r1
 8000f78:	0033      	movs	r3, r6
 8000f7a:	08db      	lsrs	r3, r3, #3
 8000f7c:	2aff      	cmp	r2, #255	@ 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x18e>
 8000f80:	e781      	b.n	8000e86 <__aeabi_fsub+0x92>
 8000f82:	e7df      	b.n	8000f44 <__aeabi_fsub+0x150>
 8000f84:	019f      	lsls	r7, r3, #6
 8000f86:	09bf      	lsrs	r7, r7, #6
 8000f88:	0038      	movs	r0, r7
 8000f8a:	f000 f939 	bl	8001200 <__clzsi2>
 8000f8e:	3805      	subs	r0, #5
 8000f90:	4087      	lsls	r7, r0
 8000f92:	4285      	cmp	r5, r0
 8000f94:	dc21      	bgt.n	8000fda <__aeabi_fsub+0x1e6>
 8000f96:	003b      	movs	r3, r7
 8000f98:	2120      	movs	r1, #32
 8000f9a:	1b42      	subs	r2, r0, r5
 8000f9c:	3201      	adds	r2, #1
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	4097      	lsls	r7, r2
 8000fa4:	1e7a      	subs	r2, r7, #1
 8000fa6:	4197      	sbcs	r7, r2
 8000fa8:	2200      	movs	r2, #0
 8000faa:	433b      	orrs	r3, r7
 8000fac:	0759      	lsls	r1, r3, #29
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x1be>
 8000fb0:	e78b      	b.n	8000eca <__aeabi_fsub+0xd6>
 8000fb2:	e78f      	b.n	8000ed4 <__aeabi_fsub+0xe0>
 8000fb4:	20fe      	movs	r0, #254	@ 0xfe
 8000fb6:	1c6a      	adds	r2, r5, #1
 8000fb8:	4210      	tst	r0, r2
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_fsub+0x1ee>
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d152      	bne.n	8001066 <__aeabi_fsub+0x272>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d07c      	beq.n	80010be <__aeabi_fsub+0x2ca>
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d0bb      	beq.n	8000f40 <__aeabi_fsub+0x14c>
 8000fc8:	1b9a      	subs	r2, r3, r6
 8000fca:	0150      	lsls	r0, r2, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x1dc>
 8000fce:	e08b      	b.n	80010e8 <__aeabi_fsub+0x2f4>
 8000fd0:	2401      	movs	r4, #1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	1af3      	subs	r3, r6, r3
 8000fd6:	400c      	ands	r4, r1
 8000fd8:	e7e8      	b.n	8000fac <__aeabi_fsub+0x1b8>
 8000fda:	4b56      	ldr	r3, [pc, #344]	@ (8001134 <__aeabi_fsub+0x340>)
 8000fdc:	1a2a      	subs	r2, r5, r0
 8000fde:	403b      	ands	r3, r7
 8000fe0:	e7e4      	b.n	8000fac <__aeabi_fsub+0x1b8>
 8000fe2:	1b9f      	subs	r7, r3, r6
 8000fe4:	017a      	lsls	r2, r7, #5
 8000fe6:	d446      	bmi.n	8001076 <__aeabi_fsub+0x282>
 8000fe8:	2f00      	cmp	r7, #0
 8000fea:	d1cd      	bne.n	8000f88 <__aeabi_fsub+0x194>
 8000fec:	2400      	movs	r4, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e777      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000ff4:	199b      	adds	r3, r3, r6
 8000ff6:	2501      	movs	r5, #1
 8000ff8:	3201      	adds	r2, #1
 8000ffa:	0159      	lsls	r1, r3, #5
 8000ffc:	d400      	bmi.n	8001000 <__aeabi_fsub+0x20c>
 8000ffe:	e760      	b.n	8000ec2 <__aeabi_fsub+0xce>
 8001000:	2101      	movs	r1, #1
 8001002:	484d      	ldr	r0, [pc, #308]	@ (8001138 <__aeabi_fsub+0x344>)
 8001004:	4019      	ands	r1, r3
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	4003      	ands	r3, r0
 800100a:	430b      	orrs	r3, r1
 800100c:	e7ce      	b.n	8000fac <__aeabi_fsub+0x1b8>
 800100e:	1e57      	subs	r7, r2, #1
 8001010:	2a01      	cmp	r2, #1
 8001012:	d05a      	beq.n	80010ca <__aeabi_fsub+0x2d6>
 8001014:	000c      	movs	r4, r1
 8001016:	2aff      	cmp	r2, #255	@ 0xff
 8001018:	d033      	beq.n	8001082 <__aeabi_fsub+0x28e>
 800101a:	2201      	movs	r2, #1
 800101c:	2f1b      	cmp	r7, #27
 800101e:	dc07      	bgt.n	8001030 <__aeabi_fsub+0x23c>
 8001020:	2120      	movs	r1, #32
 8001022:	1bc9      	subs	r1, r1, r7
 8001024:	001a      	movs	r2, r3
 8001026:	408b      	lsls	r3, r1
 8001028:	40fa      	lsrs	r2, r7
 800102a:	1e59      	subs	r1, r3, #1
 800102c:	418b      	sbcs	r3, r1
 800102e:	431a      	orrs	r2, r3
 8001030:	0005      	movs	r5, r0
 8001032:	1ab3      	subs	r3, r6, r2
 8001034:	e743      	b.n	8000ebe <__aeabi_fsub+0xca>
 8001036:	2d00      	cmp	r5, #0
 8001038:	d123      	bne.n	8001082 <__aeabi_fsub+0x28e>
 800103a:	22ff      	movs	r2, #255	@ 0xff
 800103c:	2b00      	cmp	r3, #0
 800103e:	d09b      	beq.n	8000f78 <__aeabi_fsub+0x184>
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	2a01      	cmp	r2, #1
 8001044:	d0d6      	beq.n	8000ff4 <__aeabi_fsub+0x200>
 8001046:	2aff      	cmp	r2, #255	@ 0xff
 8001048:	d01b      	beq.n	8001082 <__aeabi_fsub+0x28e>
 800104a:	291b      	cmp	r1, #27
 800104c:	dd2c      	ble.n	80010a8 <__aeabi_fsub+0x2b4>
 800104e:	0002      	movs	r2, r0
 8001050:	1c73      	adds	r3, r6, #1
 8001052:	e73a      	b.n	8000eca <__aeabi_fsub+0xd6>
 8001054:	2aff      	cmp	r2, #255	@ 0xff
 8001056:	d088      	beq.n	8000f6a <__aeabi_fsub+0x176>
 8001058:	199b      	adds	r3, r3, r6
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	0759      	lsls	r1, r3, #29
 800105e:	d000      	beq.n	8001062 <__aeabi_fsub+0x26e>
 8001060:	e733      	b.n	8000eca <__aeabi_fsub+0xd6>
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	e76e      	b.n	8000f44 <__aeabi_fsub+0x150>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d110      	bne.n	800108c <__aeabi_fsub+0x298>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d043      	beq.n	80010f6 <__aeabi_fsub+0x302>
 800106e:	2401      	movs	r4, #1
 8001070:	0033      	movs	r3, r6
 8001072:	400c      	ands	r4, r1
 8001074:	e706      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001076:	2401      	movs	r4, #1
 8001078:	1af7      	subs	r7, r6, r3
 800107a:	400c      	ands	r4, r1
 800107c:	e784      	b.n	8000f88 <__aeabi_fsub+0x194>
 800107e:	2b00      	cmp	r3, #0
 8001080:	d104      	bne.n	800108c <__aeabi_fsub+0x298>
 8001082:	0033      	movs	r3, r6
 8001084:	e6fe      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001086:	2501      	movs	r5, #1
 8001088:	1b9b      	subs	r3, r3, r6
 800108a:	e718      	b.n	8000ebe <__aeabi_fsub+0xca>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x29e>
 8001090:	e6f8      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	03d2      	lsls	r2, r2, #15
 8001096:	4297      	cmp	r7, r2
 8001098:	d304      	bcc.n	80010a4 <__aeabi_fsub+0x2b0>
 800109a:	4594      	cmp	ip, r2
 800109c:	d202      	bcs.n	80010a4 <__aeabi_fsub+0x2b0>
 800109e:	2401      	movs	r4, #1
 80010a0:	0033      	movs	r3, r6
 80010a2:	400c      	ands	r4, r1
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	e6f1      	b.n	8000e8c <__aeabi_fsub+0x98>
 80010a8:	001a      	movs	r2, r3
 80010aa:	2520      	movs	r5, #32
 80010ac:	40ca      	lsrs	r2, r1
 80010ae:	1a69      	subs	r1, r5, r1
 80010b0:	408b      	lsls	r3, r1
 80010b2:	1e59      	subs	r1, r3, #1
 80010b4:	418b      	sbcs	r3, r1
 80010b6:	4313      	orrs	r3, r2
 80010b8:	0005      	movs	r5, r0
 80010ba:	199b      	adds	r3, r3, r6
 80010bc:	e750      	b.n	8000f60 <__aeabi_fsub+0x16c>
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d094      	beq.n	8000fec <__aeabi_fsub+0x1f8>
 80010c2:	2401      	movs	r4, #1
 80010c4:	0033      	movs	r3, r6
 80010c6:	400c      	ands	r4, r1
 80010c8:	e73a      	b.n	8000f40 <__aeabi_fsub+0x14c>
 80010ca:	000c      	movs	r4, r1
 80010cc:	2501      	movs	r5, #1
 80010ce:	1af3      	subs	r3, r6, r3
 80010d0:	e6f5      	b.n	8000ebe <__aeabi_fsub+0xca>
 80010d2:	0033      	movs	r3, r6
 80010d4:	e734      	b.n	8000f40 <__aeabi_fsub+0x14c>
 80010d6:	199b      	adds	r3, r3, r6
 80010d8:	2200      	movs	r2, #0
 80010da:	0159      	lsls	r1, r3, #5
 80010dc:	d5c1      	bpl.n	8001062 <__aeabi_fsub+0x26e>
 80010de:	4a15      	ldr	r2, [pc, #84]	@ (8001134 <__aeabi_fsub+0x340>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	2201      	movs	r2, #1
 80010e6:	e72d      	b.n	8000f44 <__aeabi_fsub+0x150>
 80010e8:	2a00      	cmp	r2, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x2fa>
 80010ec:	e77e      	b.n	8000fec <__aeabi_fsub+0x1f8>
 80010ee:	0013      	movs	r3, r2
 80010f0:	2200      	movs	r2, #0
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	e726      	b.n	8000f44 <__aeabi_fsub+0x150>
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	2400      	movs	r4, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03db      	lsls	r3, r3, #15
 80010fe:	e6f1      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8001100:	2a00      	cmp	r2, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x312>
 8001104:	e756      	b.n	8000fb4 <__aeabi_fsub+0x1c0>
 8001106:	1b47      	subs	r7, r0, r5
 8001108:	003a      	movs	r2, r7
 800110a:	2d00      	cmp	r5, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x31c>
 800110e:	e730      	b.n	8000f72 <__aeabi_fsub+0x17e>
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	04d2      	lsls	r2, r2, #19
 8001114:	000c      	movs	r4, r1
 8001116:	4313      	orrs	r3, r2
 8001118:	e77f      	b.n	800101a <__aeabi_fsub+0x226>
 800111a:	2a00      	cmp	r2, #0
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x32c>
 800111e:	e701      	b.n	8000f24 <__aeabi_fsub+0x130>
 8001120:	1b41      	subs	r1, r0, r5
 8001122:	2d00      	cmp	r5, #0
 8001124:	d101      	bne.n	800112a <__aeabi_fsub+0x336>
 8001126:	000a      	movs	r2, r1
 8001128:	e788      	b.n	800103c <__aeabi_fsub+0x248>
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	04d2      	lsls	r2, r2, #19
 800112e:	4313      	orrs	r3, r2
 8001130:	e78b      	b.n	800104a <__aeabi_fsub+0x256>
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	fbffffff 	.word	0xfbffffff
 8001138:	7dffffff 	.word	0x7dffffff

0800113c <__aeabi_f2iz>:
 800113c:	0241      	lsls	r1, r0, #9
 800113e:	0042      	lsls	r2, r0, #1
 8001140:	0fc3      	lsrs	r3, r0, #31
 8001142:	0a49      	lsrs	r1, r1, #9
 8001144:	2000      	movs	r0, #0
 8001146:	0e12      	lsrs	r2, r2, #24
 8001148:	2a7e      	cmp	r2, #126	@ 0x7e
 800114a:	dd03      	ble.n	8001154 <__aeabi_f2iz+0x18>
 800114c:	2a9d      	cmp	r2, #157	@ 0x9d
 800114e:	dd02      	ble.n	8001156 <__aeabi_f2iz+0x1a>
 8001150:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <__aeabi_f2iz+0x3c>)
 8001152:	1898      	adds	r0, r3, r2
 8001154:	4770      	bx	lr
 8001156:	2080      	movs	r0, #128	@ 0x80
 8001158:	0400      	lsls	r0, r0, #16
 800115a:	4301      	orrs	r1, r0
 800115c:	2a95      	cmp	r2, #149	@ 0x95
 800115e:	dc07      	bgt.n	8001170 <__aeabi_f2iz+0x34>
 8001160:	2096      	movs	r0, #150	@ 0x96
 8001162:	1a82      	subs	r2, r0, r2
 8001164:	40d1      	lsrs	r1, r2
 8001166:	4248      	negs	r0, r1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f3      	bne.n	8001154 <__aeabi_f2iz+0x18>
 800116c:	0008      	movs	r0, r1
 800116e:	e7f1      	b.n	8001154 <__aeabi_f2iz+0x18>
 8001170:	3a96      	subs	r2, #150	@ 0x96
 8001172:	4091      	lsls	r1, r2
 8001174:	e7f7      	b.n	8001166 <__aeabi_f2iz+0x2a>
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	7fffffff 	.word	0x7fffffff

0800117c <__aeabi_ui2f>:
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	1e04      	subs	r4, r0, #0
 8001180:	d00e      	beq.n	80011a0 <__aeabi_ui2f+0x24>
 8001182:	f000 f83d 	bl	8001200 <__clzsi2>
 8001186:	239e      	movs	r3, #158	@ 0x9e
 8001188:	0001      	movs	r1, r0
 800118a:	1a1b      	subs	r3, r3, r0
 800118c:	2b96      	cmp	r3, #150	@ 0x96
 800118e:	dc0c      	bgt.n	80011aa <__aeabi_ui2f+0x2e>
 8001190:	2808      	cmp	r0, #8
 8001192:	d02f      	beq.n	80011f4 <__aeabi_ui2f+0x78>
 8001194:	3908      	subs	r1, #8
 8001196:	408c      	lsls	r4, r1
 8001198:	0264      	lsls	r4, r4, #9
 800119a:	0a64      	lsrs	r4, r4, #9
 800119c:	b2d8      	uxtb	r0, r3
 800119e:	e001      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011a0:	2000      	movs	r0, #0
 80011a2:	2400      	movs	r4, #0
 80011a4:	05c0      	lsls	r0, r0, #23
 80011a6:	4320      	orrs	r0, r4
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
 80011aa:	2b99      	cmp	r3, #153	@ 0x99
 80011ac:	dc16      	bgt.n	80011dc <__aeabi_ui2f+0x60>
 80011ae:	1f42      	subs	r2, r0, #5
 80011b0:	2805      	cmp	r0, #5
 80011b2:	d000      	beq.n	80011b6 <__aeabi_ui2f+0x3a>
 80011b4:	4094      	lsls	r4, r2
 80011b6:	0022      	movs	r2, r4
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <__aeabi_ui2f+0x80>)
 80011ba:	4002      	ands	r2, r0
 80011bc:	0765      	lsls	r5, r4, #29
 80011be:	d009      	beq.n	80011d4 <__aeabi_ui2f+0x58>
 80011c0:	250f      	movs	r5, #15
 80011c2:	402c      	ands	r4, r5
 80011c4:	2c04      	cmp	r4, #4
 80011c6:	d005      	beq.n	80011d4 <__aeabi_ui2f+0x58>
 80011c8:	3204      	adds	r2, #4
 80011ca:	0154      	lsls	r4, r2, #5
 80011cc:	d502      	bpl.n	80011d4 <__aeabi_ui2f+0x58>
 80011ce:	239f      	movs	r3, #159	@ 0x9f
 80011d0:	4002      	ands	r2, r0
 80011d2:	1a5b      	subs	r3, r3, r1
 80011d4:	0192      	lsls	r2, r2, #6
 80011d6:	0a54      	lsrs	r4, r2, #9
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	e7e3      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011dc:	0002      	movs	r2, r0
 80011de:	0020      	movs	r0, r4
 80011e0:	321b      	adds	r2, #27
 80011e2:	4090      	lsls	r0, r2
 80011e4:	0002      	movs	r2, r0
 80011e6:	1e50      	subs	r0, r2, #1
 80011e8:	4182      	sbcs	r2, r0
 80011ea:	2005      	movs	r0, #5
 80011ec:	1a40      	subs	r0, r0, r1
 80011ee:	40c4      	lsrs	r4, r0
 80011f0:	4314      	orrs	r4, r2
 80011f2:	e7e0      	b.n	80011b6 <__aeabi_ui2f+0x3a>
 80011f4:	0264      	lsls	r4, r4, #9
 80011f6:	2096      	movs	r0, #150	@ 0x96
 80011f8:	0a64      	lsrs	r4, r4, #9
 80011fa:	e7d3      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011fc:	fbffffff 	.word	0xfbffffff

08001200 <__clzsi2>:
 8001200:	211c      	movs	r1, #28
 8001202:	2301      	movs	r3, #1
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	4298      	cmp	r0, r3
 8001208:	d301      	bcc.n	800120e <__clzsi2+0xe>
 800120a:	0c00      	lsrs	r0, r0, #16
 800120c:	3910      	subs	r1, #16
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	4298      	cmp	r0, r3
 8001212:	d301      	bcc.n	8001218 <__clzsi2+0x18>
 8001214:	0a00      	lsrs	r0, r0, #8
 8001216:	3908      	subs	r1, #8
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	4298      	cmp	r0, r3
 800121c:	d301      	bcc.n	8001222 <__clzsi2+0x22>
 800121e:	0900      	lsrs	r0, r0, #4
 8001220:	3904      	subs	r1, #4
 8001222:	a202      	add	r2, pc, #8	@ (adr r2, 800122c <__clzsi2+0x2c>)
 8001224:	5c10      	ldrb	r0, [r2, r0]
 8001226:	1840      	adds	r0, r0, r1
 8001228:	4770      	bx	lr
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	02020304 	.word	0x02020304
 8001230:	01010101 	.word	0x01010101
	...

0800123c <HAL_I2C_MemTxCpltCallback>:
//{
//	i2c_rx_int = 1;
//}

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_I2C_MemTxCpltCallback+0x18>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	2000009d 	.word	0x2000009d

08001258 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_I2C_MemRxCpltCallback+0x18>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	2000009e 	.word	0x2000009e

08001274 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	// Do something
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <bno055_rx>:
	{
		bno055_readData(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
	}
}
uint8_t bno055_rx()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	if(i2c_rx_int)
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <bno055_rx+0x24>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <bno055_rx+0x18>
	{
		i2c_rx_int = 0;
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <bno055_rx+0x24>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		return 1;
 8001298:	2301      	movs	r3, #1
 800129a:	e002      	b.n	80012a2 <bno055_rx+0x1e>
	}
	return i2c_rx_int;
 800129c:	4b02      	ldr	r3, [pc, #8]	@ (80012a8 <bno055_rx+0x24>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000009e 	.word	0x2000009e

080012ac <bno055_queue_transaction>:
uint8_t bno055_queue_transaction()
{
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af02      	add	r7, sp, #8
	uint8_t status = HAL_OK;
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	uint8_t* buffer = (uint8_t*)(&holding_register_database[12]);
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <bno055_queue_transaction+0x88>)
 80012ba:	603b      	str	r3, [r7, #0]
	status = HAL_I2C_Mem_Read_IT(&hi2c1, BNO055_I2C_ADDR << 1, mem_read_map[read_index].reg,
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <bno055_queue_transaction+0x8c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	001a      	movs	r2, r3
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <bno055_queue_transaction+0x90>)
 80012c4:	0052      	lsls	r2, r2, #1
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	001d      	movs	r5, r3
			I2C_MEMADD_SIZE_8BIT, &buffer[6 * read_index], mem_read_map[read_index].reg_len);
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <bno055_queue_transaction+0x8c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	001a      	movs	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	189b      	adds	r3, r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	001a      	movs	r2, r3
	status = HAL_I2C_Mem_Read_IT(&hi2c1, BNO055_I2C_ADDR << 1, mem_read_map[read_index].reg,
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	189b      	adds	r3, r3, r2
			I2C_MEMADD_SIZE_8BIT, &buffer[6 * read_index], mem_read_map[read_index].reg_len);
 80012de:	4a16      	ldr	r2, [pc, #88]	@ (8001338 <bno055_queue_transaction+0x8c>)
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	4916      	ldr	r1, [pc, #88]	@ (800133c <bno055_queue_transaction+0x90>)
 80012e4:	0052      	lsls	r2, r2, #1
 80012e6:	188a      	adds	r2, r1, r2
 80012e8:	3201      	adds	r2, #1
 80012ea:	7812      	ldrb	r2, [r2, #0]
	status = HAL_I2C_Mem_Read_IT(&hi2c1, BNO055_I2C_ADDR << 1, mem_read_map[read_index].reg,
 80012ec:	1dfc      	adds	r4, r7, #7
 80012ee:	4814      	ldr	r0, [pc, #80]	@ (8001340 <bno055_queue_transaction+0x94>)
 80012f0:	9201      	str	r2, [sp, #4]
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	002a      	movs	r2, r5
 80012f8:	2150      	movs	r1, #80	@ 0x50
 80012fa:	f003 fdbb 	bl	8004e74 <HAL_I2C_Mem_Read_IT>
 80012fe:	0003      	movs	r3, r0
 8001300:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <bno055_queue_transaction+0x64>
	{
		return status;
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	e00d      	b.n	800132c <bno055_queue_transaction+0x80>
	}
	read_index = (read_index == NUM_VECTORS - 1)? 0 : read_index + 1;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <bno055_queue_transaction+0x8c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b06      	cmp	r3, #6
 8001316:	d004      	beq.n	8001322 <bno055_queue_transaction+0x76>
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <bno055_queue_transaction+0x8c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	e000      	b.n	8001324 <bno055_queue_transaction+0x78>
 8001322:	2200      	movs	r2, #0
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <bno055_queue_transaction+0x8c>)
 8001326:	701a      	strb	r2, [r3, #0]
	return status;
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bdb0      	pop	{r4, r5, r7, pc}
 8001334:	20000028 	.word	0x20000028
 8001338:	2000009c 	.word	0x2000009c
 800133c:	20000000 	.word	0x20000000
 8001340:	20000170 	.word	0x20000170

08001344 <init_lin_actuator>:

float pid_step(pid_t *pid, float measurement, float setpoint);


HAL_StatusTypeDef init_lin_actuator()
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status = HAL_OK;
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
	// Initialize the PWM signal
	TIM1->CCR1 = 0;
 8001350:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <init_lin_actuator+0x108>)
 8001352:	2200      	movs	r2, #0
 8001354:	635a      	str	r2, [r3, #52]	@ 0x34
	status = HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001356:	1dfc      	adds	r4, r7, #7
 8001358:	4b3d      	ldr	r3, [pc, #244]	@ (8001450 <init_lin_actuator+0x10c>)
 800135a:	2100      	movs	r1, #0
 800135c:	0018      	movs	r0, r3
 800135e:	f006 fd15 	bl	8007d8c <HAL_TIM_PWM_Start>
 8001362:	0003      	movs	r3, r0
 8001364:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <init_lin_actuator+0x30>
	{
		return status;
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	e066      	b.n	8001442 <init_lin_actuator+0xfe>
	}

	// Test communication by reading the Device ID
	tx_data[0] = (DEVICE_ID | READ_MASK);
 8001374:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <init_lin_actuator+0x110>)
 8001376:	2240      	movs	r2, #64	@ 0x40
 8001378:	701a      	strb	r2, [r3, #0]
	tx_data[1] = DUMMY_DATA;
 800137a:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <init_lin_actuator+0x110>)
 800137c:	2200      	movs	r2, #0
 800137e:	705a      	strb	r2, [r3, #1]
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001380:	1dfc      	adds	r4, r7, #7
 8001382:	4a35      	ldr	r2, [pc, #212]	@ (8001458 <init_lin_actuator+0x114>)
 8001384:	4933      	ldr	r1, [pc, #204]	@ (8001454 <init_lin_actuator+0x110>)
 8001386:	4835      	ldr	r0, [pc, #212]	@ (800145c <init_lin_actuator+0x118>)
 8001388:	2364      	movs	r3, #100	@ 0x64
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2302      	movs	r3, #2
 800138e:	f006 f899 	bl	80074c4 <HAL_SPI_TransmitReceive>
 8001392:	0003      	movs	r3, r0
 8001394:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <init_lin_actuator+0x60>
	{
		return status;
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	e04e      	b.n	8001442 <init_lin_actuator+0xfe>
	}

	if(rx_data[1] == DRV8244_ID)
 80013a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <init_lin_actuator+0x114>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	2b42      	cmp	r3, #66	@ 0x42
 80013aa:	d147      	bne.n	800143c <init_lin_actuator+0xf8>
	{
		// Unlock the Config Registers. Refer to section 8.6.1.5
		tx_data[0] = COMMAND; // WRITE MASK = 0
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <init_lin_actuator+0x110>)
 80013ae:	2208      	movs	r2, #8
 80013b0:	701a      	strb	r2, [r3, #0]
		tx_data[1] = REG_UNLOCK;
 80013b2:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <init_lin_actuator+0x110>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	705a      	strb	r2, [r3, #1]
		status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80013b8:	1dfc      	adds	r4, r7, #7
 80013ba:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <init_lin_actuator+0x114>)
 80013bc:	4925      	ldr	r1, [pc, #148]	@ (8001454 <init_lin_actuator+0x110>)
 80013be:	4827      	ldr	r0, [pc, #156]	@ (800145c <init_lin_actuator+0x118>)
 80013c0:	2364      	movs	r3, #100	@ 0x64
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	f006 f87d 	bl	80074c4 <HAL_SPI_TransmitReceive>
 80013ca:	0003      	movs	r3, r0
 80013cc:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <init_lin_actuator+0x98>
		{
			return status;
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	e032      	b.n	8001442 <init_lin_actuator+0xfe>
		}

		// Configure independent mode
		tx_data[0] = CONFIG_3;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <init_lin_actuator+0x110>)
 80013de:	220c      	movs	r2, #12
 80013e0:	701a      	strb	r2, [r3, #0]
		tx_data[1] = TOFF_40U | S_MODE_INDEPENDENT;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <init_lin_actuator+0x110>)
 80013e4:	2281      	movs	r2, #129	@ 0x81
 80013e6:	705a      	strb	r2, [r3, #1]
		status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80013e8:	1dfc      	adds	r4, r7, #7
 80013ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <init_lin_actuator+0x114>)
 80013ec:	4919      	ldr	r1, [pc, #100]	@ (8001454 <init_lin_actuator+0x110>)
 80013ee:	481b      	ldr	r0, [pc, #108]	@ (800145c <init_lin_actuator+0x118>)
 80013f0:	2364      	movs	r3, #100	@ 0x64
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2302      	movs	r3, #2
 80013f6:	f006 f865 	bl	80074c4 <HAL_SPI_TransmitReceive>
 80013fa:	0003      	movs	r3, r0
 80013fc:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <init_lin_actuator+0xc8>
		{
			return status;
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	e01a      	b.n	8001442 <init_lin_actuator+0xfe>
		}

		// Lock the Config Registers. Refer to section 8.6.1.5
		tx_data[0] = COMMAND; // WRITE MASK = 0
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <init_lin_actuator+0x110>)
 800140e:	2208      	movs	r2, #8
 8001410:	701a      	strb	r2, [r3, #0]
		tx_data[1] = REG_LOCK;
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <init_lin_actuator+0x110>)
 8001414:	2202      	movs	r2, #2
 8001416:	705a      	strb	r2, [r3, #1]
		status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001418:	1dfc      	adds	r4, r7, #7
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <init_lin_actuator+0x114>)
 800141c:	490d      	ldr	r1, [pc, #52]	@ (8001454 <init_lin_actuator+0x110>)
 800141e:	480f      	ldr	r0, [pc, #60]	@ (800145c <init_lin_actuator+0x118>)
 8001420:	2364      	movs	r3, #100	@ 0x64
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2302      	movs	r3, #2
 8001426:	f006 f84d 	bl	80074c4 <HAL_SPI_TransmitReceive>
 800142a:	0003      	movs	r3, r0
 800142c:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d004      	beq.n	8001440 <init_lin_actuator+0xfc>
		{
			return status;
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	e002      	b.n	8001442 <init_lin_actuator+0xfe>
		}
	}
	else
	{
		return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <init_lin_actuator+0xfe>
	}
	return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b003      	add	sp, #12
 8001448:	bd90      	pop	{r4, r7, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	40012c00 	.word	0x40012c00
 8001450:	20000228 	.word	0x20000228
 8001454:	200000a8 	.word	0x200000a8
 8001458:	200000ac 	.word	0x200000ac
 800145c:	200001c4 	.word	0x200001c4

08001460 <actuate_spi>:
		}
	}
}

void actuate_spi(uint8_t actuator, uint16_t current, uint16_t target)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	0004      	movs	r4, r0
 8001468:	0008      	movs	r0, r1
 800146a:	0011      	movs	r1, r2
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	1c22      	adds	r2, r4, #0
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	1c02      	adds	r2, r0, #0
 8001476:	801a      	strh	r2, [r3, #0]
 8001478:	1cbb      	adds	r3, r7, #2
 800147a:	1c0a      	adds	r2, r1, #0
 800147c:	801a      	strh	r2, [r3, #0]
	if(selected_actuator != actuator)
 800147e:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <actuate_spi+0xf4>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	1dfa      	adds	r2, r7, #7
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d048      	beq.n	800151c <actuate_spi+0xbc>
	{
		// Wait an amount of time for electrical safety
		if(drv_on)
 800148a:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <actuate_spi+0xf8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <actuate_spi+0x42>
		{
			// Shut off the PWM pin

			time_ms = HAL_GetTick();
 8001492:	f001 ffe9 	bl	8003468 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <actuate_spi+0xfc>)
 800149a:	601a      	str	r2, [r3, #0]
			drv_on = 0;
 800149c:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <actuate_spi+0xf8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GetTick() - time_ms >= ACTUATOR_TRANSIENT_DELAY)
 80014a2:	f001 ffe1 	bl	8003468 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <actuate_spi+0xfc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b95      	cmp	r3, #149	@ 0x95
 80014b0:	d94c      	bls.n	800154c <actuate_spi+0xec>
		{

			// Deactivate the old actuator
			HAL_GPIO_TogglePin(GPIOB, pin_map[selected_actuator]);
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <actuate_spi+0xf4>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <actuate_spi+0x100>)
 80014ba:	0052      	lsls	r2, r2, #1
 80014bc:	5ad3      	ldrh	r3, [r2, r3]
 80014be:	4a29      	ldr	r2, [pc, #164]	@ (8001564 <actuate_spi+0x104>)
 80014c0:	0019      	movs	r1, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	f003 fc15 	bl	8004cf2 <HAL_GPIO_TogglePin>

			// Activate the new actuator
			HAL_GPIO_TogglePin(GPIOB, pin_map[actuator]);
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b24      	ldr	r3, [pc, #144]	@ (8001560 <actuate_spi+0x100>)
 80014ce:	0052      	lsls	r2, r2, #1
 80014d0:	5ad3      	ldrh	r3, [r2, r3]
 80014d2:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <actuate_spi+0x104>)
 80014d4:	0019      	movs	r1, r3
 80014d6:	0010      	movs	r0, r2
 80014d8:	f003 fc0b 	bl	8004cf2 <HAL_GPIO_TogglePin>

			// Set the duty cycle
			TIM1->CCR1 = pid_step(&pid_constraints, current, target);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fe4b 	bl	800117c <__aeabi_ui2f>
 80014e6:	1c04      	adds	r4, r0, #0
 80014e8:	1cbb      	adds	r3, r7, #2
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff fe45 	bl	800117c <__aeabi_ui2f>
 80014f2:	1c02      	adds	r2, r0, #0
 80014f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <actuate_spi+0x108>)
 80014f6:	1c21      	adds	r1, r4, #0
 80014f8:	0018      	movs	r0, r3
 80014fa:	f000 f839 	bl	8001570 <pid_step>
 80014fe:	1c03      	adds	r3, r0, #0
 8001500:	4c1a      	ldr	r4, [pc, #104]	@ (800156c <actuate_spi+0x10c>)
 8001502:	1c18      	adds	r0, r3, #0
 8001504:	f7fe ffb0 	bl	8000468 <__aeabi_f2uiz>
 8001508:	0003      	movs	r3, r0
 800150a:	6363      	str	r3, [r4, #52]	@ 0x34

			drv_on = 1;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <actuate_spi+0xf8>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
			// Exit this code section by switching the actuator
			selected_actuator = actuator;
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <actuate_spi+0xf4>)
 8001514:	1dfa      	adds	r2, r7, #7
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	701a      	strb	r2, [r3, #0]
	{
		// Just set the duty cycle
		TIM1->CCR1 = pid_step(&pid_constraints, current, target);
	}

}
 800151a:	e017      	b.n	800154c <actuate_spi+0xec>
		TIM1->CCR1 = pid_step(&pid_constraints, current, target);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fe2b 	bl	800117c <__aeabi_ui2f>
 8001526:	1c04      	adds	r4, r0, #0
 8001528:	1cbb      	adds	r3, r7, #2
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fe25 	bl	800117c <__aeabi_ui2f>
 8001532:	1c02      	adds	r2, r0, #0
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <actuate_spi+0x108>)
 8001536:	1c21      	adds	r1, r4, #0
 8001538:	0018      	movs	r0, r3
 800153a:	f000 f819 	bl	8001570 <pid_step>
 800153e:	1c03      	adds	r3, r0, #0
 8001540:	4c0a      	ldr	r4, [pc, #40]	@ (800156c <actuate_spi+0x10c>)
 8001542:	1c18      	adds	r0, r3, #0
 8001544:	f7fe ff90 	bl	8000468 <__aeabi_f2uiz>
 8001548:	0003      	movs	r3, r0
 800154a:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800154c:	46c0      	nop			@ (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b003      	add	sp, #12
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	2000009f 	.word	0x2000009f
 8001558:	200000a0 	.word	0x200000a0
 800155c:	200000a4 	.word	0x200000a4
 8001560:	200003e8 	.word	0x200003e8
 8001564:	50000400 	.word	0x50000400
 8001568:	200003b0 	.word	0x200003b0
 800156c:	40012c00 	.word	0x40012c00

08001570 <pid_step>:

float pid_step(pid_t *pid, float measurement, float setpoint)
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
    float command;
    float command_sat;
    float deriv_filt;

    /* Error calculation */
    err = setpoint - measurement;
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fc38 	bl	8000df4 <__aeabi_fsub>
 8001584:	1c03      	adds	r3, r0, #0
 8001586:	61bb      	str	r3, [r7, #24]

    /* Integral term calculation - including anti-windup */
    pid->integral += pid->Ki*err*pid->T + pid->Kaw*(pid->command_sat_prev - pid->command_prev)*pid->T;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	69b9      	ldr	r1, [r7, #24]
 8001592:	1c18      	adds	r0, r3, #0
 8001594:	f7ff faf0 	bl	8000b78 <__aeabi_fmul>
 8001598:	1c03      	adds	r3, r0, #0
 800159a:	1c1a      	adds	r2, r3, #0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	1c19      	adds	r1, r3, #0
 80015a2:	1c10      	adds	r0, r2, #0
 80015a4:	f7ff fae8 	bl	8000b78 <__aeabi_fmul>
 80015a8:	1c03      	adds	r3, r0, #0
 80015aa:	1c1e      	adds	r6, r3, #0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68dd      	ldr	r5, [r3, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b8:	1c19      	adds	r1, r3, #0
 80015ba:	1c10      	adds	r0, r2, #0
 80015bc:	f7ff fc1a 	bl	8000df4 <__aeabi_fsub>
 80015c0:	1c03      	adds	r3, r0, #0
 80015c2:	1c19      	adds	r1, r3, #0
 80015c4:	1c28      	adds	r0, r5, #0
 80015c6:	f7ff fad7 	bl	8000b78 <__aeabi_fmul>
 80015ca:	1c03      	adds	r3, r0, #0
 80015cc:	1c1a      	adds	r2, r3, #0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	1c19      	adds	r1, r3, #0
 80015d4:	1c10      	adds	r0, r2, #0
 80015d6:	f7ff facf 	bl	8000b78 <__aeabi_fmul>
 80015da:	1c03      	adds	r3, r0, #0
 80015dc:	1c19      	adds	r1, r3, #0
 80015de:	1c30      	adds	r0, r6, #0
 80015e0:	f7fe ff5a 	bl	8000498 <__aeabi_fadd>
 80015e4:	1c03      	adds	r3, r0, #0
 80015e6:	1c19      	adds	r1, r3, #0
 80015e8:	1c20      	adds	r0, r4, #0
 80015ea:	f7fe ff55 	bl	8000498 <__aeabi_fadd>
 80015ee:	1c03      	adds	r3, r0, #0
 80015f0:	1c1a      	adds	r2, r3, #0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Derivative term calculation using filtered derivative method */
    deriv_filt = (err - pid->err_prev + pid->T_C*pid->deriv_prev)/(pid->T + pid->T_C);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	1c19      	adds	r1, r3, #0
 80015fc:	69b8      	ldr	r0, [r7, #24]
 80015fe:	f7ff fbf9 	bl	8000df4 <__aeabi_fsub>
 8001602:	1c03      	adds	r3, r0, #0
 8001604:	1c1c      	adds	r4, r3, #0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160e:	1c19      	adds	r1, r3, #0
 8001610:	1c10      	adds	r0, r2, #0
 8001612:	f7ff fab1 	bl	8000b78 <__aeabi_fmul>
 8001616:	1c03      	adds	r3, r0, #0
 8001618:	1c19      	adds	r1, r3, #0
 800161a:	1c20      	adds	r0, r4, #0
 800161c:	f7fe ff3c 	bl	8000498 <__aeabi_fadd>
 8001620:	1c03      	adds	r3, r0, #0
 8001622:	1c1c      	adds	r4, r3, #0
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	1c19      	adds	r1, r3, #0
 800162e:	1c10      	adds	r0, r2, #0
 8001630:	f7fe ff32 	bl	8000498 <__aeabi_fadd>
 8001634:	1c03      	adds	r3, r0, #0
 8001636:	1c19      	adds	r1, r3, #0
 8001638:	1c20      	adds	r0, r4, #0
 800163a:	f7ff f8b7 	bl	80007ac <__aeabi_fdiv>
 800163e:	1c03      	adds	r3, r0, #0
 8001640:	617b      	str	r3, [r7, #20]
    pid->err_prev = err;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->deriv_prev = deriv_filt;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Summing the 3 terms */
    command = pid->Kp*err + pid->integral + pid->Kd*deriv_filt;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	1c18      	adds	r0, r3, #0
 8001656:	f7ff fa8f 	bl	8000b78 <__aeabi_fmul>
 800165a:	1c03      	adds	r3, r0, #0
 800165c:	1c1a      	adds	r2, r3, #0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001662:	1c19      	adds	r1, r3, #0
 8001664:	1c10      	adds	r0, r2, #0
 8001666:	f7fe ff17 	bl	8000498 <__aeabi_fadd>
 800166a:	1c03      	adds	r3, r0, #0
 800166c:	1c1c      	adds	r4, r3, #0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	6979      	ldr	r1, [r7, #20]
 8001674:	1c18      	adds	r0, r3, #0
 8001676:	f7ff fa7f 	bl	8000b78 <__aeabi_fmul>
 800167a:	1c03      	adds	r3, r0, #0
 800167c:	1c19      	adds	r1, r3, #0
 800167e:	1c20      	adds	r0, r4, #0
 8001680:	f7fe ff0a 	bl	8000498 <__aeabi_fadd>
 8001684:	1c03      	adds	r3, r0, #0
 8001686:	613b      	str	r3, [r7, #16]

    /* Remember command at previous step */
    pid->command_prev = command;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Saturate command */
    if (command > pid->max)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	1c19      	adds	r1, r3, #0
 8001694:	6938      	ldr	r0, [r7, #16]
 8001696:	f7fe fed3 	bl	8000440 <__aeabi_fcmpgt>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d003      	beq.n	80016a6 <pid_step+0x136>
    {
        command_sat = pid->max;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	e00d      	b.n	80016c2 <pid_step+0x152>
    }
    else if (command < pid->min)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	1c19      	adds	r1, r3, #0
 80016ac:	6938      	ldr	r0, [r7, #16]
 80016ae:	f7fe feb3 	bl	8000418 <__aeabi_fcmplt>
 80016b2:	1e03      	subs	r3, r0, #0
 80016b4:	d003      	beq.n	80016be <pid_step+0x14e>
    {
        command_sat = pid->min;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	e001      	b.n	80016c2 <pid_step+0x152>
    }
    else
    {
        command_sat = command;
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	61fb      	str	r3, [r7, #28]
    }

    /* Apply rate limiter */
    if (command_sat > pid->command_sat_prev + pid->max_rate*pid->T)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	1c19      	adds	r1, r3, #0
 80016d0:	1c10      	adds	r0, r2, #0
 80016d2:	f7ff fa51 	bl	8000b78 <__aeabi_fmul>
 80016d6:	1c03      	adds	r3, r0, #0
 80016d8:	1c19      	adds	r1, r3, #0
 80016da:	1c20      	adds	r0, r4, #0
 80016dc:	f7fe fedc 	bl	8000498 <__aeabi_fadd>
 80016e0:	1c03      	adds	r3, r0, #0
 80016e2:	1c19      	adds	r1, r3, #0
 80016e4:	69f8      	ldr	r0, [r7, #28]
 80016e6:	f7fe feab 	bl	8000440 <__aeabi_fcmpgt>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d011      	beq.n	8001712 <pid_step+0x1a2>
    {
        command_sat = pid->command_sat_prev + pid->max_rate*pid->T;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a1a      	ldr	r2, [r3, #32]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	1c19      	adds	r1, r3, #0
 80016fc:	1c10      	adds	r0, r2, #0
 80016fe:	f7ff fa3b 	bl	8000b78 <__aeabi_fmul>
 8001702:	1c03      	adds	r3, r0, #0
 8001704:	1c19      	adds	r1, r3, #0
 8001706:	1c20      	adds	r0, r4, #0
 8001708:	f7fe fec6 	bl	8000498 <__aeabi_fadd>
 800170c:	1c03      	adds	r3, r0, #0
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	e026      	b.n	8001760 <pid_step+0x1f0>
    }
    else if (command_sat < pid->command_sat_prev - pid->max_rate*pid->T)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a1a      	ldr	r2, [r3, #32]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	1c19      	adds	r1, r3, #0
 8001720:	1c10      	adds	r0, r2, #0
 8001722:	f7ff fa29 	bl	8000b78 <__aeabi_fmul>
 8001726:	1c03      	adds	r3, r0, #0
 8001728:	1c19      	adds	r1, r3, #0
 800172a:	1c20      	adds	r0, r4, #0
 800172c:	f7ff fb62 	bl	8000df4 <__aeabi_fsub>
 8001730:	1c03      	adds	r3, r0, #0
 8001732:	1c19      	adds	r1, r3, #0
 8001734:	69f8      	ldr	r0, [r7, #28]
 8001736:	f7fe fe6f 	bl	8000418 <__aeabi_fcmplt>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d010      	beq.n	8001760 <pid_step+0x1f0>
    {
        command_sat = pid->command_sat_prev - pid->max_rate*pid->T;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a1a      	ldr	r2, [r3, #32]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	1c19      	adds	r1, r3, #0
 800174c:	1c10      	adds	r0, r2, #0
 800174e:	f7ff fa13 	bl	8000b78 <__aeabi_fmul>
 8001752:	1c03      	adds	r3, r0, #0
 8001754:	1c19      	adds	r1, r3, #0
 8001756:	1c20      	adds	r0, r4, #0
 8001758:	f7ff fb4c 	bl	8000df4 <__aeabi_fsub>
 800175c:	1c03      	adds	r3, r0, #0
 800175e:	61fb      	str	r3, [r7, #28]
    {
        /* No action */
    }

    /* Remember saturated command at previous step */
    pid->command_sat_prev = command_sat;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	631a      	str	r2, [r3, #48]	@ 0x30

    return command_sat;
 8001766:	69fb      	ldr	r3, [r7, #28]
}
 8001768:	1c18      	adds	r0, r3, #0
 800176a:	46bd      	mov	sp, r7
 800176c:	b009      	add	sp, #36	@ 0x24
 800176e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001770 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8001780:	401a      	ands	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60da      	str	r2, [r3, #12]
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	ffdfffff 	.word	0xffdfffff

08001798 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2204      	movs	r2, #4
 80017a8:	4393      	bics	r3, r2
 80017aa:	001a      	movs	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]
}
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b002      	add	sp, #8
 80017ba:	bd80      	pop	{r7, pc}

080017bc <LL_ADC_REG_SetSequencerChannels>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	0a5a      	lsrs	r2, r3, #9
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	019b      	lsls	r3, r3, #6
 80017e8:	401a      	ands	r2, r3
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	019b      	lsls	r3, r3, #6
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d101      	bne.n	80017f6 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b002      	add	sp, #8
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[3]), 8);
 8001808:	4904      	ldr	r1, [pc, #16]	@ (800181c <HAL_ADC_ConvCpltCallback+0x1c>)
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_ADC_ConvCpltCallback+0x20>)
 800180c:	2208      	movs	r2, #8
 800180e:	0018      	movs	r0, r3
 8001810:	f002 f946 	bl	8003aa0 <HAL_ADC_Start_DMA>

//	for(uint8_t i = 0; i < 9; i++)
//	{
//		holding_register_database[i + 3] = (uint16_t)raw_data[i];
//	}
}
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000016 	.word	0x20000016
 8001820:	200000b0 	.word	0x200000b0

08001824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182a:	f001 fdaa 	bl	8003382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182e:	f000 f94f 	bl	8001ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001832:	f000 fc59 	bl	80020e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001836:	f000 fc31 	bl	800209c <MX_DMA_Init>
  MX_ADC1_Init();
 800183a:	f000 f987 	bl	8001b4c <MX_ADC1_Init>
  MX_I2C1_Init();
 800183e:	f000 fa91 	bl	8001d64 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001842:	f000 facd 	bl	8001de0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001846:	f000 fb09 	bl	8001e5c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800184a:	f000 fbd7 	bl	8001ffc <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800184e:	f000 fbaf 	bl	8001fb0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 8001852:	4b95      	ldr	r3, [pc, #596]	@ (8001aa8 <main+0x284>)
 8001854:	2240      	movs	r2, #64	@ 0x40
 8001856:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 8001858:	4b93      	ldr	r3, [pc, #588]	@ (8001aa8 <main+0x284>)
 800185a:	2280      	movs	r2, #128	@ 0x80
 800185c:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 800185e:	4b92      	ldr	r3, [pc, #584]	@ (8001aa8 <main+0x284>)
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	0052      	lsls	r2, r2, #1
 8001864:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 8001866:	4b91      	ldr	r3, [pc, #580]	@ (8001aac <main+0x288>)
 8001868:	4a91      	ldr	r2, [pc, #580]	@ (8001ab0 <main+0x28c>)
 800186a:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 800186c:	4b8f      	ldr	r3, [pc, #572]	@ (8001aac <main+0x288>)
 800186e:	4a90      	ldr	r2, [pc, #576]	@ (8001ab0 <main+0x28c>)
 8001870:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 8001872:	4b8e      	ldr	r3, [pc, #568]	@ (8001aac <main+0x288>)
 8001874:	22a0      	movs	r2, #160	@ 0xa0
 8001876:	05d2      	lsls	r2, r2, #23
 8001878:	609a      	str	r2, [r3, #8]


  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 800187a:	4b8e      	ldr	r3, [pc, #568]	@ (8001ab4 <main+0x290>)
 800187c:	22fe      	movs	r2, #254	@ 0xfe
 800187e:	0592      	lsls	r2, r2, #22
 8001880:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8001882:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab4 <main+0x290>)
 8001884:	4a8c      	ldr	r2, [pc, #560]	@ (8001ab8 <main+0x294>)
 8001886:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 8001888:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab4 <main+0x290>)
 800188a:	4a8c      	ldr	r2, [pc, #560]	@ (8001abc <main+0x298>)
 800188c:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 800188e:	4b89      	ldr	r3, [pc, #548]	@ (8001ab4 <main+0x290>)
 8001890:	4a89      	ldr	r2, [pc, #548]	@ (8001ab8 <main+0x294>)
 8001892:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8001894:	4b87      	ldr	r3, [pc, #540]	@ (8001ab4 <main+0x290>)
 8001896:	22fe      	movs	r2, #254	@ 0xfe
 8001898:	0592      	lsls	r2, r2, #22
 800189a:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 800189c:	4b85      	ldr	r3, [pc, #532]	@ (8001ab4 <main+0x290>)
 800189e:	4a88      	ldr	r2, [pc, #544]	@ (8001ac0 <main+0x29c>)
 80018a0:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 80018a2:	4b84      	ldr	r3, [pc, #528]	@ (8001ab4 <main+0x290>)
 80018a4:	4a86      	ldr	r2, [pc, #536]	@ (8001ac0 <main+0x29c>)
 80018a6:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 80018a8:	4b82      	ldr	r3, [pc, #520]	@ (8001ab4 <main+0x290>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 80018ae:	4b81      	ldr	r3, [pc, #516]	@ (8001ab4 <main+0x290>)
 80018b0:	4a84      	ldr	r2, [pc, #528]	@ (8001ac4 <main+0x2a0>)
 80018b2:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 80018b4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab4 <main+0x290>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 80018ba:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab4 <main+0x290>)
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 80018c0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab4 <main+0x290>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 80018c6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab4 <main+0x290>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 80018cc:	4b79      	ldr	r3, [pc, #484]	@ (8001ab4 <main+0x290>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	635a      	str	r2, [r3, #52]	@ 0x34

//  bno055_setup();
//  bno055_setOperationModeNDOF();


  	if(init_lin_actuator() != HAL_OK)
 80018d2:	f7ff fd37 	bl	8001344 <init_lin_actuator>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d001      	beq.n	80018de <main+0xba>
  	{
  		Error_Handler();
 80018da:	f000 fccb 	bl	8002274 <Error_Handler>
   * target_actuator
   * 0: Actuator A
   * 1: Actuator B
   * 2: Actuator C
   */
  uint8_t target_actuator = 0;
 80018de:	1dfb      	adds	r3, r7, #7
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
  while (1)
  {

#ifndef TEST

	  if(modbus_rx())
 80018e4:	f001 f8c0 	bl	8002a68 <modbus_rx>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d054      	beq.n	8001996 <main+0x172>
	  {
		  int8_t status = 0;
 80018ec:	1dbb      	adds	r3, r7, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 fda2 	bl	800243c <get_rx_buffer>
 80018f8:	0003      	movs	r3, r0
 80018fa:	001a      	movs	r2, r3
 80018fc:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <main+0x2a4>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d11b      	bne.n	800193c <main+0x118>
		  {
			  switch(get_rx_buffer(1))
 8001904:	2001      	movs	r0, #1
 8001906:	f000 fd99 	bl	800243c <get_rx_buffer>
 800190a:	0003      	movs	r3, r0
 800190c:	2b03      	cmp	r3, #3
 800190e:	d002      	beq.n	8001916 <main+0xf2>
 8001910:	2b10      	cmp	r3, #16
 8001912:	d006      	beq.n	8001922 <main+0xfe>
 8001914:	e00b      	b.n	800192e <main+0x10a>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 8001916:	1dbc      	adds	r4, r7, #6
 8001918:	f000 fdc8 	bl	80024ac <return_holding_registers>
 800191c:	0003      	movs	r3, r0
 800191e:	7023      	strb	r3, [r4, #0]
					  break;
 8001920:	e034      	b.n	800198c <main+0x168>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 8001922:	1dbc      	adds	r4, r7, #6
 8001924:	f000 fee4 	bl	80026f0 <edit_multiple_registers>
 8001928:	0003      	movs	r3, r0
 800192a:	7023      	strb	r3, [r4, #0]
					  break;
 800192c:	e02e      	b.n	800198c <main+0x168>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 800192e:	1dbc      	adds	r4, r7, #6
 8001930:	2004      	movs	r0, #4
 8001932:	f000 ffcb 	bl	80028cc <modbus_exception>
 8001936:	0003      	movs	r3, r0
 8001938:	7023      	strb	r3, [r4, #0]
					  break;
 800193a:	e027      	b.n	800198c <main+0x168>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800193c:	2000      	movs	r0, #0
 800193e:	f000 fd7d 	bl	800243c <get_rx_buffer>
 8001942:	0003      	movs	r3, r0
 8001944:	2bff      	cmp	r3, #255	@ 0xff
 8001946:	d121      	bne.n	800198c <main+0x168>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001948:	2001      	movs	r0, #1
 800194a:	f000 fd77 	bl	800243c <get_rx_buffer>
 800194e:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8001950:	2b03      	cmp	r3, #3
 8001952:	d11b      	bne.n	800198c <main+0x168>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001954:	2002      	movs	r0, #2
 8001956:	f000 fd71 	bl	800243c <get_rx_buffer>
 800195a:	0003      	movs	r3, r0
 800195c:	021c      	lsls	r4, r3, #8
 800195e:	2003      	movs	r0, #3
 8001960:	f000 fd6c 	bl	800243c <get_rx_buffer>
 8001964:	0003      	movs	r3, r0
 8001966:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001968:	d110      	bne.n	800198c <main+0x168>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 800196a:	2004      	movs	r0, #4
 800196c:	f000 fd66 	bl	800243c <get_rx_buffer>
 8001970:	0003      	movs	r3, r0
 8001972:	021c      	lsls	r4, r3, #8
 8001974:	2005      	movs	r0, #5
 8001976:	f000 fd61 	bl	800243c <get_rx_buffer>
 800197a:	0003      	movs	r3, r0
 800197c:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800197e:	2b01      	cmp	r3, #1
 8001980:	d104      	bne.n	800198c <main+0x168>
		  {

			  status = return_holding_registers();
 8001982:	1dbc      	adds	r4, r7, #6
 8001984:	f000 fd92 	bl	80024ac <return_holding_registers>
 8001988:	0003      	movs	r3, r0
 800198a:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 800198c:	1dbc      	adds	r4, r7, #6
 800198e:	f001 f881 	bl	8002a94 <modbus_set_rx>
 8001992:	0003      	movs	r3, r0
 8001994:	7023      	strb	r3, [r4, #0]
			  //Error_Handler();
		  }
	  }

	  // Handle when an i2c Transaction has completed (i2c in interrupt mode)
	  if(bno055_rx())
 8001996:	f7ff fc75 	bl	8001284 <bno055_rx>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d001      	beq.n	80019a2 <main+0x17e>
	  {
		  bno055_queue_transaction();
 800199e:	f7ff fc85 	bl	80012ac <bno055_queue_transaction>
	  }
	  //bno055_get_all_values();

	  if(holding_register_database[9 + target_actuator] >= holding_register_database[56 + target_actuator] - ACTUATOR_TOLERANCE &&
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3309      	adds	r3, #9
 80019a8:	001a      	movs	r2, r3
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <main+0x2a4>)
 80019ac:	0052      	lsls	r2, r2, #1
 80019ae:	5ad3      	ldrh	r3, [r2, r3]
 80019b0:	0019      	movs	r1, r3
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3338      	adds	r3, #56	@ 0x38
 80019b8:	001a      	movs	r2, r3
 80019ba:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <main+0x2a4>)
 80019bc:	0052      	lsls	r2, r2, #1
 80019be:	5ad3      	ldrh	r3, [r2, r3]
 80019c0:	3b0f      	subs	r3, #15
 80019c2:	4299      	cmp	r1, r3
 80019c4:	db25      	blt.n	8001a12 <main+0x1ee>
		 holding_register_database[9 + target_actuator] <= holding_register_database[56 + target_actuator] + ACTUATOR_TOLERANCE)
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	3309      	adds	r3, #9
 80019cc:	001a      	movs	r2, r3
 80019ce:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac8 <main+0x2a4>)
 80019d0:	0052      	lsls	r2, r2, #1
 80019d2:	5ad3      	ldrh	r3, [r2, r3]
 80019d4:	0019      	movs	r1, r3
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3338      	adds	r3, #56	@ 0x38
 80019dc:	001a      	movs	r2, r3
 80019de:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <main+0x2a4>)
 80019e0:	0052      	lsls	r2, r2, #1
 80019e2:	5ad3      	ldrh	r3, [r2, r3]
 80019e4:	330f      	adds	r3, #15
	  if(holding_register_database[9 + target_actuator] >= holding_register_database[56 + target_actuator] - ACTUATOR_TOLERANCE &&
 80019e6:	4299      	cmp	r1, r3
 80019e8:	dc13      	bgt.n	8001a12 <main+0x1ee>
	  {
		  actuate_spi(target_actuator, holding_register_database[9 + target_actuator], holding_register_database[56 + target_actuator]);
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	3309      	adds	r3, #9
 80019f0:	001a      	movs	r2, r3
 80019f2:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <main+0x2a4>)
 80019f4:	0052      	lsls	r2, r2, #1
 80019f6:	5ad1      	ldrh	r1, [r2, r3]
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	3338      	adds	r3, #56	@ 0x38
 80019fe:	001a      	movs	r2, r3
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <main+0x2a4>)
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	5ad2      	ldrh	r2, [r2, r3]
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff fd28 	bl	8001460 <actuate_spi>
 8001a10:	e00b      	b.n	8001a2a <main+0x206>
	  }
	  else
	  {
		  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d004      	beq.n	8001a24 <main+0x200>
 8001a1a:	1dfb      	adds	r3, r7, #7
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	e000      	b.n	8001a26 <main+0x202>
 8001a24:	2200      	movs	r2, #0
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	701a      	strb	r2, [r3, #0]
	  uint8_t tx_data[2];
	  uint8_t rx_data[2];

	  // Independent Mode Test
	  // Unlock the SPI_IN register. Refer to section 8.6.1.5
		tx_data[0] = COMMAND; // WRITE MASK = 0
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	701a      	strb	r2, [r3, #0]
		tx_data[1] = SPI_IN_UNLOCK;
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2210      	movs	r2, #16
 8001a34:	705a      	strb	r2, [r3, #1]
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001a36:	003a      	movs	r2, r7
 8001a38:	1d39      	adds	r1, r7, #4
 8001a3a:	4824      	ldr	r0, [pc, #144]	@ (8001acc <main+0x2a8>)
 8001a3c:	2364      	movs	r3, #100	@ 0x64
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2302      	movs	r3, #2
 8001a42:	f005 fd3f 	bl	80074c4 <HAL_SPI_TransmitReceive>


		// Forwards
		tx_data[0] = SPI_IN; // WRITE MASK = 0
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2209      	movs	r2, #9
 8001a4a:	701a      	strb	r2, [r3, #0]
		tx_data[1] = S_EN_IN1;
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2202      	movs	r2, #2
 8001a50:	705a      	strb	r2, [r3, #1]
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001a52:	003a      	movs	r2, r7
 8001a54:	1d39      	adds	r1, r7, #4
 8001a56:	481d      	ldr	r0, [pc, #116]	@ (8001acc <main+0x2a8>)
 8001a58:	2364      	movs	r3, #100	@ 0x64
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f005 fd31 	bl	80074c4 <HAL_SPI_TransmitReceive>

		HAL_Delay(1000);
 8001a62:	23fa      	movs	r3, #250	@ 0xfa
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 fd08 	bl	800347c <HAL_Delay>

		// Turn off the DRV8244
		tx_data[0] = SPI_IN; // WRITE MASK = 0
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2209      	movs	r2, #9
 8001a70:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0;
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	705a      	strb	r2, [r3, #1]
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001a78:	003a      	movs	r2, r7
 8001a7a:	1d39      	adds	r1, r7, #4
 8001a7c:	4813      	ldr	r0, [pc, #76]	@ (8001acc <main+0x2a8>)
 8001a7e:	2364      	movs	r3, #100	@ 0x64
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2302      	movs	r3, #2
 8001a84:	f005 fd1e 	bl	80074c4 <HAL_SPI_TransmitReceive>

		// Lock the SPI_IN register. Refer to section 8.6.1.5
		tx_data[0] = COMMAND; // WRITE MASK = 0
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	701a      	strb	r2, [r3, #0]
		tx_data[1] = SPI_IN_LOCK;
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2208      	movs	r2, #8
 8001a92:	705a      	strb	r2, [r3, #1]
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001a94:	003a      	movs	r2, r7
 8001a96:	1d39      	adds	r1, r7, #4
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <main+0x2a8>)
 8001a9a:	2364      	movs	r3, #100	@ 0x64
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f005 fd10 	bl	80074c4 <HAL_SPI_TransmitReceive>
  {
 8001aa4:	e71e      	b.n	80018e4 <main+0xc0>
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	200003e8 	.word	0x200003e8
 8001aac:	200003f0 	.word	0x200003f0
 8001ab0:	50000800 	.word	0x50000800
 8001ab4:	200003b0 	.word	0x200003b0
 8001ab8:	3dcccccd 	.word	0x3dcccccd
 8001abc:	40a00000 	.word	0x40a00000
 8001ac0:	42c80000 	.word	0x42c80000
 8001ac4:	42200000 	.word	0x42200000
 8001ac8:	20000010 	.word	0x20000010
 8001acc:	200001c4 	.word	0x200001c4

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b08f      	sub	sp, #60	@ 0x3c
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	2418      	movs	r4, #24
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	0018      	movs	r0, r3
 8001adc:	2320      	movs	r3, #32
 8001ade:	001a      	movs	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f008 fd2b 	bl	800a53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	0018      	movs	r0, r3
 8001aea:	2314      	movs	r3, #20
 8001aec:	001a      	movs	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	f008 fd24 	bl	800a53c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	0252      	lsls	r2, r2, #9
 8001b00:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	0018      	movs	r0, r3
 8001b06:	f004 ff5d 	bl	80069c4 <HAL_RCC_OscConfig>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001b0e:	f000 fbb1 	bl	8002274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	22e0      	movs	r2, #224	@ 0xe0
 8001b2e:	01d2      	lsls	r2, r2, #7
 8001b30:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2100      	movs	r1, #0
 8001b36:	0018      	movs	r0, r3
 8001b38:	f005 f96a 	bl	8006e10 <HAL_RCC_ClockConfig>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b40:	f000 fb98 	bl	8002274 <Error_Handler>
  }
}
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b00f      	add	sp, #60	@ 0x3c
 8001b4a:	bd90      	pop	{r4, r7, pc}

08001b4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b52:	003b      	movs	r3, r7
 8001b54:	0018      	movs	r0, r3
 8001b56:	230c      	movs	r3, #12
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f008 fcee 	bl	800a53c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b60:	4b74      	ldr	r3, [pc, #464]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b62:	4a75      	ldr	r2, [pc, #468]	@ (8001d38 <MX_ADC1_Init+0x1ec>)
 8001b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001b66:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b68:	22c0      	movs	r2, #192	@ 0xc0
 8001b6a:	0612      	lsls	r2, r2, #24
 8001b6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b6e:	4b71      	ldr	r3, [pc, #452]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b74:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8001b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b7c:	2280      	movs	r2, #128	@ 0x80
 8001b7e:	0612      	lsls	r2, r2, #24
 8001b80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b82:	4b6c      	ldr	r3, [pc, #432]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b84:	2208      	movs	r2, #8
 8001b86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b88:	4b6a      	ldr	r3, [pc, #424]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001b8e:	4b69      	ldr	r3, [pc, #420]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b94:	4b67      	ldr	r3, [pc, #412]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 8001b9a:	4b66      	ldr	r3, [pc, #408]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ba0:	4b64      	ldr	r3, [pc, #400]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba8:	4b62      	ldr	r3, [pc, #392]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bae:	4b61      	ldr	r3, [pc, #388]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bb6:	222c      	movs	r2, #44	@ 0x2c
 8001bb8:	2101      	movs	r1, #1
 8001bba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bca:	223c      	movs	r2, #60	@ 0x3c
 8001bcc:	2100      	movs	r1, #0
 8001bce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001bd0:	4b58      	ldr	r3, [pc, #352]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bd6:	4b57      	ldr	r3, [pc, #348]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f001 fdbb 	bl	8003754 <HAL_ADC_Init>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d001      	beq.n	8001be6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001be2:	f000 fb47 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001be6:	003b      	movs	r3, r7
 8001be8:	4a54      	ldr	r2, [pc, #336]	@ (8001d3c <MX_ADC1_Init+0x1f0>)
 8001bea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001bec:	003b      	movs	r3, r7
 8001bee:	2201      	movs	r2, #1
 8001bf0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf2:	003a      	movs	r2, r7
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f001 ffef 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8001c02:	f000 fb37 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c06:	003b      	movs	r3, r7
 8001c08:	4a4d      	ldr	r2, [pc, #308]	@ (8001d40 <MX_ADC1_Init+0x1f4>)
 8001c0a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0c:	003a      	movs	r2, r7
 8001c0e:	4b49      	ldr	r3, [pc, #292]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f001 ffe2 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001c1c:	f000 fb2a 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001c20:	003b      	movs	r3, r7
 8001c22:	4a48      	ldr	r2, [pc, #288]	@ (8001d44 <MX_ADC1_Init+0x1f8>)
 8001c24:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c26:	003a      	movs	r2, r7
 8001c28:	4b42      	ldr	r3, [pc, #264]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f001 ffd5 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d001      	beq.n	8001c3a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001c36:	f000 fb1d 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001c3a:	003b      	movs	r3, r7
 8001c3c:	4a42      	ldr	r2, [pc, #264]	@ (8001d48 <MX_ADC1_Init+0x1fc>)
 8001c3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c40:	003a      	movs	r2, r7
 8001c42:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001c44:	0011      	movs	r1, r2
 8001c46:	0018      	movs	r0, r3
 8001c48:	f001 ffc8 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001c50:	f000 fb10 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001c54:	003b      	movs	r3, r7
 8001c56:	4a3d      	ldr	r2, [pc, #244]	@ (8001d4c <MX_ADC1_Init+0x200>)
 8001c58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5a:	003a      	movs	r2, r7
 8001c5c:	4b35      	ldr	r3, [pc, #212]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001c5e:	0011      	movs	r1, r2
 8001c60:	0018      	movs	r0, r3
 8001c62:	f001 ffbb 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001c6a:	f000 fb03 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001c6e:	003b      	movs	r3, r7
 8001c70:	4a37      	ldr	r2, [pc, #220]	@ (8001d50 <MX_ADC1_Init+0x204>)
 8001c72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c74:	003a      	movs	r2, r7
 8001c76:	4b2f      	ldr	r3, [pc, #188]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001c78:	0011      	movs	r1, r2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f001 ffae 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d001      	beq.n	8001c88 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001c84:	f000 faf6 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_20;
 8001c88:	003b      	movs	r3, r7
 8001c8a:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <MX_ADC1_Init+0x208>)
 8001c8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c8e:	003a      	movs	r2, r7
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001c92:	0011      	movs	r1, r2
 8001c94:	0018      	movs	r0, r3
 8001c96:	f001 ffa1 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001c9e:	f000 fae9 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_21;
 8001ca2:	003b      	movs	r3, r7
 8001ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8001d58 <MX_ADC1_Init+0x20c>)
 8001ca6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca8:	003a      	movs	r2, r7
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f001 ff94 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001cb8:	f000 fadc 	bl	8002274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_22;
 8001cbc:	003b      	movs	r3, r7
 8001cbe:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <MX_ADC1_Init+0x210>)
 8001cc0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc2:	003a      	movs	r2, r7
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <MX_ADC1_Init+0x1e8>)
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f001 ff87 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8001cd2:	f000 facf 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <MX_ADC1_Init+0x1ec>)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff fd48 	bl	8001770 <LL_ADC_REG_SetSequencerConfigurable>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001ce0:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <MX_ADC1_Init+0x1ec>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff fd57 	bl	8001798 <LL_ADC_REG_SetSequencerScanDirection>

  LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_5 | LL_ADC_CHANNEL_6 | LL_ADC_CHANNEL_7 |
 8001cea:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <MX_ADC1_Init+0x214>)
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <MX_ADC1_Init+0x1ec>)
 8001cee:	0011      	movs	r1, r2
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff fd63 	bl	80017bc <LL_ADC_REG_SetSequencerChannels>
		  LL_ADC_CHANNEL_17 | LL_ADC_CHANNEL_18 | LL_ADC_CHANNEL_20 | LL_ADC_CHANNEL_21 | LL_ADC_CHANNEL_22);
  uint32_t setup_adc_time = HAL_GetTick();
 8001cf6:	f001 fbb7 	bl	8003468 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	60fb      	str	r3, [r7, #12]

  while(LL_ADC_IsActiveFlag_CCRDY(ADC1) && HAL_GetTick() - setup_adc_time <= 100);
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <MX_ADC1_Init+0x1ec>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff fd68 	bl	80017d8 <LL_ADC_IsActiveFlag_CCRDY>
 8001d08:	1e03      	subs	r3, r0, #0
 8001d0a:	d006      	beq.n	8001d1a <MX_ADC1_Init+0x1ce>
 8001d0c:	f001 fbac 	bl	8003468 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d9f2      	bls.n	8001d00 <MX_ADC1_Init+0x1b4>
  if(!LL_ADC_IsActiveFlag_CCRDY(ADC1))
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <MX_ADC1_Init+0x1ec>)
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff fd5b 	bl	80017d8 <LL_ADC_IsActiveFlag_CCRDY>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d101      	bne.n	8001d2a <MX_ADC1_Init+0x1de>
  {
	  Error_Handler();
 8001d26:	f000 faa5 	bl	8002274 <Error_Handler>
  }
//  LL_ADC_SetCommonPathInternalCh(ADC1_COMMON, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
  /* USER CODE END ADC1_Init 2 */

}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	200000b0 	.word	0x200000b0
 8001d38:	40012400 	.word	0x40012400
 8001d3c:	14000020 	.word	0x14000020
 8001d40:	18000040 	.word	0x18000040
 8001d44:	1c000080 	.word	0x1c000080
 8001d48:	a4000200 	.word	0xa4000200
 8001d4c:	44020000 	.word	0x44020000
 8001d50:	48040000 	.word	0x48040000
 8001d54:	50100000 	.word	0x50100000
 8001d58:	54200000 	.word	0x54200000
 8001d5c:	58400000 	.word	0x58400000
 8001d60:	5c7600e0 	.word	0x5c7600e0

08001d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <MX_I2C1_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d74:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001da0:	0018      	movs	r0, r3
 8001da2:	f002 ffc1 	bl	8004d28 <HAL_I2C_Init>
 8001da6:	1e03      	subs	r3, r0, #0
 8001da8:	d001      	beq.n	8001dae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001daa:	f000 fa63 	bl	8002274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001db0:	2100      	movs	r1, #0
 8001db2:	0018      	movs	r0, r3
 8001db4:	f004 fd6e 	bl	8006894 <HAL_I2CEx_ConfigAnalogFilter>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dbc:	f000 fa5a 	bl	8002274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <MX_I2C1_Init+0x74>)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f004 fdb1 	bl	800692c <HAL_I2CEx_ConfigDigitalFilter>
 8001dca:	1e03      	subs	r3, r0, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dce:	f000 fa51 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000170 	.word	0x20000170
 8001ddc:	40005400 	.word	0x40005400

08001de0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001de6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e58 <MX_SPI1_Init+0x78>)
 8001de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001dec:	2282      	movs	r2, #130	@ 0x82
 8001dee:	0052      	lsls	r2, r2, #1
 8001df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001df2:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df8:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001dfa:	22e0      	movs	r2, #224	@ 0xe0
 8001dfc:	00d2      	lsls	r2, r2, #3
 8001dfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e06:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	0092      	lsls	r2, r2, #2
 8001e12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e2e:	2207      	movs	r2, #7
 8001e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e3e:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <MX_SPI1_Init+0x74>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f005 fa87 	bl	8007354 <HAL_SPI_Init>
 8001e46:	1e03      	subs	r3, r0, #0
 8001e48:	d001      	beq.n	8001e4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e4a:	f000 fa13 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200001c4 	.word	0x200001c4
 8001e58:	40013000 	.word	0x40013000

08001e5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b098      	sub	sp, #96	@ 0x60
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	2354      	movs	r3, #84	@ 0x54
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	0018      	movs	r0, r3
 8001e68:	230c      	movs	r3, #12
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f008 fb65 	bl	800a53c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e72:	2338      	movs	r3, #56	@ 0x38
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	0018      	movs	r0, r3
 8001e78:	231c      	movs	r3, #28
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f008 fb5d 	bl	800a53c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	0018      	movs	r0, r3
 8001e86:	2334      	movs	r3, #52	@ 0x34
 8001e88:	001a      	movs	r2, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	f008 fb56 	bl	800a53c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e90:	4b45      	ldr	r3, [pc, #276]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001e92:	4a46      	ldr	r2, [pc, #280]	@ (8001fac <MX_TIM1_Init+0x150>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001e96:	4b44      	ldr	r3, [pc, #272]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001e98:	2209      	movs	r2, #9
 8001e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b42      	ldr	r3, [pc, #264]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001ea2:	4b41      	ldr	r3, [pc, #260]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001ea4:	2263      	movs	r2, #99	@ 0x63
 8001ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eae:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001eb6:	2280      	movs	r2, #128	@ 0x80
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f005 ff0d 	bl	8007cdc <HAL_TIM_PWM_Init>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001ec6:	f000 f9d5 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eca:	2154      	movs	r1, #84	@ 0x54
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ede:	187a      	adds	r2, r7, r1
 8001ee0:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f006 fc73 	bl	80087d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001eee:	f000 f9c1 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef2:	2138      	movs	r1, #56	@ 0x38
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2260      	movs	r2, #96	@ 0x60
 8001ef8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1e:	1879      	adds	r1, r7, r1
 8001f20:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	0018      	movs	r0, r3
 8001f26:	f006 f80f 	bl	8007f48 <HAL_TIM_PWM_ConfigChannel>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001f2e:	f000 f9a1 	bl	8002274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2280      	movs	r2, #128	@ 0x80
 8001f54:	0192      	lsls	r2, r2, #6
 8001f56:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2280      	movs	r2, #128	@ 0x80
 8001f6e:	0492      	lsls	r2, r2, #18
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f84:	1d3a      	adds	r2, r7, #4
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001f88:	0011      	movs	r1, r2
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f006 fc88 	bl	80088a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001f94:	f000 f96e 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <MX_TIM1_Init+0x14c>)
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f001 f846 	bl	800302c <HAL_TIM_MspPostInit>

}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b018      	add	sp, #96	@ 0x60
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000228 	.word	0x20000228
 8001fac:	40012c00 	.word	0x40012c00

08001fb0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_TIM14_Init+0x40>)
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff4 <MX_TIM14_Init+0x44>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <MX_TIM14_Init+0x40>)
 8001fbc:	220b      	movs	r2, #11
 8001fbe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <MX_TIM14_Init+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <MX_TIM14_Init+0x40>)
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <MX_TIM14_Init+0x48>)
 8001fca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <MX_TIM14_Init+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <MX_TIM14_Init+0x40>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <MX_TIM14_Init+0x40>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f005 fe26 	bl	8007c2c <HAL_TIM_Base_Init>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001fe4:	f000 f946 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	20000274 	.word	0x20000274
 8001ff4:	40002000 	.word	0x40002000
 8001ff8:	0000ffff 	.word	0x0000ffff

08001ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002000:	4b24      	ldr	r3, [pc, #144]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002002:	4a25      	ldr	r2, [pc, #148]	@ (8002098 <MX_USART1_UART_Init+0x9c>)
 8002004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002008:	2296      	movs	r2, #150	@ 0x96
 800200a:	0192      	lsls	r2, r2, #6
 800200c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201a:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002034:	2200      	movs	r2, #0
 8002036:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002038:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 800203a:	2200      	movs	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002044:	4813      	ldr	r0, [pc, #76]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 8002046:	2300      	movs	r3, #0
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	f008 f86a 	bl	800a124 <HAL_RS485Ex_Init>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d001      	beq.n	8002058 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002054:	f000 f90e 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002058:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 800205a:	2100      	movs	r1, #0
 800205c:	0018      	movs	r0, r3
 800205e:	f008 f925 	bl	800a2ac <HAL_UARTEx_SetTxFifoThreshold>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d001      	beq.n	800206a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002066:	f000 f905 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 800206c:	2100      	movs	r1, #0
 800206e:	0018      	movs	r0, r3
 8002070:	f008 f95c 	bl	800a32c <HAL_UARTEx_SetRxFifoThreshold>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002078:	f000 f8fc 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <MX_USART1_UART_Init+0x98>)
 800207e:	0018      	movs	r0, r3
 8002080:	f008 f8da 	bl	800a238 <HAL_UARTEx_DisableFifoMode>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002088:	f000 f8f4 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	200002c0 	.word	0x200002c0
 8002098:	40013800 	.word	0x40013800

0800209c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <MX_DMA_Init+0x48>)
 80020a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020a6:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <MX_DMA_Init+0x48>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <MX_DMA_Init+0x48>)
 80020b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b2:	2201      	movs	r2, #1
 80020b4:	4013      	ands	r3, r2
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2009      	movs	r0, #9
 80020c0:	f002 f91a 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020c4:	2009      	movs	r0, #9
 80020c6:	f002 f92c 	bl	8004322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	200a      	movs	r0, #10
 80020d0:	f002 f912 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80020d4:	200a      	movs	r0, #10
 80020d6:	f002 f924 	bl	8004322 <HAL_NVIC_EnableIRQ>

}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	40021000 	.word	0x40021000

080020e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b08b      	sub	sp, #44	@ 0x2c
 80020ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ee:	2414      	movs	r4, #20
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	0018      	movs	r0, r3
 80020f4:	2314      	movs	r3, #20
 80020f6:	001a      	movs	r2, r3
 80020f8:	2100      	movs	r1, #0
 80020fa:	f008 fa1f 	bl	800a53c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002102:	4b57      	ldr	r3, [pc, #348]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002104:	2104      	movs	r1, #4
 8002106:	430a      	orrs	r2, r1
 8002108:	635a      	str	r2, [r3, #52]	@ 0x34
 800210a:	4b55      	ldr	r3, [pc, #340]	@ (8002260 <MX_GPIO_Init+0x178>)
 800210c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002116:	4b52      	ldr	r3, [pc, #328]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211a:	4b51      	ldr	r3, [pc, #324]	@ (8002260 <MX_GPIO_Init+0x178>)
 800211c:	2120      	movs	r1, #32
 800211e:	430a      	orrs	r2, r1
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34
 8002122:	4b4f      	ldr	r3, [pc, #316]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002126:	2220      	movs	r2, #32
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b4c      	ldr	r3, [pc, #304]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002132:	4b4b      	ldr	r3, [pc, #300]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34
 800213a:	4b49      	ldr	r3, [pc, #292]	@ (8002260 <MX_GPIO_Init+0x178>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213e:	2201      	movs	r2, #1
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b46      	ldr	r3, [pc, #280]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800214a:	4b45      	ldr	r3, [pc, #276]	@ (8002260 <MX_GPIO_Init+0x178>)
 800214c:	2102      	movs	r1, #2
 800214e:	430a      	orrs	r2, r1
 8002150:	635a      	str	r2, [r3, #52]	@ 0x34
 8002152:	4b43      	ldr	r3, [pc, #268]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002156:	2202      	movs	r2, #2
 8002158:	4013      	ands	r3, r2
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800215e:	4b40      	ldr	r3, [pc, #256]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002162:	4b3f      	ldr	r3, [pc, #252]	@ (8002260 <MX_GPIO_Init+0x178>)
 8002164:	2108      	movs	r1, #8
 8002166:	430a      	orrs	r2, r1
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
 800216a:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <MX_GPIO_Init+0x178>)
 800216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216e:	2208      	movs	r2, #8
 8002170:	4013      	ands	r3, r2
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	0059      	lsls	r1, r3, #1
 800217a:	23a0      	movs	r3, #160	@ 0xa0
 800217c:	05db      	lsls	r3, r3, #23
 800217e:	2200      	movs	r2, #0
 8002180:	0018      	movs	r0, r3
 8002182:	f002 fd99 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 8002186:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <MX_GPIO_Init+0x17c>)
 8002188:	2200      	movs	r2, #0
 800218a:	21c0      	movs	r1, #192	@ 0xc0
 800218c:	0018      	movs	r0, r3
 800218e:	f002 fd93 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8002192:	4b35      	ldr	r3, [pc, #212]	@ (8002268 <MX_GPIO_Init+0x180>)
 8002194:	2200      	movs	r2, #0
 8002196:	2101      	movs	r1, #1
 8002198:	0018      	movs	r0, r3
 800219a:	f002 fd8d 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	2280      	movs	r2, #128	@ 0x80
 80021a2:	0192      	lsls	r2, r2, #6
 80021a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	4a30      	ldr	r2, [pc, #192]	@ (800226c <MX_GPIO_Init+0x184>)
 80021aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 80021b2:	193b      	adds	r3, r7, r4
 80021b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002270 <MX_GPIO_Init+0x188>)
 80021b6:	0019      	movs	r1, r3
 80021b8:	0010      	movs	r0, r2
 80021ba:	f002 fc0b 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 80021be:	0021      	movs	r1, r4
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2280      	movs	r2, #128	@ 0x80
 80021c4:	01d2      	lsls	r2, r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c8:	000c      	movs	r4, r1
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 80021d6:	193b      	adds	r3, r7, r4
 80021d8:	4a25      	ldr	r2, [pc, #148]	@ (8002270 <MX_GPIO_Init+0x188>)
 80021da:	0019      	movs	r1, r3
 80021dc:	0010      	movs	r0, r2
 80021de:	f002 fbf9 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 80021e2:	0021      	movs	r1, r4
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	0052      	lsls	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	000c      	movs	r4, r1
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	2201      	movs	r2, #1
 80021f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 8002200:	193a      	adds	r2, r7, r4
 8002202:	23a0      	movs	r3, #160	@ 0xa0
 8002204:	05db      	lsls	r3, r3, #23
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f002 fbe3 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 800220e:	193b      	adds	r3, r7, r4
 8002210:	22c0      	movs	r2, #192	@ 0xc0
 8002212:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	193b      	adds	r3, r7, r4
 8002216:	2201      	movs	r2, #1
 8002218:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	193b      	adds	r3, r7, r4
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002226:	193b      	adds	r3, r7, r4
 8002228:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <MX_GPIO_Init+0x17c>)
 800222a:	0019      	movs	r1, r3
 800222c:	0010      	movs	r0, r2
 800222e:	f002 fbd1 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 8002232:	0021      	movs	r1, r4
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	187b      	adds	r3, r7, r1
 800223c:	2201      	movs	r2, #1
 800223e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	187b      	adds	r3, r7, r1
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 800224c:	187b      	adds	r3, r7, r1
 800224e:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <MX_GPIO_Init+0x180>)
 8002250:	0019      	movs	r1, r3
 8002252:	0010      	movs	r0, r2
 8002254:	f002 fbbe 	bl	80049d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b00b      	add	sp, #44	@ 0x2c
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	50000800 	.word	0x50000800
 8002268:	50000c00 	.word	0x50000c00
 800226c:	10110000 	.word	0x10110000
 8002270:	50000400 	.word	0x50000400

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	e7fd      	b.n	800227c <Error_Handler+0x8>

08002280 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	000a      	movs	r2, r1
 800228a:	1cbb      	adds	r3, r7, #2
 800228c:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a45      	ldr	r2, [pc, #276]	@ (80023a8 <HAL_UARTEx_RxEventCallback+0x128>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d000      	beq.n	800229a <HAL_UARTEx_RxEventCallback+0x1a>
 8002298:	e081      	b.n	800239e <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 800229a:	4b44      	ldr	r3, [pc, #272]	@ (80023ac <HAL_UARTEx_RxEventCallback+0x12c>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b43      	ldr	r3, [pc, #268]	@ (80023b0 <HAL_UARTEx_RxEventCallback+0x130>)
 80022a2:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 80022a4:	4b42      	ldr	r3, [pc, #264]	@ (80023b0 <HAL_UARTEx_RxEventCallback+0x130>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	001a      	movs	r2, r3
 80022ac:	1cbb      	adds	r3, r7, #2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	18d2      	adds	r2, r2, r3
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dd29      	ble.n	800230e <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 80022ba:	4b3d      	ldr	r3, [pc, #244]	@ (80023b0 <HAL_UARTEx_RxEventCallback+0x130>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	240e      	movs	r4, #14
 80022c2:	193b      	adds	r3, r7, r4
 80022c4:	2180      	movs	r1, #128	@ 0x80
 80022c6:	0049      	lsls	r1, r1, #1
 80022c8:	1a8a      	subs	r2, r1, r2
 80022ca:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 80022cc:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_UARTEx_RxEventCallback+0x130>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	001a      	movs	r2, r3
 80022d4:	4b37      	ldr	r3, [pc, #220]	@ (80023b4 <HAL_UARTEx_RxEventCallback+0x134>)
 80022d6:	18d0      	adds	r0, r2, r3
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	881a      	ldrh	r2, [r3, #0]
 80022dc:	4b36      	ldr	r3, [pc, #216]	@ (80023b8 <HAL_UARTEx_RxEventCallback+0x138>)
 80022de:	0019      	movs	r1, r3
 80022e0:	f008 f958 	bl	800a594 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 80022e4:	1cba      	adds	r2, r7, #2
 80022e6:	193b      	adds	r3, r7, r4
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <HAL_UARTEx_RxEventCallback+0x12c>)
 80022f2:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	881a      	ldrh	r2, [r3, #0]
 80022f8:	4b2f      	ldr	r3, [pc, #188]	@ (80023b8 <HAL_UARTEx_RxEventCallback+0x138>)
 80022fa:	18d1      	adds	r1, r2, r3
 80022fc:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <HAL_UARTEx_RxEventCallback+0x12c>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	001a      	movs	r2, r3
 8002304:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_UARTEx_RxEventCallback+0x134>)
 8002306:	0018      	movs	r0, r3
 8002308:	f008 f944 	bl	800a594 <memcpy>
 800230c:	e014      	b.n	8002338 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 800230e:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <HAL_UARTEx_RxEventCallback+0x130>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	001a      	movs	r2, r3
 8002316:	4b27      	ldr	r3, [pc, #156]	@ (80023b4 <HAL_UARTEx_RxEventCallback+0x134>)
 8002318:	18d0      	adds	r0, r2, r3
 800231a:	1cbb      	adds	r3, r7, #2
 800231c:	881a      	ldrh	r2, [r3, #0]
 800231e:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <HAL_UARTEx_RxEventCallback+0x138>)
 8002320:	0019      	movs	r1, r3
 8002322:	f008 f937 	bl	800a594 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <HAL_UARTEx_RxEventCallback+0x130>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29a      	uxth	r2, r3
 800232c:	1cbb      	adds	r3, r7, #2
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_UARTEx_RxEventCallback+0x12c>)
 8002336:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8002338:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <HAL_UARTEx_RxEventCallback+0x13c>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d027      	beq.n	8002392 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8002342:	f001 f891 	bl	8003468 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <HAL_UARTEx_RxEventCallback+0x140>)
 800234a:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 800234c:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <HAL_UARTEx_RxEventCallback+0x130>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29a      	uxth	r2, r3
 8002352:	4b1c      	ldr	r3, [pc, #112]	@ (80023c4 <HAL_UARTEx_RxEventCallback+0x144>)
 8002354:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8002356:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <HAL_UARTEx_RxEventCallback+0x13c>)
 8002358:	2200      	movs	r2, #0
 800235a:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 800235c:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <HAL_UARTEx_RxEventCallback+0x138>)
 800235e:	791b      	ldrb	r3, [r3, #4]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	4a15      	ldr	r2, [pc, #84]	@ (80023b8 <HAL_UARTEx_RxEventCallback+0x138>)
 8002364:	7952      	ldrb	r2, [r2, #5]
 8002366:	4313      	orrs	r3, r2
 8002368:	b29b      	uxth	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	b29b      	uxth	r3, r3
 800236e:	18db      	adds	r3, r3, r3
 8002370:	b29b      	uxth	r3, r3
 8002372:	3301      	adds	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	4910      	ldr	r1, [pc, #64]	@ (80023b8 <HAL_UARTEx_RxEventCallback+0x138>)
 8002378:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <HAL_UARTEx_RxEventCallback+0x148>)
 800237a:	0018      	movs	r0, r3
 800237c:	f008 f818 	bl	800a3b0 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_UARTEx_RxEventCallback+0x14c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_UARTEx_RxEventCallback+0x14c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2104      	movs	r1, #4
 800238c:	438a      	bics	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 8002390:	e005      	b.n	800239e <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_UARTEx_RxEventCallback+0x13c>)
 8002394:	2201      	movs	r2, #1
 8002396:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_UARTEx_RxEventCallback+0x150>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b005      	add	sp, #20
 80023a4:	bd90      	pop	{r4, r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	40013800 	.word	0x40013800
 80023ac:	20000714 	.word	0x20000714
 80023b0:	20000712 	.word	0x20000712
 80023b4:	20000410 	.word	0x20000410
 80023b8:	20000610 	.word	0x20000610
 80023bc:	20000072 	.word	0x20000072
 80023c0:	2000070c 	.word	0x2000070c
 80023c4:	20000710 	.word	0x20000710
 80023c8:	200002c0 	.word	0x200002c0
 80023cc:	20000354 	.word	0x20000354
 80023d0:	20000716 	.word	0x20000716

080023d4 <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <handle_chunk_miss+0x5c>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d120      	bne.n	8002426 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 80023e4:	f001 f840 	bl	8003468 <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <handle_chunk_miss+0x60>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b0a      	cmp	r3, #10
 80023f2:	d918      	bls.n	8002426 <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <handle_chunk_miss+0x5c>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <handle_chunk_miss+0x64>)
 80023fc:	0018      	movs	r0, r3
 80023fe:	f006 fb8f 	bl	8008b20 <HAL_UART_Abort_IT>
 8002402:	0003      	movs	r3, r0
 8002404:	001a      	movs	r2, r3
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b25b      	sxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8002414:	1dfc      	adds	r4, r7, #7
 8002416:	f000 fb3d 	bl	8002a94 <modbus_set_rx>
 800241a:	0003      	movs	r3, r0
 800241c:	7023      	strb	r3, [r4, #0]
			}
			return status;
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b25b      	sxtb	r3, r3
 8002424:	e000      	b.n	8002428 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b003      	add	sp, #12
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	20000072 	.word	0x20000072
 8002434:	2000070c 	.word	0x2000070c
 8002438:	200002c0 	.word	0x200002c0

0800243c <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	0002      	movs	r2, r0
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2bff      	cmp	r3, #255	@ 0xff
 800244e:	d023      	beq.n	8002498 <get_rx_buffer+0x5c>
	{
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <get_rx_buffer+0x68>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	001a      	movs	r2, r3
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	2bff      	cmp	r3, #255	@ 0xff
 8002460:	dd0b      	ble.n	800247a <get_rx_buffer+0x3e>
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <get_rx_buffer+0x68>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	001a      	movs	r2, r3
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	18d3      	adds	r3, r2, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	3bff      	subs	r3, #255	@ 0xff
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8002474:	4a0c      	ldr	r2, [pc, #48]	@ (80024a8 <get_rx_buffer+0x6c>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	e008      	b.n	800248c <get_rx_buffer+0x50>
				modbus_rx_buffer[start_index + index];
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <get_rx_buffer+0x68>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	001a      	movs	r2, r3
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	18d3      	adds	r3, r2, r3
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8002488:	4a07      	ldr	r2, [pc, #28]	@ (80024a8 <get_rx_buffer+0x6c>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	210f      	movs	r1, #15
 800248e:	187a      	adds	r2, r7, r1
 8002490:	7013      	strb	r3, [r2, #0]
		return value;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	e000      	b.n	800249a <get_rx_buffer+0x5e>
	}
	return 0xFF;
 8002498:	23ff      	movs	r3, #255	@ 0xff
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	20000710 	.word	0x20000710
 80024a8:	20000410 	.word	0x20000410

080024ac <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80024b2:	2002      	movs	r0, #2
 80024b4:	f7ff ffc2 	bl	800243c <get_rx_buffer>
 80024b8:	0003      	movs	r3, r0
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	b21c      	sxth	r4, r3
 80024be:	2003      	movs	r0, #3
 80024c0:	f7ff ffbc 	bl	800243c <get_rx_buffer>
 80024c4:	0003      	movs	r3, r0
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	4323      	orrs	r3, r4
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	230a      	movs	r3, #10
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80024d2:	2004      	movs	r0, #4
 80024d4:	f7ff ffb2 	bl	800243c <get_rx_buffer>
 80024d8:	0003      	movs	r3, r0
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	b21c      	sxth	r4, r3
 80024de:	2005      	movs	r0, #5
 80024e0:	f7ff ffac 	bl	800243c <get_rx_buffer>
 80024e4:	0003      	movs	r3, r0
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	4323      	orrs	r3, r4
 80024ea:	b21a      	sxth	r2, r3
 80024ec:	2108      	movs	r1, #8
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80024f2:	000a      	movs	r2, r1
 80024f4:	18bb      	adds	r3, r7, r2
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	2b7d      	cmp	r3, #125	@ 0x7d
 80024fa:	d803      	bhi.n	8002504 <return_holding_registers+0x58>
 80024fc:	18bb      	adds	r3, r7, r2
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <return_holding_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8002504:	2006      	movs	r0, #6
 8002506:	f000 f9e1 	bl	80028cc <modbus_exception>
 800250a:	0003      	movs	r3, r0
 800250c:	e0e1      	b.n	80026d2 <return_holding_registers+0x226>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800250e:	2308      	movs	r3, #8
 8002510:	18fa      	adds	r2, r7, r3
 8002512:	230a      	movs	r3, #10
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	18d3      	adds	r3, r2, r3
 800251c:	b29a      	uxth	r2, r3
 800251e:	1dbb      	adds	r3, r7, #6
 8002520:	3a01      	subs	r2, #1
 8002522:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8002524:	1dbb      	adds	r3, r7, #6
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	2b31      	cmp	r3, #49	@ 0x31
 800252a:	d904      	bls.n	8002536 <return_holding_registers+0x8a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800252c:	2005      	movs	r0, #5
 800252e:	f000 f9cd 	bl	80028cc <modbus_exception>
 8002532:	0003      	movs	r3, r0
 8002534:	e0cd      	b.n	80026d2 <return_holding_registers+0x226>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff ff80 	bl	800243c <get_rx_buffer>
 800253c:	0003      	movs	r3, r0
 800253e:	001a      	movs	r2, r3
 8002540:	4b66      	ldr	r3, [pc, #408]	@ (80026dc <return_holding_registers+0x230>)
 8002542:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8002544:	2001      	movs	r0, #1
 8002546:	f7ff ff79 	bl	800243c <get_rx_buffer>
 800254a:	0003      	movs	r3, r0
 800254c:	001a      	movs	r2, r3
 800254e:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <return_holding_registers+0x230>)
 8002550:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8002552:	2308      	movs	r3, #8
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	18db      	adds	r3, r3, r3
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b5f      	ldr	r3, [pc, #380]	@ (80026dc <return_holding_registers+0x230>)
 8002560:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8002562:	230f      	movs	r3, #15
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2203      	movs	r2, #3
 8002568:	701a      	strb	r2, [r3, #0]

	if(((first_register_address >= 3) && (first_register_address <= 11)) ||
 800256a:	220a      	movs	r2, #10
 800256c:	18bb      	adds	r3, r7, r2
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d903      	bls.n	800257c <return_holding_registers+0xd0>
 8002574:	18bb      	adds	r3, r7, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2b0b      	cmp	r3, #11
 800257a:	d907      	bls.n	800258c <return_holding_registers+0xe0>
 800257c:	1dbb      	adds	r3, r7, #6
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d90e      	bls.n	80025a2 <return_holding_registers+0xf6>
		((last_register_address >= 3) && (last_register_address <= 11)))
 8002584:	1dbb      	adds	r3, r7, #6
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	2b0b      	cmp	r3, #11
 800258a:	d80a      	bhi.n	80025a2 <return_holding_registers+0xf6>
	{
		// disable the ADC DMA Stream
		if(HAL_DMA_Abort(&hdma_adc1) != HAL_OK)
 800258c:	4b54      	ldr	r3, [pc, #336]	@ (80026e0 <return_holding_registers+0x234>)
 800258e:	0018      	movs	r0, r3
 8002590:	f001 fff6 	bl	8004580 <HAL_DMA_Abort>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d004      	beq.n	80025a2 <return_holding_registers+0xf6>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 8002598:	2007      	movs	r0, #7
 800259a:	f000 f997 	bl	80028cc <modbus_exception>
 800259e:	0003      	movs	r3, r0
 80025a0:	e097      	b.n	80026d2 <return_holding_registers+0x226>
		}
	}
	uint8_t prim = 0;
 80025a2:	230e      	movs	r3, #14
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
	if(((first_register_address >= 12) && (first_register_address <= 33)) ||
 80025aa:	220a      	movs	r2, #10
 80025ac:	18bb      	adds	r3, r7, r2
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	2b0b      	cmp	r3, #11
 80025b2:	d903      	bls.n	80025bc <return_holding_registers+0x110>
 80025b4:	18bb      	adds	r3, r7, r2
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	2b21      	cmp	r3, #33	@ 0x21
 80025ba:	d907      	bls.n	80025cc <return_holding_registers+0x120>
 80025bc:	1dbb      	adds	r3, r7, #6
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	2b0b      	cmp	r3, #11
 80025c2:	d90c      	bls.n	80025de <return_holding_registers+0x132>
		((last_register_address >= 12) && (last_register_address <= 33)))
 80025c4:	1dbb      	adds	r3, r7, #6
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2b21      	cmp	r3, #33	@ 0x21
 80025ca:	d808      	bhi.n	80025de <return_holding_registers+0x132>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025cc:	f3ef 8310 	mrs	r3, PRIMASK
 80025d0:	603b      	str	r3, [r7, #0]
  return(result);
 80025d2:	683a      	ldr	r2, [r7, #0]
	{
		// disable I2C interrupts
		prim = __get_PRIMASK();
 80025d4:	230e      	movs	r3, #14
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025da:	b672      	cpsid	i
}
 80025dc:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 80025de:	230d      	movs	r3, #13
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e02b      	b.n	8002640 <return_holding_registers+0x194>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 80025e8:	260a      	movs	r6, #10
 80025ea:	19bb      	adds	r3, r7, r6
 80025ec:	881a      	ldrh	r2, [r3, #0]
 80025ee:	240d      	movs	r4, #13
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	18d2      	adds	r2, r2, r3
 80025f6:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <return_holding_registers+0x238>)
 80025f8:	0052      	lsls	r2, r2, #1
 80025fa:	5ad3      	ldrh	r3, [r2, r3]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	b299      	uxth	r1, r3
 8002600:	250f      	movs	r5, #15
 8002602:	197b      	adds	r3, r7, r5
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	197a      	adds	r2, r7, r5
 8002608:	1c58      	adds	r0, r3, #1
 800260a:	7010      	strb	r0, [r2, #0]
 800260c:	001a      	movs	r2, r3
 800260e:	b2c9      	uxtb	r1, r1
 8002610:	4b32      	ldr	r3, [pc, #200]	@ (80026dc <return_holding_registers+0x230>)
 8002612:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8002614:	19bb      	adds	r3, r7, r6
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	193b      	adds	r3, r7, r4
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	18d2      	adds	r2, r2, r3
 800261e:	4b31      	ldr	r3, [pc, #196]	@ (80026e4 <return_holding_registers+0x238>)
 8002620:	0052      	lsls	r2, r2, #1
 8002622:	5ad1      	ldrh	r1, [r2, r3]
 8002624:	197b      	adds	r3, r7, r5
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	197a      	adds	r2, r7, r5
 800262a:	1c58      	adds	r0, r3, #1
 800262c:	7010      	strb	r0, [r2, #0]
 800262e:	001a      	movs	r2, r3
 8002630:	b2c9      	uxtb	r1, r1
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <return_holding_registers+0x230>)
 8002634:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8002636:	193b      	adds	r3, r7, r4
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	193b      	adds	r3, r7, r4
 800263c:	3201      	adds	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	230d      	movs	r3, #13
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	2208      	movs	r2, #8
 800264a:	18ba      	adds	r2, r7, r2
 800264c:	8812      	ldrh	r2, [r2, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d8ca      	bhi.n	80025e8 <return_holding_registers+0x13c>
	}

	if(((first_register_address >= 3) && (first_register_address <= 11)) ||
 8002652:	220a      	movs	r2, #10
 8002654:	18bb      	adds	r3, r7, r2
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d903      	bls.n	8002664 <return_holding_registers+0x1b8>
 800265c:	18bb      	adds	r3, r7, r2
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	2b0b      	cmp	r3, #11
 8002662:	d907      	bls.n	8002674 <return_holding_registers+0x1c8>
 8002664:	1dbb      	adds	r3, r7, #6
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d911      	bls.n	8002690 <return_holding_registers+0x1e4>
		((last_register_address >= 3) && (last_register_address <= 11)))
 800266c:	1dbb      	adds	r3, r7, #6
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	2b0b      	cmp	r3, #11
 8002672:	d80d      	bhi.n	8002690 <return_holding_registers+0x1e4>
	{
		// enable the ADC DMA Stream
		if(HAL_ADC_Start_DMA(&hadc1, adc_buffer, 9) != HAL_OK)
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <return_holding_registers+0x23c>)
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <return_holding_registers+0x240>)
 800267a:	2209      	movs	r2, #9
 800267c:	0018      	movs	r0, r3
 800267e:	f001 fa0f 	bl	8003aa0 <HAL_ADC_Start_DMA>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d004      	beq.n	8002690 <return_holding_registers+0x1e4>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 8002686:	2007      	movs	r0, #7
 8002688:	f000 f920 	bl	80028cc <modbus_exception>
 800268c:	0003      	movs	r3, r0
 800268e:	e020      	b.n	80026d2 <return_holding_registers+0x226>
		}
	}
	if(((first_register_address >= 12) && (first_register_address <= 33)) ||
 8002690:	220a      	movs	r2, #10
 8002692:	18bb      	adds	r3, r7, r2
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b0b      	cmp	r3, #11
 8002698:	d903      	bls.n	80026a2 <return_holding_registers+0x1f6>
 800269a:	18bb      	adds	r3, r7, r2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	2b21      	cmp	r3, #33	@ 0x21
 80026a0:	d907      	bls.n	80026b2 <return_holding_registers+0x206>
 80026a2:	1dbb      	adds	r3, r7, #6
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	2b0b      	cmp	r3, #11
 80026a8:	d90a      	bls.n	80026c0 <return_holding_registers+0x214>
		((last_register_address >= 12) && (last_register_address <= 33)))
 80026aa:	1dbb      	adds	r3, r7, #6
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	2b21      	cmp	r3, #33	@ 0x21
 80026b0:	d806      	bhi.n	80026c0 <return_holding_registers+0x214>
	{
		// enable I2C interrupts
		if(prim == 0)
 80026b2:	230e      	movs	r3, #14
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <return_holding_registers+0x214>
  __ASM volatile ("cpsie i" : : : "memory");
 80026bc:	b662      	cpsie	i
}
 80026be:	46c0      	nop			@ (mov r8, r8)
		{
			__enable_irq();
		}
	}

	return modbus_send(modbus_tx_buffer, index);
 80026c0:	230f      	movs	r3, #15
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <return_holding_registers+0x230>)
 80026c8:	0011      	movs	r1, r2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f994 	bl	80029f8 <modbus_send>
 80026d0:	0003      	movs	r3, r0
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b005      	add	sp, #20
 80026d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	20000510 	.word	0x20000510
 80026e0:	20000114 	.word	0x20000114
 80026e4:	20000010 	.word	0x20000010
 80026e8:	200003fc 	.word	0x200003fc
 80026ec:	200000b0 	.word	0x200000b0

080026f0 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80026f6:	2002      	movs	r0, #2
 80026f8:	f7ff fea0 	bl	800243c <get_rx_buffer>
 80026fc:	0003      	movs	r3, r0
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	b21c      	sxth	r4, r3
 8002702:	2003      	movs	r0, #3
 8002704:	f7ff fe9a 	bl	800243c <get_rx_buffer>
 8002708:	0003      	movs	r3, r0
 800270a:	b21b      	sxth	r3, r3
 800270c:	4323      	orrs	r3, r4
 800270e:	b21a      	sxth	r2, r3
 8002710:	230c      	movs	r3, #12
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8002716:	2004      	movs	r0, #4
 8002718:	f7ff fe90 	bl	800243c <get_rx_buffer>
 800271c:	0003      	movs	r3, r0
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b21c      	sxth	r4, r3
 8002722:	2005      	movs	r0, #5
 8002724:	f7ff fe8a 	bl	800243c <get_rx_buffer>
 8002728:	0003      	movs	r3, r0
 800272a:	b21b      	sxth	r3, r3
 800272c:	4323      	orrs	r3, r4
 800272e:	b21a      	sxth	r2, r3
 8002730:	210a      	movs	r1, #10
 8002732:	187b      	adds	r3, r7, r1
 8002734:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8002736:	000a      	movs	r2, r1
 8002738:	18bb      	adds	r3, r7, r2
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2b7d      	cmp	r3, #125	@ 0x7d
 800273e:	d803      	bhi.n	8002748 <edit_multiple_registers+0x58>
 8002740:	18bb      	adds	r3, r7, r2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8002748:	2006      	movs	r0, #6
 800274a:	f000 f8bf 	bl	80028cc <modbus_exception>
 800274e:	0003      	movs	r3, r0
 8002750:	e0b4      	b.n	80028bc <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8002752:	230a      	movs	r3, #10
 8002754:	18fa      	adds	r2, r7, r3
 8002756:	230c      	movs	r3, #12
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	18d3      	adds	r3, r2, r3
 8002760:	b29a      	uxth	r2, r3
 8002762:	2108      	movs	r1, #8
 8002764:	187b      	adds	r3, r7, r1
 8002766:	3a01      	subs	r2, #1
 8002768:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800276a:	187b      	adds	r3, r7, r1
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	2b31      	cmp	r3, #49	@ 0x31
 8002770:	d904      	bls.n	800277c <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8002772:	2005      	movs	r0, #5
 8002774:	f000 f8aa 	bl	80028cc <modbus_exception>
 8002778:	0003      	movs	r3, r0
 800277a:	e09f      	b.n	80028bc <edit_multiple_registers+0x1cc>
	}

	if((first_register_address >= 3) && (last_register_address <= 33))
 800277c:	230c      	movs	r3, #12
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d909      	bls.n	800279a <edit_multiple_registers+0xaa>
 8002786:	2308      	movs	r3, #8
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	2b21      	cmp	r3, #33	@ 0x21
 800278e:	d804      	bhi.n	800279a <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8002790:	2004      	movs	r0, #4
 8002792:	f000 f89b 	bl	80028cc <modbus_exception>
 8002796:	0003      	movs	r3, r0
 8002798:	e090      	b.n	80028bc <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 800279a:	2000      	movs	r0, #0
 800279c:	f7ff fe4e 	bl	800243c <get_rx_buffer>
 80027a0:	0003      	movs	r3, r0
 80027a2:	001a      	movs	r2, r3
 80027a4:	4b47      	ldr	r3, [pc, #284]	@ (80028c4 <edit_multiple_registers+0x1d4>)
 80027a6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7ff fe47 	bl	800243c <get_rx_buffer>
 80027ae:	0003      	movs	r3, r0
 80027b0:	001a      	movs	r2, r3
 80027b2:	4b44      	ldr	r3, [pc, #272]	@ (80028c4 <edit_multiple_registers+0x1d4>)
 80027b4:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 80027b6:	2002      	movs	r0, #2
 80027b8:	f7ff fe40 	bl	800243c <get_rx_buffer>
 80027bc:	0003      	movs	r3, r0
 80027be:	001a      	movs	r2, r3
 80027c0:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <edit_multiple_registers+0x1d4>)
 80027c2:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 80027c4:	2003      	movs	r0, #3
 80027c6:	f7ff fe39 	bl	800243c <get_rx_buffer>
 80027ca:	0003      	movs	r3, r0
 80027cc:	001a      	movs	r2, r3
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <edit_multiple_registers+0x1d4>)
 80027d0:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 80027d2:	2004      	movs	r0, #4
 80027d4:	f7ff fe32 	bl	800243c <get_rx_buffer>
 80027d8:	0003      	movs	r3, r0
 80027da:	001a      	movs	r2, r3
 80027dc:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <edit_multiple_registers+0x1d4>)
 80027de:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 80027e0:	2005      	movs	r0, #5
 80027e2:	f7ff fe2b 	bl	800243c <get_rx_buffer>
 80027e6:	0003      	movs	r3, r0
 80027e8:	001a      	movs	r2, r3
 80027ea:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <edit_multiple_registers+0x1d4>)
 80027ec:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	2206      	movs	r2, #6
 80027f2:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 80027f4:	230f      	movs	r3, #15
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e032      	b.n	8002864 <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 80027fe:	250f      	movs	r5, #15
 8002800:	197b      	adds	r3, r7, r5
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	18db      	adds	r3, r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3307      	adds	r3, #7
 800280a:	b2db      	uxtb	r3, r3
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff fe15 	bl	800243c <get_rx_buffer>
 8002812:	0003      	movs	r3, r0
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	b21c      	sxth	r4, r3
 8002818:	197b      	adds	r3, r7, r5
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3304      	adds	r3, #4
 800281e:	b2db      	uxtb	r3, r3
 8002820:	18db      	adds	r3, r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff fe09 	bl	800243c <get_rx_buffer>
 800282a:	0003      	movs	r3, r0
 800282c:	b21b      	sxth	r3, r3
 800282e:	4323      	orrs	r3, r4
 8002830:	b219      	sxth	r1, r3
 8002832:	200c      	movs	r0, #12
 8002834:	183b      	adds	r3, r7, r0
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	197b      	adds	r3, r7, r5
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	18d2      	adds	r2, r2, r3
 800283e:	b289      	uxth	r1, r1
 8002840:	4b21      	ldr	r3, [pc, #132]	@ (80028c8 <edit_multiple_registers+0x1d8>)
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8002846:	197b      	adds	r3, r7, r5
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b29a      	uxth	r2, r3
 800284c:	183b      	adds	r3, r7, r0
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	0018      	movs	r0, r3
 8002856:	f000 f863 	bl	8002920 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 800285a:	197b      	adds	r3, r7, r5
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	197b      	adds	r3, r7, r5
 8002860:	3201      	adds	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	230f      	movs	r3, #15
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	220a      	movs	r2, #10
 800286e:	18ba      	adds	r2, r7, r2
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d8c3      	bhi.n	80027fe <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f000 fe00 	bl	800347c <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 800287c:	1dbc      	adds	r4, r7, #6
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <edit_multiple_registers+0x1d4>)
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f000 f8b6 	bl	80029f8 <modbus_send>
 800288c:	0003      	movs	r3, r0
 800288e:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 8002890:	1dbb      	adds	r3, r7, #6
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b25b      	sxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10d      	bne.n	80028b6 <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 800289a:	230c      	movs	r3, #12
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d808      	bhi.n	80028b6 <edit_multiple_registers+0x1c6>
 80028a4:	2308      	movs	r3, #8
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 80028ae:	f000 f913 	bl	8002ad8 <modbus_change_baud_rate>
 80028b2:	0003      	movs	r3, r0
 80028b4:	e002      	b.n	80028bc <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b25b      	sxtb	r3, r3
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bdb0      	pop	{r4, r5, r7, pc}
 80028c4:	20000510 	.word	0x20000510
 80028c8:	20000010 	.word	0x20000010

080028cc <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	0002      	movs	r2, r0
 80028d4:	1dfb      	adds	r3, r7, #7
 80028d6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff fdaf 	bl	800243c <get_rx_buffer>
 80028de:	0003      	movs	r3, r0
 80028e0:	001a      	movs	r2, r3
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <modbus_exception+0x50>)
 80028e4:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7ff fda8 	bl	800243c <get_rx_buffer>
 80028ec:	0003      	movs	r3, r0
 80028ee:	001a      	movs	r2, r3
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	425b      	negs	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b08      	ldr	r3, [pc, #32]	@ (800291c <modbus_exception+0x50>)
 80028fa:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3b03      	subs	r3, #3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <modbus_exception+0x50>)
 8002906:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8002908:	4b04      	ldr	r3, [pc, #16]	@ (800291c <modbus_exception+0x50>)
 800290a:	2103      	movs	r1, #3
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f873 	bl	80029f8 <modbus_send>
 8002912:	0003      	movs	r3, r0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000510 	.word	0x20000510

08002920 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	0002      	movs	r2, r0
 8002928:	1dbb      	adds	r3, r7, #6
 800292a:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	2b24      	cmp	r3, #36	@ 0x24
 8002932:	dd00      	ble.n	8002936 <handle_range+0x16>
 8002934:	e058      	b.n	80029e8 <handle_range+0xc8>
 8002936:	2b22      	cmp	r3, #34	@ 0x22
 8002938:	da3f      	bge.n	80029ba <handle_range+0x9a>
 800293a:	2b02      	cmp	r3, #2
 800293c:	d02f      	beq.n	800299e <handle_range+0x7e>
 800293e:	dc53      	bgt.n	80029e8 <handle_range+0xc8>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <handle_range+0x2a>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d00e      	beq.n	8002966 <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 8002948:	e04e      	b.n	80029e8 <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 800294a:	1dbb      	adds	r3, r7, #6
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <handle_range+0xd0>)
 8002950:	0052      	lsls	r2, r2, #1
 8002952:	5ad3      	ldrh	r3, [r2, r3]
 8002954:	2bff      	cmp	r3, #255	@ 0xff
 8002956:	d940      	bls.n	80029da <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <handle_range+0xd0>)
 800295e:	0052      	lsls	r2, r2, #1
 8002960:	21ff      	movs	r1, #255	@ 0xff
 8002962:	52d1      	strh	r1, [r2, r3]
			break;
 8002964:	e039      	b.n	80029da <handle_range+0xba>
			if(holding_register_database[holding_register] < 2)
 8002966:	1dbb      	adds	r3, r7, #6
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <handle_range+0xd0>)
 800296c:	0052      	lsls	r2, r2, #1
 800296e:	5ad3      	ldrh	r3, [r2, r3]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d806      	bhi.n	8002982 <handle_range+0x62>
				holding_register_database[holding_register] = 2;
 8002974:	1dbb      	adds	r3, r7, #6
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <handle_range+0xd0>)
 800297a:	0052      	lsls	r2, r2, #1
 800297c:	2102      	movs	r1, #2
 800297e:	52d1      	strh	r1, [r2, r3]
			break;
 8002980:	e02d      	b.n	80029de <handle_range+0xbe>
			else if(holding_register_database[holding_register] > 9)
 8002982:	1dbb      	adds	r3, r7, #6
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <handle_range+0xd0>)
 8002988:	0052      	lsls	r2, r2, #1
 800298a:	5ad3      	ldrh	r3, [r2, r3]
 800298c:	2b09      	cmp	r3, #9
 800298e:	d926      	bls.n	80029de <handle_range+0xbe>
				holding_register_database[holding_register] = 9;
 8002990:	1dbb      	adds	r3, r7, #6
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <handle_range+0xd0>)
 8002996:	0052      	lsls	r2, r2, #1
 8002998:	2109      	movs	r1, #9
 800299a:	52d1      	strh	r1, [r2, r3]
			break;
 800299c:	e01f      	b.n	80029de <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 800299e:	1dbb      	adds	r3, r7, #6
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <handle_range+0xd0>)
 80029a4:	0052      	lsls	r2, r2, #1
 80029a6:	5ad3      	ldrh	r3, [r2, r3]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d91a      	bls.n	80029e2 <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 80029ac:	1dbb      	adds	r3, r7, #6
 80029ae:	881a      	ldrh	r2, [r3, #0]
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <handle_range+0xd0>)
 80029b2:	0052      	lsls	r2, r2, #1
 80029b4:	2101      	movs	r1, #1
 80029b6:	52d1      	strh	r1, [r2, r3]
			break;
 80029b8:	e013      	b.n	80029e2 <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 80029ba:	1dbb      	adds	r3, r7, #6
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <handle_range+0xd0>)
 80029c0:	0052      	lsls	r2, r2, #1
 80029c2:	5ad2      	ldrh	r2, [r2, r3]
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d30c      	bcc.n	80029e6 <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	881a      	ldrh	r2, [r3, #0]
 80029d0:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <handle_range+0xd0>)
 80029d2:	0052      	lsls	r2, r2, #1
 80029d4:	4907      	ldr	r1, [pc, #28]	@ (80029f4 <handle_range+0xd4>)
 80029d6:	52d1      	strh	r1, [r2, r3]
			break;
 80029d8:	e005      	b.n	80029e6 <handle_range+0xc6>
			break;
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	e004      	b.n	80029e8 <handle_range+0xc8>
			break;
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	e002      	b.n	80029e8 <handle_range+0xc8>
			break;
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	e000      	b.n	80029e8 <handle_range+0xc8>
			break;
 80029e6:	46c0      	nop			@ (mov r8, r8)
}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000010 	.word	0x20000010
 80029f4:	00000fff 	.word	0x00000fff

080029f8 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	000a      	movs	r2, r1
 8002a02:	1cfb      	adds	r3, r7, #3
 8002a04:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8002a06:	250e      	movs	r5, #14
 8002a08:	197c      	adds	r4, r7, r5
 8002a0a:	1cfb      	adds	r3, r7, #3
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <modbus_send+0x68>)
 8002a10:	0011      	movs	r1, r2
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f8c6 	bl	8002ba4 <crc_16>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8002a1c:	1cfb      	adds	r3, r7, #3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	197a      	adds	r2, r7, r5
 8002a22:	8812      	ldrh	r2, [r2, #0]
 8002a24:	b2d1      	uxtb	r1, r2
 8002a26:	4a0e      	ldr	r2, [pc, #56]	@ (8002a60 <modbus_send+0x68>)
 8002a28:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8002a2a:	197b      	adds	r3, r7, r5
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	1cfb      	adds	r3, r7, #3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2d1      	uxtb	r1, r2
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <modbus_send+0x68>)
 8002a3c:	54d1      	strb	r1, [r2, r3]

	return HAL_UART_Transmit(&huart1, modbus_tx_buffer, size + 2, 100);
 8002a3e:	1cfb      	adds	r3, r7, #3
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3302      	adds	r3, #2
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	4905      	ldr	r1, [pc, #20]	@ (8002a60 <modbus_send+0x68>)
 8002a4a:	4806      	ldr	r0, [pc, #24]	@ (8002a64 <modbus_send+0x6c>)
 8002a4c:	2364      	movs	r3, #100	@ 0x64
 8002a4e:	f005 ffc3 	bl	80089d8 <HAL_UART_Transmit>
 8002a52:	0003      	movs	r3, r0
 8002a54:	b25b      	sxtb	r3, r3
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b004      	add	sp, #16
 8002a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	20000510 	.word	0x20000510
 8002a64:	200002c0 	.word	0x200002c0

08002a68 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	if(rx_int)
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <modbus_rx+0x28>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <modbus_rx+0x18>
	{
		rx_int = 0;
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <modbus_rx+0x28>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
		return 1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e004      	b.n	8002a8a <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8002a80:	f7ff fca8 	bl	80023d4 <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 8002a84:	4b02      	ldr	r3, [pc, #8]	@ (8002a90 <modbus_rx+0x28>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000716 	.word	0x20000716

08002a94 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8002a9a:	490c      	ldr	r1, [pc, #48]	@ (8002acc <modbus_set_rx+0x38>)
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <modbus_set_rx+0x3c>)
 8002a9e:	2206      	movs	r2, #6
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f007 fc85 	bl	800a3b0 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <modbus_set_rx+0x40>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <modbus_set_rx+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2104      	movs	r1, #4
 8002aba:	438a      	bics	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]

	return status;
 8002abe:	1dfb      	adds	r3, r7, #7
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	b25b      	sxtb	r3, r3
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000610 	.word	0x20000610
 8002ad0:	200002c0 	.word	0x200002c0
 8002ad4:	20000354 	.word	0x20000354

08002ad8 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b98 <modbus_change_baud_rate+0xc0>)
 8002ae6:	885b      	ldrh	r3, [r3, #2]
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	d82c      	bhi.n	8002b46 <modbus_change_baud_rate+0x6e>
 8002aec:	009a      	lsls	r2, r3, #2
 8002aee:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <modbus_change_baud_rate+0xc4>)
 8002af0:	18d3      	adds	r3, r2, r3
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002af8:	2296      	movs	r2, #150	@ 0x96
 8002afa:	0152      	lsls	r2, r2, #5
 8002afc:	605a      	str	r2, [r3, #4]
			break;
 8002afe:	e033      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b02:	2296      	movs	r2, #150	@ 0x96
 8002b04:	0192      	lsls	r2, r2, #6
 8002b06:	605a      	str	r2, [r3, #4]
			break;
 8002b08:	e02e      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8002b0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b0c:	2296      	movs	r2, #150	@ 0x96
 8002b0e:	01d2      	lsls	r2, r2, #7
 8002b10:	605a      	str	r2, [r3, #4]
			break;
 8002b12:	e029      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8002b14:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b16:	2296      	movs	r2, #150	@ 0x96
 8002b18:	0212      	lsls	r2, r2, #8
 8002b1a:	605a      	str	r2, [r3, #4]
			break;
 8002b1c:	e024      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8002b1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b20:	22e1      	movs	r2, #225	@ 0xe1
 8002b22:	0212      	lsls	r2, r2, #8
 8002b24:	605a      	str	r2, [r3, #4]
			break;
 8002b26:	e01f      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b2a:	22e1      	movs	r2, #225	@ 0xe1
 8002b2c:	0252      	lsls	r2, r2, #9
 8002b2e:	605a      	str	r2, [r3, #4]
			break;
 8002b30:	e01a      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b34:	22fa      	movs	r2, #250	@ 0xfa
 8002b36:	0252      	lsls	r2, r2, #9
 8002b38:	605a      	str	r2, [r3, #4]
			break;
 8002b3a:	e015      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8002b3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b3e:	22fa      	movs	r2, #250	@ 0xfa
 8002b40:	0292      	lsls	r2, r2, #10
 8002b42:	605a      	str	r2, [r3, #4]
			break;
 8002b44:	e010      	b.n	8002b68 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 8002b46:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <modbus_change_baud_rate+0xc0>)
 8002b48:	2203      	movs	r2, #3
 8002b4a:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b4e:	2296      	movs	r2, #150	@ 0x96
 8002b50:	0192      	lsls	r2, r2, #6
 8002b52:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f006 fc84 	bl	8009464 <UART_SetConfig>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	001a      	movs	r2, r3
 8002b60:	1dfb      	adds	r3, r7, #7
 8002b62:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 8002b64:	2306      	movs	r3, #6
 8002b66:	e013      	b.n	8002b90 <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <modbus_change_baud_rate+0xc8>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f006 fc7a 	bl	8009464 <UART_SetConfig>
 8002b70:	0003      	movs	r3, r0
 8002b72:	001a      	movs	r2, r3
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 8002b78:	1dfb      	adds	r3, r7, #7
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <modbus_change_baud_rate+0xb2>
	{
		return status;
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	e002      	b.n	8002b90 <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b25b      	sxtb	r3, r3
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000010 	.word	0x20000010
 8002b9c:	0800a83c 	.word	0x0800a83c
 8002ba0:	200002c0 	.word	0x200002c0

08002ba4 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	000a      	movs	r2, r1
 8002bae:	1cfb      	adds	r3, r7, #3
 8002bb0:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8002bb2:	230f      	movs	r3, #15
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	22ff      	movs	r2, #255	@ 0xff
 8002bb8:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8002bba:	230e      	movs	r3, #14
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	22ff      	movs	r2, #255	@ 0xff
 8002bc0:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8002bc2:	e019      	b.n	8002bf8 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	781a      	ldrb	r2, [r3, #0]
 8002bcc:	200e      	movs	r0, #14
 8002bce:	183b      	adds	r3, r7, r0
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4053      	eors	r3, r2
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8002bd8:	4a13      	ldr	r2, [pc, #76]	@ (8002c28 <crc_16+0x84>)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	18d3      	adds	r3, r2, r3
 8002bde:	7819      	ldrb	r1, [r3, #0]
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	200f      	movs	r0, #15
 8002be4:	183a      	adds	r2, r7, r0
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	404a      	eors	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8002bec:	183b      	adds	r3, r7, r0
 8002bee:	490f      	ldr	r1, [pc, #60]	@ (8002c2c <crc_16+0x88>)
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	188a      	adds	r2, r1, r2
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
	while (size--)
 8002bf8:	1cfb      	adds	r3, r7, #3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	1cfa      	adds	r2, r7, #3
 8002bfe:	1e59      	subs	r1, r3, #1
 8002c00:	7011      	strb	r1, [r2, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1de      	bne.n	8002bc4 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8002c06:	230f      	movs	r3, #15
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	230e      	movs	r3, #14
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	b29b      	uxth	r3, r3
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	0800a63c 	.word	0x0800a63c
 8002c2c:	0800a73c 	.word	0x0800a73c

08002c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	4b0f      	ldr	r3, [pc, #60]	@ (8002c74 <HAL_MspInit+0x44>)
 8002c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <HAL_MspInit+0x44>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c42:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <HAL_MspInit+0x44>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_MspInit+0x44>)
 8002c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_MspInit+0x44>)
 8002c54:	2180      	movs	r1, #128	@ 0x80
 8002c56:	0549      	lsls	r1, r1, #21
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_MspInit+0x44>)
 8002c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	055b      	lsls	r3, r3, #21
 8002c64:	4013      	ands	r3, r2
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b093      	sub	sp, #76	@ 0x4c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	2334      	movs	r3, #52	@ 0x34
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	0018      	movs	r0, r3
 8002c86:	2314      	movs	r3, #20
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	f007 fc56 	bl	800a53c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c90:	2414      	movs	r4, #20
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	0018      	movs	r0, r3
 8002c96:	2320      	movs	r3, #32
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f007 fc4e 	bl	800a53c <memset>
  if(hadc->Instance==ADC1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a43      	ldr	r2, [pc, #268]	@ (8002db4 <HAL_ADC_MspInit+0x13c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d000      	beq.n	8002cac <HAL_ADC_MspInit+0x34>
 8002caa:	e07e      	b.n	8002daa <HAL_ADC_MspInit+0x132>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2220      	movs	r2, #32
 8002cb0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f004 fa4e 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002cc4:	f7ff fad6 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002cce:	2180      	movs	r1, #128	@ 0x80
 8002cd0:	0349      	lsls	r1, r1, #13
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cd6:	4b38      	ldr	r3, [pc, #224]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002cd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	035b      	lsls	r3, r3, #13
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce4:	4b34      	ldr	r3, [pc, #208]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce8:	4b33      	ldr	r3, [pc, #204]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	430a      	orrs	r2, r1
 8002cee:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cf0:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d00:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002d02:	2102      	movs	r1, #2
 8002d04:	430a      	orrs	r2, r1
 8002d06:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d08:	4b2b      	ldr	r3, [pc, #172]	@ (8002db8 <HAL_ADC_MspInit+0x140>)
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ADC1_IN18
    PB10     ------> ADC1_IN20
    PB11     ------> ADC1_IN21
    PB12     ------> ADC1_IN22
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d14:	2434      	movs	r4, #52	@ 0x34
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	22e0      	movs	r2, #224	@ 0xe0
 8002d1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	2203      	movs	r2, #3
 8002d20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	193a      	adds	r2, r7, r4
 8002d2a:	23a0      	movs	r3, #160	@ 0xa0
 8002d2c:	05db      	lsls	r3, r3, #23
 8002d2e:	0011      	movs	r1, r2
 8002d30:	0018      	movs	r0, r3
 8002d32:	f001 fe4f 	bl	80049d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	4a20      	ldr	r2, [pc, #128]	@ (8002dbc <HAL_ADC_MspInit+0x144>)
 8002d3a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	2203      	movs	r2, #3
 8002d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc0 <HAL_ADC_MspInit+0x148>)
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	0010      	movs	r0, r2
 8002d50:	f001 fe40 	bl	80049d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d56:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc8 <HAL_ADC_MspInit+0x150>)
 8002d58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d60:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d66:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d6e:	2280      	movs	r2, #128	@ 0x80
 8002d70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d72:	4b14      	ldr	r3, [pc, #80]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d74:	2280      	movs	r2, #128	@ 0x80
 8002d76:	0052      	lsls	r2, r2, #1
 8002d78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d7c:	2280      	movs	r2, #128	@ 0x80
 8002d7e:	00d2      	lsls	r2, r2, #3
 8002d80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d88:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002d90:	0018      	movs	r0, r3
 8002d92:	f001 fae3 	bl	800435c <HAL_DMA_Init>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8002d9a:	f7ff fa6b 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002da2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002da4:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <HAL_ADC_MspInit+0x14c>)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b013      	add	sp, #76	@ 0x4c
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	40012400 	.word	0x40012400
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	00001c03 	.word	0x00001c03
 8002dc0:	50000400 	.word	0x50000400
 8002dc4:	20000114 	.word	0x20000114
 8002dc8:	4002001c 	.word	0x4002001c

08002dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b093      	sub	sp, #76	@ 0x4c
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	2334      	movs	r3, #52	@ 0x34
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	0018      	movs	r0, r3
 8002dda:	2314      	movs	r3, #20
 8002ddc:	001a      	movs	r2, r3
 8002dde:	2100      	movs	r1, #0
 8002de0:	f007 fbac 	bl	800a53c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de4:	2414      	movs	r4, #20
 8002de6:	193b      	adds	r3, r7, r4
 8002de8:	0018      	movs	r0, r3
 8002dea:	2320      	movs	r3, #32
 8002dec:	001a      	movs	r2, r3
 8002dee:	2100      	movs	r1, #0
 8002df0:	f007 fba4 	bl	800a53c <memset>
  if(hi2c->Instance==I2C1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a27      	ldr	r2, [pc, #156]	@ (8002e98 <HAL_I2C_MspInit+0xcc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d147      	bne.n	8002e8e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	2202      	movs	r2, #2
 8002e02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e04:	193b      	adds	r3, r7, r4
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f004 f9a5 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e16:	f7ff fa2d 	bl	8002274 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <HAL_I2C_MspInit+0xd0>)
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <HAL_I2C_MspInit+0xd0>)
 8002e20:	2101      	movs	r1, #1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e26:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <HAL_I2C_MspInit+0xd0>)
 8002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e32:	2134      	movs	r1, #52	@ 0x34
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	22c0      	movs	r2, #192	@ 0xc0
 8002e38:	00d2      	lsls	r2, r2, #3
 8002e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	2212      	movs	r2, #18
 8002e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	2206      	movs	r2, #6
 8002e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	187a      	adds	r2, r7, r1
 8002e56:	23a0      	movs	r3, #160	@ 0xa0
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f001 fdb9 	bl	80049d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e62:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <HAL_I2C_MspInit+0xd0>)
 8002e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HAL_I2C_MspInit+0xd0>)
 8002e68:	2180      	movs	r1, #128	@ 0x80
 8002e6a:	0389      	lsls	r1, r1, #14
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e70:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_I2C_MspInit+0xd0>)
 8002e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e74:	2380      	movs	r3, #128	@ 0x80
 8002e76:	039b      	lsls	r3, r3, #14
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2103      	movs	r1, #3
 8002e82:	2017      	movs	r0, #23
 8002e84:	f001 fa38 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002e88:	2017      	movs	r0, #23
 8002e8a:	f001 fa4a 	bl	8004322 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b013      	add	sp, #76	@ 0x4c
 8002e94:	bd90      	pop	{r4, r7, pc}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	40005400 	.word	0x40005400
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b093      	sub	sp, #76	@ 0x4c
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	2334      	movs	r3, #52	@ 0x34
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	0018      	movs	r0, r3
 8002eae:	2314      	movs	r3, #20
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f007 fb42 	bl	800a53c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb8:	2414      	movs	r4, #20
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	f007 fb3a 	bl	800a53c <memset>
  if(hspi->Instance==SPI1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a34      	ldr	r2, [pc, #208]	@ (8002fa0 <HAL_SPI_MspInit+0x100>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d162      	bne.n	8002f98 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f004 f93b 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002eea:	f7ff f9c3 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eee:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002ef4:	2180      	movs	r1, #128	@ 0x80
 8002ef6:	0149      	lsls	r1, r1, #5
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40
 8002efc:	4b29      	ldr	r3, [pc, #164]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	015b      	lsls	r3, r3, #5
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	4b26      	ldr	r3, [pc, #152]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f0e:	4b25      	ldr	r3, [pc, #148]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f16:	4b23      	ldr	r3, [pc, #140]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f22:	4b20      	ldr	r3, [pc, #128]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f26:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002f28:	2102      	movs	r1, #2
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <HAL_SPI_MspInit+0x104>)
 8002f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f3a:	2134      	movs	r1, #52	@ 0x34
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	000c      	movs	r4, r1
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	2202      	movs	r2, #2
 8002f4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	193a      	adds	r2, r7, r4
 8002f60:	23a0      	movs	r3, #160	@ 0xa0
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f001 fd34 	bl	80049d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002f6c:	0021      	movs	r1, r4
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	2228      	movs	r2, #40	@ 0x28
 8002f72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2202      	movs	r2, #2
 8002f78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	4a06      	ldr	r2, [pc, #24]	@ (8002fa8 <HAL_SPI_MspInit+0x108>)
 8002f90:	0019      	movs	r1, r3
 8002f92:	0010      	movs	r0, r2
 8002f94:	f001 fd1e 	bl	80049d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b013      	add	sp, #76	@ 0x4c
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	40013000 	.word	0x40013000
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	50000400 	.word	0x50000400

08002fac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <HAL_TIM_PWM_MspInit+0x38>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10d      	bne.n	8002fda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc2:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fc4:	2180      	movs	r1, #128	@ 0x80
 8002fc6:	0109      	lsls	r1, r1, #4
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <HAL_TIM_Base_MspInit+0x38>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10d      	bne.n	800301a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_TIM_Base_MspInit+0x3c>)
 8003000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HAL_TIM_Base_MspInit+0x3c>)
 8003004:	2180      	movs	r1, #128	@ 0x80
 8003006:	0209      	lsls	r1, r1, #8
 8003008:	430a      	orrs	r2, r1
 800300a:	641a      	str	r2, [r3, #64]	@ 0x40
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_TIM_Base_MspInit+0x3c>)
 800300e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	40002000 	.word	0x40002000
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b089      	sub	sp, #36	@ 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	240c      	movs	r4, #12
 8003036:	193b      	adds	r3, r7, r4
 8003038:	0018      	movs	r0, r3
 800303a:	2314      	movs	r3, #20
 800303c:	001a      	movs	r2, r3
 800303e:	2100      	movs	r1, #0
 8003040:	f007 fa7c 	bl	800a53c <memset>
  if(htim->Instance==TIM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a15      	ldr	r2, [pc, #84]	@ (80030a0 <HAL_TIM_MspPostInit+0x74>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d123      	bne.n	8003096 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <HAL_TIM_MspPostInit+0x78>)
 8003050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003052:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <HAL_TIM_MspPostInit+0x78>)
 8003054:	2101      	movs	r1, #1
 8003056:	430a      	orrs	r2, r1
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <HAL_TIM_MspPostInit+0x78>)
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	2201      	movs	r2, #1
 8003060:	4013      	ands	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8003066:	193b      	adds	r3, r7, r4
 8003068:	2280      	movs	r2, #128	@ 0x80
 800306a:	0212      	lsls	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	0021      	movs	r1, r4
 8003070:	187b      	adds	r3, r7, r1
 8003072:	2202      	movs	r2, #2
 8003074:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	187b      	adds	r3, r7, r1
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003082:	187b      	adds	r3, r7, r1
 8003084:	2202      	movs	r2, #2
 8003086:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8003088:	187a      	adds	r2, r7, r1
 800308a:	23a0      	movs	r3, #160	@ 0xa0
 800308c:	05db      	lsls	r3, r3, #23
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f001 fc9f 	bl	80049d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b009      	add	sp, #36	@ 0x24
 800309c:	bd90      	pop	{r4, r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40021000 	.word	0x40021000

080030a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b095      	sub	sp, #84	@ 0x54
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	233c      	movs	r3, #60	@ 0x3c
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	0018      	movs	r0, r3
 80030b6:	2314      	movs	r3, #20
 80030b8:	001a      	movs	r2, r3
 80030ba:	2100      	movs	r1, #0
 80030bc:	f007 fa3e 	bl	800a53c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030c0:	241c      	movs	r4, #28
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	0018      	movs	r0, r3
 80030c6:	2320      	movs	r3, #32
 80030c8:	001a      	movs	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f007 fa36 	bl	800a53c <memset>
  if(huart->Instance==USART1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a5f      	ldr	r2, [pc, #380]	@ (8003254 <HAL_UART_MspInit+0x1ac>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d000      	beq.n	80030dc <HAL_UART_MspInit+0x34>
 80030da:	e0b7      	b.n	800324c <HAL_UART_MspInit+0x1a4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	0018      	movs	r0, r3
 80030ec:	f004 f836 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80030f4:	f7ff f8be 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030f8:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 80030fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030fc:	4b56      	ldr	r3, [pc, #344]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	01c9      	lsls	r1, r1, #7
 8003102:	430a      	orrs	r2, r1
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40
 8003106:	4b54      	ldr	r3, [pc, #336]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 8003108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003114:	4b50      	ldr	r3, [pc, #320]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 8003116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003118:	4b4f      	ldr	r3, [pc, #316]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 800311a:	2104      	movs	r1, #4
 800311c:	430a      	orrs	r2, r1
 800311e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003120:	4b4d      	ldr	r3, [pc, #308]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 8003122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003124:	2204      	movs	r2, #4
 8003126:	4013      	ands	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312c:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 800312e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003130:	4b49      	ldr	r3, [pc, #292]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 8003132:	2102      	movs	r1, #2
 8003134:	430a      	orrs	r2, r1
 8003136:	635a      	str	r2, [r3, #52]	@ 0x34
 8003138:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 800313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003144:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 8003146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003148:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 800314a:	2101      	movs	r1, #1
 800314c:	430a      	orrs	r2, r1
 800314e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003150:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_UART_MspInit+0x1b0>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800315c:	213c      	movs	r1, #60	@ 0x3c
 800315e:	187b      	adds	r3, r7, r1
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	01d2      	lsls	r2, r2, #7
 8003164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	000c      	movs	r4, r1
 8003168:	193b      	adds	r3, r7, r4
 800316a:	2202      	movs	r2, #2
 800316c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	193b      	adds	r3, r7, r4
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	193b      	adds	r3, r7, r4
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800317a:	193b      	adds	r3, r7, r4
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003180:	193b      	adds	r3, r7, r4
 8003182:	4a36      	ldr	r2, [pc, #216]	@ (800325c <HAL_UART_MspInit+0x1b4>)
 8003184:	0019      	movs	r1, r3
 8003186:	0010      	movs	r0, r2
 8003188:	f001 fc24 	bl	80049d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800318c:	193b      	adds	r3, r7, r4
 800318e:	2204      	movs	r2, #4
 8003190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	193b      	adds	r3, r7, r4
 8003194:	2202      	movs	r2, #2
 8003196:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	193b      	adds	r3, r7, r4
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80031a4:	193b      	adds	r3, r7, r4
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003260 <HAL_UART_MspInit+0x1b8>)
 80031ae:	0019      	movs	r1, r3
 80031b0:	0010      	movs	r0, r2
 80031b2:	f001 fc0f 	bl	80049d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031b6:	0021      	movs	r1, r4
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	0152      	lsls	r2, r2, #5
 80031be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	2202      	movs	r2, #2
 80031c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2201      	movs	r2, #1
 80031d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d8:	187a      	adds	r2, r7, r1
 80031da:	23a0      	movs	r3, #160	@ 0xa0
 80031dc:	05db      	lsls	r3, r3, #23
 80031de:	0011      	movs	r1, r2
 80031e0:	0018      	movs	r0, r3
 80031e2:	f001 fbf7 	bl	80049d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80031e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 80031e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003268 <HAL_UART_MspInit+0x1c0>)
 80031ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 80031ee:	2232      	movs	r2, #50	@ 0x32
 80031f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031fe:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 8003200:	2280      	movs	r2, #128	@ 0x80
 8003202:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003204:	4b17      	ldr	r3, [pc, #92]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 8003206:	2200      	movs	r2, #0
 8003208:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800320a:	4b16      	ldr	r3, [pc, #88]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003210:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003216:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 8003218:	22c0      	movs	r2, #192	@ 0xc0
 800321a:	0192      	lsls	r2, r2, #6
 800321c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800321e:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 8003220:	0018      	movs	r0, r3
 8003222:	f001 f89b 	bl	800435c <HAL_DMA_Init>
 8003226:	1e03      	subs	r3, r0, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 800322a:	f7ff f823 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 8003234:	505a      	str	r2, [r3, r1]
 8003236:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_UART_MspInit+0x1bc>)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800323c:	2200      	movs	r2, #0
 800323e:	2100      	movs	r1, #0
 8003240:	201b      	movs	r0, #27
 8003242:	f001 f859 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003246:	201b      	movs	r0, #27
 8003248:	f001 f86b 	bl	8004322 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b015      	add	sp, #84	@ 0x54
 8003252:	bd90      	pop	{r4, r7, pc}
 8003254:	40013800 	.word	0x40013800
 8003258:	40021000 	.word	0x40021000
 800325c:	50000800 	.word	0x50000800
 8003260:	50000400 	.word	0x50000400
 8003264:	20000354 	.word	0x20000354
 8003268:	40020008 	.word	0x40020008

0800326c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	e7fd      	b.n	8003270 <NMI_Handler+0x4>

08003274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	e7fd      	b.n	8003278 <HardFault_Handler+0x4>

0800327c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003294:	f000 f8d6 	bl	8003444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032a4:	4b03      	ldr	r3, [pc, #12]	@ (80032b4 <DMA1_Channel1_IRQHandler+0x14>)
 80032a6:	0018      	movs	r0, r3
 80032a8:	f001 fa46 	bl	8004738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ac:	46c0      	nop			@ (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	20000354 	.word	0x20000354

080032b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <DMA1_Channel2_3_IRQHandler+0x14>)
 80032be:	0018      	movs	r0, r3
 80032c0:	f001 fa3a 	bl	8004738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	20000114 	.word	0x20000114

080032d0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <I2C1_IRQHandler+0x2c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	23e0      	movs	r3, #224	@ 0xe0
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4013      	ands	r3, r2
 80032e0:	d004      	beq.n	80032ec <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <I2C1_IRQHandler+0x2c>)
 80032e4:	0018      	movs	r0, r3
 80032e6:	f001 fe7d 	bl	8004fe4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80032ea:	e003      	b.n	80032f4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80032ec:	4b03      	ldr	r3, [pc, #12]	@ (80032fc <I2C1_IRQHandler+0x2c>)
 80032ee:	0018      	movs	r0, r3
 80032f0:	f001 fe5e 	bl	8004fb0 <HAL_I2C_EV_IRQHandler>
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	20000170 	.word	0x20000170

08003300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <USART1_IRQHandler+0x14>)
 8003306:	0018      	movs	r0, r3
 8003308:	f005 fd3e 	bl	8008d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	200002c0 	.word	0x200002c0

08003318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <SystemInit+0x14>)
 800331e:	2280      	movs	r2, #128	@ 0x80
 8003320:	0512      	lsls	r2, r2, #20
 8003322:	609a      	str	r2, [r3, #8]
#endif
}
 8003324:	46c0      	nop			@ (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003330:	480d      	ldr	r0, [pc, #52]	@ (8003368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003334:	f7ff fff0 	bl	8003318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003338:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800333a:	e003      	b.n	8003344 <LoopCopyDataInit>

0800333c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800333e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003340:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003342:	3104      	adds	r1, #4

08003344 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003344:	480a      	ldr	r0, [pc, #40]	@ (8003370 <LoopForever+0xa>)
  ldr r3, =_edata
 8003346:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <LoopForever+0xe>)
  adds r2, r0, r1
 8003348:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800334a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800334c:	d3f6      	bcc.n	800333c <CopyDataInit>
  ldr r2, =_sbss
 800334e:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <LoopForever+0x12>)
  b LoopFillZerobss
 8003350:	e002      	b.n	8003358 <LoopFillZerobss>

08003352 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  str  r3, [r2]
 8003354:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003356:	3204      	adds	r2, #4

08003358 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003358:	4b08      	ldr	r3, [pc, #32]	@ (800337c <LoopForever+0x16>)
  cmp r2, r3
 800335a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800335c:	d3f9      	bcc.n	8003352 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800335e:	f007 f8f5 	bl	800a54c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003362:	f7fe fa5f 	bl	8001824 <main>

08003366 <LoopForever>:

LoopForever:
    b LoopForever
 8003366:	e7fe      	b.n	8003366 <LoopForever>
  ldr   r0, =_estack
 8003368:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 800336c:	0800a948 	.word	0x0800a948
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003374:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8003378:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 800337c:	2000071c 	.word	0x2000071c

08003380 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003380:	e7fe      	b.n	8003380 <ADC1_IRQHandler>

08003382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338e:	2003      	movs	r0, #3
 8003390:	f000 f80e 	bl	80033b0 <HAL_InitTick>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d003      	beq.n	80033a0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e001      	b.n	80033a4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a0:	f7ff fc46 	bl	8002c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	781b      	ldrb	r3, [r3, #0]
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	230f      	movs	r3, #15
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <HAL_InitTick+0x88>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02b      	beq.n	8003420 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80033c8:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <HAL_InitTick+0x8c>)
 80033ca:	681c      	ldr	r4, [r3, #0]
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_InitTick+0x88>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	0019      	movs	r1, r3
 80033d2:	23fa      	movs	r3, #250	@ 0xfa
 80033d4:	0098      	lsls	r0, r3, #2
 80033d6:	f7fc fe97 	bl	8000108 <__udivsi3>
 80033da:	0003      	movs	r3, r0
 80033dc:	0019      	movs	r1, r3
 80033de:	0020      	movs	r0, r4
 80033e0:	f7fc fe92 	bl	8000108 <__udivsi3>
 80033e4:	0003      	movs	r3, r0
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 ffab 	bl	8004342 <HAL_SYSTICK_Config>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d112      	bne.n	8003416 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d80a      	bhi.n	800340c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	2301      	movs	r3, #1
 80033fa:	425b      	negs	r3, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 ff7a 	bl	80042f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <HAL_InitTick+0x90>)
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e00d      	b.n	8003428 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800340c:	230f      	movs	r3, #15
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e008      	b.n	8003428 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003416:	230f      	movs	r3, #15
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e003      	b.n	8003428 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003428:	230f      	movs	r3, #15
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	781b      	ldrb	r3, [r3, #0]
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b005      	add	sp, #20
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	2000007c 	.word	0x2000007c
 800343c:	20000074 	.word	0x20000074
 8003440:	20000078 	.word	0x20000078

08003444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_IncTick+0x1c>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	001a      	movs	r2, r3
 800344e:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_IncTick+0x20>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	18d2      	adds	r2, r2, r3
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_IncTick+0x20>)
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	2000007c 	.word	0x2000007c
 8003464:	20000718 	.word	0x20000718

08003468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  return uwTick;
 800346c:	4b02      	ldr	r3, [pc, #8]	@ (8003478 <HAL_GetTick+0x10>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	20000718 	.word	0x20000718

0800347c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff fff0 	bl	8003468 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003496:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_Delay+0x44>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	001a      	movs	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	f7ff ffe0 	bl	8003468 <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
  {
  }
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	2000007c 	.word	0x2000007c

080034c4 <LL_ADC_SetCommonPathInternalCh>:
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a05      	ldr	r2, [pc, #20]	@ (80034e8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80034d4:	401a      	ands	r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]
}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	ff3fffff 	.word	0xff3fffff

080034ec <LL_ADC_GetCommonPathInternalCh>:
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	23c0      	movs	r3, #192	@ 0xc0
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	4013      	ands	r3, r2
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}

08003506 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	2104      	movs	r1, #4
 800351a:	400a      	ands	r2, r1
 800351c:	2107      	movs	r1, #7
 800351e:	4091      	lsls	r1, r2
 8003520:	000a      	movs	r2, r1
 8003522:	43d2      	mvns	r2, r2
 8003524:	401a      	ands	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2104      	movs	r1, #4
 800352a:	400b      	ands	r3, r1
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4099      	lsls	r1, r3
 8003530:	000b      	movs	r3, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	615a      	str	r2, [r3, #20]
}
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b004      	add	sp, #16
 800353e:	bd80      	pop	{r7, pc}

08003540 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	2104      	movs	r1, #4
 8003552:	400a      	ands	r2, r1
 8003554:	2107      	movs	r1, #7
 8003556:	4091      	lsls	r1, r2
 8003558:	000a      	movs	r2, r1
 800355a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2104      	movs	r1, #4
 8003560:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003562:	40da      	lsrs	r2, r3
 8003564:	0013      	movs	r3, r2
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b002      	add	sp, #8
 800356c:	bd80      	pop	{r7, pc}

0800356e <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	23c0      	movs	r3, #192	@ 0xc0
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	4013      	ands	r3, r2
 8003580:	d101      	bne.n	8003586 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003586:	2300      	movs	r3, #0
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}

08003590 <LL_ADC_REG_SetSequencerRanks>:
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	211f      	movs	r1, #31
 80035a4:	400a      	ands	r2, r1
 80035a6:	210f      	movs	r1, #15
 80035a8:	4091      	lsls	r1, r2
 80035aa:	000a      	movs	r2, r1
 80035ac:	43d2      	mvns	r2, r2
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	0e9b      	lsrs	r3, r3, #26
 80035b4:	210f      	movs	r1, #15
 80035b6:	4019      	ands	r1, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	201f      	movs	r0, #31
 80035bc:	4003      	ands	r3, r0
 80035be:	4099      	lsls	r1, r3
 80035c0:	000b      	movs	r3, r1
 80035c2:	431a      	orrs	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035c8:	46c0      	nop			@ (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <LL_ADC_REG_SetSequencerChAdd>:
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	0a5b      	lsrs	r3, r3, #9
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <LL_ADC_REG_SetSequencerChRem>:
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	0252      	lsls	r2, r2, #9
 8003604:	0a52      	lsrs	r2, r2, #9
 8003606:	43d2      	mvns	r2, r2
 8003608:	401a      	ands	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <LL_ADC_SetChannelSamplingTime>:
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	0212      	lsls	r2, r2, #8
 800362c:	43d2      	mvns	r2, r2
 800362e:	401a      	ands	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	400b      	ands	r3, r1
 8003638:	4904      	ldr	r1, [pc, #16]	@ (800364c <LL_ADC_SetChannelSamplingTime+0x34>)
 800363a:	400b      	ands	r3, r1
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	615a      	str	r2, [r3, #20]
}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b004      	add	sp, #16
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	7fffff00 	.word	0x7fffff00

08003650 <LL_ADC_EnableInternalRegulator>:
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a05      	ldr	r2, [pc, #20]	@ (8003674 <LL_ADC_EnableInternalRegulator+0x24>)
 800365e:	4013      	ands	r3, r2
 8003660:	2280      	movs	r2, #128	@ 0x80
 8003662:	0552      	lsls	r2, r2, #21
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b002      	add	sp, #8
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	6fffffe8 	.word	0x6fffffe8

08003678 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	2380      	movs	r3, #128	@ 0x80
 8003686:	055b      	lsls	r3, r3, #21
 8003688:	401a      	ands	r2, r3
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	055b      	lsls	r3, r3, #21
 800368e:	429a      	cmp	r2, r3
 8003690:	d101      	bne.n	8003696 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003696:	2300      	movs	r3, #0
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}

080036a0 <LL_ADC_Enable>:
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <LL_ADC_Enable+0x20>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	2201      	movs	r2, #1
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	7fffffe8 	.word	0x7fffffe8

080036c4 <LL_ADC_Disable>:
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a04      	ldr	r2, [pc, #16]	@ (80036e4 <LL_ADC_Disable+0x20>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	2202      	movs	r2, #2
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	7fffffe8 	.word	0x7fffffe8

080036e8 <LL_ADC_IsEnabled>:
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2201      	movs	r2, #1
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <LL_ADC_IsEnabled+0x18>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <LL_ADC_IsEnabled+0x1a>
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <LL_ADC_REG_StartConversion>:
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a04      	ldr	r2, [pc, #16]	@ (800372c <LL_ADC_REG_StartConversion+0x20>)
 800371a:	4013      	ands	r3, r2
 800371c:	2204      	movs	r2, #4
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	46c0      	nop			@ (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}
 800372c:	7fffffe8 	.word	0x7fffffe8

08003730 <LL_ADC_REG_IsConversionOngoing>:
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2204      	movs	r2, #4
 800373e:	4013      	ands	r3, r2
 8003740:	2b04      	cmp	r3, #4
 8003742:	d101      	bne.n	8003748 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003748:	2300      	movs	r3, #0
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375c:	231f      	movs	r3, #31
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e17e      	b.n	8003a78 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0018      	movs	r0, r3
 8003786:	f7ff fa77 	bl	8002c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2254      	movs	r2, #84	@ 0x54
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff6b 	bl	8003678 <LL_ADC_IsInternalRegulatorEnabled>
 80037a2:	1e03      	subs	r3, r0, #0
 80037a4:	d114      	bne.n	80037d0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f7ff ff50 	bl	8003650 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80037b0:	4bb3      	ldr	r3, [pc, #716]	@ (8003a80 <HAL_ADC_Init+0x32c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	49b3      	ldr	r1, [pc, #716]	@ (8003a84 <HAL_ADC_Init+0x330>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fc fca6 	bl	8000108 <__udivsi3>
 80037bc:	0003      	movs	r3, r0
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037c2:	e002      	b.n	80037ca <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f9      	bne.n	80037c4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff ff4f 	bl	8003678 <LL_ADC_IsInternalRegulatorEnabled>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	2210      	movs	r2, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	2201      	movs	r2, #1
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037f6:	231f      	movs	r3, #31
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	0018      	movs	r0, r3
 8003804:	f7ff ff94 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 8003808:	0003      	movs	r3, r0
 800380a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003810:	2210      	movs	r2, #16
 8003812:	4013      	ands	r3, r2
 8003814:	d000      	beq.n	8003818 <HAL_ADC_Init+0xc4>
 8003816:	e122      	b.n	8003a5e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d000      	beq.n	8003820 <HAL_ADC_Init+0xcc>
 800381e:	e11e      	b.n	8003a5e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	4a98      	ldr	r2, [pc, #608]	@ (8003a88 <HAL_ADC_Init+0x334>)
 8003826:	4013      	ands	r3, r2
 8003828:	2202      	movs	r2, #2
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff ff57 	bl	80036e8 <LL_ADC_IsEnabled>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d000      	beq.n	8003840 <HAL_ADC_Init+0xec>
 800383e:	e0ad      	b.n	800399c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7e1b      	ldrb	r3, [r3, #24]
 8003848:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800384a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7e5b      	ldrb	r3, [r3, #25]
 8003850:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003852:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7e9b      	ldrb	r3, [r3, #26]
 8003858:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800385a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_ADC_Init+0x116>
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	015b      	lsls	r3, r3, #5
 8003868:	e000      	b.n	800386c <HAL_ADC_Init+0x118>
 800386a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800386c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003872:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	da04      	bge.n	8003886 <HAL_ADC_Init+0x132>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	e001      	b.n	800388a <HAL_ADC_Init+0x136>
 8003886:	2380      	movs	r3, #128	@ 0x80
 8003888:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800388a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	212c      	movs	r1, #44	@ 0x2c
 8003890:	5c5b      	ldrb	r3, [r3, r1]
 8003892:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003894:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	5c9b      	ldrb	r3, [r3, r2]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d115      	bne.n	80038d2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7e9b      	ldrb	r3, [r3, #26]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2280      	movs	r2, #128	@ 0x80
 80038b2:	0252      	lsls	r2, r2, #9
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e00b      	b.n	80038d2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038be:	2220      	movs	r2, #32
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ca:	2201      	movs	r2, #1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038de:	23e0      	movs	r3, #224	@ 0xe0
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80038e8:	4313      	orrs	r3, r2
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_ADC_Init+0x338>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	0019      	movs	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	430a      	orrs	r2, r1
 8003904:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0f9b      	lsrs	r3, r3, #30
 800390c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003912:	4313      	orrs	r3, r2
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	223c      	movs	r2, #60	@ 0x3c
 800391e:	5c9b      	ldrb	r3, [r3, r2]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d111      	bne.n	8003948 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0f9b      	lsrs	r3, r3, #30
 800392a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003930:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003936:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800393c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	2201      	movs	r2, #1
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	4a50      	ldr	r2, [pc, #320]	@ (8003a90 <HAL_ADC_Init+0x33c>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	430a      	orrs	r2, r1
 800395c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	23c0      	movs	r3, #192	@ 0xc0
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	429a      	cmp	r2, r3
 8003968:	d018      	beq.n	800399c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	05db      	lsls	r3, r3, #23
 8003972:	429a      	cmp	r2, r3
 8003974:	d012      	beq.n	800399c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	429a      	cmp	r2, r3
 8003980:	d00c      	beq.n	800399c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003982:	4b44      	ldr	r3, [pc, #272]	@ (8003a94 <HAL_ADC_Init+0x340>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a44      	ldr	r2, [pc, #272]	@ (8003a98 <HAL_ADC_Init+0x344>)
 8003988:	4013      	ands	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	23f0      	movs	r3, #240	@ 0xf0
 8003992:	039b      	lsls	r3, r3, #14
 8003994:	401a      	ands	r2, r3
 8003996:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_ADC_Init+0x340>)
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a4:	001a      	movs	r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	f7ff fdad 	bl	8003506 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	4939      	ldr	r1, [pc, #228]	@ (8003a9c <HAL_ADC_Init+0x348>)
 80039b6:	001a      	movs	r2, r3
 80039b8:	f7ff fda5 	bl	8003506 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2110      	movs	r1, #16
 80039d0:	4249      	negs	r1, r1
 80039d2:	430a      	orrs	r2, r1
 80039d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039d6:	e018      	b.n	8003a0a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	2380      	movs	r3, #128	@ 0x80
 80039de:	039b      	lsls	r3, r3, #14
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d112      	bne.n	8003a0a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	221c      	movs	r2, #28
 80039f4:	4013      	ands	r3, r2
 80039f6:	2210      	movs	r2, #16
 80039f8:	4252      	negs	r2, r2
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0011      	movs	r1, r2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2100      	movs	r1, #0
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7ff fd95 	bl	8003540 <LL_ADC_GetSamplingTimeCommonChannels>
 8003a16:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d10b      	bne.n	8003a38 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	2201      	movs	r2, #1
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003a36:	e01c      	b.n	8003a72 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	2212      	movs	r2, #18
 8003a3e:	4393      	bics	r3, r2
 8003a40:	2210      	movs	r2, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003a54:	231f      	movs	r3, #31
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003a5c:	e009      	b.n	8003a72 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	2210      	movs	r2, #16
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003a6a:	231f      	movs	r3, #31
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a72:	231f      	movs	r3, #31
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	781b      	ldrb	r3, [r3, #0]
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b008      	add	sp, #32
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000074 	.word	0x20000074
 8003a84:	00030d40 	.word	0x00030d40
 8003a88:	fffffefd 	.word	0xfffffefd
 8003a8c:	ffde0201 	.word	0xffde0201
 8003a90:	1ffffc02 	.word	0x1ffffc02
 8003a94:	40012708 	.word	0x40012708
 8003a98:	ffc3ffff 	.word	0xffc3ffff
 8003a9c:	7fffff04 	.word	0x7fffff04

08003aa0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7ff fe3d 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 8003ab6:	1e03      	subs	r3, r0, #0
 8003ab8:	d16c      	bne.n	8003b94 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2254      	movs	r2, #84	@ 0x54
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_ADC_Start_DMA+0x28>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e06c      	b.n	8003ba2 <HAL_ADC_Start_DMA+0x102>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2254      	movs	r2, #84	@ 0x54
 8003acc:	2101      	movs	r1, #1
 8003ace:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d113      	bne.n	8003b04 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff fe01 	bl	80036e8 <LL_ADC_IsEnabled>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f7ff fde8 	bl	80036c4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2101      	movs	r1, #1
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b04:	2517      	movs	r5, #23
 8003b06:	197c      	adds	r4, r7, r5
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 fa3c 	bl	8003f88 <ADC_Enable>
 8003b10:	0003      	movs	r3, r0
 8003b12:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b14:	002c      	movs	r4, r5
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d13e      	bne.n	8003b9c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	4a22      	ldr	r2, [pc, #136]	@ (8003bac <HAL_ADC_Start_DMA+0x10c>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	0052      	lsls	r2, r2, #1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <HAL_ADC_Start_DMA+0x110>)
 8003b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b42:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <HAL_ADC_Start_DMA+0x114>)
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb8 <HAL_ADC_Start_DMA+0x118>)
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	221c      	movs	r2, #28
 8003b54:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2254      	movs	r2, #84	@ 0x54
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2110      	movs	r1, #16
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3340      	adds	r3, #64	@ 0x40
 8003b78:	0019      	movs	r1, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	193c      	adds	r4, r7, r4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f000 fc76 	bl	8004470 <HAL_DMA_Start_IT>
 8003b84:	0003      	movs	r3, r0
 8003b86:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7ff fdbd 	bl	800370c <LL_ADC_REG_StartConversion>
 8003b92:	e003      	b.n	8003b9c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b94:	2317      	movs	r3, #23
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	2202      	movs	r2, #2
 8003b9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b9c:	2317      	movs	r3, #23
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	781b      	ldrb	r3, [r3, #0]
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b006      	add	sp, #24
 8003ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	fffff0fe 	.word	0xfffff0fe
 8003bb0:	08004085 	.word	0x08004085
 8003bb4:	0800414d 	.word	0x0800414d
 8003bb8:	0800416b 	.word	0x0800416b

08003bbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be6:	2317      	movs	r3, #23
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2254      	movs	r2, #84	@ 0x54
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x24>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e1be      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x3a2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2254      	movs	r2, #84	@ 0x54
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7ff fd8f 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d000      	beq.n	8003c18 <HAL_ADC_ConfigChannel+0x3c>
 8003c16:	e1a1      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d100      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x46>
 8003c20:	e152      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	2380      	movs	r3, #128	@ 0x80
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d004      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c32:	4ac2      	ldr	r2, [pc, #776]	@ (8003f3c <HAL_ADC_ConfigChannel+0x360>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0019      	movs	r1, r3
 8003c42:	0010      	movs	r0, r2
 8003c44:	f7ff fcc4 	bl	80035d0 <LL_ADC_REG_SetSequencerChAdd>
 8003c48:	e0ed      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	211f      	movs	r1, #31
 8003c54:	400b      	ands	r3, r1
 8003c56:	210f      	movs	r1, #15
 8003c58:	4099      	lsls	r1, r3
 8003c5a:	000b      	movs	r3, r1
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	025b      	lsls	r3, r3, #9
 8003c68:	0a5b      	lsrs	r3, r3, #9
 8003c6a:	d105      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x9c>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	221f      	movs	r2, #31
 8003c74:	4013      	ands	r3, r2
 8003c76:	e0bc      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d000      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0xa8>
 8003c82:	e0b5      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x214>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d000      	beq.n	8003c90 <HAL_ADC_ConfigChannel+0xb4>
 8003c8e:	e0ad      	b.n	8003dec <HAL_ADC_ConfigChannel+0x210>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2204      	movs	r2, #4
 8003c96:	4013      	ands	r3, r2
 8003c98:	d000      	beq.n	8003c9c <HAL_ADC_ConfigChannel+0xc0>
 8003c9a:	e0a5      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x20c>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d000      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0xcc>
 8003ca6:	e09d      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x208>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d000      	beq.n	8003cb4 <HAL_ADC_ConfigChannel+0xd8>
 8003cb2:	e095      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x204>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d000      	beq.n	8003cc0 <HAL_ADC_ConfigChannel+0xe4>
 8003cbe:	e08d      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x200>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2240      	movs	r2, #64	@ 0x40
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d000      	beq.n	8003ccc <HAL_ADC_ConfigChannel+0xf0>
 8003cca:	e085      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x1fc>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2280      	movs	r2, #128	@ 0x80
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d000      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0xfc>
 8003cd6:	e07d      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x1f8>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	@ 0x80
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d000      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0x10a>
 8003ce4:	e074      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x1f4>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d000      	beq.n	8003cf4 <HAL_ADC_ConfigChannel+0x118>
 8003cf2:	e06b      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x1f0>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d000      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x126>
 8003d00:	e062      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x1ec>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	2380      	movs	r3, #128	@ 0x80
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d000      	beq.n	8003d10 <HAL_ADC_ConfigChannel+0x134>
 8003d0e:	e059      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x1e8>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	015b      	lsls	r3, r3, #5
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d151      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x1e4>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	@ 0x80
 8003d22:	019b      	lsls	r3, r3, #6
 8003d24:	4013      	ands	r3, r2
 8003d26:	d149      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x1e0>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	01db      	lsls	r3, r3, #7
 8003d30:	4013      	ands	r3, r2
 8003d32:	d141      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x1dc>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d139      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1d8>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	2380      	movs	r3, #128	@ 0x80
 8003d46:	025b      	lsls	r3, r3, #9
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d131      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x1d4>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	2380      	movs	r3, #128	@ 0x80
 8003d52:	029b      	lsls	r3, r3, #10
 8003d54:	4013      	ands	r3, r2
 8003d56:	d129      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x1d0>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	02db      	lsls	r3, r3, #11
 8003d60:	4013      	ands	r3, r2
 8003d62:	d121      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x1cc>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	031b      	lsls	r3, r3, #12
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d119      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x1c8>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	035b      	lsls	r3, r3, #13
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x1c4>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	039b      	lsls	r3, r3, #14
 8003d84:	4013      	ands	r3, r2
 8003d86:	d109      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x1c0>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	03db      	lsls	r3, r3, #15
 8003d90:	4013      	ands	r3, r2
 8003d92:	d001      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x1bc>
 8003d94:	2316      	movs	r3, #22
 8003d96:	e02c      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e02a      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003d9c:	2315      	movs	r3, #21
 8003d9e:	e028      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003da0:	2314      	movs	r3, #20
 8003da2:	e026      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003da4:	2313      	movs	r3, #19
 8003da6:	e024      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003da8:	2312      	movs	r3, #18
 8003daa:	e022      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dac:	2311      	movs	r3, #17
 8003dae:	e020      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003db0:	2310      	movs	r3, #16
 8003db2:	e01e      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003db4:	230f      	movs	r3, #15
 8003db6:	e01c      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003db8:	230e      	movs	r3, #14
 8003dba:	e01a      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dbc:	230d      	movs	r3, #13
 8003dbe:	e018      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	e016      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dc4:	230b      	movs	r3, #11
 8003dc6:	e014      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dc8:	230a      	movs	r3, #10
 8003dca:	e012      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dcc:	2309      	movs	r3, #9
 8003dce:	e010      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	e00e      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	e00c      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dd8:	2306      	movs	r3, #6
 8003dda:	e00a      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003ddc:	2305      	movs	r3, #5
 8003dde:	e008      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003de0:	2304      	movs	r3, #4
 8003de2:	e006      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003de4:	2303      	movs	r3, #3
 8003de6:	e004      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e002      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x216>
 8003df0:	2300      	movs	r3, #0
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	6852      	ldr	r2, [r2, #4]
 8003df6:	201f      	movs	r0, #31
 8003df8:	4002      	ands	r2, r0
 8003dfa:	4093      	lsls	r3, r2
 8003dfc:	000a      	movs	r2, r1
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d808      	bhi.n	8003e26 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	001a      	movs	r2, r3
 8003e22:	f7ff fbb5 	bl	8003590 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	001a      	movs	r2, r3
 8003e34:	f7ff fbf0 	bl	8003618 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db00      	blt.n	8003e42 <HAL_ADC_ConfigChannel+0x266>
 8003e40:	e096      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e42:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_ADC_ConfigChannel+0x364>)
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff fb51 	bl	80034ec <LL_ADC_GetCommonPathInternalCh>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3c      	ldr	r2, [pc, #240]	@ (8003f44 <HAL_ADC_ConfigChannel+0x368>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d123      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e60:	d11e      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2280      	movs	r2, #128	@ 0x80
 8003e66:	0412      	lsls	r2, r2, #16
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <HAL_ADC_ConfigChannel+0x364>)
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	0010      	movs	r0, r2
 8003e70:	f7ff fb28 	bl	80034c4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003e74:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <HAL_ADC_ConfigChannel+0x36c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4934      	ldr	r1, [pc, #208]	@ (8003f4c <HAL_ADC_ConfigChannel+0x370>)
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7fc f944 	bl	8000108 <__udivsi3>
 8003e80:	0003      	movs	r3, r0
 8003e82:	001a      	movs	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	189b      	adds	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e90:	e002      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f9      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e9e:	e067      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f50 <HAL_ADC_ConfigChannel+0x374>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d162      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	2380      	movs	r3, #128	@ 0x80
 8003eae:	03db      	lsls	r3, r3, #15
 8003eb0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003eb2:	d15d      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2280      	movs	r2, #128	@ 0x80
 8003eb8:	03d2      	lsls	r2, r2, #15
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	4a20      	ldr	r2, [pc, #128]	@ (8003f40 <HAL_ADC_ConfigChannel+0x364>)
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	0010      	movs	r0, r2
 8003ec2:	f7ff faff 	bl	80034c4 <LL_ADC_SetCommonPathInternalCh>
 8003ec6:	e053      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	2380      	movs	r3, #128	@ 0x80
 8003ece:	061b      	lsls	r3, r3, #24
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d004      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ed8:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <HAL_ADC_ConfigChannel+0x360>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d107      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	0010      	movs	r0, r2
 8003eea:	f7ff fb82 	bl	80035f2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da3c      	bge.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ef6:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_ADC_ConfigChannel+0x364>)
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7ff faf7 	bl	80034ec <LL_ADC_GetCommonPathInternalCh>
 8003efe:	0003      	movs	r3, r0
 8003f00:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a0f      	ldr	r2, [pc, #60]	@ (8003f44 <HAL_ADC_ConfigChannel+0x368>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d108      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4a11      	ldr	r2, [pc, #68]	@ (8003f54 <HAL_ADC_ConfigChannel+0x378>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	4a0b      	ldr	r2, [pc, #44]	@ (8003f40 <HAL_ADC_ConfigChannel+0x364>)
 8003f14:	0019      	movs	r1, r3
 8003f16:	0010      	movs	r0, r2
 8003f18:	f7ff fad4 	bl	80034c4 <LL_ADC_SetCommonPathInternalCh>
 8003f1c:	e028      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a0b      	ldr	r2, [pc, #44]	@ (8003f50 <HAL_ADC_ConfigChannel+0x374>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d123      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f58 <HAL_ADC_ConfigChannel+0x37c>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	4a04      	ldr	r2, [pc, #16]	@ (8003f40 <HAL_ADC_ConfigChannel+0x364>)
 8003f30:	0019      	movs	r1, r3
 8003f32:	0010      	movs	r0, r2
 8003f34:	f7ff fac6 	bl	80034c4 <LL_ADC_SetCommonPathInternalCh>
 8003f38:	e01a      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x394>
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	80000004 	.word	0x80000004
 8003f40:	40012708 	.word	0x40012708
 8003f44:	a4000200 	.word	0xa4000200
 8003f48:	20000074 	.word	0x20000074
 8003f4c:	00030d40 	.word	0x00030d40
 8003f50:	a8000400 	.word	0xa8000400
 8003f54:	ff7fffff 	.word	0xff7fffff
 8003f58:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	2220      	movs	r2, #32
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f68:	2317      	movs	r3, #23
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2254      	movs	r2, #84	@ 0x54
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003f78:	2317      	movs	r3, #23
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	781b      	ldrb	r3, [r3, #0]
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b006      	add	sp, #24
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)

08003f88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fba5 	bl	80036e8 <LL_ADC_IsEnabled>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d162      	bne.n	8004068 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a32      	ldr	r2, [pc, #200]	@ (8004074 <ADC_Enable+0xec>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	d00d      	beq.n	8003fca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e04f      	b.n	800406a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7ff fb66 	bl	80036a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003fd4:	4b28      	ldr	r3, [pc, #160]	@ (8004078 <ADC_Enable+0xf0>)
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7ff fa88 	bl	80034ec <LL_ADC_GetCommonPathInternalCh>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	2380      	movs	r3, #128	@ 0x80
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d00f      	beq.n	8004006 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fe6:	4b25      	ldr	r3, [pc, #148]	@ (800407c <ADC_Enable+0xf4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4925      	ldr	r1, [pc, #148]	@ (8004080 <ADC_Enable+0xf8>)
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7fc f88b 	bl	8000108 <__udivsi3>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003ff6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ff8:	e002      	b.n	8004000 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f9      	bne.n	8003ffa <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7e5b      	ldrb	r3, [r3, #25]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d02c      	beq.n	8004068 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800400e:	f7ff fa2b 	bl	8003468 <HAL_GetTick>
 8004012:	0003      	movs	r3, r0
 8004014:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004016:	e020      	b.n	800405a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0018      	movs	r0, r3
 800401e:	f7ff fb63 	bl	80036e8 <LL_ADC_IsEnabled>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d104      	bne.n	8004030 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fb38 	bl	80036a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004030:	f7ff fa1a 	bl	8003468 <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d90d      	bls.n	800405a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004042:	2210      	movs	r2, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	2201      	movs	r2, #1
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e007      	b.n	800406a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2201      	movs	r2, #1
 8004062:	4013      	ands	r3, r2
 8004064:	2b01      	cmp	r3, #1
 8004066:	d1d7      	bne.n	8004018 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	80000017 	.word	0x80000017
 8004078:	40012708 	.word	0x40012708
 800407c:	20000074 	.word	0x20000074
 8004080:	00030d40 	.word	0x00030d40

08004084 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004096:	2250      	movs	r2, #80	@ 0x50
 8004098:	4013      	ands	r3, r2
 800409a:	d141      	bne.n	8004120 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	2280      	movs	r2, #128	@ 0x80
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fa5d 	bl	800356e <LL_ADC_REG_IsTriggerSourceSWStart>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d02e      	beq.n	8004116 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	7e9b      	ldrb	r3, [r3, #26]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d12a      	bne.n	8004116 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2208      	movs	r2, #8
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d123      	bne.n	8004116 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7ff fb2c 	bl	8003730 <LL_ADC_REG_IsConversionOngoing>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d110      	bne.n	80040fe <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	210c      	movs	r1, #12
 80040e8:	438a      	bics	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <ADC_DMAConvCplt+0xc4>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	2201      	movs	r2, #1
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80040fc:	e00b      	b.n	8004116 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004102:	2220      	movs	r2, #32
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410e:	2201      	movs	r2, #1
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	0018      	movs	r0, r3
 800411a:	f7fd fb71 	bl	8001800 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800411e:	e00f      	b.n	8004140 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004124:	2210      	movs	r2, #16
 8004126:	4013      	ands	r3, r2
 8004128:	d004      	beq.n	8004134 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fd4d 	bl	8003bcc <HAL_ADC_ErrorCallback>
}
 8004132:	e005      	b.n	8004140 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	0010      	movs	r0, r2
 800413e:	4798      	blx	r3
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b004      	add	sp, #16
 8004146:	bd80      	pop	{r7, pc}
 8004148:	fffffefe 	.word	0xfffffefe

0800414c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0018      	movs	r0, r3
 800415e:	f7ff fd2d 	bl	8003bbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b004      	add	sp, #16
 8004168:	bd80      	pop	{r7, pc}

0800416a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	2240      	movs	r2, #64	@ 0x40
 800417e:	431a      	orrs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004188:	2204      	movs	r2, #4
 800418a:	431a      	orrs	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	0018      	movs	r0, r3
 8004194:	f7ff fd1a 	bl	8003bcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004198:	46c0      	nop			@ (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b004      	add	sp, #16
 800419e:	bd80      	pop	{r7, pc}

080041a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	0002      	movs	r2, r0
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041ac:	1dfb      	adds	r3, r7, #7
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80041b2:	d809      	bhi.n	80041c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b4:	1dfb      	adds	r3, r7, #7
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	001a      	movs	r2, r3
 80041ba:	231f      	movs	r3, #31
 80041bc:	401a      	ands	r2, r3
 80041be:	4b04      	ldr	r3, [pc, #16]	@ (80041d0 <__NVIC_EnableIRQ+0x30>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	4091      	lsls	r1, r2
 80041c4:	000a      	movs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80041c8:	46c0      	nop			@ (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	e000e100 	.word	0xe000e100

080041d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	0002      	movs	r2, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	1dfb      	adds	r3, r7, #7
 80041e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041e2:	1dfb      	adds	r3, r7, #7
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80041e8:	d828      	bhi.n	800423c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041ea:	4a2f      	ldr	r2, [pc, #188]	@ (80042a8 <__NVIC_SetPriority+0xd4>)
 80041ec:	1dfb      	adds	r3, r7, #7
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	33c0      	adds	r3, #192	@ 0xc0
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	589b      	ldr	r3, [r3, r2]
 80041fa:	1dfa      	adds	r2, r7, #7
 80041fc:	7812      	ldrb	r2, [r2, #0]
 80041fe:	0011      	movs	r1, r2
 8004200:	2203      	movs	r2, #3
 8004202:	400a      	ands	r2, r1
 8004204:	00d2      	lsls	r2, r2, #3
 8004206:	21ff      	movs	r1, #255	@ 0xff
 8004208:	4091      	lsls	r1, r2
 800420a:	000a      	movs	r2, r1
 800420c:	43d2      	mvns	r2, r2
 800420e:	401a      	ands	r2, r3
 8004210:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	22ff      	movs	r2, #255	@ 0xff
 8004218:	401a      	ands	r2, r3
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	0018      	movs	r0, r3
 8004220:	2303      	movs	r3, #3
 8004222:	4003      	ands	r3, r0
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004228:	481f      	ldr	r0, [pc, #124]	@ (80042a8 <__NVIC_SetPriority+0xd4>)
 800422a:	1dfb      	adds	r3, r7, #7
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b25b      	sxtb	r3, r3
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	430a      	orrs	r2, r1
 8004234:	33c0      	adds	r3, #192	@ 0xc0
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800423a:	e031      	b.n	80042a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800423c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ac <__NVIC_SetPriority+0xd8>)
 800423e:	1dfb      	adds	r3, r7, #7
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	0019      	movs	r1, r3
 8004244:	230f      	movs	r3, #15
 8004246:	400b      	ands	r3, r1
 8004248:	3b08      	subs	r3, #8
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3306      	adds	r3, #6
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	3304      	adds	r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1dfa      	adds	r2, r7, #7
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	0011      	movs	r1, r2
 800425c:	2203      	movs	r2, #3
 800425e:	400a      	ands	r2, r1
 8004260:	00d2      	lsls	r2, r2, #3
 8004262:	21ff      	movs	r1, #255	@ 0xff
 8004264:	4091      	lsls	r1, r2
 8004266:	000a      	movs	r2, r1
 8004268:	43d2      	mvns	r2, r2
 800426a:	401a      	ands	r2, r3
 800426c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	019b      	lsls	r3, r3, #6
 8004272:	22ff      	movs	r2, #255	@ 0xff
 8004274:	401a      	ands	r2, r3
 8004276:	1dfb      	adds	r3, r7, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	0018      	movs	r0, r3
 800427c:	2303      	movs	r3, #3
 800427e:	4003      	ands	r3, r0
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004284:	4809      	ldr	r0, [pc, #36]	@ (80042ac <__NVIC_SetPriority+0xd8>)
 8004286:	1dfb      	adds	r3, r7, #7
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	001c      	movs	r4, r3
 800428c:	230f      	movs	r3, #15
 800428e:	4023      	ands	r3, r4
 8004290:	3b08      	subs	r3, #8
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	430a      	orrs	r2, r1
 8004296:	3306      	adds	r3, #6
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	18c3      	adds	r3, r0, r3
 800429c:	3304      	adds	r3, #4
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b003      	add	sp, #12
 80042a6:	bd90      	pop	{r4, r7, pc}
 80042a8:	e000e100 	.word	0xe000e100
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1e5a      	subs	r2, r3, #1
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	045b      	lsls	r3, r3, #17
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d301      	bcc.n	80042c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042c4:	2301      	movs	r3, #1
 80042c6:	e010      	b.n	80042ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042c8:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <SysTick_Config+0x44>)
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	3a01      	subs	r2, #1
 80042ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042d0:	2301      	movs	r3, #1
 80042d2:	425b      	negs	r3, r3
 80042d4:	2103      	movs	r1, #3
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff ff7c 	bl	80041d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <SysTick_Config+0x44>)
 80042de:	2200      	movs	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042e2:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <SysTick_Config+0x44>)
 80042e4:	2207      	movs	r2, #7
 80042e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	e000e010 	.word	0xe000e010

080042f8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	210f      	movs	r1, #15
 8004304:	187b      	adds	r3, r7, r1
 8004306:	1c02      	adds	r2, r0, #0
 8004308:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	187b      	adds	r3, r7, r1
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b25b      	sxtb	r3, r3
 8004312:	0011      	movs	r1, r2
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff ff5d 	bl	80041d4 <__NVIC_SetPriority>
}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	0002      	movs	r2, r0
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800432e:	1dfb      	adds	r3, r7, #7
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b25b      	sxtb	r3, r3
 8004334:	0018      	movs	r0, r3
 8004336:	f7ff ff33 	bl	80041a0 <__NVIC_EnableIRQ>
}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b002      	add	sp, #8
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0018      	movs	r0, r3
 800434e:	f7ff ffaf 	bl	80042b0 <SysTick_Config>
 8004352:	0003      	movs	r3, r0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b002      	add	sp, #8
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e077      	b.n	800445e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a3d      	ldr	r2, [pc, #244]	@ (8004468 <HAL_DMA_Init+0x10c>)
 8004374:	4694      	mov	ip, r2
 8004376:	4463      	add	r3, ip
 8004378:	2114      	movs	r1, #20
 800437a:	0018      	movs	r0, r3
 800437c:	f7fb fec4 	bl	8000108 <__udivsi3>
 8004380:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004382:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2225      	movs	r2, #37	@ 0x25
 800438c:	2102      	movs	r1, #2
 800438e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4934      	ldr	r1, [pc, #208]	@ (800446c <HAL_DMA_Init+0x110>)
 800439c:	400a      	ands	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0018      	movs	r0, r3
 80043da:	f000 faab 	bl	8004934 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	01db      	lsls	r3, r3, #7
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d102      	bne.n	80043f0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	21ff      	movs	r1, #255	@ 0xff
 80043fa:	400a      	ands	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004406:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d011      	beq.n	8004434 <HAL_DMA_Init+0xd8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d80d      	bhi.n	8004434 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	0018      	movs	r0, r3
 800441c:	f000 fab6 	bl	800498c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	e008      	b.n	8004446 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2225      	movs	r2, #37	@ 0x25
 8004450:	2101      	movs	r1, #1
 8004452:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	@ 0x24
 8004458:	2100      	movs	r1, #0
 800445a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	bffdfff8 	.word	0xbffdfff8
 800446c:	ffff800f 	.word	0xffff800f

08004470 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447e:	2317      	movs	r3, #23
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2224      	movs	r2, #36	@ 0x24
 800448a:	5c9b      	ldrb	r3, [r3, r2]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_DMA_Start_IT+0x24>
 8004490:	2302      	movs	r3, #2
 8004492:	e070      	b.n	8004576 <HAL_DMA_Start_IT+0x106>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2224      	movs	r2, #36	@ 0x24
 8004498:	2101      	movs	r1, #1
 800449a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2225      	movs	r2, #37	@ 0x25
 80044a0:	5c9b      	ldrb	r3, [r3, r2]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d157      	bne.n	8004558 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2225      	movs	r2, #37	@ 0x25
 80044ac:	2102      	movs	r1, #2
 80044ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	438a      	bics	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f9f1 	bl	80048b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	210e      	movs	r1, #14
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	e00f      	b.n	800450c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2104      	movs	r1, #4
 80044f8:	438a      	bics	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	210a      	movs	r1, #10
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	4013      	ands	r3, r2
 8004518:	d008      	beq.n	800452c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	2180      	movs	r1, #128	@ 0x80
 8004526:	0049      	lsls	r1, r1, #1
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453e:	2180      	movs	r1, #128	@ 0x80
 8004540:	0049      	lsls	r1, r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2101      	movs	r1, #1
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e007      	b.n	8004568 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2224      	movs	r2, #36	@ 0x24
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004560:	2317      	movs	r3, #23
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	2202      	movs	r2, #2
 8004566:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2224      	movs	r2, #36	@ 0x24
 800456c:	2100      	movs	r1, #0
 800456e:	5499      	strb	r1, [r3, r2]

  return status;
 8004570:	2317      	movs	r3, #23
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	781b      	ldrb	r3, [r3, #0]
}
 8004576:	0018      	movs	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	b006      	add	sp, #24
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e050      	b.n	8004634 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2225      	movs	r2, #37	@ 0x25
 8004596:	5c9b      	ldrb	r3, [r3, r2]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d008      	beq.n	80045b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2204      	movs	r2, #4
 80045a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2224      	movs	r2, #36	@ 0x24
 80045a8:	2100      	movs	r1, #0
 80045aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e041      	b.n	8004634 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	210e      	movs	r1, #14
 80045bc:	438a      	bics	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	491c      	ldr	r1, [pc, #112]	@ (800463c <HAL_DMA_Abort+0xbc>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2101      	movs	r1, #1
 80045dc:	438a      	bics	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80045e0:	4b17      	ldr	r3, [pc, #92]	@ (8004640 <HAL_DMA_Abort+0xc0>)
 80045e2:	6859      	ldr	r1, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	221c      	movs	r2, #28
 80045ea:	4013      	ands	r3, r2
 80045ec:	2201      	movs	r2, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	4b13      	ldr	r3, [pc, #76]	@ (8004640 <HAL_DMA_Abort+0xc0>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80045fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004612:	490a      	ldr	r1, [pc, #40]	@ (800463c <HAL_DMA_Abort+0xbc>)
 8004614:	400a      	ands	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004620:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2225      	movs	r2, #37	@ 0x25
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2224      	movs	r2, #36	@ 0x24
 800462e:	2100      	movs	r1, #0
 8004630:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}
 800463c:	fffffeff 	.word	0xfffffeff
 8004640:	40020000 	.word	0x40020000

08004644 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800464c:	230f      	movs	r3, #15
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	@ 0x24
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	@ 0x24
 8004660:	5c9b      	ldrb	r3, [r3, r2]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_DMA_Abort_IT+0x26>
 8004666:	2302      	movs	r3, #2
 8004668:	e05e      	b.n	8004728 <HAL_DMA_Abort_IT+0xe4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2224      	movs	r2, #36	@ 0x24
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2225      	movs	r2, #37	@ 0x25
 8004676:	5c9b      	ldrb	r3, [r3, r2]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d007      	beq.n	800468e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004684:	230f      	movs	r3, #15
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e049      	b.n	8004722 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	210e      	movs	r1, #14
 800469a:	438a      	bics	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	438a      	bics	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	491d      	ldr	r1, [pc, #116]	@ (8004730 <HAL_DMA_Abort_IT+0xec>)
 80046ba:	400a      	ands	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80046be:	4b1d      	ldr	r3, [pc, #116]	@ (8004734 <HAL_DMA_Abort_IT+0xf0>)
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	221c      	movs	r2, #28
 80046c8:	4013      	ands	r3, r2
 80046ca:	2201      	movs	r2, #1
 80046cc:	409a      	lsls	r2, r3
 80046ce:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <HAL_DMA_Abort_IT+0xf0>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80046dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f0:	490f      	ldr	r1, [pc, #60]	@ (8004730 <HAL_DMA_Abort_IT+0xec>)
 80046f2:	400a      	ands	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80046fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2225      	movs	r2, #37	@ 0x25
 8004704:	2101      	movs	r1, #1
 8004706:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	@ 0x24
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	0010      	movs	r0, r2
 8004720:	4798      	blx	r3
    }
  }
  return status;
 8004722:	230f      	movs	r3, #15
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	781b      	ldrb	r3, [r3, #0]
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}
 8004730:	fffffeff 	.word	0xfffffeff
 8004734:	40020000 	.word	0x40020000

08004738 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8004740:	4b55      	ldr	r3, [pc, #340]	@ (8004898 <HAL_DMA_IRQHandler+0x160>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	221c      	movs	r2, #28
 8004754:	4013      	ands	r3, r2
 8004756:	2204      	movs	r2, #4
 8004758:	409a      	lsls	r2, r3
 800475a:	0013      	movs	r3, r2
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4013      	ands	r3, r2
 8004760:	d027      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x7a>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2204      	movs	r2, #4
 8004766:	4013      	ands	r3, r2
 8004768:	d023      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2220      	movs	r2, #32
 8004772:	4013      	ands	r3, r2
 8004774:	d107      	bne.n	8004786 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2104      	movs	r1, #4
 8004782:	438a      	bics	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004786:	4b44      	ldr	r3, [pc, #272]	@ (8004898 <HAL_DMA_IRQHandler+0x160>)
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	221c      	movs	r2, #28
 8004790:	4013      	ands	r3, r2
 8004792:	2204      	movs	r2, #4
 8004794:	409a      	lsls	r2, r3
 8004796:	4b40      	ldr	r3, [pc, #256]	@ (8004898 <HAL_DMA_IRQHandler+0x160>)
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d100      	bne.n	80047a6 <HAL_DMA_IRQHandler+0x6e>
 80047a4:	e073      	b.n	800488e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	0010      	movs	r0, r2
 80047ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047b0:	e06d      	b.n	800488e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	221c      	movs	r2, #28
 80047b8:	4013      	ands	r3, r2
 80047ba:	2202      	movs	r2, #2
 80047bc:	409a      	lsls	r2, r3
 80047be:	0013      	movs	r3, r2
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4013      	ands	r3, r2
 80047c4:	d02e      	beq.n	8004824 <HAL_DMA_IRQHandler+0xec>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2202      	movs	r2, #2
 80047ca:	4013      	ands	r3, r2
 80047cc:	d02a      	beq.n	8004824 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2220      	movs	r2, #32
 80047d6:	4013      	ands	r3, r2
 80047d8:	d10b      	bne.n	80047f2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	210a      	movs	r1, #10
 80047e6:	438a      	bics	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2225      	movs	r2, #37	@ 0x25
 80047ee:	2101      	movs	r1, #1
 80047f0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80047f2:	4b29      	ldr	r3, [pc, #164]	@ (8004898 <HAL_DMA_IRQHandler+0x160>)
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	221c      	movs	r2, #28
 80047fc:	4013      	ands	r3, r2
 80047fe:	2202      	movs	r2, #2
 8004800:	409a      	lsls	r2, r3
 8004802:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <HAL_DMA_IRQHandler+0x160>)
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	2100      	movs	r1, #0
 800480e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d03a      	beq.n	800488e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	0010      	movs	r0, r2
 8004820:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004822:	e034      	b.n	800488e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	221c      	movs	r2, #28
 800482a:	4013      	ands	r3, r2
 800482c:	2208      	movs	r2, #8
 800482e:	409a      	lsls	r2, r3
 8004830:	0013      	movs	r3, r2
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	d02b      	beq.n	8004890 <HAL_DMA_IRQHandler+0x158>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2208      	movs	r2, #8
 800483c:	4013      	ands	r3, r2
 800483e:	d027      	beq.n	8004890 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	210e      	movs	r1, #14
 800484c:	438a      	bics	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004850:	4b11      	ldr	r3, [pc, #68]	@ (8004898 <HAL_DMA_IRQHandler+0x160>)
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	221c      	movs	r2, #28
 800485a:	4013      	ands	r3, r2
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <HAL_DMA_IRQHandler+0x160>)
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2225      	movs	r2, #37	@ 0x25
 8004870:	2101      	movs	r1, #1
 8004872:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	@ 0x24
 8004878:	2100      	movs	r1, #0
 800487a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	0010      	movs	r0, r2
 800488c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	46c0      	nop			@ (mov r8, r8)
}
 8004892:	46bd      	mov	sp, r7
 8004894:	b004      	add	sp, #16
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40020000 	.word	0x40020000

0800489c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2225      	movs	r2, #37	@ 0x25
 80048a8:	5c9b      	ldrb	r3, [r3, r2]
 80048aa:	b2db      	uxtb	r3, r3
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b002      	add	sp, #8
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80048de:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <DMA_SetConfig+0x7c>)
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	221c      	movs	r2, #28
 80048e8:	4013      	ands	r3, r2
 80048ea:	2201      	movs	r2, #1
 80048ec:	409a      	lsls	r2, r3
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <DMA_SetConfig+0x7c>)
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b10      	cmp	r3, #16
 8004902:	d108      	bne.n	8004916 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004914:	e007      	b.n	8004926 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	60da      	str	r2, [r3, #12]
}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b004      	add	sp, #16
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	40020000 	.word	0x40020000

08004934 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	001a      	movs	r2, r3
 8004942:	23ff      	movs	r3, #255	@ 0xff
 8004944:	4013      	ands	r3, r2
 8004946:	3b08      	subs	r3, #8
 8004948:	2114      	movs	r1, #20
 800494a:	0018      	movs	r0, r3
 800494c:	f7fb fbdc 	bl	8000108 <__udivsi3>
 8004950:	0003      	movs	r3, r0
 8004952:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800495a:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800495c:	4694      	mov	ip, r2
 800495e:	4463      	add	r3, ip
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	001a      	movs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a07      	ldr	r2, [pc, #28]	@ (8004988 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800496c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	221c      	movs	r2, #28
 8004972:	4013      	ands	r3, r2
 8004974:	2201      	movs	r2, #1
 8004976:	409a      	lsls	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800497c:	46c0      	nop			@ (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b004      	add	sp, #16
 8004982:	bd80      	pop	{r7, pc}
 8004984:	10008200 	.word	0x10008200
 8004988:	40020880 	.word	0x40020880

0800498c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	22ff      	movs	r2, #255	@ 0xff
 800499a:	4013      	ands	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a0a      	ldr	r2, [pc, #40]	@ (80049cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80049a2:	4694      	mov	ip, r2
 80049a4:	4463      	add	r3, ip
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	001a      	movs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a07      	ldr	r2, [pc, #28]	@ (80049d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80049b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	2203      	movs	r2, #3
 80049ba:	4013      	ands	r3, r2
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80049c4:	46c0      	nop			@ (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b004      	add	sp, #16
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	1000823f 	.word	0x1000823f
 80049d0:	40020940 	.word	0x40020940

080049d4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80049e2:	e153      	b.n	8004c8c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2101      	movs	r1, #1
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4091      	lsls	r1, r2
 80049ee:	000a      	movs	r2, r1
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d100      	bne.n	80049fc <HAL_GPIO_Init+0x28>
 80049fa:	e144      	b.n	8004c86 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x38>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b12      	cmp	r3, #18
 8004a0a:	d125      	bne.n	8004a58 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	08da      	lsrs	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3208      	adds	r2, #8
 8004a14:	0092      	lsls	r2, r2, #2
 8004a16:	58d3      	ldr	r3, [r2, r3]
 8004a18:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2207      	movs	r2, #7
 8004a1e:	4013      	ands	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	220f      	movs	r2, #15
 8004a24:	409a      	lsls	r2, r3
 8004a26:	0013      	movs	r3, r2
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	220f      	movs	r2, #15
 8004a36:	401a      	ands	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2107      	movs	r1, #7
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	409a      	lsls	r2, r3
 8004a42:	0013      	movs	r3, r2
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	08da      	lsrs	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3208      	adds	r2, #8
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	2203      	movs	r2, #3
 8004a64:	409a      	lsls	r2, r3
 8004a66:	0013      	movs	r3, r2
 8004a68:	43da      	mvns	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2203      	movs	r2, #3
 8004a76:	401a      	ands	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	0013      	movs	r3, r2
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d00b      	beq.n	8004aac <HAL_GPIO_Init+0xd8>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d007      	beq.n	8004aac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aa0:	2b11      	cmp	r3, #17
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b12      	cmp	r3, #18
 8004aaa:	d130      	bne.n	8004b0e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	0013      	movs	r3, r2
 8004abc:	43da      	mvns	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	409a      	lsls	r2, r3
 8004ace:	0013      	movs	r3, r2
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	0013      	movs	r3, r2
 8004aea:	43da      	mvns	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4013      	ands	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	2201      	movs	r2, #1
 8004afa:	401a      	ands	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	409a      	lsls	r2, r3
 8004b00:	0013      	movs	r3, r2
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d017      	beq.n	8004b46 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2203      	movs	r2, #3
 8004b22:	409a      	lsls	r2, r3
 8004b24:	0013      	movs	r3, r2
 8004b26:	43da      	mvns	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	409a      	lsls	r2, r3
 8004b38:	0013      	movs	r3, r2
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	2380      	movs	r3, #128	@ 0x80
 8004b4c:	055b      	lsls	r3, r3, #21
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d100      	bne.n	8004b54 <HAL_GPIO_Init+0x180>
 8004b52:	e098      	b.n	8004c86 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004b54:	4a53      	ldr	r2, [pc, #332]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	3318      	adds	r3, #24
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	589b      	ldr	r3, [r3, r2]
 8004b60:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2203      	movs	r2, #3
 8004b66:	4013      	ands	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	220f      	movs	r2, #15
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	0013      	movs	r3, r2
 8004b70:	43da      	mvns	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4013      	ands	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	23a0      	movs	r3, #160	@ 0xa0
 8004b7c:	05db      	lsls	r3, r3, #23
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d019      	beq.n	8004bb6 <HAL_GPIO_Init+0x1e2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a48      	ldr	r2, [pc, #288]	@ (8004ca8 <HAL_GPIO_Init+0x2d4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <HAL_GPIO_Init+0x1de>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a47      	ldr	r2, [pc, #284]	@ (8004cac <HAL_GPIO_Init+0x2d8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00d      	beq.n	8004bae <HAL_GPIO_Init+0x1da>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a46      	ldr	r2, [pc, #280]	@ (8004cb0 <HAL_GPIO_Init+0x2dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <HAL_GPIO_Init+0x1d6>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a45      	ldr	r2, [pc, #276]	@ (8004cb4 <HAL_GPIO_Init+0x2e0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <HAL_GPIO_Init+0x1d2>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e008      	b.n	8004bb8 <HAL_GPIO_Init+0x1e4>
 8004ba6:	2306      	movs	r3, #6
 8004ba8:	e006      	b.n	8004bb8 <HAL_GPIO_Init+0x1e4>
 8004baa:	2303      	movs	r3, #3
 8004bac:	e004      	b.n	8004bb8 <HAL_GPIO_Init+0x1e4>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e002      	b.n	8004bb8 <HAL_GPIO_Init+0x1e4>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_GPIO_Init+0x1e4>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	2103      	movs	r1, #3
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	00d2      	lsls	r2, r2, #3
 8004bc0:	4093      	lsls	r3, r2
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004bc8:	4936      	ldr	r1, [pc, #216]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	3318      	adds	r3, #24
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004bd6:	4a33      	ldr	r2, [pc, #204]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004bd8:	2380      	movs	r3, #128	@ 0x80
 8004bda:	58d3      	ldr	r3, [r2, r3]
 8004bdc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4013      	ands	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	025b      	lsls	r3, r3, #9
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004bfc:	4929      	ldr	r1, [pc, #164]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004bfe:	2280      	movs	r2, #128	@ 0x80
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004c04:	4a27      	ldr	r2, [pc, #156]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004c06:	2384      	movs	r3, #132	@ 0x84
 8004c08:	58d3      	ldr	r3, [r2, r3]
 8004c0a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4013      	ands	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	029b      	lsls	r3, r3, #10
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004c2a:	491e      	ldr	r1, [pc, #120]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004c2c:	2284      	movs	r2, #132	@ 0x84
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	035b      	lsls	r3, r3, #13
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004c56:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43da      	mvns	r2, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2380      	movs	r3, #128	@ 0x80
 8004c72:	039b      	lsls	r3, r3, #14
 8004c74:	4013      	ands	r3, r2
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004c80:	4b08      	ldr	r3, [pc, #32]	@ (8004ca4 <HAL_GPIO_Init+0x2d0>)
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	40da      	lsrs	r2, r3
 8004c94:	1e13      	subs	r3, r2, #0
 8004c96:	d000      	beq.n	8004c9a <HAL_GPIO_Init+0x2c6>
 8004c98:	e6a4      	b.n	80049e4 <HAL_GPIO_Init+0x10>
  }
}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	46c0      	nop			@ (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b006      	add	sp, #24
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021800 	.word	0x40021800
 8004ca8:	50000400 	.word	0x50000400
 8004cac:	50000800 	.word	0x50000800
 8004cb0:	50000c00 	.word	0x50000c00
 8004cb4:	50001400 	.word	0x50001400

08004cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	0008      	movs	r0, r1
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	1cbb      	adds	r3, r7, #2
 8004cc6:	1c02      	adds	r2, r0, #0
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	1c7b      	adds	r3, r7, #1
 8004ccc:	1c0a      	adds	r2, r1, #0
 8004cce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cd0:	1c7b      	adds	r3, r7, #1
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cd8:	1cbb      	adds	r3, r7, #2
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ce0:	e003      	b.n	8004cea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ce2:	1cbb      	adds	r3, r7, #2
 8004ce4:	881a      	ldrh	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	000a      	movs	r2, r1
 8004cfc:	1cbb      	adds	r3, r7, #2
 8004cfe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d06:	1cbb      	adds	r3, r7, #2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	041a      	lsls	r2, r3, #16
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	1cb9      	adds	r1, r7, #2
 8004d16:	8809      	ldrh	r1, [r1, #0]
 8004d18:	400b      	ands	r3, r1
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	619a      	str	r2, [r3, #24]
}
 8004d20:	46c0      	nop			@ (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b004      	add	sp, #16
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e08f      	b.n	8004e5a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2241      	movs	r2, #65	@ 0x41
 8004d3e:	5c9b      	ldrb	r3, [r3, r2]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2240      	movs	r2, #64	@ 0x40
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7fe f83b 	bl	8002dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2241      	movs	r2, #65	@ 0x41
 8004d5a:	2124      	movs	r1, #36	@ 0x24
 8004d5c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2101      	movs	r1, #1
 8004d6a:	438a      	bics	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	493b      	ldr	r1, [pc, #236]	@ (8004e64 <HAL_I2C_Init+0x13c>)
 8004d78:	400a      	ands	r2, r1
 8004d7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4938      	ldr	r1, [pc, #224]	@ (8004e68 <HAL_I2C_Init+0x140>)
 8004d88:	400a      	ands	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d108      	bne.n	8004da6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2180      	movs	r1, #128	@ 0x80
 8004d9e:	0209      	lsls	r1, r1, #8
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	e007      	b.n	8004db6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2184      	movs	r1, #132	@ 0x84
 8004db0:	0209      	lsls	r1, r1, #8
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d109      	bne.n	8004dd2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2180      	movs	r1, #128	@ 0x80
 8004dca:	0109      	lsls	r1, r1, #4
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	e007      	b.n	8004de2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4923      	ldr	r1, [pc, #140]	@ (8004e6c <HAL_I2C_Init+0x144>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4920      	ldr	r1, [pc, #128]	@ (8004e70 <HAL_I2C_Init+0x148>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	491a      	ldr	r1, [pc, #104]	@ (8004e68 <HAL_I2C_Init+0x140>)
 8004dfe:	400a      	ands	r2, r1
 8004e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2101      	movs	r1, #1
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2241      	movs	r2, #65	@ 0x41
 8004e46:	2120      	movs	r1, #32
 8004e48:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2242      	movs	r2, #66	@ 0x42
 8004e54:	2100      	movs	r1, #0
 8004e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	f0ffffff 	.word	0xf0ffffff
 8004e68:	ffff7fff 	.word	0xffff7fff
 8004e6c:	fffff7ff 	.word	0xfffff7ff
 8004e70:	02008000 	.word	0x02008000

08004e74 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	000c      	movs	r4, r1
 8004e7e:	0010      	movs	r0, r2
 8004e80:	0019      	movs	r1, r3
 8004e82:	230a      	movs	r3, #10
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	1c22      	adds	r2, r4, #0
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	1c02      	adds	r2, r0, #0
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	1dbb      	adds	r3, r7, #6
 8004e94:	1c0a      	adds	r2, r1, #0
 8004e96:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2241      	movs	r2, #65	@ 0x41
 8004e9c:	5c9b      	ldrb	r3, [r3, r2]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d000      	beq.n	8004ea6 <HAL_I2C_Mem_Read_IT+0x32>
 8004ea4:	e078      	b.n	8004f98 <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <HAL_I2C_Mem_Read_IT+0x42>
 8004eac:	2324      	movs	r3, #36	@ 0x24
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2280      	movs	r2, #128	@ 0x80
 8004eba:	0092      	lsls	r2, r2, #2
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e06b      	b.n	8004f9a <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699a      	ldr	r2, [r3, #24]
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	401a      	ands	r2, r3
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d101      	bne.n	8004eda <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e05f      	b.n	8004f9a <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2240      	movs	r2, #64	@ 0x40
 8004ede:	5c9b      	ldrb	r3, [r3, r2]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2C_Mem_Read_IT+0x74>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e058      	b.n	8004f9a <HAL_I2C_Mem_Read_IT+0x126>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2240      	movs	r2, #64	@ 0x40
 8004eec:	2101      	movs	r1, #1
 8004eee:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2241      	movs	r2, #65	@ 0x41
 8004ef4:	2122      	movs	r1, #34	@ 0x22
 8004ef6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2242      	movs	r2, #66	@ 0x42
 8004efc:	2140      	movs	r1, #64	@ 0x40
 8004efe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2224      	movs	r2, #36	@ 0x24
 8004f10:	18ba      	adds	r2, r7, r2
 8004f12:	8812      	ldrh	r2, [r2, #0]
 8004f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a22      	ldr	r2, [pc, #136]	@ (8004fa4 <HAL_I2C_Mem_Read_IT+0x130>)
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a22      	ldr	r2, [pc, #136]	@ (8004fa8 <HAL_I2C_Mem_Read_IT+0x134>)
 8004f20:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8004f22:	230a      	movs	r3, #10
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	881a      	ldrh	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f2c:	1dbb      	adds	r3, r7, #6
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d10b      	bne.n	8004f4c <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f34:	2308      	movs	r3, #8
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	4252      	negs	r2, r2
 8004f48:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f4a:	e00e      	b.n	8004f6a <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f4c:	2108      	movs	r1, #8
 8004f4e:	187b      	adds	r3, r7, r1
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	001a      	movs	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	230a      	movs	r3, #10
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	8819      	ldrh	r1, [r3, #0]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <HAL_I2C_Mem_Read_IT+0x138>)
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f001 fb61 	bl	8006644 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2240      	movs	r2, #64	@ 0x40
 8004f86:	2100      	movs	r1, #0
 8004f88:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f001 fb92 	bl	80066b8 <I2C_Enable_IRQ>

    return HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e000      	b.n	8004f9a <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
  }
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b005      	add	sp, #20
 8004fa0:	bd90      	pop	{r4, r7, pc}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	ffff0000 	.word	0xffff0000
 8004fa8:	08005119 	.word	0x08005119
 8004fac:	80002000 	.word	0x80002000

08004fb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
  }
}
 8004fdc:	46c0      	nop			@ (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b004      	add	sp, #16
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4013      	ands	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2280      	movs	r2, #128	@ 0x80
 800500a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800500c:	d00a      	beq.n	8005024 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	2201      	movs	r2, #1
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2280      	movs	r2, #128	@ 0x80
 8005020:	0052      	lsls	r2, r2, #1
 8005022:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	2380      	movs	r3, #128	@ 0x80
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4013      	ands	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2280      	movs	r2, #128	@ 0x80
 8005032:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005034:	d00a      	beq.n	800504c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503a:	2208      	movs	r2, #8
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2280      	movs	r2, #128	@ 0x80
 8005048:	00d2      	lsls	r2, r2, #3
 800504a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	2380      	movs	r3, #128	@ 0x80
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4013      	ands	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2280      	movs	r2, #128	@ 0x80
 800505a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800505c:	d00a      	beq.n	8005074 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	2202      	movs	r2, #2
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2280      	movs	r2, #128	@ 0x80
 8005070:	0092      	lsls	r2, r2, #2
 8005072:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005078:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	220b      	movs	r2, #11
 800507e:	4013      	ands	r3, r2
 8005080:	d005      	beq.n	800508e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f001 f96f 	bl	800636c <I2C_ITError>
  }
}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	b006      	add	sp, #24
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b002      	add	sp, #8
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b002      	add	sp, #8
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b002      	add	sp, #8
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b002      	add	sp, #8
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	0008      	movs	r0, r1
 80050e0:	0011      	movs	r1, r2
 80050e2:	1cfb      	adds	r3, r7, #3
 80050e4:	1c02      	adds	r2, r0, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	003b      	movs	r3, r7
 80050ea:	1c0a      	adds	r2, r1, #0
 80050ec:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	46bd      	mov	sp, r7
 8005102:	b002      	add	sp, #8
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b089      	sub	sp, #36	@ 0x24
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005124:	4b8b      	ldr	r3, [pc, #556]	@ (8005354 <I2C_Mem_ISR_IT+0x23c>)
 8005126:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2240      	movs	r2, #64	@ 0x40
 8005130:	5c9b      	ldrb	r3, [r3, r2]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <I2C_Mem_ISR_IT+0x22>
 8005136:	2302      	movs	r3, #2
 8005138:	e107      	b.n	800534a <I2C_Mem_ISR_IT+0x232>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2240      	movs	r2, #64	@ 0x40
 800513e:	2101      	movs	r1, #1
 8005140:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2210      	movs	r2, #16
 8005146:	4013      	ands	r3, r2
 8005148:	d012      	beq.n	8005170 <I2C_Mem_ISR_IT+0x58>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2210      	movs	r2, #16
 800514e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005150:	d00e      	beq.n	8005170 <I2C_Mem_ISR_IT+0x58>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2210      	movs	r2, #16
 8005158:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515e:	2204      	movs	r2, #4
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	0018      	movs	r0, r3
 800516a:	f001 fa2a 	bl	80065c2 <I2C_Flush_TXDR>
 800516e:	e0d9      	b.n	8005324 <I2C_Mem_ISR_IT+0x20c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2204      	movs	r2, #4
 8005174:	4013      	ands	r3, r2
 8005176:	d021      	beq.n	80051bc <I2C_Mem_ISR_IT+0xa4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2204      	movs	r2, #4
 800517c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800517e:	d01d      	beq.n	80051bc <I2C_Mem_ISR_IT+0xa4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2204      	movs	r2, #4
 8005184:	4393      	bics	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051ba:	e0b3      	b.n	8005324 <I2C_Mem_ISR_IT+0x20c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2202      	movs	r2, #2
 80051c0:	4013      	ands	r3, r2
 80051c2:	d02a      	beq.n	800521a <I2C_Mem_ISR_IT+0x102>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051ca:	d026      	beq.n	800521a <I2C_Mem_ISR_IT+0x102>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d0:	3301      	adds	r3, #1
 80051d2:	d118      	bne.n	8005206 <I2C_Mem_ISR_IT+0xee>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005204:	e08e      	b.n	8005324 <I2C_Mem_ISR_IT+0x20c>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800520e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	4252      	negs	r2, r2
 8005216:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005218:	e084      	b.n	8005324 <I2C_Mem_ISR_IT+0x20c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2280      	movs	r2, #128	@ 0x80
 800521e:	4013      	ands	r3, r2
 8005220:	d03c      	beq.n	800529c <I2C_Mem_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2240      	movs	r2, #64	@ 0x40
 8005226:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005228:	d038      	beq.n	800529c <I2C_Mem_ISR_IT+0x184>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d02c      	beq.n	800528e <I2C_Mem_ISR_IT+0x176>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d128      	bne.n	800528e <I2C_Mem_ISR_IT+0x176>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2bff      	cmp	r3, #255	@ 0xff
 8005244:	d910      	bls.n	8005268 <I2C_Mem_ISR_IT+0x150>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	22ff      	movs	r2, #255	@ 0xff
 800524a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005250:	b299      	uxth	r1, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005256:	b2da      	uxtb	r2, r3
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	045b      	lsls	r3, r3, #17
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	2400      	movs	r4, #0
 8005260:	9400      	str	r4, [sp, #0]
 8005262:	f001 f9ef 	bl	8006644 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005266:	e018      	b.n	800529a <I2C_Mem_ISR_IT+0x182>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	b299      	uxth	r1, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527c:	b2da      	uxtb	r2, r3
 800527e:	2380      	movs	r3, #128	@ 0x80
 8005280:	049b      	lsls	r3, r3, #18
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	2400      	movs	r4, #0
 8005286:	9400      	str	r4, [sp, #0]
 8005288:	f001 f9dc 	bl	8006644 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800528c:	e005      	b.n	800529a <I2C_Mem_ISR_IT+0x182>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2140      	movs	r1, #64	@ 0x40
 8005292:	0018      	movs	r0, r3
 8005294:	f001 f86a 	bl	800636c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005298:	e044      	b.n	8005324 <I2C_Mem_ISR_IT+0x20c>
 800529a:	e043      	b.n	8005324 <I2C_Mem_ISR_IT+0x20c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2240      	movs	r2, #64	@ 0x40
 80052a0:	4013      	ands	r3, r2
 80052a2:	d03f      	beq.n	8005324 <I2C_Mem_ISR_IT+0x20c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2240      	movs	r2, #64	@ 0x40
 80052a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80052aa:	d03b      	beq.n	8005324 <I2C_Mem_ISR_IT+0x20c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2101      	movs	r1, #1
 80052b0:	0018      	movs	r0, r3
 80052b2:	f001 fa8b 	bl	80067cc <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2102      	movs	r1, #2
 80052ba:	0018      	movs	r0, r3
 80052bc:	f001 f9fc 	bl	80066b8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2241      	movs	r2, #65	@ 0x41
 80052c4:	5c9b      	ldrb	r3, [r3, r2]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b22      	cmp	r3, #34	@ 0x22
 80052ca:	d101      	bne.n	80052d0 <I2C_Mem_ISR_IT+0x1b8>
    {
      direction = I2C_GENERATE_START_READ;
 80052cc:	4b22      	ldr	r3, [pc, #136]	@ (8005358 <I2C_Mem_ISR_IT+0x240>)
 80052ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2bff      	cmp	r3, #255	@ 0xff
 80052d8:	d911      	bls.n	80052fe <I2C_Mem_ISR_IT+0x1e6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	22ff      	movs	r2, #255	@ 0xff
 80052de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052e4:	b299      	uxth	r1, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	045c      	lsls	r4, r3, #17
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	0023      	movs	r3, r4
 80052f8:	f001 f9a4 	bl	8006644 <I2C_TransferConfig>
 80052fc:	e012      	b.n	8005324 <I2C_Mem_ISR_IT+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530c:	b299      	uxth	r1, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005312:	b2da      	uxtb	r2, r3
 8005314:	2380      	movs	r3, #128	@ 0x80
 8005316:	049c      	lsls	r4, r3, #18
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	0023      	movs	r3, r4
 8005320:	f001 f990 	bl	8006644 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2220      	movs	r2, #32
 8005328:	4013      	ands	r3, r2
 800532a:	d009      	beq.n	8005340 <I2C_Mem_ISR_IT+0x228>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005332:	d005      	beq.n	8005340 <I2C_Mem_ISR_IT+0x228>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	0011      	movs	r1, r2
 800533a:	0018      	movs	r0, r3
 800533c:	f000 fd68 	bl	8005e10 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2240      	movs	r2, #64	@ 0x40
 8005344:	2100      	movs	r1, #0
 8005346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b007      	add	sp, #28
 8005350:	bd90      	pop	{r4, r7, pc}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	80002000 	.word	0x80002000
 8005358:	80002400 	.word	0x80002400

0800535c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2240      	movs	r2, #64	@ 0x40
 8005376:	5c9b      	ldrb	r3, [r3, r2]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <I2C_Slave_ISR_IT+0x24>
 800537c:	2302      	movs	r3, #2
 800537e:	e0e7      	b.n	8005550 <I2C_Slave_ISR_IT+0x1f4>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2240      	movs	r2, #64	@ 0x40
 8005384:	2101      	movs	r1, #1
 8005386:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2220      	movs	r2, #32
 800538c:	4013      	ands	r3, r2
 800538e:	d00a      	beq.n	80053a6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005396:	d006      	beq.n	80053a6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	0011      	movs	r1, r2
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fe04 	bl	8005fac <I2C_ITSlaveCplt>
 80053a4:	e0cf      	b.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2210      	movs	r2, #16
 80053aa:	4013      	ands	r3, r2
 80053ac:	d052      	beq.n	8005454 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2210      	movs	r2, #16
 80053b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053b4:	d04e      	beq.n	8005454 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d12d      	bne.n	800541c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2241      	movs	r2, #65	@ 0x41
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b28      	cmp	r3, #40	@ 0x28
 80053ca:	d10b      	bne.n	80053e4 <I2C_Slave_ISR_IT+0x88>
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	049b      	lsls	r3, r3, #18
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d106      	bne.n	80053e4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 ff6d 	bl	80062bc <I2C_ITListenCplt>
 80053e2:	e036      	b.n	8005452 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2241      	movs	r2, #65	@ 0x41
 80053e8:	5c9b      	ldrb	r3, [r3, r2]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b29      	cmp	r3, #41	@ 0x29
 80053ee:	d110      	bne.n	8005412 <I2C_Slave_ISR_IT+0xb6>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4a59      	ldr	r2, [pc, #356]	@ (8005558 <I2C_Slave_ISR_IT+0x1fc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00c      	beq.n	8005412 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2210      	movs	r2, #16
 80053fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	0018      	movs	r0, r3
 8005404:	f001 f8dd 	bl	80065c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 fc9c 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 8005410:	e01f      	b.n	8005452 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2210      	movs	r2, #16
 8005418:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800541a:	e091      	b.n	8005540 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2210      	movs	r2, #16
 8005422:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005428:	2204      	movs	r2, #4
 800542a:	431a      	orrs	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <I2C_Slave_ISR_IT+0xe6>
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	2380      	movs	r3, #128	@ 0x80
 800543a:	045b      	lsls	r3, r3, #17
 800543c:	429a      	cmp	r2, r3
 800543e:	d000      	beq.n	8005442 <I2C_Slave_ISR_IT+0xe6>
 8005440:	e07e      	b.n	8005540 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	0011      	movs	r1, r2
 800544a:	0018      	movs	r0, r3
 800544c:	f000 ff8e 	bl	800636c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005450:	e076      	b.n	8005540 <I2C_Slave_ISR_IT+0x1e4>
 8005452:	e075      	b.n	8005540 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2204      	movs	r2, #4
 8005458:	4013      	ands	r3, r2
 800545a:	d02f      	beq.n	80054bc <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2204      	movs	r2, #4
 8005460:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005462:	d02b      	beq.n	80054bc <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d14c      	bne.n	8005544 <I2C_Slave_ISR_IT+0x1e8>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005558 <I2C_Slave_ISR_IT+0x1fc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d048      	beq.n	8005544 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 fc47 	bl	8005d48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80054ba:	e043      	b.n	8005544 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2208      	movs	r2, #8
 80054c0:	4013      	ands	r3, r2
 80054c2:	d00a      	beq.n	80054da <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2208      	movs	r2, #8
 80054c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054ca:	d006      	beq.n	80054da <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	0011      	movs	r1, r2
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 fb52 	bl	8005b7c <I2C_ITAddrCplt>
 80054d8:	e035      	b.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2202      	movs	r2, #2
 80054de:	4013      	ands	r3, r2
 80054e0:	d031      	beq.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054e8:	d02d      	beq.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d018      	beq.n	8005526 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005524:	e00f      	b.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	045b      	lsls	r3, r3, #17
 800552c:	429a      	cmp	r2, r3
 800552e:	d002      	beq.n	8005536 <I2C_Slave_ISR_IT+0x1da>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d107      	bne.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	0018      	movs	r0, r3
 800553a:	f000 fc05 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 800553e:	e002      	b.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8005540:	46c0      	nop			@ (mov r8, r8)
 8005542:	e000      	b.n	8005546 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8005544:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2240      	movs	r2, #64	@ 0x40
 800554a:	2100      	movs	r1, #0
 800554c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	0018      	movs	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	b006      	add	sp, #24
 8005556:	bd80      	pop	{r7, pc}
 8005558:	ffff0000 	.word	0xffff0000

0800555c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b089      	sub	sp, #36	@ 0x24
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2240      	movs	r2, #64	@ 0x40
 800556c:	5c9b      	ldrb	r3, [r3, r2]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <I2C_Master_ISR_DMA+0x1a>
 8005572:	2302      	movs	r3, #2
 8005574:	e0e7      	b.n	8005746 <I2C_Master_ISR_DMA+0x1ea>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2240      	movs	r2, #64	@ 0x40
 800557a:	2101      	movs	r1, #1
 800557c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2210      	movs	r2, #16
 8005582:	4013      	ands	r3, r2
 8005584:	d017      	beq.n	80055b6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2210      	movs	r2, #16
 800558a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800558c:	d013      	beq.n	80055b6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2210      	movs	r2, #16
 8005594:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	2204      	movs	r2, #4
 800559c:	431a      	orrs	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2120      	movs	r1, #32
 80055a6:	0018      	movs	r0, r3
 80055a8:	f001 f886 	bl	80066b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	0018      	movs	r0, r3
 80055b0:	f001 f807 	bl	80065c2 <I2C_Flush_TXDR>
 80055b4:	e0c2      	b.n	800573c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2280      	movs	r2, #128	@ 0x80
 80055ba:	4013      	ands	r3, r2
 80055bc:	d100      	bne.n	80055c0 <I2C_Master_ISR_DMA+0x64>
 80055be:	e07c      	b.n	80056ba <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2240      	movs	r2, #64	@ 0x40
 80055c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055c6:	d100      	bne.n	80055ca <I2C_Master_ISR_DMA+0x6e>
 80055c8:	e077      	b.n	80056ba <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2140      	movs	r1, #64	@ 0x40
 80055d6:	438a      	bics	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d055      	beq.n	8005690 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	2312      	movs	r3, #18
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	0592      	lsls	r2, r2, #22
 80055f2:	0d92      	lsrs	r2, r2, #22
 80055f4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2bff      	cmp	r3, #255	@ 0xff
 80055fe:	d906      	bls.n	800560e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	22ff      	movs	r2, #255	@ 0xff
 8005604:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	045b      	lsls	r3, r3, #17
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e010      	b.n	8005630 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	4a4c      	ldr	r2, [pc, #304]	@ (8005750 <I2C_Master_ISR_DMA+0x1f4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e002      	b.n	8005630 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800562a:	2380      	movs	r3, #128	@ 0x80
 800562c:	049b      	lsls	r3, r3, #18
 800562e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005634:	b2da      	uxtb	r2, r3
 8005636:	697c      	ldr	r4, [r7, #20]
 8005638:	2312      	movs	r3, #18
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	8819      	ldrh	r1, [r3, #0]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	0023      	movs	r3, r4
 8005646:	f000 fffd 	bl	8006644 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2241      	movs	r2, #65	@ 0x41
 8005660:	5c9b      	ldrb	r3, [r3, r2]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b22      	cmp	r3, #34	@ 0x22
 8005666:	d109      	bne.n	800567c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2180      	movs	r1, #128	@ 0x80
 8005674:	0209      	lsls	r1, r1, #8
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800567a:	e05f      	b.n	800573c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2180      	movs	r1, #128	@ 0x80
 8005688:	01c9      	lsls	r1, r1, #7
 800568a:	430a      	orrs	r2, r1
 800568c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800568e:	e055      	b.n	800573c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	049b      	lsls	r3, r3, #18
 800569a:	401a      	ands	r2, r3
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	049b      	lsls	r3, r3, #18
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d004      	beq.n	80056ae <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 fb0c 	bl	8005cc4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80056ac:	e046      	b.n	800573c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2140      	movs	r1, #64	@ 0x40
 80056b2:	0018      	movs	r0, r3
 80056b4:	f000 fe5a 	bl	800636c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80056b8:	e040      	b.n	800573c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2240      	movs	r2, #64	@ 0x40
 80056be:	4013      	ands	r3, r2
 80056c0:	d02c      	beq.n	800571c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2240      	movs	r2, #64	@ 0x40
 80056c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056c8:	d028      	beq.n	800571c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11d      	bne.n	8005710 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	2380      	movs	r3, #128	@ 0x80
 80056dc:	049b      	lsls	r3, r3, #18
 80056de:	401a      	ands	r2, r3
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	049b      	lsls	r3, r3, #18
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d028      	beq.n	800573a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	4a18      	ldr	r2, [pc, #96]	@ (8005750 <I2C_Master_ISR_DMA+0x1f4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d109      	bne.n	8005706 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2180      	movs	r1, #128	@ 0x80
 80056fe:	01c9      	lsls	r1, r1, #7
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005704:	e019      	b.n	800573a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	0018      	movs	r0, r3
 800570a:	f000 fadb 	bl	8005cc4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800570e:	e014      	b.n	800573a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2140      	movs	r1, #64	@ 0x40
 8005714:	0018      	movs	r0, r3
 8005716:	f000 fe29 	bl	800636c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800571a:	e00e      	b.n	800573a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2220      	movs	r2, #32
 8005720:	4013      	ands	r3, r2
 8005722:	d00b      	beq.n	800573c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800572a:	d007      	beq.n	800573c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	0011      	movs	r1, r2
 8005732:	0018      	movs	r0, r3
 8005734:	f000 fb6c 	bl	8005e10 <I2C_ITMasterCplt>
 8005738:	e000      	b.n	800573c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800573a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2240      	movs	r2, #64	@ 0x40
 8005740:	2100      	movs	r1, #0
 8005742:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	0018      	movs	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	b007      	add	sp, #28
 800574c:	bd90      	pop	{r4, r7, pc}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	ffff0000 	.word	0xffff0000

08005754 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b089      	sub	sp, #36	@ 0x24
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005760:	4b90      	ldr	r3, [pc, #576]	@ (80059a4 <I2C_Mem_ISR_DMA+0x250>)
 8005762:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2240      	movs	r2, #64	@ 0x40
 8005768:	5c9b      	ldrb	r3, [r3, r2]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <I2C_Mem_ISR_DMA+0x1e>
 800576e:	2302      	movs	r3, #2
 8005770:	e113      	b.n	800599a <I2C_Mem_ISR_DMA+0x246>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2240      	movs	r2, #64	@ 0x40
 8005776:	2101      	movs	r1, #1
 8005778:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2210      	movs	r2, #16
 800577e:	4013      	ands	r3, r2
 8005780:	d017      	beq.n	80057b2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2210      	movs	r2, #16
 8005786:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005788:	d013      	beq.n	80057b2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2210      	movs	r2, #16
 8005790:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005796:	2204      	movs	r2, #4
 8005798:	431a      	orrs	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2120      	movs	r1, #32
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 ff88 	bl	80066b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	0018      	movs	r0, r3
 80057ac:	f000 ff09 	bl	80065c2 <I2C_Flush_TXDR>
 80057b0:	e0ee      	b.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2202      	movs	r2, #2
 80057b6:	4013      	ands	r3, r2
 80057b8:	d00d      	beq.n	80057d6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057c0:	d009      	beq.n	80057d6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	4252      	negs	r2, r2
 80057d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80057d4:	e0dc      	b.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2280      	movs	r2, #128	@ 0x80
 80057da:	4013      	ands	r3, r2
 80057dc:	d063      	beq.n	80058a6 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2240      	movs	r2, #64	@ 0x40
 80057e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80057e4:	d05f      	beq.n	80058a6 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2101      	movs	r1, #1
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 ffee 	bl	80067cc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2110      	movs	r1, #16
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 ff5f 	bl	80066b8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d04a      	beq.n	800589a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	2bff      	cmp	r3, #255	@ 0xff
 800580c:	d910      	bls.n	8005830 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	22ff      	movs	r2, #255	@ 0xff
 8005812:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005818:	b299      	uxth	r1, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	2380      	movs	r3, #128	@ 0x80
 8005822:	045b      	lsls	r3, r3, #17
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	2400      	movs	r4, #0
 8005828:	9400      	str	r4, [sp, #0]
 800582a:	f000 ff0b 	bl	8006644 <I2C_TransferConfig>
 800582e:	e011      	b.n	8005854 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583e:	b299      	uxth	r1, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005844:	b2da      	uxtb	r2, r3
 8005846:	2380      	movs	r3, #128	@ 0x80
 8005848:	049b      	lsls	r3, r3, #18
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	2400      	movs	r4, #0
 800584e:	9400      	str	r4, [sp, #0]
 8005850:	f000 fef8 	bl	8006644 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2241      	movs	r2, #65	@ 0x41
 800586a:	5c9b      	ldrb	r3, [r3, r2]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b22      	cmp	r3, #34	@ 0x22
 8005870:	d109      	bne.n	8005886 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2180      	movs	r1, #128	@ 0x80
 800587e:	0209      	lsls	r1, r1, #8
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005884:	e084      	b.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2180      	movs	r1, #128	@ 0x80
 8005892:	01c9      	lsls	r1, r1, #7
 8005894:	430a      	orrs	r2, r1
 8005896:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005898:	e07a      	b.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2140      	movs	r1, #64	@ 0x40
 800589e:	0018      	movs	r0, r3
 80058a0:	f000 fd64 	bl	800636c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80058a4:	e074      	b.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2240      	movs	r2, #64	@ 0x40
 80058aa:	4013      	ands	r3, r2
 80058ac:	d062      	beq.n	8005974 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2240      	movs	r2, #64	@ 0x40
 80058b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80058b4:	d05e      	beq.n	8005974 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2101      	movs	r1, #1
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 ff86 	bl	80067cc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2110      	movs	r1, #16
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 fef7 	bl	80066b8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2241      	movs	r2, #65	@ 0x41
 80058ce:	5c9b      	ldrb	r3, [r3, r2]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b22      	cmp	r3, #34	@ 0x22
 80058d4:	d101      	bne.n	80058da <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 80058d6:	4b34      	ldr	r3, [pc, #208]	@ (80059a8 <I2C_Mem_ISR_DMA+0x254>)
 80058d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2bff      	cmp	r3, #255	@ 0xff
 80058e2:	d911      	bls.n	8005908 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	22ff      	movs	r2, #255	@ 0xff
 80058e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	b299      	uxth	r1, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	2380      	movs	r3, #128	@ 0x80
 80058f8:	045c      	lsls	r4, r3, #17
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	0023      	movs	r3, r4
 8005902:	f000 fe9f 	bl	8006644 <I2C_TransferConfig>
 8005906:	e012      	b.n	800592e <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005916:	b299      	uxth	r1, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591c:	b2da      	uxtb	r2, r3
 800591e:	2380      	movs	r3, #128	@ 0x80
 8005920:	049c      	lsls	r4, r3, #18
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	0023      	movs	r3, r4
 800592a:	f000 fe8b 	bl	8006644 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2241      	movs	r2, #65	@ 0x41
 8005944:	5c9b      	ldrb	r3, [r3, r2]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b22      	cmp	r3, #34	@ 0x22
 800594a:	d109      	bne.n	8005960 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2180      	movs	r1, #128	@ 0x80
 8005958:	0209      	lsls	r1, r1, #8
 800595a:	430a      	orrs	r2, r1
 800595c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800595e:	e017      	b.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2180      	movs	r1, #128	@ 0x80
 800596c:	01c9      	lsls	r1, r1, #7
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005972:	e00d      	b.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2220      	movs	r2, #32
 8005978:	4013      	ands	r3, r2
 800597a:	d009      	beq.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005982:	d005      	beq.n	8005990 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	0011      	movs	r1, r2
 800598a:	0018      	movs	r0, r3
 800598c:	f000 fa40 	bl	8005e10 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2240      	movs	r2, #64	@ 0x40
 8005994:	2100      	movs	r1, #0
 8005996:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b007      	add	sp, #28
 80059a0:	bd90      	pop	{r4, r7, pc}
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	80002000 	.word	0x80002000
 80059a8:	80002400 	.word	0x80002400

080059ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2240      	movs	r2, #64	@ 0x40
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <I2C_Slave_ISR_DMA+0x24>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e0ce      	b.n	8005b6e <I2C_Slave_ISR_DMA+0x1c2>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2240      	movs	r2, #64	@ 0x40
 80059d4:	2101      	movs	r1, #1
 80059d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2220      	movs	r2, #32
 80059dc:	4013      	ands	r3, r2
 80059de:	d00a      	beq.n	80059f6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059e6:	d006      	beq.n	80059f6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	0011      	movs	r1, r2
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fadc 	bl	8005fac <I2C_ITSlaveCplt>
 80059f4:	e0b6      	b.n	8005b64 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2210      	movs	r2, #16
 80059fa:	4013      	ands	r3, r2
 80059fc:	d100      	bne.n	8005a00 <I2C_Slave_ISR_DMA+0x54>
 80059fe:	e0a3      	b.n	8005b48 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2210      	movs	r2, #16
 8005a04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a06:	d100      	bne.n	8005a0a <I2C_Slave_ISR_DMA+0x5e>
 8005a08:	e09e      	b.n	8005b48 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	2380      	movs	r3, #128	@ 0x80
 8005a0e:	01db      	lsls	r3, r3, #7
 8005a10:	4013      	ands	r3, r2
 8005a12:	d105      	bne.n	8005a20 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	2380      	movs	r3, #128	@ 0x80
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a1c:	d100      	bne.n	8005a20 <I2C_Slave_ISR_DMA+0x74>
 8005a1e:	e08c      	b.n	8005b3a <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	2380      	movs	r3, #128	@ 0x80
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d007      	beq.n	8005a42 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	2380      	movs	r3, #128	@ 0x80
 8005a4e:	01db      	lsls	r3, r3, #7
 8005a50:	4013      	ands	r3, r2
 8005a52:	d007      	beq.n	8005a64 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8005a60:	2301      	movs	r3, #1
 8005a62:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d12d      	bne.n	8005ac6 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2241      	movs	r2, #65	@ 0x41
 8005a6e:	5c9b      	ldrb	r3, [r3, r2]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b28      	cmp	r3, #40	@ 0x28
 8005a74:	d10b      	bne.n	8005a8e <I2C_Slave_ISR_DMA+0xe2>
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	2380      	movs	r3, #128	@ 0x80
 8005a7a:	049b      	lsls	r3, r3, #18
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d106      	bne.n	8005a8e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 fc18 	bl	80062bc <I2C_ITListenCplt>
 8005a8c:	e054      	b.n	8005b38 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2241      	movs	r2, #65	@ 0x41
 8005a92:	5c9b      	ldrb	r3, [r3, r2]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b29      	cmp	r3, #41	@ 0x29
 8005a98:	d110      	bne.n	8005abc <I2C_Slave_ISR_DMA+0x110>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	4a36      	ldr	r2, [pc, #216]	@ (8005b78 <I2C_Slave_ISR_DMA+0x1cc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00c      	beq.n	8005abc <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	0018      	movs	r0, r3
 8005aae:	f000 fd88 	bl	80065c2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 f947 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 8005aba:	e03d      	b.n	8005b38 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005ac4:	e03e      	b.n	8005b44 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2210      	movs	r2, #16
 8005acc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005ada:	2317      	movs	r3, #23
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	2141      	movs	r1, #65	@ 0x41
 8005ae2:	5c52      	ldrb	r2, [r2, r1]
 8005ae4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <I2C_Slave_ISR_DMA+0x14a>
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	2380      	movs	r3, #128	@ 0x80
 8005af0:	045b      	lsls	r3, r3, #17
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d126      	bne.n	8005b44 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005af6:	2217      	movs	r2, #23
 8005af8:	18bb      	adds	r3, r7, r2
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b21      	cmp	r3, #33	@ 0x21
 8005afe:	d003      	beq.n	8005b08 <I2C_Slave_ISR_DMA+0x15c>
 8005b00:	18bb      	adds	r3, r7, r2
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b29      	cmp	r3, #41	@ 0x29
 8005b06:	d103      	bne.n	8005b10 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2221      	movs	r2, #33	@ 0x21
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b0e:	e00b      	b.n	8005b28 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b10:	2217      	movs	r2, #23
 8005b12:	18bb      	adds	r3, r7, r2
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b22      	cmp	r3, #34	@ 0x22
 8005b18:	d003      	beq.n	8005b22 <I2C_Slave_ISR_DMA+0x176>
 8005b1a:	18bb      	adds	r3, r7, r2
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b20:	d102      	bne.n	8005b28 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2222      	movs	r2, #34	@ 0x22
 8005b26:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	0011      	movs	r1, r2
 8005b30:	0018      	movs	r0, r3
 8005b32:	f000 fc1b 	bl	800636c <I2C_ITError>
      if (treatdmanack == 1U)
 8005b36:	e005      	b.n	8005b44 <I2C_Slave_ISR_DMA+0x198>
 8005b38:	e004      	b.n	8005b44 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2210      	movs	r2, #16
 8005b40:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b42:	e00f      	b.n	8005b64 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8005b44:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b46:	e00d      	b.n	8005b64 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2208      	movs	r2, #8
 8005b54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b56:	d005      	beq.n	8005b64 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	0011      	movs	r1, r2
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 f80c 	bl	8005b7c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2240      	movs	r2, #64	@ 0x40
 8005b68:	2100      	movs	r1, #0
 8005b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b008      	add	sp, #32
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	46c0      	nop			@ (mov r8, r8)
 8005b78:	ffff0000 	.word	0xffff0000

08005b7c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b7c:	b5b0      	push	{r4, r5, r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2241      	movs	r2, #65	@ 0x41
 8005b8a:	5c9b      	ldrb	r3, [r3, r2]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	001a      	movs	r2, r3
 8005b90:	2328      	movs	r3, #40	@ 0x28
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b28      	cmp	r3, #40	@ 0x28
 8005b96:	d000      	beq.n	8005b9a <I2C_ITAddrCplt+0x1e>
 8005b98:	e088      	b.n	8005cac <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	250f      	movs	r5, #15
 8005ba6:	197b      	adds	r3, r7, r5
 8005ba8:	2101      	movs	r1, #1
 8005baa:	400a      	ands	r2, r1
 8005bac:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	200c      	movs	r0, #12
 8005bba:	183b      	adds	r3, r7, r0
 8005bbc:	21fe      	movs	r1, #254	@ 0xfe
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	240a      	movs	r4, #10
 8005bcc:	193b      	adds	r3, r7, r4
 8005bce:	0592      	lsls	r2, r2, #22
 8005bd0:	0d92      	lsrs	r2, r2, #22
 8005bd2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	2308      	movs	r3, #8
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	21fe      	movs	r1, #254	@ 0xfe
 8005be2:	400a      	ands	r2, r1
 8005be4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d148      	bne.n	8005c80 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005bee:	0021      	movs	r1, r4
 8005bf0:	187b      	adds	r3, r7, r1
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	09db      	lsrs	r3, r3, #7
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	183b      	adds	r3, r7, r0
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	4053      	eors	r3, r2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	001a      	movs	r2, r3
 8005c02:	2306      	movs	r3, #6
 8005c04:	4013      	ands	r3, r2
 8005c06:	d120      	bne.n	8005c4a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005c08:	183b      	adds	r3, r7, r0
 8005c0a:	187a      	adds	r2, r7, r1
 8005c0c:	8812      	ldrh	r2, [r2, #0]
 8005c0e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d14c      	bne.n	8005cbc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2240      	movs	r2, #64	@ 0x40
 8005c34:	2100      	movs	r1, #0
 8005c36:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c38:	183b      	adds	r3, r7, r0
 8005c3a:	881a      	ldrh	r2, [r3, #0]
 8005c3c:	197b      	adds	r3, r7, r5
 8005c3e:	7819      	ldrb	r1, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f7ff fa47 	bl	80050d6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c48:	e038      	b.n	8005cbc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005c4a:	240c      	movs	r4, #12
 8005c4c:	193b      	adds	r3, r7, r4
 8005c4e:	2208      	movs	r2, #8
 8005c50:	18ba      	adds	r2, r7, r2
 8005c52:	8812      	ldrh	r2, [r2, #0]
 8005c54:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c56:	2380      	movs	r3, #128	@ 0x80
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0011      	movs	r1, r2
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 fdb4 	bl	80067cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2240      	movs	r2, #64	@ 0x40
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c6c:	193b      	adds	r3, r7, r4
 8005c6e:	881a      	ldrh	r2, [r3, #0]
 8005c70:	230f      	movs	r3, #15
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	7819      	ldrb	r1, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f7ff fa2c 	bl	80050d6 <HAL_I2C_AddrCallback>
}
 8005c7e:	e01d      	b.n	8005cbc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0011      	movs	r1, r2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fd9f 	bl	80067cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2240      	movs	r2, #64	@ 0x40
 8005c92:	2100      	movs	r1, #0
 8005c94:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c96:	230c      	movs	r3, #12
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	881a      	ldrh	r2, [r3, #0]
 8005c9c:	230f      	movs	r3, #15
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	7819      	ldrb	r1, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7ff fa16 	bl	80050d6 <HAL_I2C_AddrCallback>
}
 8005caa:	e007      	b.n	8005cbc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2240      	movs	r2, #64	@ 0x40
 8005cb8:	2100      	movs	r1, #0
 8005cba:	5499      	strb	r1, [r3, r2]
}
 8005cbc:	46c0      	nop			@ (mov r8, r8)
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b004      	add	sp, #16
 8005cc2:	bdb0      	pop	{r4, r5, r7, pc}

08005cc4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2242      	movs	r2, #66	@ 0x42
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2241      	movs	r2, #65	@ 0x41
 8005cd8:	5c9b      	ldrb	r3, [r3, r2]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b21      	cmp	r3, #33	@ 0x21
 8005cde:	d117      	bne.n	8005d10 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2241      	movs	r2, #65	@ 0x41
 8005ce4:	2120      	movs	r1, #32
 8005ce6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2211      	movs	r2, #17
 8005cec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 fd67 	bl	80067cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2240      	movs	r2, #64	@ 0x40
 8005d02:	2100      	movs	r1, #0
 8005d04:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7ff f9c4 	bl	8005096 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d0e:	e016      	b.n	8005d3e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2241      	movs	r2, #65	@ 0x41
 8005d14:	2120      	movs	r1, #32
 8005d16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2212      	movs	r2, #18
 8005d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2102      	movs	r1, #2
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f000 fd4f 	bl	80067cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2240      	movs	r2, #64	@ 0x40
 8005d32:	2100      	movs	r1, #0
 8005d34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f7ff f9b4 	bl	80050a6 <HAL_I2C_MasterRxCpltCallback>
}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b002      	add	sp, #8
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2242      	movs	r2, #66	@ 0x42
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	2380      	movs	r3, #128	@ 0x80
 8005d64:	01db      	lsls	r3, r3, #7
 8005d66:	4013      	ands	r3, r2
 8005d68:	d008      	beq.n	8005d7c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4924      	ldr	r1, [pc, #144]	@ (8005e08 <I2C_ITSlaveSeqCplt+0xc0>)
 8005d76:	400a      	ands	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e00c      	b.n	8005d96 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	2380      	movs	r3, #128	@ 0x80
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	4013      	ands	r3, r2
 8005d84:	d007      	beq.n	8005d96 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	491e      	ldr	r1, [pc, #120]	@ (8005e0c <I2C_ITSlaveSeqCplt+0xc4>)
 8005d92:	400a      	ands	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2241      	movs	r2, #65	@ 0x41
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b29      	cmp	r3, #41	@ 0x29
 8005da0:	d114      	bne.n	8005dcc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2241      	movs	r2, #65	@ 0x41
 8005da6:	2128      	movs	r1, #40	@ 0x28
 8005da8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2221      	movs	r2, #33	@ 0x21
 8005dae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2101      	movs	r1, #1
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 fd09 	bl	80067cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2240      	movs	r2, #64	@ 0x40
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7ff f976 	bl	80050b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dca:	e019      	b.n	8005e00 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2241      	movs	r2, #65	@ 0x41
 8005dd0:	5c9b      	ldrb	r3, [r3, r2]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dd6:	d113      	bne.n	8005e00 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2241      	movs	r2, #65	@ 0x41
 8005ddc:	2128      	movs	r1, #40	@ 0x28
 8005dde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2222      	movs	r2, #34	@ 0x22
 8005de4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2102      	movs	r1, #2
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 fcee 	bl	80067cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2240      	movs	r2, #64	@ 0x40
 8005df4:	2100      	movs	r1, #0
 8005df6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7ff f963 	bl	80050c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e00:	46c0      	nop			@ (mov r8, r8)
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b004      	add	sp, #16
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	ffffbfff 	.word	0xffffbfff
 8005e0c:	ffff7fff 	.word	0xffff7fff

08005e10 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2220      	movs	r2, #32
 8005e24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2241      	movs	r2, #65	@ 0x41
 8005e2a:	5c9b      	ldrb	r3, [r3, r2]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b21      	cmp	r3, #33	@ 0x21
 8005e30:	d108      	bne.n	8005e44 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2101      	movs	r1, #1
 8005e36:	0018      	movs	r0, r3
 8005e38:	f000 fcc8 	bl	80067cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2211      	movs	r2, #17
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e42:	e00d      	b.n	8005e60 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2241      	movs	r2, #65	@ 0x41
 8005e48:	5c9b      	ldrb	r3, [r3, r2]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b22      	cmp	r3, #34	@ 0x22
 8005e4e:	d107      	bne.n	8005e60 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2102      	movs	r1, #2
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 fcb9 	bl	80067cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2212      	movs	r2, #18
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	494e      	ldr	r1, [pc, #312]	@ (8005fa4 <I2C_ITMasterCplt+0x194>)
 8005e6c:	400a      	ands	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a4b      	ldr	r2, [pc, #300]	@ (8005fa8 <I2C_ITMasterCplt+0x198>)
 8005e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	4013      	ands	r3, r2
 8005e82:	d009      	beq.n	8005e98 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2210      	movs	r2, #16
 8005e8a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e90:	2204      	movs	r2, #4
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2241      	movs	r2, #65	@ 0x41
 8005e9c:	5c9b      	ldrb	r3, [r3, r2]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b60      	cmp	r3, #96	@ 0x60
 8005ea2:	d109      	bne.n	8005eb8 <I2C_ITMasterCplt+0xa8>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d005      	beq.n	8005eb8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 fb81 	bl	80065c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2241      	movs	r2, #65	@ 0x41
 8005eca:	5c9b      	ldrb	r3, [r3, r2]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b60      	cmp	r3, #96	@ 0x60
 8005ed0:	d002      	beq.n	8005ed8 <I2C_ITMasterCplt+0xc8>
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	0011      	movs	r1, r2
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f000 fa43 	bl	800636c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ee6:	e058      	b.n	8005f9a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2241      	movs	r2, #65	@ 0x41
 8005eec:	5c9b      	ldrb	r3, [r3, r2]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b21      	cmp	r3, #33	@ 0x21
 8005ef2:	d126      	bne.n	8005f42 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2241      	movs	r2, #65	@ 0x41
 8005ef8:	2120      	movs	r1, #32
 8005efa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2242      	movs	r2, #66	@ 0x42
 8005f06:	5c9b      	ldrb	r3, [r3, r2]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b40      	cmp	r3, #64	@ 0x40
 8005f0c:	d10c      	bne.n	8005f28 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2242      	movs	r2, #66	@ 0x42
 8005f12:	2100      	movs	r1, #0
 8005f14:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2240      	movs	r2, #64	@ 0x40
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7fb f98b 	bl	800123c <HAL_I2C_MemTxCpltCallback>
}
 8005f26:	e038      	b.n	8005f9a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2242      	movs	r2, #66	@ 0x42
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2240      	movs	r2, #64	@ 0x40
 8005f34:	2100      	movs	r1, #0
 8005f36:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7ff f8ab 	bl	8005096 <HAL_I2C_MasterTxCpltCallback>
}
 8005f40:	e02b      	b.n	8005f9a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2241      	movs	r2, #65	@ 0x41
 8005f46:	5c9b      	ldrb	r3, [r3, r2]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b22      	cmp	r3, #34	@ 0x22
 8005f4c:	d125      	bne.n	8005f9a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2241      	movs	r2, #65	@ 0x41
 8005f52:	2120      	movs	r1, #32
 8005f54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2242      	movs	r2, #66	@ 0x42
 8005f60:	5c9b      	ldrb	r3, [r3, r2]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d10c      	bne.n	8005f82 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2242      	movs	r2, #66	@ 0x42
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2240      	movs	r2, #64	@ 0x40
 8005f74:	2100      	movs	r1, #0
 8005f76:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7fb f96c 	bl	8001258 <HAL_I2C_MemRxCpltCallback>
}
 8005f80:	e00b      	b.n	8005f9a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2242      	movs	r2, #66	@ 0x42
 8005f86:	2100      	movs	r1, #0
 8005f88:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2240      	movs	r2, #64	@ 0x40
 8005f8e:	2100      	movs	r1, #0
 8005f90:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7ff f886 	bl	80050a6 <HAL_I2C_MasterRxCpltCallback>
}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b006      	add	sp, #24
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	fe00e800 	.word	0xfe00e800
 8005fa8:	ffff0000 	.word	0xffff0000

08005fac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fc8:	200b      	movs	r0, #11
 8005fca:	183b      	adds	r3, r7, r0
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	2141      	movs	r1, #65	@ 0x41
 8005fd0:	5c52      	ldrb	r2, [r2, r1]
 8005fd2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fdc:	183b      	adds	r3, r7, r0
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b21      	cmp	r3, #33	@ 0x21
 8005fe2:	d003      	beq.n	8005fec <I2C_ITSlaveCplt+0x40>
 8005fe4:	183b      	adds	r3, r7, r0
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b29      	cmp	r3, #41	@ 0x29
 8005fea:	d109      	bne.n	8006000 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005fec:	4aac      	ldr	r2, [pc, #688]	@ (80062a0 <I2C_ITSlaveCplt+0x2f4>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0011      	movs	r1, r2
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 fbea 	bl	80067cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2221      	movs	r2, #33	@ 0x21
 8005ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ffe:	e020      	b.n	8006042 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006000:	220b      	movs	r2, #11
 8006002:	18bb      	adds	r3, r7, r2
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b22      	cmp	r3, #34	@ 0x22
 8006008:	d003      	beq.n	8006012 <I2C_ITSlaveCplt+0x66>
 800600a:	18bb      	adds	r3, r7, r2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006010:	d109      	bne.n	8006026 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006012:	4aa4      	ldr	r2, [pc, #656]	@ (80062a4 <I2C_ITSlaveCplt+0x2f8>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	0011      	movs	r1, r2
 8006018:	0018      	movs	r0, r3
 800601a:	f000 fbd7 	bl	80067cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2222      	movs	r2, #34	@ 0x22
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
 8006024:	e00d      	b.n	8006042 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006026:	230b      	movs	r3, #11
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b28      	cmp	r3, #40	@ 0x28
 800602e:	d108      	bne.n	8006042 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006030:	4a9d      	ldr	r2, [pc, #628]	@ (80062a8 <I2C_ITSlaveCplt+0x2fc>)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	0011      	movs	r1, r2
 8006036:	0018      	movs	r0, r3
 8006038:	f000 fbc8 	bl	80067cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2180      	movs	r1, #128	@ 0x80
 800604e:	0209      	lsls	r1, r1, #8
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4993      	ldr	r1, [pc, #588]	@ (80062ac <I2C_ITSlaveCplt+0x300>)
 8006060:	400a      	ands	r2, r1
 8006062:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	0018      	movs	r0, r3
 8006068:	f000 faab 	bl	80065c2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	2380      	movs	r3, #128	@ 0x80
 8006070:	01db      	lsls	r3, r3, #7
 8006072:	4013      	ands	r3, r2
 8006074:	d013      	beq.n	800609e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	498b      	ldr	r1, [pc, #556]	@ (80062b0 <I2C_ITSlaveCplt+0x304>)
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01f      	beq.n	80060ce <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b29a      	uxth	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800609c:	e017      	b.n	80060ce <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	2380      	movs	r3, #128	@ 0x80
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	4013      	ands	r3, r2
 80060a6:	d012      	beq.n	80060ce <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4980      	ldr	r1, [pc, #512]	@ (80062b4 <I2C_ITSlaveCplt+0x308>)
 80060b4:	400a      	ands	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2204      	movs	r2, #4
 80060d2:	4013      	ands	r3, r2
 80060d4:	d020      	beq.n	8006118 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2204      	movs	r2, #4
 80060da:	4393      	bics	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	2204      	movs	r2, #4
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2210      	movs	r2, #16
 8006132:	4013      	ands	r3, r2
 8006134:	d04f      	beq.n	80061d6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2210      	movs	r2, #16
 800613a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800613c:	d04b      	beq.n	80061d6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d12d      	bne.n	80061a4 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2241      	movs	r2, #65	@ 0x41
 800614c:	5c9b      	ldrb	r3, [r3, r2]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b28      	cmp	r3, #40	@ 0x28
 8006152:	d10b      	bne.n	800616c <I2C_ITSlaveCplt+0x1c0>
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	2380      	movs	r3, #128	@ 0x80
 8006158:	049b      	lsls	r3, r3, #18
 800615a:	429a      	cmp	r2, r3
 800615c:	d106      	bne.n	800616c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	0011      	movs	r1, r2
 8006164:	0018      	movs	r0, r3
 8006166:	f000 f8a9 	bl	80062bc <I2C_ITListenCplt>
 800616a:	e034      	b.n	80061d6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2241      	movs	r2, #65	@ 0x41
 8006170:	5c9b      	ldrb	r3, [r3, r2]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b29      	cmp	r3, #41	@ 0x29
 8006176:	d110      	bne.n	800619a <I2C_ITSlaveCplt+0x1ee>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a4f      	ldr	r2, [pc, #316]	@ (80062b8 <I2C_ITSlaveCplt+0x30c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00c      	beq.n	800619a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2210      	movs	r2, #16
 8006186:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	0018      	movs	r0, r3
 800618c:	f000 fa19 	bl	80065c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0018      	movs	r0, r3
 8006194:	f7ff fdd8 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 8006198:	e01d      	b.n	80061d6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2210      	movs	r2, #16
 80061a0:	61da      	str	r2, [r3, #28]
 80061a2:	e018      	b.n	80061d6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2210      	movs	r2, #16
 80061aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b0:	2204      	movs	r2, #4
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <I2C_ITSlaveCplt+0x21c>
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	2380      	movs	r3, #128	@ 0x80
 80061c2:	045b      	lsls	r3, r3, #17
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d106      	bne.n	80061d6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	0011      	movs	r1, r2
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 f8cb 	bl	800636c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2242      	movs	r2, #66	@ 0x42
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0011      	movs	r1, r2
 80061f4:	0018      	movs	r0, r3
 80061f6:	f000 f8b9 	bl	800636c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2241      	movs	r2, #65	@ 0x41
 80061fe:	5c9b      	ldrb	r3, [r3, r2]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b28      	cmp	r3, #40	@ 0x28
 8006204:	d147      	bne.n	8006296 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	0011      	movs	r1, r2
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f855 	bl	80062bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006212:	e040      	b.n	8006296 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006218:	4a27      	ldr	r2, [pc, #156]	@ (80062b8 <I2C_ITSlaveCplt+0x30c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d016      	beq.n	800624c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0018      	movs	r0, r3
 8006222:	f7ff fd91 	bl	8005d48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a23      	ldr	r2, [pc, #140]	@ (80062b8 <I2C_ITSlaveCplt+0x30c>)
 800622a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2241      	movs	r2, #65	@ 0x41
 8006230:	2120      	movs	r1, #32
 8006232:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2240      	movs	r2, #64	@ 0x40
 800623e:	2100      	movs	r1, #0
 8006240:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0018      	movs	r0, r3
 8006246:	f7fe ff56 	bl	80050f6 <HAL_I2C_ListenCpltCallback>
}
 800624a:	e024      	b.n	8006296 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2241      	movs	r2, #65	@ 0x41
 8006250:	5c9b      	ldrb	r3, [r3, r2]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b22      	cmp	r3, #34	@ 0x22
 8006256:	d10f      	bne.n	8006278 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2241      	movs	r2, #65	@ 0x41
 800625c:	2120      	movs	r1, #32
 800625e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2240      	movs	r2, #64	@ 0x40
 800626a:	2100      	movs	r1, #0
 800626c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f7fe ff28 	bl	80050c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006276:	e00e      	b.n	8006296 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2241      	movs	r2, #65	@ 0x41
 800627c:	2120      	movs	r1, #32
 800627e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2240      	movs	r2, #64	@ 0x40
 800628a:	2100      	movs	r1, #0
 800628c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0018      	movs	r0, r3
 8006292:	f7fe ff10 	bl	80050b6 <HAL_I2C_SlaveTxCpltCallback>
}
 8006296:	46c0      	nop			@ (mov r8, r8)
 8006298:	46bd      	mov	sp, r7
 800629a:	b006      	add	sp, #24
 800629c:	bd80      	pop	{r7, pc}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	00008001 	.word	0x00008001
 80062a4:	00008002 	.word	0x00008002
 80062a8:	00008003 	.word	0x00008003
 80062ac:	fe00e800 	.word	0xfe00e800
 80062b0:	ffffbfff 	.word	0xffffbfff
 80062b4:	ffff7fff 	.word	0xffff7fff
 80062b8:	ffff0000 	.word	0xffff0000

080062bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a26      	ldr	r2, [pc, #152]	@ (8006364 <I2C_ITListenCplt+0xa8>)
 80062ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2241      	movs	r2, #65	@ 0x41
 80062d6:	2120      	movs	r1, #32
 80062d8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2242      	movs	r2, #66	@ 0x42
 80062de:	2100      	movs	r1, #0
 80062e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2204      	movs	r2, #4
 80062ec:	4013      	ands	r3, r2
 80062ee:	d022      	beq.n	8006336 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630c:	2b00      	cmp	r3, #0
 800630e:	d012      	beq.n	8006336 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632e:	2204      	movs	r2, #4
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006336:	4a0c      	ldr	r2, [pc, #48]	@ (8006368 <I2C_ITListenCplt+0xac>)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0011      	movs	r1, r2
 800633c:	0018      	movs	r0, r3
 800633e:	f000 fa45 	bl	80067cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2210      	movs	r2, #16
 8006348:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2240      	movs	r2, #64	@ 0x40
 800634e:	2100      	movs	r1, #0
 8006350:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	0018      	movs	r0, r3
 8006356:	f7fe fece 	bl	80050f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800635a:	46c0      	nop			@ (mov r8, r8)
 800635c:	46bd      	mov	sp, r7
 800635e:	b002      	add	sp, #8
 8006360:	bd80      	pop	{r7, pc}
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	ffff0000 	.word	0xffff0000
 8006368:	00008003 	.word	0x00008003

0800636c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006376:	200f      	movs	r0, #15
 8006378:	183b      	adds	r3, r7, r0
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	2141      	movs	r1, #65	@ 0x41
 800637e:	5c52      	ldrb	r2, [r2, r1]
 8006380:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2242      	movs	r2, #66	@ 0x42
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a72      	ldr	r2, [pc, #456]	@ (8006558 <I2C_ITError+0x1ec>)
 800638e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80063a2:	183b      	adds	r3, r7, r0
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b28      	cmp	r3, #40	@ 0x28
 80063a8:	d007      	beq.n	80063ba <I2C_ITError+0x4e>
 80063aa:	183b      	adds	r3, r7, r0
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b29      	cmp	r3, #41	@ 0x29
 80063b0:	d003      	beq.n	80063ba <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80063b2:	183b      	adds	r3, r7, r0
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80063b8:	d10c      	bne.n	80063d4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2103      	movs	r1, #3
 80063be:	0018      	movs	r0, r3
 80063c0:	f000 fa04 	bl	80067cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2241      	movs	r2, #65	@ 0x41
 80063c8:	2128      	movs	r1, #40	@ 0x28
 80063ca:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a63      	ldr	r2, [pc, #396]	@ (800655c <I2C_ITError+0x1f0>)
 80063d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80063d2:	e032      	b.n	800643a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063d4:	4a62      	ldr	r2, [pc, #392]	@ (8006560 <I2C_ITError+0x1f4>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	0011      	movs	r1, r2
 80063da:	0018      	movs	r0, r3
 80063dc:	f000 f9f6 	bl	80067cc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	0018      	movs	r0, r3
 80063e4:	f000 f8ed 	bl	80065c2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2241      	movs	r2, #65	@ 0x41
 80063ec:	5c9b      	ldrb	r3, [r3, r2]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b60      	cmp	r3, #96	@ 0x60
 80063f2:	d01f      	beq.n	8006434 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2241      	movs	r2, #65	@ 0x41
 80063f8:	2120      	movs	r1, #32
 80063fa:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2220      	movs	r2, #32
 8006404:	4013      	ands	r3, r2
 8006406:	2b20      	cmp	r3, #32
 8006408:	d114      	bne.n	8006434 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	2210      	movs	r2, #16
 8006412:	4013      	ands	r3, r2
 8006414:	2b10      	cmp	r3, #16
 8006416:	d109      	bne.n	800642c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2210      	movs	r2, #16
 800641e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	2204      	movs	r2, #4
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2220      	movs	r2, #32
 8006432:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	d03b      	beq.n	80064c0 <I2C_ITError+0x154>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b11      	cmp	r3, #17
 800644c:	d002      	beq.n	8006454 <I2C_ITError+0xe8>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b21      	cmp	r3, #33	@ 0x21
 8006452:	d135      	bne.n	80064c0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	2380      	movs	r3, #128	@ 0x80
 800645c:	01db      	lsls	r3, r3, #7
 800645e:	401a      	ands	r2, r3
 8006460:	2380      	movs	r3, #128	@ 0x80
 8006462:	01db      	lsls	r3, r3, #7
 8006464:	429a      	cmp	r2, r3
 8006466:	d107      	bne.n	8006478 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	493c      	ldr	r1, [pc, #240]	@ (8006564 <I2C_ITError+0x1f8>)
 8006474:	400a      	ands	r2, r1
 8006476:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	0018      	movs	r0, r3
 800647e:	f7fe fa0d 	bl	800489c <HAL_DMA_GetState>
 8006482:	0003      	movs	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d016      	beq.n	80064b6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648c:	4a36      	ldr	r2, [pc, #216]	@ (8006568 <I2C_ITError+0x1fc>)
 800648e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2240      	movs	r2, #64	@ 0x40
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649c:	0018      	movs	r0, r3
 800649e:	f7fe f8d1 	bl	8004644 <HAL_DMA_Abort_IT>
 80064a2:	1e03      	subs	r3, r0, #0
 80064a4:	d051      	beq.n	800654a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b0:	0018      	movs	r0, r3
 80064b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064b4:	e049      	b.n	800654a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f000 f859 	bl	8006570 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064be:	e044      	b.n	800654a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d03b      	beq.n	8006540 <I2C_ITError+0x1d4>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b12      	cmp	r3, #18
 80064cc:	d002      	beq.n	80064d4 <I2C_ITError+0x168>
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b22      	cmp	r3, #34	@ 0x22
 80064d2:	d135      	bne.n	8006540 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	2380      	movs	r3, #128	@ 0x80
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	401a      	ands	r2, r3
 80064e0:	2380      	movs	r3, #128	@ 0x80
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d107      	bne.n	80064f8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	491e      	ldr	r1, [pc, #120]	@ (800656c <I2C_ITError+0x200>)
 80064f4:	400a      	ands	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7fe f9cd 	bl	800489c <HAL_DMA_GetState>
 8006502:	0003      	movs	r3, r0
 8006504:	2b01      	cmp	r3, #1
 8006506:	d016      	beq.n	8006536 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650c:	4a16      	ldr	r2, [pc, #88]	@ (8006568 <I2C_ITError+0x1fc>)
 800650e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2240      	movs	r2, #64	@ 0x40
 8006514:	2100      	movs	r1, #0
 8006516:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651c:	0018      	movs	r0, r3
 800651e:	f7fe f891 	bl	8004644 <HAL_DMA_Abort_IT>
 8006522:	1e03      	subs	r3, r0, #0
 8006524:	d013      	beq.n	800654e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006530:	0018      	movs	r0, r3
 8006532:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006534:	e00b      	b.n	800654e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 f819 	bl	8006570 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800653e:	e006      	b.n	800654e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	0018      	movs	r0, r3
 8006544:	f000 f814 	bl	8006570 <I2C_TreatErrorCallback>
  }
}
 8006548:	e002      	b.n	8006550 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	e000      	b.n	8006550 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800654e:	46c0      	nop			@ (mov r8, r8)
}
 8006550:	46c0      	nop			@ (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b004      	add	sp, #16
 8006556:	bd80      	pop	{r7, pc}
 8006558:	ffff0000 	.word	0xffff0000
 800655c:	0800535d 	.word	0x0800535d
 8006560:	00008003 	.word	0x00008003
 8006564:	ffffbfff 	.word	0xffffbfff
 8006568:	08006607 	.word	0x08006607
 800656c:	ffff7fff 	.word	0xffff7fff

08006570 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2241      	movs	r2, #65	@ 0x41
 800657c:	5c9b      	ldrb	r3, [r3, r2]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b60      	cmp	r3, #96	@ 0x60
 8006582:	d10f      	bne.n	80065a4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2241      	movs	r2, #65	@ 0x41
 8006588:	2120      	movs	r1, #32
 800658a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2240      	movs	r2, #64	@ 0x40
 8006596:	2100      	movs	r1, #0
 8006598:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	0018      	movs	r0, r3
 800659e:	f7fe fdb2 	bl	8005106 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065a2:	e00a      	b.n	80065ba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2240      	movs	r2, #64	@ 0x40
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fa fe5d 	bl	8001274 <HAL_I2C_ErrorCallback>
}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	46bd      	mov	sp, r7
 80065be:	b002      	add	sp, #8
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	2202      	movs	r2, #2
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d103      	bne.n	80065e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2200      	movs	r2, #0
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2201      	movs	r2, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d007      	beq.n	80065fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2101      	movs	r1, #1
 80065fa:	430a      	orrs	r2, r1
 80065fc:	619a      	str	r2, [r3, #24]
  }
}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	46bd      	mov	sp, r7
 8006602:	b002      	add	sp, #8
 8006604:	bd80      	pop	{r7, pc}

08006606 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006620:	2200      	movs	r2, #0
 8006622:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	2200      	movs	r2, #0
 8006632:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	0018      	movs	r0, r3
 8006638:	f7ff ff9a 	bl	8006570 <I2C_TreatErrorCallback>
}
 800663c:	46c0      	nop			@ (mov r8, r8)
 800663e:	46bd      	mov	sp, r7
 8006640:	b004      	add	sp, #16
 8006642:	bd80      	pop	{r7, pc}

08006644 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	0008      	movs	r0, r1
 800664e:	0011      	movs	r1, r2
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	240a      	movs	r4, #10
 8006654:	193b      	adds	r3, r7, r4
 8006656:	1c02      	adds	r2, r0, #0
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	2009      	movs	r0, #9
 800665c:	183b      	adds	r3, r7, r0
 800665e:	1c0a      	adds	r2, r1, #0
 8006660:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006662:	193b      	adds	r3, r7, r4
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	059b      	lsls	r3, r3, #22
 8006668:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800666a:	183b      	adds	r3, r7, r0
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	0419      	lsls	r1, r3, #16
 8006670:	23ff      	movs	r3, #255	@ 0xff
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006676:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	4313      	orrs	r3, r2
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800668e:	0d51      	lsrs	r1, r2, #21
 8006690:	2280      	movs	r2, #128	@ 0x80
 8006692:	00d2      	lsls	r2, r2, #3
 8006694:	400a      	ands	r2, r1
 8006696:	4907      	ldr	r1, [pc, #28]	@ (80066b4 <I2C_TransferConfig+0x70>)
 8006698:	430a      	orrs	r2, r1
 800669a:	43d2      	mvns	r2, r2
 800669c:	401a      	ands	r2, r3
 800669e:	0011      	movs	r1, r2
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	46bd      	mov	sp, r7
 80066ae:	b007      	add	sp, #28
 80066b0:	bd90      	pop	{r4, r7, pc}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	03ff63ff 	.word	0x03ff63ff

080066b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	000a      	movs	r2, r1
 80066c2:	1cbb      	adds	r3, r7, #2
 80066c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066ce:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <I2C_Enable_IRQ+0x108>)
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d035      	beq.n	8006740 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80066d8:	4b3a      	ldr	r3, [pc, #232]	@ (80067c4 <I2C_Enable_IRQ+0x10c>)
 80066da:	429a      	cmp	r2, r3
 80066dc:	d030      	beq.n	8006740 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80066e2:	4b39      	ldr	r3, [pc, #228]	@ (80067c8 <I2C_Enable_IRQ+0x110>)
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d02b      	beq.n	8006740 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80066e8:	1cbb      	adds	r3, r7, #2
 80066ea:	2200      	movs	r2, #0
 80066ec:	5e9b      	ldrsh	r3, [r3, r2]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da03      	bge.n	80066fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	22b8      	movs	r2, #184	@ 0xb8
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80066fa:	1cbb      	adds	r3, r7, #2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	2201      	movs	r2, #1
 8006700:	4013      	ands	r3, r2
 8006702:	d003      	beq.n	800670c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	22f2      	movs	r2, #242	@ 0xf2
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800670c:	1cbb      	adds	r3, r7, #2
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	2202      	movs	r2, #2
 8006712:	4013      	ands	r3, r2
 8006714:	d003      	beq.n	800671e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22f4      	movs	r2, #244	@ 0xf4
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800671e:	1cbb      	adds	r3, r7, #2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	2b10      	cmp	r3, #16
 8006724:	d103      	bne.n	800672e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2290      	movs	r2, #144	@ 0x90
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800672e:	1cbb      	adds	r3, r7, #2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	2b20      	cmp	r3, #32
 8006734:	d137      	bne.n	80067a6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800673e:	e032      	b.n	80067a6 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006740:	1cbb      	adds	r3, r7, #2
 8006742:	2200      	movs	r2, #0
 8006744:	5e9b      	ldrsh	r3, [r3, r2]
 8006746:	2b00      	cmp	r3, #0
 8006748:	da03      	bge.n	8006752 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	22b8      	movs	r2, #184	@ 0xb8
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006752:	1cbb      	adds	r3, r7, #2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	2201      	movs	r2, #1
 8006758:	4013      	ands	r3, r2
 800675a:	d003      	beq.n	8006764 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	22f2      	movs	r2, #242	@ 0xf2
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006764:	1cbb      	adds	r3, r7, #2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	2202      	movs	r2, #2
 800676a:	4013      	ands	r3, r2
 800676c:	d003      	beq.n	8006776 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	22f4      	movs	r2, #244	@ 0xf4
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006776:	1cbb      	adds	r3, r7, #2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	2b10      	cmp	r3, #16
 800677c:	d103      	bne.n	8006786 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2290      	movs	r2, #144	@ 0x90
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006786:	1cbb      	adds	r3, r7, #2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	2b20      	cmp	r3, #32
 800678c:	d103      	bne.n	8006796 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2260      	movs	r2, #96	@ 0x60
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006796:	1cbb      	adds	r3, r7, #2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	2b40      	cmp	r3, #64	@ 0x40
 800679c:	d103      	bne.n	80067a6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2240      	movs	r2, #64	@ 0x40
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6819      	ldr	r1, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b004      	add	sp, #16
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	0800555d 	.word	0x0800555d
 80067c4:	080059ad 	.word	0x080059ad
 80067c8:	08005755 	.word	0x08005755

080067cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	000a      	movs	r2, r1
 80067d6:	1cbb      	adds	r3, r7, #2
 80067d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80067de:	1cbb      	adds	r3, r7, #2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	2201      	movs	r2, #1
 80067e4:	4013      	ands	r3, r2
 80067e6:	d010      	beq.n	800680a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2242      	movs	r2, #66	@ 0x42
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2241      	movs	r2, #65	@ 0x41
 80067f4:	5c9b      	ldrb	r3, [r3, r2]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	001a      	movs	r2, r3
 80067fa:	2328      	movs	r3, #40	@ 0x28
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b28      	cmp	r3, #40	@ 0x28
 8006800:	d003      	beq.n	800680a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	22b0      	movs	r2, #176	@ 0xb0
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800680a:	1cbb      	adds	r3, r7, #2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	2202      	movs	r2, #2
 8006810:	4013      	ands	r3, r2
 8006812:	d010      	beq.n	8006836 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2244      	movs	r2, #68	@ 0x44
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2241      	movs	r2, #65	@ 0x41
 8006820:	5c9b      	ldrb	r3, [r3, r2]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	001a      	movs	r2, r3
 8006826:	2328      	movs	r3, #40	@ 0x28
 8006828:	4013      	ands	r3, r2
 800682a:	2b28      	cmp	r3, #40	@ 0x28
 800682c:	d003      	beq.n	8006836 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	22b0      	movs	r2, #176	@ 0xb0
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006836:	1cbb      	adds	r3, r7, #2
 8006838:	2200      	movs	r2, #0
 800683a:	5e9b      	ldrsh	r3, [r3, r2]
 800683c:	2b00      	cmp	r3, #0
 800683e:	da03      	bge.n	8006848 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	22b8      	movs	r2, #184	@ 0xb8
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006848:	1cbb      	adds	r3, r7, #2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	2b10      	cmp	r3, #16
 800684e:	d103      	bne.n	8006858 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2290      	movs	r2, #144	@ 0x90
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006858:	1cbb      	adds	r3, r7, #2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	2b20      	cmp	r3, #32
 800685e:	d103      	bne.n	8006868 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006868:	1cbb      	adds	r3, r7, #2
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	2b40      	cmp	r3, #64	@ 0x40
 800686e:	d103      	bne.n	8006878 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2240      	movs	r2, #64	@ 0x40
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	43d9      	mvns	r1, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	400a      	ands	r2, r1
 8006888:	601a      	str	r2, [r3, #0]
}
 800688a:	46c0      	nop			@ (mov r8, r8)
 800688c:	46bd      	mov	sp, r7
 800688e:	b004      	add	sp, #16
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2241      	movs	r2, #65	@ 0x41
 80068a2:	5c9b      	ldrb	r3, [r3, r2]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d138      	bne.n	800691c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2240      	movs	r2, #64	@ 0x40
 80068ae:	5c9b      	ldrb	r3, [r3, r2]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e032      	b.n	800691e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2240      	movs	r2, #64	@ 0x40
 80068bc:	2101      	movs	r1, #1
 80068be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2241      	movs	r2, #65	@ 0x41
 80068c4:	2124      	movs	r1, #36	@ 0x24
 80068c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2101      	movs	r1, #1
 80068d4:	438a      	bics	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4911      	ldr	r1, [pc, #68]	@ (8006928 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80068e4:	400a      	ands	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6819      	ldr	r1, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2101      	movs	r1, #1
 8006904:	430a      	orrs	r2, r1
 8006906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2241      	movs	r2, #65	@ 0x41
 800690c:	2120      	movs	r1, #32
 800690e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2240      	movs	r2, #64	@ 0x40
 8006914:	2100      	movs	r1, #0
 8006916:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	e000      	b.n	800691e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800691c:	2302      	movs	r3, #2
  }
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b002      	add	sp, #8
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	ffffefff 	.word	0xffffefff

0800692c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2241      	movs	r2, #65	@ 0x41
 800693a:	5c9b      	ldrb	r3, [r3, r2]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b20      	cmp	r3, #32
 8006940:	d139      	bne.n	80069b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2240      	movs	r2, #64	@ 0x40
 8006946:	5c9b      	ldrb	r3, [r3, r2]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800694c:	2302      	movs	r3, #2
 800694e:	e033      	b.n	80069b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2240      	movs	r2, #64	@ 0x40
 8006954:	2101      	movs	r1, #1
 8006956:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2241      	movs	r2, #65	@ 0x41
 800695c:	2124      	movs	r1, #36	@ 0x24
 800695e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2101      	movs	r1, #1
 800696c:	438a      	bics	r2, r1
 800696e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a11      	ldr	r2, [pc, #68]	@ (80069c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800697c:	4013      	ands	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2101      	movs	r1, #1
 800699e:	430a      	orrs	r2, r1
 80069a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2241      	movs	r2, #65	@ 0x41
 80069a6:	2120      	movs	r1, #32
 80069a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2240      	movs	r2, #64	@ 0x40
 80069ae:	2100      	movs	r1, #0
 80069b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e000      	b.n	80069b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
  }
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b004      	add	sp, #16
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	fffff0ff 	.word	0xfffff0ff

080069c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e20f      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2201      	movs	r2, #1
 80069dc:	4013      	ands	r3, r2
 80069de:	d100      	bne.n	80069e2 <HAL_RCC_OscConfig+0x1e>
 80069e0:	e069      	b.n	8006ab6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e2:	4bc8      	ldr	r3, [pc, #800]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2238      	movs	r2, #56	@ 0x38
 80069e8:	4013      	ands	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d105      	bne.n	80069fe <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d15d      	bne.n	8006ab6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e1fb      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	2380      	movs	r3, #128	@ 0x80
 8006a04:	025b      	lsls	r3, r3, #9
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d107      	bne.n	8006a1a <HAL_RCC_OscConfig+0x56>
 8006a0a:	4bbe      	ldr	r3, [pc, #760]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4bbd      	ldr	r3, [pc, #756]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a10:	2180      	movs	r1, #128	@ 0x80
 8006a12:	0249      	lsls	r1, r1, #9
 8006a14:	430a      	orrs	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e020      	b.n	8006a5c <HAL_RCC_OscConfig+0x98>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	23a0      	movs	r3, #160	@ 0xa0
 8006a20:	02db      	lsls	r3, r3, #11
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d10e      	bne.n	8006a44 <HAL_RCC_OscConfig+0x80>
 8006a26:	4bb7      	ldr	r3, [pc, #732]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4bb6      	ldr	r3, [pc, #728]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a2c:	2180      	movs	r1, #128	@ 0x80
 8006a2e:	02c9      	lsls	r1, r1, #11
 8006a30:	430a      	orrs	r2, r1
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	4bb3      	ldr	r3, [pc, #716]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4bb2      	ldr	r3, [pc, #712]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a3a:	2180      	movs	r1, #128	@ 0x80
 8006a3c:	0249      	lsls	r1, r1, #9
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e00b      	b.n	8006a5c <HAL_RCC_OscConfig+0x98>
 8006a44:	4baf      	ldr	r3, [pc, #700]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4bae      	ldr	r3, [pc, #696]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a4a:	49af      	ldr	r1, [pc, #700]	@ (8006d08 <HAL_RCC_OscConfig+0x344>)
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	4bac      	ldr	r3, [pc, #688]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	4bab      	ldr	r3, [pc, #684]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a56:	49ad      	ldr	r1, [pc, #692]	@ (8006d0c <HAL_RCC_OscConfig+0x348>)
 8006a58:	400a      	ands	r2, r1
 8006a5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d014      	beq.n	8006a8e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a64:	f7fc fd00 	bl	8003468 <HAL_GetTick>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006a6e:	f7fc fcfb 	bl	8003468 <HAL_GetTick>
 8006a72:	0002      	movs	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b64      	cmp	r3, #100	@ 0x64
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e1ba      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a80:	4ba0      	ldr	r3, [pc, #640]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	2380      	movs	r3, #128	@ 0x80
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0xaa>
 8006a8c:	e013      	b.n	8006ab6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8e:	f7fc fceb 	bl	8003468 <HAL_GetTick>
 8006a92:	0003      	movs	r3, r0
 8006a94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006a98:	f7fc fce6 	bl	8003468 <HAL_GetTick>
 8006a9c:	0002      	movs	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	@ 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1a5      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aaa:	4b96      	ldr	r3, [pc, #600]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	2380      	movs	r3, #128	@ 0x80
 8006ab0:	029b      	lsls	r3, r3, #10
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2202      	movs	r2, #2
 8006abc:	4013      	ands	r3, r2
 8006abe:	d100      	bne.n	8006ac2 <HAL_RCC_OscConfig+0xfe>
 8006ac0:	e086      	b.n	8006bd0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ac2:	4b90      	ldr	r3, [pc, #576]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2238      	movs	r2, #56	@ 0x38
 8006ac8:	4013      	ands	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d12f      	bne.n	8006b32 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e18b      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ade:	4b89      	ldr	r3, [pc, #548]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4a8b      	ldr	r2, [pc, #556]	@ (8006d10 <HAL_RCC_OscConfig+0x34c>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	021a      	lsls	r2, r3, #8
 8006aee:	4b85      	ldr	r3, [pc, #532]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d112      	bne.n	8006b20 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006afa:	4b82      	ldr	r3, [pc, #520]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a85      	ldr	r2, [pc, #532]	@ (8006d14 <HAL_RCC_OscConfig+0x350>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	0019      	movs	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	4b7e      	ldr	r3, [pc, #504]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	0adb      	lsrs	r3, r3, #11
 8006b14:	2207      	movs	r2, #7
 8006b16:	4013      	ands	r3, r2
 8006b18:	4a7f      	ldr	r2, [pc, #508]	@ (8006d18 <HAL_RCC_OscConfig+0x354>)
 8006b1a:	40da      	lsrs	r2, r3
 8006b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8006d1c <HAL_RCC_OscConfig+0x358>)
 8006b1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b20:	4b7f      	ldr	r3, [pc, #508]	@ (8006d20 <HAL_RCC_OscConfig+0x35c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	0018      	movs	r0, r3
 8006b26:	f7fc fc43 	bl	80033b0 <HAL_InitTick>
 8006b2a:	1e03      	subs	r3, r0, #0
 8006b2c:	d050      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e161      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d030      	beq.n	8006b9c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006b3a:	4b72      	ldr	r3, [pc, #456]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a75      	ldr	r2, [pc, #468]	@ (8006d14 <HAL_RCC_OscConfig+0x350>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	0019      	movs	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	4b6e      	ldr	r3, [pc, #440]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b6c      	ldr	r3, [pc, #432]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b54:	2180      	movs	r1, #128	@ 0x80
 8006b56:	0049      	lsls	r1, r1, #1
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fc fc84 	bl	8003468 <HAL_GetTick>
 8006b60:	0003      	movs	r3, r0
 8006b62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006b66:	f7fc fc7f 	bl	8003468 <HAL_GetTick>
 8006b6a:	0002      	movs	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e13e      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b78:	4b62      	ldr	r3, [pc, #392]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	2380      	movs	r3, #128	@ 0x80
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	4013      	ands	r3, r2
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b84:	4b5f      	ldr	r3, [pc, #380]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4a61      	ldr	r2, [pc, #388]	@ (8006d10 <HAL_RCC_OscConfig+0x34c>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	0019      	movs	r1, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	021a      	lsls	r2, r3, #8
 8006b94:	4b5b      	ldr	r3, [pc, #364]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
 8006b9a:	e019      	b.n	8006bd0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8006b9c:	4b59      	ldr	r3, [pc, #356]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b58      	ldr	r3, [pc, #352]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006ba2:	4960      	ldr	r1, [pc, #384]	@ (8006d24 <HAL_RCC_OscConfig+0x360>)
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fc fc5e 	bl	8003468 <HAL_GetTick>
 8006bac:	0003      	movs	r3, r0
 8006bae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006bb2:	f7fc fc59 	bl	8003468 <HAL_GetTick>
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e118      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	2380      	movs	r3, #128	@ 0x80
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d042      	beq.n	8006c60 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8006bda:	4b4a      	ldr	r3, [pc, #296]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2238      	movs	r2, #56	@ 0x38
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b18      	cmp	r3, #24
 8006be4:	d105      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d138      	bne.n	8006c60 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e101      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d019      	beq.n	8006c2e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006bfa:	4b42      	ldr	r3, [pc, #264]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006bfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006bfe:	4b41      	ldr	r3, [pc, #260]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c00:	2101      	movs	r1, #1
 8006c02:	430a      	orrs	r2, r1
 8006c04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fc fc2f 	bl	8003468 <HAL_GetTick>
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006c10:	f7fc fc2a 	bl	8003468 <HAL_GetTick>
 8006c14:	0002      	movs	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e0e9      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8006c22:	4b38      	ldr	r3, [pc, #224]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c26:	2202      	movs	r2, #2
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d0f1      	beq.n	8006c10 <HAL_RCC_OscConfig+0x24c>
 8006c2c:	e018      	b.n	8006c60 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006c2e:	4b35      	ldr	r3, [pc, #212]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c32:	4b34      	ldr	r3, [pc, #208]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c34:	2101      	movs	r1, #1
 8006c36:	438a      	bics	r2, r1
 8006c38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3a:	f7fc fc15 	bl	8003468 <HAL_GetTick>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006c44:	f7fc fc10 	bl	8003468 <HAL_GetTick>
 8006c48:	0002      	movs	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e0cf      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8006c56:	4b2b      	ldr	r3, [pc, #172]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d1f1      	bne.n	8006c44 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2204      	movs	r2, #4
 8006c66:	4013      	ands	r3, r2
 8006c68:	d100      	bne.n	8006c6c <HAL_RCC_OscConfig+0x2a8>
 8006c6a:	e084      	b.n	8006d76 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c6c:	230f      	movs	r3, #15
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8006c74:	4b23      	ldr	r3, [pc, #140]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2238      	movs	r2, #56	@ 0x38
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d000      	beq.n	8006c8a <HAL_RCC_OscConfig+0x2c6>
 8006c88:	e075      	b.n	8006d76 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e0b3      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d106      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x2e0>
 8006c96:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ca2:	e01c      	b.n	8006cde <HAL_RCC_OscConfig+0x31a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d10c      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x302>
 8006cac:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006cae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cb0:	4b14      	ldr	r3, [pc, #80]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006cb2:	2104      	movs	r1, #4
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cb8:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006cba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cbc:	4b11      	ldr	r3, [pc, #68]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cc4:	e00b      	b.n	8006cde <HAL_RCC_OscConfig+0x31a>
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006cc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cca:	4b0e      	ldr	r3, [pc, #56]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006ccc:	2101      	movs	r1, #1
 8006cce:	438a      	bics	r2, r1
 8006cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006cd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <HAL_RCC_OscConfig+0x340>)
 8006cd8:	2104      	movs	r1, #4
 8006cda:	438a      	bics	r2, r1
 8006cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d028      	beq.n	8006d38 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce6:	f7fc fbbf 	bl	8003468 <HAL_GetTick>
 8006cea:	0003      	movs	r3, r0
 8006cec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8006cee:	e01d      	b.n	8006d2c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf0:	f7fc fbba 	bl	8003468 <HAL_GetTick>
 8006cf4:	0002      	movs	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8006d28 <HAL_RCC_OscConfig+0x364>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d915      	bls.n	8006d2c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e078      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
 8006d04:	40021000 	.word	0x40021000
 8006d08:	fffeffff 	.word	0xfffeffff
 8006d0c:	fffbffff 	.word	0xfffbffff
 8006d10:	ffff80ff 	.word	0xffff80ff
 8006d14:	ffffc7ff 	.word	0xffffc7ff
 8006d18:	02dc6c00 	.word	0x02dc6c00
 8006d1c:	20000074 	.word	0x20000074
 8006d20:	20000078 	.word	0x20000078
 8006d24:	fffffeff 	.word	0xfffffeff
 8006d28:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8006d2c:	4b34      	ldr	r3, [pc, #208]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	2202      	movs	r2, #2
 8006d32:	4013      	ands	r3, r2
 8006d34:	d0dc      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x32c>
 8006d36:	e013      	b.n	8006d60 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d38:	f7fc fb96 	bl	8003468 <HAL_GetTick>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8006d40:	e009      	b.n	8006d56 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d42:	f7fc fb91 	bl	8003468 <HAL_GetTick>
 8006d46:	0002      	movs	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e04 <HAL_RCC_OscConfig+0x440>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e04f      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8006d56:	4b2a      	ldr	r3, [pc, #168]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d1f0      	bne.n	8006d42 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006d60:	230f      	movs	r3, #15
 8006d62:	18fb      	adds	r3, r7, r3
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d105      	bne.n	8006d76 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006d6a:	4b25      	ldr	r3, [pc, #148]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006d6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d6e:	4b24      	ldr	r3, [pc, #144]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006d70:	4925      	ldr	r1, [pc, #148]	@ (8006e08 <HAL_RCC_OscConfig+0x444>)
 8006d72:	400a      	ands	r2, r1
 8006d74:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d039      	beq.n	8006df4 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01b      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d88:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006d8e:	2180      	movs	r1, #128	@ 0x80
 8006d90:	03c9      	lsls	r1, r1, #15
 8006d92:	430a      	orrs	r2, r1
 8006d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d96:	f7fc fb67 	bl	8003468 <HAL_GetTick>
 8006d9a:	0003      	movs	r3, r0
 8006d9c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006da0:	f7fc fb62 	bl	8003468 <HAL_GetTick>
 8006da4:	0002      	movs	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e021      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8006db2:	4b13      	ldr	r3, [pc, #76]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	2380      	movs	r3, #128	@ 0x80
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	4013      	ands	r3, r2
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x3dc>
 8006dbe:	e019      	b.n	8006df4 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006dc6:	4911      	ldr	r1, [pc, #68]	@ (8006e0c <HAL_RCC_OscConfig+0x448>)
 8006dc8:	400a      	ands	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dcc:	f7fc fb4c 	bl	8003468 <HAL_GetTick>
 8006dd0:	0003      	movs	r3, r0
 8006dd2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dd6:	f7fc fb47 	bl	8003468 <HAL_GetTick>
 8006dda:	0002      	movs	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e006      	b.n	8006df6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8006de8:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <HAL_RCC_OscConfig+0x43c>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	2380      	movs	r3, #128	@ 0x80
 8006dee:	041b      	lsls	r3, r3, #16
 8006df0:	4013      	ands	r3, r2
 8006df2:	d1f0      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	0018      	movs	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	b006      	add	sp, #24
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	40021000 	.word	0x40021000
 8006e04:	00001388 	.word	0x00001388
 8006e08:	efffffff 	.word	0xefffffff
 8006e0c:	ffbfffff 	.word	0xffbfffff

08006e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0f6      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e24:	4b7d      	ldr	r3, [pc, #500]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2207      	movs	r2, #7
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d91e      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e32:	4b7a      	ldr	r3, [pc, #488]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2207      	movs	r2, #7
 8006e38:	4393      	bics	r3, r2
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	4b77      	ldr	r3, [pc, #476]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e44:	f7fc fb10 	bl	8003468 <HAL_GetTick>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e4c:	e009      	b.n	8006e62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006e4e:	f7fc fb0b 	bl	8003468 <HAL_GetTick>
 8006e52:	0002      	movs	r2, r0
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	4a71      	ldr	r2, [pc, #452]	@ (8007020 <HAL_RCC_ClockConfig+0x210>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e0d7      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e62:	4b6e      	ldr	r3, [pc, #440]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2207      	movs	r2, #7
 8006e68:	4013      	ands	r3, r2
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d1ee      	bne.n	8006e4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2202      	movs	r2, #2
 8006e76:	4013      	ands	r3, r2
 8006e78:	d017      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	4013      	ands	r3, r2
 8006e82:	d008      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006e84:	4b67      	ldr	r3, [pc, #412]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	4a67      	ldr	r2, [pc, #412]	@ (8007028 <HAL_RCC_ClockConfig+0x218>)
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	4b65      	ldr	r3, [pc, #404]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006e8e:	21b0      	movs	r1, #176	@ 0xb0
 8006e90:	0109      	lsls	r1, r1, #4
 8006e92:	430a      	orrs	r2, r1
 8006e94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e96:	4b63      	ldr	r3, [pc, #396]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	4a64      	ldr	r2, [pc, #400]	@ (800702c <HAL_RCC_ClockConfig+0x21c>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	0019      	movs	r1, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	d100      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0xa6>
 8006eb4:	e061      	b.n	8006f7a <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8006eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	221c      	movs	r2, #28
 8006ebc:	4393      	bics	r3, r2
 8006ebe:	0019      	movs	r1, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	4b57      	ldr	r3, [pc, #348]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ed2:	4b54      	ldr	r3, [pc, #336]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	029b      	lsls	r3, r3, #10
 8006eda:	4013      	ands	r3, r2
 8006edc:	d12b      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e097      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d107      	bne.n	8006efa <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eea:	4b4e      	ldr	r3, [pc, #312]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	2380      	movs	r3, #128	@ 0x80
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d11f      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e08b      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d107      	bne.n	8006f12 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8006f02:	4b48      	ldr	r3, [pc, #288]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	2380      	movs	r3, #128	@ 0x80
 8006f08:	041b      	lsls	r3, r3, #16
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d113      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e07f      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d106      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8006f1a:	4b42      	ldr	r3, [pc, #264]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f1e:	2202      	movs	r2, #2
 8006f20:	4013      	ands	r3, r2
 8006f22:	d108      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e074      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8006f28:	4b3e      	ldr	r3, [pc, #248]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d101      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e06d      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f36:	4b3b      	ldr	r3, [pc, #236]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2207      	movs	r2, #7
 8006f3c:	4393      	bics	r3, r2
 8006f3e:	0019      	movs	r1, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	4b37      	ldr	r3, [pc, #220]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006f46:	430a      	orrs	r2, r1
 8006f48:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f4a:	f7fc fa8d 	bl	8003468 <HAL_GetTick>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f52:	e009      	b.n	8006f68 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f54:	f7fc fa88 	bl	8003468 <HAL_GetTick>
 8006f58:	0002      	movs	r2, r0
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	4a30      	ldr	r2, [pc, #192]	@ (8007020 <HAL_RCC_ClockConfig+0x210>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e054      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f68:	4b2e      	ldr	r3, [pc, #184]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2238      	movs	r2, #56	@ 0x38
 8006f6e:	401a      	ands	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d1ec      	bne.n	8006f54 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f7a:	4b28      	ldr	r3, [pc, #160]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2207      	movs	r2, #7
 8006f80:	4013      	ands	r3, r2
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d21e      	bcs.n	8006fc6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f88:	4b24      	ldr	r3, [pc, #144]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2207      	movs	r2, #7
 8006f8e:	4393      	bics	r3, r2
 8006f90:	0019      	movs	r1, r3
 8006f92:	4b22      	ldr	r3, [pc, #136]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f9a:	f7fc fa65 	bl	8003468 <HAL_GetTick>
 8006f9e:	0003      	movs	r3, r0
 8006fa0:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006fa2:	e009      	b.n	8006fb8 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa4:	f7fc fa60 	bl	8003468 <HAL_GetTick>
 8006fa8:	0002      	movs	r2, r0
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	4a1c      	ldr	r2, [pc, #112]	@ (8007020 <HAL_RCC_ClockConfig+0x210>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e02c      	b.n	8007012 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006fb8:	4b18      	ldr	r3, [pc, #96]	@ (800701c <HAL_RCC_ClockConfig+0x20c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2207      	movs	r2, #7
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d1ee      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d009      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006fd0:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4a16      	ldr	r2, [pc, #88]	@ (8007030 <HAL_RCC_ClockConfig+0x220>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	0019      	movs	r1, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	4b11      	ldr	r3, [pc, #68]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006fe4:	f000 f82c 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 8006fe8:	0001      	movs	r1, r0
 8006fea:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <HAL_RCC_ClockConfig+0x214>)
 8006fec:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	220f      	movs	r2, #15
 8006ff2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <HAL_RCC_ClockConfig+0x224>)
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006ffa:	221f      	movs	r2, #31
 8006ffc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8006ffe:	000a      	movs	r2, r1
 8007000:	40da      	lsrs	r2, r3
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <HAL_RCC_ClockConfig+0x228>)
 8007004:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <HAL_RCC_ClockConfig+0x22c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	0018      	movs	r0, r3
 800700c:	f7fc f9d0 	bl	80033b0 <HAL_InitTick>
 8007010:	0003      	movs	r3, r0
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b004      	add	sp, #16
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	40022000 	.word	0x40022000
 8007020:	00001388 	.word	0x00001388
 8007024:	40021000 	.word	0x40021000
 8007028:	ffff84ff 	.word	0xffff84ff
 800702c:	fffff0ff 	.word	0xfffff0ff
 8007030:	ffff8fff 	.word	0xffff8fff
 8007034:	0800a864 	.word	0x0800a864
 8007038:	20000074 	.word	0x20000074
 800703c:	20000078 	.word	0x20000078

08007040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8007046:	4b27      	ldr	r3, [pc, #156]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	089b      	lsrs	r3, r3, #2
 800704c:	2207      	movs	r2, #7
 800704e:	4013      	ands	r3, r2
 8007050:	3301      	adds	r3, #1
 8007052:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007054:	4b23      	ldr	r3, [pc, #140]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2238      	movs	r2, #56	@ 0x38
 800705a:	4013      	ands	r3, r2
 800705c:	d10f      	bne.n	800707e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800705e:	4b21      	ldr	r3, [pc, #132]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	0adb      	lsrs	r3, r3, #11
 8007064:	2207      	movs	r2, #7
 8007066:	4013      	ands	r3, r2
 8007068:	2201      	movs	r2, #1
 800706a:	409a      	lsls	r2, r3
 800706c:	0013      	movs	r3, r2
 800706e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	481d      	ldr	r0, [pc, #116]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007074:	f7f9 f848 	bl	8000108 <__udivsi3>
 8007078:	0003      	movs	r3, r0
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e027      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800707e:	4b19      	ldr	r3, [pc, #100]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2238      	movs	r2, #56	@ 0x38
 8007084:	4013      	ands	r3, r2
 8007086:	2b08      	cmp	r3, #8
 8007088:	d102      	bne.n	8007090 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800708a:	4b18      	ldr	r3, [pc, #96]	@ (80070ec <HAL_RCC_GetSysClockFreq+0xac>)
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	e01e      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8007090:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2238      	movs	r2, #56	@ 0x38
 8007096:	4013      	ands	r3, r2
 8007098:	2b20      	cmp	r3, #32
 800709a:	d103      	bne.n	80070a4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800709c:	2380      	movs	r3, #128	@ 0x80
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	e014      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80070a4:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2238      	movs	r2, #56	@ 0x38
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b18      	cmp	r3, #24
 80070ae:	d103      	bne.n	80070b8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80070b0:	23fa      	movs	r3, #250	@ 0xfa
 80070b2:	01db      	lsls	r3, r3, #7
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e00a      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80070b8:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2238      	movs	r2, #56	@ 0x38
 80070be:	4013      	ands	r3, r2
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d102      	bne.n	80070ca <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80070c4:	4b08      	ldr	r3, [pc, #32]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e001      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7f9 f819 	bl	8000108 <__udivsi3>
 80070d6:	0003      	movs	r3, r0
 80070d8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	0018      	movs	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	b004      	add	sp, #16
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40021000 	.word	0x40021000
 80070e8:	02dc6c00 	.word	0x02dc6c00
 80070ec:	007a1200 	.word	0x007a1200

080070f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80070f4:	f7ff ffa4 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 80070f8:	0001      	movs	r1, r0
 80070fa:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <HAL_RCC_GetHCLKFreq+0x30>)
 80070fc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	220f      	movs	r2, #15
 8007102:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007104:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <HAL_RCC_GetHCLKFreq+0x34>)
 8007106:	0092      	lsls	r2, r2, #2
 8007108:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800710a:	221f      	movs	r2, #31
 800710c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800710e:	000a      	movs	r2, r1
 8007110:	40da      	lsrs	r2, r3
 8007112:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <HAL_RCC_GetHCLKFreq+0x38>)
 8007114:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8007116:	4b04      	ldr	r3, [pc, #16]	@ (8007128 <HAL_RCC_GetHCLKFreq+0x38>)
 8007118:	681b      	ldr	r3, [r3, #0]
}
 800711a:	0018      	movs	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	40021000 	.word	0x40021000
 8007124:	0800a864 	.word	0x0800a864
 8007128:	20000074 	.word	0x20000074

0800712c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8007130:	f7ff ffde 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 8007134:	0001      	movs	r1, r0
 8007136:	4b07      	ldr	r3, [pc, #28]	@ (8007154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	0b1b      	lsrs	r3, r3, #12
 800713c:	2207      	movs	r2, #7
 800713e:	401a      	ands	r2, r3
 8007140:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007142:	0092      	lsls	r2, r2, #2
 8007144:	58d3      	ldr	r3, [r2, r3]
 8007146:	221f      	movs	r2, #31
 8007148:	4013      	ands	r3, r2
 800714a:	40d9      	lsrs	r1, r3
 800714c:	000b      	movs	r3, r1
}
 800714e:	0018      	movs	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40021000 	.word	0x40021000
 8007158:	0800a8a4 	.word	0x0800a8a4

0800715c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007164:	2313      	movs	r3, #19
 8007166:	18fb      	adds	r3, r7, r3
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800716c:	2312      	movs	r3, #18
 800716e:	18fb      	adds	r3, r7, r3
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2240      	movs	r2, #64	@ 0x40
 800717a:	4013      	ands	r3, r2
 800717c:	d100      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800717e:	e079      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007180:	2011      	movs	r0, #17
 8007182:	183b      	adds	r3, r7, r0
 8007184:	2200      	movs	r2, #0
 8007186:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007188:	4b6a      	ldr	r3, [pc, #424]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800718a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800718c:	2380      	movs	r3, #128	@ 0x80
 800718e:	055b      	lsls	r3, r3, #21
 8007190:	4013      	ands	r3, r2
 8007192:	d110      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007194:	4b67      	ldr	r3, [pc, #412]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007198:	4b66      	ldr	r3, [pc, #408]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800719a:	2180      	movs	r1, #128	@ 0x80
 800719c:	0549      	lsls	r1, r1, #21
 800719e:	430a      	orrs	r2, r1
 80071a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80071a2:	4b64      	ldr	r3, [pc, #400]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071a6:	2380      	movs	r3, #128	@ 0x80
 80071a8:	055b      	lsls	r3, r3, #21
 80071aa:	4013      	ands	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071b0:	183b      	adds	r3, r7, r0
 80071b2:	2201      	movs	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80071b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071ba:	23c0      	movs	r3, #192	@ 0xc0
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4013      	ands	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d019      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d014      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80071d2:	4b58      	ldr	r3, [pc, #352]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d6:	4a58      	ldr	r2, [pc, #352]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80071d8:	4013      	ands	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071dc:	4b55      	ldr	r3, [pc, #340]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071e0:	4b54      	ldr	r3, [pc, #336]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071e2:	2180      	movs	r1, #128	@ 0x80
 80071e4:	0249      	lsls	r1, r1, #9
 80071e6:	430a      	orrs	r2, r1
 80071e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071ea:	4b52      	ldr	r3, [pc, #328]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071ee:	4b51      	ldr	r3, [pc, #324]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071f0:	4952      	ldr	r1, [pc, #328]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80071f2:	400a      	ands	r2, r1
 80071f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80071f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2201      	movs	r2, #1
 8007200:	4013      	ands	r3, r2
 8007202:	d016      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007204:	f7fc f930 	bl	8003468 <HAL_GetTick>
 8007208:	0003      	movs	r3, r0
 800720a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800720c:	e00c      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720e:	f7fc f92b 	bl	8003468 <HAL_GetTick>
 8007212:	0002      	movs	r2, r0
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	4a49      	ldr	r2, [pc, #292]	@ (8007340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d904      	bls.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800721e:	2313      	movs	r3, #19
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	2203      	movs	r2, #3
 8007224:	701a      	strb	r2, [r3, #0]
          break;
 8007226:	e004      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007228:	4b42      	ldr	r3, [pc, #264]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800722a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722c:	2202      	movs	r2, #2
 800722e:	4013      	ands	r3, r2
 8007230:	d0ed      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8007232:	2313      	movs	r3, #19
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800723c:	4b3d      	ldr	r3, [pc, #244]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800723e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007240:	4a3d      	ldr	r2, [pc, #244]	@ (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007242:	4013      	ands	r3, r2
 8007244:	0019      	movs	r1, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	4b3a      	ldr	r3, [pc, #232]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800724c:	430a      	orrs	r2, r1
 800724e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007250:	e005      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007252:	2312      	movs	r3, #18
 8007254:	18fb      	adds	r3, r7, r3
 8007256:	2213      	movs	r2, #19
 8007258:	18ba      	adds	r2, r7, r2
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800725e:	2311      	movs	r3, #17
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d105      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007268:	4b32      	ldr	r3, [pc, #200]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800726a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800726c:	4b31      	ldr	r3, [pc, #196]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800726e:	4935      	ldr	r1, [pc, #212]	@ (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007270:	400a      	ands	r2, r1
 8007272:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2201      	movs	r2, #1
 800727a:	4013      	ands	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800727e:	4b2d      	ldr	r3, [pc, #180]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007282:	2203      	movs	r2, #3
 8007284:	4393      	bics	r3, r2
 8007286:	0019      	movs	r1, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	4b29      	ldr	r3, [pc, #164]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800728e:	430a      	orrs	r2, r1
 8007290:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2202      	movs	r2, #2
 8007298:	4013      	ands	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800729c:	4b25      	ldr	r3, [pc, #148]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800729e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a0:	4a29      	ldr	r2, [pc, #164]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	0019      	movs	r1, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	4b22      	ldr	r3, [pc, #136]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072ac:	430a      	orrs	r2, r1
 80072ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2220      	movs	r2, #32
 80072b6:	4013      	ands	r3, r2
 80072b8:	d008      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	0899      	lsrs	r1, r3, #2
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072c8:	430a      	orrs	r2, r1
 80072ca:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2208      	movs	r2, #8
 80072d2:	4013      	ands	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072d6:	4b17      	ldr	r3, [pc, #92]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072da:	4a1c      	ldr	r2, [pc, #112]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80072dc:	4013      	ands	r3, r2
 80072de:	0019      	movs	r1, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695a      	ldr	r2, [r3, #20]
 80072e4:	4b13      	ldr	r3, [pc, #76]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072e6:	430a      	orrs	r2, r1
 80072e8:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2204      	movs	r2, #4
 80072f0:	4013      	ands	r3, r2
 80072f2:	d009      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80072f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f8:	4a15      	ldr	r2, [pc, #84]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	0019      	movs	r1, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	4b0c      	ldr	r3, [pc, #48]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007304:	430a      	orrs	r2, r1
 8007306:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2280      	movs	r2, #128	@ 0x80
 800730e:	4013      	ands	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8007312:	4b08      	ldr	r3, [pc, #32]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	22e0      	movs	r2, #224	@ 0xe0
 8007318:	4393      	bics	r3, r2
 800731a:	0019      	movs	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	4b04      	ldr	r3, [pc, #16]	@ (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007322:	430a      	orrs	r2, r1
 8007324:	601a      	str	r2, [r3, #0]
  }
  return status;
 8007326:	2312      	movs	r3, #18
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	781b      	ldrb	r3, [r3, #0]
}
 800732c:	0018      	movs	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	b006      	add	sp, #24
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40021000 	.word	0x40021000
 8007338:	fffffcff 	.word	0xfffffcff
 800733c:	fffeffff 	.word	0xfffeffff
 8007340:	00001388 	.word	0x00001388
 8007344:	efffffff 	.word	0xefffffff
 8007348:	ffffcfff 	.word	0xffffcfff
 800734c:	ffffefff 	.word	0xffffefff
 8007350:	ffff3fff 	.word	0xffff3fff

08007354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e0a8      	b.n	80074b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	2382      	movs	r3, #130	@ 0x82
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	429a      	cmp	r2, r3
 8007378:	d009      	beq.n	800738e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	61da      	str	r2, [r3, #28]
 8007380:	e005      	b.n	800738e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	225d      	movs	r2, #93	@ 0x5d
 8007398:	5c9b      	ldrb	r3, [r3, r2]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d107      	bne.n	80073b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	225c      	movs	r2, #92	@ 0x5c
 80073a4:	2100      	movs	r1, #0
 80073a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	0018      	movs	r0, r3
 80073ac:	f7fb fd78 	bl	8002ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	225d      	movs	r2, #93	@ 0x5d
 80073b4:	2102      	movs	r1, #2
 80073b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2140      	movs	r1, #64	@ 0x40
 80073c4:	438a      	bics	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	23e0      	movs	r3, #224	@ 0xe0
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d902      	bls.n	80073da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e002      	b.n	80073e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073da:	2380      	movs	r3, #128	@ 0x80
 80073dc:	015b      	lsls	r3, r3, #5
 80073de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	23f0      	movs	r3, #240	@ 0xf0
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d008      	beq.n	80073fe <HAL_SPI_Init+0xaa>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	23e0      	movs	r3, #224	@ 0xe0
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d002      	beq.n	80073fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	2382      	movs	r3, #130	@ 0x82
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	401a      	ands	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6899      	ldr	r1, [r3, #8]
 800740c:	2384      	movs	r3, #132	@ 0x84
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	400b      	ands	r3, r1
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2102      	movs	r1, #2
 800741a:	400b      	ands	r3, r1
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	2101      	movs	r1, #1
 8007424:	400b      	ands	r3, r1
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6999      	ldr	r1, [r3, #24]
 800742c:	2380      	movs	r3, #128	@ 0x80
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	400b      	ands	r3, r1
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	2138      	movs	r1, #56	@ 0x38
 800743a:	400b      	ands	r3, r1
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	2180      	movs	r1, #128	@ 0x80
 8007444:	400b      	ands	r3, r1
 8007446:	431a      	orrs	r2, r3
 8007448:	0011      	movs	r1, r2
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800744e:	2380      	movs	r3, #128	@ 0x80
 8007450:	019b      	lsls	r3, r3, #6
 8007452:	401a      	ands	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	2204      	movs	r2, #4
 8007464:	401a      	ands	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746a:	2110      	movs	r1, #16
 800746c:	400b      	ands	r3, r1
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007474:	2108      	movs	r1, #8
 8007476:	400b      	ands	r3, r1
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68d9      	ldr	r1, [r3, #12]
 800747e:	23f0      	movs	r3, #240	@ 0xf0
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	400b      	ands	r3, r1
 8007484:	431a      	orrs	r2, r3
 8007486:	0011      	movs	r1, r2
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	2380      	movs	r3, #128	@ 0x80
 800748c:	015b      	lsls	r3, r3, #5
 800748e:	401a      	ands	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69da      	ldr	r2, [r3, #28]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4907      	ldr	r1, [pc, #28]	@ (80074c0 <HAL_SPI_Init+0x16c>)
 80074a4:	400a      	ands	r2, r1
 80074a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	225d      	movs	r2, #93	@ 0x5d
 80074b2:	2101      	movs	r1, #1
 80074b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	0018      	movs	r0, r3
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b004      	add	sp, #16
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	fffff7ff 	.word	0xfffff7ff

080074c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	@ 0x28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	001a      	movs	r2, r3
 80074d2:	1cbb      	adds	r3, r7, #2
 80074d4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074d6:	2301      	movs	r3, #1
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074da:	f7fb ffc5 	bl	8003468 <HAL_GetTick>
 80074de:	0003      	movs	r3, r0
 80074e0:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074e2:	201f      	movs	r0, #31
 80074e4:	183b      	adds	r3, r7, r0
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	215d      	movs	r1, #93	@ 0x5d
 80074ea:	5c52      	ldrb	r2, [r2, r1]
 80074ec:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80074f4:	2316      	movs	r3, #22
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	1cba      	adds	r2, r7, #2
 80074fa:	8812      	ldrh	r2, [r2, #0]
 80074fc:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 80074fe:	2314      	movs	r3, #20
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	1cba      	adds	r2, r7, #2
 8007504:	8812      	ldrh	r2, [r2, #0]
 8007506:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007508:	183b      	adds	r3, r7, r0
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d00e      	beq.n	800752e <HAL_SPI_TransmitReceive+0x6a>
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	2382      	movs	r3, #130	@ 0x82
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	429a      	cmp	r2, r3
 8007518:	d107      	bne.n	800752a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <HAL_SPI_TransmitReceive+0x66>
 8007522:	183b      	adds	r3, r7, r0
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b04      	cmp	r3, #4
 8007528:	d001      	beq.n	800752e <HAL_SPI_TransmitReceive+0x6a>
  {
    return HAL_BUSY;
 800752a:	2302      	movs	r3, #2
 800752c:	e203      	b.n	8007936 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d006      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x7e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x7e>
 800753a:	1cbb      	adds	r3, r7, #2
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e1f7      	b.n	8007936 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	225c      	movs	r2, #92	@ 0x5c
 800754a:	5c9b      	ldrb	r3, [r3, r2]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x90>
 8007550:	2302      	movs	r3, #2
 8007552:	e1f0      	b.n	8007936 <HAL_SPI_TransmitReceive+0x472>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	225c      	movs	r2, #92	@ 0x5c
 8007558:	2101      	movs	r1, #1
 800755a:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	225d      	movs	r2, #93	@ 0x5d
 8007560:	5c9b      	ldrb	r3, [r3, r2]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b04      	cmp	r3, #4
 8007566:	d003      	beq.n	8007570 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	225d      	movs	r2, #93	@ 0x5d
 800756c:	2105      	movs	r1, #5
 800756e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1cba      	adds	r2, r7, #2
 8007580:	2146      	movs	r1, #70	@ 0x46
 8007582:	8812      	ldrh	r2, [r2, #0]
 8007584:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1cba      	adds	r2, r7, #2
 800758a:	2144      	movs	r1, #68	@ 0x44
 800758c:	8812      	ldrh	r2, [r2, #0]
 800758e:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1cba      	adds	r2, r7, #2
 800759a:	8812      	ldrh	r2, [r2, #0]
 800759c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1cba      	adds	r2, r7, #2
 80075a2:	8812      	ldrh	r2, [r2, #0]
 80075a4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	23e0      	movs	r3, #224	@ 0xe0
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d804      	bhi.n	80075c8 <HAL_SPI_TransmitReceive+0x104>
 80075be:	2314      	movs	r3, #20
 80075c0:	18fb      	adds	r3, r7, r3
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d908      	bls.n	80075da <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	49c1      	ldr	r1, [pc, #772]	@ (80078d8 <HAL_SPI_TransmitReceive+0x414>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
 80075d8:	e008      	b.n	80075ec <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2180      	movs	r1, #128	@ 0x80
 80075e6:	0149      	lsls	r1, r1, #5
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2240      	movs	r2, #64	@ 0x40
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d007      	beq.n	800760a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2140      	movs	r1, #64	@ 0x40
 8007606:	430a      	orrs	r2, r1
 8007608:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	23e0      	movs	r3, #224	@ 0xe0
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	429a      	cmp	r2, r3
 8007614:	d800      	bhi.n	8007618 <HAL_SPI_TransmitReceive+0x154>
 8007616:	e084      	b.n	8007722 <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_SPI_TransmitReceive+0x168>
 8007620:	2316      	movs	r3, #22
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d000      	beq.n	800762c <HAL_SPI_TransmitReceive+0x168>
 800762a:	e06e      	b.n	800770a <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	1c9a      	adds	r2, r3, #2
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007650:	e05b      	b.n	800770a <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2202      	movs	r2, #2
 800765a:	4013      	ands	r3, r2
 800765c:	2b02      	cmp	r3, #2
 800765e:	d11b      	bne.n	8007698 <HAL_SPI_TransmitReceive+0x1d4>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d016      	beq.n	8007698 <HAL_SPI_TransmitReceive+0x1d4>
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	2b01      	cmp	r3, #1
 800766e:	d113      	bne.n	8007698 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	1c9a      	adds	r2, r3, #2
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2201      	movs	r2, #1
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d11c      	bne.n	80076e0 <HAL_SPI_TransmitReceive+0x21c>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2246      	movs	r2, #70	@ 0x46
 80076aa:	5a9b      	ldrh	r3, [r3, r2]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076bc:	b292      	uxth	r2, r2
 80076be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c4:	1c9a      	adds	r2, r3, #2
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2246      	movs	r2, #70	@ 0x46
 80076ce:	5a9b      	ldrh	r3, [r3, r2]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b299      	uxth	r1, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2246      	movs	r2, #70	@ 0x46
 80076da:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076dc:	2301      	movs	r3, #1
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076e0:	f7fb fec2 	bl	8003468 <HAL_GetTick>
 80076e4:	0002      	movs	r2, r0
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d80c      	bhi.n	800770a <HAL_SPI_TransmitReceive+0x246>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	3301      	adds	r3, #1
 80076f4:	d009      	beq.n	800770a <HAL_SPI_TransmitReceive+0x246>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	225d      	movs	r2, #93	@ 0x5d
 80076fa:	2101      	movs	r1, #1
 80076fc:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	225c      	movs	r2, #92	@ 0x5c
 8007702:	2100      	movs	r1, #0
 8007704:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e115      	b.n	8007936 <HAL_SPI_TransmitReceive+0x472>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d19e      	bne.n	8007652 <HAL_SPI_TransmitReceive+0x18e>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2246      	movs	r2, #70	@ 0x46
 8007718:	5a9b      	ldrh	r3, [r3, r2]
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d198      	bne.n	8007652 <HAL_SPI_TransmitReceive+0x18e>
 8007720:	e0e9      	b.n	80078f6 <HAL_SPI_TransmitReceive+0x432>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_SPI_TransmitReceive+0x272>
 800772a:	2316      	movs	r3, #22
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d000      	beq.n	8007736 <HAL_SPI_TransmitReceive+0x272>
 8007734:	e0d2      	b.n	80078dc <HAL_SPI_TransmitReceive+0x418>
    {
      if (hspi->TxXferCount > 1U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d912      	bls.n	8007766 <HAL_SPI_TransmitReceive+0x2a2>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	881a      	ldrh	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	1c9a      	adds	r2, r3, #2
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b02      	subs	r3, #2
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007764:	e0ba      	b.n	80078dc <HAL_SPI_TransmitReceive+0x418>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800778c:	e0a6      	b.n	80078dc <HAL_SPI_TransmitReceive+0x418>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	2202      	movs	r2, #2
 8007796:	4013      	ands	r3, r2
 8007798:	2b02      	cmp	r3, #2
 800779a:	d134      	bne.n	8007806 <HAL_SPI_TransmitReceive+0x342>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d02f      	beq.n	8007806 <HAL_SPI_TransmitReceive+0x342>
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d12c      	bne.n	8007806 <HAL_SPI_TransmitReceive+0x342>
      {
        if (hspi->TxXferCount > 1U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d912      	bls.n	80077dc <HAL_SPI_TransmitReceive+0x318>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ba:	881a      	ldrh	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c6:	1c9a      	adds	r2, r3, #2
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b02      	subs	r3, #2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077da:	e012      	b.n	8007802 <HAL_SPI_TransmitReceive+0x33e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2201      	movs	r2, #1
 800780e:	4013      	ands	r3, r2
 8007810:	2b01      	cmp	r3, #1
 8007812:	d149      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x3e4>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2246      	movs	r2, #70	@ 0x46
 8007818:	5a9b      	ldrh	r3, [r3, r2]
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d043      	beq.n	80078a8 <HAL_SPI_TransmitReceive+0x3e4>
      {
        if (hspi->RxXferCount > 1U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2246      	movs	r2, #70	@ 0x46
 8007824:	5a9b      	ldrh	r3, [r3, r2]
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b01      	cmp	r3, #1
 800782a:	d924      	bls.n	8007876 <HAL_SPI_TransmitReceive+0x3b2>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007836:	b292      	uxth	r2, r2
 8007838:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	1c9a      	adds	r2, r3, #2
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2246      	movs	r2, #70	@ 0x46
 8007848:	5a9b      	ldrh	r3, [r3, r2]
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b02      	subs	r3, #2
 800784e:	b299      	uxth	r1, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2246      	movs	r2, #70	@ 0x46
 8007854:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2246      	movs	r2, #70	@ 0x46
 800785a:	5a9b      	ldrh	r3, [r3, r2]
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	d820      	bhi.n	80078a4 <HAL_SPI_TransmitReceive+0x3e0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2180      	movs	r1, #128	@ 0x80
 800786e:	0149      	lsls	r1, r1, #5
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
 8007874:	e016      	b.n	80078a4 <HAL_SPI_TransmitReceive+0x3e0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	330c      	adds	r3, #12
 800787c:	001a      	movs	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2246      	movs	r2, #70	@ 0x46
 8007896:	5a9b      	ldrh	r3, [r3, r2]
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b299      	uxth	r1, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2246      	movs	r2, #70	@ 0x46
 80078a2:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078a4:	2301      	movs	r3, #1
 80078a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078a8:	f7fb fdde 	bl	8003468 <HAL_GetTick>
 80078ac:	0002      	movs	r2, r0
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d802      	bhi.n	80078be <HAL_SPI_TransmitReceive+0x3fa>
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	3301      	adds	r3, #1
 80078bc:	d102      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x400>
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10b      	bne.n	80078dc <HAL_SPI_TransmitReceive+0x418>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	225d      	movs	r2, #93	@ 0x5d
 80078c8:	2101      	movs	r1, #1
 80078ca:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	225c      	movs	r2, #92	@ 0x5c
 80078d0:	2100      	movs	r1, #0
 80078d2:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e02e      	b.n	8007936 <HAL_SPI_TransmitReceive+0x472>
 80078d8:	ffffefff 	.word	0xffffefff
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d000      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x424>
 80078e6:	e752      	b.n	800778e <HAL_SPI_TransmitReceive+0x2ca>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2246      	movs	r2, #70	@ 0x46
 80078ec:	5a9b      	ldrh	r3, [r3, r2]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d000      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x432>
 80078f4:	e74b      	b.n	800778e <HAL_SPI_TransmitReceive+0x2ca>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	0018      	movs	r0, r3
 80078fe:	f000 f94f 	bl	8007ba0 <SPI_EndRxTxTransaction>
 8007902:	1e03      	subs	r3, r0, #0
 8007904:	d008      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x454>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	225c      	movs	r2, #92	@ 0x5c
 8007910:	2100      	movs	r1, #0
 8007912:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e00e      	b.n	8007936 <HAL_SPI_TransmitReceive+0x472>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	225d      	movs	r2, #93	@ 0x5d
 800791c:	2101      	movs	r1, #1
 800791e:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	225c      	movs	r2, #92	@ 0x5c
 8007924:	2100      	movs	r1, #0
 8007926:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x470>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <HAL_SPI_TransmitReceive+0x472>
  }
  else
  {
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
  }
}
 8007936:	0018      	movs	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	b00a      	add	sp, #40	@ 0x28
 800793c:	bd80      	pop	{r7, pc}
 800793e:	46c0      	nop			@ (mov r8, r8)

08007940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	1dfb      	adds	r3, r7, #7
 800794e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007950:	f7fb fd8a 	bl	8003468 <HAL_GetTick>
 8007954:	0002      	movs	r2, r0
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	18d3      	adds	r3, r2, r3
 800795e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007960:	f7fb fd82 	bl	8003468 <HAL_GetTick>
 8007964:	0003      	movs	r3, r0
 8007966:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007968:	4b3a      	ldr	r3, [pc, #232]	@ (8007a54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	015b      	lsls	r3, r3, #5
 800796e:	0d1b      	lsrs	r3, r3, #20
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	4353      	muls	r3, r2
 8007974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007976:	e058      	b.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	d055      	beq.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800797e:	f7fb fd73 	bl	8003468 <HAL_GetTick>
 8007982:	0002      	movs	r2, r0
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	429a      	cmp	r2, r3
 800798c:	d902      	bls.n	8007994 <SPI_WaitFlagStateUntilTimeout+0x54>
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d142      	bne.n	8007a1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	21e0      	movs	r1, #224	@ 0xe0
 80079a0:	438a      	bics	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	2382      	movs	r3, #130	@ 0x82
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d113      	bne.n	80079d8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	2380      	movs	r3, #128	@ 0x80
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d005      	beq.n	80079c8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	2380      	movs	r3, #128	@ 0x80
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d107      	bne.n	80079d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2140      	movs	r1, #64	@ 0x40
 80079d4:	438a      	bics	r2, r1
 80079d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079dc:	2380      	movs	r3, #128	@ 0x80
 80079de:	019b      	lsls	r3, r3, #6
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d110      	bne.n	8007a06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	491a      	ldr	r1, [pc, #104]	@ (8007a58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80079f0:	400a      	ands	r2, r1
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	0189      	lsls	r1, r1, #6
 8007a02:	430a      	orrs	r2, r1
 8007a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	225d      	movs	r2, #93	@ 0x5d
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	225c      	movs	r2, #92	@ 0x5c
 8007a12:	2100      	movs	r1, #0
 8007a14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e017      	b.n	8007a4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	4013      	ands	r3, r2
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	425a      	negs	r2, r3
 8007a3a:	4153      	adcs	r3, r2
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	001a      	movs	r2, r3
 8007a40:	1dfb      	adds	r3, r7, #7
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d197      	bne.n	8007978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	b008      	add	sp, #32
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	46c0      	nop			@ (mov r8, r8)
 8007a54:	20000074 	.word	0x20000074
 8007a58:	ffffdfff 	.word	0xffffdfff

08007a5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	@ 0x28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a6a:	2317      	movs	r3, #23
 8007a6c:	18fb      	adds	r3, r7, r3
 8007a6e:	2200      	movs	r2, #0
 8007a70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a72:	f7fb fcf9 	bl	8003468 <HAL_GetTick>
 8007a76:	0002      	movs	r2, r0
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	18d3      	adds	r3, r2, r3
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007a82:	f7fb fcf1 	bl	8003468 <HAL_GetTick>
 8007a86:	0003      	movs	r3, r0
 8007a88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a92:	4b41      	ldr	r3, [pc, #260]	@ (8007b98 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	0013      	movs	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	00da      	lsls	r2, r3, #3
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	0d1b      	lsrs	r3, r3, #20
 8007aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa4:	4353      	muls	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007aa8:	e068      	b.n	8007b7c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	23c0      	movs	r3, #192	@ 0xc0
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d10a      	bne.n	8007aca <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d107      	bne.n	8007aca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	2117      	movs	r1, #23
 8007ac2:	187b      	adds	r3, r7, r1
 8007ac4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ac6:	187b      	adds	r3, r7, r1
 8007ac8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	d055      	beq.n	8007b7c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ad0:	f7fb fcca 	bl	8003468 <HAL_GetTick>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d902      	bls.n	8007ae6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d142      	bne.n	8007b6c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	21e0      	movs	r1, #224	@ 0xe0
 8007af2:	438a      	bics	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	2382      	movs	r3, #130	@ 0x82
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d113      	bne.n	8007b2a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	2380      	movs	r3, #128	@ 0x80
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d005      	beq.n	8007b1a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	2380      	movs	r3, #128	@ 0x80
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d107      	bne.n	8007b2a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2140      	movs	r1, #64	@ 0x40
 8007b26:	438a      	bics	r2, r1
 8007b28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b2e:	2380      	movs	r3, #128	@ 0x80
 8007b30:	019b      	lsls	r3, r3, #6
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d110      	bne.n	8007b58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4916      	ldr	r1, [pc, #88]	@ (8007b9c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007b42:	400a      	ands	r2, r1
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2180      	movs	r1, #128	@ 0x80
 8007b52:	0189      	lsls	r1, r1, #6
 8007b54:	430a      	orrs	r2, r1
 8007b56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	225d      	movs	r2, #93	@ 0x5d
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	225c      	movs	r2, #92	@ 0x5c
 8007b64:	2100      	movs	r1, #0
 8007b66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e010      	b.n	8007b8e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4013      	ands	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d18e      	bne.n	8007aaa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	0018      	movs	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b00a      	add	sp, #40	@ 0x28
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	20000074 	.word	0x20000074
 8007b9c:	ffffdfff 	.word	0xffffdfff

08007ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	23c0      	movs	r3, #192	@ 0xc0
 8007bb0:	0159      	lsls	r1, r3, #5
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	0013      	movs	r3, r2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f7ff ff4e 	bl	8007a5c <SPI_WaitFifoStateUntilTimeout>
 8007bc0:	1e03      	subs	r3, r0, #0
 8007bc2:	d007      	beq.n	8007bd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bc8:	2220      	movs	r2, #32
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e027      	b.n	8007c24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	0013      	movs	r3, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	2180      	movs	r1, #128	@ 0x80
 8007be2:	f7ff fead 	bl	8007940 <SPI_WaitFlagStateUntilTimeout>
 8007be6:	1e03      	subs	r3, r0, #0
 8007be8:	d007      	beq.n	8007bfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bee:	2220      	movs	r2, #32
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e014      	b.n	8007c24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	23c0      	movs	r3, #192	@ 0xc0
 8007bfe:	00d9      	lsls	r1, r3, #3
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	0013      	movs	r3, r2
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f7ff ff27 	bl	8007a5c <SPI_WaitFifoStateUntilTimeout>
 8007c0e:	1e03      	subs	r3, r0, #0
 8007c10:	d007      	beq.n	8007c22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c16:	2220      	movs	r2, #32
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e000      	b.n	8007c24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b004      	add	sp, #16
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e04a      	b.n	8007cd4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	223d      	movs	r2, #61	@ 0x3d
 8007c42:	5c9b      	ldrb	r3, [r3, r2]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d107      	bne.n	8007c5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	223c      	movs	r2, #60	@ 0x3c
 8007c4e:	2100      	movs	r1, #0
 8007c50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7fb f9c9 	bl	8002fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	223d      	movs	r2, #61	@ 0x3d
 8007c5e:	2102      	movs	r1, #2
 8007c60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	0019      	movs	r1, r3
 8007c6c:	0010      	movs	r0, r2
 8007c6e:	f000 fa6b 	bl	8008148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2248      	movs	r2, #72	@ 0x48
 8007c76:	2101      	movs	r1, #1
 8007c78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	223e      	movs	r2, #62	@ 0x3e
 8007c7e:	2101      	movs	r1, #1
 8007c80:	5499      	strb	r1, [r3, r2]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	223f      	movs	r2, #63	@ 0x3f
 8007c86:	2101      	movs	r1, #1
 8007c88:	5499      	strb	r1, [r3, r2]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2240      	movs	r2, #64	@ 0x40
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2241      	movs	r2, #65	@ 0x41
 8007c96:	2101      	movs	r1, #1
 8007c98:	5499      	strb	r1, [r3, r2]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2242      	movs	r2, #66	@ 0x42
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	5499      	strb	r1, [r3, r2]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2243      	movs	r2, #67	@ 0x43
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2244      	movs	r2, #68	@ 0x44
 8007cae:	2101      	movs	r1, #1
 8007cb0:	5499      	strb	r1, [r3, r2]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2245      	movs	r2, #69	@ 0x45
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	5499      	strb	r1, [r3, r2]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2246      	movs	r2, #70	@ 0x46
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	5499      	strb	r1, [r3, r2]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2247      	movs	r2, #71	@ 0x47
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	223d      	movs	r2, #61	@ 0x3d
 8007cce:	2101      	movs	r1, #1
 8007cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	b002      	add	sp, #8
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e04a      	b.n	8007d84 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	223d      	movs	r2, #61	@ 0x3d
 8007cf2:	5c9b      	ldrb	r3, [r3, r2]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d107      	bne.n	8007d0a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	223c      	movs	r2, #60	@ 0x3c
 8007cfe:	2100      	movs	r1, #0
 8007d00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	0018      	movs	r0, r3
 8007d06:	f7fb f951 	bl	8002fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	223d      	movs	r2, #61	@ 0x3d
 8007d0e:	2102      	movs	r1, #2
 8007d10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	0019      	movs	r1, r3
 8007d1c:	0010      	movs	r0, r2
 8007d1e:	f000 fa13 	bl	8008148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2248      	movs	r2, #72	@ 0x48
 8007d26:	2101      	movs	r1, #1
 8007d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	223e      	movs	r2, #62	@ 0x3e
 8007d2e:	2101      	movs	r1, #1
 8007d30:	5499      	strb	r1, [r3, r2]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	223f      	movs	r2, #63	@ 0x3f
 8007d36:	2101      	movs	r1, #1
 8007d38:	5499      	strb	r1, [r3, r2]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2240      	movs	r2, #64	@ 0x40
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2241      	movs	r2, #65	@ 0x41
 8007d46:	2101      	movs	r1, #1
 8007d48:	5499      	strb	r1, [r3, r2]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2242      	movs	r2, #66	@ 0x42
 8007d4e:	2101      	movs	r1, #1
 8007d50:	5499      	strb	r1, [r3, r2]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2243      	movs	r2, #67	@ 0x43
 8007d56:	2101      	movs	r1, #1
 8007d58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2244      	movs	r2, #68	@ 0x44
 8007d5e:	2101      	movs	r1, #1
 8007d60:	5499      	strb	r1, [r3, r2]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2245      	movs	r2, #69	@ 0x45
 8007d66:	2101      	movs	r1, #1
 8007d68:	5499      	strb	r1, [r3, r2]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2246      	movs	r2, #70	@ 0x46
 8007d6e:	2101      	movs	r1, #1
 8007d70:	5499      	strb	r1, [r3, r2]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2247      	movs	r2, #71	@ 0x47
 8007d76:	2101      	movs	r1, #1
 8007d78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	223d      	movs	r2, #61	@ 0x3d
 8007d7e:	2101      	movs	r1, #1
 8007d80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	0018      	movs	r0, r3
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b002      	add	sp, #8
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d108      	bne.n	8007dae <HAL_TIM_PWM_Start+0x22>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	223e      	movs	r2, #62	@ 0x3e
 8007da0:	5c9b      	ldrb	r3, [r3, r2]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	1e5a      	subs	r2, r3, #1
 8007da8:	4193      	sbcs	r3, r2
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	e037      	b.n	8007e1e <HAL_TIM_PWM_Start+0x92>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d108      	bne.n	8007dc6 <HAL_TIM_PWM_Start+0x3a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	223f      	movs	r2, #63	@ 0x3f
 8007db8:	5c9b      	ldrb	r3, [r3, r2]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	1e5a      	subs	r2, r3, #1
 8007dc0:	4193      	sbcs	r3, r2
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	e02b      	b.n	8007e1e <HAL_TIM_PWM_Start+0x92>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d108      	bne.n	8007dde <HAL_TIM_PWM_Start+0x52>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2240      	movs	r2, #64	@ 0x40
 8007dd0:	5c9b      	ldrb	r3, [r3, r2]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	4193      	sbcs	r3, r2
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	e01f      	b.n	8007e1e <HAL_TIM_PWM_Start+0x92>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d108      	bne.n	8007df6 <HAL_TIM_PWM_Start+0x6a>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2241      	movs	r2, #65	@ 0x41
 8007de8:	5c9b      	ldrb	r3, [r3, r2]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	4193      	sbcs	r3, r2
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	e013      	b.n	8007e1e <HAL_TIM_PWM_Start+0x92>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d108      	bne.n	8007e0e <HAL_TIM_PWM_Start+0x82>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2242      	movs	r2, #66	@ 0x42
 8007e00:	5c9b      	ldrb	r3, [r3, r2]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	1e5a      	subs	r2, r3, #1
 8007e08:	4193      	sbcs	r3, r2
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e007      	b.n	8007e1e <HAL_TIM_PWM_Start+0x92>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2243      	movs	r2, #67	@ 0x43
 8007e12:	5c9b      	ldrb	r3, [r3, r2]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	4193      	sbcs	r3, r2
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e081      	b.n	8007f2a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_PWM_Start+0xaa>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	223e      	movs	r2, #62	@ 0x3e
 8007e30:	2102      	movs	r1, #2
 8007e32:	5499      	strb	r1, [r3, r2]
 8007e34:	e023      	b.n	8007e7e <HAL_TIM_PWM_Start+0xf2>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Start+0xba>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	223f      	movs	r2, #63	@ 0x3f
 8007e40:	2102      	movs	r1, #2
 8007e42:	5499      	strb	r1, [r3, r2]
 8007e44:	e01b      	b.n	8007e7e <HAL_TIM_PWM_Start+0xf2>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Start+0xca>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2240      	movs	r2, #64	@ 0x40
 8007e50:	2102      	movs	r1, #2
 8007e52:	5499      	strb	r1, [r3, r2]
 8007e54:	e013      	b.n	8007e7e <HAL_TIM_PWM_Start+0xf2>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b0c      	cmp	r3, #12
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_PWM_Start+0xda>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2241      	movs	r2, #65	@ 0x41
 8007e60:	2102      	movs	r1, #2
 8007e62:	5499      	strb	r1, [r3, r2]
 8007e64:	e00b      	b.n	8007e7e <HAL_TIM_PWM_Start+0xf2>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_PWM_Start+0xea>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2242      	movs	r2, #66	@ 0x42
 8007e70:	2102      	movs	r1, #2
 8007e72:	5499      	strb	r1, [r3, r2]
 8007e74:	e003      	b.n	8007e7e <HAL_TIM_PWM_Start+0xf2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2243      	movs	r2, #67	@ 0x43
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	2201      	movs	r2, #1
 8007e86:	0018      	movs	r0, r3
 8007e88:	f000 fc7e 	bl	8008788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a28      	ldr	r2, [pc, #160]	@ (8007f34 <HAL_TIM_PWM_Start+0x1a8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_TIM_PWM_Start+0x11e>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a27      	ldr	r2, [pc, #156]	@ (8007f38 <HAL_TIM_PWM_Start+0x1ac>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_TIM_PWM_Start+0x11e>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a25      	ldr	r2, [pc, #148]	@ (8007f3c <HAL_TIM_PWM_Start+0x1b0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d101      	bne.n	8007eae <HAL_TIM_PWM_Start+0x122>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <HAL_TIM_PWM_Start+0x124>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2180      	movs	r1, #128	@ 0x80
 8007ec0:	0209      	lsls	r1, r1, #8
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a1a      	ldr	r2, [pc, #104]	@ (8007f34 <HAL_TIM_PWM_Start+0x1a8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00a      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x15a>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	2380      	movs	r3, #128	@ 0x80
 8007ed6:	05db      	lsls	r3, r3, #23
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d004      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x15a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a17      	ldr	r2, [pc, #92]	@ (8007f40 <HAL_TIM_PWM_Start+0x1b4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d116      	bne.n	8007f14 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	4a15      	ldr	r2, [pc, #84]	@ (8007f44 <HAL_TIM_PWM_Start+0x1b8>)
 8007eee:	4013      	ands	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b06      	cmp	r3, #6
 8007ef6:	d016      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x19a>
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	2380      	movs	r3, #128	@ 0x80
 8007efc:	025b      	lsls	r3, r3, #9
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d011      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f12:	e008      	b.n	8007f26 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2101      	movs	r1, #1
 8007f20:	430a      	orrs	r2, r1
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e000      	b.n	8007f28 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f26:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b004      	add	sp, #16
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	46c0      	nop			@ (mov r8, r8)
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40014400 	.word	0x40014400
 8007f3c:	40014800 	.word	0x40014800
 8007f40:	40000400 	.word	0x40000400
 8007f44:	00010007 	.word	0x00010007

08007f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f54:	2317      	movs	r3, #23
 8007f56:	18fb      	adds	r3, r7, r3
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	223c      	movs	r2, #60	@ 0x3c
 8007f60:	5c9b      	ldrb	r3, [r3, r2]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e0e5      	b.n	8008136 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	223c      	movs	r2, #60	@ 0x3c
 8007f6e:	2101      	movs	r1, #1
 8007f70:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b14      	cmp	r3, #20
 8007f76:	d900      	bls.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007f78:	e0d1      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	009a      	lsls	r2, r3, #2
 8007f7e:	4b70      	ldr	r3, [pc, #448]	@ (8008140 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007f80:	18d3      	adds	r3, r2, r3
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	0011      	movs	r1, r2
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f000 f95e 	bl	8008250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2108      	movs	r1, #8
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2104      	movs	r1, #4
 8007fb0:	438a      	bics	r2, r1
 8007fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	619a      	str	r2, [r3, #24]
      break;
 8007fc6:	e0af      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	0011      	movs	r1, r2
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f000 f9bd 	bl	8008350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699a      	ldr	r2, [r3, #24]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2180      	movs	r1, #128	@ 0x80
 8007fe2:	0109      	lsls	r1, r1, #4
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699a      	ldr	r2, [r3, #24]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4954      	ldr	r1, [pc, #336]	@ (8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007ff4:	400a      	ands	r2, r1
 8007ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6999      	ldr	r1, [r3, #24]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	619a      	str	r2, [r3, #24]
      break;
 800800c:	e08c      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	0011      	movs	r1, r2
 8008016:	0018      	movs	r0, r3
 8008018:	f000 fa18 	bl	800844c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69da      	ldr	r2, [r3, #28]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2108      	movs	r1, #8
 8008028:	430a      	orrs	r2, r1
 800802a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69da      	ldr	r2, [r3, #28]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2104      	movs	r1, #4
 8008038:	438a      	bics	r2, r1
 800803a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69d9      	ldr	r1, [r3, #28]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	61da      	str	r2, [r3, #28]
      break;
 800804e:	e06b      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	0011      	movs	r1, r2
 8008058:	0018      	movs	r0, r3
 800805a:	f000 fa79 	bl	8008550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2180      	movs	r1, #128	@ 0x80
 800806a:	0109      	lsls	r1, r1, #4
 800806c:	430a      	orrs	r2, r1
 800806e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69da      	ldr	r2, [r3, #28]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4932      	ldr	r1, [pc, #200]	@ (8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800807c:	400a      	ands	r2, r1
 800807e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69d9      	ldr	r1, [r3, #28]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	61da      	str	r2, [r3, #28]
      break;
 8008094:	e048      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	0011      	movs	r1, r2
 800809e:	0018      	movs	r0, r3
 80080a0:	f000 faba 	bl	8008618 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2108      	movs	r1, #8
 80080b0:	430a      	orrs	r2, r1
 80080b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2104      	movs	r1, #4
 80080c0:	438a      	bics	r2, r1
 80080c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80080d6:	e027      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	0011      	movs	r1, r2
 80080e0:	0018      	movs	r0, r3
 80080e2:	f000 faf3 	bl	80086cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2180      	movs	r1, #128	@ 0x80
 80080f2:	0109      	lsls	r1, r1, #4
 80080f4:	430a      	orrs	r2, r1
 80080f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4910      	ldr	r1, [pc, #64]	@ (8008144 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008104:	400a      	ands	r2, r1
 8008106:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	021a      	lsls	r2, r3, #8
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800811c:	e004      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800811e:	2317      	movs	r3, #23
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	2201      	movs	r2, #1
 8008124:	701a      	strb	r2, [r3, #0]
      break;
 8008126:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	223c      	movs	r2, #60	@ 0x3c
 800812c:	2100      	movs	r1, #0
 800812e:	5499      	strb	r1, [r3, r2]

  return status;
 8008130:	2317      	movs	r3, #23
 8008132:	18fb      	adds	r3, r7, r3
 8008134:	781b      	ldrb	r3, [r3, #0]
}
 8008136:	0018      	movs	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	b006      	add	sp, #24
 800813c:	bd80      	pop	{r7, pc}
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	0800a8c4 	.word	0x0800a8c4
 8008144:	fffffbff 	.word	0xfffffbff

08008148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a37      	ldr	r2, [pc, #220]	@ (8008238 <TIM_Base_SetConfig+0xf0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d008      	beq.n	8008172 <TIM_Base_SetConfig+0x2a>
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	2380      	movs	r3, #128	@ 0x80
 8008164:	05db      	lsls	r3, r3, #23
 8008166:	429a      	cmp	r2, r3
 8008168:	d003      	beq.n	8008172 <TIM_Base_SetConfig+0x2a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a33      	ldr	r2, [pc, #204]	@ (800823c <TIM_Base_SetConfig+0xf4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d108      	bne.n	8008184 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2270      	movs	r2, #112	@ 0x70
 8008176:	4393      	bics	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a2c      	ldr	r2, [pc, #176]	@ (8008238 <TIM_Base_SetConfig+0xf0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d014      	beq.n	80081b6 <TIM_Base_SetConfig+0x6e>
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	2380      	movs	r3, #128	@ 0x80
 8008190:	05db      	lsls	r3, r3, #23
 8008192:	429a      	cmp	r2, r3
 8008194:	d00f      	beq.n	80081b6 <TIM_Base_SetConfig+0x6e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a28      	ldr	r2, [pc, #160]	@ (800823c <TIM_Base_SetConfig+0xf4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00b      	beq.n	80081b6 <TIM_Base_SetConfig+0x6e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a27      	ldr	r2, [pc, #156]	@ (8008240 <TIM_Base_SetConfig+0xf8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d007      	beq.n	80081b6 <TIM_Base_SetConfig+0x6e>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a26      	ldr	r2, [pc, #152]	@ (8008244 <TIM_Base_SetConfig+0xfc>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d003      	beq.n	80081b6 <TIM_Base_SetConfig+0x6e>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a25      	ldr	r2, [pc, #148]	@ (8008248 <TIM_Base_SetConfig+0x100>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d108      	bne.n	80081c8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a24      	ldr	r2, [pc, #144]	@ (800824c <TIM_Base_SetConfig+0x104>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2280      	movs	r2, #128	@ 0x80
 80081cc:	4393      	bics	r3, r2
 80081ce:	001a      	movs	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <TIM_Base_SetConfig+0xf0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d007      	beq.n	8008206 <TIM_Base_SetConfig+0xbe>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a12      	ldr	r2, [pc, #72]	@ (8008244 <TIM_Base_SetConfig+0xfc>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <TIM_Base_SetConfig+0xbe>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a11      	ldr	r2, [pc, #68]	@ (8008248 <TIM_Base_SetConfig+0x100>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d103      	bne.n	800820e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2201      	movs	r2, #1
 800821a:	4013      	ands	r3, r2
 800821c:	2b01      	cmp	r3, #1
 800821e:	d106      	bne.n	800822e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2201      	movs	r2, #1
 8008226:	4393      	bics	r3, r2
 8008228:	001a      	movs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	611a      	str	r2, [r3, #16]
  }
}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b004      	add	sp, #16
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			@ (mov r8, r8)
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40000400 	.word	0x40000400
 8008240:	40002000 	.word	0x40002000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	fffffcff 	.word	0xfffffcff

08008250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	2201      	movs	r2, #1
 8008266:	4393      	bics	r3, r2
 8008268:	001a      	movs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4a2e      	ldr	r2, [pc, #184]	@ (8008338 <TIM_OC1_SetConfig+0xe8>)
 800827e:	4013      	ands	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2203      	movs	r2, #3
 8008286:	4393      	bics	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2202      	movs	r2, #2
 8008298:	4393      	bics	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a24      	ldr	r2, [pc, #144]	@ (800833c <TIM_OC1_SetConfig+0xec>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d007      	beq.n	80082be <TIM_OC1_SetConfig+0x6e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a23      	ldr	r2, [pc, #140]	@ (8008340 <TIM_OC1_SetConfig+0xf0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d003      	beq.n	80082be <TIM_OC1_SetConfig+0x6e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a22      	ldr	r2, [pc, #136]	@ (8008344 <TIM_OC1_SetConfig+0xf4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d10c      	bne.n	80082d8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2208      	movs	r2, #8
 80082c2:	4393      	bics	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2204      	movs	r2, #4
 80082d4:	4393      	bics	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a18      	ldr	r2, [pc, #96]	@ (800833c <TIM_OC1_SetConfig+0xec>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d007      	beq.n	80082f0 <TIM_OC1_SetConfig+0xa0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a17      	ldr	r2, [pc, #92]	@ (8008340 <TIM_OC1_SetConfig+0xf0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d003      	beq.n	80082f0 <TIM_OC1_SetConfig+0xa0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a16      	ldr	r2, [pc, #88]	@ (8008344 <TIM_OC1_SetConfig+0xf4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d111      	bne.n	8008314 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	4a15      	ldr	r2, [pc, #84]	@ (8008348 <TIM_OC1_SetConfig+0xf8>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	4a14      	ldr	r2, [pc, #80]	@ (800834c <TIM_OC1_SetConfig+0xfc>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4313      	orrs	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	621a      	str	r2, [r3, #32]
}
 800832e:	46c0      	nop			@ (mov r8, r8)
 8008330:	46bd      	mov	sp, r7
 8008332:	b006      	add	sp, #24
 8008334:	bd80      	pop	{r7, pc}
 8008336:	46c0      	nop			@ (mov r8, r8)
 8008338:	fffeff8f 	.word	0xfffeff8f
 800833c:	40012c00 	.word	0x40012c00
 8008340:	40014400 	.word	0x40014400
 8008344:	40014800 	.word	0x40014800
 8008348:	fffffeff 	.word	0xfffffeff
 800834c:	fffffdff 	.word	0xfffffdff

08008350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	2210      	movs	r2, #16
 8008366:	4393      	bics	r3, r2
 8008368:	001a      	movs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4a2c      	ldr	r2, [pc, #176]	@ (8008430 <TIM_OC2_SetConfig+0xe0>)
 800837e:	4013      	ands	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a2b      	ldr	r2, [pc, #172]	@ (8008434 <TIM_OC2_SetConfig+0xe4>)
 8008386:	4013      	ands	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	021b      	lsls	r3, r3, #8
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2220      	movs	r2, #32
 800839a:	4393      	bics	r3, r2
 800839c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a22      	ldr	r2, [pc, #136]	@ (8008438 <TIM_OC2_SetConfig+0xe8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d10d      	bne.n	80083ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2280      	movs	r2, #128	@ 0x80
 80083b6:	4393      	bics	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2240      	movs	r2, #64	@ 0x40
 80083ca:	4393      	bics	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a19      	ldr	r2, [pc, #100]	@ (8008438 <TIM_OC2_SetConfig+0xe8>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d007      	beq.n	80083e6 <TIM_OC2_SetConfig+0x96>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a18      	ldr	r2, [pc, #96]	@ (800843c <TIM_OC2_SetConfig+0xec>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d003      	beq.n	80083e6 <TIM_OC2_SetConfig+0x96>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a17      	ldr	r2, [pc, #92]	@ (8008440 <TIM_OC2_SetConfig+0xf0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d113      	bne.n	800840e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4a16      	ldr	r2, [pc, #88]	@ (8008444 <TIM_OC2_SetConfig+0xf4>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	4a15      	ldr	r2, [pc, #84]	@ (8008448 <TIM_OC2_SetConfig+0xf8>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4313      	orrs	r3, r2
 8008400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4313      	orrs	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	621a      	str	r2, [r3, #32]
}
 8008428:	46c0      	nop			@ (mov r8, r8)
 800842a:	46bd      	mov	sp, r7
 800842c:	b006      	add	sp, #24
 800842e:	bd80      	pop	{r7, pc}
 8008430:	feff8fff 	.word	0xfeff8fff
 8008434:	fffffcff 	.word	0xfffffcff
 8008438:	40012c00 	.word	0x40012c00
 800843c:	40014400 	.word	0x40014400
 8008440:	40014800 	.word	0x40014800
 8008444:	fffffbff 	.word	0xfffffbff
 8008448:	fffff7ff 	.word	0xfffff7ff

0800844c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	4a31      	ldr	r2, [pc, #196]	@ (8008528 <TIM_OC3_SetConfig+0xdc>)
 8008462:	401a      	ands	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4a2d      	ldr	r2, [pc, #180]	@ (800852c <TIM_OC3_SetConfig+0xe0>)
 8008478:	4013      	ands	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2203      	movs	r2, #3
 8008480:	4393      	bics	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	4a27      	ldr	r2, [pc, #156]	@ (8008530 <TIM_OC3_SetConfig+0xe4>)
 8008492:	4013      	ands	r3, r2
 8008494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a23      	ldr	r2, [pc, #140]	@ (8008534 <TIM_OC3_SetConfig+0xe8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d10d      	bne.n	80084c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	4a22      	ldr	r2, [pc, #136]	@ (8008538 <TIM_OC3_SetConfig+0xec>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4a1e      	ldr	r2, [pc, #120]	@ (800853c <TIM_OC3_SetConfig+0xf0>)
 80084c2:	4013      	ands	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008534 <TIM_OC3_SetConfig+0xe8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d007      	beq.n	80084de <TIM_OC3_SetConfig+0x92>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008540 <TIM_OC3_SetConfig+0xf4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_OC3_SetConfig+0x92>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008544 <TIM_OC3_SetConfig+0xf8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d113      	bne.n	8008506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	4a19      	ldr	r2, [pc, #100]	@ (8008548 <TIM_OC3_SetConfig+0xfc>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	4a18      	ldr	r2, [pc, #96]	@ (800854c <TIM_OC3_SetConfig+0x100>)
 80084ea:	4013      	ands	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4313      	orrs	r3, r2
 8008504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	621a      	str	r2, [r3, #32]
}
 8008520:	46c0      	nop			@ (mov r8, r8)
 8008522:	46bd      	mov	sp, r7
 8008524:	b006      	add	sp, #24
 8008526:	bd80      	pop	{r7, pc}
 8008528:	fffffeff 	.word	0xfffffeff
 800852c:	fffeff8f 	.word	0xfffeff8f
 8008530:	fffffdff 	.word	0xfffffdff
 8008534:	40012c00 	.word	0x40012c00
 8008538:	fffff7ff 	.word	0xfffff7ff
 800853c:	fffffbff 	.word	0xfffffbff
 8008540:	40014400 	.word	0x40014400
 8008544:	40014800 	.word	0x40014800
 8008548:	ffffefff 	.word	0xffffefff
 800854c:	ffffdfff 	.word	0xffffdfff

08008550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	4a24      	ldr	r2, [pc, #144]	@ (80085f8 <TIM_OC4_SetConfig+0xa8>)
 8008566:	401a      	ands	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a20      	ldr	r2, [pc, #128]	@ (80085fc <TIM_OC4_SetConfig+0xac>)
 800857c:	4013      	ands	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a1f      	ldr	r2, [pc, #124]	@ (8008600 <TIM_OC4_SetConfig+0xb0>)
 8008584:	4013      	ands	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4313      	orrs	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4a1b      	ldr	r2, [pc, #108]	@ (8008604 <TIM_OC4_SetConfig+0xb4>)
 8008598:	4013      	ands	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	031b      	lsls	r3, r3, #12
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a17      	ldr	r2, [pc, #92]	@ (8008608 <TIM_OC4_SetConfig+0xb8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d007      	beq.n	80085c0 <TIM_OC4_SetConfig+0x70>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a16      	ldr	r2, [pc, #88]	@ (800860c <TIM_OC4_SetConfig+0xbc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_OC4_SetConfig+0x70>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a15      	ldr	r2, [pc, #84]	@ (8008610 <TIM_OC4_SetConfig+0xc0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d109      	bne.n	80085d4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	4a14      	ldr	r2, [pc, #80]	@ (8008614 <TIM_OC4_SetConfig+0xc4>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	019b      	lsls	r3, r3, #6
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	46c0      	nop			@ (mov r8, r8)
 80085f0:	46bd      	mov	sp, r7
 80085f2:	b006      	add	sp, #24
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	46c0      	nop			@ (mov r8, r8)
 80085f8:	ffffefff 	.word	0xffffefff
 80085fc:	feff8fff 	.word	0xfeff8fff
 8008600:	fffffcff 	.word	0xfffffcff
 8008604:	ffffdfff 	.word	0xffffdfff
 8008608:	40012c00 	.word	0x40012c00
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800
 8008614:	ffffbfff 	.word	0xffffbfff

08008618 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	4a21      	ldr	r2, [pc, #132]	@ (80086b4 <TIM_OC5_SetConfig+0x9c>)
 800862e:	401a      	ands	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a1d      	ldr	r2, [pc, #116]	@ (80086b8 <TIM_OC5_SetConfig+0xa0>)
 8008644:	4013      	ands	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	4a19      	ldr	r2, [pc, #100]	@ (80086bc <TIM_OC5_SetConfig+0xa4>)
 8008656:	4013      	ands	r3, r2
 8008658:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	041b      	lsls	r3, r3, #16
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a15      	ldr	r2, [pc, #84]	@ (80086c0 <TIM_OC5_SetConfig+0xa8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d007      	beq.n	800867e <TIM_OC5_SetConfig+0x66>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a14      	ldr	r2, [pc, #80]	@ (80086c4 <TIM_OC5_SetConfig+0xac>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <TIM_OC5_SetConfig+0x66>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a13      	ldr	r2, [pc, #76]	@ (80086c8 <TIM_OC5_SetConfig+0xb0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d109      	bne.n	8008692 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	4a0c      	ldr	r2, [pc, #48]	@ (80086b4 <TIM_OC5_SetConfig+0x9c>)
 8008682:	4013      	ands	r3, r2
 8008684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	621a      	str	r2, [r3, #32]
}
 80086ac:	46c0      	nop			@ (mov r8, r8)
 80086ae:	46bd      	mov	sp, r7
 80086b0:	b006      	add	sp, #24
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	fffeffff 	.word	0xfffeffff
 80086b8:	fffeff8f 	.word	0xfffeff8f
 80086bc:	fffdffff 	.word	0xfffdffff
 80086c0:	40012c00 	.word	0x40012c00
 80086c4:	40014400 	.word	0x40014400
 80086c8:	40014800 	.word	0x40014800

080086cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	4a22      	ldr	r2, [pc, #136]	@ (800876c <TIM_OC6_SetConfig+0xa0>)
 80086e2:	401a      	ands	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008770 <TIM_OC6_SetConfig+0xa4>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	4a1a      	ldr	r2, [pc, #104]	@ (8008774 <TIM_OC6_SetConfig+0xa8>)
 800870c:	4013      	ands	r3, r2
 800870e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	051b      	lsls	r3, r3, #20
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	4313      	orrs	r3, r2
 800871a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a16      	ldr	r2, [pc, #88]	@ (8008778 <TIM_OC6_SetConfig+0xac>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d007      	beq.n	8008734 <TIM_OC6_SetConfig+0x68>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a15      	ldr	r2, [pc, #84]	@ (800877c <TIM_OC6_SetConfig+0xb0>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC6_SetConfig+0x68>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a14      	ldr	r2, [pc, #80]	@ (8008780 <TIM_OC6_SetConfig+0xb4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d109      	bne.n	8008748 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	4a13      	ldr	r2, [pc, #76]	@ (8008784 <TIM_OC6_SetConfig+0xb8>)
 8008738:	4013      	ands	r3, r2
 800873a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	029b      	lsls	r3, r3, #10
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	46bd      	mov	sp, r7
 8008766:	b006      	add	sp, #24
 8008768:	bd80      	pop	{r7, pc}
 800876a:	46c0      	nop			@ (mov r8, r8)
 800876c:	ffefffff 	.word	0xffefffff
 8008770:	feff8fff 	.word	0xfeff8fff
 8008774:	ffdfffff 	.word	0xffdfffff
 8008778:	40012c00 	.word	0x40012c00
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800
 8008784:	fffbffff 	.word	0xfffbffff

08008788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	221f      	movs	r2, #31
 8008798:	4013      	ands	r3, r2
 800879a:	2201      	movs	r2, #1
 800879c:	409a      	lsls	r2, r3
 800879e:	0013      	movs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	43d2      	mvns	r2, r2
 80087aa:	401a      	ands	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a1a      	ldr	r2, [r3, #32]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	211f      	movs	r1, #31
 80087b8:	400b      	ands	r3, r1
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4099      	lsls	r1, r3
 80087be:	000b      	movs	r3, r1
 80087c0:	431a      	orrs	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	46c0      	nop			@ (mov r8, r8)
 80087c8:	46bd      	mov	sp, r7
 80087ca:	b006      	add	sp, #24
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	223c      	movs	r2, #60	@ 0x3c
 80087de:	5c9b      	ldrb	r3, [r3, r2]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d101      	bne.n	80087e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087e4:	2302      	movs	r3, #2
 80087e6:	e050      	b.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	223c      	movs	r2, #60	@ 0x3c
 80087ec:	2101      	movs	r1, #1
 80087ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	223d      	movs	r2, #61	@ 0x3d
 80087f4:	2102      	movs	r1, #2
 80087f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a21      	ldr	r2, [pc, #132]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d108      	bne.n	8008824 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4a20      	ldr	r2, [pc, #128]	@ (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008816:	4013      	ands	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2270      	movs	r2, #112	@ 0x70
 8008828:	4393      	bics	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4313      	orrs	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a14      	ldr	r2, [pc, #80]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00a      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	2380      	movs	r3, #128	@ 0x80
 800884e:	05db      	lsls	r3, r3, #23
 8008850:	429a      	cmp	r2, r3
 8008852:	d004      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a10      	ldr	r2, [pc, #64]	@ (800889c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d10c      	bne.n	8008878 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2280      	movs	r2, #128	@ 0x80
 8008862:	4393      	bics	r3, r2
 8008864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	4313      	orrs	r3, r2
 800886e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	223d      	movs	r2, #61	@ 0x3d
 800887c:	2101      	movs	r1, #1
 800887e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	223c      	movs	r2, #60	@ 0x3c
 8008884:	2100      	movs	r1, #0
 8008886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	0018      	movs	r0, r3
 800888c:	46bd      	mov	sp, r7
 800888e:	b004      	add	sp, #16
 8008890:	bd80      	pop	{r7, pc}
 8008892:	46c0      	nop			@ (mov r8, r8)
 8008894:	40012c00 	.word	0x40012c00
 8008898:	ff0fffff 	.word	0xff0fffff
 800889c:	40000400 	.word	0x40000400

080088a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	223c      	movs	r2, #60	@ 0x3c
 80088b2:	5c9b      	ldrb	r3, [r3, r2]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e06f      	b.n	800899c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	223c      	movs	r2, #60	@ 0x3c
 80088c0:	2101      	movs	r1, #1
 80088c2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	22ff      	movs	r2, #255	@ 0xff
 80088c8:	4393      	bics	r3, r2
 80088ca:	001a      	movs	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4a33      	ldr	r2, [pc, #204]	@ (80089a4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80088d8:	401a      	ands	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4a30      	ldr	r2, [pc, #192]	@ (80089a8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80088e6:	401a      	ands	r2, r3
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4a2e      	ldr	r2, [pc, #184]	@ (80089ac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80088f4:	401a      	ands	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4a2b      	ldr	r2, [pc, #172]	@ (80089b0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008902:	401a      	ands	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4a29      	ldr	r2, [pc, #164]	@ (80089b4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008910:	401a      	ands	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4a26      	ldr	r2, [pc, #152]	@ (80089b8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800891e:	401a      	ands	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4a24      	ldr	r2, [pc, #144]	@ (80089bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800892c:	401a      	ands	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	041b      	lsls	r3, r3, #16
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4a21      	ldr	r2, [pc, #132]	@ (80089c0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800893c:	401a      	ands	r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a1e      	ldr	r2, [pc, #120]	@ (80089c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d11c      	bne.n	800898a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a1d      	ldr	r2, [pc, #116]	@ (80089c8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008954:	401a      	ands	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895a:	051b      	lsls	r3, r3, #20
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4a1a      	ldr	r2, [pc, #104]	@ (80089cc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008964:	401a      	ands	r2, r3
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4a17      	ldr	r2, [pc, #92]	@ (80089d0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008972:	401a      	ands	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008978:	4313      	orrs	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4a15      	ldr	r2, [pc, #84]	@ (80089d4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008980:	401a      	ands	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	223c      	movs	r2, #60	@ 0x3c
 8008996:	2100      	movs	r1, #0
 8008998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	b004      	add	sp, #16
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	fffffcff 	.word	0xfffffcff
 80089a8:	fffffbff 	.word	0xfffffbff
 80089ac:	fffff7ff 	.word	0xfffff7ff
 80089b0:	ffffefff 	.word	0xffffefff
 80089b4:	ffffdfff 	.word	0xffffdfff
 80089b8:	ffffbfff 	.word	0xffffbfff
 80089bc:	fff0ffff 	.word	0xfff0ffff
 80089c0:	efffffff 	.word	0xefffffff
 80089c4:	40012c00 	.word	0x40012c00
 80089c8:	ff0fffff 	.word	0xff0fffff
 80089cc:	feffffff 	.word	0xfeffffff
 80089d0:	fdffffff 	.word	0xfdffffff
 80089d4:	dfffffff 	.word	0xdfffffff

080089d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08a      	sub	sp, #40	@ 0x28
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	1dbb      	adds	r3, r7, #6
 80089e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2288      	movs	r2, #136	@ 0x88
 80089ec:	589b      	ldr	r3, [r3, r2]
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d000      	beq.n	80089f4 <HAL_UART_Transmit+0x1c>
 80089f2:	e090      	b.n	8008b16 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_UART_Transmit+0x2a>
 80089fa:	1dbb      	adds	r3, r7, #6
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e088      	b.n	8008b18 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	2380      	movs	r3, #128	@ 0x80
 8008a0c:	015b      	lsls	r3, r3, #5
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d109      	bne.n	8008a26 <HAL_UART_Transmit+0x4e>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d105      	bne.n	8008a26 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d001      	beq.n	8008a26 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e078      	b.n	8008b18 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2290      	movs	r2, #144	@ 0x90
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2288      	movs	r2, #136	@ 0x88
 8008a32:	2121      	movs	r1, #33	@ 0x21
 8008a34:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a36:	f7fa fd17 	bl	8003468 <HAL_GetTick>
 8008a3a:	0003      	movs	r3, r0
 8008a3c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1dba      	adds	r2, r7, #6
 8008a42:	2154      	movs	r1, #84	@ 0x54
 8008a44:	8812      	ldrh	r2, [r2, #0]
 8008a46:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	1dba      	adds	r2, r7, #6
 8008a4c:	2156      	movs	r1, #86	@ 0x56
 8008a4e:	8812      	ldrh	r2, [r2, #0]
 8008a50:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	2380      	movs	r3, #128	@ 0x80
 8008a58:	015b      	lsls	r3, r3, #5
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d108      	bne.n	8008a70 <HAL_UART_Transmit+0x98>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d104      	bne.n	8008a70 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	e003      	b.n	8008a78 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a78:	e030      	b.n	8008adc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	0013      	movs	r3, r2
 8008a84:	2200      	movs	r2, #0
 8008a86:	2180      	movs	r1, #128	@ 0x80
 8008a88:	f000 ffc8 	bl	8009a1c <UART_WaitOnFlagUntilTimeout>
 8008a8c:	1e03      	subs	r3, r0, #0
 8008a8e:	d005      	beq.n	8008a9c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2288      	movs	r2, #136	@ 0x88
 8008a94:	2120      	movs	r1, #32
 8008a96:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e03d      	b.n	8008b18 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	001a      	movs	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	05d2      	lsls	r2, r2, #23
 8008aae:	0dd2      	lsrs	r2, r2, #23
 8008ab0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	3302      	adds	r3, #2
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	e007      	b.n	8008aca <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	781a      	ldrb	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2256      	movs	r2, #86	@ 0x56
 8008ace:	5a9b      	ldrh	r3, [r3, r2]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b299      	uxth	r1, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2256      	movs	r2, #86	@ 0x56
 8008ada:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2256      	movs	r2, #86	@ 0x56
 8008ae0:	5a9b      	ldrh	r3, [r3, r2]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1c8      	bne.n	8008a7a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	0013      	movs	r3, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	2140      	movs	r1, #64	@ 0x40
 8008af6:	f000 ff91 	bl	8009a1c <UART_WaitOnFlagUntilTimeout>
 8008afa:	1e03      	subs	r3, r0, #0
 8008afc:	d005      	beq.n	8008b0a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2288      	movs	r2, #136	@ 0x88
 8008b02:	2120      	movs	r1, #32
 8008b04:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e006      	b.n	8008b18 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2288      	movs	r2, #136	@ 0x88
 8008b0e:	2120      	movs	r1, #32
 8008b10:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	e000      	b.n	8008b18 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8008b16:	2302      	movs	r3, #2
  }
}
 8008b18:	0018      	movs	r0, r3
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	b008      	add	sp, #32
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b098      	sub	sp, #96	@ 0x60
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b30:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8008b34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b36:	2301      	movs	r3, #1
 8008b38:	637b      	str	r3, [r7, #52]	@ 0x34
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3c:	f383 8810 	msr	PRIMASK, r3
}
 8008b40:	46c0      	nop			@ (mov r8, r8)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	498a      	ldr	r1, [pc, #552]	@ (8008d78 <HAL_UART_Abort_IT+0x258>)
 8008b4e:	400a      	ands	r2, r1
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	f383 8810 	msr	PRIMASK, r3
}
 8008b5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8008b66:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b68:	2301      	movs	r3, #1
 8008b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b6e:	f383 8810 	msr	PRIMASK, r3
}
 8008b72:	46c0      	nop			@ (mov r8, r8)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	497f      	ldr	r1, [pc, #508]	@ (8008d7c <HAL_UART_Abort_IT+0x25c>)
 8008b80:	400a      	ands	r2, r1
 8008b82:	609a      	str	r2, [r3, #8]
 8008b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b86:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b8a:	f383 8810 	msr	PRIMASK, r3
}
 8008b8e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d118      	bne.n	8008bca <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b98:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008ba0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	f383 8810 	msr	PRIMASK, r3
}
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2110      	movs	r1, #16
 8008bba:	438a      	bics	r2, r1
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc4:	f383 8810 	msr	PRIMASK, r3
}
 8008bc8:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00f      	beq.n	8008bf2 <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2280      	movs	r2, #128	@ 0x80
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b80      	cmp	r3, #128	@ 0x80
 8008bde:	d104      	bne.n	8008bea <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008be4:	4a66      	ldr	r2, [pc, #408]	@ (8008d80 <HAL_UART_Abort_IT+0x260>)
 8008be6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008be8:	e003      	b.n	8008bf2 <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bee:	2200      	movs	r2, #0
 8008bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2280      	movs	r2, #128	@ 0x80
 8008bf6:	589b      	ldr	r3, [r3, r2]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d011      	beq.n	8008c20 <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2240      	movs	r2, #64	@ 0x40
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b40      	cmp	r3, #64	@ 0x40
 8008c08:	d105      	bne.n	8008c16 <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2280      	movs	r2, #128	@ 0x80
 8008c0e:	589b      	ldr	r3, [r3, r2]
 8008c10:	4a5c      	ldr	r2, [pc, #368]	@ (8008d84 <HAL_UART_Abort_IT+0x264>)
 8008c12:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c14:	e004      	b.n	8008c20 <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2280      	movs	r2, #128	@ 0x80
 8008c1a:	589b      	ldr	r3, [r3, r2]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2280      	movs	r2, #128	@ 0x80
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b80      	cmp	r3, #128	@ 0x80
 8008c2c:	d12a      	bne.n	8008c84 <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c32:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c34:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c38:	2301      	movs	r3, #1
 8008c3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f383 8810 	msr	PRIMASK, r3
}
 8008c42:	46c0      	nop			@ (mov r8, r8)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2180      	movs	r1, #128	@ 0x80
 8008c50:	438a      	bics	r2, r1
 8008c52:	609a      	str	r2, [r3, #8]
 8008c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	f383 8810 	msr	PRIMASK, r3
}
 8008c5e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00d      	beq.n	8008c84 <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f7fb fce9 	bl	8004644 <HAL_DMA_Abort_IT>
 8008c72:	1e03      	subs	r3, r0, #0
 8008c74:	d004      	beq.n	8008c80 <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c7e:	e001      	b.n	8008c84 <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2240      	movs	r2, #64	@ 0x40
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	2b40      	cmp	r3, #64	@ 0x40
 8008c90:	d12f      	bne.n	8008cf2 <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c92:	f3ef 8310 	mrs	r3, PRIMASK
 8008c96:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c98:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f383 8810 	msr	PRIMASK, r3
}
 8008ca6:	46c0      	nop			@ (mov r8, r8)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2140      	movs	r1, #64	@ 0x40
 8008cb4:	438a      	bics	r2, r1
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f383 8810 	msr	PRIMASK, r3
}
 8008cc2:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2280      	movs	r2, #128	@ 0x80
 8008cc8:	589b      	ldr	r3, [r3, r2]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d011      	beq.n	8008cf2 <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2280      	movs	r2, #128	@ 0x80
 8008cd2:	589b      	ldr	r3, [r3, r2]
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f7fb fcb5 	bl	8004644 <HAL_DMA_Abort_IT>
 8008cda:	1e03      	subs	r3, r0, #0
 8008cdc:	d007      	beq.n	8008cee <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2280      	movs	r2, #128	@ 0x80
 8008ce2:	589b      	ldr	r3, [r3, r2]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cec:	e001      	b.n	8008cf2 <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8008cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d13a      	bne.n	8008d6e <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2256      	movs	r2, #86	@ 0x56
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	225e      	movs	r2, #94	@ 0x5e
 8008d04:	2100      	movs	r1, #0
 8008d06:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2290      	movs	r2, #144	@ 0x90
 8008d18:	2100      	movs	r1, #0
 8008d1a:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	220f      	movs	r2, #15
 8008d22:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008d28:	2380      	movs	r3, #128	@ 0x80
 8008d2a:	059b      	lsls	r3, r3, #22
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d107      	bne.n	8008d40 <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699a      	ldr	r2, [r3, #24]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2108      	movs	r1, #8
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2288      	movs	r2, #136	@ 0x88
 8008d54:	2120      	movs	r1, #32
 8008d56:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	228c      	movs	r2, #140	@ 0x8c
 8008d5c:	2120      	movs	r1, #32
 8008d5e:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	0018      	movs	r0, r3
 8008d6a:	f000 fb73 	bl	8009454 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	0018      	movs	r0, r3
 8008d72:	46bd      	mov	sp, r7
 8008d74:	b018      	add	sp, #96	@ 0x60
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	fffffe1f 	.word	0xfffffe1f
 8008d7c:	ef7ffffe 	.word	0xef7ffffe
 8008d80:	08009fbb 	.word	0x08009fbb
 8008d84:	0800a04b 	.word	0x0800a04b

08008d88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d88:	b5b0      	push	{r4, r5, r7, lr}
 8008d8a:	b0aa      	sub	sp, #168	@ 0xa8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	22a4      	movs	r2, #164	@ 0xa4
 8008d98:	18b9      	adds	r1, r7, r2
 8008d9a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	20a0      	movs	r0, #160	@ 0xa0
 8008da4:	1839      	adds	r1, r7, r0
 8008da6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	249c      	movs	r4, #156	@ 0x9c
 8008db0:	1939      	adds	r1, r7, r4
 8008db2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008db4:	0011      	movs	r1, r2
 8008db6:	18bb      	adds	r3, r7, r2
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4aa2      	ldr	r2, [pc, #648]	@ (8009044 <HAL_UART_IRQHandler+0x2bc>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	2298      	movs	r2, #152	@ 0x98
 8008dc0:	18bd      	adds	r5, r7, r2
 8008dc2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008dc4:	18bb      	adds	r3, r7, r2
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11a      	bne.n	8008e02 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dcc:	187b      	adds	r3, r7, r1
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	d015      	beq.n	8008e02 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dd6:	183b      	adds	r3, r7, r0
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	4013      	ands	r3, r2
 8008dde:	d105      	bne.n	8008dec <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008de0:	193b      	adds	r3, r7, r4
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	055b      	lsls	r3, r3, #21
 8008de8:	4013      	ands	r3, r2
 8008dea:	d00a      	beq.n	8008e02 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d100      	bne.n	8008df6 <HAL_UART_IRQHandler+0x6e>
 8008df4:	e2fb      	b.n	80093ee <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	0010      	movs	r0, r2
 8008dfe:	4798      	blx	r3
      }
      return;
 8008e00:	e2f5      	b.n	80093ee <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e02:	2398      	movs	r3, #152	@ 0x98
 8008e04:	18fb      	adds	r3, r7, r3
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d100      	bne.n	8008e0e <HAL_UART_IRQHandler+0x86>
 8008e0c:	e122      	b.n	8009054 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e0e:	239c      	movs	r3, #156	@ 0x9c
 8008e10:	18fb      	adds	r3, r7, r3
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a8c      	ldr	r2, [pc, #560]	@ (8009048 <HAL_UART_IRQHandler+0x2c0>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	d106      	bne.n	8008e28 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e1a:	23a0      	movs	r3, #160	@ 0xa0
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a8a      	ldr	r2, [pc, #552]	@ (800904c <HAL_UART_IRQHandler+0x2c4>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	d100      	bne.n	8008e28 <HAL_UART_IRQHandler+0xa0>
 8008e26:	e115      	b.n	8009054 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e28:	23a4      	movs	r3, #164	@ 0xa4
 8008e2a:	18fb      	adds	r3, r7, r3
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	4013      	ands	r3, r2
 8008e32:	d012      	beq.n	8008e5a <HAL_UART_IRQHandler+0xd2>
 8008e34:	23a0      	movs	r3, #160	@ 0xa0
 8008e36:	18fb      	adds	r3, r7, r3
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	2380      	movs	r3, #128	@ 0x80
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	4013      	ands	r3, r2
 8008e40:	d00b      	beq.n	8008e5a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2201      	movs	r2, #1
 8008e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2290      	movs	r2, #144	@ 0x90
 8008e4e:	589b      	ldr	r3, [r3, r2]
 8008e50:	2201      	movs	r2, #1
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2190      	movs	r1, #144	@ 0x90
 8008e58:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e5a:	23a4      	movs	r3, #164	@ 0xa4
 8008e5c:	18fb      	adds	r3, r7, r3
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2202      	movs	r2, #2
 8008e62:	4013      	ands	r3, r2
 8008e64:	d011      	beq.n	8008e8a <HAL_UART_IRQHandler+0x102>
 8008e66:	239c      	movs	r3, #156	@ 0x9c
 8008e68:	18fb      	adds	r3, r7, r3
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	4013      	ands	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2202      	movs	r2, #2
 8008e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2290      	movs	r2, #144	@ 0x90
 8008e7e:	589b      	ldr	r3, [r3, r2]
 8008e80:	2204      	movs	r2, #4
 8008e82:	431a      	orrs	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2190      	movs	r1, #144	@ 0x90
 8008e88:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e8a:	23a4      	movs	r3, #164	@ 0xa4
 8008e8c:	18fb      	adds	r3, r7, r3
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2204      	movs	r2, #4
 8008e92:	4013      	ands	r3, r2
 8008e94:	d011      	beq.n	8008eba <HAL_UART_IRQHandler+0x132>
 8008e96:	239c      	movs	r3, #156	@ 0x9c
 8008e98:	18fb      	adds	r3, r7, r3
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	d00b      	beq.n	8008eba <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2290      	movs	r2, #144	@ 0x90
 8008eae:	589b      	ldr	r3, [r3, r2]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2190      	movs	r1, #144	@ 0x90
 8008eb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eba:	23a4      	movs	r3, #164	@ 0xa4
 8008ebc:	18fb      	adds	r3, r7, r3
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	d017      	beq.n	8008ef6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ec6:	23a0      	movs	r3, #160	@ 0xa0
 8008ec8:	18fb      	adds	r3, r7, r3
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	4013      	ands	r3, r2
 8008ed0:	d105      	bne.n	8008ede <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ed2:	239c      	movs	r3, #156	@ 0x9c
 8008ed4:	18fb      	adds	r3, r7, r3
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a5b      	ldr	r2, [pc, #364]	@ (8009048 <HAL_UART_IRQHandler+0x2c0>)
 8008eda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008edc:	d00b      	beq.n	8008ef6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2290      	movs	r2, #144	@ 0x90
 8008eea:	589b      	ldr	r3, [r3, r2]
 8008eec:	2208      	movs	r2, #8
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2190      	movs	r1, #144	@ 0x90
 8008ef4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ef6:	23a4      	movs	r3, #164	@ 0xa4
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	2380      	movs	r3, #128	@ 0x80
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	4013      	ands	r3, r2
 8008f02:	d013      	beq.n	8008f2c <HAL_UART_IRQHandler+0x1a4>
 8008f04:	23a0      	movs	r3, #160	@ 0xa0
 8008f06:	18fb      	adds	r3, r7, r3
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	2380      	movs	r3, #128	@ 0x80
 8008f0c:	04db      	lsls	r3, r3, #19
 8008f0e:	4013      	ands	r3, r2
 8008f10:	d00c      	beq.n	8008f2c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2280      	movs	r2, #128	@ 0x80
 8008f18:	0112      	lsls	r2, r2, #4
 8008f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2290      	movs	r2, #144	@ 0x90
 8008f20:	589b      	ldr	r3, [r3, r2]
 8008f22:	2220      	movs	r2, #32
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2190      	movs	r1, #144	@ 0x90
 8008f2a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2290      	movs	r2, #144	@ 0x90
 8008f30:	589b      	ldr	r3, [r3, r2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d100      	bne.n	8008f38 <HAL_UART_IRQHandler+0x1b0>
 8008f36:	e25c      	b.n	80093f2 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f38:	23a4      	movs	r3, #164	@ 0xa4
 8008f3a:	18fb      	adds	r3, r7, r3
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	4013      	ands	r3, r2
 8008f42:	d015      	beq.n	8008f70 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f44:	23a0      	movs	r3, #160	@ 0xa0
 8008f46:	18fb      	adds	r3, r7, r3
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	d106      	bne.n	8008f5e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f50:	239c      	movs	r3, #156	@ 0x9c
 8008f52:	18fb      	adds	r3, r7, r3
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	2380      	movs	r3, #128	@ 0x80
 8008f58:	055b      	lsls	r3, r3, #21
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	d008      	beq.n	8008f70 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d004      	beq.n	8008f70 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	0010      	movs	r0, r2
 8008f6e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2290      	movs	r2, #144	@ 0x90
 8008f74:	589b      	ldr	r3, [r3, r2]
 8008f76:	2194      	movs	r1, #148	@ 0x94
 8008f78:	187a      	adds	r2, r7, r1
 8008f7a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	2240      	movs	r2, #64	@ 0x40
 8008f84:	4013      	ands	r3, r2
 8008f86:	2b40      	cmp	r3, #64	@ 0x40
 8008f88:	d004      	beq.n	8008f94 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f8a:	187b      	adds	r3, r7, r1
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2228      	movs	r2, #40	@ 0x28
 8008f90:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f92:	d04c      	beq.n	800902e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 fe96 	bl	8009cc8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2240      	movs	r2, #64	@ 0x40
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	2b40      	cmp	r3, #64	@ 0x40
 8008fa8:	d13c      	bne.n	8009024 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008faa:	f3ef 8310 	mrs	r3, PRIMASK
 8008fae:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008fb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb2:	2090      	movs	r0, #144	@ 0x90
 8008fb4:	183a      	adds	r2, r7, r0
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fbe:	f383 8810 	msr	PRIMASK, r3
}
 8008fc2:	46c0      	nop			@ (mov r8, r8)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689a      	ldr	r2, [r3, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2140      	movs	r1, #64	@ 0x40
 8008fd0:	438a      	bics	r2, r1
 8008fd2:	609a      	str	r2, [r3, #8]
 8008fd4:	183b      	adds	r3, r7, r0
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fdc:	f383 8810 	msr	PRIMASK, r3
}
 8008fe0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2280      	movs	r2, #128	@ 0x80
 8008fe6:	589b      	ldr	r3, [r3, r2]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d016      	beq.n	800901a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2280      	movs	r2, #128	@ 0x80
 8008ff0:	589b      	ldr	r3, [r3, r2]
 8008ff2:	4a17      	ldr	r2, [pc, #92]	@ (8009050 <HAL_UART_IRQHandler+0x2c8>)
 8008ff4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2280      	movs	r2, #128	@ 0x80
 8008ffa:	589b      	ldr	r3, [r3, r2]
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f7fb fb21 	bl	8004644 <HAL_DMA_Abort_IT>
 8009002:	1e03      	subs	r3, r0, #0
 8009004:	d01c      	beq.n	8009040 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2280      	movs	r2, #128	@ 0x80
 800900a:	589b      	ldr	r3, [r3, r2]
 800900c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	2180      	movs	r1, #128	@ 0x80
 8009012:	5852      	ldr	r2, [r2, r1]
 8009014:	0010      	movs	r0, r2
 8009016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	e012      	b.n	8009040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	0018      	movs	r0, r3
 800901e:	f000 fa11 	bl	8009444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009022:	e00d      	b.n	8009040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	0018      	movs	r0, r3
 8009028:	f000 fa0c 	bl	8009444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902c:	e008      	b.n	8009040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	0018      	movs	r0, r3
 8009032:	f000 fa07 	bl	8009444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2290      	movs	r2, #144	@ 0x90
 800903a:	2100      	movs	r1, #0
 800903c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800903e:	e1d8      	b.n	80093f2 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009040:	46c0      	nop			@ (mov r8, r8)
    return;
 8009042:	e1d6      	b.n	80093f2 <HAL_UART_IRQHandler+0x66a>
 8009044:	0000080f 	.word	0x0000080f
 8009048:	10000001 	.word	0x10000001
 800904c:	04000120 	.word	0x04000120
 8009050:	08009f8d 	.word	0x08009f8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d000      	beq.n	800905e <HAL_UART_IRQHandler+0x2d6>
 800905c:	e15d      	b.n	800931a <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800905e:	23a4      	movs	r3, #164	@ 0xa4
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2210      	movs	r2, #16
 8009066:	4013      	ands	r3, r2
 8009068:	d100      	bne.n	800906c <HAL_UART_IRQHandler+0x2e4>
 800906a:	e156      	b.n	800931a <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800906c:	23a0      	movs	r3, #160	@ 0xa0
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2210      	movs	r2, #16
 8009074:	4013      	ands	r3, r2
 8009076:	d100      	bne.n	800907a <HAL_UART_IRQHandler+0x2f2>
 8009078:	e14f      	b.n	800931a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2210      	movs	r2, #16
 8009080:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2240      	movs	r2, #64	@ 0x40
 800908a:	4013      	ands	r3, r2
 800908c:	2b40      	cmp	r3, #64	@ 0x40
 800908e:	d000      	beq.n	8009092 <HAL_UART_IRQHandler+0x30a>
 8009090:	e0c3      	b.n	800921a <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2280      	movs	r2, #128	@ 0x80
 8009096:	589b      	ldr	r3, [r3, r2]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	217e      	movs	r1, #126	@ 0x7e
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80090a2:	187b      	adds	r3, r7, r1
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d100      	bne.n	80090ac <HAL_UART_IRQHandler+0x324>
 80090aa:	e097      	b.n	80091dc <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	225c      	movs	r2, #92	@ 0x5c
 80090b0:	5a9b      	ldrh	r3, [r3, r2]
 80090b2:	187a      	adds	r2, r7, r1
 80090b4:	8812      	ldrh	r2, [r2, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d300      	bcc.n	80090bc <HAL_UART_IRQHandler+0x334>
 80090ba:	e08f      	b.n	80091dc <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	187a      	adds	r2, r7, r1
 80090c0:	215e      	movs	r1, #94	@ 0x5e
 80090c2:	8812      	ldrh	r2, [r2, #0]
 80090c4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2280      	movs	r2, #128	@ 0x80
 80090ca:	589b      	ldr	r3, [r3, r2]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2220      	movs	r2, #32
 80090d2:	4013      	ands	r3, r2
 80090d4:	d170      	bne.n	80091b8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090d6:	f3ef 8310 	mrs	r3, PRIMASK
 80090da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090e0:	2301      	movs	r3, #1
 80090e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e6:	f383 8810 	msr	PRIMASK, r3
}
 80090ea:	46c0      	nop			@ (mov r8, r8)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	49c4      	ldr	r1, [pc, #784]	@ (8009408 <HAL_UART_IRQHandler+0x680>)
 80090f8:	400a      	ands	r2, r1
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009102:	f383 8810 	msr	PRIMASK, r3
}
 8009106:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009108:	f3ef 8310 	mrs	r3, PRIMASK
 800910c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800910e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009110:	677b      	str	r3, [r7, #116]	@ 0x74
 8009112:	2301      	movs	r3, #1
 8009114:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009118:	f383 8810 	msr	PRIMASK, r3
}
 800911c:	46c0      	nop			@ (mov r8, r8)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2101      	movs	r1, #1
 800912a:	438a      	bics	r2, r1
 800912c:	609a      	str	r2, [r3, #8]
 800912e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009130:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009134:	f383 8810 	msr	PRIMASK, r3
}
 8009138:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800913a:	f3ef 8310 	mrs	r3, PRIMASK
 800913e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009142:	673b      	str	r3, [r7, #112]	@ 0x70
 8009144:	2301      	movs	r3, #1
 8009146:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800914a:	f383 8810 	msr	PRIMASK, r3
}
 800914e:	46c0      	nop			@ (mov r8, r8)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2140      	movs	r1, #64	@ 0x40
 800915c:	438a      	bics	r2, r1
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009162:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009166:	f383 8810 	msr	PRIMASK, r3
}
 800916a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	228c      	movs	r2, #140	@ 0x8c
 8009170:	2120      	movs	r1, #32
 8009172:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800917a:	f3ef 8310 	mrs	r3, PRIMASK
 800917e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8009180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009184:	2301      	movs	r3, #1
 8009186:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800918a:	f383 8810 	msr	PRIMASK, r3
}
 800918e:	46c0      	nop			@ (mov r8, r8)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2110      	movs	r1, #16
 800919c:	438a      	bics	r2, r1
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091a6:	f383 8810 	msr	PRIMASK, r3
}
 80091aa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2280      	movs	r2, #128	@ 0x80
 80091b0:	589b      	ldr	r3, [r3, r2]
 80091b2:	0018      	movs	r0, r3
 80091b4:	f7fb f9e4 	bl	8004580 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	225c      	movs	r2, #92	@ 0x5c
 80091c2:	5a9a      	ldrh	r2, [r3, r2]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	215e      	movs	r1, #94	@ 0x5e
 80091c8:	5a5b      	ldrh	r3, [r3, r1]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	0011      	movs	r1, r2
 80091d4:	0018      	movs	r0, r3
 80091d6:	f7f9 f853 	bl	8002280 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80091da:	e10c      	b.n	80093f6 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	225c      	movs	r2, #92	@ 0x5c
 80091e0:	5a9b      	ldrh	r3, [r3, r2]
 80091e2:	227e      	movs	r2, #126	@ 0x7e
 80091e4:	18ba      	adds	r2, r7, r2
 80091e6:	8812      	ldrh	r2, [r2, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d000      	beq.n	80091ee <HAL_UART_IRQHandler+0x466>
 80091ec:	e103      	b.n	80093f6 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2280      	movs	r2, #128	@ 0x80
 80091f2:	589b      	ldr	r3, [r3, r2]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2220      	movs	r2, #32
 80091fa:	4013      	ands	r3, r2
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d000      	beq.n	8009202 <HAL_UART_IRQHandler+0x47a>
 8009200:	e0f9      	b.n	80093f6 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2202      	movs	r2, #2
 8009206:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	225c      	movs	r2, #92	@ 0x5c
 800920c:	5a9a      	ldrh	r2, [r3, r2]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	0011      	movs	r1, r2
 8009212:	0018      	movs	r0, r3
 8009214:	f7f9 f834 	bl	8002280 <HAL_UARTEx_RxEventCallback>
      return;
 8009218:	e0ed      	b.n	80093f6 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	225c      	movs	r2, #92	@ 0x5c
 800921e:	5a99      	ldrh	r1, [r3, r2]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	225e      	movs	r2, #94	@ 0x5e
 8009224:	5a9b      	ldrh	r3, [r3, r2]
 8009226:	b29a      	uxth	r2, r3
 8009228:	208e      	movs	r0, #142	@ 0x8e
 800922a:	183b      	adds	r3, r7, r0
 800922c:	1a8a      	subs	r2, r1, r2
 800922e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	225e      	movs	r2, #94	@ 0x5e
 8009234:	5a9b      	ldrh	r3, [r3, r2]
 8009236:	b29b      	uxth	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d100      	bne.n	800923e <HAL_UART_IRQHandler+0x4b6>
 800923c:	e0dd      	b.n	80093fa <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800923e:	183b      	adds	r3, r7, r0
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d100      	bne.n	8009248 <HAL_UART_IRQHandler+0x4c0>
 8009246:	e0d8      	b.n	80093fa <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009248:	f3ef 8310 	mrs	r3, PRIMASK
 800924c:	60fb      	str	r3, [r7, #12]
  return(result);
 800924e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009250:	2488      	movs	r4, #136	@ 0x88
 8009252:	193a      	adds	r2, r7, r4
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	2301      	movs	r3, #1
 8009258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f383 8810 	msr	PRIMASK, r3
}
 8009260:	46c0      	nop			@ (mov r8, r8)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4967      	ldr	r1, [pc, #412]	@ (800940c <HAL_UART_IRQHandler+0x684>)
 800926e:	400a      	ands	r2, r1
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	193b      	adds	r3, r7, r4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f383 8810 	msr	PRIMASK, r3
}
 800927e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009280:	f3ef 8310 	mrs	r3, PRIMASK
 8009284:	61bb      	str	r3, [r7, #24]
  return(result);
 8009286:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009288:	2484      	movs	r4, #132	@ 0x84
 800928a:	193a      	adds	r2, r7, r4
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	2301      	movs	r3, #1
 8009290:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f383 8810 	msr	PRIMASK, r3
}
 8009298:	46c0      	nop			@ (mov r8, r8)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	495a      	ldr	r1, [pc, #360]	@ (8009410 <HAL_UART_IRQHandler+0x688>)
 80092a6:	400a      	ands	r2, r1
 80092a8:	609a      	str	r2, [r3, #8]
 80092aa:	193b      	adds	r3, r7, r4
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	f383 8810 	msr	PRIMASK, r3
}
 80092b6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	228c      	movs	r2, #140	@ 0x8c
 80092bc:	2120      	movs	r1, #32
 80092be:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80092cc:	f3ef 8310 	mrs	r3, PRIMASK
 80092d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d4:	2480      	movs	r4, #128	@ 0x80
 80092d6:	193a      	adds	r2, r7, r4
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	2301      	movs	r3, #1
 80092dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	f383 8810 	msr	PRIMASK, r3
}
 80092e4:	46c0      	nop			@ (mov r8, r8)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2110      	movs	r1, #16
 80092f2:	438a      	bics	r2, r1
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	193b      	adds	r3, r7, r4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fe:	f383 8810 	msr	PRIMASK, r3
}
 8009302:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800930a:	183b      	adds	r3, r7, r0
 800930c:	881a      	ldrh	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	0011      	movs	r1, r2
 8009312:	0018      	movs	r0, r3
 8009314:	f7f8 ffb4 	bl	8002280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009318:	e06f      	b.n	80093fa <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800931a:	23a4      	movs	r3, #164	@ 0xa4
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	2380      	movs	r3, #128	@ 0x80
 8009322:	035b      	lsls	r3, r3, #13
 8009324:	4013      	ands	r3, r2
 8009326:	d010      	beq.n	800934a <HAL_UART_IRQHandler+0x5c2>
 8009328:	239c      	movs	r3, #156	@ 0x9c
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	2380      	movs	r3, #128	@ 0x80
 8009330:	03db      	lsls	r3, r3, #15
 8009332:	4013      	ands	r3, r2
 8009334:	d009      	beq.n	800934a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2280      	movs	r2, #128	@ 0x80
 800933c:	0352      	lsls	r2, r2, #13
 800933e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	0018      	movs	r0, r3
 8009344:	f000 ff60 	bl	800a208 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009348:	e05a      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800934a:	23a4      	movs	r3, #164	@ 0xa4
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2280      	movs	r2, #128	@ 0x80
 8009352:	4013      	ands	r3, r2
 8009354:	d016      	beq.n	8009384 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009356:	23a0      	movs	r3, #160	@ 0xa0
 8009358:	18fb      	adds	r3, r7, r3
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2280      	movs	r2, #128	@ 0x80
 800935e:	4013      	ands	r3, r2
 8009360:	d106      	bne.n	8009370 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009362:	239c      	movs	r3, #156	@ 0x9c
 8009364:	18fb      	adds	r3, r7, r3
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	2380      	movs	r3, #128	@ 0x80
 800936a:	041b      	lsls	r3, r3, #16
 800936c:	4013      	ands	r3, r2
 800936e:	d009      	beq.n	8009384 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009374:	2b00      	cmp	r3, #0
 8009376:	d042      	beq.n	80093fe <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	0010      	movs	r0, r2
 8009380:	4798      	blx	r3
    }
    return;
 8009382:	e03c      	b.n	80093fe <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009384:	23a4      	movs	r3, #164	@ 0xa4
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2240      	movs	r2, #64	@ 0x40
 800938c:	4013      	ands	r3, r2
 800938e:	d00a      	beq.n	80093a6 <HAL_UART_IRQHandler+0x61e>
 8009390:	23a0      	movs	r3, #160	@ 0xa0
 8009392:	18fb      	adds	r3, r7, r3
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2240      	movs	r2, #64	@ 0x40
 8009398:	4013      	ands	r3, r2
 800939a:	d004      	beq.n	80093a6 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	0018      	movs	r0, r3
 80093a0:	f000 fe94 	bl	800a0cc <UART_EndTransmit_IT>
    return;
 80093a4:	e02c      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093a6:	23a4      	movs	r3, #164	@ 0xa4
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	2380      	movs	r3, #128	@ 0x80
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	4013      	ands	r3, r2
 80093b2:	d00b      	beq.n	80093cc <HAL_UART_IRQHandler+0x644>
 80093b4:	23a0      	movs	r3, #160	@ 0xa0
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	2380      	movs	r3, #128	@ 0x80
 80093bc:	05db      	lsls	r3, r3, #23
 80093be:	4013      	ands	r3, r2
 80093c0:	d004      	beq.n	80093cc <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	0018      	movs	r0, r3
 80093c6:	f000 ff2f 	bl	800a228 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093ca:	e019      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093cc:	23a4      	movs	r3, #164	@ 0xa4
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	2380      	movs	r3, #128	@ 0x80
 80093d4:	045b      	lsls	r3, r3, #17
 80093d6:	4013      	ands	r3, r2
 80093d8:	d012      	beq.n	8009400 <HAL_UART_IRQHandler+0x678>
 80093da:	23a0      	movs	r3, #160	@ 0xa0
 80093dc:	18fb      	adds	r3, r7, r3
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	da0d      	bge.n	8009400 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	0018      	movs	r0, r3
 80093e8:	f000 ff16 	bl	800a218 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093ec:	e008      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
      return;
 80093ee:	46c0      	nop			@ (mov r8, r8)
 80093f0:	e006      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
    return;
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	e004      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
      return;
 80093f6:	46c0      	nop			@ (mov r8, r8)
 80093f8:	e002      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
      return;
 80093fa:	46c0      	nop			@ (mov r8, r8)
 80093fc:	e000      	b.n	8009400 <HAL_UART_IRQHandler+0x678>
    return;
 80093fe:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009400:	46bd      	mov	sp, r7
 8009402:	b02a      	add	sp, #168	@ 0xa8
 8009404:	bdb0      	pop	{r4, r5, r7, pc}
 8009406:	46c0      	nop			@ (mov r8, r8)
 8009408:	fffffeff 	.word	0xfffffeff
 800940c:	fffffedf 	.word	0xfffffedf
 8009410:	effffffe 	.word	0xeffffffe

08009414 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800941c:	46c0      	nop			@ (mov r8, r8)
 800941e:	46bd      	mov	sp, r7
 8009420:	b002      	add	sp, #8
 8009422:	bd80      	pop	{r7, pc}

08009424 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800942c:	46c0      	nop			@ (mov r8, r8)
 800942e:	46bd      	mov	sp, r7
 8009430:	b002      	add	sp, #8
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800943c:	46c0      	nop			@ (mov r8, r8)
 800943e:	46bd      	mov	sp, r7
 8009440:	b002      	add	sp, #8
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800944c:	46c0      	nop			@ (mov r8, r8)
 800944e:	46bd      	mov	sp, r7
 8009450:	b002      	add	sp, #8
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800945c:	46c0      	nop			@ (mov r8, r8)
 800945e:	46bd      	mov	sp, r7
 8009460:	b002      	add	sp, #8
 8009462:	bd80      	pop	{r7, pc}

08009464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800946c:	231e      	movs	r3, #30
 800946e:	18fb      	adds	r3, r7, r3
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	431a      	orrs	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	431a      	orrs	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4aab      	ldr	r2, [pc, #684]	@ (8009740 <UART_SetConfig+0x2dc>)
 8009494:	4013      	ands	r3, r2
 8009496:	0019      	movs	r1, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	430a      	orrs	r2, r1
 80094a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4aa6      	ldr	r2, [pc, #664]	@ (8009744 <UART_SetConfig+0x2e0>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	0019      	movs	r1, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	4a9d      	ldr	r2, [pc, #628]	@ (8009748 <UART_SetConfig+0x2e4>)
 80094d2:	4013      	ands	r3, r2
 80094d4:	0019      	movs	r1, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	430a      	orrs	r2, r1
 80094de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e6:	220f      	movs	r2, #15
 80094e8:	4393      	bics	r3, r2
 80094ea:	0019      	movs	r1, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a93      	ldr	r2, [pc, #588]	@ (800974c <UART_SetConfig+0x2e8>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d127      	bne.n	8009552 <UART_SetConfig+0xee>
 8009502:	4b93      	ldr	r3, [pc, #588]	@ (8009750 <UART_SetConfig+0x2ec>)
 8009504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009506:	2203      	movs	r2, #3
 8009508:	4013      	ands	r3, r2
 800950a:	2b03      	cmp	r3, #3
 800950c:	d017      	beq.n	800953e <UART_SetConfig+0xda>
 800950e:	d81b      	bhi.n	8009548 <UART_SetConfig+0xe4>
 8009510:	2b02      	cmp	r3, #2
 8009512:	d00a      	beq.n	800952a <UART_SetConfig+0xc6>
 8009514:	d818      	bhi.n	8009548 <UART_SetConfig+0xe4>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <UART_SetConfig+0xbc>
 800951a:	2b01      	cmp	r3, #1
 800951c:	d00a      	beq.n	8009534 <UART_SetConfig+0xd0>
 800951e:	e013      	b.n	8009548 <UART_SetConfig+0xe4>
 8009520:	231f      	movs	r3, #31
 8009522:	18fb      	adds	r3, r7, r3
 8009524:	2200      	movs	r2, #0
 8009526:	701a      	strb	r2, [r3, #0]
 8009528:	e021      	b.n	800956e <UART_SetConfig+0x10a>
 800952a:	231f      	movs	r3, #31
 800952c:	18fb      	adds	r3, r7, r3
 800952e:	2202      	movs	r2, #2
 8009530:	701a      	strb	r2, [r3, #0]
 8009532:	e01c      	b.n	800956e <UART_SetConfig+0x10a>
 8009534:	231f      	movs	r3, #31
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	2204      	movs	r2, #4
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	e017      	b.n	800956e <UART_SetConfig+0x10a>
 800953e:	231f      	movs	r3, #31
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	2208      	movs	r2, #8
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	e012      	b.n	800956e <UART_SetConfig+0x10a>
 8009548:	231f      	movs	r3, #31
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	2210      	movs	r2, #16
 800954e:	701a      	strb	r2, [r3, #0]
 8009550:	e00d      	b.n	800956e <UART_SetConfig+0x10a>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a7f      	ldr	r2, [pc, #508]	@ (8009754 <UART_SetConfig+0x2f0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d104      	bne.n	8009566 <UART_SetConfig+0x102>
 800955c:	231f      	movs	r3, #31
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	2200      	movs	r2, #0
 8009562:	701a      	strb	r2, [r3, #0]
 8009564:	e003      	b.n	800956e <UART_SetConfig+0x10a>
 8009566:	231f      	movs	r3, #31
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	2210      	movs	r2, #16
 800956c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69da      	ldr	r2, [r3, #28]
 8009572:	2380      	movs	r3, #128	@ 0x80
 8009574:	021b      	lsls	r3, r3, #8
 8009576:	429a      	cmp	r2, r3
 8009578:	d000      	beq.n	800957c <UART_SetConfig+0x118>
 800957a:	e06f      	b.n	800965c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800957c:	231f      	movs	r3, #31
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b08      	cmp	r3, #8
 8009584:	d01f      	beq.n	80095c6 <UART_SetConfig+0x162>
 8009586:	dc22      	bgt.n	80095ce <UART_SetConfig+0x16a>
 8009588:	2b04      	cmp	r3, #4
 800958a:	d017      	beq.n	80095bc <UART_SetConfig+0x158>
 800958c:	dc1f      	bgt.n	80095ce <UART_SetConfig+0x16a>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <UART_SetConfig+0x134>
 8009592:	2b02      	cmp	r3, #2
 8009594:	d005      	beq.n	80095a2 <UART_SetConfig+0x13e>
 8009596:	e01a      	b.n	80095ce <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009598:	f7fd fdc8 	bl	800712c <HAL_RCC_GetPCLK1Freq>
 800959c:	0003      	movs	r3, r0
 800959e:	61bb      	str	r3, [r7, #24]
        break;
 80095a0:	e01c      	b.n	80095dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80095a2:	4b6b      	ldr	r3, [pc, #428]	@ (8009750 <UART_SetConfig+0x2ec>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	2207      	movs	r2, #7
 80095aa:	4013      	ands	r3, r2
 80095ac:	3301      	adds	r3, #1
 80095ae:	0019      	movs	r1, r3
 80095b0:	4869      	ldr	r0, [pc, #420]	@ (8009758 <UART_SetConfig+0x2f4>)
 80095b2:	f7f6 fda9 	bl	8000108 <__udivsi3>
 80095b6:	0003      	movs	r3, r0
 80095b8:	61bb      	str	r3, [r7, #24]
        break;
 80095ba:	e00f      	b.n	80095dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095bc:	f7fd fd40 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 80095c0:	0003      	movs	r3, r0
 80095c2:	61bb      	str	r3, [r7, #24]
        break;
 80095c4:	e00a      	b.n	80095dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095c6:	2380      	movs	r3, #128	@ 0x80
 80095c8:	021b      	lsls	r3, r3, #8
 80095ca:	61bb      	str	r3, [r7, #24]
        break;
 80095cc:	e006      	b.n	80095dc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80095d2:	231e      	movs	r3, #30
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	2201      	movs	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
        break;
 80095da:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d100      	bne.n	80095e4 <UART_SetConfig+0x180>
 80095e2:	e097      	b.n	8009714 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095e8:	4b5c      	ldr	r3, [pc, #368]	@ (800975c <UART_SetConfig+0x2f8>)
 80095ea:	0052      	lsls	r2, r2, #1
 80095ec:	5ad3      	ldrh	r3, [r2, r3]
 80095ee:	0019      	movs	r1, r3
 80095f0:	69b8      	ldr	r0, [r7, #24]
 80095f2:	f7f6 fd89 	bl	8000108 <__udivsi3>
 80095f6:	0003      	movs	r3, r0
 80095f8:	005a      	lsls	r2, r3, #1
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	18d2      	adds	r2, r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	0019      	movs	r1, r3
 8009608:	0010      	movs	r0, r2
 800960a:	f7f6 fd7d 	bl	8000108 <__udivsi3>
 800960e:	0003      	movs	r3, r0
 8009610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	2b0f      	cmp	r3, #15
 8009616:	d91c      	bls.n	8009652 <UART_SetConfig+0x1ee>
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	2380      	movs	r3, #128	@ 0x80
 800961c:	025b      	lsls	r3, r3, #9
 800961e:	429a      	cmp	r2, r3
 8009620:	d217      	bcs.n	8009652 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	b29a      	uxth	r2, r3
 8009626:	200e      	movs	r0, #14
 8009628:	183b      	adds	r3, r7, r0
 800962a:	210f      	movs	r1, #15
 800962c:	438a      	bics	r2, r1
 800962e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	085b      	lsrs	r3, r3, #1
 8009634:	b29b      	uxth	r3, r3
 8009636:	2207      	movs	r2, #7
 8009638:	4013      	ands	r3, r2
 800963a:	b299      	uxth	r1, r3
 800963c:	183b      	adds	r3, r7, r0
 800963e:	183a      	adds	r2, r7, r0
 8009640:	8812      	ldrh	r2, [r2, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	183a      	adds	r2, r7, r0
 800964c:	8812      	ldrh	r2, [r2, #0]
 800964e:	60da      	str	r2, [r3, #12]
 8009650:	e060      	b.n	8009714 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8009652:	231e      	movs	r3, #30
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	2201      	movs	r2, #1
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	e05b      	b.n	8009714 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800965c:	231f      	movs	r3, #31
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2b08      	cmp	r3, #8
 8009664:	d01f      	beq.n	80096a6 <UART_SetConfig+0x242>
 8009666:	dc22      	bgt.n	80096ae <UART_SetConfig+0x24a>
 8009668:	2b04      	cmp	r3, #4
 800966a:	d017      	beq.n	800969c <UART_SetConfig+0x238>
 800966c:	dc1f      	bgt.n	80096ae <UART_SetConfig+0x24a>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <UART_SetConfig+0x214>
 8009672:	2b02      	cmp	r3, #2
 8009674:	d005      	beq.n	8009682 <UART_SetConfig+0x21e>
 8009676:	e01a      	b.n	80096ae <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fd fd58 	bl	800712c <HAL_RCC_GetPCLK1Freq>
 800967c:	0003      	movs	r3, r0
 800967e:	61bb      	str	r3, [r7, #24]
        break;
 8009680:	e01c      	b.n	80096bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009682:	4b33      	ldr	r3, [pc, #204]	@ (8009750 <UART_SetConfig+0x2ec>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	095b      	lsrs	r3, r3, #5
 8009688:	2207      	movs	r2, #7
 800968a:	4013      	ands	r3, r2
 800968c:	3301      	adds	r3, #1
 800968e:	0019      	movs	r1, r3
 8009690:	4831      	ldr	r0, [pc, #196]	@ (8009758 <UART_SetConfig+0x2f4>)
 8009692:	f7f6 fd39 	bl	8000108 <__udivsi3>
 8009696:	0003      	movs	r3, r0
 8009698:	61bb      	str	r3, [r7, #24]
        break;
 800969a:	e00f      	b.n	80096bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800969c:	f7fd fcd0 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 80096a0:	0003      	movs	r3, r0
 80096a2:	61bb      	str	r3, [r7, #24]
        break;
 80096a4:	e00a      	b.n	80096bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096a6:	2380      	movs	r3, #128	@ 0x80
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	61bb      	str	r3, [r7, #24]
        break;
 80096ac:	e006      	b.n	80096bc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096b2:	231e      	movs	r3, #30
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
        break;
 80096ba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d028      	beq.n	8009714 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096c6:	4b25      	ldr	r3, [pc, #148]	@ (800975c <UART_SetConfig+0x2f8>)
 80096c8:	0052      	lsls	r2, r2, #1
 80096ca:	5ad3      	ldrh	r3, [r2, r3]
 80096cc:	0019      	movs	r1, r3
 80096ce:	69b8      	ldr	r0, [r7, #24]
 80096d0:	f7f6 fd1a 	bl	8000108 <__udivsi3>
 80096d4:	0003      	movs	r3, r0
 80096d6:	001a      	movs	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	085b      	lsrs	r3, r3, #1
 80096de:	18d2      	adds	r2, r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	0019      	movs	r1, r3
 80096e6:	0010      	movs	r0, r2
 80096e8:	f7f6 fd0e 	bl	8000108 <__udivsi3>
 80096ec:	0003      	movs	r3, r0
 80096ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b0f      	cmp	r3, #15
 80096f4:	d90a      	bls.n	800970c <UART_SetConfig+0x2a8>
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	2380      	movs	r3, #128	@ 0x80
 80096fa:	025b      	lsls	r3, r3, #9
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d205      	bcs.n	800970c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	b29a      	uxth	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60da      	str	r2, [r3, #12]
 800970a:	e003      	b.n	8009714 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800970c:	231e      	movs	r3, #30
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	2201      	movs	r2, #1
 8009712:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	226a      	movs	r2, #106	@ 0x6a
 8009718:	2101      	movs	r1, #1
 800971a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2268      	movs	r2, #104	@ 0x68
 8009720:	2101      	movs	r1, #1
 8009722:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009730:	231e      	movs	r3, #30
 8009732:	18fb      	adds	r3, r7, r3
 8009734:	781b      	ldrb	r3, [r3, #0]
}
 8009736:	0018      	movs	r0, r3
 8009738:	46bd      	mov	sp, r7
 800973a:	b008      	add	sp, #32
 800973c:	bd80      	pop	{r7, pc}
 800973e:	46c0      	nop			@ (mov r8, r8)
 8009740:	cfff69f3 	.word	0xcfff69f3
 8009744:	ffffcfff 	.word	0xffffcfff
 8009748:	11fff4ff 	.word	0x11fff4ff
 800974c:	40013800 	.word	0x40013800
 8009750:	40021000 	.word	0x40021000
 8009754:	40004400 	.word	0x40004400
 8009758:	02dc6c00 	.word	0x02dc6c00
 800975c:	0800a918 	.word	0x0800a918

08009760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	2208      	movs	r2, #8
 800976e:	4013      	ands	r3, r2
 8009770:	d00b      	beq.n	800978a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	4a4a      	ldr	r2, [pc, #296]	@ (80098a4 <UART_AdvFeatureConfig+0x144>)
 800977a:	4013      	ands	r3, r2
 800977c:	0019      	movs	r1, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978e:	2201      	movs	r2, #1
 8009790:	4013      	ands	r3, r2
 8009792:	d00b      	beq.n	80097ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4a43      	ldr	r2, [pc, #268]	@ (80098a8 <UART_AdvFeatureConfig+0x148>)
 800979c:	4013      	ands	r3, r2
 800979e:	0019      	movs	r1, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b0:	2202      	movs	r2, #2
 80097b2:	4013      	ands	r3, r2
 80097b4:	d00b      	beq.n	80097ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4a3b      	ldr	r2, [pc, #236]	@ (80098ac <UART_AdvFeatureConfig+0x14c>)
 80097be:	4013      	ands	r3, r2
 80097c0:	0019      	movs	r1, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d2:	2204      	movs	r2, #4
 80097d4:	4013      	ands	r3, r2
 80097d6:	d00b      	beq.n	80097f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	4a34      	ldr	r2, [pc, #208]	@ (80098b0 <UART_AdvFeatureConfig+0x150>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	0019      	movs	r1, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	430a      	orrs	r2, r1
 80097ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f4:	2210      	movs	r2, #16
 80097f6:	4013      	ands	r3, r2
 80097f8:	d00b      	beq.n	8009812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	4a2c      	ldr	r2, [pc, #176]	@ (80098b4 <UART_AdvFeatureConfig+0x154>)
 8009802:	4013      	ands	r3, r2
 8009804:	0019      	movs	r1, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009816:	2220      	movs	r2, #32
 8009818:	4013      	ands	r3, r2
 800981a:	d00b      	beq.n	8009834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	4a25      	ldr	r2, [pc, #148]	@ (80098b8 <UART_AdvFeatureConfig+0x158>)
 8009824:	4013      	ands	r3, r2
 8009826:	0019      	movs	r1, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009838:	2240      	movs	r2, #64	@ 0x40
 800983a:	4013      	ands	r3, r2
 800983c:	d01d      	beq.n	800987a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	4a1d      	ldr	r2, [pc, #116]	@ (80098bc <UART_AdvFeatureConfig+0x15c>)
 8009846:	4013      	ands	r3, r2
 8009848:	0019      	movs	r1, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800985a:	2380      	movs	r3, #128	@ 0x80
 800985c:	035b      	lsls	r3, r3, #13
 800985e:	429a      	cmp	r2, r3
 8009860:	d10b      	bne.n	800987a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4a15      	ldr	r2, [pc, #84]	@ (80098c0 <UART_AdvFeatureConfig+0x160>)
 800986a:	4013      	ands	r3, r2
 800986c:	0019      	movs	r1, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987e:	2280      	movs	r2, #128	@ 0x80
 8009880:	4013      	ands	r3, r2
 8009882:	d00b      	beq.n	800989c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	4a0e      	ldr	r2, [pc, #56]	@ (80098c4 <UART_AdvFeatureConfig+0x164>)
 800988c:	4013      	ands	r3, r2
 800988e:	0019      	movs	r1, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	605a      	str	r2, [r3, #4]
  }
}
 800989c:	46c0      	nop			@ (mov r8, r8)
 800989e:	46bd      	mov	sp, r7
 80098a0:	b002      	add	sp, #8
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	ffff7fff 	.word	0xffff7fff
 80098a8:	fffdffff 	.word	0xfffdffff
 80098ac:	fffeffff 	.word	0xfffeffff
 80098b0:	fffbffff 	.word	0xfffbffff
 80098b4:	ffffefff 	.word	0xffffefff
 80098b8:	ffffdfff 	.word	0xffffdfff
 80098bc:	ffefffff 	.word	0xffefffff
 80098c0:	ff9fffff 	.word	0xff9fffff
 80098c4:	fff7ffff 	.word	0xfff7ffff

080098c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b092      	sub	sp, #72	@ 0x48
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2290      	movs	r2, #144	@ 0x90
 80098d4:	2100      	movs	r1, #0
 80098d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098d8:	f7f9 fdc6 	bl	8003468 <HAL_GetTick>
 80098dc:	0003      	movs	r3, r0
 80098de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2208      	movs	r2, #8
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	d12d      	bne.n	800994a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f0:	2280      	movs	r2, #128	@ 0x80
 80098f2:	0391      	lsls	r1, r2, #14
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4a47      	ldr	r2, [pc, #284]	@ (8009a14 <UART_CheckIdleState+0x14c>)
 80098f8:	9200      	str	r2, [sp, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f000 f88e 	bl	8009a1c <UART_WaitOnFlagUntilTimeout>
 8009900:	1e03      	subs	r3, r0, #0
 8009902:	d022      	beq.n	800994a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009904:	f3ef 8310 	mrs	r3, PRIMASK
 8009908:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800990c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800990e:	2301      	movs	r3, #1
 8009910:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009914:	f383 8810 	msr	PRIMASK, r3
}
 8009918:	46c0      	nop			@ (mov r8, r8)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2180      	movs	r1, #128	@ 0x80
 8009926:	438a      	bics	r2, r1
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800992e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009930:	f383 8810 	msr	PRIMASK, r3
}
 8009934:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2288      	movs	r2, #136	@ 0x88
 800993a:	2120      	movs	r1, #32
 800993c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2284      	movs	r2, #132	@ 0x84
 8009942:	2100      	movs	r1, #0
 8009944:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e060      	b.n	8009a0c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2204      	movs	r2, #4
 8009952:	4013      	ands	r3, r2
 8009954:	2b04      	cmp	r3, #4
 8009956:	d146      	bne.n	80099e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995a:	2280      	movs	r2, #128	@ 0x80
 800995c:	03d1      	lsls	r1, r2, #15
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4a2c      	ldr	r2, [pc, #176]	@ (8009a14 <UART_CheckIdleState+0x14c>)
 8009962:	9200      	str	r2, [sp, #0]
 8009964:	2200      	movs	r2, #0
 8009966:	f000 f859 	bl	8009a1c <UART_WaitOnFlagUntilTimeout>
 800996a:	1e03      	subs	r3, r0, #0
 800996c:	d03b      	beq.n	80099e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800996e:	f3ef 8310 	mrs	r3, PRIMASK
 8009972:	60fb      	str	r3, [r7, #12]
  return(result);
 8009974:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009976:	637b      	str	r3, [r7, #52]	@ 0x34
 8009978:	2301      	movs	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f383 8810 	msr	PRIMASK, r3
}
 8009982:	46c0      	nop			@ (mov r8, r8)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4922      	ldr	r1, [pc, #136]	@ (8009a18 <UART_CheckIdleState+0x150>)
 8009990:	400a      	ands	r2, r1
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f383 8810 	msr	PRIMASK, r3
}
 800999e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80099a0:	f3ef 8310 	mrs	r3, PRIMASK
 80099a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80099a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80099aa:	2301      	movs	r3, #1
 80099ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	f383 8810 	msr	PRIMASK, r3
}
 80099b4:	46c0      	nop			@ (mov r8, r8)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2101      	movs	r1, #1
 80099c2:	438a      	bics	r2, r1
 80099c4:	609a      	str	r2, [r3, #8]
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f383 8810 	msr	PRIMASK, r3
}
 80099d0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	228c      	movs	r2, #140	@ 0x8c
 80099d6:	2120      	movs	r1, #32
 80099d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2284      	movs	r2, #132	@ 0x84
 80099de:	2100      	movs	r1, #0
 80099e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e012      	b.n	8009a0c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2288      	movs	r2, #136	@ 0x88
 80099ea:	2120      	movs	r1, #32
 80099ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	228c      	movs	r2, #140	@ 0x8c
 80099f2:	2120      	movs	r1, #32
 80099f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2284      	movs	r2, #132	@ 0x84
 8009a06:	2100      	movs	r1, #0
 8009a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	b010      	add	sp, #64	@ 0x40
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	01ffffff 	.word	0x01ffffff
 8009a18:	fffffedf 	.word	0xfffffedf

08009a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	1dfb      	adds	r3, r7, #7
 8009a2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a2c:	e051      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	3301      	adds	r3, #1
 8009a32:	d04e      	beq.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a34:	f7f9 fd18 	bl	8003468 <HAL_GetTick>
 8009a38:	0002      	movs	r2, r0
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d302      	bcc.n	8009a4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e051      	b.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2204      	movs	r2, #4
 8009a56:	4013      	ands	r3, r2
 8009a58:	d03b      	beq.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b80      	cmp	r3, #128	@ 0x80
 8009a5e:	d038      	beq.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2b40      	cmp	r3, #64	@ 0x40
 8009a64:	d035      	beq.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d111      	bne.n	8009a98 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2208      	movs	r2, #8
 8009a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f000 f922 	bl	8009cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2290      	movs	r2, #144	@ 0x90
 8009a88:	2108      	movs	r1, #8
 8009a8a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2284      	movs	r2, #132	@ 0x84
 8009a90:	2100      	movs	r1, #0
 8009a92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e02c      	b.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	69da      	ldr	r2, [r3, #28]
 8009a9e:	2380      	movs	r3, #128	@ 0x80
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	401a      	ands	r2, r3
 8009aa4:	2380      	movs	r3, #128	@ 0x80
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d112      	bne.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2280      	movs	r2, #128	@ 0x80
 8009ab2:	0112      	lsls	r2, r2, #4
 8009ab4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f000 f905 	bl	8009cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2290      	movs	r2, #144	@ 0x90
 8009ac2:	2120      	movs	r1, #32
 8009ac4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2284      	movs	r2, #132	@ 0x84
 8009aca:	2100      	movs	r1, #0
 8009acc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e00f      	b.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	4013      	ands	r3, r2
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	425a      	negs	r2, r3
 8009ae2:	4153      	adcs	r3, r2
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	001a      	movs	r2, r3
 8009ae8:	1dfb      	adds	r3, r7, #7
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d09e      	beq.n	8009a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	0018      	movs	r0, r3
 8009af4:	46bd      	mov	sp, r7
 8009af6:	b004      	add	sp, #16
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b090      	sub	sp, #64	@ 0x40
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	1dbb      	adds	r3, r7, #6
 8009b08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	1dba      	adds	r2, r7, #6
 8009b14:	215c      	movs	r1, #92	@ 0x5c
 8009b16:	8812      	ldrh	r2, [r2, #0]
 8009b18:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2290      	movs	r2, #144	@ 0x90
 8009b1e:	2100      	movs	r1, #0
 8009b20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	228c      	movs	r2, #140	@ 0x8c
 8009b26:	2122      	movs	r1, #34	@ 0x22
 8009b28:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2280      	movs	r2, #128	@ 0x80
 8009b2e:	589b      	ldr	r3, [r3, r2]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d02d      	beq.n	8009b90 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2280      	movs	r2, #128	@ 0x80
 8009b38:	589b      	ldr	r3, [r3, r2]
 8009b3a:	4a40      	ldr	r2, [pc, #256]	@ (8009c3c <UART_Start_Receive_DMA+0x140>)
 8009b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2280      	movs	r2, #128	@ 0x80
 8009b42:	589b      	ldr	r3, [r3, r2]
 8009b44:	4a3e      	ldr	r2, [pc, #248]	@ (8009c40 <UART_Start_Receive_DMA+0x144>)
 8009b46:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2280      	movs	r2, #128	@ 0x80
 8009b4c:	589b      	ldr	r3, [r3, r2]
 8009b4e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c44 <UART_Start_Receive_DMA+0x148>)
 8009b50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2280      	movs	r2, #128	@ 0x80
 8009b56:	589b      	ldr	r3, [r3, r2]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2280      	movs	r2, #128	@ 0x80
 8009b60:	5898      	ldr	r0, [r3, r2]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3324      	adds	r3, #36	@ 0x24
 8009b68:	0019      	movs	r1, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b6e:	001a      	movs	r2, r3
 8009b70:	1dbb      	adds	r3, r7, #6
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	f7fa fc7c 	bl	8004470 <HAL_DMA_Start_IT>
 8009b78:	1e03      	subs	r3, r0, #0
 8009b7a:	d009      	beq.n	8009b90 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2290      	movs	r2, #144	@ 0x90
 8009b80:	2110      	movs	r1, #16
 8009b82:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	228c      	movs	r2, #140	@ 0x8c
 8009b88:	2120      	movs	r1, #32
 8009b8a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e050      	b.n	8009c32 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d019      	beq.n	8009bcc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009b98:	f3ef 8310 	mrs	r3, PRIMASK
 8009b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba8:	f383 8810 	msr	PRIMASK, r3
}
 8009bac:	46c0      	nop			@ (mov r8, r8)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2180      	movs	r1, #128	@ 0x80
 8009bba:	0049      	lsls	r1, r1, #1
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	f383 8810 	msr	PRIMASK, r3
}
 8009bca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd0:	613b      	str	r3, [r7, #16]
  return(result);
 8009bd2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f383 8810 	msr	PRIMASK, r3
}
 8009be0:	46c0      	nop			@ (mov r8, r8)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2101      	movs	r1, #1
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	609a      	str	r2, [r3, #8]
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	f383 8810 	msr	PRIMASK, r3
}
 8009bfc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8009c02:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c04:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c08:	2301      	movs	r3, #1
 8009c0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	f383 8810 	msr	PRIMASK, r3
}
 8009c12:	46c0      	nop			@ (mov r8, r8)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689a      	ldr	r2, [r3, #8]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2140      	movs	r1, #64	@ 0x40
 8009c20:	430a      	orrs	r2, r1
 8009c22:	609a      	str	r2, [r3, #8]
 8009c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	0018      	movs	r0, r3
 8009c34:	46bd      	mov	sp, r7
 8009c36:	b010      	add	sp, #64	@ 0x40
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	46c0      	nop			@ (mov r8, r8)
 8009c3c:	08009d95 	.word	0x08009d95
 8009c40:	08009ec5 	.word	0x08009ec5
 8009c44:	08009f07 	.word	0x08009f07

08009c48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	@ 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c50:	f3ef 8310 	mrs	r3, PRIMASK
 8009c54:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c56:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f383 8810 	msr	PRIMASK, r3
}
 8009c64:	46c0      	nop			@ (mov r8, r8)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	21c0      	movs	r1, #192	@ 0xc0
 8009c72:	438a      	bics	r2, r1
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f383 8810 	msr	PRIMASK, r3
}
 8009c80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c82:	f3ef 8310 	mrs	r3, PRIMASK
 8009c86:	617b      	str	r3, [r7, #20]
  return(result);
 8009c88:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c8a:	623b      	str	r3, [r7, #32]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	f383 8810 	msr	PRIMASK, r3
}
 8009c96:	46c0      	nop			@ (mov r8, r8)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689a      	ldr	r2, [r3, #8]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4908      	ldr	r1, [pc, #32]	@ (8009cc4 <UART_EndTxTransfer+0x7c>)
 8009ca4:	400a      	ands	r2, r1
 8009ca6:	609a      	str	r2, [r3, #8]
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	f383 8810 	msr	PRIMASK, r3
}
 8009cb2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2288      	movs	r2, #136	@ 0x88
 8009cb8:	2120      	movs	r1, #32
 8009cba:	5099      	str	r1, [r3, r2]
}
 8009cbc:	46c0      	nop			@ (mov r8, r8)
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	b00a      	add	sp, #40	@ 0x28
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	ff7fffff 	.word	0xff7fffff

08009cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08e      	sub	sp, #56	@ 0x38
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8009cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8009cd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cda:	2301      	movs	r3, #1
 8009cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	f383 8810 	msr	PRIMASK, r3
}
 8009ce4:	46c0      	nop			@ (mov r8, r8)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4926      	ldr	r1, [pc, #152]	@ (8009d8c <UART_EndRxTransfer+0xc4>)
 8009cf2:	400a      	ands	r2, r1
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	f383 8810 	msr	PRIMASK, r3
}
 8009d00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d02:	f3ef 8310 	mrs	r3, PRIMASK
 8009d06:	623b      	str	r3, [r7, #32]
  return(result);
 8009d08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d12:	f383 8810 	msr	PRIMASK, r3
}
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	491b      	ldr	r1, [pc, #108]	@ (8009d90 <UART_EndRxTransfer+0xc8>)
 8009d24:	400a      	ands	r2, r1
 8009d26:	609a      	str	r2, [r3, #8]
 8009d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2e:	f383 8810 	msr	PRIMASK, r3
}
 8009d32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d118      	bne.n	8009d6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d40:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d46:	2301      	movs	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f383 8810 	msr	PRIMASK, r3
}
 8009d50:	46c0      	nop			@ (mov r8, r8)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2110      	movs	r1, #16
 8009d5e:	438a      	bics	r2, r1
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f383 8810 	msr	PRIMASK, r3
}
 8009d6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	228c      	movs	r2, #140	@ 0x8c
 8009d72:	2120      	movs	r1, #32
 8009d74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d82:	46c0      	nop			@ (mov r8, r8)
 8009d84:	46bd      	mov	sp, r7
 8009d86:	b00e      	add	sp, #56	@ 0x38
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	46c0      	nop			@ (mov r8, r8)
 8009d8c:	fffffedf 	.word	0xfffffedf
 8009d90:	effffffe 	.word	0xeffffffe

08009d94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b094      	sub	sp, #80	@ 0x50
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2220      	movs	r2, #32
 8009daa:	4013      	ands	r3, r2
 8009dac:	d16f      	bne.n	8009e8e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8009dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009db0:	225e      	movs	r2, #94	@ 0x5e
 8009db2:	2100      	movs	r1, #0
 8009db4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009db6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dba:	61bb      	str	r3, [r7, #24]
  return(result);
 8009dbc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	f383 8810 	msr	PRIMASK, r3
}
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	493a      	ldr	r1, [pc, #232]	@ (8009ec0 <UART_DMAReceiveCplt+0x12c>)
 8009dd8:	400a      	ands	r2, r1
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	f383 8810 	msr	PRIMASK, r3
}
 8009de6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009de8:	f3ef 8310 	mrs	r3, PRIMASK
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009df2:	2301      	movs	r3, #1
 8009df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df8:	f383 8810 	msr	PRIMASK, r3
}
 8009dfc:	46c0      	nop			@ (mov r8, r8)
 8009dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2101      	movs	r1, #1
 8009e0a:	438a      	bics	r2, r1
 8009e0c:	609a      	str	r2, [r3, #8]
 8009e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e14:	f383 8810 	msr	PRIMASK, r3
}
 8009e18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e24:	2301      	movs	r3, #1
 8009e26:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e2a:	f383 8810 	msr	PRIMASK, r3
}
 8009e2e:	46c0      	nop			@ (mov r8, r8)
 8009e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2140      	movs	r1, #64	@ 0x40
 8009e3c:	438a      	bics	r2, r1
 8009e3e:	609a      	str	r2, [r3, #8]
 8009e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e46:	f383 8810 	msr	PRIMASK, r3
}
 8009e4a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e4e:	228c      	movs	r2, #140	@ 0x8c
 8009e50:	2120      	movs	r1, #32
 8009e52:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d118      	bne.n	8009e8e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e60:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e62:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e66:	2301      	movs	r3, #1
 8009e68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f383 8810 	msr	PRIMASK, r3
}
 8009e70:	46c0      	nop			@ (mov r8, r8)
 8009e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2110      	movs	r1, #16
 8009e7e:	438a      	bics	r2, r1
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f383 8810 	msr	PRIMASK, r3
}
 8009e8c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e90:	2200      	movs	r2, #0
 8009e92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d108      	bne.n	8009eae <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e9e:	225c      	movs	r2, #92	@ 0x5c
 8009ea0:	5a9a      	ldrh	r2, [r3, r2]
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ea4:	0011      	movs	r1, r2
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f7f8 f9ea 	bl	8002280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009eac:	e003      	b.n	8009eb6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8009eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f7ff fab7 	bl	8009424 <HAL_UART_RxCpltCallback>
}
 8009eb6:	46c0      	nop			@ (mov r8, r8)
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	b014      	add	sp, #80	@ 0x50
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	46c0      	nop			@ (mov r8, r8)
 8009ec0:	fffffeff 	.word	0xfffffeff

08009ec4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d10a      	bne.n	8009ef6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	225c      	movs	r2, #92	@ 0x5c
 8009ee4:	5a9b      	ldrh	r3, [r3, r2]
 8009ee6:	085b      	lsrs	r3, r3, #1
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	0011      	movs	r1, r2
 8009eee:	0018      	movs	r0, r3
 8009ef0:	f7f8 f9c6 	bl	8002280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ef4:	e003      	b.n	8009efe <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	0018      	movs	r0, r3
 8009efa:	f7ff fa9b 	bl	8009434 <HAL_UART_RxHalfCpltCallback>
}
 8009efe:	46c0      	nop			@ (mov r8, r8)
 8009f00:	46bd      	mov	sp, r7
 8009f02:	b004      	add	sp, #16
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2288      	movs	r2, #136	@ 0x88
 8009f18:	589b      	ldr	r3, [r3, r2]
 8009f1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	228c      	movs	r2, #140	@ 0x8c
 8009f20:	589b      	ldr	r3, [r3, r2]
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	2280      	movs	r2, #128	@ 0x80
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	2b80      	cmp	r3, #128	@ 0x80
 8009f30:	d10a      	bne.n	8009f48 <UART_DMAError+0x42>
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	2b21      	cmp	r3, #33	@ 0x21
 8009f36:	d107      	bne.n	8009f48 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2256      	movs	r2, #86	@ 0x56
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	0018      	movs	r0, r3
 8009f44:	f7ff fe80 	bl	8009c48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	2240      	movs	r2, #64	@ 0x40
 8009f50:	4013      	ands	r3, r2
 8009f52:	2b40      	cmp	r3, #64	@ 0x40
 8009f54:	d10a      	bne.n	8009f6c <UART_DMAError+0x66>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b22      	cmp	r3, #34	@ 0x22
 8009f5a:	d107      	bne.n	8009f6c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	225e      	movs	r2, #94	@ 0x5e
 8009f60:	2100      	movs	r1, #0
 8009f62:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	0018      	movs	r0, r3
 8009f68:	f7ff feae 	bl	8009cc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2290      	movs	r2, #144	@ 0x90
 8009f70:	589b      	ldr	r3, [r3, r2]
 8009f72:	2210      	movs	r2, #16
 8009f74:	431a      	orrs	r2, r3
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2190      	movs	r1, #144	@ 0x90
 8009f7a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	0018      	movs	r0, r3
 8009f80:	f7ff fa60 	bl	8009444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f84:	46c0      	nop			@ (mov r8, r8)
 8009f86:	46bd      	mov	sp, r7
 8009f88:	b006      	add	sp, #24
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	225e      	movs	r2, #94	@ 0x5e
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2256      	movs	r2, #86	@ 0x56
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	0018      	movs	r0, r3
 8009fae:	f7ff fa49 	bl	8009444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb2:	46c0      	nop			@ (mov r8, r8)
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	b004      	add	sp, #16
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc6:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fcc:	2200      	movs	r2, #0
 8009fce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2280      	movs	r2, #128	@ 0x80
 8009fd4:	589b      	ldr	r3, [r3, r2]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d005      	beq.n	8009fe6 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2280      	movs	r2, #128	@ 0x80
 8009fde:	589b      	ldr	r3, [r3, r2]
 8009fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d12d      	bne.n	800a042 <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2256      	movs	r2, #86	@ 0x56
 8009fea:	2100      	movs	r1, #0
 8009fec:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	225e      	movs	r2, #94	@ 0x5e
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2290      	movs	r2, #144	@ 0x90
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	220f      	movs	r2, #15
 800a004:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a00a:	2380      	movs	r3, #128	@ 0x80
 800a00c:	059b      	lsls	r3, r3, #22
 800a00e:	429a      	cmp	r2, r3
 800a010:	d107      	bne.n	800a022 <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	699a      	ldr	r2, [r3, #24]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2110      	movs	r1, #16
 800a01e:	430a      	orrs	r2, r1
 800a020:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2288      	movs	r2, #136	@ 0x88
 800a026:	2120      	movs	r1, #32
 800a028:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	228c      	movs	r2, #140	@ 0x8c
 800a02e:	2120      	movs	r1, #32
 800a030:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7ff fa0a 	bl	8009454 <HAL_UART_AbortCpltCallback>
 800a040:	e000      	b.n	800a044 <UART_DMATxAbortCallback+0x8a>
      return;
 800a042:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a044:	46bd      	mov	sp, r7
 800a046:	b004      	add	sp, #16
 800a048:	bd80      	pop	{r7, pc}

0800a04a <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a056:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2280      	movs	r2, #128	@ 0x80
 800a05c:	589b      	ldr	r3, [r3, r2]
 800a05e:	2200      	movs	r2, #0
 800a060:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d004      	beq.n	800a074 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a070:	2b00      	cmp	r3, #0
 800a072:	d127      	bne.n	800a0c4 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2256      	movs	r2, #86	@ 0x56
 800a078:	2100      	movs	r1, #0
 800a07a:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	225e      	movs	r2, #94	@ 0x5e
 800a080:	2100      	movs	r1, #0
 800a082:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2290      	movs	r2, #144	@ 0x90
 800a088:	2100      	movs	r1, #0
 800a08a:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	220f      	movs	r2, #15
 800a092:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2108      	movs	r1, #8
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2288      	movs	r2, #136	@ 0x88
 800a0a8:	2120      	movs	r1, #32
 800a0aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	228c      	movs	r2, #140	@ 0x8c
 800a0b0:	2120      	movs	r1, #32
 800a0b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	0018      	movs	r0, r3
 800a0be:	f7ff f9c9 	bl	8009454 <HAL_UART_AbortCpltCallback>
 800a0c2:	e000      	b.n	800a0c6 <UART_DMARxAbortCallback+0x7c>
      return;
 800a0c4:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b004      	add	sp, #16
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a0d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0da:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0dc:	617b      	str	r3, [r7, #20]
 800a0de:	2301      	movs	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f383 8810 	msr	PRIMASK, r3
}
 800a0e8:	46c0      	nop			@ (mov r8, r8)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2140      	movs	r1, #64	@ 0x40
 800a0f6:	438a      	bics	r2, r1
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f383 8810 	msr	PRIMASK, r3
}
 800a104:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2288      	movs	r2, #136	@ 0x88
 800a10a:	2120      	movs	r1, #32
 800a10c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	0018      	movs	r0, r3
 800a118:	f7ff f97c 	bl	8009414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a11c:	46c0      	nop			@ (mov r8, r8)
 800a11e:	46bd      	mov	sp, r7
 800a120:	b006      	add	sp, #24
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e05d      	b.n	800a1f8 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2288      	movs	r2, #136	@ 0x88
 800a140:	589b      	ldr	r3, [r3, r2]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d107      	bne.n	800a156 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2284      	movs	r2, #132	@ 0x84
 800a14a:	2100      	movs	r1, #0
 800a14c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	0018      	movs	r0, r3
 800a152:	f7f8 ffa9 	bl	80030a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2288      	movs	r2, #136	@ 0x88
 800a15a:	2124      	movs	r1, #36	@ 0x24
 800a15c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2101      	movs	r1, #1
 800a16a:	438a      	bics	r2, r1
 800a16c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	0018      	movs	r0, r3
 800a17a:	f7ff faf1 	bl	8009760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	0018      	movs	r0, r3
 800a182:	f7ff f96f 	bl	8009464 <UART_SetConfig>
 800a186:	0003      	movs	r3, r0
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d101      	bne.n	800a190 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e033      	b.n	800a1f8 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689a      	ldr	r2, [r3, #8]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2180      	movs	r1, #128	@ 0x80
 800a19c:	01c9      	lsls	r1, r1, #7
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	4a15      	ldr	r2, [pc, #84]	@ (800a200 <HAL_RS485Ex_Init+0xdc>)
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	0019      	movs	r1, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	055b      	lsls	r3, r3, #21
 800a1bc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	041b      	lsls	r3, r3, #16
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a0d      	ldr	r2, [pc, #52]	@ (800a204 <HAL_RS485Ex_Init+0xe0>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	0019      	movs	r1, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f7ff fb69 	bl	80098c8 <UART_CheckIdleState>
 800a1f6:	0003      	movs	r3, r0
}
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	b006      	add	sp, #24
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	ffff7fff 	.word	0xffff7fff
 800a204:	fc00ffff 	.word	0xfc00ffff

0800a208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a210:	46c0      	nop			@ (mov r8, r8)
 800a212:	46bd      	mov	sp, r7
 800a214:	b002      	add	sp, #8
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a220:	46c0      	nop			@ (mov r8, r8)
 800a222:	46bd      	mov	sp, r7
 800a224:	b002      	add	sp, #8
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a230:	46c0      	nop			@ (mov r8, r8)
 800a232:	46bd      	mov	sp, r7
 800a234:	b002      	add	sp, #8
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2284      	movs	r2, #132	@ 0x84
 800a244:	5c9b      	ldrb	r3, [r3, r2]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_UARTEx_DisableFifoMode+0x16>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e027      	b.n	800a29e <HAL_UARTEx_DisableFifoMode+0x66>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2284      	movs	r2, #132	@ 0x84
 800a252:	2101      	movs	r1, #1
 800a254:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2288      	movs	r2, #136	@ 0x88
 800a25a:	2124      	movs	r1, #36	@ 0x24
 800a25c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2101      	movs	r1, #1
 800a272:	438a      	bics	r2, r1
 800a274:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a27a:	4013      	ands	r3, r2
 800a27c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2288      	movs	r2, #136	@ 0x88
 800a290:	2120      	movs	r1, #32
 800a292:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2284      	movs	r2, #132	@ 0x84
 800a298:	2100      	movs	r1, #0
 800a29a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	0018      	movs	r0, r3
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b004      	add	sp, #16
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	46c0      	nop			@ (mov r8, r8)
 800a2a8:	dfffffff 	.word	0xdfffffff

0800a2ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2284      	movs	r2, #132	@ 0x84
 800a2ba:	5c9b      	ldrb	r3, [r3, r2]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d101      	bne.n	800a2c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e02e      	b.n	800a322 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2284      	movs	r2, #132	@ 0x84
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2288      	movs	r2, #136	@ 0x88
 800a2d0:	2124      	movs	r1, #36	@ 0x24
 800a2d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	438a      	bics	r2, r1
 800a2ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	08d9      	lsrs	r1, r3, #3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	0018      	movs	r0, r3
 800a304:	f000 f8bc 	bl	800a480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2288      	movs	r2, #136	@ 0x88
 800a314:	2120      	movs	r1, #32
 800a316:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2284      	movs	r2, #132	@ 0x84
 800a31c:	2100      	movs	r1, #0
 800a31e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	0018      	movs	r0, r3
 800a324:	46bd      	mov	sp, r7
 800a326:	b004      	add	sp, #16
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2284      	movs	r2, #132	@ 0x84
 800a33a:	5c9b      	ldrb	r3, [r3, r2]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a340:	2302      	movs	r3, #2
 800a342:	e02f      	b.n	800a3a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2284      	movs	r2, #132	@ 0x84
 800a348:	2101      	movs	r1, #1
 800a34a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2288      	movs	r2, #136	@ 0x88
 800a350:	2124      	movs	r1, #36	@ 0x24
 800a352:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2101      	movs	r1, #1
 800a368:	438a      	bics	r2, r1
 800a36a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	4a0e      	ldr	r2, [pc, #56]	@ (800a3ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a374:	4013      	ands	r3, r2
 800a376:	0019      	movs	r1, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	0018      	movs	r0, r3
 800a386:	f000 f87b 	bl	800a480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2288      	movs	r2, #136	@ 0x88
 800a396:	2120      	movs	r1, #32
 800a398:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2284      	movs	r2, #132	@ 0x84
 800a39e:	2100      	movs	r1, #0
 800a3a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	b004      	add	sp, #16
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	f1ffffff 	.word	0xf1ffffff

0800a3b0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3b0:	b5b0      	push	{r4, r5, r7, lr}
 800a3b2:	b08a      	sub	sp, #40	@ 0x28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	1dbb      	adds	r3, r7, #6
 800a3bc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	228c      	movs	r2, #140	@ 0x8c
 800a3c2:	589b      	ldr	r3, [r3, r2]
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d156      	bne.n	800a476 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a3ce:	1dbb      	adds	r3, r7, #6
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e04e      	b.n	800a478 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	2380      	movs	r3, #128	@ 0x80
 800a3e0:	015b      	lsls	r3, r3, #5
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d109      	bne.n	800a3fa <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	d001      	beq.n	800a3fa <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e03e      	b.n	800a478 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a406:	2527      	movs	r5, #39	@ 0x27
 800a408:	197c      	adds	r4, r7, r5
 800a40a:	1dbb      	adds	r3, r7, #6
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	68b9      	ldr	r1, [r7, #8]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	0018      	movs	r0, r3
 800a414:	f7ff fb72 	bl	8009afc <UART_Start_Receive_DMA>
 800a418:	0003      	movs	r3, r0
 800a41a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a41c:	197b      	adds	r3, r7, r5
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d124      	bne.n	800a46e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d11c      	bne.n	800a466 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2210      	movs	r2, #16
 800a432:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a434:	f3ef 8310 	mrs	r3, PRIMASK
 800a438:	617b      	str	r3, [r7, #20]
  return(result);
 800a43a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a43c:	623b      	str	r3, [r7, #32]
 800a43e:	2301      	movs	r3, #1
 800a440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f383 8810 	msr	PRIMASK, r3
}
 800a448:	46c0      	nop			@ (mov r8, r8)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2110      	movs	r1, #16
 800a456:	430a      	orrs	r2, r1
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	f383 8810 	msr	PRIMASK, r3
}
 800a464:	e003      	b.n	800a46e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a466:	2327      	movs	r3, #39	@ 0x27
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	2201      	movs	r2, #1
 800a46c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a46e:	2327      	movs	r3, #39	@ 0x27
 800a470:	18fb      	adds	r3, r7, r3
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	e000      	b.n	800a478 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a476:	2302      	movs	r3, #2
  }
}
 800a478:	0018      	movs	r0, r3
 800a47a:	46bd      	mov	sp, r7
 800a47c:	b00a      	add	sp, #40	@ 0x28
 800a47e:	bdb0      	pop	{r4, r5, r7, pc}

0800a480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d108      	bne.n	800a4a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	226a      	movs	r2, #106	@ 0x6a
 800a494:	2101      	movs	r1, #1
 800a496:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2268      	movs	r2, #104	@ 0x68
 800a49c:	2101      	movs	r1, #1
 800a49e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4a0:	e043      	b.n	800a52a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4a2:	260f      	movs	r6, #15
 800a4a4:	19bb      	adds	r3, r7, r6
 800a4a6:	2208      	movs	r2, #8
 800a4a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4aa:	200e      	movs	r0, #14
 800a4ac:	183b      	adds	r3, r7, r0
 800a4ae:	2208      	movs	r2, #8
 800a4b0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	0e5b      	lsrs	r3, r3, #25
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	240d      	movs	r4, #13
 800a4be:	193b      	adds	r3, r7, r4
 800a4c0:	2107      	movs	r1, #7
 800a4c2:	400a      	ands	r2, r1
 800a4c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	0f5b      	lsrs	r3, r3, #29
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	250c      	movs	r5, #12
 800a4d2:	197b      	adds	r3, r7, r5
 800a4d4:	2107      	movs	r1, #7
 800a4d6:	400a      	ands	r2, r1
 800a4d8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4da:	183b      	adds	r3, r7, r0
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	197a      	adds	r2, r7, r5
 800a4e0:	7812      	ldrb	r2, [r2, #0]
 800a4e2:	4914      	ldr	r1, [pc, #80]	@ (800a534 <UARTEx_SetNbDataToProcess+0xb4>)
 800a4e4:	5c8a      	ldrb	r2, [r1, r2]
 800a4e6:	435a      	muls	r2, r3
 800a4e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4ea:	197b      	adds	r3, r7, r5
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	4a12      	ldr	r2, [pc, #72]	@ (800a538 <UARTEx_SetNbDataToProcess+0xb8>)
 800a4f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4f2:	0019      	movs	r1, r3
 800a4f4:	f7f5 fe92 	bl	800021c <__divsi3>
 800a4f8:	0003      	movs	r3, r0
 800a4fa:	b299      	uxth	r1, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	226a      	movs	r2, #106	@ 0x6a
 800a500:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a502:	19bb      	adds	r3, r7, r6
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	193a      	adds	r2, r7, r4
 800a508:	7812      	ldrb	r2, [r2, #0]
 800a50a:	490a      	ldr	r1, [pc, #40]	@ (800a534 <UARTEx_SetNbDataToProcess+0xb4>)
 800a50c:	5c8a      	ldrb	r2, [r1, r2]
 800a50e:	435a      	muls	r2, r3
 800a510:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a512:	193b      	adds	r3, r7, r4
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	4a08      	ldr	r2, [pc, #32]	@ (800a538 <UARTEx_SetNbDataToProcess+0xb8>)
 800a518:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a51a:	0019      	movs	r1, r3
 800a51c:	f7f5 fe7e 	bl	800021c <__divsi3>
 800a520:	0003      	movs	r3, r0
 800a522:	b299      	uxth	r1, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2268      	movs	r2, #104	@ 0x68
 800a528:	5299      	strh	r1, [r3, r2]
}
 800a52a:	46c0      	nop			@ (mov r8, r8)
 800a52c:	46bd      	mov	sp, r7
 800a52e:	b005      	add	sp, #20
 800a530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a532:	46c0      	nop			@ (mov r8, r8)
 800a534:	0800a930 	.word	0x0800a930
 800a538:	0800a938 	.word	0x0800a938

0800a53c <memset>:
 800a53c:	0003      	movs	r3, r0
 800a53e:	1882      	adds	r2, r0, r2
 800a540:	4293      	cmp	r3, r2
 800a542:	d100      	bne.n	800a546 <memset+0xa>
 800a544:	4770      	bx	lr
 800a546:	7019      	strb	r1, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	e7f9      	b.n	800a540 <memset+0x4>

0800a54c <__libc_init_array>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	2600      	movs	r6, #0
 800a550:	4c0c      	ldr	r4, [pc, #48]	@ (800a584 <__libc_init_array+0x38>)
 800a552:	4d0d      	ldr	r5, [pc, #52]	@ (800a588 <__libc_init_array+0x3c>)
 800a554:	1b64      	subs	r4, r4, r5
 800a556:	10a4      	asrs	r4, r4, #2
 800a558:	42a6      	cmp	r6, r4
 800a55a:	d109      	bne.n	800a570 <__libc_init_array+0x24>
 800a55c:	2600      	movs	r6, #0
 800a55e:	f000 f823 	bl	800a5a8 <_init>
 800a562:	4c0a      	ldr	r4, [pc, #40]	@ (800a58c <__libc_init_array+0x40>)
 800a564:	4d0a      	ldr	r5, [pc, #40]	@ (800a590 <__libc_init_array+0x44>)
 800a566:	1b64      	subs	r4, r4, r5
 800a568:	10a4      	asrs	r4, r4, #2
 800a56a:	42a6      	cmp	r6, r4
 800a56c:	d105      	bne.n	800a57a <__libc_init_array+0x2e>
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	00b3      	lsls	r3, r6, #2
 800a572:	58eb      	ldr	r3, [r5, r3]
 800a574:	4798      	blx	r3
 800a576:	3601      	adds	r6, #1
 800a578:	e7ee      	b.n	800a558 <__libc_init_array+0xc>
 800a57a:	00b3      	lsls	r3, r6, #2
 800a57c:	58eb      	ldr	r3, [r5, r3]
 800a57e:	4798      	blx	r3
 800a580:	3601      	adds	r6, #1
 800a582:	e7f2      	b.n	800a56a <__libc_init_array+0x1e>
 800a584:	0800a940 	.word	0x0800a940
 800a588:	0800a940 	.word	0x0800a940
 800a58c:	0800a944 	.word	0x0800a944
 800a590:	0800a940 	.word	0x0800a940

0800a594 <memcpy>:
 800a594:	2300      	movs	r3, #0
 800a596:	b510      	push	{r4, lr}
 800a598:	429a      	cmp	r2, r3
 800a59a:	d100      	bne.n	800a59e <memcpy+0xa>
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	5ccc      	ldrb	r4, [r1, r3]
 800a5a0:	54c4      	strb	r4, [r0, r3]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	e7f8      	b.n	800a598 <memcpy+0x4>
	...

0800a5a8 <_init>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	46c0      	nop			@ (mov r8, r8)
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr

0800a5b4 <_fini>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	46c0      	nop			@ (mov r8, r8)
 800a5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ba:	bc08      	pop	{r3}
 800a5bc:	469e      	mov	lr, r3
 800a5be:	4770      	bx	lr
