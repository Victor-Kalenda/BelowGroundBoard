
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  0000a080  2**0
                  CONTENTS
  4 .ARM          00000000  08008a70  08008a70  0000a080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a70  08008a70  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a70  08008a70  00009a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a74  08008a74  00009a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008a78  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000080  08008af8  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08008af8  0000a710  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019634  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003289  00000000  00000000  000236dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00026968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123b  00000000  00000000  00028078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018915  00000000  00000000  000292b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b875  00000000  00000000  00041bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c11b  00000000  00000000  0005d43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e0  00000000  00000000  000f959c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000feb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008754 	.word	0x08008754

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08008754 	.word	0x08008754

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_ErrorCallback>:
{
	i2c_rx_int = 1;
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	// Do something
}
 80003fc:	46c0      	nop			@ (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}

08000404 <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14


void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	0019      	movs	r1, r3
 8000416:	2007      	movs	r0, #7
 8000418:	f000 f8da 	bl	80005d0 <bno055_writeData>
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}

08000424 <bno055_setOperationMode>:
	bno055_readData(BNO055_OPR_MODE, &mode, 1);
	return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	0002      	movs	r2, r0
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	701a      	strb	r2, [r3, #0]
	bno055_writeData(BNO055_OPR_MODE, mode);
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	0019      	movs	r1, r3
 8000436:	203d      	movs	r0, #61	@ 0x3d
 8000438:	f000 f8ca 	bl	80005d0 <bno055_writeData>
	if (mode == BNO055_OPERATION_MODE_CONFIG)
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d103      	bne.n	800044c <bno055_setOperationMode+0x28>
	{
		bno055_delay(19);
 8000444:	2013      	movs	r0, #19
 8000446:	f000 f8b7 	bl	80005b8 <bno055_delay>
	}
	else
	{
		bno055_delay(7);
	}
}
 800044a:	e002      	b.n	8000452 <bno055_setOperationMode+0x2e>
		bno055_delay(7);
 800044c:	2007      	movs	r0, #7
 800044e:	f000 f8b3 	bl	80005b8 <bno055_delay>
}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b002      	add	sp, #8
 8000458:	bd80      	pop	{r7, pc}

0800045a <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig()
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
	bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ffe0 	bl	8000424 <bno055_setOperationMode>
}
 8000464:	46c0      	nop			@ (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF()
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff ffd8 	bl	8000424 <bno055_setOperationMode>
}
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <bno055_reset>:
	}
	return HAL_OK;
}

uint8_t bno055_reset()
{
 800047a:	b590      	push	{r4, r7, lr}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
	uint8_t status = HAL_OK;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
	status = bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000486:	1dfc      	adds	r4, r7, #7
 8000488:	2120      	movs	r1, #32
 800048a:	203f      	movs	r0, #63	@ 0x3f
 800048c:	f000 f8a0 	bl	80005d0 <bno055_writeData>
 8000490:	0003      	movs	r3, r0
 8000492:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <bno055_reset+0x28>
	{
	  return status;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	e006      	b.n	80004b0 <bno055_reset+0x36>
	}
	bno055_delay(700);
 80004a2:	23af      	movs	r3, #175	@ 0xaf
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f886 	bl	80005b8 <bno055_delay>
	return status;
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	781b      	ldrb	r3, [r3, #0]
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b003      	add	sp, #12
 80004b6:	bd90      	pop	{r4, r7, pc}

080004b8 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

uint8_t bno055_setup()
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
	uint8_t status = HAL_OK;
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
	read_index = 0;
 80004c4:	4b21      	ldr	r3, [pc, #132]	@ (800054c <bno055_setup+0x94>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
	status = bno055_reset();
 80004ca:	1dfc      	adds	r4, r7, #7
 80004cc:	f7ff ffd5 	bl	800047a <bno055_reset>
 80004d0:	0003      	movs	r3, r0
 80004d2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <bno055_setup+0x2a>
	{
		return status;
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	e030      	b.n	8000544 <bno055_setup+0x8c>
	}

	uint8_t id = 0;
 80004e2:	1dbb      	adds	r3, r7, #6
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
	status = bno055_readData(BNO055_CHIP_ID, &id, 1);
 80004e8:	1dfc      	adds	r4, r7, #7
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	2201      	movs	r2, #1
 80004ee:	0019      	movs	r1, r3
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 f88f 	bl	8000614 <bno055_readData>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <bno055_setup+0x50>
	{
		return status;
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e01d      	b.n	8000544 <bno055_setup+0x8c>
	}
	if (id != BNO055_ID)
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2ba0      	cmp	r3, #160	@ 0xa0
 800050e:	d001      	beq.n	8000514 <bno055_setup+0x5c>
	{
		return HAL_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	e017      	b.n	8000544 <bno055_setup+0x8c>
	}
	bno055_setPage(0);
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ff75 	bl	8000404 <bno055_setPage>
	status = bno055_writeData(BNO055_SYS_TRIGGER, 0x0); // TODO: change to external oscillator
 800051a:	1dfc      	adds	r4, r7, #7
 800051c:	2100      	movs	r1, #0
 800051e:	203f      	movs	r0, #63	@ 0x3f
 8000520:	f000 f856 	bl	80005d0 <bno055_writeData>
 8000524:	0003      	movs	r3, r0
 8000526:	7023      	strb	r3, [r4, #0]

	if(status != HAL_OK)
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <bno055_setup+0x7e>
	{
		return status;
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	e006      	b.n	8000544 <bno055_setup+0x8c>
	}
	// Select BNO055 config mode
	bno055_setOperationModeConfig();
 8000536:	f7ff ff90 	bl	800045a <bno055_setOperationModeConfig>
	bno055_delay(10);
 800053a:	200a      	movs	r0, #10
 800053c:	f000 f83c 	bl	80005b8 <bno055_delay>
	return status;
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	b003      	add	sp, #12
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	2000009c 	.word	0x2000009c

08000550 <bno055_get_all_values>:

  return xyz;
}

void bno055_get_all_values()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)(&holding_register_database[12]);
 8000556:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <bno055_get_all_values+0x60>)
 8000558:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i < NUM_VECTORS; i++)
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	e01c      	b.n	800059c <bno055_get_all_values+0x4c>
	{
		bno055_readData(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <bno055_get_all_values+0x64>)
 8000568:	0052      	lsls	r2, r2, #1
 800056a:	5cd0      	ldrb	r0, [r2, r3]
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	0013      	movs	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	189b      	adds	r3, r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	001a      	movs	r2, r3
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	1899      	adds	r1, r3, r2
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <bno055_get_all_values+0x64>)
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	3301      	adds	r3, #1
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	001a      	movs	r2, r3
 800058e:	f000 f841 	bl	8000614 <bno055_readData>
	for(uint8_t i = 0; i < NUM_VECTORS; i++)
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	3201      	adds	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b06      	cmp	r3, #6
 80005a2:	d9de      	bls.n	8000562 <bno055_get_all_values+0x12>
	}
}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	20000028 	.word	0x20000028
 80005b4:	20000000 	.word	0x20000000

080005b8 <bno055_delay>:
extern I2C_HandleTypeDef hi2c1;

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_delay(int time)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fda8 	bl	8002118 <HAL_Delay>
#endif
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <bno055_writeData>:

uint8_t bno055_writeData(uint8_t reg, uint8_t data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	0002      	movs	r2, r0
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	1dbb      	adds	r3, r7, #6
 80005de:	1c0a      	adds	r2, r1, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[2] = {reg, data};
 80005e2:	210c      	movs	r1, #12
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	1dfa      	adds	r2, r7, #7
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	1dba      	adds	r2, r7, #6
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	705a      	strb	r2, [r3, #1]
	return HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 80005f4:	187a      	adds	r2, r7, r1
 80005f6:	4806      	ldr	r0, [pc, #24]	@ (8000610 <bno055_writeData+0x40>)
 80005f8:	230a      	movs	r3, #10
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2302      	movs	r3, #2
 80005fe:	2150      	movs	r1, #80	@ 0x50
 8000600:	f003 fb94 	bl	8003d2c <HAL_I2C_Master_Transmit>
 8000604:	0003      	movs	r3, r0
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	20000160 	.word	0x20000160

08000614 <bno055_readData>:

uint8_t bno055_readData(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
 800061a:	6039      	str	r1, [r7, #0]
 800061c:	0011      	movs	r1, r2
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	1c02      	adds	r2, r0, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	1dbb      	adds	r3, r7, #6
 8000626:	1c0a      	adds	r2, r1, #0
 8000628:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800062a:	250f      	movs	r5, #15
 800062c:	197b      	adds	r3, r7, r5
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, &reg, 1, 100);
 8000632:	197c      	adds	r4, r7, r5
 8000634:	1dfa      	adds	r2, r7, #7
 8000636:	4812      	ldr	r0, [pc, #72]	@ (8000680 <bno055_readData+0x6c>)
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	2150      	movs	r1, #80	@ 0x50
 8000640:	f003 fb74 	bl	8003d2c <HAL_I2C_Master_Transmit>
 8000644:	0003      	movs	r3, r0
 8000646:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK)
 8000648:	197b      	adds	r3, r7, r5
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <bno055_readData+0x42>
	{
		return status;
 8000650:	197b      	adds	r3, r7, r5
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	e00f      	b.n	8000676 <bno055_readData+0x62>
	}
	status = HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR << 1, data, len, 100);
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	250f      	movs	r5, #15
 800065e:	197c      	adds	r4, r7, r5
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <bno055_readData+0x6c>)
 8000664:	2164      	movs	r1, #100	@ 0x64
 8000666:	9100      	str	r1, [sp, #0]
 8000668:	2150      	movs	r1, #80	@ 0x50
 800066a:	f003 fc89 	bl	8003f80 <HAL_I2C_Master_Receive>
 800066e:	0003      	movs	r3, r0
 8000670:	7023      	strb	r3, [r4, #0]

	return status;
 8000672:	197b      	adds	r3, r7, r5
 8000674:	781b      	ldrb	r3, [r3, #0]
}
 8000676:	0018      	movs	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	b004      	add	sp, #16
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	20000160 	.word	0x20000160

08000684 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <HAL_ADC_ConvCpltCallback+0x18>)
 800068e:	0018      	movs	r0, r3
 8000690:	f002 f904 	bl	800289c <HAL_ADC_Stop_DMA>

//	for(uint8_t i = 0; i < 9; i++)
//	{
//		holding_register_database[i + 3] = (uint16_t)raw_data[i];
//	}
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000a0 	.word	0x200000a0

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f001 fcba 	bl	800201e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f8cb 	bl	8000844 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ae:	f000 f912 	bl	80008d6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 fbcf 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b6:	f000 fba7 	bl	8000e08 <MX_DMA_Init>
  MX_ADC1_Init();
 80006ba:	f000 f929 	bl	8000910 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006be:	f000 fa05 	bl	8000acc <MX_I2C1_Init>
  MX_SPI1_Init();
 80006c2:	f000 fa43 	bl	8000b4c <MX_SPI1_Init>
  MX_TIM1_Init();
 80006c6:	f000 fa7f 	bl	8000bc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006ca:	f000 fb4d 	bl	8000d68 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80006ce:	f000 fb25 	bl	8000d1c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80006d2:	4b53      	ldr	r3, [pc, #332]	@ (8000820 <main+0x180>)
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	0092      	lsls	r2, r2, #2
 80006d8:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80006da:	4b51      	ldr	r3, [pc, #324]	@ (8000820 <main+0x180>)
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	0052      	lsls	r2, r2, #1
 80006e0:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80006e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000820 <main+0x180>)
 80006e4:	2280      	movs	r2, #128	@ 0x80
 80006e6:	809a      	strh	r2, [r3, #4]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 80006e8:	4b4e      	ldr	r3, [pc, #312]	@ (8000824 <main+0x184>)
 80006ea:	22fe      	movs	r2, #254	@ 0xfe
 80006ec:	0592      	lsls	r2, r2, #22
 80006ee:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 80006f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000824 <main+0x184>)
 80006f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000828 <main+0x188>)
 80006f4:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80006f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000824 <main+0x184>)
 80006f8:	4a4c      	ldr	r2, [pc, #304]	@ (800082c <main+0x18c>)
 80006fa:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80006fc:	4b49      	ldr	r3, [pc, #292]	@ (8000824 <main+0x184>)
 80006fe:	4a4a      	ldr	r2, [pc, #296]	@ (8000828 <main+0x188>)
 8000700:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8000702:	4b48      	ldr	r3, [pc, #288]	@ (8000824 <main+0x184>)
 8000704:	22fe      	movs	r2, #254	@ 0xfe
 8000706:	0592      	lsls	r2, r2, #22
 8000708:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 800070a:	4b46      	ldr	r3, [pc, #280]	@ (8000824 <main+0x184>)
 800070c:	4a48      	ldr	r2, [pc, #288]	@ (8000830 <main+0x190>)
 800070e:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8000710:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <main+0x184>)
 8000712:	4a47      	ldr	r2, [pc, #284]	@ (8000830 <main+0x190>)
 8000714:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 8000716:	4b43      	ldr	r3, [pc, #268]	@ (8000824 <main+0x184>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 800071c:	4b41      	ldr	r3, [pc, #260]	@ (8000824 <main+0x184>)
 800071e:	4a45      	ldr	r2, [pc, #276]	@ (8000834 <main+0x194>)
 8000720:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8000722:	4b40      	ldr	r3, [pc, #256]	@ (8000824 <main+0x184>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 8000728:	4b3e      	ldr	r3, [pc, #248]	@ (8000824 <main+0x184>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 800072e:	4b3d      	ldr	r3, [pc, #244]	@ (8000824 <main+0x184>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8000734:	4b3b      	ldr	r3, [pc, #236]	@ (8000824 <main+0x184>)
 8000736:	2200      	movs	r2, #0
 8000738:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 800073a:	4b3a      	ldr	r3, [pc, #232]	@ (8000824 <main+0x184>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8000740:	f001 f814 	bl	800176c <modbus_set_rx>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <main+0xac>
  {
	  Error_Handler();
 8000748:	f000 fc00 	bl	8000f4c <Error_Handler>
  }

  if(HAL_ADC_Start_DMA(&hadc1, adc_buffer, 1) != HAL_OK)
 800074c:	493a      	ldr	r1, [pc, #232]	@ (8000838 <main+0x198>)
 800074e:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <main+0x19c>)
 8000750:	2201      	movs	r2, #1
 8000752:	0018      	movs	r0, r3
 8000754:	f002 f814 	bl	8002780 <HAL_ADC_Start_DMA>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <main+0xc0>
  {
	  Error_Handler();
 800075c:	f000 fbf6 	bl	8000f4c <Error_Handler>
  }

  bno055_setup();
 8000760:	f7ff feaa 	bl	80004b8 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000764:	f7ff fe81 	bl	800046a <bno055_setOperationModeNDOF>
  // Start the retrieval process for the bno055 (i2c in interrupt mode)
  //bno055_queue_transaction();

  while (1)
  {
	  if(modbus_rx())
 8000768:	f000 ffea 	bl	8001740 <modbus_rx>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d054      	beq.n	800081a <main+0x17a>
	  {
		  int8_t status = 0;
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fccc 	bl	8001114 <get_rx_buffer>
 800077c:	0003      	movs	r3, r0
 800077e:	001a      	movs	r2, r3
 8000780:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <main+0x1a0>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d11b      	bne.n	80007c0 <main+0x120>
		  {
			  switch(get_rx_buffer(1))
 8000788:	2001      	movs	r0, #1
 800078a:	f000 fcc3 	bl	8001114 <get_rx_buffer>
 800078e:	0003      	movs	r3, r0
 8000790:	2b03      	cmp	r3, #3
 8000792:	d002      	beq.n	800079a <main+0xfa>
 8000794:	2b10      	cmp	r3, #16
 8000796:	d006      	beq.n	80007a6 <main+0x106>
 8000798:	e00b      	b.n	80007b2 <main+0x112>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 800079a:	1dfc      	adds	r4, r7, #7
 800079c:	f000 fcf2 	bl	8001184 <return_holding_registers>
 80007a0:	0003      	movs	r3, r0
 80007a2:	7023      	strb	r3, [r4, #0]
					  break;
 80007a4:	e034      	b.n	8000810 <main+0x170>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80007a6:	1dfc      	adds	r4, r7, #7
 80007a8:	f000 fe0e 	bl	80013c8 <edit_multiple_registers>
 80007ac:	0003      	movs	r3, r0
 80007ae:	7023      	strb	r3, [r4, #0]
					  break;
 80007b0:	e02e      	b.n	8000810 <main+0x170>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80007b2:	1dfc      	adds	r4, r7, #7
 80007b4:	2004      	movs	r0, #4
 80007b6:	f000 fef5 	bl	80015a4 <modbus_exception>
 80007ba:	0003      	movs	r3, r0
 80007bc:	7023      	strb	r3, [r4, #0]
					  break;
 80007be:	e027      	b.n	8000810 <main+0x170>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fca7 	bl	8001114 <get_rx_buffer>
 80007c6:	0003      	movs	r3, r0
 80007c8:	2bff      	cmp	r3, #255	@ 0xff
 80007ca:	d121      	bne.n	8000810 <main+0x170>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fca1 	bl	8001114 <get_rx_buffer>
 80007d2:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d11b      	bne.n	8000810 <main+0x170>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fc9b 	bl	8001114 <get_rx_buffer>
 80007de:	0003      	movs	r3, r0
 80007e0:	021c      	lsls	r4, r3, #8
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 fc96 	bl	8001114 <get_rx_buffer>
 80007e8:	0003      	movs	r3, r0
 80007ea:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80007ec:	d110      	bne.n	8000810 <main+0x170>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 80007ee:	2004      	movs	r0, #4
 80007f0:	f000 fc90 	bl	8001114 <get_rx_buffer>
 80007f4:	0003      	movs	r3, r0
 80007f6:	021c      	lsls	r4, r3, #8
 80007f8:	2005      	movs	r0, #5
 80007fa:	f000 fc8b 	bl	8001114 <get_rx_buffer>
 80007fe:	0003      	movs	r3, r0
 8000800:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d104      	bne.n	8000810 <main+0x170>
		  {

			  status = return_holding_registers();
 8000806:	1dfc      	adds	r4, r7, #7
 8000808:	f000 fcbc 	bl	8001184 <return_holding_registers>
 800080c:	0003      	movs	r3, r0
 800080e:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 8000810:	1dfc      	adds	r4, r7, #7
 8000812:	f000 ffab 	bl	800176c <modbus_set_rx>
 8000816:	0003      	movs	r3, r0
 8000818:	7023      	strb	r3, [r4, #0]
	  // Handle when an i2c Transaction has completed (i2c in interrupt mode)
//	  if(bno055_rx())
//	  {
//		  bno055_queue_transaction();
//	  }
	  bno055_get_all_values();
 800081a:	f7ff fe99 	bl	8000550 <bno055_get_all_values>
	  if(modbus_rx())
 800081e:	e7a3      	b.n	8000768 <main+0xc8>
 8000820:	200003d8 	.word	0x200003d8
 8000824:	200003a0 	.word	0x200003a0
 8000828:	3dcccccd 	.word	0x3dcccccd
 800082c:	40a00000 	.word	0x40a00000
 8000830:	42c80000 	.word	0x42c80000
 8000834:	42200000 	.word	0x42200000
 8000838:	200003e0 	.word	0x200003e0
 800083c:	200000a0 	.word	0x200000a0
 8000840:	20000010 	.word	0x20000010

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08f      	sub	sp, #60	@ 0x3c
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	2418      	movs	r4, #24
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	2320      	movs	r3, #32
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f007 ff47 	bl	80086e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	0018      	movs	r0, r3
 800085e:	2314      	movs	r3, #20
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f007 ff40 	bl	80086e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000868:	0021      	movs	r1, r4
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2203      	movs	r2, #3
 800086e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	0252      	lsls	r2, r2, #9
 8000876:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2280      	movs	r2, #128	@ 0x80
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2280      	movs	r2, #128	@ 0x80
 8000884:	0152      	lsls	r2, r2, #5
 8000886:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2240      	movs	r2, #64	@ 0x40
 800088c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	187b      	adds	r3, r7, r1
 8000890:	0018      	movs	r0, r3
 8000892:	f004 fe23 	bl	80054dc <HAL_RCC_OscConfig>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800089a:	f000 fb57 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2201      	movs	r2, #1
 80008a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f005 f831 	bl	8005928 <HAL_RCC_ClockConfig>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008ca:	f000 fb3f 	bl	8000f4c <Error_Handler>
  }
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b00f      	add	sp, #60	@ 0x3c
 80008d4:	bd90      	pop	{r4, r7, pc}

080008d6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b088      	sub	sp, #32
 80008da:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008dc:	003b      	movs	r3, r7
 80008de:	0018      	movs	r0, r3
 80008e0:	2320      	movs	r3, #32
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f007 feff 	bl	80086e8 <memset>

  /** Initializes the common peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSIKER;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.HSIKerClockDivider = RCC_HSIKER_DIV1;
 80008f0:	003b      	movs	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f6:	003b      	movs	r3, r7
 80008f8:	0018      	movs	r0, r3
 80008fa:	f005 f9bb 	bl	8005c74 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000902:	f000 fb23 	bl	8000f4c <Error_Handler>
  }
}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b008      	add	sp, #32
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	0018      	movs	r0, r3
 800091a:	230c      	movs	r3, #12
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f007 fee2 	bl	80086e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000924:	4b5f      	ldr	r3, [pc, #380]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000926:	4a60      	ldr	r2, [pc, #384]	@ (8000aa8 <MX_ADC1_Init+0x198>)
 8000928:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800092a:	4b5e      	ldr	r3, [pc, #376]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800092c:	22c0      	movs	r2, #192	@ 0xc0
 800092e:	0612      	lsls	r2, r2, #24
 8000930:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000932:	4b5c      	ldr	r3, [pc, #368]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000938:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800093e:	4b59      	ldr	r3, [pc, #356]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	0612      	lsls	r2, r2, #24
 8000944:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000946:	4b57      	ldr	r3, [pc, #348]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000948:	2208      	movs	r2, #8
 800094a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094c:	4b55      	ldr	r3, [pc, #340]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800094e:	2200      	movs	r2, #0
 8000950:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000952:	4b54      	ldr	r3, [pc, #336]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000954:	2200      	movs	r2, #0
 8000956:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000958:	4b52      	ldr	r3, [pc, #328]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800095a:	2201      	movs	r2, #1
 800095c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800095e:	4b51      	ldr	r3, [pc, #324]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000964:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000966:	2220      	movs	r2, #32
 8000968:	2100      	movs	r1, #0
 800096a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000972:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000978:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800097a:	222c      	movs	r2, #44	@ 0x2c
 800097c:	2101      	movs	r1, #1
 800097e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000980:	4b48      	ldr	r3, [pc, #288]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000986:	4b47      	ldr	r3, [pc, #284]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000988:	2200      	movs	r2, #0
 800098a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800098c:	4b45      	ldr	r3, [pc, #276]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800098e:	223c      	movs	r2, #60	@ 0x3c
 8000990:	2100      	movs	r1, #0
 8000992:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000994:	4b43      	ldr	r3, [pc, #268]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000996:	2200      	movs	r2, #0
 8000998:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099a:	4b42      	ldr	r3, [pc, #264]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fd49 	bl	8002434 <HAL_ADC_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80009a6:	f000 fad1 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2201      	movs	r2, #1
 80009b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b6:	1d3a      	adds	r2, r7, #4
 80009b8:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 ffef 	bl	80029a0 <HAL_ADC_ConfigChannel>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80009c6:	f000 fac1 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4a37      	ldr	r2, [pc, #220]	@ (8000aac <MX_ADC1_Init+0x19c>)
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	1d3a      	adds	r2, r7, #4
 80009d2:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 ffe2 	bl	80029a0 <HAL_ADC_ConfigChannel>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80009e0:	f000 fab4 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4a32      	ldr	r2, [pc, #200]	@ (8000ab0 <MX_ADC1_Init+0x1a0>)
 80009e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	1d3a      	adds	r2, r7, #4
 80009ec:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 ffd5 	bl	80029a0 <HAL_ADC_ConfigChannel>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80009fa:	f000 faa7 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab4 <MX_ADC1_Init+0x1a4>)
 8000a02:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a04:	1d3a      	adds	r2, r7, #4
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 ffc8 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000a14:	f000 fa9a 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4a27      	ldr	r2, [pc, #156]	@ (8000ab8 <MX_ADC1_Init+0x1a8>)
 8000a1c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	1d3a      	adds	r2, r7, #4
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000a22:	0011      	movs	r1, r2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 ffbb 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a2e:	f000 fa8d 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4a21      	ldr	r2, [pc, #132]	@ (8000abc <MX_ADC1_Init+0x1ac>)
 8000a36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	1d3a      	adds	r2, r7, #4
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 ffae 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000a48:	f000 fa80 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <MX_ADC1_Init+0x1b0>)
 8000a50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a52:	1d3a      	adds	r2, r7, #4
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 ffa1 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000a62:	f000 fa73 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4a16      	ldr	r2, [pc, #88]	@ (8000ac4 <MX_ADC1_Init+0x1b4>)
 8000a6a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 ff94 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000a7c:	f000 fa66 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4a11      	ldr	r2, [pc, #68]	@ (8000ac8 <MX_ADC1_Init+0x1b8>)
 8000a84:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a86:	1d3a      	adds	r2, r7, #4
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_ADC1_Init+0x194>)
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 ff87 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000a96:	f000 fa59 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	200000a0 	.word	0x200000a0
 8000aa8:	40012400 	.word	0x40012400
 8000aac:	04000002 	.word	0x04000002
 8000ab0:	08000004 	.word	0x08000004
 8000ab4:	0c000008 	.word	0x0c000008
 8000ab8:	10000010 	.word	0x10000010
 8000abc:	14000020 	.word	0x14000020
 8000ac0:	18000040 	.word	0x18000040
 8000ac4:	1c000080 	.word	0x1c000080
 8000ac8:	20000100 	.word	0x20000100

08000acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b44 <MX_I2C1_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020B;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <MX_I2C1_Init+0x7c>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f003 f869 	bl	8003be0 <HAL_I2C_Init>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b12:	f000 fa1b 	bl	8000f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f004 fc46 	bl	80053ac <HAL_I2CEx_ConfigAnalogFilter>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b24:	f000 fa12 	bl	8000f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f004 fc89 	bl	8005444 <HAL_I2CEx_ConfigDigitalFilter>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f000 fa09 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000160 	.word	0x20000160
 8000b44:	40005400 	.word	0x40005400
 8000b48:	0010020b 	.word	0x0010020b

08000b4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <MX_SPI1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b58:	2282      	movs	r2, #130	@ 0x82
 8000b5a:	0052      	lsls	r2, r2, #1
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b66:	22e0      	movs	r2, #224	@ 0xe0
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b7a:	2280      	movs	r2, #128	@ 0x80
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000b9a:	2207      	movs	r2, #7
 8000b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <MX_SPI1_Init+0x74>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f005 f95d 	bl	8005e6c <HAL_SPI_Init>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 f9c9 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001b4 	.word	0x200001b4
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b098      	sub	sp, #96	@ 0x60
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	2354      	movs	r3, #84	@ 0x54
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f007 fd85 	bl	80086e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	2338      	movs	r3, #56	@ 0x38
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	0018      	movs	r0, r3
 8000be4:	231c      	movs	r3, #28
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f007 fd7d 	bl	80086e8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	2334      	movs	r3, #52	@ 0x34
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f007 fd76 	bl	80086e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfc:	4b45      	ldr	r3, [pc, #276]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000bfe:	4a46      	ldr	r2, [pc, #280]	@ (8000d18 <MX_TIM1_Init+0x150>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000c02:	4b44      	ldr	r3, [pc, #272]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c04:	220b      	movs	r2, #11
 8000c06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b42      	ldr	r3, [pc, #264]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c10:	2263      	movs	r2, #99	@ 0x63
 8000c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c20:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c26:	4b3b      	ldr	r3, [pc, #236]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f005 fa2f 	bl	800608c <HAL_TIM_PWM_Init>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f98b 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2154      	movs	r1, #84	@ 0x54
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c4a:	187a      	adds	r2, r7, r1
 8000c4c:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f005 fe93 	bl	800697c <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c5a:	f000 f977 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2138      	movs	r1, #56	@ 0x38
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2260      	movs	r2, #96	@ 0x60
 8000c64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8a:	1879      	adds	r1, r7, r1
 8000c8c:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	0018      	movs	r0, r3
 8000c92:	f005 fa53 	bl	800613c <HAL_TIM_PWM_ConfigChannel>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c9a:	f000 f957 	bl	8000f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2280      	movs	r2, #128	@ 0x80
 8000cc0:	0192      	lsls	r2, r2, #6
 8000cc2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2280      	movs	r2, #128	@ 0x80
 8000cda:	0492      	lsls	r2, r2, #18
 8000cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f005 fea8 	bl	8006a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000d00:	f000 f924 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <MX_TIM1_Init+0x14c>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 ffde 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b018      	add	sp, #96	@ 0x60
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000218 	.word	0x20000218
 8000d18:	40012c00 	.word	0x40012c00

08000d1c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_TIM14_Init+0x40>)
 8000d22:	4a0f      	ldr	r2, [pc, #60]	@ (8000d60 <MX_TIM14_Init+0x44>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <MX_TIM14_Init+0x40>)
 8000d28:	220b      	movs	r2, #11
 8000d2a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <MX_TIM14_Init+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <MX_TIM14_Init+0x40>)
 8000d34:	4a0b      	ldr	r2, [pc, #44]	@ (8000d64 <MX_TIM14_Init+0x48>)
 8000d36:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <MX_TIM14_Init+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <MX_TIM14_Init+0x40>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <MX_TIM14_Init+0x40>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f005 f948 	bl	8005fdc <HAL_TIM_Base_Init>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000d50:	f000 f8fc 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	20000264 	.word	0x20000264
 8000d60:	40002000 	.word	0x40002000
 8000d64:	0000ffff 	.word	0x0000ffff

08000d68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d6e:	4a25      	ldr	r2, [pc, #148]	@ (8000e04 <MX_USART1_UART_Init+0x9c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d72:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d74:	2296      	movs	r2, #150	@ 0x96
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000db0:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000db2:	2300      	movs	r3, #0
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	f007 fa8a 	bl	80082d0 <HAL_RS485Ex_Init>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 f8c4 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f007 fb45 	bl	8008458 <HAL_UARTEx_SetTxFifoThreshold>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 f8bb 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f007 fb7c 	bl	80084d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000de4:	f000 f8b2 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <MX_USART1_UART_Init+0x98>)
 8000dea:	0018      	movs	r0, r3
 8000dec:	f007 fafa 	bl	80083e4 <HAL_UARTEx_DisableFifoMode>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 f8aa 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	200002b0 	.word	0x200002b0
 8000e04:	40013800 	.word	0x40013800

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <MX_DMA_Init+0x48>)
 8000e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_DMA_Init+0x48>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	430a      	orrs	r2, r1
 8000e18:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <MX_DMA_Init+0x48>)
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4013      	ands	r3, r2
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2009      	movs	r0, #9
 8000e2c:	f002 f9da 	bl	80031e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e30:	2009      	movs	r0, #9
 8000e32:	f002 f9ec 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200a      	movs	r0, #10
 8000e3c:	f002 f9d2 	bl	80031e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e40:	200a      	movs	r0, #10
 8000e42:	f002 f9e4 	bl	800320e <HAL_NVIC_EnableIRQ>

}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	40021000 	.word	0x40021000

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b08b      	sub	sp, #44	@ 0x2c
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	2414      	movs	r4, #20
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	0018      	movs	r0, r3
 8000e60:	2314      	movs	r3, #20
 8000e62:	001a      	movs	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	f007 fc3f 	bl	80086e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e6e:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000e70:	2104      	movs	r1, #4
 8000e72:	430a      	orrs	r2, r1
 8000e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e86:	4b2e      	ldr	r3, [pc, #184]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000e88:	2120      	movs	r1, #32
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e92:	2220      	movs	r2, #32
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e9e:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eb6:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000eb8:	2102      	movs	r1, #2
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_GPIO_Init+0xec>)
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eda:	2208      	movs	r2, #8
 8000edc:	4013      	ands	r3, r2
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin, GPIO_PIN_RESET);
 8000ee2:	23e0      	movs	r3, #224	@ 0xe0
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4817      	ldr	r0, [pc, #92]	@ (8000f44 <MX_GPIO_Init+0xf0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	0019      	movs	r1, r3
 8000eec:	f002 fe5a 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <MX_GPIO_Init+0xf4>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f002 fcd9 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_C_EN_Pin Actuator_B_EN_Pin Actuator_A_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin;
 8000f0e:	0021      	movs	r1, r4
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	22e0      	movs	r2, #224	@ 0xe0
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <MX_GPIO_Init+0xf0>)
 8000f2e:	0019      	movs	r1, r3
 8000f30:	0010      	movs	r0, r2
 8000f32:	f002 fcc5 	bl	80038c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b00b      	add	sp, #44	@ 0x2c
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	40021000 	.word	0x40021000
 8000f44:	50000400 	.word	0x50000400
 8000f48:	50000c00 	.word	0x50000c00

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	000a      	movs	r2, r1
 8000f62:	1cbb      	adds	r3, r7, #2
 8000f64:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a45      	ldr	r2, [pc, #276]	@ (8001080 <HAL_UARTEx_RxEventCallback+0x128>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d000      	beq.n	8000f72 <HAL_UARTEx_RxEventCallback+0x1a>
 8000f70:	e081      	b.n	8001076 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8000f72:	4b44      	ldr	r3, [pc, #272]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b43      	ldr	r3, [pc, #268]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x130>)
 8000f7a:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f7c:	4b42      	ldr	r3, [pc, #264]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x130>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	001a      	movs	r2, r3
 8000f84:	1cbb      	adds	r3, r7, #2
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	18d2      	adds	r2, r2, r3
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dd29      	ble.n	8000fe6 <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x130>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	240e      	movs	r4, #14
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0049      	lsls	r1, r1, #1
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000fa4:	4b38      	ldr	r3, [pc, #224]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x130>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	001a      	movs	r2, r3
 8000fac:	4b37      	ldr	r3, [pc, #220]	@ (800108c <HAL_UARTEx_RxEventCallback+0x134>)
 8000fae:	18d0      	adds	r0, r2, r3
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	4b36      	ldr	r3, [pc, #216]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x138>)
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	f007 fbc2 	bl	8008740 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000fbc:	1cba      	adds	r2, r7, #2
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000fca:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x138>)
 8000fd2:	18d1      	adds	r1, r2, r3
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	001a      	movs	r2, r3
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <HAL_UARTEx_RxEventCallback+0x134>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f007 fbae 	bl	8008740 <memcpy>
 8000fe4:	e014      	b.n	8001010 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8000fe6:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x130>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	001a      	movs	r2, r3
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_UARTEx_RxEventCallback+0x134>)
 8000ff0:	18d0      	adds	r0, r2, r3
 8000ff2:	1cbb      	adds	r3, r7, #2
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x138>)
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	f007 fba1 	bl	8008740 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x130>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	b29a      	uxth	r2, r3
 8001004:	1cbb      	adds	r3, r7, #2
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x12c>)
 800100e:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d027      	beq.n	800106a <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 800101a:	f001 f873 	bl	8002104 <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <HAL_UARTEx_RxEventCallback+0x140>)
 8001022:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x130>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b1c      	ldr	r3, [pc, #112]	@ (800109c <HAL_UARTEx_RxEventCallback+0x144>)
 800102c:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001030:	2200      	movs	r2, #0
 8001032:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x138>)
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x138>)
 800103c:	7952      	ldrb	r2, [r2, #5]
 800103e:	4313      	orrs	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	18db      	adds	r3, r3, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	4910      	ldr	r1, [pc, #64]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x138>)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0x148>)
 8001052:	0018      	movs	r0, r3
 8001054:	f007 fa82 	bl	800855c <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0x14c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2104      	movs	r1, #4
 8001064:	438a      	bics	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 8001068:	e005      	b.n	8001076 <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x13c>)
 800106c:	2201      	movs	r2, #1
 800106e:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0x150>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b005      	add	sp, #20
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	40013800 	.word	0x40013800
 8001084:	20000708 	.word	0x20000708
 8001088:	20000706 	.word	0x20000706
 800108c:	20000404 	.word	0x20000404
 8001090:	20000604 	.word	0x20000604
 8001094:	20000072 	.word	0x20000072
 8001098:	20000700 	.word	0x20000700
 800109c:	20000704 	.word	0x20000704
 80010a0:	200002b0 	.word	0x200002b0
 80010a4:	20000344 	.word	0x20000344
 80010a8:	2000070a 	.word	0x2000070a

080010ac <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <handle_chunk_miss+0x5c>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d120      	bne.n	80010fe <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 80010bc:	f001 f822 	bl	8002104 <HAL_GetTick>
 80010c0:	0002      	movs	r2, r0
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <handle_chunk_miss+0x60>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d918      	bls.n	80010fe <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <handle_chunk_miss+0x5c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <handle_chunk_miss+0x64>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f005 fdf9 	bl	8006ccc <HAL_UART_Abort_IT>
 80010da:	0003      	movs	r3, r0
 80010dc:	001a      	movs	r2, r3
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 80010ec:	1dfc      	adds	r4, r7, #7
 80010ee:	f000 fb3d 	bl	800176c <modbus_set_rx>
 80010f2:	0003      	movs	r3, r0
 80010f4:	7023      	strb	r3, [r4, #0]
			}
			return status;
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	e000      	b.n	8001100 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b003      	add	sp, #12
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	20000072 	.word	0x20000072
 800110c:	20000700 	.word	0x20000700
 8001110:	200002b0 	.word	0x200002b0

08001114 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2bff      	cmp	r3, #255	@ 0xff
 8001126:	d023      	beq.n	8001170 <get_rx_buffer+0x5c>
	{
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <get_rx_buffer+0x68>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	001a      	movs	r2, r3
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	2bff      	cmp	r3, #255	@ 0xff
 8001138:	dd0b      	ble.n	8001152 <get_rx_buffer+0x3e>
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <get_rx_buffer+0x68>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	001a      	movs	r2, r3
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	18d3      	adds	r3, r2, r3
 8001148:	3b01      	subs	r3, #1
 800114a:	3bff      	subs	r3, #255	@ 0xff
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <get_rx_buffer+0x6c>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	e008      	b.n	8001164 <get_rx_buffer+0x50>
				modbus_rx_buffer[start_index + index];
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <get_rx_buffer+0x68>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	001a      	movs	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	18d3      	adds	r3, r2, r3
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8001160:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <get_rx_buffer+0x6c>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	210f      	movs	r1, #15
 8001166:	187a      	adds	r2, r7, r1
 8001168:	7013      	strb	r3, [r2, #0]
		return value;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	e000      	b.n	8001172 <get_rx_buffer+0x5e>
	}
	return 0xFF;
 8001170:	23ff      	movs	r3, #255	@ 0xff
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000704 	.word	0x20000704
 8001180:	20000404 	.word	0x20000404

08001184 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff ffc2 	bl	8001114 <get_rx_buffer>
 8001190:	0003      	movs	r3, r0
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21c      	sxth	r4, r3
 8001196:	2003      	movs	r0, #3
 8001198:	f7ff ffbc 	bl	8001114 <get_rx_buffer>
 800119c:	0003      	movs	r3, r0
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4323      	orrs	r3, r4
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	230a      	movs	r3, #10
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff ffb2 	bl	8001114 <get_rx_buffer>
 80011b0:	0003      	movs	r3, r0
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21c      	sxth	r4, r3
 80011b6:	2005      	movs	r0, #5
 80011b8:	f7ff ffac 	bl	8001114 <get_rx_buffer>
 80011bc:	0003      	movs	r3, r0
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4323      	orrs	r3, r4
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	2108      	movs	r1, #8
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80011ca:	000a      	movs	r2, r1
 80011cc:	18bb      	adds	r3, r7, r2
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	2b7d      	cmp	r3, #125	@ 0x7d
 80011d2:	d803      	bhi.n	80011dc <return_holding_registers+0x58>
 80011d4:	18bb      	adds	r3, r7, r2
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d104      	bne.n	80011e6 <return_holding_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80011dc:	2006      	movs	r0, #6
 80011de:	f000 f9e1 	bl	80015a4 <modbus_exception>
 80011e2:	0003      	movs	r3, r0
 80011e4:	e0e1      	b.n	80013aa <return_holding_registers+0x226>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80011e6:	2308      	movs	r3, #8
 80011e8:	18fa      	adds	r2, r7, r3
 80011ea:	230a      	movs	r3, #10
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	1dbb      	adds	r3, r7, #6
 80011f8:	3a01      	subs	r2, #1
 80011fa:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	2b31      	cmp	r3, #49	@ 0x31
 8001202:	d904      	bls.n	800120e <return_holding_registers+0x8a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001204:	2005      	movs	r0, #5
 8001206:	f000 f9cd 	bl	80015a4 <modbus_exception>
 800120a:	0003      	movs	r3, r0
 800120c:	e0cd      	b.n	80013aa <return_holding_registers+0x226>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ff80 	bl	8001114 <get_rx_buffer>
 8001214:	0003      	movs	r3, r0
 8001216:	001a      	movs	r2, r3
 8001218:	4b66      	ldr	r3, [pc, #408]	@ (80013b4 <return_holding_registers+0x230>)
 800121a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ff79 	bl	8001114 <get_rx_buffer>
 8001222:	0003      	movs	r3, r0
 8001224:	001a      	movs	r2, r3
 8001226:	4b63      	ldr	r3, [pc, #396]	@ (80013b4 <return_holding_registers+0x230>)
 8001228:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 800122a:	2308      	movs	r3, #8
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	18db      	adds	r3, r3, r3
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b5f      	ldr	r3, [pc, #380]	@ (80013b4 <return_holding_registers+0x230>)
 8001238:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 800123a:	230f      	movs	r3, #15
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2203      	movs	r2, #3
 8001240:	701a      	strb	r2, [r3, #0]

	if(((first_register_address >= 3) && (first_register_address <= 11)) ||
 8001242:	220a      	movs	r2, #10
 8001244:	18bb      	adds	r3, r7, r2
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d903      	bls.n	8001254 <return_holding_registers+0xd0>
 800124c:	18bb      	adds	r3, r7, r2
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	2b0b      	cmp	r3, #11
 8001252:	d907      	bls.n	8001264 <return_holding_registers+0xe0>
 8001254:	1dbb      	adds	r3, r7, #6
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d90e      	bls.n	800127a <return_holding_registers+0xf6>
		((last_register_address >= 3) && (last_register_address <= 11)))
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	2b0b      	cmp	r3, #11
 8001262:	d80a      	bhi.n	800127a <return_holding_registers+0xf6>
	{
		// disable the ADC DMA Stream
		if(HAL_DMA_Abort(&hdma_adc1) != HAL_OK)
 8001264:	4b54      	ldr	r3, [pc, #336]	@ (80013b8 <return_holding_registers+0x234>)
 8001266:	0018      	movs	r0, r3
 8001268:	f002 f900 	bl	800346c <HAL_DMA_Abort>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d004      	beq.n	800127a <return_holding_registers+0xf6>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 8001270:	2007      	movs	r0, #7
 8001272:	f000 f997 	bl	80015a4 <modbus_exception>
 8001276:	0003      	movs	r3, r0
 8001278:	e097      	b.n	80013aa <return_holding_registers+0x226>
		}
	}
	uint8_t prim = 0;
 800127a:	230e      	movs	r3, #14
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	if(((first_register_address >= 12) && (first_register_address <= 33)) ||
 8001282:	220a      	movs	r2, #10
 8001284:	18bb      	adds	r3, r7, r2
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	2b0b      	cmp	r3, #11
 800128a:	d903      	bls.n	8001294 <return_holding_registers+0x110>
 800128c:	18bb      	adds	r3, r7, r2
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	2b21      	cmp	r3, #33	@ 0x21
 8001292:	d907      	bls.n	80012a4 <return_holding_registers+0x120>
 8001294:	1dbb      	adds	r3, r7, #6
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	2b0b      	cmp	r3, #11
 800129a:	d90c      	bls.n	80012b6 <return_holding_registers+0x132>
		((last_register_address >= 12) && (last_register_address <= 33)))
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	2b21      	cmp	r3, #33	@ 0x21
 80012a2:	d808      	bhi.n	80012b6 <return_holding_registers+0x132>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80012a4:	f3ef 8310 	mrs	r3, PRIMASK
 80012a8:	603b      	str	r3, [r7, #0]
  return(result);
 80012aa:	683a      	ldr	r2, [r7, #0]
	{
		// disable I2C interrupts
		prim = __get_PRIMASK();
 80012ac:	230e      	movs	r3, #14
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012b2:	b672      	cpsid	i
}
 80012b4:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 80012b6:	230d      	movs	r3, #13
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	e02b      	b.n	8001318 <return_holding_registers+0x194>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 80012c0:	260a      	movs	r6, #10
 80012c2:	19bb      	adds	r3, r7, r6
 80012c4:	881a      	ldrh	r2, [r3, #0]
 80012c6:	240d      	movs	r4, #13
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	18d2      	adds	r2, r2, r3
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <return_holding_registers+0x238>)
 80012d0:	0052      	lsls	r2, r2, #1
 80012d2:	5ad3      	ldrh	r3, [r2, r3]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b299      	uxth	r1, r3
 80012d8:	250f      	movs	r5, #15
 80012da:	197b      	adds	r3, r7, r5
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	197a      	adds	r2, r7, r5
 80012e0:	1c58      	adds	r0, r3, #1
 80012e2:	7010      	strb	r0, [r2, #0]
 80012e4:	001a      	movs	r2, r3
 80012e6:	b2c9      	uxtb	r1, r1
 80012e8:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <return_holding_registers+0x230>)
 80012ea:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 80012ec:	19bb      	adds	r3, r7, r6
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	18d2      	adds	r2, r2, r3
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <return_holding_registers+0x238>)
 80012f8:	0052      	lsls	r2, r2, #1
 80012fa:	5ad1      	ldrh	r1, [r2, r3]
 80012fc:	197b      	adds	r3, r7, r5
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	197a      	adds	r2, r7, r5
 8001302:	1c58      	adds	r0, r3, #1
 8001304:	7010      	strb	r0, [r2, #0]
 8001306:	001a      	movs	r2, r3
 8001308:	b2c9      	uxtb	r1, r1
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <return_holding_registers+0x230>)
 800130c:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 800130e:	193b      	adds	r3, r7, r4
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	193b      	adds	r3, r7, r4
 8001314:	3201      	adds	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	230d      	movs	r3, #13
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	2208      	movs	r2, #8
 8001322:	18ba      	adds	r2, r7, r2
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d8ca      	bhi.n	80012c0 <return_holding_registers+0x13c>
	}

	if(((first_register_address >= 3) && (first_register_address <= 11)) ||
 800132a:	220a      	movs	r2, #10
 800132c:	18bb      	adds	r3, r7, r2
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d903      	bls.n	800133c <return_holding_registers+0x1b8>
 8001334:	18bb      	adds	r3, r7, r2
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	2b0b      	cmp	r3, #11
 800133a:	d907      	bls.n	800134c <return_holding_registers+0x1c8>
 800133c:	1dbb      	adds	r3, r7, #6
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d911      	bls.n	8001368 <return_holding_registers+0x1e4>
		((last_register_address >= 3) && (last_register_address <= 11)))
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	2b0b      	cmp	r3, #11
 800134a:	d80d      	bhi.n	8001368 <return_holding_registers+0x1e4>
	{
		// enable the ADC DMA Stream
		if(HAL_ADC_Start_DMA(&hadc1, adc_buffer, 9) != HAL_OK)
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <return_holding_registers+0x23c>)
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <return_holding_registers+0x240>)
 8001352:	2209      	movs	r2, #9
 8001354:	0018      	movs	r0, r3
 8001356:	f001 fa13 	bl	8002780 <HAL_ADC_Start_DMA>
 800135a:	1e03      	subs	r3, r0, #0
 800135c:	d004      	beq.n	8001368 <return_holding_registers+0x1e4>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 f920 	bl	80015a4 <modbus_exception>
 8001364:	0003      	movs	r3, r0
 8001366:	e020      	b.n	80013aa <return_holding_registers+0x226>
		}
	}
	if(((first_register_address >= 12) && (first_register_address <= 33)) ||
 8001368:	220a      	movs	r2, #10
 800136a:	18bb      	adds	r3, r7, r2
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2b0b      	cmp	r3, #11
 8001370:	d903      	bls.n	800137a <return_holding_registers+0x1f6>
 8001372:	18bb      	adds	r3, r7, r2
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b21      	cmp	r3, #33	@ 0x21
 8001378:	d907      	bls.n	800138a <return_holding_registers+0x206>
 800137a:	1dbb      	adds	r3, r7, #6
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	2b0b      	cmp	r3, #11
 8001380:	d90a      	bls.n	8001398 <return_holding_registers+0x214>
		((last_register_address >= 12) && (last_register_address <= 33)))
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	2b21      	cmp	r3, #33	@ 0x21
 8001388:	d806      	bhi.n	8001398 <return_holding_registers+0x214>
	{
		// enable I2C interrupts
		if(prim == 0)
 800138a:	230e      	movs	r3, #14
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <return_holding_registers+0x214>
  __ASM volatile ("cpsie i" : : : "memory");
 8001394:	b662      	cpsie	i
}
 8001396:	46c0      	nop			@ (mov r8, r8)
		{
			__enable_irq();
		}
	}

	return modbus_send(modbus_tx_buffer, index);
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <return_holding_registers+0x230>)
 80013a0:	0011      	movs	r1, r2
 80013a2:	0018      	movs	r0, r3
 80013a4:	f000 f994 	bl	80016d0 <modbus_send>
 80013a8:	0003      	movs	r3, r0
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b005      	add	sp, #20
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	20000504 	.word	0x20000504
 80013b8:	20000104 	.word	0x20000104
 80013bc:	20000010 	.word	0x20000010
 80013c0:	200003e0 	.word	0x200003e0
 80013c4:	200000a0 	.word	0x200000a0

080013c8 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80013ce:	2002      	movs	r0, #2
 80013d0:	f7ff fea0 	bl	8001114 <get_rx_buffer>
 80013d4:	0003      	movs	r3, r0
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21c      	sxth	r4, r3
 80013da:	2003      	movs	r0, #3
 80013dc:	f7ff fe9a 	bl	8001114 <get_rx_buffer>
 80013e0:	0003      	movs	r3, r0
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4323      	orrs	r3, r4
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	230c      	movs	r3, #12
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80013ee:	2004      	movs	r0, #4
 80013f0:	f7ff fe90 	bl	8001114 <get_rx_buffer>
 80013f4:	0003      	movs	r3, r0
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21c      	sxth	r4, r3
 80013fa:	2005      	movs	r0, #5
 80013fc:	f7ff fe8a 	bl	8001114 <get_rx_buffer>
 8001400:	0003      	movs	r3, r0
 8001402:	b21b      	sxth	r3, r3
 8001404:	4323      	orrs	r3, r4
 8001406:	b21a      	sxth	r2, r3
 8001408:	210a      	movs	r1, #10
 800140a:	187b      	adds	r3, r7, r1
 800140c:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 800140e:	000a      	movs	r2, r1
 8001410:	18bb      	adds	r3, r7, r2
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	2b7d      	cmp	r3, #125	@ 0x7d
 8001416:	d803      	bhi.n	8001420 <edit_multiple_registers+0x58>
 8001418:	18bb      	adds	r3, r7, r2
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d104      	bne.n	800142a <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001420:	2006      	movs	r0, #6
 8001422:	f000 f8bf 	bl	80015a4 <modbus_exception>
 8001426:	0003      	movs	r3, r0
 8001428:	e0b4      	b.n	8001594 <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800142a:	230a      	movs	r3, #10
 800142c:	18fa      	adds	r2, r7, r3
 800142e:	230c      	movs	r3, #12
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	18d3      	adds	r3, r2, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	2108      	movs	r1, #8
 800143c:	187b      	adds	r3, r7, r1
 800143e:	3a01      	subs	r2, #1
 8001440:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001442:	187b      	adds	r3, r7, r1
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	2b31      	cmp	r3, #49	@ 0x31
 8001448:	d904      	bls.n	8001454 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800144a:	2005      	movs	r0, #5
 800144c:	f000 f8aa 	bl	80015a4 <modbus_exception>
 8001450:	0003      	movs	r3, r0
 8001452:	e09f      	b.n	8001594 <edit_multiple_registers+0x1cc>
	}

	if((first_register_address >= 3) && (last_register_address <= 33))
 8001454:	230c      	movs	r3, #12
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d909      	bls.n	8001472 <edit_multiple_registers+0xaa>
 800145e:	2308      	movs	r3, #8
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	2b21      	cmp	r3, #33	@ 0x21
 8001466:	d804      	bhi.n	8001472 <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8001468:	2004      	movs	r0, #4
 800146a:	f000 f89b 	bl	80015a4 <modbus_exception>
 800146e:	0003      	movs	r3, r0
 8001470:	e090      	b.n	8001594 <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fe4e 	bl	8001114 <get_rx_buffer>
 8001478:	0003      	movs	r3, r0
 800147a:	001a      	movs	r2, r3
 800147c:	4b47      	ldr	r3, [pc, #284]	@ (800159c <edit_multiple_registers+0x1d4>)
 800147e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fe47 	bl	8001114 <get_rx_buffer>
 8001486:	0003      	movs	r3, r0
 8001488:	001a      	movs	r2, r3
 800148a:	4b44      	ldr	r3, [pc, #272]	@ (800159c <edit_multiple_registers+0x1d4>)
 800148c:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fe40 	bl	8001114 <get_rx_buffer>
 8001494:	0003      	movs	r3, r0
 8001496:	001a      	movs	r2, r3
 8001498:	4b40      	ldr	r3, [pc, #256]	@ (800159c <edit_multiple_registers+0x1d4>)
 800149a:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff fe39 	bl	8001114 <get_rx_buffer>
 80014a2:	0003      	movs	r3, r0
 80014a4:	001a      	movs	r2, r3
 80014a6:	4b3d      	ldr	r3, [pc, #244]	@ (800159c <edit_multiple_registers+0x1d4>)
 80014a8:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff fe32 	bl	8001114 <get_rx_buffer>
 80014b0:	0003      	movs	r3, r0
 80014b2:	001a      	movs	r2, r3
 80014b4:	4b39      	ldr	r3, [pc, #228]	@ (800159c <edit_multiple_registers+0x1d4>)
 80014b6:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff fe2b 	bl	8001114 <get_rx_buffer>
 80014be:	0003      	movs	r3, r0
 80014c0:	001a      	movs	r2, r3
 80014c2:	4b36      	ldr	r3, [pc, #216]	@ (800159c <edit_multiple_registers+0x1d4>)
 80014c4:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	2206      	movs	r2, #6
 80014ca:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 80014cc:	230f      	movs	r3, #15
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	e032      	b.n	800153c <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 80014d6:	250f      	movs	r5, #15
 80014d8:	197b      	adds	r3, r7, r5
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	18db      	adds	r3, r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3307      	adds	r3, #7
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff fe15 	bl	8001114 <get_rx_buffer>
 80014ea:	0003      	movs	r3, r0
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21c      	sxth	r4, r3
 80014f0:	197b      	adds	r3, r7, r5
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3304      	adds	r3, #4
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	18db      	adds	r3, r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff fe09 	bl	8001114 <get_rx_buffer>
 8001502:	0003      	movs	r3, r0
 8001504:	b21b      	sxth	r3, r3
 8001506:	4323      	orrs	r3, r4
 8001508:	b219      	sxth	r1, r3
 800150a:	200c      	movs	r0, #12
 800150c:	183b      	adds	r3, r7, r0
 800150e:	881a      	ldrh	r2, [r3, #0]
 8001510:	197b      	adds	r3, r7, r5
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	18d2      	adds	r2, r2, r3
 8001516:	b289      	uxth	r1, r1
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <edit_multiple_registers+0x1d8>)
 800151a:	0052      	lsls	r2, r2, #1
 800151c:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 800151e:	197b      	adds	r3, r7, r5
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b29a      	uxth	r2, r3
 8001524:	183b      	adds	r3, r7, r0
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	18d3      	adds	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	0018      	movs	r0, r3
 800152e:	f000 f863 	bl	80015f8 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8001532:	197b      	adds	r3, r7, r5
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	197b      	adds	r3, r7, r5
 8001538:	3201      	adds	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	230f      	movs	r3, #15
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	220a      	movs	r2, #10
 8001546:	18ba      	adds	r2, r7, r2
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d8c3      	bhi.n	80014d6 <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f000 fde2 	bl	8002118 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8001554:	1dbc      	adds	r4, r7, #6
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <edit_multiple_registers+0x1d4>)
 800155c:	0011      	movs	r1, r2
 800155e:	0018      	movs	r0, r3
 8001560:	f000 f8b6 	bl	80016d0 <modbus_send>
 8001564:	0003      	movs	r3, r0
 8001566:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8001572:	230c      	movs	r3, #12
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d808      	bhi.n	800158e <edit_multiple_registers+0x1c6>
 800157c:	2308      	movs	r3, #8
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 8001586:	f000 f913 	bl	80017b0 <modbus_change_baud_rate>
 800158a:	0003      	movs	r3, r0
 800158c:	e002      	b.n	8001594 <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b25b      	sxtb	r3, r3
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bdb0      	pop	{r4, r5, r7, pc}
 800159c:	20000504 	.word	0x20000504
 80015a0:	20000010 	.word	0x20000010

080015a4 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	0002      	movs	r2, r0
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fdaf 	bl	8001114 <get_rx_buffer>
 80015b6:	0003      	movs	r3, r0
 80015b8:	001a      	movs	r2, r3
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <modbus_exception+0x50>)
 80015bc:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fda8 	bl	8001114 <get_rx_buffer>
 80015c4:	0003      	movs	r3, r0
 80015c6:	001a      	movs	r2, r3
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	425b      	negs	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <modbus_exception+0x50>)
 80015d2:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3b03      	subs	r3, #3
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <modbus_exception+0x50>)
 80015de:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <modbus_exception+0x50>)
 80015e2:	2103      	movs	r1, #3
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 f873 	bl	80016d0 <modbus_send>
 80015ea:	0003      	movs	r3, r0
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000504 	.word	0x20000504

080015f8 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	0002      	movs	r2, r0
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8001604:	1dbb      	adds	r3, r7, #6
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	2b24      	cmp	r3, #36	@ 0x24
 800160a:	dd00      	ble.n	800160e <handle_range+0x16>
 800160c:	e058      	b.n	80016c0 <handle_range+0xc8>
 800160e:	2b22      	cmp	r3, #34	@ 0x22
 8001610:	da3f      	bge.n	8001692 <handle_range+0x9a>
 8001612:	2b02      	cmp	r3, #2
 8001614:	d02f      	beq.n	8001676 <handle_range+0x7e>
 8001616:	dc53      	bgt.n	80016c0 <handle_range+0xc8>
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <handle_range+0x2a>
 800161c:	2b01      	cmp	r3, #1
 800161e:	d00e      	beq.n	800163e <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 8001620:	e04e      	b.n	80016c0 <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 8001622:	1dbb      	adds	r3, r7, #6
 8001624:	881a      	ldrh	r2, [r3, #0]
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <handle_range+0xd0>)
 8001628:	0052      	lsls	r2, r2, #1
 800162a:	5ad3      	ldrh	r3, [r2, r3]
 800162c:	2bff      	cmp	r3, #255	@ 0xff
 800162e:	d940      	bls.n	80016b2 <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 8001630:	1dbb      	adds	r3, r7, #6
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <handle_range+0xd0>)
 8001636:	0052      	lsls	r2, r2, #1
 8001638:	21ff      	movs	r1, #255	@ 0xff
 800163a:	52d1      	strh	r1, [r2, r3]
			break;
 800163c:	e039      	b.n	80016b2 <handle_range+0xba>
			if(holding_register_database[holding_register] < 2)
 800163e:	1dbb      	adds	r3, r7, #6
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <handle_range+0xd0>)
 8001644:	0052      	lsls	r2, r2, #1
 8001646:	5ad3      	ldrh	r3, [r2, r3]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d806      	bhi.n	800165a <handle_range+0x62>
				holding_register_database[holding_register] = 2;
 800164c:	1dbb      	adds	r3, r7, #6
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <handle_range+0xd0>)
 8001652:	0052      	lsls	r2, r2, #1
 8001654:	2102      	movs	r1, #2
 8001656:	52d1      	strh	r1, [r2, r3]
			break;
 8001658:	e02d      	b.n	80016b6 <handle_range+0xbe>
			else if(holding_register_database[holding_register] > 9)
 800165a:	1dbb      	adds	r3, r7, #6
 800165c:	881a      	ldrh	r2, [r3, #0]
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <handle_range+0xd0>)
 8001660:	0052      	lsls	r2, r2, #1
 8001662:	5ad3      	ldrh	r3, [r2, r3]
 8001664:	2b09      	cmp	r3, #9
 8001666:	d926      	bls.n	80016b6 <handle_range+0xbe>
				holding_register_database[holding_register] = 9;
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <handle_range+0xd0>)
 800166e:	0052      	lsls	r2, r2, #1
 8001670:	2109      	movs	r1, #9
 8001672:	52d1      	strh	r1, [r2, r3]
			break;
 8001674:	e01f      	b.n	80016b6 <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	881a      	ldrh	r2, [r3, #0]
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <handle_range+0xd0>)
 800167c:	0052      	lsls	r2, r2, #1
 800167e:	5ad3      	ldrh	r3, [r2, r3]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d91a      	bls.n	80016ba <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 8001684:	1dbb      	adds	r3, r7, #6
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <handle_range+0xd0>)
 800168a:	0052      	lsls	r2, r2, #1
 800168c:	2101      	movs	r1, #1
 800168e:	52d1      	strh	r1, [r2, r3]
			break;
 8001690:	e013      	b.n	80016ba <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 8001692:	1dbb      	adds	r3, r7, #6
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <handle_range+0xd0>)
 8001698:	0052      	lsls	r2, r2, #1
 800169a:	5ad2      	ldrh	r2, [r2, r3]
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	015b      	lsls	r3, r3, #5
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d30c      	bcc.n	80016be <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 80016a4:	1dbb      	adds	r3, r7, #6
 80016a6:	881a      	ldrh	r2, [r3, #0]
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <handle_range+0xd0>)
 80016aa:	0052      	lsls	r2, r2, #1
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <handle_range+0xd4>)
 80016ae:	52d1      	strh	r1, [r2, r3]
			break;
 80016b0:	e005      	b.n	80016be <handle_range+0xc6>
			break;
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	e004      	b.n	80016c0 <handle_range+0xc8>
			break;
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	e002      	b.n	80016c0 <handle_range+0xc8>
			break;
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	e000      	b.n	80016c0 <handle_range+0xc8>
			break;
 80016be:	46c0      	nop			@ (mov r8, r8)
}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000010 	.word	0x20000010
 80016cc:	00000fff 	.word	0x00000fff

080016d0 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	000a      	movs	r2, r1
 80016da:	1cfb      	adds	r3, r7, #3
 80016dc:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 80016de:	250e      	movs	r5, #14
 80016e0:	197c      	adds	r4, r7, r5
 80016e2:	1cfb      	adds	r3, r7, #3
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <modbus_send+0x68>)
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 f8c6 	bl	800187c <crc_16>
 80016f0:	0003      	movs	r3, r0
 80016f2:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80016f4:	1cfb      	adds	r3, r7, #3
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	197a      	adds	r2, r7, r5
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	b2d1      	uxtb	r1, r2
 80016fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001738 <modbus_send+0x68>)
 8001700:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8001702:	197b      	adds	r3, r7, r5
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29a      	uxth	r2, r3
 800170a:	1cfb      	adds	r3, r7, #3
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	b2d1      	uxtb	r1, r2
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <modbus_send+0x68>)
 8001714:	54d1      	strb	r1, [r2, r3]

	return HAL_UART_Transmit(&huart1, modbus_tx_buffer, size + 2, 100);
 8001716:	1cfb      	adds	r3, r7, #3
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3302      	adds	r3, #2
 800171e:	b29a      	uxth	r2, r3
 8001720:	4905      	ldr	r1, [pc, #20]	@ (8001738 <modbus_send+0x68>)
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <modbus_send+0x6c>)
 8001724:	2364      	movs	r3, #100	@ 0x64
 8001726:	f005 fa2d 	bl	8006b84 <HAL_UART_Transmit>
 800172a:	0003      	movs	r3, r0
 800172c:	b25b      	sxtb	r3, r3
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b004      	add	sp, #16
 8001734:	bdb0      	pop	{r4, r5, r7, pc}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	20000504 	.word	0x20000504
 800173c:	200002b0 	.word	0x200002b0

08001740 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	if(rx_int)
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <modbus_rx+0x28>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <modbus_rx+0x18>
	{
		rx_int = 0;
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <modbus_rx+0x28>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
		return 1;
 8001754:	2301      	movs	r3, #1
 8001756:	e004      	b.n	8001762 <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8001758:	f7ff fca8 	bl	80010ac <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 800175c:	4b02      	ldr	r3, [pc, #8]	@ (8001768 <modbus_rx+0x28>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000070a 	.word	0x2000070a

0800176c <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8001772:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <modbus_set_rx+0x38>)
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <modbus_set_rx+0x3c>)
 8001776:	2206      	movs	r2, #6
 8001778:	0018      	movs	r0, r3
 800177a:	f006 feef 	bl	800855c <HAL_UARTEx_ReceiveToIdle_DMA>
 800177e:	0003      	movs	r3, r0
 8001780:	001a      	movs	r2, r3
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <modbus_set_rx+0x40>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <modbus_set_rx+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2104      	movs	r1, #4
 8001792:	438a      	bics	r2, r1
 8001794:	601a      	str	r2, [r3, #0]

	return status;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b25b      	sxtb	r3, r3
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000604 	.word	0x20000604
 80017a8:	200002b0 	.word	0x200002b0
 80017ac:	20000344 	.word	0x20000344

080017b0 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 80017bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <modbus_change_baud_rate+0xc0>)
 80017be:	885b      	ldrh	r3, [r3, #2]
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	d82c      	bhi.n	800181e <modbus_change_baud_rate+0x6e>
 80017c4:	009a      	lsls	r2, r3, #2
 80017c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <modbus_change_baud_rate+0xc4>)
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 80017d0:	2296      	movs	r2, #150	@ 0x96
 80017d2:	0152      	lsls	r2, r2, #5
 80017d4:	605a      	str	r2, [r3, #4]
			break;
 80017d6:	e033      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80017d8:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 80017da:	2296      	movs	r2, #150	@ 0x96
 80017dc:	0192      	lsls	r2, r2, #6
 80017de:	605a      	str	r2, [r3, #4]
			break;
 80017e0:	e02e      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80017e2:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 80017e4:	2296      	movs	r2, #150	@ 0x96
 80017e6:	01d2      	lsls	r2, r2, #7
 80017e8:	605a      	str	r2, [r3, #4]
			break;
 80017ea:	e029      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 80017ee:	2296      	movs	r2, #150	@ 0x96
 80017f0:	0212      	lsls	r2, r2, #8
 80017f2:	605a      	str	r2, [r3, #4]
			break;
 80017f4:	e024      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 80017f8:	22e1      	movs	r2, #225	@ 0xe1
 80017fa:	0212      	lsls	r2, r2, #8
 80017fc:	605a      	str	r2, [r3, #4]
			break;
 80017fe:	e01f      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 8001802:	22e1      	movs	r2, #225	@ 0xe1
 8001804:	0252      	lsls	r2, r2, #9
 8001806:	605a      	str	r2, [r3, #4]
			break;
 8001808:	e01a      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 800180a:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 800180c:	22fa      	movs	r2, #250	@ 0xfa
 800180e:	0252      	lsls	r2, r2, #9
 8001810:	605a      	str	r2, [r3, #4]
			break;
 8001812:	e015      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 8001816:	22fa      	movs	r2, #250	@ 0xfa
 8001818:	0292      	lsls	r2, r2, #10
 800181a:	605a      	str	r2, [r3, #4]
			break;
 800181c:	e010      	b.n	8001840 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <modbus_change_baud_rate+0xc0>)
 8001820:	2203      	movs	r2, #3
 8001822:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 8001826:	2296      	movs	r2, #150	@ 0x96
 8001828:	0192      	lsls	r2, r2, #6
 800182a:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 800182e:	0018      	movs	r0, r3
 8001830:	f005 feee 	bl	8007610 <UART_SetConfig>
 8001834:	0003      	movs	r3, r0
 8001836:	001a      	movs	r2, r3
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 800183c:	2306      	movs	r3, #6
 800183e:	e013      	b.n	8001868 <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <modbus_change_baud_rate+0xc8>)
 8001842:	0018      	movs	r0, r3
 8001844:	f005 fee4 	bl	8007610 <UART_SetConfig>
 8001848:	0003      	movs	r3, r0
 800184a:	001a      	movs	r2, r3
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <modbus_change_baud_rate+0xb2>
	{
		return status;
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b25b      	sxtb	r3, r3
 8001860:	e002      	b.n	8001868 <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b25b      	sxtb	r3, r3
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000010 	.word	0x20000010
 8001874:	0800896c 	.word	0x0800896c
 8001878:	200002b0 	.word	0x200002b0

0800187c <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	000a      	movs	r2, r1
 8001886:	1cfb      	adds	r3, r7, #3
 8001888:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 800188a:	230f      	movs	r3, #15
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8001892:	230e      	movs	r3, #14
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	22ff      	movs	r2, #255	@ 0xff
 8001898:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 800189a:	e019      	b.n	80018d0 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	200e      	movs	r0, #14
 80018a6:	183b      	adds	r3, r7, r0
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4053      	eors	r3, r2
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 80018b0:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <crc_16+0x84>)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	18d3      	adds	r3, r2, r3
 80018b6:	7819      	ldrb	r1, [r3, #0]
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	200f      	movs	r0, #15
 80018bc:	183a      	adds	r2, r7, r0
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	404a      	eors	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 80018c4:	183b      	adds	r3, r7, r0
 80018c6:	490f      	ldr	r1, [pc, #60]	@ (8001904 <crc_16+0x88>)
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	188a      	adds	r2, r1, r2
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	701a      	strb	r2, [r3, #0]
	while (size--)
 80018d0:	1cfb      	adds	r3, r7, #3
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	1cfa      	adds	r2, r7, #3
 80018d6:	1e59      	subs	r1, r3, #1
 80018d8:	7011      	strb	r1, [r2, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1de      	bne.n	800189c <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80018de:	230f      	movs	r3, #15
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	230e      	movs	r3, #14
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	b29b      	uxth	r3, r3
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	0800876c 	.word	0x0800876c
 8001904:	0800886c 	.word	0x0800886c

08001908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_MspInit+0x44>)
 8001910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_MspInit+0x44>)
 8001914:	2101      	movs	r1, #1
 8001916:	430a      	orrs	r2, r1
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <HAL_MspInit+0x44>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	2201      	movs	r2, #1
 8001920:	4013      	ands	r3, r2
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_MspInit+0x44>)
 8001928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <HAL_MspInit+0x44>)
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	0549      	lsls	r1, r1, #21
 8001930:	430a      	orrs	r2, r1
 8001932:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_MspInit+0x44>)
 8001936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	055b      	lsls	r3, r3, #21
 800193c:	4013      	ands	r3, r2
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	b002      	add	sp, #8
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b093      	sub	sp, #76	@ 0x4c
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	2334      	movs	r3, #52	@ 0x34
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	0018      	movs	r0, r3
 800195e:	2314      	movs	r3, #20
 8001960:	001a      	movs	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	f006 fec0 	bl	80086e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001968:	2414      	movs	r4, #20
 800196a:	193b      	adds	r3, r7, r4
 800196c:	0018      	movs	r0, r3
 800196e:	2320      	movs	r3, #32
 8001970:	001a      	movs	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	f006 feb8 	bl	80086e8 <memset>
  if(hadc->Instance==ADC1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a35      	ldr	r2, [pc, #212]	@ (8001a54 <HAL_ADC_MspInit+0x104>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d164      	bne.n	8001a4c <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001982:	193b      	adds	r3, r7, r4
 8001984:	2220      	movs	r2, #32
 8001986:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSIKER;
 8001988:	193b      	adds	r3, r7, r4
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	0612      	lsls	r2, r2, #24
 800198e:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	193b      	adds	r3, r7, r4
 8001992:	0018      	movs	r0, r3
 8001994:	f004 f96e 	bl	8005c74 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d001      	beq.n	80019a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800199c:	f7ff fad6 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <HAL_ADC_MspInit+0x108>)
 80019a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <HAL_ADC_MspInit+0x108>)
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	0349      	lsls	r1, r1, #13
 80019aa:	430a      	orrs	r2, r1
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <HAL_ADC_MspInit+0x108>)
 80019b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	035b      	lsls	r3, r3, #13
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b26      	ldr	r3, [pc, #152]	@ (8001a58 <HAL_ADC_MspInit+0x108>)
 80019be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <HAL_ADC_MspInit+0x108>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	430a      	orrs	r2, r1
 80019c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c8:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <HAL_ADC_MspInit+0x108>)
 80019ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019d4:	2134      	movs	r1, #52	@ 0x34
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <HAL_ADC_MspInit+0x10c>)
 80019da:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2203      	movs	r2, #3
 80019e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	187a      	adds	r2, r7, r1
 80019ea:	23a0      	movs	r3, #160	@ 0xa0
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f001 ff65 	bl	80038c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 80019f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a64 <HAL_ADC_MspInit+0x114>)
 80019fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019fc:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 80019fe:	2205      	movs	r2, #5
 8001a00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a10:	2280      	movs	r2, #128	@ 0x80
 8001a12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	0052      	lsls	r2, r2, #1
 8001a1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a1e:	2280      	movs	r2, #128	@ 0x80
 8001a20:	00d2      	lsls	r2, r2, #3
 8001a22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 fc08 	bl	8003248 <HAL_DMA_Init>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001a3c:	f7ff fa86 	bl	8000f4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a07      	ldr	r2, [pc, #28]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a44:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_ADC_MspInit+0x110>)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b013      	add	sp, #76	@ 0x4c
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	40012400 	.word	0x40012400
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	000001ff 	.word	0x000001ff
 8001a60:	20000104 	.word	0x20000104
 8001a64:	4002001c 	.word	0x4002001c

08001a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b093      	sub	sp, #76	@ 0x4c
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	2334      	movs	r3, #52	@ 0x34
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	0018      	movs	r0, r3
 8001a76:	2314      	movs	r3, #20
 8001a78:	001a      	movs	r2, r3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f006 fe34 	bl	80086e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a80:	2414      	movs	r4, #20
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	0018      	movs	r0, r3
 8001a86:	2320      	movs	r3, #32
 8001a88:	001a      	movs	r2, r3
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	f006 fe2c 	bl	80086e8 <memset>
  if(hi2c->Instance==I2C1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <HAL_I2C_MspInit+0xcc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d147      	bne.n	8001b2a <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f004 f8e3 	bl	8005c74 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ab2:	f7ff fa4b 	bl	8000f4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_I2C_MspInit+0xd0>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aba:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <HAL_I2C_MspInit+0xd0>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_I2C_MspInit+0xd0>)
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ace:	2134      	movs	r1, #52	@ 0x34
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	22c0      	movs	r2, #192	@ 0xc0
 8001ad4:	00d2      	lsls	r2, r2, #3
 8001ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2212      	movs	r2, #18
 8001adc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2206      	movs	r2, #6
 8001aee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	187a      	adds	r2, r7, r1
 8001af2:	23a0      	movs	r3, #160	@ 0xa0
 8001af4:	05db      	lsls	r3, r3, #23
 8001af6:	0011      	movs	r1, r2
 8001af8:	0018      	movs	r0, r3
 8001afa:	f001 fee1 	bl	80038c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_I2C_MspInit+0xd0>)
 8001b00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_I2C_MspInit+0xd0>)
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	0389      	lsls	r1, r1, #14
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_I2C_MspInit+0xd0>)
 8001b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2103      	movs	r1, #3
 8001b1e:	2017      	movs	r0, #23
 8001b20:	f001 fb60 	bl	80031e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001b24:	2017      	movs	r0, #23
 8001b26:	f001 fb72 	bl	800320e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b013      	add	sp, #76	@ 0x4c
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	40005400 	.word	0x40005400
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b093      	sub	sp, #76	@ 0x4c
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	2334      	movs	r3, #52	@ 0x34
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	0018      	movs	r0, r3
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f006 fdca 	bl	80086e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b54:	2414      	movs	r4, #20
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	0018      	movs	r0, r3
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f006 fdc2 	bl	80086e8 <memset>
  if(hspi->Instance==SPI1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a34      	ldr	r2, [pc, #208]	@ (8001c3c <HAL_SPI_MspInit+0x100>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d162      	bne.n	8001c34 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2204      	movs	r2, #4
 8001b72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f004 f879 	bl	8005c74 <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	1e03      	subs	r3, r0, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001b86:	f7ff f9e1 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	0149      	lsls	r1, r1, #5
 8001b94:	430a      	orrs	r2, r1
 8001b96:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b98:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	015b      	lsls	r3, r3, #5
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001baa:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bb2:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_SPI_MspInit+0x104>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bd6:	2134      	movs	r1, #52	@ 0x34
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	000c      	movs	r4, r1
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2202      	movs	r2, #2
 8001be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	193a      	adds	r2, r7, r4
 8001bfc:	23a0      	movs	r3, #160	@ 0xa0
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f001 fe5c 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001c08:	0021      	movs	r1, r4
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2228      	movs	r2, #40	@ 0x28
 8001c0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2202      	movs	r2, #2
 8001c14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <HAL_SPI_MspInit+0x108>)
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	0010      	movs	r0, r2
 8001c30:	f001 fe46 	bl	80038c0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c34:	46c0      	nop			@ (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b013      	add	sp, #76	@ 0x4c
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	40013000 	.word	0x40013000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	50000400 	.word	0x50000400

08001c48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <HAL_TIM_PWM_MspInit+0x38>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10d      	bne.n	8001c76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	0109      	lsls	r1, r1, #4
 8001c64:	430a      	orrs	r2, r1
 8001c66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b004      	add	sp, #16
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	40012c00 	.word	0x40012c00
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_TIM_Base_MspInit+0x38>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10d      	bne.n	8001cb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca0:	2180      	movs	r1, #128	@ 0x80
 8001ca2:	0209      	lsls	r1, r1, #8
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001caa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	40002000 	.word	0x40002000
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	240c      	movs	r4, #12
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	2314      	movs	r3, #20
 8001cd8:	001a      	movs	r2, r3
 8001cda:	2100      	movs	r1, #0
 8001cdc:	f006 fd04 	bl	80086e8 <memset>
  if(htim->Instance==TIM1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a15      	ldr	r2, [pc, #84]	@ (8001d3c <HAL_TIM_MspPostInit+0x74>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d123      	bne.n	8001d32 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_TIM_MspPostInit+0x78>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_TIM_MspPostInit+0x78>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_TIM_MspPostInit+0x78>)
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	2280      	movs	r2, #128	@ 0x80
 8001d06:	0212      	lsls	r2, r2, #8
 8001d08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	0021      	movs	r1, r4
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2202      	movs	r2, #2
 8001d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	2202      	movs	r2, #2
 8001d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d24:	187a      	adds	r2, r7, r1
 8001d26:	23a0      	movs	r3, #160	@ 0xa0
 8001d28:	05db      	lsls	r3, r3, #23
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f001 fdc7 	bl	80038c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b009      	add	sp, #36	@ 0x24
 8001d38:	bd90      	pop	{r4, r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b095      	sub	sp, #84	@ 0x54
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	233c      	movs	r3, #60	@ 0x3c
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	0018      	movs	r0, r3
 8001d52:	2314      	movs	r3, #20
 8001d54:	001a      	movs	r2, r3
 8001d56:	2100      	movs	r1, #0
 8001d58:	f006 fcc6 	bl	80086e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d5c:	241c      	movs	r4, #28
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	0018      	movs	r0, r3
 8001d62:	2320      	movs	r3, #32
 8001d64:	001a      	movs	r2, r3
 8001d66:	2100      	movs	r1, #0
 8001d68:	f006 fcbe 	bl	80086e8 <memset>
  if(huart->Instance==USART1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef0 <HAL_UART_MspInit+0x1ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d000      	beq.n	8001d78 <HAL_UART_MspInit+0x34>
 8001d76:	e0b7      	b.n	8001ee8 <HAL_UART_MspInit+0x1a4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d84:	193b      	adds	r3, r7, r4
 8001d86:	0018      	movs	r0, r3
 8001d88:	f003 ff74 	bl	8005c74 <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001d90:	f7ff f8dc 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d94:	4b57      	ldr	r3, [pc, #348]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d98:	4b56      	ldr	r3, [pc, #344]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001d9a:	2180      	movs	r1, #128	@ 0x80
 8001d9c:	01c9      	lsls	r1, r1, #7
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001da2:	4b54      	ldr	r3, [pc, #336]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	01db      	lsls	r3, r3, #7
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db0:	4b50      	ldr	r3, [pc, #320]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001db6:	2104      	movs	r1, #4
 8001db8:	430a      	orrs	r2, r1
 8001dba:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dcc:	4b49      	ldr	r3, [pc, #292]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dce:	2102      	movs	r1, #2
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd4:	4b47      	ldr	r3, [pc, #284]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd8:	2202      	movs	r2, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b44      	ldr	r3, [pc, #272]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001de4:	4b43      	ldr	r3, [pc, #268]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dec:	4b41      	ldr	r3, [pc, #260]	@ (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001df8:	213c      	movs	r1, #60	@ 0x3c
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	01d2      	lsls	r2, r2, #7
 8001e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	000c      	movs	r4, r1
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	2202      	movs	r2, #2
 8001e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	193b      	adds	r3, r7, r4
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <HAL_UART_MspInit+0x1b4>)
 8001e20:	0019      	movs	r1, r3
 8001e22:	0010      	movs	r0, r2
 8001e24:	f001 fd4c 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e28:	193b      	adds	r3, r7, r4
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	2202      	movs	r2, #2
 8001e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	193b      	adds	r3, r7, r4
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001e40:	193b      	adds	r3, r7, r4
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	193b      	adds	r3, r7, r4
 8001e48:	4a2c      	ldr	r2, [pc, #176]	@ (8001efc <HAL_UART_MspInit+0x1b8>)
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	0010      	movs	r0, r2
 8001e4e:	f001 fd37 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e52:	0021      	movs	r1, r4
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2280      	movs	r2, #128	@ 0x80
 8001e58:	0152      	lsls	r2, r2, #5
 8001e5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2202      	movs	r2, #2
 8001e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2201      	movs	r2, #1
 8001e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	187a      	adds	r2, r7, r1
 8001e76:	23a0      	movs	r3, #160	@ 0xa0
 8001e78:	05db      	lsls	r3, r3, #23
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f001 fd1f 	bl	80038c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e84:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <HAL_UART_MspInit+0x1c0>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e8a:	2232      	movs	r2, #50	@ 0x32
 8001e8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001eb4:	22c0      	movs	r2, #192	@ 0xc0
 8001eb6:	0192      	lsls	r2, r2, #6
 8001eb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f001 f9c3 	bl	8003248 <HAL_DMA_Init>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8001ec6:	f7ff f841 	bl	8000f4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	4a0c      	ldr	r2, [pc, #48]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ed0:	505a      	str	r2, [r3, r1]
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	201b      	movs	r0, #27
 8001ede:	f001 f981 	bl	80031e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ee2:	201b      	movs	r0, #27
 8001ee4:	f001 f993 	bl	800320e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b015      	add	sp, #84	@ 0x54
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	50000800 	.word	0x50000800
 8001efc:	50000400 	.word	0x50000400
 8001f00:	20000344 	.word	0x20000344
 8001f04:	40020008 	.word	0x40020008

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	e7fd      	b.n	8001f0c <NMI_Handler+0x4>

08001f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	e7fd      	b.n	8001f14 <HardFault_Handler+0x4>

08001f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f8d6 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <DMA1_Channel1_IRQHandler+0x14>)
 8001f42:	0018      	movs	r0, r3
 8001f44:	f001 fb6e 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f48:	46c0      	nop			@ (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	20000344 	.word	0x20000344

08001f54 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f001 fb62 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	20000104 	.word	0x20000104

08001f6c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <I2C1_IRQHandler+0x2c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	23e0      	movs	r3, #224	@ 0xe0
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <I2C1_IRQHandler+0x2c>)
 8001f80:	0018      	movs	r0, r3
 8001f82:	f002 f91f 	bl	80041c4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001f86:	e003      	b.n	8001f90 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <I2C1_IRQHandler+0x2c>)
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f002 f900 	bl	8004190 <HAL_I2C_EV_IRQHandler>
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	20000160 	.word	0x20000160

08001f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <USART1_IRQHandler+0x14>)
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f004 ffc6 	bl	8006f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	200002b0 	.word	0x200002b0

08001fb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <SystemInit+0x14>)
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	0512      	lsls	r2, r2, #20
 8001fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fcc:	480d      	ldr	r0, [pc, #52]	@ (8002004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd0:	f7ff fff0 	bl	8001fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fd6:	e003      	b.n	8001fe0 <LoopCopyDataInit>

08001fd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001fda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fde:	3104      	adds	r1, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fe0:	480a      	ldr	r0, [pc, #40]	@ (800200c <LoopForever+0xa>)
  ldr r3, =_edata
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <LoopForever+0xe>)
  adds r2, r0, r1
 8001fe4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fe6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fe8:	d3f6      	bcc.n	8001fd8 <CopyDataInit>
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <LoopForever+0x12>)
  b LoopFillZerobss
 8001fec:	e002      	b.n	8001ff4 <LoopFillZerobss>

08001fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  str  r3, [r2]
 8001ff0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff2:	3204      	adds	r2, #4

08001ff4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001ff4:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <LoopForever+0x16>)
  cmp r2, r3
 8001ff6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ff8:	d3f9      	bcc.n	8001fee <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001ffa:	f006 fb7d 	bl	80086f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7fe fb4f 	bl	80006a0 <main>

08002002 <LoopForever>:

LoopForever:
    b LoopForever
 8002002:	e7fe      	b.n	8002002 <LoopForever>
  ldr   r0, =_estack
 8002004:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8002008:	08008a78 	.word	0x08008a78
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002010:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8002014:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8002018:	20000710 	.word	0x20000710

0800201c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC1_IRQHandler>

0800201e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202a:	2003      	movs	r0, #3
 800202c:	f000 f80e 	bl	800204c <HAL_InitTick>
 8002030:	1e03      	subs	r3, r0, #0
 8002032:	d003      	beq.n	800203c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e001      	b.n	8002040 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800203c:	f7ff fc64 	bl	8001908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <HAL_InitTick+0x88>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d02b      	beq.n	80020bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002064:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <HAL_InitTick+0x8c>)
 8002066:	681c      	ldr	r4, [r3, #0]
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_InitTick+0x88>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	0019      	movs	r1, r3
 800206e:	23fa      	movs	r3, #250	@ 0xfa
 8002070:	0098      	lsls	r0, r3, #2
 8002072:	f7fe f849 	bl	8000108 <__udivsi3>
 8002076:	0003      	movs	r3, r0
 8002078:	0019      	movs	r1, r3
 800207a:	0020      	movs	r0, r4
 800207c:	f7fe f844 	bl	8000108 <__udivsi3>
 8002080:	0003      	movs	r3, r0
 8002082:	0018      	movs	r0, r3
 8002084:	f001 f8d3 	bl	800322e <HAL_SYSTICK_Config>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d112      	bne.n	80020b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d80a      	bhi.n	80020a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	2301      	movs	r3, #1
 8002096:	425b      	negs	r3, r3
 8002098:	2200      	movs	r2, #0
 800209a:	0018      	movs	r0, r3
 800209c:	f001 f8a2 	bl	80031e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_InitTick+0x90>)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e00d      	b.n	80020c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e008      	b.n	80020c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b2:	230f      	movs	r3, #15
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e003      	b.n	80020c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020bc:	230f      	movs	r3, #15
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b005      	add	sp, #20
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	2000007c 	.word	0x2000007c
 80020d8:	20000074 	.word	0x20000074
 80020dc:	20000078 	.word	0x20000078

080020e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_IncTick+0x1c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	001a      	movs	r2, r3
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_IncTick+0x20>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	18d2      	adds	r2, r2, r3
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_IncTick+0x20>)
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	2000007c 	.word	0x2000007c
 8002100:	2000070c 	.word	0x2000070c

08002104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  return uwTick;
 8002108:	4b02      	ldr	r3, [pc, #8]	@ (8002114 <HAL_GetTick+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	2000070c 	.word	0x2000070c

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff fff0 	bl	8002104 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	001a      	movs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	189b      	adds	r3, r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	f7ff ffe0 	bl	8002104 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	46c0      	nop			@ (mov r8, r8)
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	2000007c 	.word	0x2000007c

08002160 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002170:	401a      	ands	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	ff3fffff 	.word	0xff3fffff

08002188 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	23c0      	movs	r3, #192	@ 0xc0
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	4013      	ands	r3, r2
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	2104      	movs	r1, #4
 80021b6:	400a      	ands	r2, r1
 80021b8:	2107      	movs	r1, #7
 80021ba:	4091      	lsls	r1, r2
 80021bc:	000a      	movs	r2, r1
 80021be:	43d2      	mvns	r2, r2
 80021c0:	401a      	ands	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2104      	movs	r1, #4
 80021c6:	400b      	ands	r3, r1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4099      	lsls	r1, r3
 80021cc:	000b      	movs	r3, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80021d4:	46c0      	nop			@ (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}

080021dc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	2104      	movs	r1, #4
 80021ee:	400a      	ands	r2, r1
 80021f0:	2107      	movs	r1, #7
 80021f2:	4091      	lsls	r1, r2
 80021f4:	000a      	movs	r2, r1
 80021f6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2104      	movs	r1, #4
 80021fc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80021fe:	40da      	lsrs	r2, r3
 8002200:	0013      	movs	r3, r2
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}

0800220a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4013      	ands	r3, r2
 800221c:	d101      	bne.n	8002222 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002222:	2300      	movs	r3, #0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	211f      	movs	r1, #31
 8002240:	400a      	ands	r2, r1
 8002242:	210f      	movs	r1, #15
 8002244:	4091      	lsls	r1, r2
 8002246:	000a      	movs	r2, r1
 8002248:	43d2      	mvns	r2, r2
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	210f      	movs	r1, #15
 8002252:	4019      	ands	r1, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	201f      	movs	r0, #31
 8002258:	4003      	ands	r3, r0
 800225a:	4099      	lsls	r1, r3
 800225c:	000b      	movs	r3, r1
 800225e:	431a      	orrs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002264:	46c0      	nop			@ (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}

0800226c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}

0800228e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	0252      	lsls	r2, r2, #9
 80022a0:	0a52      	lsrs	r2, r2, #9
 80022a2:	43d2      	mvns	r2, r2
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	0212      	lsls	r2, r2, #8
 80022c8:	43d2      	mvns	r2, r2
 80022ca:	401a      	ands	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	400b      	ands	r3, r1
 80022d4:	4904      	ldr	r1, [pc, #16]	@ (80022e8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	7fffff00 	.word	0x7fffff00

080022ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <LL_ADC_EnableInternalRegulator+0x24>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	0552      	lsls	r2, r2, #21
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b002      	add	sp, #8
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	6fffffe8 	.word	0x6fffffe8

08002314 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	401a      	ands	r2, r3
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	055b      	lsls	r3, r3, #21
 800232a:	429a      	cmp	r2, r3
 800232c:	d101      	bne.n	8002332 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <LL_ADC_Enable+0x20>)
 800234a:	4013      	ands	r3, r2
 800234c:	2201      	movs	r2, #1
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}
 800235c:	7fffffe8 	.word	0x7fffffe8

08002360 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a04      	ldr	r2, [pc, #16]	@ (8002380 <LL_ADC_Disable+0x20>)
 800236e:	4013      	ands	r3, r2
 8002370:	2202      	movs	r2, #2
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}
 8002380:	7fffffe8 	.word	0x7fffffe8

08002384 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <LL_ADC_IsEnabled+0x18>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <LL_ADC_IsEnabled+0x1a>
 800239c:	2300      	movs	r3, #0
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d101      	bne.n	80023be <LL_ADC_IsDisableOngoing+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_IsDisableOngoing+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <LL_ADC_REG_StartConversion+0x20>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	2204      	movs	r2, #4
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	7fffffe8 	.word	0x7fffffe8

080023ec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a04      	ldr	r2, [pc, #16]	@ (800240c <LL_ADC_REG_StopConversion+0x20>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	2210      	movs	r2, #16
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}
 800240c:	7fffffe8 	.word	0x7fffffe8

08002410 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2204      	movs	r2, #4
 800241e:	4013      	ands	r3, r2
 8002420:	2b04      	cmp	r3, #4
 8002422:	d101      	bne.n	8002428 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002428:	2300      	movs	r3, #0
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243c:	231f      	movs	r3, #31
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e17e      	b.n	8002758 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff fa73 	bl	8001950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2254      	movs	r2, #84	@ 0x54
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff ff49 	bl	8002314 <LL_ADC_IsInternalRegulatorEnabled>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d114      	bne.n	80024b0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0018      	movs	r0, r3
 800248c:	f7ff ff2e 	bl	80022ec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002490:	4bb3      	ldr	r3, [pc, #716]	@ (8002760 <HAL_ADC_Init+0x32c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	49b3      	ldr	r1, [pc, #716]	@ (8002764 <HAL_ADC_Init+0x330>)
 8002496:	0018      	movs	r0, r3
 8002498:	f7fd fe36 	bl	8000108 <__udivsi3>
 800249c:	0003      	movs	r3, r0
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024a2:	e002      	b.n	80024aa <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f9      	bne.n	80024a4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ff2d 	bl	8002314 <LL_ADC_IsInternalRegulatorEnabled>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d10f      	bne.n	80024de <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	2210      	movs	r2, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2201      	movs	r2, #1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024d6:	231f      	movs	r3, #31
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7ff ff94 	bl	8002410 <LL_ADC_REG_IsConversionOngoing>
 80024e8:	0003      	movs	r3, r0
 80024ea:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	2210      	movs	r2, #16
 80024f2:	4013      	ands	r3, r2
 80024f4:	d000      	beq.n	80024f8 <HAL_ADC_Init+0xc4>
 80024f6:	e122      	b.n	800273e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d000      	beq.n	8002500 <HAL_ADC_Init+0xcc>
 80024fe:	e11e      	b.n	800273e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	4a98      	ldr	r2, [pc, #608]	@ (8002768 <HAL_ADC_Init+0x334>)
 8002506:	4013      	ands	r3, r2
 8002508:	2202      	movs	r2, #2
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff ff35 	bl	8002384 <LL_ADC_IsEnabled>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d000      	beq.n	8002520 <HAL_ADC_Init+0xec>
 800251e:	e0ad      	b.n	800267c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e1b      	ldrb	r3, [r3, #24]
 8002528:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800252a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7e5b      	ldrb	r3, [r3, #25]
 8002530:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002532:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e9b      	ldrb	r3, [r3, #26]
 8002538:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800253a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_ADC_Init+0x116>
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	015b      	lsls	r3, r3, #5
 8002548:	e000      	b.n	800254c <HAL_ADC_Init+0x118>
 800254a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800254c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002552:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	da04      	bge.n	8002566 <HAL_ADC_Init+0x132>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	e001      	b.n	800256a <HAL_ADC_Init+0x136>
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800256a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	212c      	movs	r1, #44	@ 0x2c
 8002570:	5c5b      	ldrb	r3, [r3, r1]
 8002572:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002574:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	5c9b      	ldrb	r3, [r3, r2]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d115      	bne.n	80025b2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e9b      	ldrb	r3, [r3, #26]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	0252      	lsls	r2, r2, #9
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e00b      	b.n	80025b2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	2220      	movs	r2, #32
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025aa:	2201      	movs	r2, #1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025be:	23e0      	movs	r3, #224	@ 0xe0
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025c8:	4313      	orrs	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	4a65      	ldr	r2, [pc, #404]	@ (800276c <HAL_ADC_Init+0x338>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0f9b      	lsrs	r3, r3, #30
 80025ec:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025f2:	4313      	orrs	r3, r2
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223c      	movs	r2, #60	@ 0x3c
 80025fe:	5c9b      	ldrb	r3, [r3, r2]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d111      	bne.n	8002628 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0f9b      	lsrs	r3, r3, #30
 800260a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002610:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002616:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800261c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	2201      	movs	r2, #1
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	4a50      	ldr	r2, [pc, #320]	@ (8002770 <HAL_ADC_Init+0x33c>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	430a      	orrs	r2, r1
 800263c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	23c0      	movs	r3, #192	@ 0xc0
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	429a      	cmp	r2, r3
 8002648:	d018      	beq.n	800267c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	05db      	lsls	r3, r3, #23
 8002652:	429a      	cmp	r2, r3
 8002654:	d012      	beq.n	800267c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	429a      	cmp	r2, r3
 8002660:	d00c      	beq.n	800267c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002662:	4b44      	ldr	r3, [pc, #272]	@ (8002774 <HAL_ADC_Init+0x340>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a44      	ldr	r2, [pc, #272]	@ (8002778 <HAL_ADC_Init+0x344>)
 8002668:	4013      	ands	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	23f0      	movs	r3, #240	@ 0xf0
 8002672:	039b      	lsls	r3, r3, #14
 8002674:	401a      	ands	r2, r3
 8002676:	4b3f      	ldr	r3, [pc, #252]	@ (8002774 <HAL_ADC_Init+0x340>)
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002684:	001a      	movs	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	f7ff fd8b 	bl	80021a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002694:	4939      	ldr	r1, [pc, #228]	@ (800277c <HAL_ADC_Init+0x348>)
 8002696:	001a      	movs	r2, r3
 8002698:	f7ff fd83 	bl	80021a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2110      	movs	r1, #16
 80026b0:	4249      	negs	r1, r1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80026b6:	e018      	b.n	80026ea <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	039b      	lsls	r3, r3, #14
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d112      	bne.n	80026ea <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	221c      	movs	r2, #28
 80026d4:	4013      	ands	r3, r2
 80026d6:	2210      	movs	r2, #16
 80026d8:	4252      	negs	r2, r2
 80026da:	409a      	lsls	r2, r3
 80026dc:	0011      	movs	r1, r2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2100      	movs	r1, #0
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff fd73 	bl	80021dc <LL_ADC_GetSamplingTimeCommonChannels>
 80026f6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d10b      	bne.n	8002718 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	2203      	movs	r2, #3
 800270c:	4393      	bics	r3, r2
 800270e:	2201      	movs	r2, #1
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002716:	e01c      	b.n	8002752 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	2212      	movs	r2, #18
 800271e:	4393      	bics	r3, r2
 8002720:	2210      	movs	r2, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	2201      	movs	r2, #1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002734:	231f      	movs	r3, #31
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800273c:	e009      	b.n	8002752 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	2210      	movs	r2, #16
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800274a:	231f      	movs	r3, #31
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002752:	231f      	movs	r3, #31
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b008      	add	sp, #32
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000074 	.word	0x20000074
 8002764:	00030d40 	.word	0x00030d40
 8002768:	fffffefd 	.word	0xfffffefd
 800276c:	ffde0201 	.word	0xffde0201
 8002770:	1ffffc02 	.word	0x1ffffc02
 8002774:	40012708 	.word	0x40012708
 8002778:	ffc3ffff 	.word	0xffc3ffff
 800277c:	7fffff04 	.word	0x7fffff04

08002780 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff fe3d 	bl	8002410 <LL_ADC_REG_IsConversionOngoing>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d16c      	bne.n	8002874 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2254      	movs	r2, #84	@ 0x54
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_Start_DMA+0x28>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e06c      	b.n	8002882 <HAL_ADC_Start_DMA+0x102>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2254      	movs	r2, #84	@ 0x54
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d113      	bne.n	80027e4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7ff fddf 	bl	8002384 <LL_ADC_IsEnabled>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d004      	beq.n	80027d4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7ff fdc6 	bl	8002360 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	430a      	orrs	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027e4:	2517      	movs	r5, #23
 80027e6:	197c      	adds	r4, r7, r5
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 faea 	bl	8002dc4 <ADC_Enable>
 80027f0:	0003      	movs	r3, r0
 80027f2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027f4:	002c      	movs	r4, r5
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d13e      	bne.n	800287c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	4a22      	ldr	r2, [pc, #136]	@ (800288c <HAL_ADC_Start_DMA+0x10c>)
 8002804:	4013      	ands	r3, r2
 8002806:	2280      	movs	r2, #128	@ 0x80
 8002808:	0052      	lsls	r2, r2, #1
 800280a:	431a      	orrs	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281a:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <HAL_ADC_Start_DMA+0x110>)
 800281c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002822:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <HAL_ADC_Start_DMA+0x114>)
 8002824:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282a:	4a1b      	ldr	r2, [pc, #108]	@ (8002898 <HAL_ADC_Start_DMA+0x118>)
 800282c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	221c      	movs	r2, #28
 8002834:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2254      	movs	r2, #84	@ 0x54
 800283a:	2100      	movs	r1, #0
 800283c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2110      	movs	r1, #16
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3340      	adds	r3, #64	@ 0x40
 8002858:	0019      	movs	r1, r3
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	193c      	adds	r4, r7, r4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f000 fd7c 	bl	800335c <HAL_DMA_Start_IT>
 8002864:	0003      	movs	r3, r0
 8002866:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0018      	movs	r0, r3
 800286e:	f7ff fdab 	bl	80023c8 <LL_ADC_REG_StartConversion>
 8002872:	e003      	b.n	800287c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002874:	2317      	movs	r3, #23
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800287c:	2317      	movs	r3, #23
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	781b      	ldrb	r3, [r3, #0]
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b006      	add	sp, #24
 8002888:	bdb0      	pop	{r4, r5, r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	fffff0fe 	.word	0xfffff0fe
 8002890:	08002f71 	.word	0x08002f71
 8002894:	08003039 	.word	0x08003039
 8002898:	08003057 	.word	0x08003057

0800289c <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800289c:	b5b0      	push	{r4, r5, r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2254      	movs	r2, #84	@ 0x54
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_Stop_DMA+0x16>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e05f      	b.n	8002972 <HAL_ADC_Stop_DMA+0xd6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2254      	movs	r2, #84	@ 0x54
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80028ba:	250f      	movs	r5, #15
 80028bc:	197c      	adds	r4, r7, r5
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 fa43 	bl	8002d4c <ADC_ConversionStop>
 80028c6:	0003      	movs	r3, r0
 80028c8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028ca:	0029      	movs	r1, r5
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d147      	bne.n	8002964 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d8:	2225      	movs	r2, #37	@ 0x25
 80028da:	5c9b      	ldrb	r3, [r3, r2]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d112      	bne.n	8002908 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e6:	000d      	movs	r5, r1
 80028e8:	187c      	adds	r4, r7, r1
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 fdbe 	bl	800346c <HAL_DMA_Abort>
 80028f0:	0003      	movs	r3, r0
 80028f2:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80028f4:	197b      	adds	r3, r7, r5
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	2240      	movs	r2, #64	@ 0x40
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2110      	movs	r1, #16
 8002914:	438a      	bics	r2, r1
 8002916:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002918:	220f      	movs	r2, #15
 800291a:	18bb      	adds	r3, r7, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002922:	18bc      	adds	r4, r7, r2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 faca 	bl	8002ec0 <ADC_Disable>
 800292c:	0003      	movs	r3, r0
 800292e:	7023      	strb	r3, [r4, #0]
 8002930:	e003      	b.n	800293a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 fac3 	bl	8002ec0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800293a:	230f      	movs	r3, #15
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	4a0c      	ldr	r2, [pc, #48]	@ (800297c <HAL_ADC_Stop_DMA+0xe0>)
 800294a:	4013      	ands	r3, r2
 800294c:	2201      	movs	r2, #1
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	438a      	bics	r2, r1
 8002962:	60da      	str	r2, [r3, #12]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2254      	movs	r2, #84	@ 0x54
 8002968:	2100      	movs	r1, #0
 800296a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800296c:	230f      	movs	r3, #15
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	781b      	ldrb	r3, [r3, #0]
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bdb0      	pop	{r4, r5, r7, pc}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	fffffefe 	.word	0xfffffefe

08002980 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002988:	46c0      	nop			@ (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2317      	movs	r3, #23
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2254      	movs	r2, #84	@ 0x54
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x24>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e1be      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x3a2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2254      	movs	r2, #84	@ 0x54
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff fd1d 	bl	8002410 <LL_ADC_REG_IsConversionOngoing>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d000      	beq.n	80029dc <HAL_ADC_ConfigChannel+0x3c>
 80029da:	e1a1      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d100      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x46>
 80029e4:	e152      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d004      	beq.n	80029fc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80029f6:	4ac2      	ldr	r2, [pc, #776]	@ (8002d00 <HAL_ADC_ConfigChannel+0x360>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d108      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0019      	movs	r1, r3
 8002a06:	0010      	movs	r0, r2
 8002a08:	f7ff fc30 	bl	800226c <LL_ADC_REG_SetSequencerChAdd>
 8002a0c:	e0ed      	b.n	8002bea <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	211f      	movs	r1, #31
 8002a18:	400b      	ands	r3, r1
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	4099      	lsls	r1, r3
 8002a1e:	000b      	movs	r3, r1
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	025b      	lsls	r3, r3, #9
 8002a2c:	0a5b      	lsrs	r3, r3, #9
 8002a2e:	d105      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x9c>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	221f      	movs	r2, #31
 8002a38:	4013      	ands	r3, r2
 8002a3a:	e0bc      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	d000      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0xa8>
 8002a46:	e0b5      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x214>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d000      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0xb4>
 8002a52:	e0ad      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x210>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d000      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0xc0>
 8002a5e:	e0a5      	b.n	8002bac <HAL_ADC_ConfigChannel+0x20c>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2208      	movs	r2, #8
 8002a66:	4013      	ands	r3, r2
 8002a68:	d000      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0xcc>
 8002a6a:	e09d      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x208>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2210      	movs	r2, #16
 8002a72:	4013      	ands	r3, r2
 8002a74:	d000      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0xd8>
 8002a76:	e095      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x204>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d000      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0xe4>
 8002a82:	e08d      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x200>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2240      	movs	r2, #64	@ 0x40
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d000      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0xf0>
 8002a8e:	e085      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x1fc>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2280      	movs	r2, #128	@ 0x80
 8002a96:	4013      	ands	r3, r2
 8002a98:	d000      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0xfc>
 8002a9a:	e07d      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x1f8>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d000      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x10a>
 8002aa8:	e074      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x1f4>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d000      	beq.n	8002ab8 <HAL_ADC_ConfigChannel+0x118>
 8002ab6:	e06b      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x1f0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d000      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x126>
 8002ac4:	e062      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x1ec>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d000      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x134>
 8002ad2:	e059      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x1e8>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	015b      	lsls	r3, r3, #5
 8002adc:	4013      	ands	r3, r2
 8002ade:	d151      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x1e4>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	019b      	lsls	r3, r3, #6
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d149      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1e0>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	01db      	lsls	r3, r3, #7
 8002af4:	4013      	ands	r3, r2
 8002af6:	d141      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1dc>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	4013      	ands	r3, r2
 8002b02:	d139      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x1d8>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	025b      	lsls	r3, r3, #9
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d131      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d4>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d129      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1d0>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	02db      	lsls	r3, r3, #11
 8002b24:	4013      	ands	r3, r2
 8002b26:	d121      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x1cc>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	031b      	lsls	r3, r3, #12
 8002b30:	4013      	ands	r3, r2
 8002b32:	d119      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1c8>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	035b      	lsls	r3, r3, #13
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d111      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1c4>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	039b      	lsls	r3, r3, #14
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d109      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1c0>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	03db      	lsls	r3, r3, #15
 8002b54:	4013      	ands	r3, r2
 8002b56:	d001      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x1bc>
 8002b58:	2316      	movs	r3, #22
 8002b5a:	e02c      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e02a      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b60:	2315      	movs	r3, #21
 8002b62:	e028      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b64:	2314      	movs	r3, #20
 8002b66:	e026      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b68:	2313      	movs	r3, #19
 8002b6a:	e024      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b6c:	2312      	movs	r3, #18
 8002b6e:	e022      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b70:	2311      	movs	r3, #17
 8002b72:	e020      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b74:	2310      	movs	r3, #16
 8002b76:	e01e      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	e01c      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b7c:	230e      	movs	r3, #14
 8002b7e:	e01a      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b80:	230d      	movs	r3, #13
 8002b82:	e018      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b84:	230c      	movs	r3, #12
 8002b86:	e016      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b88:	230b      	movs	r3, #11
 8002b8a:	e014      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	e012      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b90:	2309      	movs	r3, #9
 8002b92:	e010      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b94:	2308      	movs	r3, #8
 8002b96:	e00e      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b98:	2307      	movs	r3, #7
 8002b9a:	e00c      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002b9c:	2306      	movs	r3, #6
 8002b9e:	e00a      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002ba0:	2305      	movs	r3, #5
 8002ba2:	e008      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	e006      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e004      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e002      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x216>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	6852      	ldr	r2, [r2, #4]
 8002bba:	201f      	movs	r0, #31
 8002bbc:	4002      	ands	r2, r0
 8002bbe:	4093      	lsls	r3, r2
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d808      	bhi.n	8002bea <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	001a      	movs	r2, r3
 8002be6:	f7ff fb21 	bl	800222c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	f7ff fb5c 	bl	80022b4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	db00      	blt.n	8002c06 <HAL_ADC_ConfigChannel+0x266>
 8002c04:	e096      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c06:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <HAL_ADC_ConfigChannel+0x364>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7ff fabd 	bl	8002188 <LL_ADC_GetCommonPathInternalCh>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a3c      	ldr	r2, [pc, #240]	@ (8002d08 <HAL_ADC_ConfigChannel+0x368>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d123      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c24:	d11e      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2280      	movs	r2, #128	@ 0x80
 8002c2a:	0412      	lsls	r2, r2, #16
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	4a35      	ldr	r2, [pc, #212]	@ (8002d04 <HAL_ADC_ConfigChannel+0x364>)
 8002c30:	0019      	movs	r1, r3
 8002c32:	0010      	movs	r0, r2
 8002c34:	f7ff fa94 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002c38:	4b34      	ldr	r3, [pc, #208]	@ (8002d0c <HAL_ADC_ConfigChannel+0x36c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4934      	ldr	r1, [pc, #208]	@ (8002d10 <HAL_ADC_ConfigChannel+0x370>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fd fa62 	bl	8000108 <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	001a      	movs	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c54:	e002      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f9      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c62:	e067      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2a      	ldr	r2, [pc, #168]	@ (8002d14 <HAL_ADC_ConfigChannel+0x374>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d162      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	03db      	lsls	r3, r3, #15
 8002c74:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c76:	d15d      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2280      	movs	r2, #128	@ 0x80
 8002c7c:	03d2      	lsls	r2, r2, #15
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	4a20      	ldr	r2, [pc, #128]	@ (8002d04 <HAL_ADC_ConfigChannel+0x364>)
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f7ff fa6b 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
 8002c8a:	e053      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c9c:	4a18      	ldr	r2, [pc, #96]	@ (8002d00 <HAL_ADC_ConfigChannel+0x360>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0019      	movs	r1, r3
 8002cac:	0010      	movs	r0, r2
 8002cae:	f7ff faee 	bl	800228e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da3c      	bge.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cba:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_ADC_ConfigChannel+0x364>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff fa63 	bl	8002188 <LL_ADC_GetCommonPathInternalCh>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a0f      	ldr	r2, [pc, #60]	@ (8002d08 <HAL_ADC_ConfigChannel+0x368>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <HAL_ADC_ConfigChannel+0x378>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8002d04 <HAL_ADC_ConfigChannel+0x364>)
 8002cd8:	0019      	movs	r1, r3
 8002cda:	0010      	movs	r0, r2
 8002cdc:	f7ff fa40 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
 8002ce0:	e028      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8002d14 <HAL_ADC_ConfigChannel+0x374>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d123      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4a0b      	ldr	r2, [pc, #44]	@ (8002d1c <HAL_ADC_ConfigChannel+0x37c>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	4a04      	ldr	r2, [pc, #16]	@ (8002d04 <HAL_ADC_ConfigChannel+0x364>)
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	0010      	movs	r0, r2
 8002cf8:	f7ff fa32 	bl	8002160 <LL_ADC_SetCommonPathInternalCh>
 8002cfc:	e01a      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x394>
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	80000004 	.word	0x80000004
 8002d04:	40012708 	.word	0x40012708
 8002d08:	a4000200 	.word	0xa4000200
 8002d0c:	20000074 	.word	0x20000074
 8002d10:	00030d40 	.word	0x00030d40
 8002d14:	a8000400 	.word	0xa8000400
 8002d18:	ff7fffff 	.word	0xff7fffff
 8002d1c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	2220      	movs	r2, #32
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d2c:	2317      	movs	r3, #23
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2254      	movs	r2, #84	@ 0x54
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	2317      	movs	r3, #23
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b006      	add	sp, #24
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)

08002d4c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fb59 	bl	8002410 <LL_ADC_REG_IsConversionOngoing>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d02b      	beq.n	8002dba <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fb1d 	bl	80023a6 <LL_ADC_IsDisableOngoing>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d104      	bne.n	8002d7a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fb39 	bl	80023ec <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d7a:	f7ff f9c3 	bl	8002104 <HAL_GetTick>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d82:	e014      	b.n	8002dae <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d84:	f7ff f9be 	bl	8002104 <HAL_GetTick>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d90d      	bls.n	8002dae <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	2210      	movs	r2, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da2:	2201      	movs	r2, #1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e006      	b.n	8002dbc <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2204      	movs	r2, #4
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1e4      	bne.n	8002d84 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b004      	add	sp, #16
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff fad5 	bl	8002384 <LL_ADC_IsEnabled>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d162      	bne.n	8002ea4 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a32      	ldr	r2, [pc, #200]	@ (8002eb0 <ADC_Enable+0xec>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	2210      	movs	r2, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e04f      	b.n	8002ea6 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff fa96 	bl	800233c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002e10:	4b28      	ldr	r3, [pc, #160]	@ (8002eb4 <ADC_Enable+0xf0>)
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7ff f9b8 	bl	8002188 <LL_ADC_GetCommonPathInternalCh>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00f      	beq.n	8002e42 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e22:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <ADC_Enable+0xf4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4925      	ldr	r1, [pc, #148]	@ (8002ebc <ADC_Enable+0xf8>)
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fd f96d 	bl	8000108 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002e32:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e34:	e002      	b.n	8002e3c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f9      	bne.n	8002e36 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7e5b      	ldrb	r3, [r3, #25]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d02c      	beq.n	8002ea4 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e4a:	f7ff f95b 	bl	8002104 <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e52:	e020      	b.n	8002e96 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff fa93 	bl	8002384 <LL_ADC_IsEnabled>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d104      	bne.n	8002e6c <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7ff fa68 	bl	800233c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e6c:	f7ff f94a 	bl	8002104 <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d90d      	bls.n	8002e96 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7e:	2210      	movs	r2, #16
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e007      	b.n	8002ea6 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d1d7      	bne.n	8002e54 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	80000017 	.word	0x80000017
 8002eb4:	40012708 	.word	0x40012708
 8002eb8:	20000074 	.word	0x20000074
 8002ebc:	00030d40 	.word	0x00030d40

08002ec0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff fa6a 	bl	80023a6 <LL_ADC_IsDisableOngoing>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7ff fa52 	bl	8002384 <LL_ADC_IsEnabled>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d040      	beq.n	8002f66 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d13d      	bne.n	8002f66 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2205      	movs	r2, #5
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d10d      	bne.n	8002f14 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff fa2f 	bl	8002360 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2203      	movs	r2, #3
 8002f08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f0a:	f7ff f8fb 	bl	8002104 <HAL_GetTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f12:	e022      	b.n	8002f5a <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	2210      	movs	r2, #16
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	2201      	movs	r2, #1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e01b      	b.n	8002f68 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f30:	f7ff f8e8 	bl	8002104 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d90d      	bls.n	8002f5a <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f42:	2210      	movs	r2, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4e:	2201      	movs	r2, #1
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e006      	b.n	8002f68 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d1e4      	bne.n	8002f30 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b004      	add	sp, #16
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	2250      	movs	r2, #80	@ 0x50
 8002f84:	4013      	ands	r3, r2
 8002f86:	d141      	bne.n	800300c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	2280      	movs	r2, #128	@ 0x80
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff f935 	bl	800220a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d02e      	beq.n	8003002 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	7e9b      	ldrb	r3, [r3, #26]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d12a      	bne.n	8003002 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d123      	bne.n	8003002 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7ff fa26 	bl	8002410 <LL_ADC_REG_IsConversionOngoing>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d110      	bne.n	8002fea <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	210c      	movs	r1, #12
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	4a15      	ldr	r2, [pc, #84]	@ (8003034 <ADC_DMAConvCplt+0xc4>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fe8:	e00b      	b.n	8003002 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	2220      	movs	r2, #32
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	0018      	movs	r0, r3
 8003006:	f7fd fb3d 	bl	8000684 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800300a:	e00f      	b.n	800302c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	2210      	movs	r2, #16
 8003012:	4013      	ands	r3, r2
 8003014:	d004      	beq.n	8003020 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff fcb9 	bl	8002990 <HAL_ADC_ErrorCallback>
}
 800301e:	e005      	b.n	800302c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	0010      	movs	r0, r2
 800302a:	4798      	blx	r3
}
 800302c:	46c0      	nop			@ (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}
 8003034:	fffffefe 	.word	0xfffffefe

08003038 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff fc99 	bl	8002980 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}

08003056 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	2240      	movs	r2, #64	@ 0x40
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2204      	movs	r2, #4
 8003076:	431a      	orrs	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	0018      	movs	r0, r3
 8003080:	f7ff fc86 	bl	8002990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}

0800308c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	0002      	movs	r2, r0
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003098:	1dfb      	adds	r3, r7, #7
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b7f      	cmp	r3, #127	@ 0x7f
 800309e:	d809      	bhi.n	80030b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	001a      	movs	r2, r3
 80030a6:	231f      	movs	r3, #31
 80030a8:	401a      	ands	r2, r3
 80030aa:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <__NVIC_EnableIRQ+0x30>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	4091      	lsls	r1, r2
 80030b0:	000a      	movs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80030b4:	46c0      	nop			@ (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	0002      	movs	r2, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80030d4:	d828      	bhi.n	8003128 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003194 <__NVIC_SetPriority+0xd4>)
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	33c0      	adds	r3, #192	@ 0xc0
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	589b      	ldr	r3, [r3, r2]
 80030e6:	1dfa      	adds	r2, r7, #7
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	0011      	movs	r1, r2
 80030ec:	2203      	movs	r2, #3
 80030ee:	400a      	ands	r2, r1
 80030f0:	00d2      	lsls	r2, r2, #3
 80030f2:	21ff      	movs	r1, #255	@ 0xff
 80030f4:	4091      	lsls	r1, r2
 80030f6:	000a      	movs	r2, r1
 80030f8:	43d2      	mvns	r2, r2
 80030fa:	401a      	ands	r2, r3
 80030fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	22ff      	movs	r2, #255	@ 0xff
 8003104:	401a      	ands	r2, r3
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	0018      	movs	r0, r3
 800310c:	2303      	movs	r3, #3
 800310e:	4003      	ands	r3, r0
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003114:	481f      	ldr	r0, [pc, #124]	@ (8003194 <__NVIC_SetPriority+0xd4>)
 8003116:	1dfb      	adds	r3, r7, #7
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	430a      	orrs	r2, r1
 8003120:	33c0      	adds	r3, #192	@ 0xc0
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003126:	e031      	b.n	800318c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003128:	4a1b      	ldr	r2, [pc, #108]	@ (8003198 <__NVIC_SetPriority+0xd8>)
 800312a:	1dfb      	adds	r3, r7, #7
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	0019      	movs	r1, r3
 8003130:	230f      	movs	r3, #15
 8003132:	400b      	ands	r3, r1
 8003134:	3b08      	subs	r3, #8
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3306      	adds	r3, #6
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	3304      	adds	r3, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1dfa      	adds	r2, r7, #7
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	0011      	movs	r1, r2
 8003148:	2203      	movs	r2, #3
 800314a:	400a      	ands	r2, r1
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	21ff      	movs	r1, #255	@ 0xff
 8003150:	4091      	lsls	r1, r2
 8003152:	000a      	movs	r2, r1
 8003154:	43d2      	mvns	r2, r2
 8003156:	401a      	ands	r2, r3
 8003158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	22ff      	movs	r2, #255	@ 0xff
 8003160:	401a      	ands	r2, r3
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	2303      	movs	r3, #3
 800316a:	4003      	ands	r3, r0
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003170:	4809      	ldr	r0, [pc, #36]	@ (8003198 <__NVIC_SetPriority+0xd8>)
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	001c      	movs	r4, r3
 8003178:	230f      	movs	r3, #15
 800317a:	4023      	ands	r3, r4
 800317c:	3b08      	subs	r3, #8
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	430a      	orrs	r2, r1
 8003182:	3306      	adds	r3, #6
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	18c3      	adds	r3, r0, r3
 8003188:	3304      	adds	r3, #4
 800318a:	601a      	str	r2, [r3, #0]
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b003      	add	sp, #12
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	1e5a      	subs	r2, r3, #1
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	045b      	lsls	r3, r3, #17
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d301      	bcc.n	80031b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b0:	2301      	movs	r3, #1
 80031b2:	e010      	b.n	80031d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <SysTick_Config+0x44>)
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	3a01      	subs	r2, #1
 80031ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031bc:	2301      	movs	r3, #1
 80031be:	425b      	negs	r3, r3
 80031c0:	2103      	movs	r1, #3
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff ff7c 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <SysTick_Config+0x44>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ce:	4b04      	ldr	r3, [pc, #16]	@ (80031e0 <SysTick_Config+0x44>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	e000e010 	.word	0xe000e010

080031e4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	210f      	movs	r1, #15
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	1c02      	adds	r2, r0, #0
 80031f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	0011      	movs	r1, r2
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff ff5d 	bl	80030c0 <__NVIC_SetPriority>
}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b004      	add	sp, #16
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	0002      	movs	r2, r0
 8003216:	1dfb      	adds	r3, r7, #7
 8003218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321a:	1dfb      	adds	r3, r7, #7
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b25b      	sxtb	r3, r3
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff ff33 	bl	800308c <__NVIC_EnableIRQ>
}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f7ff ffaf 	bl	800319c <SysTick_Config>
 800323e:	0003      	movs	r3, r0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e077      	b.n	800334a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3d      	ldr	r2, [pc, #244]	@ (8003354 <HAL_DMA_Init+0x10c>)
 8003260:	4694      	mov	ip, r2
 8003262:	4463      	add	r3, ip
 8003264:	2114      	movs	r1, #20
 8003266:	0018      	movs	r0, r3
 8003268:	f7fc ff4e 	bl	8000108 <__udivsi3>
 800326c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800326e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2225      	movs	r2, #37	@ 0x25
 8003278:	2102      	movs	r1, #2
 800327a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4934      	ldr	r1, [pc, #208]	@ (8003358 <HAL_DMA_Init+0x110>)
 8003288:	400a      	ands	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 faab 	bl	8003820 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	01db      	lsls	r3, r3, #7
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d102      	bne.n	80032dc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	21ff      	movs	r1, #255	@ 0xff
 80032e6:	400a      	ands	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d011      	beq.n	8003320 <HAL_DMA_Init+0xd8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d80d      	bhi.n	8003320 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0018      	movs	r0, r3
 8003308:	f000 fab6 	bl	8003878 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	e008      	b.n	8003332 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2225      	movs	r2, #37	@ 0x25
 800333c:	2101      	movs	r1, #1
 800333e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2224      	movs	r2, #36	@ 0x24
 8003344:	2100      	movs	r1, #0
 8003346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	bffdfff8 	.word	0xbffdfff8
 8003358:	ffff800f 	.word	0xffff800f

0800335c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2317      	movs	r3, #23
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2224      	movs	r2, #36	@ 0x24
 8003376:	5c9b      	ldrb	r3, [r3, r2]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_DMA_Start_IT+0x24>
 800337c:	2302      	movs	r3, #2
 800337e:	e070      	b.n	8003462 <HAL_DMA_Start_IT+0x106>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2224      	movs	r2, #36	@ 0x24
 8003384:	2101      	movs	r1, #1
 8003386:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2225      	movs	r2, #37	@ 0x25
 800338c:	5c9b      	ldrb	r3, [r3, r2]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d157      	bne.n	8003444 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2225      	movs	r2, #37	@ 0x25
 8003398:	2102      	movs	r1, #2
 800339a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	438a      	bics	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f9f1 	bl	80037a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	210e      	movs	r1, #14
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e00f      	b.n	80033f8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2104      	movs	r1, #4
 80033e4:	438a      	bics	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	210a      	movs	r1, #10
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	2380      	movs	r3, #128	@ 0x80
 8003400:	025b      	lsls	r3, r3, #9
 8003402:	4013      	ands	r3, r2
 8003404:	d008      	beq.n	8003418 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	0049      	lsls	r1, r1, #1
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342a:	2180      	movs	r1, #128	@ 0x80
 800342c:	0049      	lsls	r1, r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e007      	b.n	8003454 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2224      	movs	r2, #36	@ 0x24
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800344c:	2317      	movs	r3, #23
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2224      	movs	r2, #36	@ 0x24
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

  return status;
 800345c:	2317      	movs	r3, #23
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	781b      	ldrb	r3, [r3, #0]
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b006      	add	sp, #24
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e050      	b.n	8003520 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2225      	movs	r2, #37	@ 0x25
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d008      	beq.n	800349c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2204      	movs	r2, #4
 800348e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	@ 0x24
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e041      	b.n	8003520 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	210e      	movs	r1, #14
 80034a8:	438a      	bics	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	491c      	ldr	r1, [pc, #112]	@ (8003528 <HAL_DMA_Abort+0xbc>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2101      	movs	r1, #1
 80034c8:	438a      	bics	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80034cc:	4b17      	ldr	r3, [pc, #92]	@ (800352c <HAL_DMA_Abort+0xc0>)
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	221c      	movs	r2, #28
 80034d6:	4013      	ands	r3, r2
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	4b13      	ldr	r3, [pc, #76]	@ (800352c <HAL_DMA_Abort+0xc0>)
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00c      	beq.n	800350e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fe:	490a      	ldr	r1, [pc, #40]	@ (8003528 <HAL_DMA_Abort+0xbc>)
 8003500:	400a      	ands	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800350c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2225      	movs	r2, #37	@ 0x25
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffffeff 	.word	0xfffffeff
 800352c:	40020000 	.word	0x40020000

08003530 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	230f      	movs	r3, #15
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	@ 0x24
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	@ 0x24
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Abort_IT+0x26>
 8003552:	2302      	movs	r3, #2
 8003554:	e05e      	b.n	8003614 <HAL_DMA_Abort_IT+0xe4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2224      	movs	r2, #36	@ 0x24
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2225      	movs	r2, #37	@ 0x25
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d007      	beq.n	800357a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003570:	230f      	movs	r3, #15
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e049      	b.n	800360e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	210e      	movs	r1, #14
 8003586:	438a      	bics	r2, r1
 8003588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	438a      	bics	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	491d      	ldr	r1, [pc, #116]	@ (800361c <HAL_DMA_Abort_IT+0xec>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80035aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <HAL_DMA_Abort_IT+0xf0>)
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	221c      	movs	r2, #28
 80035b4:	4013      	ands	r3, r2
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_DMA_Abort_IT+0xf0>)
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00c      	beq.n	80035ec <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035dc:	490f      	ldr	r1, [pc, #60]	@ (800361c <HAL_DMA_Abort_IT+0xec>)
 80035de:	400a      	ands	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80035ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2225      	movs	r2, #37	@ 0x25
 80035f0:	2101      	movs	r1, #1
 80035f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2224      	movs	r2, #36	@ 0x24
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	0010      	movs	r0, r2
 800360c:	4798      	blx	r3
    }
  }
  return status;
 800360e:	230f      	movs	r3, #15
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	781b      	ldrb	r3, [r3, #0]
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b004      	add	sp, #16
 800361a:	bd80      	pop	{r7, pc}
 800361c:	fffffeff 	.word	0xfffffeff
 8003620:	40020000 	.word	0x40020000

08003624 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800362c:	4b55      	ldr	r3, [pc, #340]	@ (8003784 <HAL_DMA_IRQHandler+0x160>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	221c      	movs	r2, #28
 8003640:	4013      	ands	r3, r2
 8003642:	2204      	movs	r2, #4
 8003644:	409a      	lsls	r2, r3
 8003646:	0013      	movs	r3, r2
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4013      	ands	r3, r2
 800364c:	d027      	beq.n	800369e <HAL_DMA_IRQHandler+0x7a>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2204      	movs	r2, #4
 8003652:	4013      	ands	r3, r2
 8003654:	d023      	beq.n	800369e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2220      	movs	r2, #32
 800365e:	4013      	ands	r3, r2
 8003660:	d107      	bne.n	8003672 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2104      	movs	r1, #4
 800366e:	438a      	bics	r2, r1
 8003670:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8003672:	4b44      	ldr	r3, [pc, #272]	@ (8003784 <HAL_DMA_IRQHandler+0x160>)
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	221c      	movs	r2, #28
 800367c:	4013      	ands	r3, r2
 800367e:	2204      	movs	r2, #4
 8003680:	409a      	lsls	r2, r3
 8003682:	4b40      	ldr	r3, [pc, #256]	@ (8003784 <HAL_DMA_IRQHandler+0x160>)
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <HAL_DMA_IRQHandler+0x6e>
 8003690:	e073      	b.n	800377a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	0010      	movs	r0, r2
 800369a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800369c:	e06d      	b.n	800377a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	221c      	movs	r2, #28
 80036a4:	4013      	ands	r3, r2
 80036a6:	2202      	movs	r2, #2
 80036a8:	409a      	lsls	r2, r3
 80036aa:	0013      	movs	r3, r2
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4013      	ands	r3, r2
 80036b0:	d02e      	beq.n	8003710 <HAL_DMA_IRQHandler+0xec>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d02a      	beq.n	8003710 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2220      	movs	r2, #32
 80036c2:	4013      	ands	r3, r2
 80036c4:	d10b      	bne.n	80036de <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	210a      	movs	r1, #10
 80036d2:	438a      	bics	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2225      	movs	r2, #37	@ 0x25
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80036de:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <HAL_DMA_IRQHandler+0x160>)
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	221c      	movs	r2, #28
 80036e8:	4013      	ands	r3, r2
 80036ea:	2202      	movs	r2, #2
 80036ec:	409a      	lsls	r2, r3
 80036ee:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <HAL_DMA_IRQHandler+0x160>)
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	@ 0x24
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03a      	beq.n	800377a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	0010      	movs	r0, r2
 800370c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800370e:	e034      	b.n	800377a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	221c      	movs	r2, #28
 8003716:	4013      	ands	r3, r2
 8003718:	2208      	movs	r2, #8
 800371a:	409a      	lsls	r2, r3
 800371c:	0013      	movs	r3, r2
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4013      	ands	r3, r2
 8003722:	d02b      	beq.n	800377c <HAL_DMA_IRQHandler+0x158>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2208      	movs	r2, #8
 8003728:	4013      	ands	r3, r2
 800372a:	d027      	beq.n	800377c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	210e      	movs	r1, #14
 8003738:	438a      	bics	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800373c:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_DMA_IRQHandler+0x160>)
 800373e:	6859      	ldr	r1, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	221c      	movs	r2, #28
 8003746:	4013      	ands	r3, r2
 8003748:	2201      	movs	r2, #1
 800374a:	409a      	lsls	r2, r3
 800374c:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <HAL_DMA_IRQHandler+0x160>)
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2225      	movs	r2, #37	@ 0x25
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	@ 0x24
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	0010      	movs	r0, r2
 8003778:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	46c0      	nop			@ (mov r8, r8)
}
 800377e:	46bd      	mov	sp, r7
 8003780:	b004      	add	sp, #16
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40020000 	.word	0x40020000

08003788 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2225      	movs	r2, #37	@ 0x25
 8003794:	5c9b      	ldrb	r3, [r3, r2]
 8003796:	b2db      	uxtb	r3, r3
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}

080037a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80037ca:	4b14      	ldr	r3, [pc, #80]	@ (800381c <DMA_SetConfig+0x7c>)
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	221c      	movs	r2, #28
 80037d4:	4013      	ands	r3, r2
 80037d6:	2201      	movs	r2, #1
 80037d8:	409a      	lsls	r2, r3
 80037da:	4b10      	ldr	r3, [pc, #64]	@ (800381c <DMA_SetConfig+0x7c>)
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d108      	bne.n	8003802 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003800:	e007      	b.n	8003812 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	40020000 	.word	0x40020000

08003820 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	001a      	movs	r2, r3
 800382e:	23ff      	movs	r3, #255	@ 0xff
 8003830:	4013      	ands	r3, r2
 8003832:	3b08      	subs	r3, #8
 8003834:	2114      	movs	r1, #20
 8003836:	0018      	movs	r0, r3
 8003838:	f7fc fc66 	bl	8000108 <__udivsi3>
 800383c:	0003      	movs	r3, r0
 800383e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003846:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003848:	4694      	mov	ip, r2
 800384a:	4463      	add	r3, ip
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	001a      	movs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a07      	ldr	r2, [pc, #28]	@ (8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003858:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	221c      	movs	r2, #28
 800385e:	4013      	ands	r3, r2
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b004      	add	sp, #16
 800386e:	bd80      	pop	{r7, pc}
 8003870:	10008200 	.word	0x10008200
 8003874:	40020880 	.word	0x40020880

08003878 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	22ff      	movs	r2, #255	@ 0xff
 8003886:	4013      	ands	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800388e:	4694      	mov	ip, r2
 8003890:	4463      	add	r3, ip
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	001a      	movs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a07      	ldr	r2, [pc, #28]	@ (80038bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	2203      	movs	r2, #3
 80038a6:	4013      	ands	r3, r2
 80038a8:	2201      	movs	r2, #1
 80038aa:	409a      	lsls	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b004      	add	sp, #16
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	1000823f 	.word	0x1000823f
 80038bc:	40020940 	.word	0x40020940

080038c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80038ce:	e153      	b.n	8003b78 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4091      	lsls	r1, r2
 80038da:	000a      	movs	r2, r1
 80038dc:	4013      	ands	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d100      	bne.n	80038e8 <HAL_GPIO_Init+0x28>
 80038e6:	e144      	b.n	8003b72 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x38>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b12      	cmp	r3, #18
 80038f6:	d125      	bne.n	8003944 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3208      	adds	r2, #8
 8003900:	0092      	lsls	r2, r2, #2
 8003902:	58d3      	ldr	r3, [r2, r3]
 8003904:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2207      	movs	r2, #7
 800390a:	4013      	ands	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	220f      	movs	r2, #15
 8003910:	409a      	lsls	r2, r3
 8003912:	0013      	movs	r3, r2
 8003914:	43da      	mvns	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	4013      	ands	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	220f      	movs	r2, #15
 8003922:	401a      	ands	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2107      	movs	r1, #7
 8003928:	400b      	ands	r3, r1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	409a      	lsls	r2, r3
 800392e:	0013      	movs	r3, r2
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	6979      	ldr	r1, [r7, #20]
 8003942:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	409a      	lsls	r2, r3
 8003952:	0013      	movs	r3, r2
 8003954:	43da      	mvns	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4013      	ands	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	401a      	ands	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	0013      	movs	r3, r2
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d00b      	beq.n	8003998 <HAL_GPIO_Init+0xd8>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d007      	beq.n	8003998 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800398c:	2b11      	cmp	r3, #17
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b12      	cmp	r3, #18
 8003996:	d130      	bne.n	80039fa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	409a      	lsls	r2, r3
 80039a6:	0013      	movs	r3, r2
 80039a8:	43da      	mvns	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	0013      	movs	r3, r2
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ce:	2201      	movs	r2, #1
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	409a      	lsls	r2, r3
 80039d4:	0013      	movs	r3, r2
 80039d6:	43da      	mvns	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4013      	ands	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	2201      	movs	r2, #1
 80039e6:	401a      	ands	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	409a      	lsls	r2, r3
 80039ec:	0013      	movs	r3, r2
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d017      	beq.n	8003a32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	0013      	movs	r3, r2
 8003a12:	43da      	mvns	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4013      	ands	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	055b      	lsls	r3, r3, #21
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d100      	bne.n	8003a40 <HAL_GPIO_Init+0x180>
 8003a3e:	e098      	b.n	8003b72 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003a40:	4a53      	ldr	r2, [pc, #332]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3318      	adds	r3, #24
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	589b      	ldr	r3, [r3, r2]
 8003a4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4013      	ands	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	220f      	movs	r2, #15
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	23a0      	movs	r3, #160	@ 0xa0
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d019      	beq.n	8003aa2 <HAL_GPIO_Init+0x1e2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a48      	ldr	r2, [pc, #288]	@ (8003b94 <HAL_GPIO_Init+0x2d4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_GPIO_Init+0x1de>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a47      	ldr	r2, [pc, #284]	@ (8003b98 <HAL_GPIO_Init+0x2d8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00d      	beq.n	8003a9a <HAL_GPIO_Init+0x1da>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a46      	ldr	r2, [pc, #280]	@ (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <HAL_GPIO_Init+0x1d6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a45      	ldr	r2, [pc, #276]	@ (8003ba0 <HAL_GPIO_Init+0x2e0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_GPIO_Init+0x1d2>
 8003a8e:	2305      	movs	r3, #5
 8003a90:	e008      	b.n	8003aa4 <HAL_GPIO_Init+0x1e4>
 8003a92:	2306      	movs	r3, #6
 8003a94:	e006      	b.n	8003aa4 <HAL_GPIO_Init+0x1e4>
 8003a96:	2303      	movs	r3, #3
 8003a98:	e004      	b.n	8003aa4 <HAL_GPIO_Init+0x1e4>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e002      	b.n	8003aa4 <HAL_GPIO_Init+0x1e4>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_GPIO_Init+0x1e4>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	00d2      	lsls	r2, r2, #3
 8003aac:	4093      	lsls	r3, r2
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003ab4:	4936      	ldr	r1, [pc, #216]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	3318      	adds	r3, #24
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003ac2:	4a33      	ldr	r2, [pc, #204]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	58d3      	ldr	r3, [r2, r3]
 8003ac8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	025b      	lsls	r3, r3, #9
 8003adc:	4013      	ands	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003ae8:	4929      	ldr	r1, [pc, #164]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003af0:	4a27      	ldr	r2, [pc, #156]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003af2:	2384      	movs	r3, #132	@ 0x84
 8003af4:	58d3      	ldr	r3, [r2, r3]
 8003af6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43da      	mvns	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4013      	ands	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	029b      	lsls	r3, r3, #10
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003b16:	491e      	ldr	r1, [pc, #120]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003b18:	2284      	movs	r2, #132	@ 0x84
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	035b      	lsls	r3, r3, #13
 8003b36:	4013      	ands	r3, r2
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003b48:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43da      	mvns	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	039b      	lsls	r3, r3, #14
 8003b60:	4013      	ands	r3, r2
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3301      	adds	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	40da      	lsrs	r2, r3
 8003b80:	1e13      	subs	r3, r2, #0
 8003b82:	d000      	beq.n	8003b86 <HAL_GPIO_Init+0x2c6>
 8003b84:	e6a4      	b.n	80038d0 <HAL_GPIO_Init+0x10>
  }
}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b006      	add	sp, #24
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021800 	.word	0x40021800
 8003b94:	50000400 	.word	0x50000400
 8003b98:	50000800 	.word	0x50000800
 8003b9c:	50000c00 	.word	0x50000c00
 8003ba0:	50001400 	.word	0x50001400

08003ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	0008      	movs	r0, r1
 8003bae:	0011      	movs	r1, r2
 8003bb0:	1cbb      	adds	r3, r7, #2
 8003bb2:	1c02      	adds	r2, r0, #0
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	1c7b      	adds	r3, r7, #1
 8003bb8:	1c0a      	adds	r2, r1, #0
 8003bba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bbc:	1c7b      	adds	r3, r7, #1
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bc4:	1cbb      	adds	r3, r7, #2
 8003bc6:	881a      	ldrh	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bcc:	e003      	b.n	8003bd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bce:	1cbb      	adds	r3, r7, #2
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b002      	add	sp, #8
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e08f      	b.n	8003d12 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2241      	movs	r2, #65	@ 0x41
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2240      	movs	r2, #64	@ 0x40
 8003c02:	2100      	movs	r1, #0
 8003c04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7fd ff2d 	bl	8001a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2241      	movs	r2, #65	@ 0x41
 8003c12:	2124      	movs	r1, #36	@ 0x24
 8003c14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	438a      	bics	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	493b      	ldr	r1, [pc, #236]	@ (8003d1c <HAL_I2C_Init+0x13c>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4938      	ldr	r1, [pc, #224]	@ (8003d20 <HAL_I2C_Init+0x140>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d108      	bne.n	8003c5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2180      	movs	r1, #128	@ 0x80
 8003c56:	0209      	lsls	r1, r1, #8
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	e007      	b.n	8003c6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2184      	movs	r1, #132	@ 0x84
 8003c68:	0209      	lsls	r1, r1, #8
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d109      	bne.n	8003c8a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2180      	movs	r1, #128	@ 0x80
 8003c82:	0109      	lsls	r1, r1, #4
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	e007      	b.n	8003c9a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4923      	ldr	r1, [pc, #140]	@ (8003d24 <HAL_I2C_Init+0x144>)
 8003c96:	400a      	ands	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4920      	ldr	r1, [pc, #128]	@ (8003d28 <HAL_I2C_Init+0x148>)
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	491a      	ldr	r1, [pc, #104]	@ (8003d20 <HAL_I2C_Init+0x140>)
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2241      	movs	r2, #65	@ 0x41
 8003cfe:	2120      	movs	r1, #32
 8003d00:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2242      	movs	r2, #66	@ 0x42
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	f0ffffff 	.word	0xf0ffffff
 8003d20:	ffff7fff 	.word	0xffff7fff
 8003d24:	fffff7ff 	.word	0xfffff7ff
 8003d28:	02008000 	.word	0x02008000

08003d2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b089      	sub	sp, #36	@ 0x24
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	0008      	movs	r0, r1
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	0019      	movs	r1, r3
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	1c02      	adds	r2, r0, #0
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	2308      	movs	r3, #8
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	1c0a      	adds	r2, r1, #0
 8003d48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2241      	movs	r2, #65	@ 0x41
 8003d4e:	5c9b      	ldrb	r3, [r3, r2]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d000      	beq.n	8003d58 <HAL_I2C_Master_Transmit+0x2c>
 8003d56:	e10a      	b.n	8003f6e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2240      	movs	r2, #64	@ 0x40
 8003d5c:	5c9b      	ldrb	r3, [r3, r2]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Master_Transmit+0x3a>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e104      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x244>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2240      	movs	r2, #64	@ 0x40
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d6e:	f7fe f9c9 	bl	8002104 <HAL_GetTick>
 8003d72:	0003      	movs	r3, r0
 8003d74:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d76:	2380      	movs	r3, #128	@ 0x80
 8003d78:	0219      	lsls	r1, r3, #8
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2319      	movs	r3, #25
 8003d82:	2201      	movs	r2, #1
 8003d84:	f000 fffc 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0ef      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2241      	movs	r2, #65	@ 0x41
 8003d94:	2121      	movs	r1, #33	@ 0x21
 8003d96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2242      	movs	r2, #66	@ 0x42
 8003d9c:	2110      	movs	r1, #16
 8003d9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2208      	movs	r2, #8
 8003db0:	18ba      	adds	r2, r7, r2
 8003db2:	8812      	ldrh	r2, [r2, #0]
 8003db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2bff      	cmp	r3, #255	@ 0xff
 8003dc4:	d906      	bls.n	8003dd4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	@ 0xff
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003dcc:	2380      	movs	r3, #128	@ 0x80
 8003dce:	045b      	lsls	r3, r3, #17
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e007      	b.n	8003de4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003dde:	2380      	movs	r3, #128	@ 0x80
 8003de0:	049b      	lsls	r3, r3, #18
 8003de2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d027      	beq.n	8003e3c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	697c      	ldr	r4, [r7, #20]
 8003e28:	230a      	movs	r3, #10
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	8819      	ldrh	r1, [r3, #0]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	4b51      	ldr	r3, [pc, #324]	@ (8003f78 <HAL_I2C_Master_Transmit+0x24c>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0023      	movs	r3, r4
 8003e36:	f001 fa1b 	bl	8005270 <I2C_TransferConfig>
 8003e3a:	e06f      	b.n	8003f1c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	697c      	ldr	r4, [r7, #20]
 8003e44:	230a      	movs	r3, #10
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	8819      	ldrh	r1, [r3, #0]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003f78 <HAL_I2C_Master_Transmit+0x24c>)
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	0023      	movs	r3, r4
 8003e52:	f001 fa0d 	bl	8005270 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e56:	e061      	b.n	8003f1c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 ffe6 	bl	8004e30 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e081      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03a      	beq.n	8003f1c <HAL_I2C_Master_Transmit+0x1f0>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d136      	bne.n	8003f1c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	0013      	movs	r3, r2
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	f000 ff60 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e053      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2bff      	cmp	r3, #255	@ 0xff
 8003ed0:	d911      	bls.n	8003ef6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	22ff      	movs	r2, #255	@ 0xff
 8003ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	2380      	movs	r3, #128	@ 0x80
 8003ee0:	045c      	lsls	r4, r3, #17
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	8819      	ldrh	r1, [r3, #0]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	0023      	movs	r3, r4
 8003ef0:	f001 f9be 	bl	8005270 <I2C_TransferConfig>
 8003ef4:	e012      	b.n	8003f1c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	2380      	movs	r3, #128	@ 0x80
 8003f08:	049c      	lsls	r4, r3, #18
 8003f0a:	230a      	movs	r3, #10
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	8819      	ldrh	r1, [r3, #0]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	2300      	movs	r3, #0
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	0023      	movs	r3, r4
 8003f18:	f001 f9aa 	bl	8005270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d198      	bne.n	8003e58 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 ffc5 	bl	8004ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e01a      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	490b      	ldr	r1, [pc, #44]	@ (8003f7c <HAL_I2C_Master_Transmit+0x250>)
 8003f4e:	400a      	ands	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2241      	movs	r2, #65	@ 0x41
 8003f56:	2120      	movs	r1, #32
 8003f58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2242      	movs	r2, #66	@ 0x42
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2240      	movs	r2, #64	@ 0x40
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b007      	add	sp, #28
 8003f76:	bd90      	pop	{r4, r7, pc}
 8003f78:	80002000 	.word	0x80002000
 8003f7c:	fe00e800 	.word	0xfe00e800

08003f80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b089      	sub	sp, #36	@ 0x24
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	0008      	movs	r0, r1
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	230a      	movs	r3, #10
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	1c02      	adds	r2, r0, #0
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	2308      	movs	r3, #8
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	1c0a      	adds	r2, r1, #0
 8003f9c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2241      	movs	r2, #65	@ 0x41
 8003fa2:	5c9b      	ldrb	r3, [r3, r2]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d000      	beq.n	8003fac <HAL_I2C_Master_Receive+0x2c>
 8003faa:	e0e8      	b.n	800417e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	@ 0x40
 8003fb0:	5c9b      	ldrb	r3, [r3, r2]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_I2C_Master_Receive+0x3a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e0e2      	b.n	8004180 <HAL_I2C_Master_Receive+0x200>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2240      	movs	r2, #64	@ 0x40
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fe f89f 	bl	8002104 <HAL_GetTick>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	0219      	lsls	r1, r3, #8
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2319      	movs	r3, #25
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f000 fed2 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0cd      	b.n	8004180 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2241      	movs	r2, #65	@ 0x41
 8003fe8:	2122      	movs	r1, #34	@ 0x22
 8003fea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2242      	movs	r2, #66	@ 0x42
 8003ff0:	2110      	movs	r1, #16
 8003ff2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2208      	movs	r2, #8
 8004004:	18ba      	adds	r2, r7, r2
 8004006:	8812      	ldrh	r2, [r2, #0]
 8004008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	2bff      	cmp	r3, #255	@ 0xff
 8004018:	d911      	bls.n	800403e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	22ff      	movs	r2, #255	@ 0xff
 800401e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	b2da      	uxtb	r2, r3
 8004026:	2380      	movs	r3, #128	@ 0x80
 8004028:	045c      	lsls	r4, r3, #17
 800402a:	230a      	movs	r3, #10
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	8819      	ldrh	r1, [r3, #0]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	4b55      	ldr	r3, [pc, #340]	@ (8004188 <HAL_I2C_Master_Receive+0x208>)
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	0023      	movs	r3, r4
 8004038:	f001 f91a 	bl	8005270 <I2C_TransferConfig>
 800403c:	e076      	b.n	800412c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404c:	b2da      	uxtb	r2, r3
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	049c      	lsls	r4, r3, #18
 8004052:	230a      	movs	r3, #10
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	8819      	ldrh	r1, [r3, #0]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	4b4b      	ldr	r3, [pc, #300]	@ (8004188 <HAL_I2C_Master_Receive+0x208>)
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	0023      	movs	r3, r4
 8004060:	f001 f906 	bl	8005270 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004064:	e062      	b.n	800412c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	0018      	movs	r0, r3
 800406e:	f000 ff69 	bl	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004072:	1e03      	subs	r3, r0, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e082      	b.n	8004180 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03a      	beq.n	800412c <HAL_I2C_Master_Receive+0x1ac>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d136      	bne.n	800412c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	0013      	movs	r3, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	@ 0x80
 80040cc:	f000 fe58 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 80040d0:	1e03      	subs	r3, r0, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e053      	b.n	8004180 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2bff      	cmp	r3, #255	@ 0xff
 80040e0:	d911      	bls.n	8004106 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	22ff      	movs	r2, #255	@ 0xff
 80040e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	045c      	lsls	r4, r3, #17
 80040f2:	230a      	movs	r3, #10
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	8819      	ldrh	r1, [r3, #0]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	0023      	movs	r3, r4
 8004100:	f001 f8b6 	bl	8005270 <I2C_TransferConfig>
 8004104:	e012      	b.n	800412c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004114:	b2da      	uxtb	r2, r3
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	049c      	lsls	r4, r3, #18
 800411a:	230a      	movs	r3, #10
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	8819      	ldrh	r1, [r3, #0]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	0023      	movs	r3, r4
 8004128:	f001 f8a2 	bl	8005270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d197      	bne.n	8004066 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 febd 	bl	8004ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004142:	1e03      	subs	r3, r0, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e01a      	b.n	8004180 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2220      	movs	r2, #32
 8004150:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	490b      	ldr	r1, [pc, #44]	@ (800418c <HAL_I2C_Master_Receive+0x20c>)
 800415e:	400a      	ands	r2, r1
 8004160:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2241      	movs	r2, #65	@ 0x41
 8004166:	2120      	movs	r1, #32
 8004168:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2242      	movs	r2, #66	@ 0x42
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2240      	movs	r2, #64	@ 0x40
 8004176:	2100      	movs	r1, #0
 8004178:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b007      	add	sp, #28
 8004186:	bd90      	pop	{r4, r7, pc}
 8004188:	80002400 	.word	0x80002400
 800418c:	fe00e800 	.word	0xfe00e800

08004190 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4798      	blx	r3
  }
}
 80041bc:	46c0      	nop			@ (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4013      	ands	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2280      	movs	r2, #128	@ 0x80
 80041ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80041ec:	d00a      	beq.n	8004204 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	2201      	movs	r2, #1
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2280      	movs	r2, #128	@ 0x80
 8004200:	0052      	lsls	r2, r2, #1
 8004202:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	2380      	movs	r3, #128	@ 0x80
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4013      	ands	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004214:	d00a      	beq.n	800422c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	2208      	movs	r2, #8
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	00d2      	lsls	r2, r2, #3
 800422a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4013      	ands	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2280      	movs	r2, #128	@ 0x80
 800423a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800423c:	d00a      	beq.n	8004254 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	2202      	movs	r2, #2
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2280      	movs	r2, #128	@ 0x80
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	220b      	movs	r2, #11
 800425e:	4013      	ands	r3, r2
 8004260:	d005      	beq.n	800426e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	0011      	movs	r1, r2
 8004268:	0018      	movs	r0, r3
 800426a:	f000 fc1d 	bl	8004aa8 <I2C_ITError>
  }
}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b006      	add	sp, #24
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b002      	add	sp, #8
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	0008      	movs	r0, r1
 80042a0:	0011      	movs	r1, r2
 80042a2:	1cfb      	adds	r3, r7, #3
 80042a4:	1c02      	adds	r2, r0, #0
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	003b      	movs	r3, r7
 80042aa:	1c0a      	adds	r2, r1, #0
 80042ac:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b002      	add	sp, #8
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b002      	add	sp, #8
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2240      	movs	r2, #64	@ 0x40
 80042f2:	5c9b      	ldrb	r3, [r3, r2]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <I2C_Slave_ISR_IT+0x24>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0e7      	b.n	80044cc <I2C_Slave_ISR_IT+0x1f4>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2240      	movs	r2, #64	@ 0x40
 8004300:	2101      	movs	r1, #1
 8004302:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2220      	movs	r2, #32
 8004308:	4013      	ands	r3, r2
 800430a:	d00a      	beq.n	8004322 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004312:	d006      	beq.n	8004322 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	0011      	movs	r1, r2
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f9e4 	bl	80046e8 <I2C_ITSlaveCplt>
 8004320:	e0cf      	b.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2210      	movs	r2, #16
 8004326:	4013      	ands	r3, r2
 8004328:	d052      	beq.n	80043d0 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2210      	movs	r2, #16
 800432e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004330:	d04e      	beq.n	80043d0 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d12d      	bne.n	8004398 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2241      	movs	r2, #65	@ 0x41
 8004340:	5c9b      	ldrb	r3, [r3, r2]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b28      	cmp	r3, #40	@ 0x28
 8004346:	d10b      	bne.n	8004360 <I2C_Slave_ISR_IT+0x88>
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	049b      	lsls	r3, r3, #18
 800434e:	429a      	cmp	r2, r3
 8004350:	d106      	bne.n	8004360 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	0011      	movs	r1, r2
 8004358:	0018      	movs	r0, r3
 800435a:	f000 fb4d 	bl	80049f8 <I2C_ITListenCplt>
 800435e:	e036      	b.n	80043ce <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2241      	movs	r2, #65	@ 0x41
 8004364:	5c9b      	ldrb	r3, [r3, r2]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b29      	cmp	r3, #41	@ 0x29
 800436a:	d110      	bne.n	800438e <I2C_Slave_ISR_IT+0xb6>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4a59      	ldr	r2, [pc, #356]	@ (80044d4 <I2C_Slave_ISR_IT+0x1fc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00c      	beq.n	800438e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2210      	movs	r2, #16
 800437a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	0018      	movs	r0, r3
 8004380:	f000 fcbd 	bl	8004cfe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 f94a 	bl	8004620 <I2C_ITSlaveSeqCplt>
 800438c:	e01f      	b.n	80043ce <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2210      	movs	r2, #16
 8004394:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004396:	e091      	b.n	80044bc <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2210      	movs	r2, #16
 800439e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a4:	2204      	movs	r2, #4
 80043a6:	431a      	orrs	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <I2C_Slave_ISR_IT+0xe6>
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	2380      	movs	r3, #128	@ 0x80
 80043b6:	045b      	lsls	r3, r3, #17
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d000      	beq.n	80043be <I2C_Slave_ISR_IT+0xe6>
 80043bc:	e07e      	b.n	80044bc <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	0011      	movs	r1, r2
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 fb6e 	bl	8004aa8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043cc:	e076      	b.n	80044bc <I2C_Slave_ISR_IT+0x1e4>
 80043ce:	e075      	b.n	80044bc <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2204      	movs	r2, #4
 80043d4:	4013      	ands	r3, r2
 80043d6:	d02f      	beq.n	8004438 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2204      	movs	r2, #4
 80043dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80043de:	d02b      	beq.n	8004438 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d14c      	bne.n	80044c0 <I2C_Slave_ISR_IT+0x1e8>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4a2a      	ldr	r2, [pc, #168]	@ (80044d4 <I2C_Slave_ISR_IT+0x1fc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d048      	beq.n	80044c0 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	0018      	movs	r0, r3
 8004432:	f000 f8f5 	bl	8004620 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004436:	e043      	b.n	80044c0 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2208      	movs	r2, #8
 800443c:	4013      	ands	r3, r2
 800443e:	d00a      	beq.n	8004456 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2208      	movs	r2, #8
 8004444:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004446:	d006      	beq.n	8004456 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	0011      	movs	r1, r2
 800444e:	0018      	movs	r0, r3
 8004450:	f000 f842 	bl	80044d8 <I2C_ITAddrCplt>
 8004454:	e035      	b.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2202      	movs	r2, #2
 800445a:	4013      	ands	r3, r2
 800445c:	d031      	beq.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004464:	d02d      	beq.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d018      	beq.n	80044a2 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	@ 0x28
 80044a0:	e00f      	b.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	2380      	movs	r3, #128	@ 0x80
 80044a6:	045b      	lsls	r3, r3, #17
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d002      	beq.n	80044b2 <I2C_Slave_ISR_IT+0x1da>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 f8b3 	bl	8004620 <I2C_ITSlaveSeqCplt>
 80044ba:	e002      	b.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	e000      	b.n	80044c2 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80044c0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2240      	movs	r2, #64	@ 0x40
 80044c6:	2100      	movs	r1, #0
 80044c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b006      	add	sp, #24
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	ffff0000 	.word	0xffff0000

080044d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044d8:	b5b0      	push	{r4, r5, r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2241      	movs	r2, #65	@ 0x41
 80044e6:	5c9b      	ldrb	r3, [r3, r2]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	001a      	movs	r2, r3
 80044ec:	2328      	movs	r3, #40	@ 0x28
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b28      	cmp	r3, #40	@ 0x28
 80044f2:	d000      	beq.n	80044f6 <I2C_ITAddrCplt+0x1e>
 80044f4:	e088      	b.n	8004608 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	250f      	movs	r5, #15
 8004502:	197b      	adds	r3, r7, r5
 8004504:	2101      	movs	r1, #1
 8004506:	400a      	ands	r2, r1
 8004508:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	b29a      	uxth	r2, r3
 8004514:	200c      	movs	r0, #12
 8004516:	183b      	adds	r3, r7, r0
 8004518:	21fe      	movs	r1, #254	@ 0xfe
 800451a:	400a      	ands	r2, r1
 800451c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	b29a      	uxth	r2, r3
 8004526:	240a      	movs	r4, #10
 8004528:	193b      	adds	r3, r7, r4
 800452a:	0592      	lsls	r2, r2, #22
 800452c:	0d92      	lsrs	r2, r2, #22
 800452e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	b29a      	uxth	r2, r3
 8004538:	2308      	movs	r3, #8
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	21fe      	movs	r1, #254	@ 0xfe
 800453e:	400a      	ands	r2, r1
 8004540:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d148      	bne.n	80045dc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800454a:	0021      	movs	r1, r4
 800454c:	187b      	adds	r3, r7, r1
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	09db      	lsrs	r3, r3, #7
 8004552:	b29a      	uxth	r2, r3
 8004554:	183b      	adds	r3, r7, r0
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	4053      	eors	r3, r2
 800455a:	b29b      	uxth	r3, r3
 800455c:	001a      	movs	r2, r3
 800455e:	2306      	movs	r3, #6
 8004560:	4013      	ands	r3, r2
 8004562:	d120      	bne.n	80045a6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004564:	183b      	adds	r3, r7, r0
 8004566:	187a      	adds	r2, r7, r1
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800457a:	2b02      	cmp	r3, #2
 800457c:	d14c      	bne.n	8004618 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2208      	movs	r2, #8
 800458a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2240      	movs	r2, #64	@ 0x40
 8004590:	2100      	movs	r1, #0
 8004592:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004594:	183b      	adds	r3, r7, r0
 8004596:	881a      	ldrh	r2, [r3, #0]
 8004598:	197b      	adds	r3, r7, r5
 800459a:	7819      	ldrb	r1, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0018      	movs	r0, r3
 80045a0:	f7ff fe79 	bl	8004296 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045a4:	e038      	b.n	8004618 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80045a6:	240c      	movs	r4, #12
 80045a8:	193b      	adds	r3, r7, r4
 80045aa:	2208      	movs	r2, #8
 80045ac:	18ba      	adds	r2, r7, r2
 80045ae:	8812      	ldrh	r2, [r2, #0]
 80045b0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	021a      	lsls	r2, r3, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 fe92 	bl	80052e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2240      	movs	r2, #64	@ 0x40
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045c8:	193b      	adds	r3, r7, r4
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	230f      	movs	r3, #15
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	7819      	ldrb	r1, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7ff fe5e 	bl	8004296 <HAL_I2C_AddrCallback>
}
 80045da:	e01d      	b.n	8004618 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045dc:	2380      	movs	r3, #128	@ 0x80
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0011      	movs	r1, r2
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 fe7d 	bl	80052e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2240      	movs	r2, #64	@ 0x40
 80045ee:	2100      	movs	r1, #0
 80045f0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045f2:	230c      	movs	r3, #12
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0018      	movs	r0, r3
 8004602:	f7ff fe48 	bl	8004296 <HAL_I2C_AddrCallback>
}
 8004606:	e007      	b.n	8004618 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2240      	movs	r2, #64	@ 0x40
 8004614:	2100      	movs	r1, #0
 8004616:	5499      	strb	r1, [r3, r2]
}
 8004618:	46c0      	nop			@ (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b004      	add	sp, #16
 800461e:	bdb0      	pop	{r4, r5, r7, pc}

08004620 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2242      	movs	r2, #66	@ 0x42
 8004634:	2100      	movs	r1, #0
 8004636:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	2380      	movs	r3, #128	@ 0x80
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	4013      	ands	r3, r2
 8004640:	d008      	beq.n	8004654 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4924      	ldr	r1, [pc, #144]	@ (80046e0 <I2C_ITSlaveSeqCplt+0xc0>)
 800464e:	400a      	ands	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e00c      	b.n	800466e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	2380      	movs	r3, #128	@ 0x80
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	4013      	ands	r3, r2
 800465c:	d007      	beq.n	800466e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	491e      	ldr	r1, [pc, #120]	@ (80046e4 <I2C_ITSlaveSeqCplt+0xc4>)
 800466a:	400a      	ands	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2241      	movs	r2, #65	@ 0x41
 8004672:	5c9b      	ldrb	r3, [r3, r2]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b29      	cmp	r3, #41	@ 0x29
 8004678:	d114      	bne.n	80046a4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2241      	movs	r2, #65	@ 0x41
 800467e:	2128      	movs	r1, #40	@ 0x28
 8004680:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2221      	movs	r2, #33	@ 0x21
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2101      	movs	r1, #1
 800468c:	0018      	movs	r0, r3
 800468e:	f000 fe29 	bl	80052e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2240      	movs	r2, #64	@ 0x40
 8004696:	2100      	movs	r1, #0
 8004698:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff fdea 	bl	8004276 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046a2:	e019      	b.n	80046d8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2241      	movs	r2, #65	@ 0x41
 80046a8:	5c9b      	ldrb	r3, [r3, r2]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80046ae:	d113      	bne.n	80046d8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2241      	movs	r2, #65	@ 0x41
 80046b4:	2128      	movs	r1, #40	@ 0x28
 80046b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2222      	movs	r2, #34	@ 0x22
 80046bc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2102      	movs	r1, #2
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 fe0e 	bl	80052e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	@ 0x40
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f7ff fdd7 	bl	8004286 <HAL_I2C_SlaveRxCpltCallback>
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b004      	add	sp, #16
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	ffffbfff 	.word	0xffffbfff
 80046e4:	ffff7fff 	.word	0xffff7fff

080046e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004704:	200b      	movs	r0, #11
 8004706:	183b      	adds	r3, r7, r0
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	2141      	movs	r1, #65	@ 0x41
 800470c:	5c52      	ldrb	r2, [r2, r1]
 800470e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2220      	movs	r2, #32
 8004716:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004718:	183b      	adds	r3, r7, r0
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b21      	cmp	r3, #33	@ 0x21
 800471e:	d003      	beq.n	8004728 <I2C_ITSlaveCplt+0x40>
 8004720:	183b      	adds	r3, r7, r0
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b29      	cmp	r3, #41	@ 0x29
 8004726:	d109      	bne.n	800473c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004728:	4aac      	ldr	r2, [pc, #688]	@ (80049dc <I2C_ITSlaveCplt+0x2f4>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f000 fdd8 	bl	80052e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2221      	movs	r2, #33	@ 0x21
 8004738:	631a      	str	r2, [r3, #48]	@ 0x30
 800473a:	e020      	b.n	800477e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800473c:	220b      	movs	r2, #11
 800473e:	18bb      	adds	r3, r7, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b22      	cmp	r3, #34	@ 0x22
 8004744:	d003      	beq.n	800474e <I2C_ITSlaveCplt+0x66>
 8004746:	18bb      	adds	r3, r7, r2
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b2a      	cmp	r3, #42	@ 0x2a
 800474c:	d109      	bne.n	8004762 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800474e:	4aa4      	ldr	r2, [pc, #656]	@ (80049e0 <I2C_ITSlaveCplt+0x2f8>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f000 fdc5 	bl	80052e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2222      	movs	r2, #34	@ 0x22
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004760:	e00d      	b.n	800477e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004762:	230b      	movs	r3, #11
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b28      	cmp	r3, #40	@ 0x28
 800476a:	d108      	bne.n	800477e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800476c:	4a9d      	ldr	r2, [pc, #628]	@ (80049e4 <I2C_ITSlaveCplt+0x2fc>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0011      	movs	r1, r2
 8004772:	0018      	movs	r0, r3
 8004774:	f000 fdb6 	bl	80052e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2180      	movs	r1, #128	@ 0x80
 800478a:	0209      	lsls	r1, r1, #8
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4993      	ldr	r1, [pc, #588]	@ (80049e8 <I2C_ITSlaveCplt+0x300>)
 800479c:	400a      	ands	r2, r1
 800479e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 faab 	bl	8004cfe <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	2380      	movs	r3, #128	@ 0x80
 80047ac:	01db      	lsls	r3, r3, #7
 80047ae:	4013      	ands	r3, r2
 80047b0:	d013      	beq.n	80047da <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	498b      	ldr	r1, [pc, #556]	@ (80049ec <I2C_ITSlaveCplt+0x304>)
 80047be:	400a      	ands	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01f      	beq.n	800480a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047d8:	e017      	b.n	800480a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	2380      	movs	r3, #128	@ 0x80
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	4013      	ands	r3, r2
 80047e2:	d012      	beq.n	800480a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4980      	ldr	r1, [pc, #512]	@ (80049f0 <I2C_ITSlaveCplt+0x308>)
 80047f0:	400a      	ands	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d006      	beq.n	800480a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2204      	movs	r2, #4
 800480e:	4013      	ands	r3, r2
 8004810:	d020      	beq.n	8004854 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2204      	movs	r2, #4
 8004816:	4393      	bics	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	2204      	movs	r2, #4
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2210      	movs	r2, #16
 800486e:	4013      	ands	r3, r2
 8004870:	d04f      	beq.n	8004912 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2210      	movs	r2, #16
 8004876:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004878:	d04b      	beq.n	8004912 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d12d      	bne.n	80048e0 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2241      	movs	r2, #65	@ 0x41
 8004888:	5c9b      	ldrb	r3, [r3, r2]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b28      	cmp	r3, #40	@ 0x28
 800488e:	d10b      	bne.n	80048a8 <I2C_ITSlaveCplt+0x1c0>
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	2380      	movs	r3, #128	@ 0x80
 8004894:	049b      	lsls	r3, r3, #18
 8004896:	429a      	cmp	r2, r3
 8004898:	d106      	bne.n	80048a8 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 f8a9 	bl	80049f8 <I2C_ITListenCplt>
 80048a6:	e034      	b.n	8004912 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2241      	movs	r2, #65	@ 0x41
 80048ac:	5c9b      	ldrb	r3, [r3, r2]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b29      	cmp	r3, #41	@ 0x29
 80048b2:	d110      	bne.n	80048d6 <I2C_ITSlaveCplt+0x1ee>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a4f      	ldr	r2, [pc, #316]	@ (80049f4 <I2C_ITSlaveCplt+0x30c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00c      	beq.n	80048d6 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2210      	movs	r2, #16
 80048c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 fa19 	bl	8004cfe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f7ff fea6 	bl	8004620 <I2C_ITSlaveSeqCplt>
 80048d4:	e01d      	b.n	8004912 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2210      	movs	r2, #16
 80048dc:	61da      	str	r2, [r3, #28]
 80048de:	e018      	b.n	8004912 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2210      	movs	r2, #16
 80048e6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	2204      	movs	r2, #4
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <I2C_ITSlaveCplt+0x21c>
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	045b      	lsls	r3, r3, #17
 8004900:	429a      	cmp	r2, r3
 8004902:	d106      	bne.n	8004912 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0011      	movs	r1, r2
 800490c:	0018      	movs	r0, r3
 800490e:	f000 f8cb 	bl	8004aa8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2242      	movs	r2, #66	@ 0x42
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0011      	movs	r1, r2
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f8b9 	bl	8004aa8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2241      	movs	r2, #65	@ 0x41
 800493a:	5c9b      	ldrb	r3, [r3, r2]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b28      	cmp	r3, #40	@ 0x28
 8004940:	d147      	bne.n	80049d2 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0011      	movs	r1, r2
 8004948:	0018      	movs	r0, r3
 800494a:	f000 f855 	bl	80049f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800494e:	e040      	b.n	80049d2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	4a27      	ldr	r2, [pc, #156]	@ (80049f4 <I2C_ITSlaveCplt+0x30c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d016      	beq.n	8004988 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f7ff fe5f 	bl	8004620 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a23      	ldr	r2, [pc, #140]	@ (80049f4 <I2C_ITSlaveCplt+0x30c>)
 8004966:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2241      	movs	r2, #65	@ 0x41
 800496c:	2120      	movs	r1, #32
 800496e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2240      	movs	r2, #64	@ 0x40
 800497a:	2100      	movs	r1, #0
 800497c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f7ff fc98 	bl	80042b6 <HAL_I2C_ListenCpltCallback>
}
 8004986:	e024      	b.n	80049d2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2241      	movs	r2, #65	@ 0x41
 800498c:	5c9b      	ldrb	r3, [r3, r2]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b22      	cmp	r3, #34	@ 0x22
 8004992:	d10f      	bne.n	80049b4 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2241      	movs	r2, #65	@ 0x41
 8004998:	2120      	movs	r1, #32
 800499a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2240      	movs	r2, #64	@ 0x40
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7ff fc6a 	bl	8004286 <HAL_I2C_SlaveRxCpltCallback>
}
 80049b2:	e00e      	b.n	80049d2 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2241      	movs	r2, #65	@ 0x41
 80049b8:	2120      	movs	r1, #32
 80049ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2240      	movs	r2, #64	@ 0x40
 80049c6:	2100      	movs	r1, #0
 80049c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff fc52 	bl	8004276 <HAL_I2C_SlaveTxCpltCallback>
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b006      	add	sp, #24
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	00008001 	.word	0x00008001
 80049e0:	00008002 	.word	0x00008002
 80049e4:	00008003 	.word	0x00008003
 80049e8:	fe00e800 	.word	0xfe00e800
 80049ec:	ffffbfff 	.word	0xffffbfff
 80049f0:	ffff7fff 	.word	0xffff7fff
 80049f4:	ffff0000 	.word	0xffff0000

080049f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a26      	ldr	r2, [pc, #152]	@ (8004aa0 <I2C_ITListenCplt+0xa8>)
 8004a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2241      	movs	r2, #65	@ 0x41
 8004a12:	2120      	movs	r1, #32
 8004a14:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2242      	movs	r2, #66	@ 0x42
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2204      	movs	r2, #4
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d022      	beq.n	8004a72 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d012      	beq.n	8004a72 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a72:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa4 <I2C_ITListenCplt+0xac>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0011      	movs	r1, r2
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f000 fc33 	bl	80052e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2210      	movs	r2, #16
 8004a84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2240      	movs	r2, #64	@ 0x40
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7ff fc10 	bl	80042b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b002      	add	sp, #8
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	ffff0000 	.word	0xffff0000
 8004aa4:	00008003 	.word	0x00008003

08004aa8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ab2:	200f      	movs	r0, #15
 8004ab4:	183b      	adds	r3, r7, r0
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	2141      	movs	r1, #65	@ 0x41
 8004aba:	5c52      	ldrb	r2, [r2, r1]
 8004abc:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2242      	movs	r2, #66	@ 0x42
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a72      	ldr	r2, [pc, #456]	@ (8004c94 <I2C_ITError+0x1ec>)
 8004aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004ade:	183b      	adds	r3, r7, r0
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b28      	cmp	r3, #40	@ 0x28
 8004ae4:	d007      	beq.n	8004af6 <I2C_ITError+0x4e>
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b29      	cmp	r3, #41	@ 0x29
 8004aec:	d003      	beq.n	8004af6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004aee:	183b      	adds	r3, r7, r0
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004af4:	d10c      	bne.n	8004b10 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2103      	movs	r1, #3
 8004afa:	0018      	movs	r0, r3
 8004afc:	f000 fbf2 	bl	80052e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2241      	movs	r2, #65	@ 0x41
 8004b04:	2128      	movs	r1, #40	@ 0x28
 8004b06:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a63      	ldr	r2, [pc, #396]	@ (8004c98 <I2C_ITError+0x1f0>)
 8004b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b0e:	e032      	b.n	8004b76 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b10:	4a62      	ldr	r2, [pc, #392]	@ (8004c9c <I2C_ITError+0x1f4>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0011      	movs	r1, r2
 8004b16:	0018      	movs	r0, r3
 8004b18:	f000 fbe4 	bl	80052e4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 f8ed 	bl	8004cfe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2241      	movs	r2, #65	@ 0x41
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b60      	cmp	r3, #96	@ 0x60
 8004b2e:	d01f      	beq.n	8004b70 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2241      	movs	r2, #65	@ 0x41
 8004b34:	2120      	movs	r1, #32
 8004b36:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d114      	bne.n	8004b70 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d109      	bne.n	8004b68 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2210      	movs	r2, #16
 8004b5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	2204      	movs	r2, #4
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03b      	beq.n	8004bfc <I2C_ITError+0x154>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b11      	cmp	r3, #17
 8004b88:	d002      	beq.n	8004b90 <I2C_ITError+0xe8>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b21      	cmp	r3, #33	@ 0x21
 8004b8e:	d135      	bne.n	8004bfc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2380      	movs	r3, #128	@ 0x80
 8004b98:	01db      	lsls	r3, r3, #7
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	01db      	lsls	r3, r3, #7
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	493c      	ldr	r1, [pc, #240]	@ (8004ca0 <I2C_ITError+0x1f8>)
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7fe fde5 	bl	8003788 <HAL_DMA_GetState>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d016      	beq.n	8004bf2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc8:	4a36      	ldr	r2, [pc, #216]	@ (8004ca4 <I2C_ITError+0x1fc>)
 8004bca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2240      	movs	r2, #64	@ 0x40
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fe fca9 	bl	8003530 <HAL_DMA_Abort_IT>
 8004bde:	1e03      	subs	r3, r0, #0
 8004be0:	d051      	beq.n	8004c86 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	0018      	movs	r0, r3
 8004bee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bf0:	e049      	b.n	8004c86 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 f859 	bl	8004cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bfa:	e044      	b.n	8004c86 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d03b      	beq.n	8004c7c <I2C_ITError+0x1d4>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b12      	cmp	r3, #18
 8004c08:	d002      	beq.n	8004c10 <I2C_ITError+0x168>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b22      	cmp	r3, #34	@ 0x22
 8004c0e:	d135      	bne.n	8004c7c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	2380      	movs	r3, #128	@ 0x80
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	2380      	movs	r3, #128	@ 0x80
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d107      	bne.n	8004c34 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	491e      	ldr	r1, [pc, #120]	@ (8004ca8 <I2C_ITError+0x200>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7fe fda5 	bl	8003788 <HAL_DMA_GetState>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d016      	beq.n	8004c72 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c48:	4a16      	ldr	r2, [pc, #88]	@ (8004ca4 <I2C_ITError+0x1fc>)
 8004c4a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2240      	movs	r2, #64	@ 0x40
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7fe fc69 	bl	8003530 <HAL_DMA_Abort_IT>
 8004c5e:	1e03      	subs	r3, r0, #0
 8004c60:	d013      	beq.n	8004c8a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c70:	e00b      	b.n	8004c8a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 f819 	bl	8004cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c7a:	e006      	b.n	8004c8a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 f814 	bl	8004cac <I2C_TreatErrorCallback>
  }
}
 8004c84:	e002      	b.n	8004c8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	e000      	b.n	8004c8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c8a:	46c0      	nop			@ (mov r8, r8)
}
 8004c8c:	46c0      	nop			@ (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b004      	add	sp, #16
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	ffff0000 	.word	0xffff0000
 8004c98:	080042d9 	.word	0x080042d9
 8004c9c:	00008003 	.word	0x00008003
 8004ca0:	ffffbfff 	.word	0xffffbfff
 8004ca4:	08004d43 	.word	0x08004d43
 8004ca8:	ffff7fff 	.word	0xffff7fff

08004cac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2241      	movs	r2, #65	@ 0x41
 8004cb8:	5c9b      	ldrb	r3, [r3, r2]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b60      	cmp	r3, #96	@ 0x60
 8004cbe:	d10f      	bne.n	8004ce0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2241      	movs	r2, #65	@ 0x41
 8004cc4:	2120      	movs	r1, #32
 8004cc6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2240      	movs	r2, #64	@ 0x40
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7ff faf4 	bl	80042c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cde:	e00a      	b.n	8004cf6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2240      	movs	r2, #64	@ 0x40
 8004cea:	2100      	movs	r1, #0
 8004cec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7fb fb7f 	bl	80003f4 <HAL_I2C_ErrorCallback>
}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b002      	add	sp, #8
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d103      	bne.n	8004d1c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2201      	movs	r2, #1
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d007      	beq.n	8004d3a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699a      	ldr	r2, [r3, #24]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2101      	movs	r1, #1
 8004d36:	430a      	orrs	r2, r1
 8004d38:	619a      	str	r2, [r3, #24]
  }
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7ff ff9a 	bl	8004cac <I2C_TreatErrorCallback>
}
 8004d78:	46c0      	nop			@ (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	1dfb      	adds	r3, r7, #7
 8004d8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d90:	e03a      	b.n	8004e08 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 f971 	bl	8005080 <I2C_IsErrorOccurred>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e040      	b.n	8004e28 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	d02d      	beq.n	8004e08 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dac:	f7fd f9aa 	bl	8002104 <HAL_GetTick>
 8004db0:	0002      	movs	r2, r0
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d302      	bcc.n	8004dc2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d122      	bne.n	8004e08 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	425a      	negs	r2, r3
 8004dd2:	4153      	adcs	r3, r2
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	001a      	movs	r2, r3
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d113      	bne.n	8004e08 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de4:	2220      	movs	r2, #32
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2241      	movs	r2, #65	@ 0x41
 8004df0:	2120      	movs	r1, #32
 8004df2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2242      	movs	r2, #66	@ 0x42
 8004df8:	2100      	movs	r1, #0
 8004dfa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2240      	movs	r2, #64	@ 0x40
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e00f      	b.n	8004e28 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	425a      	negs	r2, r3
 8004e18:	4153      	adcs	r3, r2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d0b5      	beq.n	8004d92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b004      	add	sp, #16
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e3c:	e032      	b.n	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 f91b 	bl	8005080 <I2C_IsErrorOccurred>
 8004e4a:	1e03      	subs	r3, r0, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e030      	b.n	8004eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	3301      	adds	r3, #1
 8004e56:	d025      	beq.n	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e58:	f7fd f954 	bl	8002104 <HAL_GetTick>
 8004e5c:	0002      	movs	r2, r0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d302      	bcc.n	8004e6e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11a      	bne.n	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	2202      	movs	r2, #2
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d013      	beq.n	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e80:	2220      	movs	r2, #32
 8004e82:	431a      	orrs	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2241      	movs	r2, #65	@ 0x41
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2242      	movs	r2, #66	@ 0x42
 8004e94:	2100      	movs	r1, #0
 8004e96:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2240      	movs	r2, #64	@ 0x40
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e007      	b.n	8004eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d1c5      	bne.n	8004e3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec8:	e02f      	b.n	8004f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 f8d5 	bl	8005080 <I2C_IsErrorOccurred>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e02d      	b.n	8004f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ede:	f7fd f911 	bl	8002104 <HAL_GetTick>
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d302      	bcc.n	8004ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11a      	bne.n	8004f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2220      	movs	r2, #32
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d013      	beq.n	8004f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f06:	2220      	movs	r2, #32
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2241      	movs	r2, #65	@ 0x41
 8004f12:	2120      	movs	r1, #32
 8004f14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2242      	movs	r2, #66	@ 0x42
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2240      	movs	r2, #64	@ 0x40
 8004f22:	2100      	movs	r1, #0
 8004f24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e007      	b.n	8004f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2220      	movs	r2, #32
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d1c8      	bne.n	8004eca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2317      	movs	r3, #23
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004f58:	e07b      	b.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 f88d 	bl	8005080 <I2C_IsErrorOccurred>
 8004f66:	1e03      	subs	r3, r0, #0
 8004f68:	d003      	beq.n	8004f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004f6a:	2317      	movs	r3, #23
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d140      	bne.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004f80:	2117      	movs	r1, #23
 8004f82:	187b      	adds	r3, r7, r1
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d13b      	bne.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2204      	movs	r2, #4
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d106      	bne.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004fa0:	187b      	adds	r3, r7, r1
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2210      	movs	r2, #16
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d123      	bne.n	8004ffc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4929      	ldr	r1, [pc, #164]	@ (800507c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004fd6:	400a      	ands	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2241      	movs	r2, #65	@ 0x41
 8004fde:	2120      	movs	r1, #32
 8004fe0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2242      	movs	r2, #66	@ 0x42
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2240      	movs	r2, #64	@ 0x40
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004ff2:	2317      	movs	r3, #23
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e002      	b.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005002:	f7fd f87f 	bl	8002104 <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11c      	bne.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8005018:	2017      	movs	r0, #23
 800501a:	183b      	adds	r3, r7, r0
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d117      	bne.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2204      	movs	r2, #4
 800502a:	4013      	ands	r3, r2
 800502c:	2b04      	cmp	r3, #4
 800502e:	d010      	beq.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005034:	2220      	movs	r2, #32
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2241      	movs	r2, #65	@ 0x41
 8005040:	2120      	movs	r1, #32
 8005042:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2240      	movs	r2, #64	@ 0x40
 8005048:	2100      	movs	r1, #0
 800504a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800504c:	183b      	adds	r3, r7, r0
 800504e:	2201      	movs	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2204      	movs	r2, #4
 800505a:	4013      	ands	r3, r2
 800505c:	2b04      	cmp	r3, #4
 800505e:	d005      	beq.n	800506c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005060:	2317      	movs	r3, #23
 8005062:	18fb      	adds	r3, r7, r3
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d100      	bne.n	800506c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800506a:	e776      	b.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800506c:	2317      	movs	r3, #23
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	781b      	ldrb	r3, [r3, #0]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b006      	add	sp, #24
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	fe00e800 	.word	0xfe00e800

08005080 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	@ 0x28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2327      	movs	r3, #39	@ 0x27
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2210      	movs	r2, #16
 80050a8:	4013      	ands	r3, r2
 80050aa:	d100      	bne.n	80050ae <I2C_IsErrorOccurred+0x2e>
 80050ac:	e079      	b.n	80051a2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2210      	movs	r2, #16
 80050b4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050b6:	e057      	b.n	8005168 <I2C_IsErrorOccurred+0xe8>
 80050b8:	2227      	movs	r2, #39	@ 0x27
 80050ba:	18bb      	adds	r3, r7, r2
 80050bc:	18ba      	adds	r2, r7, r2
 80050be:	7812      	ldrb	r2, [r2, #0]
 80050c0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	3301      	adds	r3, #1
 80050c6:	d04f      	beq.n	8005168 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050c8:	f7fd f81c 	bl	8002104 <HAL_GetTick>
 80050cc:	0002      	movs	r2, r0
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d302      	bcc.n	80050de <I2C_IsErrorOccurred+0x5e>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d144      	bne.n	8005168 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	01db      	lsls	r3, r3, #7
 80050e8:	4013      	ands	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050ec:	2013      	movs	r0, #19
 80050ee:	183b      	adds	r3, r7, r0
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	2142      	movs	r1, #66	@ 0x42
 80050f4:	5c52      	ldrb	r2, [r2, r1]
 80050f6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	401a      	ands	r2, r3
 8005104:	2380      	movs	r3, #128	@ 0x80
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	429a      	cmp	r2, r3
 800510a:	d126      	bne.n	800515a <I2C_IsErrorOccurred+0xda>
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	01db      	lsls	r3, r3, #7
 8005112:	429a      	cmp	r2, r3
 8005114:	d021      	beq.n	800515a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005116:	183b      	adds	r3, r7, r0
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b20      	cmp	r3, #32
 800511c:	d01d      	beq.n	800515a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2180      	movs	r1, #128	@ 0x80
 800512a:	01c9      	lsls	r1, r1, #7
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005130:	f7fc ffe8 	bl	8002104 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005138:	e00f      	b.n	800515a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800513a:	f7fc ffe3 	bl	8002104 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b19      	cmp	r3, #25
 8005146:	d908      	bls.n	800515a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2220      	movs	r2, #32
 800514c:	4313      	orrs	r3, r2
 800514e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005150:	2327      	movs	r3, #39	@ 0x27
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	2201      	movs	r2, #1
 8005156:	701a      	strb	r2, [r3, #0]

              break;
 8005158:	e006      	b.n	8005168 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2220      	movs	r2, #32
 8005162:	4013      	ands	r3, r2
 8005164:	2b20      	cmp	r3, #32
 8005166:	d1e8      	bne.n	800513a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2220      	movs	r2, #32
 8005170:	4013      	ands	r3, r2
 8005172:	2b20      	cmp	r3, #32
 8005174:	d004      	beq.n	8005180 <I2C_IsErrorOccurred+0x100>
 8005176:	2327      	movs	r3, #39	@ 0x27
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d09b      	beq.n	80050b8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005180:	2327      	movs	r3, #39	@ 0x27
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2220      	movs	r2, #32
 8005190:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2204      	movs	r2, #4
 8005196:	4313      	orrs	r3, r2
 8005198:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800519a:	2327      	movs	r3, #39	@ 0x27
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	2380      	movs	r3, #128	@ 0x80
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	d00c      	beq.n	80051ce <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2201      	movs	r2, #1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2280      	movs	r2, #128	@ 0x80
 80051c2:	0052      	lsls	r2, r2, #1
 80051c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051c6:	2327      	movs	r3, #39	@ 0x27
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4013      	ands	r3, r2
 80051d6:	d00c      	beq.n	80051f2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	2208      	movs	r2, #8
 80051dc:	4313      	orrs	r3, r2
 80051de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2280      	movs	r2, #128	@ 0x80
 80051e6:	00d2      	lsls	r2, r2, #3
 80051e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051ea:	2327      	movs	r3, #39	@ 0x27
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	2201      	movs	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	2380      	movs	r3, #128	@ 0x80
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d00c      	beq.n	8005216 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2202      	movs	r2, #2
 8005200:	4313      	orrs	r3, r2
 8005202:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2280      	movs	r2, #128	@ 0x80
 800520a:	0092      	lsls	r2, r2, #2
 800520c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800520e:	2327      	movs	r3, #39	@ 0x27
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005216:	2327      	movs	r3, #39	@ 0x27
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01d      	beq.n	800525c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff fd6b 	bl	8004cfe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	490e      	ldr	r1, [pc, #56]	@ (800526c <I2C_IsErrorOccurred+0x1ec>)
 8005234:	400a      	ands	r2, r1
 8005236:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	431a      	orrs	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2241      	movs	r2, #65	@ 0x41
 8005248:	2120      	movs	r1, #32
 800524a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2242      	movs	r2, #66	@ 0x42
 8005250:	2100      	movs	r1, #0
 8005252:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2240      	movs	r2, #64	@ 0x40
 8005258:	2100      	movs	r1, #0
 800525a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800525c:	2327      	movs	r3, #39	@ 0x27
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b00a      	add	sp, #40	@ 0x28
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	fe00e800 	.word	0xfe00e800

08005270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	0008      	movs	r0, r1
 800527a:	0011      	movs	r1, r2
 800527c:	607b      	str	r3, [r7, #4]
 800527e:	240a      	movs	r4, #10
 8005280:	193b      	adds	r3, r7, r4
 8005282:	1c02      	adds	r2, r0, #0
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	2009      	movs	r0, #9
 8005288:	183b      	adds	r3, r7, r0
 800528a:	1c0a      	adds	r2, r1, #0
 800528c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800528e:	193b      	adds	r3, r7, r4
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	059b      	lsls	r3, r3, #22
 8005294:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005296:	183b      	adds	r3, r7, r0
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	0419      	lsls	r1, r3, #16
 800529c:	23ff      	movs	r3, #255	@ 0xff
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052a2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	4313      	orrs	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ba:	0d51      	lsrs	r1, r2, #21
 80052bc:	2280      	movs	r2, #128	@ 0x80
 80052be:	00d2      	lsls	r2, r2, #3
 80052c0:	400a      	ands	r2, r1
 80052c2:	4907      	ldr	r1, [pc, #28]	@ (80052e0 <I2C_TransferConfig+0x70>)
 80052c4:	430a      	orrs	r2, r1
 80052c6:	43d2      	mvns	r2, r2
 80052c8:	401a      	ands	r2, r3
 80052ca:	0011      	movs	r1, r2
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b007      	add	sp, #28
 80052dc:	bd90      	pop	{r4, r7, pc}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	03ff63ff 	.word	0x03ff63ff

080052e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	000a      	movs	r2, r1
 80052ee:	1cbb      	adds	r3, r7, #2
 80052f0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80052f6:	1cbb      	adds	r3, r7, #2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	4013      	ands	r3, r2
 80052fe:	d010      	beq.n	8005322 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2242      	movs	r2, #66	@ 0x42
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2241      	movs	r2, #65	@ 0x41
 800530c:	5c9b      	ldrb	r3, [r3, r2]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	001a      	movs	r2, r3
 8005312:	2328      	movs	r3, #40	@ 0x28
 8005314:	4013      	ands	r3, r2
 8005316:	2b28      	cmp	r3, #40	@ 0x28
 8005318:	d003      	beq.n	8005322 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	22b0      	movs	r2, #176	@ 0xb0
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005322:	1cbb      	adds	r3, r7, #2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	2202      	movs	r2, #2
 8005328:	4013      	ands	r3, r2
 800532a:	d010      	beq.n	800534e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2244      	movs	r2, #68	@ 0x44
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2241      	movs	r2, #65	@ 0x41
 8005338:	5c9b      	ldrb	r3, [r3, r2]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	001a      	movs	r2, r3
 800533e:	2328      	movs	r3, #40	@ 0x28
 8005340:	4013      	ands	r3, r2
 8005342:	2b28      	cmp	r3, #40	@ 0x28
 8005344:	d003      	beq.n	800534e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	22b0      	movs	r2, #176	@ 0xb0
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800534e:	1cbb      	adds	r3, r7, #2
 8005350:	2200      	movs	r2, #0
 8005352:	5e9b      	ldrsh	r3, [r3, r2]
 8005354:	2b00      	cmp	r3, #0
 8005356:	da03      	bge.n	8005360 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	22b8      	movs	r2, #184	@ 0xb8
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005360:	1cbb      	adds	r3, r7, #2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	2b10      	cmp	r3, #16
 8005366:	d103      	bne.n	8005370 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2290      	movs	r2, #144	@ 0x90
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005370:	1cbb      	adds	r3, r7, #2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	2b20      	cmp	r3, #32
 8005376:	d103      	bne.n	8005380 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005380:	1cbb      	adds	r3, r7, #2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	d103      	bne.n	8005390 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2240      	movs	r2, #64	@ 0x40
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	43d9      	mvns	r1, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	400a      	ands	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b004      	add	sp, #16
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2241      	movs	r2, #65	@ 0x41
 80053ba:	5c9b      	ldrb	r3, [r3, r2]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d138      	bne.n	8005434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2240      	movs	r2, #64	@ 0x40
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e032      	b.n	8005436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2240      	movs	r2, #64	@ 0x40
 80053d4:	2101      	movs	r1, #1
 80053d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2241      	movs	r2, #65	@ 0x41
 80053dc:	2124      	movs	r1, #36	@ 0x24
 80053de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2101      	movs	r1, #1
 80053ec:	438a      	bics	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4911      	ldr	r1, [pc, #68]	@ (8005440 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80053fc:	400a      	ands	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6819      	ldr	r1, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2101      	movs	r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2241      	movs	r2, #65	@ 0x41
 8005424:	2120      	movs	r1, #32
 8005426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2240      	movs	r2, #64	@ 0x40
 800542c:	2100      	movs	r1, #0
 800542e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b002      	add	sp, #8
 800543c:	bd80      	pop	{r7, pc}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	ffffefff 	.word	0xffffefff

08005444 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2241      	movs	r2, #65	@ 0x41
 8005452:	5c9b      	ldrb	r3, [r3, r2]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b20      	cmp	r3, #32
 8005458:	d139      	bne.n	80054ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2240      	movs	r2, #64	@ 0x40
 800545e:	5c9b      	ldrb	r3, [r3, r2]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005464:	2302      	movs	r3, #2
 8005466:	e033      	b.n	80054d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2240      	movs	r2, #64	@ 0x40
 800546c:	2101      	movs	r1, #1
 800546e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2241      	movs	r2, #65	@ 0x41
 8005474:	2124      	movs	r1, #36	@ 0x24
 8005476:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2101      	movs	r1, #1
 8005484:	438a      	bics	r2, r1
 8005486:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a11      	ldr	r2, [pc, #68]	@ (80054d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2101      	movs	r1, #1
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2241      	movs	r2, #65	@ 0x41
 80054be:	2120      	movs	r1, #32
 80054c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2240      	movs	r2, #64	@ 0x40
 80054c6:	2100      	movs	r1, #0
 80054c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e000      	b.n	80054d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054ce:	2302      	movs	r3, #2
  }
}
 80054d0:	0018      	movs	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b004      	add	sp, #16
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	fffff0ff 	.word	0xfffff0ff

080054dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e20f      	b.n	800590e <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	4013      	ands	r3, r2
 80054f6:	d100      	bne.n	80054fa <HAL_RCC_OscConfig+0x1e>
 80054f8:	e069      	b.n	80055ce <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054fa:	4bc8      	ldr	r3, [pc, #800]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2238      	movs	r2, #56	@ 0x38
 8005500:	4013      	ands	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d105      	bne.n	8005516 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d15d      	bne.n	80055ce <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e1fb      	b.n	800590e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	025b      	lsls	r3, r3, #9
 800551e:	429a      	cmp	r2, r3
 8005520:	d107      	bne.n	8005532 <HAL_RCC_OscConfig+0x56>
 8005522:	4bbe      	ldr	r3, [pc, #760]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4bbd      	ldr	r3, [pc, #756]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005528:	2180      	movs	r1, #128	@ 0x80
 800552a:	0249      	lsls	r1, r1, #9
 800552c:	430a      	orrs	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e020      	b.n	8005574 <HAL_RCC_OscConfig+0x98>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	23a0      	movs	r3, #160	@ 0xa0
 8005538:	02db      	lsls	r3, r3, #11
 800553a:	429a      	cmp	r2, r3
 800553c:	d10e      	bne.n	800555c <HAL_RCC_OscConfig+0x80>
 800553e:	4bb7      	ldr	r3, [pc, #732]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4bb6      	ldr	r3, [pc, #728]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	02c9      	lsls	r1, r1, #11
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	4bb3      	ldr	r3, [pc, #716]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4bb2      	ldr	r3, [pc, #712]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005552:	2180      	movs	r1, #128	@ 0x80
 8005554:	0249      	lsls	r1, r1, #9
 8005556:	430a      	orrs	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0x98>
 800555c:	4baf      	ldr	r3, [pc, #700]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4bae      	ldr	r3, [pc, #696]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005562:	49af      	ldr	r1, [pc, #700]	@ (8005820 <HAL_RCC_OscConfig+0x344>)
 8005564:	400a      	ands	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	4bac      	ldr	r3, [pc, #688]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4bab      	ldr	r3, [pc, #684]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800556e:	49ad      	ldr	r1, [pc, #692]	@ (8005824 <HAL_RCC_OscConfig+0x348>)
 8005570:	400a      	ands	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d014      	beq.n	80055a6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fc fdc2 	bl	8002104 <HAL_GetTick>
 8005580:	0003      	movs	r3, r0
 8005582:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005586:	f7fc fdbd 	bl	8002104 <HAL_GetTick>
 800558a:	0002      	movs	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b64      	cmp	r3, #100	@ 0x64
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1ba      	b.n	800590e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005598:	4ba0      	ldr	r3, [pc, #640]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	029b      	lsls	r3, r3, #10
 80055a0:	4013      	ands	r3, r2
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0xaa>
 80055a4:	e013      	b.n	80055ce <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fc fdad 	bl	8002104 <HAL_GetTick>
 80055aa:	0003      	movs	r3, r0
 80055ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80055b0:	f7fc fda8 	bl	8002104 <HAL_GetTick>
 80055b4:	0002      	movs	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	@ 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e1a5      	b.n	800590e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055c2:	4b96      	ldr	r3, [pc, #600]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	2380      	movs	r3, #128	@ 0x80
 80055c8:	029b      	lsls	r3, r3, #10
 80055ca:	4013      	ands	r3, r2
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2202      	movs	r2, #2
 80055d4:	4013      	ands	r3, r2
 80055d6:	d100      	bne.n	80055da <HAL_RCC_OscConfig+0xfe>
 80055d8:	e086      	b.n	80056e8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055da:	4b90      	ldr	r3, [pc, #576]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2238      	movs	r2, #56	@ 0x38
 80055e0:	4013      	ands	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d12f      	bne.n	800564a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e18b      	b.n	800590e <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f6:	4b89      	ldr	r3, [pc, #548]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4a8b      	ldr	r2, [pc, #556]	@ (8005828 <HAL_RCC_OscConfig+0x34c>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	4b85      	ldr	r3, [pc, #532]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d112      	bne.n	8005638 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005612:	4b82      	ldr	r3, [pc, #520]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a85      	ldr	r2, [pc, #532]	@ (800582c <HAL_RCC_OscConfig+0x350>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	4b7e      	ldr	r3, [pc, #504]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005626:	4b7d      	ldr	r3, [pc, #500]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	0adb      	lsrs	r3, r3, #11
 800562c:	2207      	movs	r2, #7
 800562e:	4013      	ands	r3, r2
 8005630:	4a7f      	ldr	r2, [pc, #508]	@ (8005830 <HAL_RCC_OscConfig+0x354>)
 8005632:	40da      	lsrs	r2, r3
 8005634:	4b7f      	ldr	r3, [pc, #508]	@ (8005834 <HAL_RCC_OscConfig+0x358>)
 8005636:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005638:	4b7f      	ldr	r3, [pc, #508]	@ (8005838 <HAL_RCC_OscConfig+0x35c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	0018      	movs	r0, r3
 800563e:	f7fc fd05 	bl	800204c <HAL_InitTick>
 8005642:	1e03      	subs	r3, r0, #0
 8005644:	d050      	beq.n	80056e8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e161      	b.n	800590e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d030      	beq.n	80056b4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005652:	4b72      	ldr	r3, [pc, #456]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a75      	ldr	r2, [pc, #468]	@ (800582c <HAL_RCC_OscConfig+0x350>)
 8005658:	4013      	ands	r3, r2
 800565a:	0019      	movs	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	4b6e      	ldr	r3, [pc, #440]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005662:	430a      	orrs	r2, r1
 8005664:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8005666:	4b6d      	ldr	r3, [pc, #436]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b6c      	ldr	r3, [pc, #432]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800566c:	2180      	movs	r1, #128	@ 0x80
 800566e:	0049      	lsls	r1, r1, #1
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fc fd46 	bl	8002104 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800567e:	f7fc fd41 	bl	8002104 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e13e      	b.n	800590e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b62      	ldr	r3, [pc, #392]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4013      	ands	r3, r2
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569c:	4b5f      	ldr	r3, [pc, #380]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a61      	ldr	r2, [pc, #388]	@ (8005828 <HAL_RCC_OscConfig+0x34c>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	4b5b      	ldr	r3, [pc, #364]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e019      	b.n	80056e8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80056b4:	4b59      	ldr	r3, [pc, #356]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b58      	ldr	r3, [pc, #352]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80056ba:	4960      	ldr	r1, [pc, #384]	@ (800583c <HAL_RCC_OscConfig+0x360>)
 80056bc:	400a      	ands	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fc fd20 	bl	8002104 <HAL_GetTick>
 80056c4:	0003      	movs	r3, r0
 80056c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80056ca:	f7fc fd1b 	bl	8002104 <HAL_GetTick>
 80056ce:	0002      	movs	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e118      	b.n	800590e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056dc:	4b4f      	ldr	r3, [pc, #316]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4013      	ands	r3, r2
 80056e6:	d1f0      	bne.n	80056ca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2208      	movs	r2, #8
 80056ee:	4013      	ands	r3, r2
 80056f0:	d042      	beq.n	8005778 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80056f2:	4b4a      	ldr	r3, [pc, #296]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2238      	movs	r2, #56	@ 0x38
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b18      	cmp	r3, #24
 80056fc:	d105      	bne.n	800570a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d138      	bne.n	8005778 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e101      	b.n	800590e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005712:	4b42      	ldr	r3, [pc, #264]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005714:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005716:	4b41      	ldr	r3, [pc, #260]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fc fcf1 	bl	8002104 <HAL_GetTick>
 8005722:	0003      	movs	r3, r0
 8005724:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005728:	f7fc fcec 	bl	8002104 <HAL_GetTick>
 800572c:	0002      	movs	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0e9      	b.n	800590e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800573a:	4b38      	ldr	r3, [pc, #224]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800573c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573e:	2202      	movs	r2, #2
 8005740:	4013      	ands	r3, r2
 8005742:	d0f1      	beq.n	8005728 <HAL_RCC_OscConfig+0x24c>
 8005744:	e018      	b.n	8005778 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005746:	4b35      	ldr	r3, [pc, #212]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005748:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800574a:	4b34      	ldr	r3, [pc, #208]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800574c:	2101      	movs	r1, #1
 800574e:	438a      	bics	r2, r1
 8005750:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005752:	f7fc fcd7 	bl	8002104 <HAL_GetTick>
 8005756:	0003      	movs	r3, r0
 8005758:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800575c:	f7fc fcd2 	bl	8002104 <HAL_GetTick>
 8005760:	0002      	movs	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e0cf      	b.n	800590e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800576e:	4b2b      	ldr	r3, [pc, #172]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 8005770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005772:	2202      	movs	r2, #2
 8005774:	4013      	ands	r3, r2
 8005776:	d1f1      	bne.n	800575c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2204      	movs	r2, #4
 800577e:	4013      	ands	r3, r2
 8005780:	d100      	bne.n	8005784 <HAL_RCC_OscConfig+0x2a8>
 8005782:	e084      	b.n	800588e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005784:	230f      	movs	r3, #15
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800578c:	4b23      	ldr	r3, [pc, #140]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2238      	movs	r2, #56	@ 0x38
 8005792:	4013      	ands	r3, r2
 8005794:	2b20      	cmp	r3, #32
 8005796:	d106      	bne.n	80057a6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d000      	beq.n	80057a2 <HAL_RCC_OscConfig+0x2c6>
 80057a0:	e075      	b.n	800588e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e0b3      	b.n	800590e <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d106      	bne.n	80057bc <HAL_RCC_OscConfig+0x2e0>
 80057ae:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057b2:	4b1a      	ldr	r3, [pc, #104]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057b4:	2101      	movs	r1, #1
 80057b6:	430a      	orrs	r2, r1
 80057b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057ba:	e01c      	b.n	80057f6 <HAL_RCC_OscConfig+0x31a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d10c      	bne.n	80057de <HAL_RCC_OscConfig+0x302>
 80057c4:	4b15      	ldr	r3, [pc, #84]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057c8:	4b14      	ldr	r3, [pc, #80]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057ca:	2104      	movs	r1, #4
 80057cc:	430a      	orrs	r2, r1
 80057ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057d0:	4b12      	ldr	r3, [pc, #72]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057d4:	4b11      	ldr	r3, [pc, #68]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057d6:	2101      	movs	r1, #1
 80057d8:	430a      	orrs	r2, r1
 80057da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057dc:	e00b      	b.n	80057f6 <HAL_RCC_OscConfig+0x31a>
 80057de:	4b0f      	ldr	r3, [pc, #60]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057e2:	4b0e      	ldr	r3, [pc, #56]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057e4:	2101      	movs	r1, #1
 80057e6:	438a      	bics	r2, r1
 80057e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057ea:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057ee:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <HAL_RCC_OscConfig+0x340>)
 80057f0:	2104      	movs	r1, #4
 80057f2:	438a      	bics	r2, r1
 80057f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d028      	beq.n	8005850 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fc fc81 	bl	8002104 <HAL_GetTick>
 8005802:	0003      	movs	r3, r0
 8005804:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005806:	e01d      	b.n	8005844 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005808:	f7fc fc7c 	bl	8002104 <HAL_GetTick>
 800580c:	0002      	movs	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	4a0b      	ldr	r2, [pc, #44]	@ (8005840 <HAL_RCC_OscConfig+0x364>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d915      	bls.n	8005844 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e078      	b.n	800590e <HAL_RCC_OscConfig+0x432>
 800581c:	40021000 	.word	0x40021000
 8005820:	fffeffff 	.word	0xfffeffff
 8005824:	fffbffff 	.word	0xfffbffff
 8005828:	ffff80ff 	.word	0xffff80ff
 800582c:	ffffc7ff 	.word	0xffffc7ff
 8005830:	02dc6c00 	.word	0x02dc6c00
 8005834:	20000074 	.word	0x20000074
 8005838:	20000078 	.word	0x20000078
 800583c:	fffffeff 	.word	0xfffffeff
 8005840:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005844:	4b34      	ldr	r3, [pc, #208]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 8005846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005848:	2202      	movs	r2, #2
 800584a:	4013      	ands	r3, r2
 800584c:	d0dc      	beq.n	8005808 <HAL_RCC_OscConfig+0x32c>
 800584e:	e013      	b.n	8005878 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fc fc58 	bl	8002104 <HAL_GetTick>
 8005854:	0003      	movs	r3, r0
 8005856:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005858:	e009      	b.n	800586e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fc fc53 	bl	8002104 <HAL_GetTick>
 800585e:	0002      	movs	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	4a2d      	ldr	r2, [pc, #180]	@ (800591c <HAL_RCC_OscConfig+0x440>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e04f      	b.n	800590e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800586e:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	2202      	movs	r2, #2
 8005874:	4013      	ands	r3, r2
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005878:	230f      	movs	r3, #15
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005882:	4b25      	ldr	r3, [pc, #148]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 8005884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005886:	4b24      	ldr	r3, [pc, #144]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 8005888:	4925      	ldr	r1, [pc, #148]	@ (8005920 <HAL_RCC_OscConfig+0x444>)
 800588a:	400a      	ands	r2, r1
 800588c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2210      	movs	r2, #16
 8005894:	4013      	ands	r3, r2
 8005896:	d039      	beq.n	800590c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 80058a6:	2180      	movs	r1, #128	@ 0x80
 80058a8:	03c9      	lsls	r1, r1, #15
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ae:	f7fc fc29 	bl	8002104 <HAL_GetTick>
 80058b2:	0003      	movs	r3, r0
 80058b4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058b8:	f7fc fc24 	bl	8002104 <HAL_GetTick>
 80058bc:	0002      	movs	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e021      	b.n	800590e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80058ca:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	2380      	movs	r3, #128	@ 0x80
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	4013      	ands	r3, r2
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x3dc>
 80058d6:	e019      	b.n	800590c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 80058de:	4911      	ldr	r1, [pc, #68]	@ (8005924 <HAL_RCC_OscConfig+0x448>)
 80058e0:	400a      	ands	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fc fc0e 	bl	8002104 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058ee:	f7fc fc09 	bl	8002104 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e006      	b.n	800590e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_RCC_OscConfig+0x43c>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	4013      	ands	r3, r2
 800590a:	d1f0      	bne.n	80058ee <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	0018      	movs	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	b006      	add	sp, #24
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	40021000 	.word	0x40021000
 800591c:	00001388 	.word	0x00001388
 8005920:	efffffff 	.word	0xefffffff
 8005924:	ffbfffff 	.word	0xffbfffff

08005928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0f6      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800593c:	4b7d      	ldr	r3, [pc, #500]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2207      	movs	r2, #7
 8005942:	4013      	ands	r3, r2
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d91e      	bls.n	8005988 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2207      	movs	r2, #7
 8005950:	4393      	bics	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	4b77      	ldr	r3, [pc, #476]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800595c:	f7fc fbd2 	bl	8002104 <HAL_GetTick>
 8005960:	0003      	movs	r3, r0
 8005962:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005964:	e009      	b.n	800597a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005966:	f7fc fbcd 	bl	8002104 <HAL_GetTick>
 800596a:	0002      	movs	r2, r0
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	4a71      	ldr	r2, [pc, #452]	@ (8005b38 <HAL_RCC_ClockConfig+0x210>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e0d7      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800597a:	4b6e      	ldr	r3, [pc, #440]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2207      	movs	r2, #7
 8005980:	4013      	ands	r3, r2
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d1ee      	bne.n	8005966 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2202      	movs	r2, #2
 800598e:	4013      	ands	r3, r2
 8005990:	d017      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2204      	movs	r2, #4
 8005998:	4013      	ands	r3, r2
 800599a:	d008      	beq.n	80059ae <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800599c:	4b67      	ldr	r3, [pc, #412]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a67      	ldr	r2, [pc, #412]	@ (8005b40 <HAL_RCC_ClockConfig+0x218>)
 80059a2:	401a      	ands	r2, r3
 80059a4:	4b65      	ldr	r3, [pc, #404]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 80059a6:	21b0      	movs	r1, #176	@ 0xb0
 80059a8:	0109      	lsls	r1, r1, #4
 80059aa:	430a      	orrs	r2, r1
 80059ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ae:	4b63      	ldr	r3, [pc, #396]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4a64      	ldr	r2, [pc, #400]	@ (8005b44 <HAL_RCC_ClockConfig+0x21c>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	0019      	movs	r1, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	4b5f      	ldr	r3, [pc, #380]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	4013      	ands	r3, r2
 80059ca:	d100      	bne.n	80059ce <HAL_RCC_ClockConfig+0xa6>
 80059cc:	e061      	b.n	8005a92 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80059ce:	4b5b      	ldr	r3, [pc, #364]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	221c      	movs	r2, #28
 80059d4:	4393      	bics	r3, r2
 80059d6:	0019      	movs	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	4b57      	ldr	r3, [pc, #348]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 80059de:	430a      	orrs	r2, r1
 80059e0:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ea:	4b54      	ldr	r3, [pc, #336]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	2380      	movs	r3, #128	@ 0x80
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	4013      	ands	r3, r2
 80059f4:	d12b      	bne.n	8005a4e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e097      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a02:	4b4e      	ldr	r3, [pc, #312]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	2380      	movs	r3, #128	@ 0x80
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d11f      	bne.n	8005a4e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e08b      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005a1a:	4b48      	ldr	r3, [pc, #288]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	4013      	ands	r3, r2
 8005a24:	d113      	bne.n	8005a4e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d106      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005a32:	4b42      	ldr	r3, [pc, #264]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a36:	2202      	movs	r2, #2
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e074      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005a40:	4b3e      	ldr	r3, [pc, #248]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a44:	2202      	movs	r2, #2
 8005a46:	4013      	ands	r3, r2
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e06d      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2207      	movs	r2, #7
 8005a54:	4393      	bics	r3, r2
 8005a56:	0019      	movs	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4b37      	ldr	r3, [pc, #220]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a62:	f7fc fb4f 	bl	8002104 <HAL_GetTick>
 8005a66:	0003      	movs	r3, r0
 8005a68:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	e009      	b.n	8005a80 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005a6c:	f7fc fb4a 	bl	8002104 <HAL_GetTick>
 8005a70:	0002      	movs	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	4a30      	ldr	r2, [pc, #192]	@ (8005b38 <HAL_RCC_ClockConfig+0x210>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e054      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a80:	4b2e      	ldr	r3, [pc, #184]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2238      	movs	r2, #56	@ 0x38
 8005a86:	401a      	ands	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d1ec      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a92:	4b28      	ldr	r3, [pc, #160]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2207      	movs	r2, #7
 8005a98:	4013      	ands	r3, r2
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d21e      	bcs.n	8005ade <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa0:	4b24      	ldr	r3, [pc, #144]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2207      	movs	r2, #7
 8005aa6:	4393      	bics	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	4b22      	ldr	r3, [pc, #136]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ab2:	f7fc fb27 	bl	8002104 <HAL_GetTick>
 8005ab6:	0003      	movs	r3, r0
 8005ab8:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005aba:	e009      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005abc:	f7fc fb22 	bl	8002104 <HAL_GetTick>
 8005ac0:	0002      	movs	r2, r0
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b38 <HAL_RCC_ClockConfig+0x210>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e02c      	b.n	8005b2a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ad0:	4b18      	ldr	r3, [pc, #96]	@ (8005b34 <HAL_RCC_ClockConfig+0x20c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d1ee      	bne.n	8005abc <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d009      	beq.n	8005afc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae8:	4b14      	ldr	r3, [pc, #80]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <HAL_RCC_ClockConfig+0x220>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	0019      	movs	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005afc:	f000 f82c 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8005b00:	0001      	movs	r1, r0
 8005b02:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <HAL_RCC_ClockConfig+0x214>)
 8005b04:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	220f      	movs	r2, #15
 8005b0a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <HAL_RCC_ClockConfig+0x224>)
 8005b0e:	0092      	lsls	r2, r2, #2
 8005b10:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b12:	221f      	movs	r2, #31
 8005b14:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005b16:	000a      	movs	r2, r1
 8005b18:	40da      	lsrs	r2, r3
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <HAL_RCC_ClockConfig+0x228>)
 8005b1c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <HAL_RCC_ClockConfig+0x22c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f7fc fa92 	bl	800204c <HAL_InitTick>
 8005b28:	0003      	movs	r3, r0
}
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b004      	add	sp, #16
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	40022000 	.word	0x40022000
 8005b38:	00001388 	.word	0x00001388
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	ffff84ff 	.word	0xffff84ff
 8005b44:	fffff0ff 	.word	0xfffff0ff
 8005b48:	ffff8fff 	.word	0xffff8fff
 8005b4c:	08008994 	.word	0x08008994
 8005b50:	20000074 	.word	0x20000074
 8005b54:	20000078 	.word	0x20000078

08005b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8005b5e:	4b27      	ldr	r3, [pc, #156]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	2207      	movs	r2, #7
 8005b66:	4013      	ands	r3, r2
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b6c:	4b23      	ldr	r3, [pc, #140]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2238      	movs	r2, #56	@ 0x38
 8005b72:	4013      	ands	r3, r2
 8005b74:	d10f      	bne.n	8005b96 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b76:	4b21      	ldr	r3, [pc, #132]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	0adb      	lsrs	r3, r3, #11
 8005b7c:	2207      	movs	r2, #7
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2201      	movs	r2, #1
 8005b82:	409a      	lsls	r2, r3
 8005b84:	0013      	movs	r3, r2
 8005b86:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	481d      	ldr	r0, [pc, #116]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005b8c:	f7fa fabc 	bl	8000108 <__udivsi3>
 8005b90:	0003      	movs	r3, r0
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e027      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b96:	4b19      	ldr	r3, [pc, #100]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2238      	movs	r2, #56	@ 0x38
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d102      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ba2:	4b18      	ldr	r3, [pc, #96]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0xac>)
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e01e      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005ba8:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2238      	movs	r2, #56	@ 0x38
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d103      	bne.n	8005bbc <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005bb4:	2380      	movs	r3, #128	@ 0x80
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e014      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2238      	movs	r2, #56	@ 0x38
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b18      	cmp	r3, #24
 8005bc6:	d103      	bne.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005bc8:	23fa      	movs	r3, #250	@ 0xfa
 8005bca:	01db      	lsls	r3, r3, #7
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e00a      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2238      	movs	r2, #56	@ 0x38
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d102      	bne.n	8005be2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8005bdc:	4b08      	ldr	r3, [pc, #32]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e001      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7fa fa8d 	bl	8000108 <__udivsi3>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b004      	add	sp, #16
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	02dc6c00 	.word	0x02dc6c00
 8005c04:	007a1200 	.word	0x007a1200

08005c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c0c:	f7ff ffa4 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8005c10:	0001      	movs	r1, r0
 8005c12:	4b09      	ldr	r3, [pc, #36]	@ (8005c38 <HAL_RCC_GetHCLKFreq+0x30>)
 8005c14:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	220f      	movs	r2, #15
 8005c1a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c1c:	4b07      	ldr	r3, [pc, #28]	@ (8005c3c <HAL_RCC_GetHCLKFreq+0x34>)
 8005c1e:	0092      	lsls	r2, r2, #2
 8005c20:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c22:	221f      	movs	r2, #31
 8005c24:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005c26:	000a      	movs	r2, r1
 8005c28:	40da      	lsrs	r2, r3
 8005c2a:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <HAL_RCC_GetHCLKFreq+0x38>)
 8005c2c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005c2e:	4b04      	ldr	r3, [pc, #16]	@ (8005c40 <HAL_RCC_GetHCLKFreq+0x38>)
 8005c30:	681b      	ldr	r3, [r3, #0]
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	08008994 	.word	0x08008994
 8005c40:	20000074 	.word	0x20000074

08005c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005c48:	f7ff ffde 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c4c:	0001      	movs	r1, r0
 8005c4e:	4b07      	ldr	r3, [pc, #28]	@ (8005c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	0b1b      	lsrs	r3, r3, #12
 8005c54:	2207      	movs	r2, #7
 8005c56:	401a      	ands	r2, r3
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005c5a:	0092      	lsls	r2, r2, #2
 8005c5c:	58d3      	ldr	r3, [r2, r3]
 8005c5e:	221f      	movs	r2, #31
 8005c60:	4013      	ands	r3, r2
 8005c62:	40d9      	lsrs	r1, r3
 8005c64:	000b      	movs	r3, r1
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	080089d4 	.word	0x080089d4

08005c74 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005c7c:	2313      	movs	r3, #19
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c84:	2312      	movs	r3, #18
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2240      	movs	r2, #64	@ 0x40
 8005c92:	4013      	ands	r3, r2
 8005c94:	d100      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005c96:	e079      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c98:	2011      	movs	r0, #17
 8005c9a:	183b      	adds	r3, r7, r0
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ca4:	2380      	movs	r3, #128	@ 0x80
 8005ca6:	055b      	lsls	r3, r3, #21
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d110      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cac:	4b67      	ldr	r3, [pc, #412]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cb0:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cb2:	2180      	movs	r1, #128	@ 0x80
 8005cb4:	0549      	lsls	r1, r1, #21
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005cba:	4b64      	ldr	r3, [pc, #400]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	055b      	lsls	r3, r3, #21
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cc8:	183b      	adds	r3, r7, r0
 8005cca:	2201      	movs	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005cce:	4b5f      	ldr	r3, [pc, #380]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cd2:	23c0      	movs	r3, #192	@ 0xc0
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d019      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d014      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005cea:	4b58      	ldr	r3, [pc, #352]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cee:	4a58      	ldr	r2, [pc, #352]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cf4:	4b55      	ldr	r3, [pc, #340]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cf6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cf8:	4b54      	ldr	r3, [pc, #336]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cfa:	2180      	movs	r1, #128	@ 0x80
 8005cfc:	0249      	lsls	r1, r1, #9
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d02:	4b52      	ldr	r3, [pc, #328]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d06:	4b51      	ldr	r3, [pc, #324]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d08:	4952      	ldr	r1, [pc, #328]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2201      	movs	r2, #1
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d016      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fc f9f2 	bl	8002104 <HAL_GetTick>
 8005d20:	0003      	movs	r3, r0
 8005d22:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005d24:	e00c      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fc f9ed 	bl	8002104 <HAL_GetTick>
 8005d2a:	0002      	movs	r2, r0
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	4a49      	ldr	r2, [pc, #292]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d904      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005d36:	2313      	movs	r3, #19
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	701a      	strb	r2, [r3, #0]
          break;
 8005d3e:	e004      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005d40:	4b42      	ldr	r3, [pc, #264]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d44:	2202      	movs	r2, #2
 8005d46:	4013      	ands	r3, r2
 8005d48:	d0ed      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8005d4a:	2313      	movs	r3, #19
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d54:	4b3d      	ldr	r3, [pc, #244]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	4a3d      	ldr	r2, [pc, #244]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	4b3a      	ldr	r3, [pc, #232]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d64:	430a      	orrs	r2, r1
 8005d66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d68:	e005      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	2312      	movs	r3, #18
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	2213      	movs	r2, #19
 8005d70:	18ba      	adds	r2, r7, r2
 8005d72:	7812      	ldrb	r2, [r2, #0]
 8005d74:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d76:	2311      	movs	r3, #17
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d80:	4b32      	ldr	r3, [pc, #200]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d84:	4b31      	ldr	r3, [pc, #196]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d86:	4935      	ldr	r1, [pc, #212]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005d88:	400a      	ands	r2, r1
 8005d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2201      	movs	r2, #1
 8005d92:	4013      	ands	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d96:	4b2d      	ldr	r3, [pc, #180]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	4b29      	ldr	r3, [pc, #164]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005da6:	430a      	orrs	r2, r1
 8005da8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2202      	movs	r2, #2
 8005db0:	4013      	ands	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005db4:	4b25      	ldr	r3, [pc, #148]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	4a29      	ldr	r2, [pc, #164]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	4b22      	ldr	r3, [pc, #136]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d008      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	0899      	lsrs	r1, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	4b1b      	ldr	r3, [pc, #108]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005de0:	430a      	orrs	r2, r1
 8005de2:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2208      	movs	r2, #8
 8005dea:	4013      	ands	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dee:	4b17      	ldr	r3, [pc, #92]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	0019      	movs	r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2204      	movs	r2, #4
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e10:	4a15      	ldr	r2, [pc, #84]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	0019      	movs	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	4013      	ands	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005e2a:	4b08      	ldr	r3, [pc, #32]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	22e0      	movs	r2, #224	@ 0xe0
 8005e30:	4393      	bics	r3, r2
 8005e32:	0019      	movs	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005e3e:	2312      	movs	r3, #18
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	781b      	ldrb	r3, [r3, #0]
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b006      	add	sp, #24
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	fffffcff 	.word	0xfffffcff
 8005e54:	fffeffff 	.word	0xfffeffff
 8005e58:	00001388 	.word	0x00001388
 8005e5c:	efffffff 	.word	0xefffffff
 8005e60:	ffffcfff 	.word	0xffffcfff
 8005e64:	ffffefff 	.word	0xffffefff
 8005e68:	ffff3fff 	.word	0xffff3fff

08005e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0a8      	b.n	8005fd0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	2382      	movs	r3, #130	@ 0x82
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d009      	beq.n	8005ea6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	61da      	str	r2, [r3, #28]
 8005e98:	e005      	b.n	8005ea6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	225d      	movs	r2, #93	@ 0x5d
 8005eb0:	5c9b      	ldrb	r3, [r3, r2]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	225c      	movs	r2, #92	@ 0x5c
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fb fe3a 	bl	8001b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	225d      	movs	r2, #93	@ 0x5d
 8005ecc:	2102      	movs	r1, #2
 8005ece:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2140      	movs	r1, #64	@ 0x40
 8005edc:	438a      	bics	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	23e0      	movs	r3, #224	@ 0xe0
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d902      	bls.n	8005ef2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	e002      	b.n	8005ef8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ef2:	2380      	movs	r3, #128	@ 0x80
 8005ef4:	015b      	lsls	r3, r3, #5
 8005ef6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	23f0      	movs	r3, #240	@ 0xf0
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d008      	beq.n	8005f16 <HAL_SPI_Init+0xaa>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	23e0      	movs	r3, #224	@ 0xe0
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d002      	beq.n	8005f16 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	2382      	movs	r3, #130	@ 0x82
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	401a      	ands	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6899      	ldr	r1, [r3, #8]
 8005f24:	2384      	movs	r3, #132	@ 0x84
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	400b      	ands	r3, r1
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2102      	movs	r1, #2
 8005f32:	400b      	ands	r3, r1
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6999      	ldr	r1, [r3, #24]
 8005f44:	2380      	movs	r3, #128	@ 0x80
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	400b      	ands	r3, r1
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	2138      	movs	r1, #56	@ 0x38
 8005f52:	400b      	ands	r3, r1
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	2180      	movs	r1, #128	@ 0x80
 8005f5c:	400b      	ands	r3, r1
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	0011      	movs	r1, r2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	019b      	lsls	r3, r3, #6
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	401a      	ands	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	2110      	movs	r1, #16
 8005f84:	400b      	ands	r3, r1
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8c:	2108      	movs	r1, #8
 8005f8e:	400b      	ands	r3, r1
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68d9      	ldr	r1, [r3, #12]
 8005f96:	23f0      	movs	r3, #240	@ 0xf0
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	0011      	movs	r1, r2
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	2380      	movs	r3, #128	@ 0x80
 8005fa4:	015b      	lsls	r3, r3, #5
 8005fa6:	401a      	ands	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4907      	ldr	r1, [pc, #28]	@ (8005fd8 <HAL_SPI_Init+0x16c>)
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	225d      	movs	r2, #93	@ 0x5d
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b004      	add	sp, #16
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	fffff7ff 	.word	0xfffff7ff

08005fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e04a      	b.n	8006084 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	223d      	movs	r2, #61	@ 0x3d
 8005ff2:	5c9b      	ldrb	r3, [r3, r2]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	223c      	movs	r2, #60	@ 0x3c
 8005ffe:	2100      	movs	r1, #0
 8006000:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0018      	movs	r0, r3
 8006006:	f7fb fe3f 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	223d      	movs	r2, #61	@ 0x3d
 800600e:	2102      	movs	r1, #2
 8006010:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3304      	adds	r3, #4
 800601a:	0019      	movs	r1, r3
 800601c:	0010      	movs	r0, r2
 800601e:	f000 f98d 	bl	800633c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2248      	movs	r2, #72	@ 0x48
 8006026:	2101      	movs	r1, #1
 8006028:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	223e      	movs	r2, #62	@ 0x3e
 800602e:	2101      	movs	r1, #1
 8006030:	5499      	strb	r1, [r3, r2]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	223f      	movs	r2, #63	@ 0x3f
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2240      	movs	r2, #64	@ 0x40
 800603e:	2101      	movs	r1, #1
 8006040:	5499      	strb	r1, [r3, r2]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2241      	movs	r2, #65	@ 0x41
 8006046:	2101      	movs	r1, #1
 8006048:	5499      	strb	r1, [r3, r2]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2242      	movs	r2, #66	@ 0x42
 800604e:	2101      	movs	r1, #1
 8006050:	5499      	strb	r1, [r3, r2]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2243      	movs	r2, #67	@ 0x43
 8006056:	2101      	movs	r1, #1
 8006058:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2244      	movs	r2, #68	@ 0x44
 800605e:	2101      	movs	r1, #1
 8006060:	5499      	strb	r1, [r3, r2]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2245      	movs	r2, #69	@ 0x45
 8006066:	2101      	movs	r1, #1
 8006068:	5499      	strb	r1, [r3, r2]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2246      	movs	r2, #70	@ 0x46
 800606e:	2101      	movs	r1, #1
 8006070:	5499      	strb	r1, [r3, r2]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2247      	movs	r2, #71	@ 0x47
 8006076:	2101      	movs	r1, #1
 8006078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	223d      	movs	r2, #61	@ 0x3d
 800607e:	2101      	movs	r1, #1
 8006080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e04a      	b.n	8006134 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	223d      	movs	r2, #61	@ 0x3d
 80060a2:	5c9b      	ldrb	r3, [r3, r2]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d107      	bne.n	80060ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	223c      	movs	r2, #60	@ 0x3c
 80060ae:	2100      	movs	r1, #0
 80060b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7fb fdc7 	bl	8001c48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	223d      	movs	r2, #61	@ 0x3d
 80060be:	2102      	movs	r1, #2
 80060c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	0019      	movs	r1, r3
 80060cc:	0010      	movs	r0, r2
 80060ce:	f000 f935 	bl	800633c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2248      	movs	r2, #72	@ 0x48
 80060d6:	2101      	movs	r1, #1
 80060d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	223e      	movs	r2, #62	@ 0x3e
 80060de:	2101      	movs	r1, #1
 80060e0:	5499      	strb	r1, [r3, r2]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	223f      	movs	r2, #63	@ 0x3f
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2240      	movs	r2, #64	@ 0x40
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2241      	movs	r2, #65	@ 0x41
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2242      	movs	r2, #66	@ 0x42
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2243      	movs	r2, #67	@ 0x43
 8006106:	2101      	movs	r1, #1
 8006108:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2244      	movs	r2, #68	@ 0x44
 800610e:	2101      	movs	r1, #1
 8006110:	5499      	strb	r1, [r3, r2]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2245      	movs	r2, #69	@ 0x45
 8006116:	2101      	movs	r1, #1
 8006118:	5499      	strb	r1, [r3, r2]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2246      	movs	r2, #70	@ 0x46
 800611e:	2101      	movs	r1, #1
 8006120:	5499      	strb	r1, [r3, r2]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2247      	movs	r2, #71	@ 0x47
 8006126:	2101      	movs	r1, #1
 8006128:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	223d      	movs	r2, #61	@ 0x3d
 800612e:	2101      	movs	r1, #1
 8006130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	0018      	movs	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	b002      	add	sp, #8
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006148:	2317      	movs	r3, #23
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	223c      	movs	r2, #60	@ 0x3c
 8006154:	5c9b      	ldrb	r3, [r3, r2]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_TIM_PWM_ConfigChannel+0x22>
 800615a:	2302      	movs	r3, #2
 800615c:	e0e5      	b.n	800632a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	223c      	movs	r2, #60	@ 0x3c
 8006162:	2101      	movs	r1, #1
 8006164:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b14      	cmp	r3, #20
 800616a:	d900      	bls.n	800616e <HAL_TIM_PWM_ConfigChannel+0x32>
 800616c:	e0d1      	b.n	8006312 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	009a      	lsls	r2, r3, #2
 8006172:	4b70      	ldr	r3, [pc, #448]	@ (8006334 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006174:	18d3      	adds	r3, r2, r3
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f000 f95e 	bl	8006444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2108      	movs	r1, #8
 8006194:	430a      	orrs	r2, r1
 8006196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2104      	movs	r1, #4
 80061a4:	438a      	bics	r2, r1
 80061a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	619a      	str	r2, [r3, #24]
      break;
 80061ba:	e0af      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	0011      	movs	r1, r2
 80061c4:	0018      	movs	r0, r3
 80061c6:	f000 f9bd 	bl	8006544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2180      	movs	r1, #128	@ 0x80
 80061d6:	0109      	lsls	r1, r1, #4
 80061d8:	430a      	orrs	r2, r1
 80061da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4954      	ldr	r1, [pc, #336]	@ (8006338 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80061e8:	400a      	ands	r2, r1
 80061ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6999      	ldr	r1, [r3, #24]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	619a      	str	r2, [r3, #24]
      break;
 8006200:	e08c      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0011      	movs	r1, r2
 800620a:	0018      	movs	r0, r3
 800620c:	f000 fa18 	bl	8006640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2108      	movs	r1, #8
 800621c:	430a      	orrs	r2, r1
 800621e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69da      	ldr	r2, [r3, #28]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2104      	movs	r1, #4
 800622c:	438a      	bics	r2, r1
 800622e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69d9      	ldr	r1, [r3, #28]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	61da      	str	r2, [r3, #28]
      break;
 8006242:	e06b      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	0011      	movs	r1, r2
 800624c:	0018      	movs	r0, r3
 800624e:	f000 fa79 	bl	8006744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2180      	movs	r1, #128	@ 0x80
 800625e:	0109      	lsls	r1, r1, #4
 8006260:	430a      	orrs	r2, r1
 8006262:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69da      	ldr	r2, [r3, #28]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4932      	ldr	r1, [pc, #200]	@ (8006338 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006270:	400a      	ands	r2, r1
 8006272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69d9      	ldr	r1, [r3, #28]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	021a      	lsls	r2, r3, #8
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	61da      	str	r2, [r3, #28]
      break;
 8006288:	e048      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0011      	movs	r1, r2
 8006292:	0018      	movs	r0, r3
 8006294:	f000 faba 	bl	800680c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2108      	movs	r1, #8
 80062a4:	430a      	orrs	r2, r1
 80062a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2104      	movs	r1, #4
 80062b4:	438a      	bics	r2, r1
 80062b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062ca:	e027      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	0011      	movs	r1, r2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f000 faf3 	bl	80068c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2180      	movs	r1, #128	@ 0x80
 80062e6:	0109      	lsls	r1, r1, #4
 80062e8:	430a      	orrs	r2, r1
 80062ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4910      	ldr	r1, [pc, #64]	@ (8006338 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	021a      	lsls	r2, r3, #8
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006310:	e004      	b.n	800631c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006312:	2317      	movs	r3, #23
 8006314:	18fb      	adds	r3, r7, r3
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	223c      	movs	r2, #60	@ 0x3c
 8006320:	2100      	movs	r1, #0
 8006322:	5499      	strb	r1, [r3, r2]

  return status;
 8006324:	2317      	movs	r3, #23
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	781b      	ldrb	r3, [r3, #0]
}
 800632a:	0018      	movs	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	b006      	add	sp, #24
 8006330:	bd80      	pop	{r7, pc}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	080089f4 	.word	0x080089f4
 8006338:	fffffbff 	.word	0xfffffbff

0800633c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a37      	ldr	r2, [pc, #220]	@ (800642c <TIM_Base_SetConfig+0xf0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d008      	beq.n	8006366 <TIM_Base_SetConfig+0x2a>
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	2380      	movs	r3, #128	@ 0x80
 8006358:	05db      	lsls	r3, r3, #23
 800635a:	429a      	cmp	r2, r3
 800635c:	d003      	beq.n	8006366 <TIM_Base_SetConfig+0x2a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a33      	ldr	r2, [pc, #204]	@ (8006430 <TIM_Base_SetConfig+0xf4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d108      	bne.n	8006378 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2270      	movs	r2, #112	@ 0x70
 800636a:	4393      	bics	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a2c      	ldr	r2, [pc, #176]	@ (800642c <TIM_Base_SetConfig+0xf0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d014      	beq.n	80063aa <TIM_Base_SetConfig+0x6e>
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	05db      	lsls	r3, r3, #23
 8006386:	429a      	cmp	r2, r3
 8006388:	d00f      	beq.n	80063aa <TIM_Base_SetConfig+0x6e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a28      	ldr	r2, [pc, #160]	@ (8006430 <TIM_Base_SetConfig+0xf4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_Base_SetConfig+0x6e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a27      	ldr	r2, [pc, #156]	@ (8006434 <TIM_Base_SetConfig+0xf8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_Base_SetConfig+0x6e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a26      	ldr	r2, [pc, #152]	@ (8006438 <TIM_Base_SetConfig+0xfc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_Base_SetConfig+0x6e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a25      	ldr	r2, [pc, #148]	@ (800643c <TIM_Base_SetConfig+0x100>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d108      	bne.n	80063bc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a24      	ldr	r2, [pc, #144]	@ (8006440 <TIM_Base_SetConfig+0x104>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2280      	movs	r2, #128	@ 0x80
 80063c0:	4393      	bics	r3, r2
 80063c2:	001a      	movs	r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a11      	ldr	r2, [pc, #68]	@ (800642c <TIM_Base_SetConfig+0xf0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_Base_SetConfig+0xbe>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a12      	ldr	r2, [pc, #72]	@ (8006438 <TIM_Base_SetConfig+0xfc>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_Base_SetConfig+0xbe>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a11      	ldr	r2, [pc, #68]	@ (800643c <TIM_Base_SetConfig+0x100>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d103      	bne.n	8006402 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2201      	movs	r2, #1
 800640e:	4013      	ands	r3, r2
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2201      	movs	r2, #1
 800641a:	4393      	bics	r3, r2
 800641c:	001a      	movs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	611a      	str	r2, [r3, #16]
  }
}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	46bd      	mov	sp, r7
 8006426:	b004      	add	sp, #16
 8006428:	bd80      	pop	{r7, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40000400 	.word	0x40000400
 8006434:	40002000 	.word	0x40002000
 8006438:	40014400 	.word	0x40014400
 800643c:	40014800 	.word	0x40014800
 8006440:	fffffcff 	.word	0xfffffcff

08006444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	2201      	movs	r2, #1
 800645a:	4393      	bics	r3, r2
 800645c:	001a      	movs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4a2e      	ldr	r2, [pc, #184]	@ (800652c <TIM_OC1_SetConfig+0xe8>)
 8006472:	4013      	ands	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2203      	movs	r2, #3
 800647a:	4393      	bics	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2202      	movs	r2, #2
 800648c:	4393      	bics	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a24      	ldr	r2, [pc, #144]	@ (8006530 <TIM_OC1_SetConfig+0xec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d007      	beq.n	80064b2 <TIM_OC1_SetConfig+0x6e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a23      	ldr	r2, [pc, #140]	@ (8006534 <TIM_OC1_SetConfig+0xf0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC1_SetConfig+0x6e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a22      	ldr	r2, [pc, #136]	@ (8006538 <TIM_OC1_SetConfig+0xf4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10c      	bne.n	80064cc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2208      	movs	r2, #8
 80064b6:	4393      	bics	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2204      	movs	r2, #4
 80064c8:	4393      	bics	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a18      	ldr	r2, [pc, #96]	@ (8006530 <TIM_OC1_SetConfig+0xec>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <TIM_OC1_SetConfig+0xa0>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a17      	ldr	r2, [pc, #92]	@ (8006534 <TIM_OC1_SetConfig+0xf0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_OC1_SetConfig+0xa0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <TIM_OC1_SetConfig+0xf4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d111      	bne.n	8006508 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4a15      	ldr	r2, [pc, #84]	@ (800653c <TIM_OC1_SetConfig+0xf8>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4a14      	ldr	r2, [pc, #80]	@ (8006540 <TIM_OC1_SetConfig+0xfc>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	46bd      	mov	sp, r7
 8006526:	b006      	add	sp, #24
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			@ (mov r8, r8)
 800652c:	fffeff8f 	.word	0xfffeff8f
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40014400 	.word	0x40014400
 8006538:	40014800 	.word	0x40014800
 800653c:	fffffeff 	.word	0xfffffeff
 8006540:	fffffdff 	.word	0xfffffdff

08006544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	2210      	movs	r2, #16
 800655a:	4393      	bics	r3, r2
 800655c:	001a      	movs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <TIM_OC2_SetConfig+0xe0>)
 8006572:	4013      	ands	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a2b      	ldr	r2, [pc, #172]	@ (8006628 <TIM_OC2_SetConfig+0xe4>)
 800657a:	4013      	ands	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2220      	movs	r2, #32
 800658e:	4393      	bics	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a22      	ldr	r2, [pc, #136]	@ (800662c <TIM_OC2_SetConfig+0xe8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10d      	bne.n	80065c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2280      	movs	r2, #128	@ 0x80
 80065aa:	4393      	bics	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2240      	movs	r2, #64	@ 0x40
 80065be:	4393      	bics	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a19      	ldr	r2, [pc, #100]	@ (800662c <TIM_OC2_SetConfig+0xe8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_OC2_SetConfig+0x96>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a18      	ldr	r2, [pc, #96]	@ (8006630 <TIM_OC2_SetConfig+0xec>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC2_SetConfig+0x96>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a17      	ldr	r2, [pc, #92]	@ (8006634 <TIM_OC2_SetConfig+0xf0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d113      	bne.n	8006602 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4a16      	ldr	r2, [pc, #88]	@ (8006638 <TIM_OC2_SetConfig+0xf4>)
 80065de:	4013      	ands	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4a15      	ldr	r2, [pc, #84]	@ (800663c <TIM_OC2_SetConfig+0xf8>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	621a      	str	r2, [r3, #32]
}
 800661c:	46c0      	nop			@ (mov r8, r8)
 800661e:	46bd      	mov	sp, r7
 8006620:	b006      	add	sp, #24
 8006622:	bd80      	pop	{r7, pc}
 8006624:	feff8fff 	.word	0xfeff8fff
 8006628:	fffffcff 	.word	0xfffffcff
 800662c:	40012c00 	.word	0x40012c00
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	fffffbff 	.word	0xfffffbff
 800663c:	fffff7ff 	.word	0xfffff7ff

08006640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4a31      	ldr	r2, [pc, #196]	@ (800671c <TIM_OC3_SetConfig+0xdc>)
 8006656:	401a      	ands	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a2d      	ldr	r2, [pc, #180]	@ (8006720 <TIM_OC3_SetConfig+0xe0>)
 800666c:	4013      	ands	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2203      	movs	r2, #3
 8006674:	4393      	bics	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	4a27      	ldr	r2, [pc, #156]	@ (8006724 <TIM_OC3_SetConfig+0xe4>)
 8006686:	4013      	ands	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a23      	ldr	r2, [pc, #140]	@ (8006728 <TIM_OC3_SetConfig+0xe8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d10d      	bne.n	80066ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4a22      	ldr	r2, [pc, #136]	@ (800672c <TIM_OC3_SetConfig+0xec>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006730 <TIM_OC3_SetConfig+0xf0>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006728 <TIM_OC3_SetConfig+0xe8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_OC3_SetConfig+0x92>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006734 <TIM_OC3_SetConfig+0xf4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC3_SetConfig+0x92>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006738 <TIM_OC3_SetConfig+0xf8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d113      	bne.n	80066fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4a19      	ldr	r2, [pc, #100]	@ (800673c <TIM_OC3_SetConfig+0xfc>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <TIM_OC3_SetConfig+0x100>)
 80066de:	4013      	ands	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	46c0      	nop			@ (mov r8, r8)
 8006716:	46bd      	mov	sp, r7
 8006718:	b006      	add	sp, #24
 800671a:	bd80      	pop	{r7, pc}
 800671c:	fffffeff 	.word	0xfffffeff
 8006720:	fffeff8f 	.word	0xfffeff8f
 8006724:	fffffdff 	.word	0xfffffdff
 8006728:	40012c00 	.word	0x40012c00
 800672c:	fffff7ff 	.word	0xfffff7ff
 8006730:	fffffbff 	.word	0xfffffbff
 8006734:	40014400 	.word	0x40014400
 8006738:	40014800 	.word	0x40014800
 800673c:	ffffefff 	.word	0xffffefff
 8006740:	ffffdfff 	.word	0xffffdfff

08006744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	4a24      	ldr	r2, [pc, #144]	@ (80067ec <TIM_OC4_SetConfig+0xa8>)
 800675a:	401a      	ands	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a20      	ldr	r2, [pc, #128]	@ (80067f0 <TIM_OC4_SetConfig+0xac>)
 8006770:	4013      	ands	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a1f      	ldr	r2, [pc, #124]	@ (80067f4 <TIM_OC4_SetConfig+0xb0>)
 8006778:	4013      	ands	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <TIM_OC4_SetConfig+0xb4>)
 800678c:	4013      	ands	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	031b      	lsls	r3, r3, #12
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a17      	ldr	r2, [pc, #92]	@ (80067fc <TIM_OC4_SetConfig+0xb8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_OC4_SetConfig+0x70>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <TIM_OC4_SetConfig+0xbc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_OC4_SetConfig+0x70>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <TIM_OC4_SetConfig+0xc0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d109      	bne.n	80067c8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4a14      	ldr	r2, [pc, #80]	@ (8006808 <TIM_OC4_SetConfig+0xc4>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b006      	add	sp, #24
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	ffffefff 	.word	0xffffefff
 80067f0:	feff8fff 	.word	0xfeff8fff
 80067f4:	fffffcff 	.word	0xfffffcff
 80067f8:	ffffdfff 	.word	0xffffdfff
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800
 8006808:	ffffbfff 	.word	0xffffbfff

0800680c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	4a21      	ldr	r2, [pc, #132]	@ (80068a8 <TIM_OC5_SetConfig+0x9c>)
 8006822:	401a      	ands	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a1d      	ldr	r2, [pc, #116]	@ (80068ac <TIM_OC5_SetConfig+0xa0>)
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4a19      	ldr	r2, [pc, #100]	@ (80068b0 <TIM_OC5_SetConfig+0xa4>)
 800684a:	4013      	ands	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <TIM_OC5_SetConfig+0xa8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d007      	beq.n	8006872 <TIM_OC5_SetConfig+0x66>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a14      	ldr	r2, [pc, #80]	@ (80068b8 <TIM_OC5_SetConfig+0xac>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d003      	beq.n	8006872 <TIM_OC5_SetConfig+0x66>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a13      	ldr	r2, [pc, #76]	@ (80068bc <TIM_OC5_SetConfig+0xb0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d109      	bne.n	8006886 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	4a0c      	ldr	r2, [pc, #48]	@ (80068a8 <TIM_OC5_SetConfig+0x9c>)
 8006876:	4013      	ands	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	46c0      	nop			@ (mov r8, r8)
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b006      	add	sp, #24
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	fffeffff 	.word	0xfffeffff
 80068ac:	fffeff8f 	.word	0xfffeff8f
 80068b0:	fffdffff 	.word	0xfffdffff
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40014400 	.word	0x40014400
 80068bc:	40014800 	.word	0x40014800

080068c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	4a22      	ldr	r2, [pc, #136]	@ (8006960 <TIM_OC6_SetConfig+0xa0>)
 80068d6:	401a      	ands	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006964 <TIM_OC6_SetConfig+0xa4>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006968 <TIM_OC6_SetConfig+0xa8>)
 8006900:	4013      	ands	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	051b      	lsls	r3, r3, #20
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a16      	ldr	r2, [pc, #88]	@ (800696c <TIM_OC6_SetConfig+0xac>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_OC6_SetConfig+0x68>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a15      	ldr	r2, [pc, #84]	@ (8006970 <TIM_OC6_SetConfig+0xb0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC6_SetConfig+0x68>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a14      	ldr	r2, [pc, #80]	@ (8006974 <TIM_OC6_SetConfig+0xb4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d109      	bne.n	800693c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <TIM_OC6_SetConfig+0xb8>)
 800692c:	4013      	ands	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	46c0      	nop			@ (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b006      	add	sp, #24
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	ffefffff 	.word	0xffefffff
 8006964:	feff8fff 	.word	0xfeff8fff
 8006968:	ffdfffff 	.word	0xffdfffff
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800
 8006978:	fffbffff 	.word	0xfffbffff

0800697c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	223c      	movs	r2, #60	@ 0x3c
 800698a:	5c9b      	ldrb	r3, [r3, r2]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006990:	2302      	movs	r3, #2
 8006992:	e050      	b.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	223c      	movs	r2, #60	@ 0x3c
 8006998:	2101      	movs	r1, #1
 800699a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	223d      	movs	r2, #61	@ 0x3d
 80069a0:	2102      	movs	r1, #2
 80069a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a21      	ldr	r2, [pc, #132]	@ (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d108      	bne.n	80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a20      	ldr	r2, [pc, #128]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2270      	movs	r2, #112	@ 0x70
 80069d4:	4393      	bics	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a14      	ldr	r2, [pc, #80]	@ (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00a      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	2380      	movs	r3, #128	@ 0x80
 80069fa:	05db      	lsls	r3, r3, #23
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d004      	beq.n	8006a0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a10      	ldr	r2, [pc, #64]	@ (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d10c      	bne.n	8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2280      	movs	r2, #128	@ 0x80
 8006a0e:	4393      	bics	r3, r2
 8006a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	223d      	movs	r2, #61	@ 0x3d
 8006a28:	2101      	movs	r1, #1
 8006a2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	223c      	movs	r2, #60	@ 0x3c
 8006a30:	2100      	movs	r1, #0
 8006a32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	0018      	movs	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	b004      	add	sp, #16
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	46c0      	nop			@ (mov r8, r8)
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	ff0fffff 	.word	0xff0fffff
 8006a48:	40000400 	.word	0x40000400

08006a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	223c      	movs	r2, #60	@ 0x3c
 8006a5e:	5c9b      	ldrb	r3, [r3, r2]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e06f      	b.n	8006b48 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	223c      	movs	r2, #60	@ 0x3c
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	22ff      	movs	r2, #255	@ 0xff
 8006a74:	4393      	bics	r3, r2
 8006a76:	001a      	movs	r2, r3
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a33      	ldr	r2, [pc, #204]	@ (8006b50 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006a84:	401a      	ands	r2, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4a30      	ldr	r2, [pc, #192]	@ (8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006a92:	401a      	ands	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006aa0:	401a      	ands	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a2b      	ldr	r2, [pc, #172]	@ (8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006aae:	401a      	ands	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a29      	ldr	r2, [pc, #164]	@ (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006abc:	401a      	ands	r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a26      	ldr	r2, [pc, #152]	@ (8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006aca:	401a      	ands	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a24      	ldr	r2, [pc, #144]	@ (8006b68 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ad8:	401a      	ands	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a21      	ldr	r2, [pc, #132]	@ (8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ae8:	401a      	ands	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b70 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d11c      	bne.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a1d      	ldr	r2, [pc, #116]	@ (8006b74 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006b00:	401a      	ands	r2, r3
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b06:	051b      	lsls	r3, r3, #20
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006b10:	401a      	ands	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a17      	ldr	r2, [pc, #92]	@ (8006b7c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006b1e:	401a      	ands	r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a15      	ldr	r2, [pc, #84]	@ (8006b80 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006b2c:	401a      	ands	r2, r3
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	223c      	movs	r2, #60	@ 0x3c
 8006b42:	2100      	movs	r1, #0
 8006b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	0018      	movs	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b004      	add	sp, #16
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	fffffcff 	.word	0xfffffcff
 8006b54:	fffffbff 	.word	0xfffffbff
 8006b58:	fffff7ff 	.word	0xfffff7ff
 8006b5c:	ffffefff 	.word	0xffffefff
 8006b60:	ffffdfff 	.word	0xffffdfff
 8006b64:	ffffbfff 	.word	0xffffbfff
 8006b68:	fff0ffff 	.word	0xfff0ffff
 8006b6c:	efffffff 	.word	0xefffffff
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	ff0fffff 	.word	0xff0fffff
 8006b78:	feffffff 	.word	0xfeffffff
 8006b7c:	fdffffff 	.word	0xfdffffff
 8006b80:	dfffffff 	.word	0xdfffffff

08006b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	@ 0x28
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	1dbb      	adds	r3, r7, #6
 8006b92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2288      	movs	r2, #136	@ 0x88
 8006b98:	589b      	ldr	r3, [r3, r2]
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d000      	beq.n	8006ba0 <HAL_UART_Transmit+0x1c>
 8006b9e:	e090      	b.n	8006cc2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_UART_Transmit+0x2a>
 8006ba6:	1dbb      	adds	r3, r7, #6
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e088      	b.n	8006cc4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	2380      	movs	r3, #128	@ 0x80
 8006bb8:	015b      	lsls	r3, r3, #5
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d109      	bne.n	8006bd2 <HAL_UART_Transmit+0x4e>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d001      	beq.n	8006bd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e078      	b.n	8006cc4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2290      	movs	r2, #144	@ 0x90
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2288      	movs	r2, #136	@ 0x88
 8006bde:	2121      	movs	r1, #33	@ 0x21
 8006be0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006be2:	f7fb fa8f 	bl	8002104 <HAL_GetTick>
 8006be6:	0003      	movs	r3, r0
 8006be8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1dba      	adds	r2, r7, #6
 8006bee:	2154      	movs	r1, #84	@ 0x54
 8006bf0:	8812      	ldrh	r2, [r2, #0]
 8006bf2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	1dba      	adds	r2, r7, #6
 8006bf8:	2156      	movs	r1, #86	@ 0x56
 8006bfa:	8812      	ldrh	r2, [r2, #0]
 8006bfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	2380      	movs	r3, #128	@ 0x80
 8006c04:	015b      	lsls	r3, r3, #5
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d108      	bne.n	8006c1c <HAL_UART_Transmit+0x98>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e003      	b.n	8006c24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c24:	e030      	b.n	8006c88 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	0013      	movs	r3, r2
 8006c30:	2200      	movs	r2, #0
 8006c32:	2180      	movs	r1, #128	@ 0x80
 8006c34:	f000 ffc8 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8006c38:	1e03      	subs	r3, r0, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2288      	movs	r2, #136	@ 0x88
 8006c40:	2120      	movs	r1, #32
 8006c42:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e03d      	b.n	8006cc4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	001a      	movs	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	05d2      	lsls	r2, r2, #23
 8006c5a:	0dd2      	lsrs	r2, r2, #23
 8006c5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	3302      	adds	r3, #2
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	e007      	b.n	8006c76 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2256      	movs	r2, #86	@ 0x56
 8006c7a:	5a9b      	ldrh	r3, [r3, r2]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b299      	uxth	r1, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2256      	movs	r2, #86	@ 0x56
 8006c86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2256      	movs	r2, #86	@ 0x56
 8006c8c:	5a9b      	ldrh	r3, [r3, r2]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1c8      	bne.n	8006c26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	0013      	movs	r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2140      	movs	r1, #64	@ 0x40
 8006ca2:	f000 ff91 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8006ca6:	1e03      	subs	r3, r0, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2288      	movs	r2, #136	@ 0x88
 8006cae:	2120      	movs	r1, #32
 8006cb0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e006      	b.n	8006cc4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2288      	movs	r2, #136	@ 0x88
 8006cba:	2120      	movs	r1, #32
 8006cbc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e000      	b.n	8006cc4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006cc2:	2302      	movs	r3, #2
  }
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b008      	add	sp, #32
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b098      	sub	sp, #96	@ 0x60
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8006ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce8:	f383 8810 	msr	PRIMASK, r3
}
 8006cec:	46c0      	nop			@ (mov r8, r8)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	498a      	ldr	r1, [pc, #552]	@ (8006f24 <HAL_UART_Abort_IT+0x258>)
 8006cfa:	400a      	ands	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d04:	f383 8810 	msr	PRIMASK, r3
}
 8006d08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8006d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d14:	2301      	movs	r3, #1
 8006d16:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d1a:	f383 8810 	msr	PRIMASK, r3
}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	497f      	ldr	r1, [pc, #508]	@ (8006f28 <HAL_UART_Abort_IT+0x25c>)
 8006d2c:	400a      	ands	r2, r1
 8006d2e:	609a      	str	r2, [r3, #8]
 8006d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d32:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d36:	f383 8810 	msr	PRIMASK, r3
}
 8006d3a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d118      	bne.n	8006d76 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d44:	f3ef 8310 	mrs	r3, PRIMASK
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d4e:	2301      	movs	r3, #1
 8006d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	f383 8810 	msr	PRIMASK, r3
}
 8006d58:	46c0      	nop			@ (mov r8, r8)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2110      	movs	r1, #16
 8006d66:	438a      	bics	r2, r1
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d70:	f383 8810 	msr	PRIMASK, r3
}
 8006d74:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00f      	beq.n	8006d9e <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2280      	movs	r2, #128	@ 0x80
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b80      	cmp	r3, #128	@ 0x80
 8006d8a:	d104      	bne.n	8006d96 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d90:	4a66      	ldr	r2, [pc, #408]	@ (8006f2c <HAL_UART_Abort_IT+0x260>)
 8006d92:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d94:	e003      	b.n	8006d9e <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2280      	movs	r2, #128	@ 0x80
 8006da2:	589b      	ldr	r3, [r3, r2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d011      	beq.n	8006dcc <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2240      	movs	r2, #64	@ 0x40
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b40      	cmp	r3, #64	@ 0x40
 8006db4:	d105      	bne.n	8006dc2 <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2280      	movs	r2, #128	@ 0x80
 8006dba:	589b      	ldr	r3, [r3, r2]
 8006dbc:	4a5c      	ldr	r2, [pc, #368]	@ (8006f30 <HAL_UART_Abort_IT+0x264>)
 8006dbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006dc0:	e004      	b.n	8006dcc <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2280      	movs	r2, #128	@ 0x80
 8006dc6:	589b      	ldr	r3, [r3, r2]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2280      	movs	r2, #128	@ 0x80
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	2b80      	cmp	r3, #128	@ 0x80
 8006dd8:	d12a      	bne.n	8006e30 <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006dda:	f3ef 8310 	mrs	r3, PRIMASK
 8006dde:	61bb      	str	r3, [r7, #24]
  return(result);
 8006de0:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006de4:	2301      	movs	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f383 8810 	msr	PRIMASK, r3
}
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2180      	movs	r1, #128	@ 0x80
 8006dfc:	438a      	bics	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f383 8810 	msr	PRIMASK, r3
}
 8006e0a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7fc fb89 	bl	8003530 <HAL_DMA_Abort_IT>
 8006e1e:	1e03      	subs	r3, r0, #0
 8006e20:	d004      	beq.n	8006e2c <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e26:	2200      	movs	r2, #0
 8006e28:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e2a:	e001      	b.n	8006e30 <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2240      	movs	r2, #64	@ 0x40
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b40      	cmp	r3, #64	@ 0x40
 8006e3c:	d12f      	bne.n	8006e9e <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e44:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e48:	2301      	movs	r3, #1
 8006e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f383 8810 	msr	PRIMASK, r3
}
 8006e52:	46c0      	nop			@ (mov r8, r8)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2140      	movs	r1, #64	@ 0x40
 8006e60:	438a      	bics	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]
 8006e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f383 8810 	msr	PRIMASK, r3
}
 8006e6e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2280      	movs	r2, #128	@ 0x80
 8006e74:	589b      	ldr	r3, [r3, r2]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d011      	beq.n	8006e9e <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2280      	movs	r2, #128	@ 0x80
 8006e7e:	589b      	ldr	r3, [r3, r2]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7fc fb55 	bl	8003530 <HAL_DMA_Abort_IT>
 8006e86:	1e03      	subs	r3, r0, #0
 8006e88:	d007      	beq.n	8006e9a <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2280      	movs	r2, #128	@ 0x80
 8006e8e:	589b      	ldr	r3, [r3, r2]
 8006e90:	2200      	movs	r2, #0
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8006e94:	2301      	movs	r3, #1
 8006e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e98:	e001      	b.n	8006e9e <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8006e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d13a      	bne.n	8006f1a <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2256      	movs	r2, #86	@ 0x56
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	225e      	movs	r2, #94	@ 0x5e
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2290      	movs	r2, #144	@ 0x90
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	220f      	movs	r2, #15
 8006ece:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ed4:	2380      	movs	r3, #128	@ 0x80
 8006ed6:	059b      	lsls	r3, r3, #22
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d107      	bne.n	8006eec <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2110      	movs	r1, #16
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2108      	movs	r1, #8
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2288      	movs	r2, #136	@ 0x88
 8006f00:	2120      	movs	r1, #32
 8006f02:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	228c      	movs	r2, #140	@ 0x8c
 8006f08:	2120      	movs	r1, #32
 8006f0a:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f000 fb73 	bl	8007600 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b018      	add	sp, #96	@ 0x60
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	fffffe1f 	.word	0xfffffe1f
 8006f28:	ef7ffffe 	.word	0xef7ffffe
 8006f2c:	08008167 	.word	0x08008167
 8006f30:	080081f7 	.word	0x080081f7

08006f34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f34:	b5b0      	push	{r4, r5, r7, lr}
 8006f36:	b0aa      	sub	sp, #168	@ 0xa8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	22a4      	movs	r2, #164	@ 0xa4
 8006f44:	18b9      	adds	r1, r7, r2
 8006f46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	20a0      	movs	r0, #160	@ 0xa0
 8006f50:	1839      	adds	r1, r7, r0
 8006f52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	249c      	movs	r4, #156	@ 0x9c
 8006f5c:	1939      	adds	r1, r7, r4
 8006f5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f60:	0011      	movs	r1, r2
 8006f62:	18bb      	adds	r3, r7, r2
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4aa2      	ldr	r2, [pc, #648]	@ (80071f0 <HAL_UART_IRQHandler+0x2bc>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	2298      	movs	r2, #152	@ 0x98
 8006f6c:	18bd      	adds	r5, r7, r2
 8006f6e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006f70:	18bb      	adds	r3, r7, r2
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11a      	bne.n	8006fae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f78:	187b      	adds	r3, r7, r1
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	4013      	ands	r3, r2
 8006f80:	d015      	beq.n	8006fae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f82:	183b      	adds	r3, r7, r0
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2220      	movs	r2, #32
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d105      	bne.n	8006f98 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f8c:	193b      	adds	r3, r7, r4
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	055b      	lsls	r3, r3, #21
 8006f94:	4013      	ands	r3, r2
 8006f96:	d00a      	beq.n	8006fae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d100      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x6e>
 8006fa0:	e2fb      	b.n	800759a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	0010      	movs	r0, r2
 8006faa:	4798      	blx	r3
      }
      return;
 8006fac:	e2f5      	b.n	800759a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fae:	2398      	movs	r3, #152	@ 0x98
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d100      	bne.n	8006fba <HAL_UART_IRQHandler+0x86>
 8006fb8:	e122      	b.n	8007200 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fba:	239c      	movs	r3, #156	@ 0x9c
 8006fbc:	18fb      	adds	r3, r7, r3
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a8c      	ldr	r2, [pc, #560]	@ (80071f4 <HAL_UART_IRQHandler+0x2c0>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	d106      	bne.n	8006fd4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006fc6:	23a0      	movs	r3, #160	@ 0xa0
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a8a      	ldr	r2, [pc, #552]	@ (80071f8 <HAL_UART_IRQHandler+0x2c4>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d100      	bne.n	8006fd4 <HAL_UART_IRQHandler+0xa0>
 8006fd2:	e115      	b.n	8007200 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fd4:	23a4      	movs	r3, #164	@ 0xa4
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d012      	beq.n	8007006 <HAL_UART_IRQHandler+0xd2>
 8006fe0:	23a0      	movs	r3, #160	@ 0xa0
 8006fe2:	18fb      	adds	r3, r7, r3
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	2380      	movs	r3, #128	@ 0x80
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	4013      	ands	r3, r2
 8006fec:	d00b      	beq.n	8007006 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2290      	movs	r2, #144	@ 0x90
 8006ffa:	589b      	ldr	r3, [r3, r2]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2190      	movs	r1, #144	@ 0x90
 8007004:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007006:	23a4      	movs	r3, #164	@ 0xa4
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2202      	movs	r2, #2
 800700e:	4013      	ands	r3, r2
 8007010:	d011      	beq.n	8007036 <HAL_UART_IRQHandler+0x102>
 8007012:	239c      	movs	r3, #156	@ 0x9c
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2201      	movs	r2, #1
 800701a:	4013      	ands	r3, r2
 800701c:	d00b      	beq.n	8007036 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2202      	movs	r2, #2
 8007024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2290      	movs	r2, #144	@ 0x90
 800702a:	589b      	ldr	r3, [r3, r2]
 800702c:	2204      	movs	r2, #4
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2190      	movs	r1, #144	@ 0x90
 8007034:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007036:	23a4      	movs	r3, #164	@ 0xa4
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2204      	movs	r2, #4
 800703e:	4013      	ands	r3, r2
 8007040:	d011      	beq.n	8007066 <HAL_UART_IRQHandler+0x132>
 8007042:	239c      	movs	r3, #156	@ 0x9c
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	4013      	ands	r3, r2
 800704c:	d00b      	beq.n	8007066 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2204      	movs	r2, #4
 8007054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2290      	movs	r2, #144	@ 0x90
 800705a:	589b      	ldr	r3, [r3, r2]
 800705c:	2202      	movs	r2, #2
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2190      	movs	r1, #144	@ 0x90
 8007064:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007066:	23a4      	movs	r3, #164	@ 0xa4
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2208      	movs	r2, #8
 800706e:	4013      	ands	r3, r2
 8007070:	d017      	beq.n	80070a2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007072:	23a0      	movs	r3, #160	@ 0xa0
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2220      	movs	r2, #32
 800707a:	4013      	ands	r3, r2
 800707c:	d105      	bne.n	800708a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800707e:	239c      	movs	r3, #156	@ 0x9c
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5b      	ldr	r2, [pc, #364]	@ (80071f4 <HAL_UART_IRQHandler+0x2c0>)
 8007086:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007088:	d00b      	beq.n	80070a2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2208      	movs	r2, #8
 8007090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2290      	movs	r2, #144	@ 0x90
 8007096:	589b      	ldr	r3, [r3, r2]
 8007098:	2208      	movs	r2, #8
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2190      	movs	r1, #144	@ 0x90
 80070a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070a2:	23a4      	movs	r3, #164	@ 0xa4
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	2380      	movs	r3, #128	@ 0x80
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	4013      	ands	r3, r2
 80070ae:	d013      	beq.n	80070d8 <HAL_UART_IRQHandler+0x1a4>
 80070b0:	23a0      	movs	r3, #160	@ 0xa0
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	2380      	movs	r3, #128	@ 0x80
 80070b8:	04db      	lsls	r3, r3, #19
 80070ba:	4013      	ands	r3, r2
 80070bc:	d00c      	beq.n	80070d8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2280      	movs	r2, #128	@ 0x80
 80070c4:	0112      	lsls	r2, r2, #4
 80070c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2290      	movs	r2, #144	@ 0x90
 80070cc:	589b      	ldr	r3, [r3, r2]
 80070ce:	2220      	movs	r2, #32
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2190      	movs	r1, #144	@ 0x90
 80070d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2290      	movs	r2, #144	@ 0x90
 80070dc:	589b      	ldr	r3, [r3, r2]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d100      	bne.n	80070e4 <HAL_UART_IRQHandler+0x1b0>
 80070e2:	e25c      	b.n	800759e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070e4:	23a4      	movs	r3, #164	@ 0xa4
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2220      	movs	r2, #32
 80070ec:	4013      	ands	r3, r2
 80070ee:	d015      	beq.n	800711c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070f0:	23a0      	movs	r3, #160	@ 0xa0
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2220      	movs	r2, #32
 80070f8:	4013      	ands	r3, r2
 80070fa:	d106      	bne.n	800710a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070fc:	239c      	movs	r3, #156	@ 0x9c
 80070fe:	18fb      	adds	r3, r7, r3
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	2380      	movs	r3, #128	@ 0x80
 8007104:	055b      	lsls	r3, r3, #21
 8007106:	4013      	ands	r3, r2
 8007108:	d008      	beq.n	800711c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	0010      	movs	r0, r2
 800711a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2290      	movs	r2, #144	@ 0x90
 8007120:	589b      	ldr	r3, [r3, r2]
 8007122:	2194      	movs	r1, #148	@ 0x94
 8007124:	187a      	adds	r2, r7, r1
 8007126:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2240      	movs	r2, #64	@ 0x40
 8007130:	4013      	ands	r3, r2
 8007132:	2b40      	cmp	r3, #64	@ 0x40
 8007134:	d004      	beq.n	8007140 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007136:	187b      	adds	r3, r7, r1
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2228      	movs	r2, #40	@ 0x28
 800713c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800713e:	d04c      	beq.n	80071da <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	0018      	movs	r0, r3
 8007144:	f000 fe96 	bl	8007e74 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2240      	movs	r2, #64	@ 0x40
 8007150:	4013      	ands	r3, r2
 8007152:	2b40      	cmp	r3, #64	@ 0x40
 8007154:	d13c      	bne.n	80071d0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007156:	f3ef 8310 	mrs	r3, PRIMASK
 800715a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800715c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715e:	2090      	movs	r0, #144	@ 0x90
 8007160:	183a      	adds	r2, r7, r0
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	2301      	movs	r3, #1
 8007166:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800716a:	f383 8810 	msr	PRIMASK, r3
}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2140      	movs	r1, #64	@ 0x40
 800717c:	438a      	bics	r2, r1
 800717e:	609a      	str	r2, [r3, #8]
 8007180:	183b      	adds	r3, r7, r0
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007188:	f383 8810 	msr	PRIMASK, r3
}
 800718c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2280      	movs	r2, #128	@ 0x80
 8007192:	589b      	ldr	r3, [r3, r2]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d016      	beq.n	80071c6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2280      	movs	r2, #128	@ 0x80
 800719c:	589b      	ldr	r3, [r3, r2]
 800719e:	4a17      	ldr	r2, [pc, #92]	@ (80071fc <HAL_UART_IRQHandler+0x2c8>)
 80071a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2280      	movs	r2, #128	@ 0x80
 80071a6:	589b      	ldr	r3, [r3, r2]
 80071a8:	0018      	movs	r0, r3
 80071aa:	f7fc f9c1 	bl	8003530 <HAL_DMA_Abort_IT>
 80071ae:	1e03      	subs	r3, r0, #0
 80071b0:	d01c      	beq.n	80071ec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2280      	movs	r2, #128	@ 0x80
 80071b6:	589b      	ldr	r3, [r3, r2]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	2180      	movs	r1, #128	@ 0x80
 80071be:	5852      	ldr	r2, [r2, r1]
 80071c0:	0010      	movs	r0, r2
 80071c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	e012      	b.n	80071ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fa11 	bl	80075f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ce:	e00d      	b.n	80071ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	0018      	movs	r0, r3
 80071d4:	f000 fa0c 	bl	80075f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d8:	e008      	b.n	80071ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	0018      	movs	r0, r3
 80071de:	f000 fa07 	bl	80075f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2290      	movs	r2, #144	@ 0x90
 80071e6:	2100      	movs	r1, #0
 80071e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80071ea:	e1d8      	b.n	800759e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ec:	46c0      	nop			@ (mov r8, r8)
    return;
 80071ee:	e1d6      	b.n	800759e <HAL_UART_IRQHandler+0x66a>
 80071f0:	0000080f 	.word	0x0000080f
 80071f4:	10000001 	.word	0x10000001
 80071f8:	04000120 	.word	0x04000120
 80071fc:	08008139 	.word	0x08008139

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007204:	2b01      	cmp	r3, #1
 8007206:	d000      	beq.n	800720a <HAL_UART_IRQHandler+0x2d6>
 8007208:	e15d      	b.n	80074c6 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800720a:	23a4      	movs	r3, #164	@ 0xa4
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2210      	movs	r2, #16
 8007212:	4013      	ands	r3, r2
 8007214:	d100      	bne.n	8007218 <HAL_UART_IRQHandler+0x2e4>
 8007216:	e156      	b.n	80074c6 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007218:	23a0      	movs	r3, #160	@ 0xa0
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2210      	movs	r2, #16
 8007220:	4013      	ands	r3, r2
 8007222:	d100      	bne.n	8007226 <HAL_UART_IRQHandler+0x2f2>
 8007224:	e14f      	b.n	80074c6 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2210      	movs	r2, #16
 800722c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2240      	movs	r2, #64	@ 0x40
 8007236:	4013      	ands	r3, r2
 8007238:	2b40      	cmp	r3, #64	@ 0x40
 800723a:	d000      	beq.n	800723e <HAL_UART_IRQHandler+0x30a>
 800723c:	e0c3      	b.n	80073c6 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2280      	movs	r2, #128	@ 0x80
 8007242:	589b      	ldr	r3, [r3, r2]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	217e      	movs	r1, #126	@ 0x7e
 800724a:	187b      	adds	r3, r7, r1
 800724c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800724e:	187b      	adds	r3, r7, r1
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d100      	bne.n	8007258 <HAL_UART_IRQHandler+0x324>
 8007256:	e097      	b.n	8007388 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	225c      	movs	r2, #92	@ 0x5c
 800725c:	5a9b      	ldrh	r3, [r3, r2]
 800725e:	187a      	adds	r2, r7, r1
 8007260:	8812      	ldrh	r2, [r2, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d300      	bcc.n	8007268 <HAL_UART_IRQHandler+0x334>
 8007266:	e08f      	b.n	8007388 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	187a      	adds	r2, r7, r1
 800726c:	215e      	movs	r1, #94	@ 0x5e
 800726e:	8812      	ldrh	r2, [r2, #0]
 8007270:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2280      	movs	r2, #128	@ 0x80
 8007276:	589b      	ldr	r3, [r3, r2]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2220      	movs	r2, #32
 800727e:	4013      	ands	r3, r2
 8007280:	d170      	bne.n	8007364 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007282:	f3ef 8310 	mrs	r3, PRIMASK
 8007286:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800728a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800728c:	2301      	movs	r3, #1
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007292:	f383 8810 	msr	PRIMASK, r3
}
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	49c4      	ldr	r1, [pc, #784]	@ (80075b4 <HAL_UART_IRQHandler+0x680>)
 80072a4:	400a      	ands	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072b4:	f3ef 8310 	mrs	r3, PRIMASK
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80072ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80072be:	2301      	movs	r3, #1
 80072c0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c4:	f383 8810 	msr	PRIMASK, r3
}
 80072c8:	46c0      	nop			@ (mov r8, r8)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2101      	movs	r1, #1
 80072d6:	438a      	bics	r2, r1
 80072d8:	609a      	str	r2, [r3, #8]
 80072da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072dc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e0:	f383 8810 	msr	PRIMASK, r3
}
 80072e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072e6:	f3ef 8310 	mrs	r3, PRIMASK
 80072ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80072ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80072f0:	2301      	movs	r3, #1
 80072f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f6:	f383 8810 	msr	PRIMASK, r3
}
 80072fa:	46c0      	nop			@ (mov r8, r8)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2140      	movs	r1, #64	@ 0x40
 8007308:	438a      	bics	r2, r1
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800730e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007312:	f383 8810 	msr	PRIMASK, r3
}
 8007316:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	228c      	movs	r2, #140	@ 0x8c
 800731c:	2120      	movs	r1, #32
 800731e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007326:	f3ef 8310 	mrs	r3, PRIMASK
 800732a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800732c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007330:	2301      	movs	r3, #1
 8007332:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007336:	f383 8810 	msr	PRIMASK, r3
}
 800733a:	46c0      	nop			@ (mov r8, r8)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2110      	movs	r1, #16
 8007348:	438a      	bics	r2, r1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800734e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2280      	movs	r2, #128	@ 0x80
 800735c:	589b      	ldr	r3, [r3, r2]
 800735e:	0018      	movs	r0, r3
 8007360:	f7fc f884 	bl	800346c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	225c      	movs	r2, #92	@ 0x5c
 800736e:	5a9a      	ldrh	r2, [r3, r2]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	215e      	movs	r1, #94	@ 0x5e
 8007374:	5a5b      	ldrh	r3, [r3, r1]
 8007376:	b29b      	uxth	r3, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	b29a      	uxth	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	0011      	movs	r1, r2
 8007380:	0018      	movs	r0, r3
 8007382:	f7f9 fde9 	bl	8000f58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007386:	e10c      	b.n	80075a2 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	225c      	movs	r2, #92	@ 0x5c
 800738c:	5a9b      	ldrh	r3, [r3, r2]
 800738e:	227e      	movs	r2, #126	@ 0x7e
 8007390:	18ba      	adds	r2, r7, r2
 8007392:	8812      	ldrh	r2, [r2, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d000      	beq.n	800739a <HAL_UART_IRQHandler+0x466>
 8007398:	e103      	b.n	80075a2 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2280      	movs	r2, #128	@ 0x80
 800739e:	589b      	ldr	r3, [r3, r2]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2220      	movs	r2, #32
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d000      	beq.n	80073ae <HAL_UART_IRQHandler+0x47a>
 80073ac:	e0f9      	b.n	80075a2 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2202      	movs	r2, #2
 80073b2:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	225c      	movs	r2, #92	@ 0x5c
 80073b8:	5a9a      	ldrh	r2, [r3, r2]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	0011      	movs	r1, r2
 80073be:	0018      	movs	r0, r3
 80073c0:	f7f9 fdca 	bl	8000f58 <HAL_UARTEx_RxEventCallback>
      return;
 80073c4:	e0ed      	b.n	80075a2 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	225c      	movs	r2, #92	@ 0x5c
 80073ca:	5a99      	ldrh	r1, [r3, r2]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	225e      	movs	r2, #94	@ 0x5e
 80073d0:	5a9b      	ldrh	r3, [r3, r2]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	208e      	movs	r0, #142	@ 0x8e
 80073d6:	183b      	adds	r3, r7, r0
 80073d8:	1a8a      	subs	r2, r1, r2
 80073da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	225e      	movs	r2, #94	@ 0x5e
 80073e0:	5a9b      	ldrh	r3, [r3, r2]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d100      	bne.n	80073ea <HAL_UART_IRQHandler+0x4b6>
 80073e8:	e0dd      	b.n	80075a6 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80073ea:	183b      	adds	r3, r7, r0
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d100      	bne.n	80073f4 <HAL_UART_IRQHandler+0x4c0>
 80073f2:	e0d8      	b.n	80075a6 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073f4:	f3ef 8310 	mrs	r3, PRIMASK
 80073f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80073fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073fc:	2488      	movs	r4, #136	@ 0x88
 80073fe:	193a      	adds	r2, r7, r4
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	2301      	movs	r3, #1
 8007404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f383 8810 	msr	PRIMASK, r3
}
 800740c:	46c0      	nop			@ (mov r8, r8)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4967      	ldr	r1, [pc, #412]	@ (80075b8 <HAL_UART_IRQHandler+0x684>)
 800741a:	400a      	ands	r2, r1
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	193b      	adds	r3, r7, r4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f383 8810 	msr	PRIMASK, r3
}
 800742a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800742c:	f3ef 8310 	mrs	r3, PRIMASK
 8007430:	61bb      	str	r3, [r7, #24]
  return(result);
 8007432:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007434:	2484      	movs	r4, #132	@ 0x84
 8007436:	193a      	adds	r2, r7, r4
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	2301      	movs	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	f383 8810 	msr	PRIMASK, r3
}
 8007444:	46c0      	nop			@ (mov r8, r8)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	495a      	ldr	r1, [pc, #360]	@ (80075bc <HAL_UART_IRQHandler+0x688>)
 8007452:	400a      	ands	r2, r1
 8007454:	609a      	str	r2, [r3, #8]
 8007456:	193b      	adds	r3, r7, r4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f383 8810 	msr	PRIMASK, r3
}
 8007462:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	228c      	movs	r2, #140	@ 0x8c
 8007468:	2120      	movs	r1, #32
 800746a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007478:	f3ef 8310 	mrs	r3, PRIMASK
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007480:	2480      	movs	r4, #128	@ 0x80
 8007482:	193a      	adds	r2, r7, r4
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	2301      	movs	r3, #1
 8007488:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	f383 8810 	msr	PRIMASK, r3
}
 8007490:	46c0      	nop			@ (mov r8, r8)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2110      	movs	r1, #16
 800749e:	438a      	bics	r2, r1
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	193b      	adds	r3, r7, r4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	f383 8810 	msr	PRIMASK, r3
}
 80074ae:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074b6:	183b      	adds	r3, r7, r0
 80074b8:	881a      	ldrh	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	0011      	movs	r1, r2
 80074be:	0018      	movs	r0, r3
 80074c0:	f7f9 fd4a 	bl	8000f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074c4:	e06f      	b.n	80075a6 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074c6:	23a4      	movs	r3, #164	@ 0xa4
 80074c8:	18fb      	adds	r3, r7, r3
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	2380      	movs	r3, #128	@ 0x80
 80074ce:	035b      	lsls	r3, r3, #13
 80074d0:	4013      	ands	r3, r2
 80074d2:	d010      	beq.n	80074f6 <HAL_UART_IRQHandler+0x5c2>
 80074d4:	239c      	movs	r3, #156	@ 0x9c
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	2380      	movs	r3, #128	@ 0x80
 80074dc:	03db      	lsls	r3, r3, #15
 80074de:	4013      	ands	r3, r2
 80074e0:	d009      	beq.n	80074f6 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2280      	movs	r2, #128	@ 0x80
 80074e8:	0352      	lsls	r2, r2, #13
 80074ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	0018      	movs	r0, r3
 80074f0:	f000 ff60 	bl	80083b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074f4:	e05a      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074f6:	23a4      	movs	r3, #164	@ 0xa4
 80074f8:	18fb      	adds	r3, r7, r3
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2280      	movs	r2, #128	@ 0x80
 80074fe:	4013      	ands	r3, r2
 8007500:	d016      	beq.n	8007530 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007502:	23a0      	movs	r3, #160	@ 0xa0
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2280      	movs	r2, #128	@ 0x80
 800750a:	4013      	ands	r3, r2
 800750c:	d106      	bne.n	800751c <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800750e:	239c      	movs	r3, #156	@ 0x9c
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	2380      	movs	r3, #128	@ 0x80
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	4013      	ands	r3, r2
 800751a:	d009      	beq.n	8007530 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007520:	2b00      	cmp	r3, #0
 8007522:	d042      	beq.n	80075aa <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	0010      	movs	r0, r2
 800752c:	4798      	blx	r3
    }
    return;
 800752e:	e03c      	b.n	80075aa <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007530:	23a4      	movs	r3, #164	@ 0xa4
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2240      	movs	r2, #64	@ 0x40
 8007538:	4013      	ands	r3, r2
 800753a:	d00a      	beq.n	8007552 <HAL_UART_IRQHandler+0x61e>
 800753c:	23a0      	movs	r3, #160	@ 0xa0
 800753e:	18fb      	adds	r3, r7, r3
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2240      	movs	r2, #64	@ 0x40
 8007544:	4013      	ands	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	0018      	movs	r0, r3
 800754c:	f000 fe94 	bl	8008278 <UART_EndTransmit_IT>
    return;
 8007550:	e02c      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007552:	23a4      	movs	r3, #164	@ 0xa4
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	2380      	movs	r3, #128	@ 0x80
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	4013      	ands	r3, r2
 800755e:	d00b      	beq.n	8007578 <HAL_UART_IRQHandler+0x644>
 8007560:	23a0      	movs	r3, #160	@ 0xa0
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	2380      	movs	r3, #128	@ 0x80
 8007568:	05db      	lsls	r3, r3, #23
 800756a:	4013      	ands	r3, r2
 800756c:	d004      	beq.n	8007578 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	0018      	movs	r0, r3
 8007572:	f000 ff2f 	bl	80083d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007576:	e019      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007578:	23a4      	movs	r3, #164	@ 0xa4
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	2380      	movs	r3, #128	@ 0x80
 8007580:	045b      	lsls	r3, r3, #17
 8007582:	4013      	ands	r3, r2
 8007584:	d012      	beq.n	80075ac <HAL_UART_IRQHandler+0x678>
 8007586:	23a0      	movs	r3, #160	@ 0xa0
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	da0d      	bge.n	80075ac <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	0018      	movs	r0, r3
 8007594:	f000 ff16 	bl	80083c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007598:	e008      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
      return;
 800759a:	46c0      	nop			@ (mov r8, r8)
 800759c:	e006      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
    return;
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	e004      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
      return;
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	e002      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
      return;
 80075a6:	46c0      	nop			@ (mov r8, r8)
 80075a8:	e000      	b.n	80075ac <HAL_UART_IRQHandler+0x678>
    return;
 80075aa:	46c0      	nop			@ (mov r8, r8)
  }
}
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b02a      	add	sp, #168	@ 0xa8
 80075b0:	bdb0      	pop	{r4, r5, r7, pc}
 80075b2:	46c0      	nop			@ (mov r8, r8)
 80075b4:	fffffeff 	.word	0xfffffeff
 80075b8:	fffffedf 	.word	0xfffffedf
 80075bc:	effffffe 	.word	0xeffffffe

080075c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075c8:	46c0      	nop			@ (mov r8, r8)
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b002      	add	sp, #8
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80075d8:	46c0      	nop			@ (mov r8, r8)
 80075da:	46bd      	mov	sp, r7
 80075dc:	b002      	add	sp, #8
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80075e8:	46c0      	nop			@ (mov r8, r8)
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b002      	add	sp, #8
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075f8:	46c0      	nop			@ (mov r8, r8)
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b002      	add	sp, #8
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007608:	46c0      	nop			@ (mov r8, r8)
 800760a:	46bd      	mov	sp, r7
 800760c:	b002      	add	sp, #8
 800760e:	bd80      	pop	{r7, pc}

08007610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007618:	231e      	movs	r3, #30
 800761a:	18fb      	adds	r3, r7, r3
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4aab      	ldr	r2, [pc, #684]	@ (80078ec <UART_SetConfig+0x2dc>)
 8007640:	4013      	ands	r3, r2
 8007642:	0019      	movs	r1, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	430a      	orrs	r2, r1
 800764c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4aa6      	ldr	r2, [pc, #664]	@ (80078f0 <UART_SetConfig+0x2e0>)
 8007656:	4013      	ands	r3, r2
 8007658:	0019      	movs	r1, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	4a9d      	ldr	r2, [pc, #628]	@ (80078f4 <UART_SetConfig+0x2e4>)
 800767e:	4013      	ands	r3, r2
 8007680:	0019      	movs	r1, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	220f      	movs	r2, #15
 8007694:	4393      	bics	r3, r2
 8007696:	0019      	movs	r1, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a93      	ldr	r2, [pc, #588]	@ (80078f8 <UART_SetConfig+0x2e8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d127      	bne.n	80076fe <UART_SetConfig+0xee>
 80076ae:	4b93      	ldr	r3, [pc, #588]	@ (80078fc <UART_SetConfig+0x2ec>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	2203      	movs	r2, #3
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d017      	beq.n	80076ea <UART_SetConfig+0xda>
 80076ba:	d81b      	bhi.n	80076f4 <UART_SetConfig+0xe4>
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d00a      	beq.n	80076d6 <UART_SetConfig+0xc6>
 80076c0:	d818      	bhi.n	80076f4 <UART_SetConfig+0xe4>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <UART_SetConfig+0xbc>
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00a      	beq.n	80076e0 <UART_SetConfig+0xd0>
 80076ca:	e013      	b.n	80076f4 <UART_SetConfig+0xe4>
 80076cc:	231f      	movs	r3, #31
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	e021      	b.n	800771a <UART_SetConfig+0x10a>
 80076d6:	231f      	movs	r3, #31
 80076d8:	18fb      	adds	r3, r7, r3
 80076da:	2202      	movs	r2, #2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e01c      	b.n	800771a <UART_SetConfig+0x10a>
 80076e0:	231f      	movs	r3, #31
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	2204      	movs	r2, #4
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e017      	b.n	800771a <UART_SetConfig+0x10a>
 80076ea:	231f      	movs	r3, #31
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	2208      	movs	r2, #8
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e012      	b.n	800771a <UART_SetConfig+0x10a>
 80076f4:	231f      	movs	r3, #31
 80076f6:	18fb      	adds	r3, r7, r3
 80076f8:	2210      	movs	r2, #16
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	e00d      	b.n	800771a <UART_SetConfig+0x10a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a7f      	ldr	r2, [pc, #508]	@ (8007900 <UART_SetConfig+0x2f0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d104      	bne.n	8007712 <UART_SetConfig+0x102>
 8007708:	231f      	movs	r3, #31
 800770a:	18fb      	adds	r3, r7, r3
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	e003      	b.n	800771a <UART_SetConfig+0x10a>
 8007712:	231f      	movs	r3, #31
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	2210      	movs	r2, #16
 8007718:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69da      	ldr	r2, [r3, #28]
 800771e:	2380      	movs	r3, #128	@ 0x80
 8007720:	021b      	lsls	r3, r3, #8
 8007722:	429a      	cmp	r2, r3
 8007724:	d000      	beq.n	8007728 <UART_SetConfig+0x118>
 8007726:	e06f      	b.n	8007808 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8007728:	231f      	movs	r3, #31
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d01f      	beq.n	8007772 <UART_SetConfig+0x162>
 8007732:	dc22      	bgt.n	800777a <UART_SetConfig+0x16a>
 8007734:	2b04      	cmp	r3, #4
 8007736:	d017      	beq.n	8007768 <UART_SetConfig+0x158>
 8007738:	dc1f      	bgt.n	800777a <UART_SetConfig+0x16a>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <UART_SetConfig+0x134>
 800773e:	2b02      	cmp	r3, #2
 8007740:	d005      	beq.n	800774e <UART_SetConfig+0x13e>
 8007742:	e01a      	b.n	800777a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007744:	f7fe fa7e 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8007748:	0003      	movs	r3, r0
 800774a:	61bb      	str	r3, [r7, #24]
        break;
 800774c:	e01c      	b.n	8007788 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800774e:	4b6b      	ldr	r3, [pc, #428]	@ (80078fc <UART_SetConfig+0x2ec>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	2207      	movs	r2, #7
 8007756:	4013      	ands	r3, r2
 8007758:	3301      	adds	r3, #1
 800775a:	0019      	movs	r1, r3
 800775c:	4869      	ldr	r0, [pc, #420]	@ (8007904 <UART_SetConfig+0x2f4>)
 800775e:	f7f8 fcd3 	bl	8000108 <__udivsi3>
 8007762:	0003      	movs	r3, r0
 8007764:	61bb      	str	r3, [r7, #24]
        break;
 8007766:	e00f      	b.n	8007788 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007768:	f7fe f9f6 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 800776c:	0003      	movs	r3, r0
 800776e:	61bb      	str	r3, [r7, #24]
        break;
 8007770:	e00a      	b.n	8007788 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007772:	2380      	movs	r3, #128	@ 0x80
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	61bb      	str	r3, [r7, #24]
        break;
 8007778:	e006      	b.n	8007788 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800777e:	231e      	movs	r3, #30
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	2201      	movs	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]
        break;
 8007786:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d100      	bne.n	8007790 <UART_SetConfig+0x180>
 800778e:	e097      	b.n	80078c0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007794:	4b5c      	ldr	r3, [pc, #368]	@ (8007908 <UART_SetConfig+0x2f8>)
 8007796:	0052      	lsls	r2, r2, #1
 8007798:	5ad3      	ldrh	r3, [r2, r3]
 800779a:	0019      	movs	r1, r3
 800779c:	69b8      	ldr	r0, [r7, #24]
 800779e:	f7f8 fcb3 	bl	8000108 <__udivsi3>
 80077a2:	0003      	movs	r3, r0
 80077a4:	005a      	lsls	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	18d2      	adds	r2, r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	0019      	movs	r1, r3
 80077b4:	0010      	movs	r0, r2
 80077b6:	f7f8 fca7 	bl	8000108 <__udivsi3>
 80077ba:	0003      	movs	r3, r0
 80077bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b0f      	cmp	r3, #15
 80077c2:	d91c      	bls.n	80077fe <UART_SetConfig+0x1ee>
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	2380      	movs	r3, #128	@ 0x80
 80077c8:	025b      	lsls	r3, r3, #9
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d217      	bcs.n	80077fe <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	200e      	movs	r0, #14
 80077d4:	183b      	adds	r3, r7, r0
 80077d6:	210f      	movs	r1, #15
 80077d8:	438a      	bics	r2, r1
 80077da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	085b      	lsrs	r3, r3, #1
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2207      	movs	r2, #7
 80077e4:	4013      	ands	r3, r2
 80077e6:	b299      	uxth	r1, r3
 80077e8:	183b      	adds	r3, r7, r0
 80077ea:	183a      	adds	r2, r7, r0
 80077ec:	8812      	ldrh	r2, [r2, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	183a      	adds	r2, r7, r0
 80077f8:	8812      	ldrh	r2, [r2, #0]
 80077fa:	60da      	str	r2, [r3, #12]
 80077fc:	e060      	b.n	80078c0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80077fe:	231e      	movs	r3, #30
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	2201      	movs	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e05b      	b.n	80078c0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007808:	231f      	movs	r3, #31
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b08      	cmp	r3, #8
 8007810:	d01f      	beq.n	8007852 <UART_SetConfig+0x242>
 8007812:	dc22      	bgt.n	800785a <UART_SetConfig+0x24a>
 8007814:	2b04      	cmp	r3, #4
 8007816:	d017      	beq.n	8007848 <UART_SetConfig+0x238>
 8007818:	dc1f      	bgt.n	800785a <UART_SetConfig+0x24a>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <UART_SetConfig+0x214>
 800781e:	2b02      	cmp	r3, #2
 8007820:	d005      	beq.n	800782e <UART_SetConfig+0x21e>
 8007822:	e01a      	b.n	800785a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007824:	f7fe fa0e 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8007828:	0003      	movs	r3, r0
 800782a:	61bb      	str	r3, [r7, #24]
        break;
 800782c:	e01c      	b.n	8007868 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800782e:	4b33      	ldr	r3, [pc, #204]	@ (80078fc <UART_SetConfig+0x2ec>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	2207      	movs	r2, #7
 8007836:	4013      	ands	r3, r2
 8007838:	3301      	adds	r3, #1
 800783a:	0019      	movs	r1, r3
 800783c:	4831      	ldr	r0, [pc, #196]	@ (8007904 <UART_SetConfig+0x2f4>)
 800783e:	f7f8 fc63 	bl	8000108 <__udivsi3>
 8007842:	0003      	movs	r3, r0
 8007844:	61bb      	str	r3, [r7, #24]
        break;
 8007846:	e00f      	b.n	8007868 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007848:	f7fe f986 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 800784c:	0003      	movs	r3, r0
 800784e:	61bb      	str	r3, [r7, #24]
        break;
 8007850:	e00a      	b.n	8007868 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007852:	2380      	movs	r3, #128	@ 0x80
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	61bb      	str	r3, [r7, #24]
        break;
 8007858:	e006      	b.n	8007868 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800785e:	231e      	movs	r3, #30
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	2201      	movs	r2, #1
 8007864:	701a      	strb	r2, [r3, #0]
        break;
 8007866:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d028      	beq.n	80078c0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007872:	4b25      	ldr	r3, [pc, #148]	@ (8007908 <UART_SetConfig+0x2f8>)
 8007874:	0052      	lsls	r2, r2, #1
 8007876:	5ad3      	ldrh	r3, [r2, r3]
 8007878:	0019      	movs	r1, r3
 800787a:	69b8      	ldr	r0, [r7, #24]
 800787c:	f7f8 fc44 	bl	8000108 <__udivsi3>
 8007880:	0003      	movs	r3, r0
 8007882:	001a      	movs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	085b      	lsrs	r3, r3, #1
 800788a:	18d2      	adds	r2, r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	0019      	movs	r1, r3
 8007892:	0010      	movs	r0, r2
 8007894:	f7f8 fc38 	bl	8000108 <__udivsi3>
 8007898:	0003      	movs	r3, r0
 800789a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b0f      	cmp	r3, #15
 80078a0:	d90a      	bls.n	80078b8 <UART_SetConfig+0x2a8>
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	2380      	movs	r3, #128	@ 0x80
 80078a6:	025b      	lsls	r3, r3, #9
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d205      	bcs.n	80078b8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	e003      	b.n	80078c0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80078b8:	231e      	movs	r3, #30
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	226a      	movs	r2, #106	@ 0x6a
 80078c4:	2101      	movs	r1, #1
 80078c6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2268      	movs	r2, #104	@ 0x68
 80078cc:	2101      	movs	r1, #1
 80078ce:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078dc:	231e      	movs	r3, #30
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	781b      	ldrb	r3, [r3, #0]
}
 80078e2:	0018      	movs	r0, r3
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b008      	add	sp, #32
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	46c0      	nop			@ (mov r8, r8)
 80078ec:	cfff69f3 	.word	0xcfff69f3
 80078f0:	ffffcfff 	.word	0xffffcfff
 80078f4:	11fff4ff 	.word	0x11fff4ff
 80078f8:	40013800 	.word	0x40013800
 80078fc:	40021000 	.word	0x40021000
 8007900:	40004400 	.word	0x40004400
 8007904:	02dc6c00 	.word	0x02dc6c00
 8007908:	08008a48 	.word	0x08008a48

0800790c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007918:	2208      	movs	r2, #8
 800791a:	4013      	ands	r3, r2
 800791c:	d00b      	beq.n	8007936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4a4a      	ldr	r2, [pc, #296]	@ (8007a50 <UART_AdvFeatureConfig+0x144>)
 8007926:	4013      	ands	r3, r2
 8007928:	0019      	movs	r1, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793a:	2201      	movs	r2, #1
 800793c:	4013      	ands	r3, r2
 800793e:	d00b      	beq.n	8007958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	4a43      	ldr	r2, [pc, #268]	@ (8007a54 <UART_AdvFeatureConfig+0x148>)
 8007948:	4013      	ands	r3, r2
 800794a:	0019      	movs	r1, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795c:	2202      	movs	r2, #2
 800795e:	4013      	ands	r3, r2
 8007960:	d00b      	beq.n	800797a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4a3b      	ldr	r2, [pc, #236]	@ (8007a58 <UART_AdvFeatureConfig+0x14c>)
 800796a:	4013      	ands	r3, r2
 800796c:	0019      	movs	r1, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797e:	2204      	movs	r2, #4
 8007980:	4013      	ands	r3, r2
 8007982:	d00b      	beq.n	800799c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	4a34      	ldr	r2, [pc, #208]	@ (8007a5c <UART_AdvFeatureConfig+0x150>)
 800798c:	4013      	ands	r3, r2
 800798e:	0019      	movs	r1, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a0:	2210      	movs	r2, #16
 80079a2:	4013      	ands	r3, r2
 80079a4:	d00b      	beq.n	80079be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007a60 <UART_AdvFeatureConfig+0x154>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	0019      	movs	r1, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c2:	2220      	movs	r2, #32
 80079c4:	4013      	ands	r3, r2
 80079c6:	d00b      	beq.n	80079e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	4a25      	ldr	r2, [pc, #148]	@ (8007a64 <UART_AdvFeatureConfig+0x158>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	0019      	movs	r1, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e4:	2240      	movs	r2, #64	@ 0x40
 80079e6:	4013      	ands	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a68 <UART_AdvFeatureConfig+0x15c>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	0019      	movs	r1, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a06:	2380      	movs	r3, #128	@ 0x80
 8007a08:	035b      	lsls	r3, r3, #13
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d10b      	bne.n	8007a26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	4a15      	ldr	r2, [pc, #84]	@ (8007a6c <UART_AdvFeatureConfig+0x160>)
 8007a16:	4013      	ands	r3, r2
 8007a18:	0019      	movs	r1, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2a:	2280      	movs	r2, #128	@ 0x80
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	4a0e      	ldr	r2, [pc, #56]	@ (8007a70 <UART_AdvFeatureConfig+0x164>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }
}
 8007a48:	46c0      	nop			@ (mov r8, r8)
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	ffff7fff 	.word	0xffff7fff
 8007a54:	fffdffff 	.word	0xfffdffff
 8007a58:	fffeffff 	.word	0xfffeffff
 8007a5c:	fffbffff 	.word	0xfffbffff
 8007a60:	ffffefff 	.word	0xffffefff
 8007a64:	ffffdfff 	.word	0xffffdfff
 8007a68:	ffefffff 	.word	0xffefffff
 8007a6c:	ff9fffff 	.word	0xff9fffff
 8007a70:	fff7ffff 	.word	0xfff7ffff

08007a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b092      	sub	sp, #72	@ 0x48
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2290      	movs	r2, #144	@ 0x90
 8007a80:	2100      	movs	r1, #0
 8007a82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a84:	f7fa fb3e 	bl	8002104 <HAL_GetTick>
 8007a88:	0003      	movs	r3, r0
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2208      	movs	r2, #8
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d12d      	bne.n	8007af6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	2280      	movs	r2, #128	@ 0x80
 8007a9e:	0391      	lsls	r1, r2, #14
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	4a47      	ldr	r2, [pc, #284]	@ (8007bc0 <UART_CheckIdleState+0x14c>)
 8007aa4:	9200      	str	r2, [sp, #0]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f000 f88e 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007aac:	1e03      	subs	r3, r0, #0
 8007aae:	d022      	beq.n	8007af6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aba:	2301      	movs	r3, #1
 8007abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac0:	f383 8810 	msr	PRIMASK, r3
}
 8007ac4:	46c0      	nop			@ (mov r8, r8)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2180      	movs	r1, #128	@ 0x80
 8007ad2:	438a      	bics	r2, r1
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007adc:	f383 8810 	msr	PRIMASK, r3
}
 8007ae0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2288      	movs	r2, #136	@ 0x88
 8007ae6:	2120      	movs	r1, #32
 8007ae8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2284      	movs	r2, #132	@ 0x84
 8007aee:	2100      	movs	r1, #0
 8007af0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e060      	b.n	8007bb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2204      	movs	r2, #4
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d146      	bne.n	8007b92 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b06:	2280      	movs	r2, #128	@ 0x80
 8007b08:	03d1      	lsls	r1, r2, #15
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc0 <UART_CheckIdleState+0x14c>)
 8007b0e:	9200      	str	r2, [sp, #0]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f000 f859 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007b16:	1e03      	subs	r3, r0, #0
 8007b18:	d03b      	beq.n	8007b92 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b20:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b24:	2301      	movs	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f383 8810 	msr	PRIMASK, r3
}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4922      	ldr	r1, [pc, #136]	@ (8007bc4 <UART_CheckIdleState+0x150>)
 8007b3c:	400a      	ands	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f383 8810 	msr	PRIMASK, r3
}
 8007b4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b50:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b52:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b56:	2301      	movs	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f383 8810 	msr	PRIMASK, r3
}
 8007b60:	46c0      	nop			@ (mov r8, r8)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	438a      	bics	r2, r1
 8007b70:	609a      	str	r2, [r3, #8]
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	f383 8810 	msr	PRIMASK, r3
}
 8007b7c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	228c      	movs	r2, #140	@ 0x8c
 8007b82:	2120      	movs	r1, #32
 8007b84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2284      	movs	r2, #132	@ 0x84
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e012      	b.n	8007bb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2288      	movs	r2, #136	@ 0x88
 8007b96:	2120      	movs	r1, #32
 8007b98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	228c      	movs	r2, #140	@ 0x8c
 8007b9e:	2120      	movs	r1, #32
 8007ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2284      	movs	r2, #132	@ 0x84
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b010      	add	sp, #64	@ 0x40
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	01ffffff 	.word	0x01ffffff
 8007bc4:	fffffedf 	.word	0xfffffedf

08007bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	1dfb      	adds	r3, r7, #7
 8007bd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd8:	e051      	b.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	d04e      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be0:	f7fa fa90 	bl	8002104 <HAL_GetTick>
 8007be4:	0002      	movs	r2, r0
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e051      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2204      	movs	r2, #4
 8007c02:	4013      	ands	r3, r2
 8007c04:	d03b      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b80      	cmp	r3, #128	@ 0x80
 8007c0a:	d038      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b40      	cmp	r3, #64	@ 0x40
 8007c10:	d035      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d111      	bne.n	8007c44 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2208      	movs	r2, #8
 8007c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f000 f922 	bl	8007e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2290      	movs	r2, #144	@ 0x90
 8007c34:	2108      	movs	r1, #8
 8007c36:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2284      	movs	r2, #132	@ 0x84
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e02c      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69da      	ldr	r2, [r3, #28]
 8007c4a:	2380      	movs	r3, #128	@ 0x80
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	401a      	ands	r2, r3
 8007c50:	2380      	movs	r3, #128	@ 0x80
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d112      	bne.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2280      	movs	r2, #128	@ 0x80
 8007c5e:	0112      	lsls	r2, r2, #4
 8007c60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	0018      	movs	r0, r3
 8007c66:	f000 f905 	bl	8007e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2290      	movs	r2, #144	@ 0x90
 8007c6e:	2120      	movs	r1, #32
 8007c70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2284      	movs	r2, #132	@ 0x84
 8007c76:	2100      	movs	r1, #0
 8007c78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e00f      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	425a      	negs	r2, r3
 8007c8e:	4153      	adcs	r3, r2
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	001a      	movs	r2, r3
 8007c94:	1dfb      	adds	r3, r7, #7
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d09e      	beq.n	8007bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b004      	add	sp, #16
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b090      	sub	sp, #64	@ 0x40
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	1dbb      	adds	r3, r7, #6
 8007cb4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	1dba      	adds	r2, r7, #6
 8007cc0:	215c      	movs	r1, #92	@ 0x5c
 8007cc2:	8812      	ldrh	r2, [r2, #0]
 8007cc4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2290      	movs	r2, #144	@ 0x90
 8007cca:	2100      	movs	r1, #0
 8007ccc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	228c      	movs	r2, #140	@ 0x8c
 8007cd2:	2122      	movs	r1, #34	@ 0x22
 8007cd4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2280      	movs	r2, #128	@ 0x80
 8007cda:	589b      	ldr	r3, [r3, r2]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d02d      	beq.n	8007d3c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2280      	movs	r2, #128	@ 0x80
 8007ce4:	589b      	ldr	r3, [r3, r2]
 8007ce6:	4a40      	ldr	r2, [pc, #256]	@ (8007de8 <UART_Start_Receive_DMA+0x140>)
 8007ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2280      	movs	r2, #128	@ 0x80
 8007cee:	589b      	ldr	r3, [r3, r2]
 8007cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8007dec <UART_Start_Receive_DMA+0x144>)
 8007cf2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2280      	movs	r2, #128	@ 0x80
 8007cf8:	589b      	ldr	r3, [r3, r2]
 8007cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8007df0 <UART_Start_Receive_DMA+0x148>)
 8007cfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2280      	movs	r2, #128	@ 0x80
 8007d02:	589b      	ldr	r3, [r3, r2]
 8007d04:	2200      	movs	r2, #0
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2280      	movs	r2, #128	@ 0x80
 8007d0c:	5898      	ldr	r0, [r3, r2]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3324      	adds	r3, #36	@ 0x24
 8007d14:	0019      	movs	r1, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1a:	001a      	movs	r2, r3
 8007d1c:	1dbb      	adds	r3, r7, #6
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	f7fb fb1c 	bl	800335c <HAL_DMA_Start_IT>
 8007d24:	1e03      	subs	r3, r0, #0
 8007d26:	d009      	beq.n	8007d3c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2290      	movs	r2, #144	@ 0x90
 8007d2c:	2110      	movs	r1, #16
 8007d2e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	228c      	movs	r2, #140	@ 0x8c
 8007d34:	2120      	movs	r1, #32
 8007d36:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e050      	b.n	8007dde <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d019      	beq.n	8007d78 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d44:	f3ef 8310 	mrs	r3, PRIMASK
 8007d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d4e:	2301      	movs	r3, #1
 8007d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	f383 8810 	msr	PRIMASK, r3
}
 8007d58:	46c0      	nop			@ (mov r8, r8)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2180      	movs	r1, #128	@ 0x80
 8007d66:	0049      	lsls	r1, r1, #1
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	f383 8810 	msr	PRIMASK, r3
}
 8007d76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d78:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7c:	613b      	str	r3, [r7, #16]
  return(result);
 8007d7e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d82:	2301      	movs	r3, #1
 8007d84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f383 8810 	msr	PRIMASK, r3
}
 8007d8c:	46c0      	nop			@ (mov r8, r8)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2101      	movs	r1, #1
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	609a      	str	r2, [r3, #8]
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	f383 8810 	msr	PRIMASK, r3
}
 8007da8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007daa:	f3ef 8310 	mrs	r3, PRIMASK
 8007dae:	61fb      	str	r3, [r7, #28]
  return(result);
 8007db0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db4:	2301      	movs	r3, #1
 8007db6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	f383 8810 	msr	PRIMASK, r3
}
 8007dbe:	46c0      	nop			@ (mov r8, r8)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2140      	movs	r1, #64	@ 0x40
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	609a      	str	r2, [r3, #8]
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	f383 8810 	msr	PRIMASK, r3
}
 8007dda:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	0018      	movs	r0, r3
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b010      	add	sp, #64	@ 0x40
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	46c0      	nop			@ (mov r8, r8)
 8007de8:	08007f41 	.word	0x08007f41
 8007dec:	08008071 	.word	0x08008071
 8007df0:	080080b3 	.word	0x080080b3

08007df4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	@ 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007e00:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e02:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e06:	2301      	movs	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f383 8810 	msr	PRIMASK, r3
}
 8007e10:	46c0      	nop			@ (mov r8, r8)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	21c0      	movs	r1, #192	@ 0xc0
 8007e1e:	438a      	bics	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f383 8810 	msr	PRIMASK, r3
}
 8007e2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e32:	617b      	str	r3, [r7, #20]
  return(result);
 8007e34:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007e36:	623b      	str	r3, [r7, #32]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	f383 8810 	msr	PRIMASK, r3
}
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4908      	ldr	r1, [pc, #32]	@ (8007e70 <UART_EndTxTransfer+0x7c>)
 8007e50:	400a      	ands	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f383 8810 	msr	PRIMASK, r3
}
 8007e5e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2288      	movs	r2, #136	@ 0x88
 8007e64:	2120      	movs	r1, #32
 8007e66:	5099      	str	r1, [r3, r2]
}
 8007e68:	46c0      	nop			@ (mov r8, r8)
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b00a      	add	sp, #40	@ 0x28
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	ff7fffff 	.word	0xff7fffff

08007e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08e      	sub	sp, #56	@ 0x38
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e80:	617b      	str	r3, [r7, #20]
  return(result);
 8007e82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e86:	2301      	movs	r3, #1
 8007e88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	f383 8810 	msr	PRIMASK, r3
}
 8007e90:	46c0      	nop			@ (mov r8, r8)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4926      	ldr	r1, [pc, #152]	@ (8007f38 <UART_EndRxTransfer+0xc4>)
 8007e9e:	400a      	ands	r2, r1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f383 8810 	msr	PRIMASK, r3
}
 8007eac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007eae:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb2:	623b      	str	r3, [r7, #32]
  return(result);
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eb8:	2301      	movs	r3, #1
 8007eba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	f383 8810 	msr	PRIMASK, r3
}
 8007ec2:	46c0      	nop			@ (mov r8, r8)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	491b      	ldr	r1, [pc, #108]	@ (8007f3c <UART_EndRxTransfer+0xc8>)
 8007ed0:	400a      	ands	r2, r1
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	f383 8810 	msr	PRIMASK, r3
}
 8007ede:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d118      	bne.n	8007f1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8007eec:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f383 8810 	msr	PRIMASK, r3
}
 8007efc:	46c0      	nop			@ (mov r8, r8)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2110      	movs	r1, #16
 8007f0a:	438a      	bics	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f383 8810 	msr	PRIMASK, r3
}
 8007f18:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	228c      	movs	r2, #140	@ 0x8c
 8007f1e:	2120      	movs	r1, #32
 8007f20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f2e:	46c0      	nop			@ (mov r8, r8)
 8007f30:	46bd      	mov	sp, r7
 8007f32:	b00e      	add	sp, #56	@ 0x38
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	46c0      	nop			@ (mov r8, r8)
 8007f38:	fffffedf 	.word	0xfffffedf
 8007f3c:	effffffe 	.word	0xeffffffe

08007f40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b094      	sub	sp, #80	@ 0x50
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2220      	movs	r2, #32
 8007f56:	4013      	ands	r3, r2
 8007f58:	d16f      	bne.n	800803a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f5c:	225e      	movs	r2, #94	@ 0x5e
 8007f5e:	2100      	movs	r1, #0
 8007f60:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f62:	f3ef 8310 	mrs	r3, PRIMASK
 8007f66:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f68:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f383 8810 	msr	PRIMASK, r3
}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	493a      	ldr	r1, [pc, #232]	@ (800806c <UART_DMAReceiveCplt+0x12c>)
 8007f84:	400a      	ands	r2, r1
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	f383 8810 	msr	PRIMASK, r3
}
 8007f92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f94:	f3ef 8310 	mrs	r3, PRIMASK
 8007f98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	f383 8810 	msr	PRIMASK, r3
}
 8007fa8:	46c0      	nop			@ (mov r8, r8)
 8007faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	438a      	bics	r2, r1
 8007fb8:	609a      	str	r2, [r3, #8]
 8007fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc0:	f383 8810 	msr	PRIMASK, r3
}
 8007fc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fce:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd6:	f383 8810 	msr	PRIMASK, r3
}
 8007fda:	46c0      	nop			@ (mov r8, r8)
 8007fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2140      	movs	r1, #64	@ 0x40
 8007fe8:	438a      	bics	r2, r1
 8007fea:	609a      	str	r2, [r3, #8]
 8007fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	f383 8810 	msr	PRIMASK, r3
}
 8007ff6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ffa:	228c      	movs	r2, #140	@ 0x8c
 8007ffc:	2120      	movs	r1, #32
 8007ffe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d118      	bne.n	800803a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008008:	f3ef 8310 	mrs	r3, PRIMASK
 800800c:	60fb      	str	r3, [r7, #12]
  return(result);
 800800e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008012:	2301      	movs	r3, #1
 8008014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f383 8810 	msr	PRIMASK, r3
}
 800801c:	46c0      	nop			@ (mov r8, r8)
 800801e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2110      	movs	r1, #16
 800802a:	438a      	bics	r2, r1
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008030:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f383 8810 	msr	PRIMASK, r3
}
 8008038:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800803a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800803c:	2200      	movs	r2, #0
 800803e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008044:	2b01      	cmp	r3, #1
 8008046:	d108      	bne.n	800805a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800804a:	225c      	movs	r2, #92	@ 0x5c
 800804c:	5a9a      	ldrh	r2, [r3, r2]
 800804e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008050:	0011      	movs	r1, r2
 8008052:	0018      	movs	r0, r3
 8008054:	f7f8 ff80 	bl	8000f58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008058:	e003      	b.n	8008062 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800805a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800805c:	0018      	movs	r0, r3
 800805e:	f7ff fab7 	bl	80075d0 <HAL_UART_RxCpltCallback>
}
 8008062:	46c0      	nop			@ (mov r8, r8)
 8008064:	46bd      	mov	sp, r7
 8008066:	b014      	add	sp, #80	@ 0x50
 8008068:	bd80      	pop	{r7, pc}
 800806a:	46c0      	nop			@ (mov r8, r8)
 800806c:	fffffeff 	.word	0xfffffeff

08008070 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008088:	2b01      	cmp	r3, #1
 800808a:	d10a      	bne.n	80080a2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	225c      	movs	r2, #92	@ 0x5c
 8008090:	5a9b      	ldrh	r3, [r3, r2]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	0011      	movs	r1, r2
 800809a:	0018      	movs	r0, r3
 800809c:	f7f8 ff5c 	bl	8000f58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080a0:	e003      	b.n	80080aa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7ff fa9b 	bl	80075e0 <HAL_UART_RxHalfCpltCallback>
}
 80080aa:	46c0      	nop			@ (mov r8, r8)
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b004      	add	sp, #16
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b086      	sub	sp, #24
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2288      	movs	r2, #136	@ 0x88
 80080c4:	589b      	ldr	r3, [r3, r2]
 80080c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	228c      	movs	r2, #140	@ 0x8c
 80080cc:	589b      	ldr	r3, [r3, r2]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2280      	movs	r2, #128	@ 0x80
 80080d8:	4013      	ands	r3, r2
 80080da:	2b80      	cmp	r3, #128	@ 0x80
 80080dc:	d10a      	bne.n	80080f4 <UART_DMAError+0x42>
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b21      	cmp	r3, #33	@ 0x21
 80080e2:	d107      	bne.n	80080f4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2256      	movs	r2, #86	@ 0x56
 80080e8:	2100      	movs	r1, #0
 80080ea:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	0018      	movs	r0, r3
 80080f0:	f7ff fe80 	bl	8007df4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2240      	movs	r2, #64	@ 0x40
 80080fc:	4013      	ands	r3, r2
 80080fe:	2b40      	cmp	r3, #64	@ 0x40
 8008100:	d10a      	bne.n	8008118 <UART_DMAError+0x66>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b22      	cmp	r3, #34	@ 0x22
 8008106:	d107      	bne.n	8008118 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	225e      	movs	r2, #94	@ 0x5e
 800810c:	2100      	movs	r1, #0
 800810e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	0018      	movs	r0, r3
 8008114:	f7ff feae 	bl	8007e74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2290      	movs	r2, #144	@ 0x90
 800811c:	589b      	ldr	r3, [r3, r2]
 800811e:	2210      	movs	r2, #16
 8008120:	431a      	orrs	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2190      	movs	r1, #144	@ 0x90
 8008126:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	0018      	movs	r0, r3
 800812c:	f7ff fa60 	bl	80075f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008130:	46c0      	nop			@ (mov r8, r8)
 8008132:	46bd      	mov	sp, r7
 8008134:	b006      	add	sp, #24
 8008136:	bd80      	pop	{r7, pc}

08008138 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	225e      	movs	r2, #94	@ 0x5e
 800814a:	2100      	movs	r1, #0
 800814c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2256      	movs	r2, #86	@ 0x56
 8008152:	2100      	movs	r1, #0
 8008154:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	0018      	movs	r0, r3
 800815a:	f7ff fa49 	bl	80075f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800815e:	46c0      	nop			@ (mov r8, r8)
 8008160:	46bd      	mov	sp, r7
 8008162:	b004      	add	sp, #16
 8008164:	bd80      	pop	{r7, pc}

08008166 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008178:	2200      	movs	r2, #0
 800817a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2280      	movs	r2, #128	@ 0x80
 8008180:	589b      	ldr	r3, [r3, r2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2280      	movs	r2, #128	@ 0x80
 800818a:	589b      	ldr	r3, [r3, r2]
 800818c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818e:	2b00      	cmp	r3, #0
 8008190:	d12d      	bne.n	80081ee <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2256      	movs	r2, #86	@ 0x56
 8008196:	2100      	movs	r1, #0
 8008198:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	225e      	movs	r2, #94	@ 0x5e
 800819e:	2100      	movs	r1, #0
 80081a0:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2290      	movs	r2, #144	@ 0x90
 80081a6:	2100      	movs	r1, #0
 80081a8:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	220f      	movs	r2, #15
 80081b0:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80081b6:	2380      	movs	r3, #128	@ 0x80
 80081b8:	059b      	lsls	r3, r3, #22
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d107      	bne.n	80081ce <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2110      	movs	r1, #16
 80081ca:	430a      	orrs	r2, r1
 80081cc:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2288      	movs	r2, #136	@ 0x88
 80081d2:	2120      	movs	r1, #32
 80081d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	228c      	movs	r2, #140	@ 0x8c
 80081da:	2120      	movs	r1, #32
 80081dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0018      	movs	r0, r3
 80081e8:	f7ff fa0a 	bl	8007600 <HAL_UART_AbortCpltCallback>
 80081ec:	e000      	b.n	80081f0 <UART_DMATxAbortCallback+0x8a>
      return;
 80081ee:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b004      	add	sp, #16
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008202:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2280      	movs	r2, #128	@ 0x80
 8008208:	589b      	ldr	r3, [r3, r2]
 800820a:	2200      	movs	r2, #0
 800820c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800821a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	d127      	bne.n	8008270 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2256      	movs	r2, #86	@ 0x56
 8008224:	2100      	movs	r1, #0
 8008226:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	225e      	movs	r2, #94	@ 0x5e
 800822c:	2100      	movs	r1, #0
 800822e:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2290      	movs	r2, #144	@ 0x90
 8008234:	2100      	movs	r1, #0
 8008236:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	220f      	movs	r2, #15
 800823e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2108      	movs	r1, #8
 800824c:	430a      	orrs	r2, r1
 800824e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2288      	movs	r2, #136	@ 0x88
 8008254:	2120      	movs	r1, #32
 8008256:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	228c      	movs	r2, #140	@ 0x8c
 800825c:	2120      	movs	r1, #32
 800825e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	0018      	movs	r0, r3
 800826a:	f7ff f9c9 	bl	8007600 <HAL_UART_AbortCpltCallback>
 800826e:	e000      	b.n	8008272 <UART_DMARxAbortCallback+0x7c>
      return;
 8008270:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008272:	46bd      	mov	sp, r7
 8008274:	b004      	add	sp, #16
 8008276:	bd80      	pop	{r7, pc}

08008278 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008280:	f3ef 8310 	mrs	r3, PRIMASK
 8008284:	60bb      	str	r3, [r7, #8]
  return(result);
 8008286:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	2301      	movs	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f383 8810 	msr	PRIMASK, r3
}
 8008294:	46c0      	nop			@ (mov r8, r8)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2140      	movs	r1, #64	@ 0x40
 80082a2:	438a      	bics	r2, r1
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f383 8810 	msr	PRIMASK, r3
}
 80082b0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2288      	movs	r2, #136	@ 0x88
 80082b6:	2120      	movs	r1, #32
 80082b8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	0018      	movs	r0, r3
 80082c4:	f7ff f97c 	bl	80075c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082c8:	46c0      	nop			@ (mov r8, r8)
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b006      	add	sp, #24
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e05d      	b.n	80083a4 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2288      	movs	r2, #136	@ 0x88
 80082ec:	589b      	ldr	r3, [r3, r2]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d107      	bne.n	8008302 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2284      	movs	r2, #132	@ 0x84
 80082f6:	2100      	movs	r1, #0
 80082f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f7f9 fd21 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2288      	movs	r2, #136	@ 0x88
 8008306:	2124      	movs	r1, #36	@ 0x24
 8008308:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2101      	movs	r1, #1
 8008316:	438a      	bics	r2, r1
 8008318:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	0018      	movs	r0, r3
 8008326:	f7ff faf1 	bl	800790c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	0018      	movs	r0, r3
 800832e:	f7ff f96f 	bl	8007610 <UART_SetConfig>
 8008332:	0003      	movs	r3, r0
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e033      	b.n	80083a4 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2180      	movs	r1, #128	@ 0x80
 8008348:	01c9      	lsls	r1, r1, #7
 800834a:	430a      	orrs	r2, r1
 800834c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	4a15      	ldr	r2, [pc, #84]	@ (80083ac <HAL_RS485Ex_Init+0xdc>)
 8008356:	4013      	ands	r3, r2
 8008358:	0019      	movs	r1, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	430a      	orrs	r2, r1
 8008362:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	055b      	lsls	r3, r3, #21
 8008368:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a0d      	ldr	r2, [pc, #52]	@ (80083b0 <HAL_RS485Ex_Init+0xe0>)
 800837c:	4013      	ands	r3, r2
 800837e:	0019      	movs	r1, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	430a      	orrs	r2, r1
 8008388:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2101      	movs	r1, #1
 8008396:	430a      	orrs	r2, r1
 8008398:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	0018      	movs	r0, r3
 800839e:	f7ff fb69 	bl	8007a74 <UART_CheckIdleState>
 80083a2:	0003      	movs	r3, r0
}
 80083a4:	0018      	movs	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b006      	add	sp, #24
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	ffff7fff 	.word	0xffff7fff
 80083b0:	fc00ffff 	.word	0xfc00ffff

080083b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083bc:	46c0      	nop			@ (mov r8, r8)
 80083be:	46bd      	mov	sp, r7
 80083c0:	b002      	add	sp, #8
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083cc:	46c0      	nop			@ (mov r8, r8)
 80083ce:	46bd      	mov	sp, r7
 80083d0:	b002      	add	sp, #8
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083dc:	46c0      	nop			@ (mov r8, r8)
 80083de:	46bd      	mov	sp, r7
 80083e0:	b002      	add	sp, #8
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2284      	movs	r2, #132	@ 0x84
 80083f0:	5c9b      	ldrb	r3, [r3, r2]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_UARTEx_DisableFifoMode+0x16>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e027      	b.n	800844a <HAL_UARTEx_DisableFifoMode+0x66>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2284      	movs	r2, #132	@ 0x84
 80083fe:	2101      	movs	r1, #1
 8008400:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2288      	movs	r2, #136	@ 0x88
 8008406:	2124      	movs	r1, #36	@ 0x24
 8008408:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2101      	movs	r1, #1
 800841e:	438a      	bics	r2, r1
 8008420:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a0b      	ldr	r2, [pc, #44]	@ (8008454 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008426:	4013      	ands	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2288      	movs	r2, #136	@ 0x88
 800843c:	2120      	movs	r1, #32
 800843e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2284      	movs	r2, #132	@ 0x84
 8008444:	2100      	movs	r1, #0
 8008446:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	0018      	movs	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	b004      	add	sp, #16
 8008450:	bd80      	pop	{r7, pc}
 8008452:	46c0      	nop			@ (mov r8, r8)
 8008454:	dfffffff 	.word	0xdfffffff

08008458 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2284      	movs	r2, #132	@ 0x84
 8008466:	5c9b      	ldrb	r3, [r3, r2]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800846c:	2302      	movs	r3, #2
 800846e:	e02e      	b.n	80084ce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2284      	movs	r2, #132	@ 0x84
 8008474:	2101      	movs	r1, #1
 8008476:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2288      	movs	r2, #136	@ 0x88
 800847c:	2124      	movs	r1, #36	@ 0x24
 800847e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2101      	movs	r1, #1
 8008494:	438a      	bics	r2, r1
 8008496:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	08d9      	lsrs	r1, r3, #3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	0018      	movs	r0, r3
 80084b0:	f000 f8bc 	bl	800862c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2288      	movs	r2, #136	@ 0x88
 80084c0:	2120      	movs	r1, #32
 80084c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2284      	movs	r2, #132	@ 0x84
 80084c8:	2100      	movs	r1, #0
 80084ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b004      	add	sp, #16
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2284      	movs	r2, #132	@ 0x84
 80084e6:	5c9b      	ldrb	r3, [r3, r2]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e02f      	b.n	8008550 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2284      	movs	r2, #132	@ 0x84
 80084f4:	2101      	movs	r1, #1
 80084f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2288      	movs	r2, #136	@ 0x88
 80084fc:	2124      	movs	r1, #36	@ 0x24
 80084fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2101      	movs	r1, #1
 8008514:	438a      	bics	r2, r1
 8008516:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	4a0e      	ldr	r2, [pc, #56]	@ (8008558 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008520:	4013      	ands	r3, r2
 8008522:	0019      	movs	r1, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	0018      	movs	r0, r3
 8008532:	f000 f87b 	bl	800862c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2288      	movs	r2, #136	@ 0x88
 8008542:	2120      	movs	r1, #32
 8008544:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2284      	movs	r2, #132	@ 0x84
 800854a:	2100      	movs	r1, #0
 800854c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	0018      	movs	r0, r3
 8008552:	46bd      	mov	sp, r7
 8008554:	b004      	add	sp, #16
 8008556:	bd80      	pop	{r7, pc}
 8008558:	f1ffffff 	.word	0xf1ffffff

0800855c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800855c:	b5b0      	push	{r4, r5, r7, lr}
 800855e:	b08a      	sub	sp, #40	@ 0x28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	1dbb      	adds	r3, r7, #6
 8008568:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	228c      	movs	r2, #140	@ 0x8c
 800856e:	589b      	ldr	r3, [r3, r2]
 8008570:	2b20      	cmp	r3, #32
 8008572:	d156      	bne.n	8008622 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800857a:	1dbb      	adds	r3, r7, #6
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e04e      	b.n	8008624 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	2380      	movs	r3, #128	@ 0x80
 800858c:	015b      	lsls	r3, r3, #5
 800858e:	429a      	cmp	r2, r3
 8008590:	d109      	bne.n	80085a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2201      	movs	r2, #1
 800859e:	4013      	ands	r3, r2
 80085a0:	d001      	beq.n	80085a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e03e      	b.n	8008624 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80085b2:	2527      	movs	r5, #39	@ 0x27
 80085b4:	197c      	adds	r4, r7, r5
 80085b6:	1dbb      	adds	r3, r7, #6
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	68b9      	ldr	r1, [r7, #8]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	0018      	movs	r0, r3
 80085c0:	f7ff fb72 	bl	8007ca8 <UART_Start_Receive_DMA>
 80085c4:	0003      	movs	r3, r0
 80085c6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80085c8:	197b      	adds	r3, r7, r5
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d124      	bne.n	800861a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d11c      	bne.n	8008612 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2210      	movs	r2, #16
 80085de:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80085e0:	f3ef 8310 	mrs	r3, PRIMASK
 80085e4:	617b      	str	r3, [r7, #20]
  return(result);
 80085e6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e8:	623b      	str	r3, [r7, #32]
 80085ea:	2301      	movs	r3, #1
 80085ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f383 8810 	msr	PRIMASK, r3
}
 80085f4:	46c0      	nop			@ (mov r8, r8)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2110      	movs	r1, #16
 8008602:	430a      	orrs	r2, r1
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	f383 8810 	msr	PRIMASK, r3
}
 8008610:	e003      	b.n	800861a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008612:	2327      	movs	r3, #39	@ 0x27
 8008614:	18fb      	adds	r3, r7, r3
 8008616:	2201      	movs	r2, #1
 8008618:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800861a:	2327      	movs	r3, #39	@ 0x27
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	e000      	b.n	8008624 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8008622:	2302      	movs	r3, #2
  }
}
 8008624:	0018      	movs	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	b00a      	add	sp, #40	@ 0x28
 800862a:	bdb0      	pop	{r4, r5, r7, pc}

0800862c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800862c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008638:	2b00      	cmp	r3, #0
 800863a:	d108      	bne.n	800864e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	226a      	movs	r2, #106	@ 0x6a
 8008640:	2101      	movs	r1, #1
 8008642:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2268      	movs	r2, #104	@ 0x68
 8008648:	2101      	movs	r1, #1
 800864a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800864c:	e043      	b.n	80086d6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800864e:	260f      	movs	r6, #15
 8008650:	19bb      	adds	r3, r7, r6
 8008652:	2208      	movs	r2, #8
 8008654:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008656:	200e      	movs	r0, #14
 8008658:	183b      	adds	r3, r7, r0
 800865a:	2208      	movs	r2, #8
 800865c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	0e5b      	lsrs	r3, r3, #25
 8008666:	b2da      	uxtb	r2, r3
 8008668:	240d      	movs	r4, #13
 800866a:	193b      	adds	r3, r7, r4
 800866c:	2107      	movs	r1, #7
 800866e:	400a      	ands	r2, r1
 8008670:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	0f5b      	lsrs	r3, r3, #29
 800867a:	b2da      	uxtb	r2, r3
 800867c:	250c      	movs	r5, #12
 800867e:	197b      	adds	r3, r7, r5
 8008680:	2107      	movs	r1, #7
 8008682:	400a      	ands	r2, r1
 8008684:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008686:	183b      	adds	r3, r7, r0
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	197a      	adds	r2, r7, r5
 800868c:	7812      	ldrb	r2, [r2, #0]
 800868e:	4914      	ldr	r1, [pc, #80]	@ (80086e0 <UARTEx_SetNbDataToProcess+0xb4>)
 8008690:	5c8a      	ldrb	r2, [r1, r2]
 8008692:	435a      	muls	r2, r3
 8008694:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008696:	197b      	adds	r3, r7, r5
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	4a12      	ldr	r2, [pc, #72]	@ (80086e4 <UARTEx_SetNbDataToProcess+0xb8>)
 800869c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800869e:	0019      	movs	r1, r3
 80086a0:	f7f7 fdbc 	bl	800021c <__divsi3>
 80086a4:	0003      	movs	r3, r0
 80086a6:	b299      	uxth	r1, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	226a      	movs	r2, #106	@ 0x6a
 80086ac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ae:	19bb      	adds	r3, r7, r6
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	193a      	adds	r2, r7, r4
 80086b4:	7812      	ldrb	r2, [r2, #0]
 80086b6:	490a      	ldr	r1, [pc, #40]	@ (80086e0 <UARTEx_SetNbDataToProcess+0xb4>)
 80086b8:	5c8a      	ldrb	r2, [r1, r2]
 80086ba:	435a      	muls	r2, r3
 80086bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80086be:	193b      	adds	r3, r7, r4
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	4a08      	ldr	r2, [pc, #32]	@ (80086e4 <UARTEx_SetNbDataToProcess+0xb8>)
 80086c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086c6:	0019      	movs	r1, r3
 80086c8:	f7f7 fda8 	bl	800021c <__divsi3>
 80086cc:	0003      	movs	r3, r0
 80086ce:	b299      	uxth	r1, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2268      	movs	r2, #104	@ 0x68
 80086d4:	5299      	strh	r1, [r3, r2]
}
 80086d6:	46c0      	nop			@ (mov r8, r8)
 80086d8:	46bd      	mov	sp, r7
 80086da:	b005      	add	sp, #20
 80086dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086de:	46c0      	nop			@ (mov r8, r8)
 80086e0:	08008a60 	.word	0x08008a60
 80086e4:	08008a68 	.word	0x08008a68

080086e8 <memset>:
 80086e8:	0003      	movs	r3, r0
 80086ea:	1882      	adds	r2, r0, r2
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d100      	bne.n	80086f2 <memset+0xa>
 80086f0:	4770      	bx	lr
 80086f2:	7019      	strb	r1, [r3, #0]
 80086f4:	3301      	adds	r3, #1
 80086f6:	e7f9      	b.n	80086ec <memset+0x4>

080086f8 <__libc_init_array>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	2600      	movs	r6, #0
 80086fc:	4c0c      	ldr	r4, [pc, #48]	@ (8008730 <__libc_init_array+0x38>)
 80086fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008734 <__libc_init_array+0x3c>)
 8008700:	1b64      	subs	r4, r4, r5
 8008702:	10a4      	asrs	r4, r4, #2
 8008704:	42a6      	cmp	r6, r4
 8008706:	d109      	bne.n	800871c <__libc_init_array+0x24>
 8008708:	2600      	movs	r6, #0
 800870a:	f000 f823 	bl	8008754 <_init>
 800870e:	4c0a      	ldr	r4, [pc, #40]	@ (8008738 <__libc_init_array+0x40>)
 8008710:	4d0a      	ldr	r5, [pc, #40]	@ (800873c <__libc_init_array+0x44>)
 8008712:	1b64      	subs	r4, r4, r5
 8008714:	10a4      	asrs	r4, r4, #2
 8008716:	42a6      	cmp	r6, r4
 8008718:	d105      	bne.n	8008726 <__libc_init_array+0x2e>
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	00b3      	lsls	r3, r6, #2
 800871e:	58eb      	ldr	r3, [r5, r3]
 8008720:	4798      	blx	r3
 8008722:	3601      	adds	r6, #1
 8008724:	e7ee      	b.n	8008704 <__libc_init_array+0xc>
 8008726:	00b3      	lsls	r3, r6, #2
 8008728:	58eb      	ldr	r3, [r5, r3]
 800872a:	4798      	blx	r3
 800872c:	3601      	adds	r6, #1
 800872e:	e7f2      	b.n	8008716 <__libc_init_array+0x1e>
 8008730:	08008a70 	.word	0x08008a70
 8008734:	08008a70 	.word	0x08008a70
 8008738:	08008a74 	.word	0x08008a74
 800873c:	08008a70 	.word	0x08008a70

08008740 <memcpy>:
 8008740:	2300      	movs	r3, #0
 8008742:	b510      	push	{r4, lr}
 8008744:	429a      	cmp	r2, r3
 8008746:	d100      	bne.n	800874a <memcpy+0xa>
 8008748:	bd10      	pop	{r4, pc}
 800874a:	5ccc      	ldrb	r4, [r1, r3]
 800874c:	54c4      	strb	r4, [r0, r3]
 800874e:	3301      	adds	r3, #1
 8008750:	e7f8      	b.n	8008744 <memcpy+0x4>
	...

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	46c0      	nop			@ (mov r8, r8)
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
