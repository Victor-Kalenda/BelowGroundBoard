
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000798c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08007a4c  08007a4c  00008a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d50  08007d50  00009070  2**0
                  CONTENTS
  4 .ARM          00000000  08007d50  08007d50  00009070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d50  08007d50  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d50  08007d50  00008d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d54  08007d54  00008d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007d58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000070  08007dc8  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08007dc8  000096f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198c6  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003277  00000000  00000000  0002295e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00025bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121a  00000000  00000000  000272c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018923  00000000  00000000  000284da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b797  00000000  00000000  00040dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c8af  00000000  00000000  0005c594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8e43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000553c  00000000  00000000  000f8e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000fe3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a34 	.word	0x08007a34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08007a34 	.word	0x08007a34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_ErrorCallback>:
{
	i2c_rx_int = 1;
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	// Do something
}
 80003fc:	46c0      	nop			@ (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}

08000404 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	4a05      	ldr	r2, [pc, #20]	@ (8000428 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000414:	401a      	ands	r2, r3
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	431a      	orrs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	60da      	str	r2, [r3, #12]
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffdfffff 	.word	0xffdfffff

0800042c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	2204      	movs	r2, #4
 800043c:	4393      	bics	r3, r2
 800043e:	001a      	movs	r2, r3
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	60da      	str	r2, [r3, #12]
}
 8000448:	46c0      	nop			@ (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_ADC_REG_SetSequencerChannels>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	025b      	lsls	r3, r3, #9
 800045e:	0a5a      	lsrs	r2, r3, #9
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000464:	46c0      	nop			@ (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	019b      	lsls	r3, r3, #6
 800047c:	401a      	ands	r2, r3
 800047e:	2380      	movs	r3, #128	@ 0x80
 8000480:	019b      	lsls	r3, r3, #6
 8000482:	429a      	cmp	r2, r3
 8000484:	d101      	bne.n	800048a <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <LL_ADC_IsActiveFlag_CCRDY+0x20>
 800048a:	2300      	movs	r3, #0
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}

08000494 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[3]), 8);
 800049c:	4904      	ldr	r1, [pc, #16]	@ (80004b0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <HAL_ADC_ConvCpltCallback+0x20>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 f8c6 	bl	8002634 <HAL_ADC_Start_DMA>

//	for(uint8_t i = 0; i < 9; i++)
//	{
//		holding_register_database[i + 3] = (uint16_t)raw_data[i];
//	}
}
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000006 	.word	0x20000006
 80004b4:	2000008c 	.word	0x2000008c

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f001 fd2a 	bl	8001f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f8cd 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fbd7 	bl	8000c78 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ca:	f000 fbaf 	bl	8000c2c <MX_DMA_Init>
  MX_ADC1_Init();
 80004ce:	f000 f905 	bl	80006dc <MX_ADC1_Init>
  MX_I2C1_Init();
 80004d2:	f000 fa0f 	bl	80008f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d6:	f000 fa4b 	bl	8000970 <MX_SPI1_Init>
  MX_TIM1_Init();
 80004da:	f000 fa87 	bl	80009ec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004de:	f000 fb55 	bl	8000b8c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80004e2:	f000 fb2d 	bl	8000b40 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80004e6:	4b53      	ldr	r3, [pc, #332]	@ (8000634 <main+0x17c>)
 80004e8:	2240      	movs	r2, #64	@ 0x40
 80004ea:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80004ec:	4b51      	ldr	r3, [pc, #324]	@ (8000634 <main+0x17c>)
 80004ee:	2280      	movs	r2, #128	@ 0x80
 80004f0:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80004f2:	4b50      	ldr	r3, [pc, #320]	@ (8000634 <main+0x17c>)
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	0052      	lsls	r2, r2, #1
 80004f8:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 80004fa:	4b4f      	ldr	r3, [pc, #316]	@ (8000638 <main+0x180>)
 80004fc:	4a4f      	ldr	r2, [pc, #316]	@ (800063c <main+0x184>)
 80004fe:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 8000500:	4b4d      	ldr	r3, [pc, #308]	@ (8000638 <main+0x180>)
 8000502:	4a4e      	ldr	r2, [pc, #312]	@ (800063c <main+0x184>)
 8000504:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 8000506:	4b4c      	ldr	r3, [pc, #304]	@ (8000638 <main+0x180>)
 8000508:	22a0      	movs	r2, #160	@ 0xa0
 800050a:	05d2      	lsls	r2, r2, #23
 800050c:	609a      	str	r2, [r3, #8]


  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 800050e:	4b4c      	ldr	r3, [pc, #304]	@ (8000640 <main+0x188>)
 8000510:	22fe      	movs	r2, #254	@ 0xfe
 8000512:	0592      	lsls	r2, r2, #22
 8000514:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8000516:	4b4a      	ldr	r3, [pc, #296]	@ (8000640 <main+0x188>)
 8000518:	4a4a      	ldr	r2, [pc, #296]	@ (8000644 <main+0x18c>)
 800051a:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 800051c:	4b48      	ldr	r3, [pc, #288]	@ (8000640 <main+0x188>)
 800051e:	4a4a      	ldr	r2, [pc, #296]	@ (8000648 <main+0x190>)
 8000520:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 8000522:	4b47      	ldr	r3, [pc, #284]	@ (8000640 <main+0x188>)
 8000524:	4a47      	ldr	r2, [pc, #284]	@ (8000644 <main+0x18c>)
 8000526:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8000528:	4b45      	ldr	r3, [pc, #276]	@ (8000640 <main+0x188>)
 800052a:	22fe      	movs	r2, #254	@ 0xfe
 800052c:	0592      	lsls	r2, r2, #22
 800052e:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 8000530:	4b43      	ldr	r3, [pc, #268]	@ (8000640 <main+0x188>)
 8000532:	4a46      	ldr	r2, [pc, #280]	@ (800064c <main+0x194>)
 8000534:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8000536:	4b42      	ldr	r3, [pc, #264]	@ (8000640 <main+0x188>)
 8000538:	4a44      	ldr	r2, [pc, #272]	@ (800064c <main+0x194>)
 800053a:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 800053c:	4b40      	ldr	r3, [pc, #256]	@ (8000640 <main+0x188>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 8000542:	4b3f      	ldr	r3, [pc, #252]	@ (8000640 <main+0x188>)
 8000544:	4a42      	ldr	r2, [pc, #264]	@ (8000650 <main+0x198>)
 8000546:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8000548:	4b3d      	ldr	r3, [pc, #244]	@ (8000640 <main+0x188>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 800054e:	4b3c      	ldr	r3, [pc, #240]	@ (8000640 <main+0x188>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 8000554:	4b3a      	ldr	r3, [pc, #232]	@ (8000640 <main+0x188>)
 8000556:	2200      	movs	r2, #0
 8000558:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 800055a:	4b39      	ldr	r3, [pc, #228]	@ (8000640 <main+0x188>)
 800055c:	2200      	movs	r2, #0
 800055e:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 8000560:	4b37      	ldr	r3, [pc, #220]	@ (8000640 <main+0x188>)
 8000562:	2200      	movs	r2, #0
 8000564:	635a      	str	r2, [r3, #52]	@ 0x34
//  if(modbus_set_rx() != HAL_OK)
//  {
//	  Error_Handler();
//  }

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[3]), 8) != HAL_OK)
 8000566:	493b      	ldr	r1, [pc, #236]	@ (8000654 <main+0x19c>)
 8000568:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <main+0x1a0>)
 800056a:	2208      	movs	r2, #8
 800056c:	0018      	movs	r0, r3
 800056e:	f002 f861 	bl	8002634 <HAL_ADC_Start_DMA>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <main+0xc2>
  {
	  Error_Handler();
 8000576:	f000 fc45 	bl	8000e04 <Error_Handler>
   * target_actuator
   * 0: Actuator A
   * 1: Actuator B
   * 2: Actuator C
   */
  uint8_t target_actuator = 0;
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
  //bno055_queue_transaction();

  while (1)
  {

	  if(modbus_rx())
 8000580:	f001 f83c 	bl	80015fc <modbus_rx>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d0fb      	beq.n	8000580 <main+0xc8>
	  {
		  int8_t status = 0;
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fd1c 	bl	8000fcc <get_rx_buffer>
 8000594:	0003      	movs	r3, r0
 8000596:	001a      	movs	r2, r3
 8000598:	4b30      	ldr	r3, [pc, #192]	@ (800065c <main+0x1a4>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	429a      	cmp	r2, r3
 800059e:	d11b      	bne.n	80005d8 <main+0x120>
		  {
			  switch(get_rx_buffer(1))
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fd13 	bl	8000fcc <get_rx_buffer>
 80005a6:	0003      	movs	r3, r0
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d002      	beq.n	80005b2 <main+0xfa>
 80005ac:	2b10      	cmp	r3, #16
 80005ae:	d006      	beq.n	80005be <main+0x106>
 80005b0:	e00b      	b.n	80005ca <main+0x112>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80005b2:	1dbc      	adds	r4, r7, #6
 80005b4:	f000 fd3c 	bl	8001030 <return_holding_registers>
 80005b8:	0003      	movs	r3, r0
 80005ba:	7023      	strb	r3, [r4, #0]
					  break;
 80005bc:	e034      	b.n	8000628 <main+0x170>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80005be:	1dbc      	adds	r4, r7, #6
 80005c0:	f000 fe58 	bl	8001274 <edit_multiple_registers>
 80005c4:	0003      	movs	r3, r0
 80005c6:	7023      	strb	r3, [r4, #0]
					  break;
 80005c8:	e02e      	b.n	8000628 <main+0x170>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80005ca:	1dbc      	adds	r4, r7, #6
 80005cc:	2004      	movs	r0, #4
 80005ce:	f000 ff47 	bl	8001460 <modbus_exception>
 80005d2:	0003      	movs	r3, r0
 80005d4:	7023      	strb	r3, [r4, #0]
					  break;
 80005d6:	e027      	b.n	8000628 <main+0x170>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fcf7 	bl	8000fcc <get_rx_buffer>
 80005de:	0003      	movs	r3, r0
 80005e0:	2bff      	cmp	r3, #255	@ 0xff
 80005e2:	d121      	bne.n	8000628 <main+0x170>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fcf1 	bl	8000fcc <get_rx_buffer>
 80005ea:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d11b      	bne.n	8000628 <main+0x170>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80005f0:	2002      	movs	r0, #2
 80005f2:	f000 fceb 	bl	8000fcc <get_rx_buffer>
 80005f6:	0003      	movs	r3, r0
 80005f8:	021c      	lsls	r4, r3, #8
 80005fa:	2003      	movs	r0, #3
 80005fc:	f000 fce6 	bl	8000fcc <get_rx_buffer>
 8000600:	0003      	movs	r3, r0
 8000602:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000604:	d110      	bne.n	8000628 <main+0x170>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8000606:	2004      	movs	r0, #4
 8000608:	f000 fce0 	bl	8000fcc <get_rx_buffer>
 800060c:	0003      	movs	r3, r0
 800060e:	021c      	lsls	r4, r3, #8
 8000610:	2005      	movs	r0, #5
 8000612:	f000 fcdb 	bl	8000fcc <get_rx_buffer>
 8000616:	0003      	movs	r3, r0
 8000618:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d104      	bne.n	8000628 <main+0x170>
		  {

			  status = return_holding_registers();
 800061e:	1dbc      	adds	r4, r7, #6
 8000620:	f000 fd06 	bl	8001030 <return_holding_registers>
 8000624:	0003      	movs	r3, r0
 8000626:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 8000628:	1dbc      	adds	r4, r7, #6
 800062a:	f000 fffd 	bl	8001628 <modbus_set_rx>
 800062e:	0003      	movs	r3, r0
 8000630:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 8000632:	e7a5      	b.n	8000580 <main+0xc8>
 8000634:	200003c4 	.word	0x200003c4
 8000638:	200003cc 	.word	0x200003cc
 800063c:	50000800 	.word	0x50000800
 8000640:	2000038c 	.word	0x2000038c
 8000644:	3dcccccd 	.word	0x3dcccccd
 8000648:	40a00000 	.word	0x40a00000
 800064c:	42c80000 	.word	0x42c80000
 8000650:	42200000 	.word	0x42200000
 8000654:	20000006 	.word	0x20000006
 8000658:	2000008c 	.word	0x2000008c
 800065c:	20000000 	.word	0x20000000

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b08f      	sub	sp, #60	@ 0x3c
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	2418      	movs	r4, #24
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2320      	movs	r3, #32
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f007 f9a9 	bl	80079c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	0018      	movs	r0, r3
 800067a:	2314      	movs	r3, #20
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f007 f9a2 	bl	80079c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	0252      	lsls	r2, r2, #9
 8000690:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	f004 f891 	bl	80047bc <HAL_RCC_OscConfig>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800069e:	f000 fbb1 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2201      	movs	r2, #1
 80006ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	22e0      	movs	r2, #224	@ 0xe0
 80006be:	01d2      	lsls	r2, r2, #7
 80006c0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f004 fa9e 	bl	8004c08 <HAL_RCC_ClockConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006d0:	f000 fb98 	bl	8000e04 <Error_Handler>
  }
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b00f      	add	sp, #60	@ 0x3c
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	003b      	movs	r3, r7
 80006e4:	0018      	movs	r0, r3
 80006e6:	230c      	movs	r3, #12
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f007 f96c 	bl	80079c8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f0:	4b74      	ldr	r3, [pc, #464]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 80006f2:	4a75      	ldr	r2, [pc, #468]	@ (80008c8 <MX_ADC1_Init+0x1ec>)
 80006f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80006f6:	4b73      	ldr	r3, [pc, #460]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 80006f8:	22c0      	movs	r2, #192	@ 0xc0
 80006fa:	0612      	lsls	r2, r2, #24
 80006fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b71      	ldr	r3, [pc, #452]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b6f      	ldr	r3, [pc, #444]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800070a:	4b6e      	ldr	r3, [pc, #440]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	0612      	lsls	r2, r2, #24
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000712:	4b6c      	ldr	r3, [pc, #432]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000714:	2208      	movs	r2, #8
 8000716:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000718:	4b6a      	ldr	r3, [pc, #424]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800071e:	4b69      	ldr	r3, [pc, #420]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000720:	2200      	movs	r2, #0
 8000722:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000724:	4b67      	ldr	r3, [pc, #412]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000726:	2200      	movs	r2, #0
 8000728:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800072a:	4b66      	ldr	r3, [pc, #408]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b64      	ldr	r3, [pc, #400]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	4b62      	ldr	r3, [pc, #392]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b61      	ldr	r3, [pc, #388]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000744:	4b5f      	ldr	r3, [pc, #380]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000746:	222c      	movs	r2, #44	@ 0x2c
 8000748:	2101      	movs	r1, #1
 800074a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074c:	4b5d      	ldr	r3, [pc, #372]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 800074e:	2200      	movs	r2, #0
 8000750:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000752:	4b5c      	ldr	r3, [pc, #368]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000758:	4b5a      	ldr	r3, [pc, #360]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	2100      	movs	r1, #0
 800075e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000760:	4b58      	ldr	r3, [pc, #352]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000762:	2200      	movs	r2, #0
 8000764:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000766:	4b57      	ldr	r3, [pc, #348]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fdbd 	bl	80022e8 <HAL_ADC_Init>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000772:	f000 fb47 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000776:	003b      	movs	r3, r7
 8000778:	4a54      	ldr	r2, [pc, #336]	@ (80008cc <MX_ADC1_Init+0x1f0>)
 800077a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800077c:	003b      	movs	r3, r7
 800077e:	2201      	movs	r2, #1
 8000780:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	003a      	movs	r2, r7
 8000784:	4b4f      	ldr	r3, [pc, #316]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fff1 	bl	8002770 <HAL_ADC_ConfigChannel>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000792:	f000 fb37 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000796:	003b      	movs	r3, r7
 8000798:	4a4d      	ldr	r2, [pc, #308]	@ (80008d0 <MX_ADC1_Init+0x1f4>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	003a      	movs	r2, r7
 800079e:	4b49      	ldr	r3, [pc, #292]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 ffe4 	bl	8002770 <HAL_ADC_ConfigChannel>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80007ac:	f000 fb2a 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007b0:	003b      	movs	r3, r7
 80007b2:	4a48      	ldr	r2, [pc, #288]	@ (80008d4 <MX_ADC1_Init+0x1f8>)
 80007b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	003a      	movs	r2, r7
 80007b8:	4b42      	ldr	r3, [pc, #264]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 ffd7 	bl	8002770 <HAL_ADC_ConfigChannel>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80007c6:	f000 fb1d 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007ca:	003b      	movs	r3, r7
 80007cc:	4a42      	ldr	r2, [pc, #264]	@ (80008d8 <MX_ADC1_Init+0x1fc>)
 80007ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	003a      	movs	r2, r7
 80007d2:	4b3c      	ldr	r3, [pc, #240]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 ffca 	bl	8002770 <HAL_ADC_ConfigChannel>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80007e0:	f000 fb10 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007e4:	003b      	movs	r3, r7
 80007e6:	4a3d      	ldr	r2, [pc, #244]	@ (80008dc <MX_ADC1_Init+0x200>)
 80007e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	003a      	movs	r2, r7
 80007ec:	4b35      	ldr	r3, [pc, #212]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 ffbd 	bl	8002770 <HAL_ADC_ConfigChannel>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80007fa:	f000 fb03 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80007fe:	003b      	movs	r3, r7
 8000800:	4a37      	ldr	r2, [pc, #220]	@ (80008e0 <MX_ADC1_Init+0x204>)
 8000802:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	003a      	movs	r2, r7
 8000806:	4b2f      	ldr	r3, [pc, #188]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f001 ffb0 	bl	8002770 <HAL_ADC_ConfigChannel>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000814:	f000 faf6 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_20;
 8000818:	003b      	movs	r3, r7
 800081a:	4a32      	ldr	r2, [pc, #200]	@ (80008e4 <MX_ADC1_Init+0x208>)
 800081c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	003a      	movs	r2, r7
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 ffa3 	bl	8002770 <HAL_ADC_ConfigChannel>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 800082e:	f000 fae9 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_21;
 8000832:	003b      	movs	r3, r7
 8000834:	4a2c      	ldr	r2, [pc, #176]	@ (80008e8 <MX_ADC1_Init+0x20c>)
 8000836:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	003a      	movs	r2, r7
 800083a:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f001 ff96 	bl	8002770 <HAL_ADC_ConfigChannel>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000848:	f000 fadc 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_22;
 800084c:	003b      	movs	r3, r7
 800084e:	4a27      	ldr	r2, [pc, #156]	@ (80008ec <MX_ADC1_Init+0x210>)
 8000850:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	003a      	movs	r2, r7
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_ADC1_Init+0x1e8>)
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f001 ff89 	bl	8002770 <HAL_ADC_ConfigChannel>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000862:	f000 facf 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_ADC1_Init+0x1ec>)
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff fdca 	bl	8000404 <LL_ADC_REG_SetSequencerConfigurable>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_ADC1_Init+0x1ec>)
 8000872:	2100      	movs	r1, #0
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fdd9 	bl	800042c <LL_ADC_REG_SetSequencerScanDirection>

  LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_5 | LL_ADC_CHANNEL_6 | LL_ADC_CHANNEL_7 |
 800087a:	4a1d      	ldr	r2, [pc, #116]	@ (80008f0 <MX_ADC1_Init+0x214>)
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_ADC1_Init+0x1ec>)
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff fde5 	bl	8000450 <LL_ADC_REG_SetSequencerChannels>
		  LL_ADC_CHANNEL_17 | LL_ADC_CHANNEL_18 | LL_ADC_CHANNEL_20 | LL_ADC_CHANNEL_21 | LL_ADC_CHANNEL_22);
  uint32_t setup_adc_time = HAL_GetTick();
 8000886:	f001 fbb9 	bl	8001ffc <HAL_GetTick>
 800088a:	0003      	movs	r3, r0
 800088c:	60fb      	str	r3, [r7, #12]

  while(LL_ADC_IsActiveFlag_CCRDY(ADC1) && HAL_GetTick() - setup_adc_time <= 100);
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_ADC1_Init+0x1ec>)
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fdea 	bl	800046c <LL_ADC_IsActiveFlag_CCRDY>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d006      	beq.n	80008aa <MX_ADC1_Init+0x1ce>
 800089c:	f001 fbae 	bl	8001ffc <HAL_GetTick>
 80008a0:	0002      	movs	r2, r0
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	2b64      	cmp	r3, #100	@ 0x64
 80008a8:	d9f2      	bls.n	8000890 <MX_ADC1_Init+0x1b4>
  if(!LL_ADC_IsActiveFlag_CCRDY(ADC1))
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_ADC1_Init+0x1ec>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fddd 	bl	800046c <LL_ADC_IsActiveFlag_CCRDY>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d101      	bne.n	80008ba <MX_ADC1_Init+0x1de>
  {
	  Error_Handler();
 80008b6:	f000 faa5 	bl	8000e04 <Error_Handler>
  }
//  LL_ADC_SetCommonPathInternalCh(ADC1_COMMON, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
  /* USER CODE END ADC1_Init 2 */

}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b004      	add	sp, #16
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	40012400 	.word	0x40012400
 80008cc:	14000020 	.word	0x14000020
 80008d0:	18000040 	.word	0x18000040
 80008d4:	1c000080 	.word	0x1c000080
 80008d8:	a4000200 	.word	0xa4000200
 80008dc:	44020000 	.word	0x44020000
 80008e0:	48040000 	.word	0x48040000
 80008e4:	50100000 	.word	0x50100000
 80008e8:	54200000 	.word	0x54200000
 80008ec:	58400000 	.word	0x58400000
 80008f0:	5c7600e0 	.word	0x5c7600e0

080008f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_I2C1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <MX_I2C1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_I2C1_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000930:	0018      	movs	r0, r3
 8000932:	f002 ffa9 	bl	8003888 <HAL_I2C_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fa63 	bl	8000e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000940:	2100      	movs	r1, #0
 8000942:	0018      	movs	r0, r3
 8000944:	f003 fea2 	bl	800468c <HAL_I2CEx_ConfigAnalogFilter>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 fa5a 	bl	8000e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <MX_I2C1_Init+0x74>)
 8000952:	2100      	movs	r1, #0
 8000954:	0018      	movs	r0, r3
 8000956:	f003 fee5 	bl	8004724 <HAL_I2CEx_ConfigDigitalFilter>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fa51 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000014c 	.word	0x2000014c
 800096c:	40005400 	.word	0x40005400

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_SPI1_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	@ (80009e8 <MX_SPI1_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_SPI1_Init+0x74>)
 800097c:	2282      	movs	r2, #130	@ 0x82
 800097e:	0052      	lsls	r2, r2, #1
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_SPI1_Init+0x74>)
 800098a:	22e0      	movs	r2, #224	@ 0xe0
 800098c:	00d2      	lsls	r2, r2, #3
 800098e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <MX_SPI1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000996:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <MX_SPI1_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_SPI1_Init+0x74>)
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009be:	2207      	movs	r2, #7
 80009c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <MX_SPI1_Init+0x74>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f004 fbbb 	bl	800514c <HAL_SPI_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fa13 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200001a0 	.word	0x200001a0
 80009e8:	40013000 	.word	0x40013000

080009ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b098      	sub	sp, #96	@ 0x60
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f2:	2354      	movs	r3, #84	@ 0x54
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	0018      	movs	r0, r3
 80009f8:	230c      	movs	r3, #12
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f006 ffe3 	bl	80079c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	2338      	movs	r3, #56	@ 0x38
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	231c      	movs	r3, #28
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f006 ffdb 	bl	80079c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	0018      	movs	r0, r3
 8000a16:	2334      	movs	r3, #52	@ 0x34
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f006 ffd4 	bl	80079c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a20:	4b45      	ldr	r3, [pc, #276]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a22:	4a46      	ldr	r2, [pc, #280]	@ (8000b3c <MX_TIM1_Init+0x150>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000a26:	4b44      	ldr	r3, [pc, #272]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a28:	2209      	movs	r2, #9
 8000a2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b42      	ldr	r3, [pc, #264]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000a32:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a34:	2263      	movs	r2, #99	@ 0x63
 8000a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b3f      	ldr	r3, [pc, #252]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a44:	4b3c      	ldr	r3, [pc, #240]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f004 fc8d 	bl	800536c <HAL_TIM_PWM_Init>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 f9d5 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2154      	movs	r1, #84	@ 0x54
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a6e:	187a      	adds	r2, r7, r1
 8000a70:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f005 f8f1 	bl	8005c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a7e:	f000 f9c1 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2138      	movs	r1, #56	@ 0x38
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2260      	movs	r2, #96	@ 0x60
 8000a88:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aae:	1879      	adds	r1, r7, r1
 8000ab0:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f004 fcb1 	bl	800541c <HAL_TIM_PWM_ConfigChannel>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000abe:	f000 f9a1 	bl	8000e04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	0192      	lsls	r2, r2, #6
 8000ae6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2280      	movs	r2, #128	@ 0x80
 8000afe:	0492      	lsls	r2, r2, #18
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b14:	1d3a      	adds	r2, r7, #4
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f005 f906 	bl	8005d2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000b24:	f000 f96e 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <MX_TIM1_Init+0x14c>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 f848 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b018      	add	sp, #96	@ 0x60
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000204 	.word	0x20000204
 8000b3c:	40012c00 	.word	0x40012c00

08000b40 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_TIM14_Init+0x40>)
 8000b46:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <MX_TIM14_Init+0x44>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <MX_TIM14_Init+0x40>)
 8000b4c:	220b      	movs	r2, #11
 8000b4e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_TIM14_Init+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <MX_TIM14_Init+0x40>)
 8000b58:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <MX_TIM14_Init+0x48>)
 8000b5a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_TIM14_Init+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <MX_TIM14_Init+0x40>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <MX_TIM14_Init+0x40>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f004 fba6 	bl	80052bc <HAL_TIM_Base_Init>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b74:	f000 f946 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	20000250 	.word	0x20000250
 8000b84:	40002000 	.word	0x40002000
 8000b88:	0000ffff 	.word	0x0000ffff

08000b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000b92:	4a25      	ldr	r2, [pc, #148]	@ (8000c28 <MX_USART1_UART_Init+0x9c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000b98:	2296      	movs	r2, #150	@ 0x96
 8000b9a:	0192      	lsls	r2, r2, #6
 8000b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000bd4:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f006 fce8 	bl	80075b0 <HAL_RS485Ex_Init>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000be4:	f000 f90e 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f006 fda3 	bl	8007738 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 f905 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f006 fdda 	bl	80077b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000c08:	f000 f8fc 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <MX_USART1_UART_Init+0x98>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f006 fd58 	bl	80076c4 <HAL_UARTEx_DisableFifoMode>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000c18:	f000 f8f4 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	2000029c 	.word	0x2000029c
 8000c28:	40013800 	.word	0x40013800

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_DMA_Init+0x48>)
 8000c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_DMA_Init+0x48>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_DMA_Init+0x48>)
 8000c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c42:	2201      	movs	r2, #1
 8000c44:	4013      	ands	r3, r2
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2009      	movs	r0, #9
 8000c50:	f002 f91c 	bl	8002e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c54:	2009      	movs	r0, #9
 8000c56:	f002 f92e 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f002 f914 	bl	8002e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c64:	200a      	movs	r0, #10
 8000c66:	f002 f926 	bl	8002eb6 <HAL_NVIC_EnableIRQ>

}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	40021000 	.word	0x40021000

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b08b      	sub	sp, #44	@ 0x2c
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	2414      	movs	r4, #20
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	0018      	movs	r0, r3
 8000c84:	2314      	movs	r3, #20
 8000c86:	001a      	movs	r2, r3
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f006 fe9d 	bl	80079c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b58      	ldr	r3, [pc, #352]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c92:	4b57      	ldr	r3, [pc, #348]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000c94:	2104      	movs	r1, #4
 8000c96:	430a      	orrs	r2, r1
 8000c98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c9a:	4b55      	ldr	r3, [pc, #340]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b52      	ldr	r3, [pc, #328]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000caa:	4b51      	ldr	r3, [pc, #324]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cac:	2120      	movs	r1, #32
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cca:	4b49      	ldr	r3, [pc, #292]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b46      	ldr	r3, [pc, #280]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cda:	4b45      	ldr	r3, [pc, #276]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cdc:	2102      	movs	r1, #2
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ce2:	4b43      	ldr	r3, [pc, #268]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <MX_GPIO_Init+0x178>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cfe:	2208      	movs	r2, #8
 8000d00:	4013      	ands	r3, r2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 8000d06:	2380      	movs	r3, #128	@ 0x80
 8000d08:	0059      	lsls	r1, r3, #1
 8000d0a:	23a0      	movs	r3, #160	@ 0xa0
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	2200      	movs	r2, #0
 8000d10:	0018      	movs	r0, r3
 8000d12:	f002 fd9b 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 8000d16:	4b37      	ldr	r3, [pc, #220]	@ (8000df4 <MX_GPIO_Init+0x17c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	21c0      	movs	r1, #192	@ 0xc0
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f002 fd95 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8000d22:	4b35      	ldr	r3, [pc, #212]	@ (8000df8 <MX_GPIO_Init+0x180>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	2101      	movs	r1, #1
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fd8f 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2280      	movs	r2, #128	@ 0x80
 8000d32:	0192      	lsls	r2, r2, #6
 8000d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	4a30      	ldr	r2, [pc, #192]	@ (8000dfc <MX_GPIO_Init+0x184>)
 8000d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	4a2e      	ldr	r2, [pc, #184]	@ (8000e00 <MX_GPIO_Init+0x188>)
 8000d46:	0019      	movs	r1, r3
 8000d48:	0010      	movs	r0, r2
 8000d4a:	f002 fc0d 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 8000d4e:	0021      	movs	r1, r4
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2280      	movs	r2, #128	@ 0x80
 8000d54:	01d2      	lsls	r2, r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	000c      	movs	r4, r1
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	4a25      	ldr	r2, [pc, #148]	@ (8000e00 <MX_GPIO_Init+0x188>)
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	0010      	movs	r0, r2
 8000d6e:	f002 fbfb 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 8000d72:	0021      	movs	r1, r4
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2280      	movs	r2, #128	@ 0x80
 8000d78:	0052      	lsls	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	000c      	movs	r4, r1
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	2201      	movs	r2, #1
 8000d82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 8000d90:	193a      	adds	r2, r7, r4
 8000d92:	23a0      	movs	r3, #160	@ 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 fbe5 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	22c0      	movs	r2, #192	@ 0xc0
 8000da2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2201      	movs	r2, #1
 8000da8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <MX_GPIO_Init+0x17c>)
 8000dba:	0019      	movs	r1, r3
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	f002 fbd3 	bl	8003568 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 8000dc2:	0021      	movs	r1, r4
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2201      	movs	r2, #1
 8000dce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <MX_GPIO_Init+0x180>)
 8000de0:	0019      	movs	r1, r3
 8000de2:	0010      	movs	r0, r2
 8000de4:	f002 fbc0 	bl	8003568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b00b      	add	sp, #44	@ 0x2c
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	50000800 	.word	0x50000800
 8000df8:	50000c00 	.word	0x50000c00
 8000dfc:	10110000 	.word	0x10110000
 8000e00:	50000400 	.word	0x50000400

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	000a      	movs	r2, r1
 8000e1a:	1cbb      	adds	r3, r7, #2
 8000e1c:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a45      	ldr	r2, [pc, #276]	@ (8000f38 <HAL_UARTEx_RxEventCallback+0x128>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d000      	beq.n	8000e2a <HAL_UARTEx_RxEventCallback+0x1a>
 8000e28:	e081      	b.n	8000f2e <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8000e2a:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <HAL_UARTEx_RxEventCallback+0x12c>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e32:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8000e34:	4b42      	ldr	r3, [pc, #264]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	1cbb      	adds	r3, r7, #2
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	18d2      	adds	r2, r2, r3
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dd29      	ble.n	8000e9e <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	240e      	movs	r4, #14
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2180      	movs	r1, #128	@ 0x80
 8000e56:	0049      	lsls	r1, r1, #1
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000e5c:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x130>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	001a      	movs	r2, r3
 8000e64:	4b37      	ldr	r3, [pc, #220]	@ (8000f44 <HAL_UARTEx_RxEventCallback+0x134>)
 8000e66:	18d0      	adds	r0, r2, r3
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	881a      	ldrh	r2, [r3, #0]
 8000e6c:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x138>)
 8000e6e:	0019      	movs	r1, r3
 8000e70:	f006 fdd6 	bl	8007a20 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000e74:	1cba      	adds	r2, r7, #2
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	8812      	ldrh	r2, [r2, #0]
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b2e      	ldr	r3, [pc, #184]	@ (8000f3c <HAL_UARTEx_RxEventCallback+0x12c>)
 8000e82:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	881a      	ldrh	r2, [r3, #0]
 8000e88:	4b2f      	ldr	r3, [pc, #188]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x138>)
 8000e8a:	18d1      	adds	r1, r2, r3
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <HAL_UARTEx_RxEventCallback+0x12c>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	001a      	movs	r2, r3
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <HAL_UARTEx_RxEventCallback+0x134>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f006 fdc2 	bl	8007a20 <memcpy>
 8000e9c:	e014      	b.n	8000ec8 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8000e9e:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x130>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <HAL_UARTEx_RxEventCallback+0x134>)
 8000ea8:	18d0      	adds	r0, r2, r3
 8000eaa:	1cbb      	adds	r3, r7, #2
 8000eac:	881a      	ldrh	r2, [r3, #0]
 8000eae:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x138>)
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	f006 fdb5 	bl	8007a20 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x130>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	1cbb      	adds	r3, r7, #2
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_UARTEx_RxEventCallback+0x12c>)
 8000ec6:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8000ec8:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d027      	beq.n	8000f22 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8000ed2:	f001 f893 	bl	8001ffc <HAL_GetTick>
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_UARTEx_RxEventCallback+0x140>)
 8000eda:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x130>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0x144>)
 8000ee4:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x138>)
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x138>)
 8000ef4:	7952      	ldrb	r2, [r2, #5]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	18db      	adds	r3, r3, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4910      	ldr	r1, [pc, #64]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x138>)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f006 fc96 	bl	800783c <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_UARTEx_RxEventCallback+0x14c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_UARTEx_RxEventCallback+0x14c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 8000f20:	e005      	b.n	8000f2e <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x150>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b005      	add	sp, #20
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	200006f0 	.word	0x200006f0
 8000f40:	200006ee 	.word	0x200006ee
 8000f44:	200003ec 	.word	0x200003ec
 8000f48:	200005ec 	.word	0x200005ec
 8000f4c:	20000062 	.word	0x20000062
 8000f50:	200006e8 	.word	0x200006e8
 8000f54:	200006ec 	.word	0x200006ec
 8000f58:	2000029c 	.word	0x2000029c
 8000f5c:	20000330 	.word	0x20000330
 8000f60:	200006f2 	.word	0x200006f2

08000f64 <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <handle_chunk_miss+0x5c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d120      	bne.n	8000fb6 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8000f74:	f001 f842 	bl	8001ffc <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <handle_chunk_miss+0x60>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d918      	bls.n	8000fb6 <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <handle_chunk_miss+0x5c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <handle_chunk_miss+0x64>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f005 f80d 	bl	8005fac <HAL_UART_Abort_IT>
 8000f92:	0003      	movs	r3, r0
 8000f94:	001a      	movs	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d104      	bne.n	8000fae <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8000fa4:	1dfc      	adds	r4, r7, #7
 8000fa6:	f000 fb3f 	bl	8001628 <modbus_set_rx>
 8000faa:	0003      	movs	r3, r0
 8000fac:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	e000      	b.n	8000fb8 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	20000062 	.word	0x20000062
 8000fc4:	200006e8 	.word	0x200006e8
 8000fc8:	2000029c 	.word	0x2000029c

08000fcc <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2bff      	cmp	r3, #255	@ 0xff
 8000fde:	d01e      	beq.n	800101e <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <get_rx_buffer+0x5c>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8000fee:	2bff      	cmp	r3, #255	@ 0xff
 8000ff0:	dd0b      	ble.n	800100a <get_rx_buffer+0x3e>
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <get_rx_buffer+0x5c>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	3b01      	subs	r3, #1
 8001002:	3bff      	subs	r3, #255	@ 0xff
 8001004:	4a09      	ldr	r2, [pc, #36]	@ (800102c <get_rx_buffer+0x60>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	e00a      	b.n	8001020 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <get_rx_buffer+0x5c>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	001a      	movs	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <get_rx_buffer+0x60>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	e000      	b.n	8001020 <get_rx_buffer+0x54>
	}
	return 0xFF;
 800101e:	23ff      	movs	r3, #255	@ 0xff
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200006ec 	.word	0x200006ec
 800102c:	200003ec 	.word	0x200003ec

08001030 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001036:	2002      	movs	r0, #2
 8001038:	f7ff ffc8 	bl	8000fcc <get_rx_buffer>
 800103c:	0003      	movs	r3, r0
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21c      	sxth	r4, r3
 8001042:	2003      	movs	r0, #3
 8001044:	f7ff ffc2 	bl	8000fcc <get_rx_buffer>
 8001048:	0003      	movs	r3, r0
 800104a:	b21b      	sxth	r3, r3
 800104c:	4323      	orrs	r3, r4
 800104e:	b21a      	sxth	r2, r3
 8001050:	230a      	movs	r3, #10
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001056:	2004      	movs	r0, #4
 8001058:	f7ff ffb8 	bl	8000fcc <get_rx_buffer>
 800105c:	0003      	movs	r3, r0
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21c      	sxth	r4, r3
 8001062:	2005      	movs	r0, #5
 8001064:	f7ff ffb2 	bl	8000fcc <get_rx_buffer>
 8001068:	0003      	movs	r3, r0
 800106a:	b21b      	sxth	r3, r3
 800106c:	4323      	orrs	r3, r4
 800106e:	b21a      	sxth	r2, r3
 8001070:	2108      	movs	r1, #8
 8001072:	187b      	adds	r3, r7, r1
 8001074:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8001076:	000a      	movs	r2, r1
 8001078:	18bb      	adds	r3, r7, r2
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b7d      	cmp	r3, #125	@ 0x7d
 800107e:	d803      	bhi.n	8001088 <return_holding_registers+0x58>
 8001080:	18bb      	adds	r3, r7, r2
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d104      	bne.n	8001092 <return_holding_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001088:	2006      	movs	r0, #6
 800108a:	f000 f9e9 	bl	8001460 <modbus_exception>
 800108e:	0003      	movs	r3, r0
 8001090:	e0e1      	b.n	8001256 <return_holding_registers+0x226>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001092:	2308      	movs	r3, #8
 8001094:	18fa      	adds	r2, r7, r3
 8001096:	230a      	movs	r3, #10
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	18d3      	adds	r3, r2, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	3a01      	subs	r2, #1
 80010a6:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80010a8:	1dbb      	adds	r3, r7, #6
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	2b31      	cmp	r3, #49	@ 0x31
 80010ae:	d904      	bls.n	80010ba <return_holding_registers+0x8a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80010b0:	2005      	movs	r0, #5
 80010b2:	f000 f9d5 	bl	8001460 <modbus_exception>
 80010b6:	0003      	movs	r3, r0
 80010b8:	e0cd      	b.n	8001256 <return_holding_registers+0x226>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ff86 	bl	8000fcc <get_rx_buffer>
 80010c0:	0003      	movs	r3, r0
 80010c2:	001a      	movs	r2, r3
 80010c4:	4b66      	ldr	r3, [pc, #408]	@ (8001260 <return_holding_registers+0x230>)
 80010c6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff ff7f 	bl	8000fcc <get_rx_buffer>
 80010ce:	0003      	movs	r3, r0
 80010d0:	001a      	movs	r2, r3
 80010d2:	4b63      	ldr	r3, [pc, #396]	@ (8001260 <return_holding_registers+0x230>)
 80010d4:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 80010d6:	2308      	movs	r3, #8
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	18db      	adds	r3, r3, r3
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001260 <return_holding_registers+0x230>)
 80010e4:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 80010e6:	230f      	movs	r3, #15
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	2203      	movs	r2, #3
 80010ec:	701a      	strb	r2, [r3, #0]

	if(((first_register_address >= ADC_0) && (first_register_address <= ADC_8)) ||
 80010ee:	220a      	movs	r2, #10
 80010f0:	18bb      	adds	r3, r7, r2
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d903      	bls.n	8001100 <return_holding_registers+0xd0>
 80010f8:	18bb      	adds	r3, r7, r2
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	2b0b      	cmp	r3, #11
 80010fe:	d907      	bls.n	8001110 <return_holding_registers+0xe0>
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d90e      	bls.n	8001126 <return_holding_registers+0xf6>
		((last_register_address >= ADC_0) && (last_register_address <= ADC_8)))
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b0b      	cmp	r3, #11
 800110e:	d80a      	bhi.n	8001126 <return_holding_registers+0xf6>
	{
		// disable the ADC DMA Stream
		if(HAL_DMA_Abort(&hdma_adc1) != HAL_OK)
 8001110:	4b54      	ldr	r3, [pc, #336]	@ (8001264 <return_holding_registers+0x234>)
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fffe 	bl	8003114 <HAL_DMA_Abort>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d004      	beq.n	8001126 <return_holding_registers+0xf6>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 800111c:	2007      	movs	r0, #7
 800111e:	f000 f99f 	bl	8001460 <modbus_exception>
 8001122:	0003      	movs	r3, r0
 8001124:	e097      	b.n	8001256 <return_holding_registers+0x226>
		}
	}
	uint8_t prim = 0;
 8001126:	230e      	movs	r3, #14
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
	if(((first_register_address >= ACCELEROMETER_X) && (first_register_address <= QUARTERNION_Z)) ||
 800112e:	220a      	movs	r2, #10
 8001130:	18bb      	adds	r3, r7, r2
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	2b0b      	cmp	r3, #11
 8001136:	d903      	bls.n	8001140 <return_holding_registers+0x110>
 8001138:	18bb      	adds	r3, r7, r2
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2b21      	cmp	r3, #33	@ 0x21
 800113e:	d907      	bls.n	8001150 <return_holding_registers+0x120>
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	2b0b      	cmp	r3, #11
 8001146:	d90c      	bls.n	8001162 <return_holding_registers+0x132>
		((last_register_address >= ACCELEROMETER_X) && (last_register_address <= QUARTERNION_Z)))
 8001148:	1dbb      	adds	r3, r7, #6
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b21      	cmp	r3, #33	@ 0x21
 800114e:	d808      	bhi.n	8001162 <return_holding_registers+0x132>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001150:	f3ef 8310 	mrs	r3, PRIMASK
 8001154:	603b      	str	r3, [r7, #0]
  return(result);
 8001156:	683a      	ldr	r2, [r7, #0]
	{
		// disable I2C interrupts
		prim = __get_PRIMASK();
 8001158:	230e      	movs	r3, #14
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800115e:	b672      	cpsid	i
}
 8001160:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001162:	230d      	movs	r3, #13
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e02b      	b.n	80011c4 <return_holding_registers+0x194>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 800116c:	260a      	movs	r6, #10
 800116e:	19bb      	adds	r3, r7, r6
 8001170:	881a      	ldrh	r2, [r3, #0]
 8001172:	240d      	movs	r4, #13
 8001174:	193b      	adds	r3, r7, r4
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	18d2      	adds	r2, r2, r3
 800117a:	4b3b      	ldr	r3, [pc, #236]	@ (8001268 <return_holding_registers+0x238>)
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	5ad3      	ldrh	r3, [r2, r3]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b299      	uxth	r1, r3
 8001184:	250f      	movs	r5, #15
 8001186:	197b      	adds	r3, r7, r5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	197a      	adds	r2, r7, r5
 800118c:	1c58      	adds	r0, r3, #1
 800118e:	7010      	strb	r0, [r2, #0]
 8001190:	001a      	movs	r2, r3
 8001192:	b2c9      	uxtb	r1, r1
 8001194:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <return_holding_registers+0x230>)
 8001196:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8001198:	19bb      	adds	r3, r7, r6
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	193b      	adds	r3, r7, r4
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	18d2      	adds	r2, r2, r3
 80011a2:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <return_holding_registers+0x238>)
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	5ad1      	ldrh	r1, [r2, r3]
 80011a8:	197b      	adds	r3, r7, r5
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	197a      	adds	r2, r7, r5
 80011ae:	1c58      	adds	r0, r3, #1
 80011b0:	7010      	strb	r0, [r2, #0]
 80011b2:	001a      	movs	r2, r3
 80011b4:	b2c9      	uxtb	r1, r1
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <return_holding_registers+0x230>)
 80011b8:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	3201      	adds	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	230d      	movs	r3, #13
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	2208      	movs	r2, #8
 80011ce:	18ba      	adds	r2, r7, r2
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8ca      	bhi.n	800116c <return_holding_registers+0x13c>
	}

	if(((first_register_address >= ADC_0) && (first_register_address <= ADC_8)) ||
 80011d6:	220a      	movs	r2, #10
 80011d8:	18bb      	adds	r3, r7, r2
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d903      	bls.n	80011e8 <return_holding_registers+0x1b8>
 80011e0:	18bb      	adds	r3, r7, r2
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2b0b      	cmp	r3, #11
 80011e6:	d907      	bls.n	80011f8 <return_holding_registers+0x1c8>
 80011e8:	1dbb      	adds	r3, r7, #6
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d911      	bls.n	8001214 <return_holding_registers+0x1e4>
		((last_register_address >= ADC_0) && (last_register_address <= ADC_8)))
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	2b0b      	cmp	r3, #11
 80011f6:	d80d      	bhi.n	8001214 <return_holding_registers+0x1e4>
	{
		// enable the ADC DMA Stream
		if(HAL_ADC_Start_DMA(&hadc1, adc_buffer, 9) != HAL_OK)
 80011f8:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <return_holding_registers+0x23c>)
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <return_holding_registers+0x240>)
 80011fe:	2209      	movs	r2, #9
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fa17 	bl	8002634 <HAL_ADC_Start_DMA>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d004      	beq.n	8001214 <return_holding_registers+0x1e4>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 800120a:	2007      	movs	r0, #7
 800120c:	f000 f928 	bl	8001460 <modbus_exception>
 8001210:	0003      	movs	r3, r0
 8001212:	e020      	b.n	8001256 <return_holding_registers+0x226>
		}
	}
	if(((first_register_address >= ACCELEROMETER_X) && (first_register_address <= QUARTERNION_Z)) ||
 8001214:	220a      	movs	r2, #10
 8001216:	18bb      	adds	r3, r7, r2
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	2b0b      	cmp	r3, #11
 800121c:	d903      	bls.n	8001226 <return_holding_registers+0x1f6>
 800121e:	18bb      	adds	r3, r7, r2
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b21      	cmp	r3, #33	@ 0x21
 8001224:	d907      	bls.n	8001236 <return_holding_registers+0x206>
 8001226:	1dbb      	adds	r3, r7, #6
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2b0b      	cmp	r3, #11
 800122c:	d90a      	bls.n	8001244 <return_holding_registers+0x214>
		((last_register_address >= ACCELEROMETER_X) && (last_register_address <= QUARTERNION_Z)))
 800122e:	1dbb      	adds	r3, r7, #6
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	2b21      	cmp	r3, #33	@ 0x21
 8001234:	d806      	bhi.n	8001244 <return_holding_registers+0x214>
	{
		// enable I2C interrupts
		if(prim == 0)
 8001236:	230e      	movs	r3, #14
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <return_holding_registers+0x214>
  __ASM volatile ("cpsie i" : : : "memory");
 8001240:	b662      	cpsie	i
}
 8001242:	46c0      	nop			@ (mov r8, r8)
		{
			__enable_irq();
		}
	}

	return modbus_send(modbus_tx_buffer, index);
 8001244:	230f      	movs	r3, #15
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <return_holding_registers+0x230>)
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f99c 	bl	800158c <modbus_send>
 8001254:	0003      	movs	r3, r0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b005      	add	sp, #20
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	200004ec 	.word	0x200004ec
 8001264:	200000f0 	.word	0x200000f0
 8001268:	20000000 	.word	0x20000000
 800126c:	200003d8 	.word	0x200003d8
 8001270:	2000008c 	.word	0x2000008c

08001274 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff fea6 	bl	8000fcc <get_rx_buffer>
 8001280:	0003      	movs	r3, r0
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21c      	sxth	r4, r3
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff fea0 	bl	8000fcc <get_rx_buffer>
 800128c:	0003      	movs	r3, r0
 800128e:	b21b      	sxth	r3, r3
 8001290:	4323      	orrs	r3, r4
 8001292:	b21a      	sxth	r2, r3
 8001294:	230c      	movs	r3, #12
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 800129a:	2004      	movs	r0, #4
 800129c:	f7ff fe96 	bl	8000fcc <get_rx_buffer>
 80012a0:	0003      	movs	r3, r0
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21c      	sxth	r4, r3
 80012a6:	2005      	movs	r0, #5
 80012a8:	f7ff fe90 	bl	8000fcc <get_rx_buffer>
 80012ac:	0003      	movs	r3, r0
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4323      	orrs	r3, r4
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	210a      	movs	r1, #10
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 80012ba:	000a      	movs	r2, r1
 80012bc:	18bb      	adds	r3, r7, r2
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b7d      	cmp	r3, #125	@ 0x7d
 80012c2:	d803      	bhi.n	80012cc <edit_multiple_registers+0x58>
 80012c4:	18bb      	adds	r3, r7, r2
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d104      	bne.n	80012d6 <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80012cc:	2006      	movs	r0, #6
 80012ce:	f000 f8c7 	bl	8001460 <modbus_exception>
 80012d2:	0003      	movs	r3, r0
 80012d4:	e0bc      	b.n	8001450 <edit_multiple_registers+0x1dc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80012d6:	230a      	movs	r3, #10
 80012d8:	18fa      	adds	r2, r7, r3
 80012da:	230c      	movs	r3, #12
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	18d3      	adds	r3, r2, r3
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	2108      	movs	r1, #8
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	3a01      	subs	r2, #1
 80012ec:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	2b31      	cmp	r3, #49	@ 0x31
 80012f4:	d904      	bls.n	8001300 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80012f6:	2005      	movs	r0, #5
 80012f8:	f000 f8b2 	bl	8001460 <modbus_exception>
 80012fc:	0003      	movs	r3, r0
 80012fe:	e0a7      	b.n	8001450 <edit_multiple_registers+0x1dc>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= QUARTERNION_Z)) ||
 8001300:	220c      	movs	r2, #12
 8001302:	18bb      	adds	r3, r7, r2
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d903      	bls.n	8001312 <edit_multiple_registers+0x9e>
 800130a:	18bb      	adds	r3, r7, r2
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	2b21      	cmp	r3, #33	@ 0x21
 8001310:	d908      	bls.n	8001324 <edit_multiple_registers+0xb0>
 8001312:	2208      	movs	r2, #8
 8001314:	18bb      	adds	r3, r7, r2
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d908      	bls.n	800132e <edit_multiple_registers+0xba>
		((last_register_address >= ADC_0) && (last_register_address <= QUARTERNION_Z)))
 800131c:	18bb      	adds	r3, r7, r2
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b21      	cmp	r3, #33	@ 0x21
 8001322:	d804      	bhi.n	800132e <edit_multiple_registers+0xba>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8001324:	2004      	movs	r0, #4
 8001326:	f000 f89b 	bl	8001460 <modbus_exception>
 800132a:	0003      	movs	r3, r0
 800132c:	e090      	b.n	8001450 <edit_multiple_registers+0x1dc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fe4c 	bl	8000fcc <get_rx_buffer>
 8001334:	0003      	movs	r3, r0
 8001336:	001a      	movs	r2, r3
 8001338:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <edit_multiple_registers+0x1e4>)
 800133a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fe45 	bl	8000fcc <get_rx_buffer>
 8001342:	0003      	movs	r3, r0
 8001344:	001a      	movs	r2, r3
 8001346:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <edit_multiple_registers+0x1e4>)
 8001348:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff fe3e 	bl	8000fcc <get_rx_buffer>
 8001350:	0003      	movs	r3, r0
 8001352:	001a      	movs	r2, r3
 8001354:	4b40      	ldr	r3, [pc, #256]	@ (8001458 <edit_multiple_registers+0x1e4>)
 8001356:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fe37 	bl	8000fcc <get_rx_buffer>
 800135e:	0003      	movs	r3, r0
 8001360:	001a      	movs	r2, r3
 8001362:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <edit_multiple_registers+0x1e4>)
 8001364:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8001366:	2004      	movs	r0, #4
 8001368:	f7ff fe30 	bl	8000fcc <get_rx_buffer>
 800136c:	0003      	movs	r3, r0
 800136e:	001a      	movs	r2, r3
 8001370:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <edit_multiple_registers+0x1e4>)
 8001372:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8001374:	2005      	movs	r0, #5
 8001376:	f7ff fe29 	bl	8000fcc <get_rx_buffer>
 800137a:	0003      	movs	r3, r0
 800137c:	001a      	movs	r2, r3
 800137e:	4b36      	ldr	r3, [pc, #216]	@ (8001458 <edit_multiple_registers+0x1e4>)
 8001380:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	2206      	movs	r2, #6
 8001386:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001388:	230f      	movs	r3, #15
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e032      	b.n	80013f8 <edit_multiple_registers+0x184>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8001392:	250f      	movs	r5, #15
 8001394:	197b      	adds	r3, r7, r5
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	18db      	adds	r3, r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3307      	adds	r3, #7
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff fe13 	bl	8000fcc <get_rx_buffer>
 80013a6:	0003      	movs	r3, r0
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21c      	sxth	r4, r3
 80013ac:	197b      	adds	r3, r7, r5
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3304      	adds	r3, #4
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	18db      	adds	r3, r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fe07 	bl	8000fcc <get_rx_buffer>
 80013be:	0003      	movs	r3, r0
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4323      	orrs	r3, r4
 80013c4:	b219      	sxth	r1, r3
 80013c6:	200c      	movs	r0, #12
 80013c8:	183b      	adds	r3, r7, r0
 80013ca:	881a      	ldrh	r2, [r3, #0]
 80013cc:	197b      	adds	r3, r7, r5
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	18d2      	adds	r2, r2, r3
 80013d2:	b289      	uxth	r1, r1
 80013d4:	4b21      	ldr	r3, [pc, #132]	@ (800145c <edit_multiple_registers+0x1e8>)
 80013d6:	0052      	lsls	r2, r2, #1
 80013d8:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 80013da:	197b      	adds	r3, r7, r5
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	183b      	adds	r3, r7, r0
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	18d3      	adds	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 f863 	bl	80014b4 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	3201      	adds	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	220a      	movs	r2, #10
 8001402:	18ba      	adds	r2, r7, r2
 8001404:	8812      	ldrh	r2, [r2, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d8c3      	bhi.n	8001392 <edit_multiple_registers+0x11e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f000 fe00 	bl	8002010 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8001410:	1dbc      	adds	r4, r7, #6
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <edit_multiple_registers+0x1e4>)
 8001418:	0011      	movs	r1, r2
 800141a:	0018      	movs	r0, r3
 800141c:	f000 f8b6 	bl	800158c <modbus_send>
 8001420:	0003      	movs	r3, r0
 8001422:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 8001424:	1dbb      	adds	r3, r7, #6
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b25b      	sxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10d      	bne.n	800144a <edit_multiple_registers+0x1d6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 800142e:	230c      	movs	r3, #12
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d808      	bhi.n	800144a <edit_multiple_registers+0x1d6>
 8001438:	2308      	movs	r3, #8
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <edit_multiple_registers+0x1d6>
		{
			return modbus_change_baud_rate();
 8001442:	f000 f913 	bl	800166c <modbus_change_baud_rate>
 8001446:	0003      	movs	r3, r0
 8001448:	e002      	b.n	8001450 <edit_multiple_registers+0x1dc>
		}
	}
	return status;
 800144a:	1dbb      	adds	r3, r7, #6
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b25b      	sxtb	r3, r3
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bdb0      	pop	{r4, r5, r7, pc}
 8001458:	200004ec 	.word	0x200004ec
 800145c:	20000000 	.word	0x20000000

08001460 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	0002      	movs	r2, r0
 8001468:	1dfb      	adds	r3, r7, #7
 800146a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fdad 	bl	8000fcc <get_rx_buffer>
 8001472:	0003      	movs	r3, r0
 8001474:	001a      	movs	r2, r3
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <modbus_exception+0x50>)
 8001478:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fda6 	bl	8000fcc <get_rx_buffer>
 8001480:	0003      	movs	r3, r0
 8001482:	001a      	movs	r2, r3
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	425b      	negs	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <modbus_exception+0x50>)
 800148e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3b03      	subs	r3, #3
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <modbus_exception+0x50>)
 800149a:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <modbus_exception+0x50>)
 800149e:	2103      	movs	r1, #3
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f873 	bl	800158c <modbus_send>
 80014a6:	0003      	movs	r3, r0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200004ec 	.word	0x200004ec

080014b4 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0002      	movs	r2, r0
 80014bc:	1dbb      	adds	r3, r7, #6
 80014be:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 80014c0:	1dbb      	adds	r3, r7, #6
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	2b24      	cmp	r3, #36	@ 0x24
 80014c6:	dd00      	ble.n	80014ca <handle_range+0x16>
 80014c8:	e058      	b.n	800157c <handle_range+0xc8>
 80014ca:	2b22      	cmp	r3, #34	@ 0x22
 80014cc:	da3f      	bge.n	800154e <handle_range+0x9a>
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d02f      	beq.n	8001532 <handle_range+0x7e>
 80014d2:	dc53      	bgt.n	800157c <handle_range+0xc8>
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <handle_range+0x2a>
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d00e      	beq.n	80014fa <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 80014dc:	e04e      	b.n	800157c <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <handle_range+0xd0>)
 80014e4:	0052      	lsls	r2, r2, #1
 80014e6:	5ad3      	ldrh	r3, [r2, r3]
 80014e8:	2bff      	cmp	r3, #255	@ 0xff
 80014ea:	d940      	bls.n	800156e <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <handle_range+0xd0>)
 80014f2:	0052      	lsls	r2, r2, #1
 80014f4:	21ff      	movs	r1, #255	@ 0xff
 80014f6:	52d1      	strh	r1, [r2, r3]
			break;
 80014f8:	e039      	b.n	800156e <handle_range+0xba>
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 80014fa:	1dbb      	adds	r3, r7, #6
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <handle_range+0xd0>)
 8001500:	0052      	lsls	r2, r2, #1
 8001502:	5ad3      	ldrh	r3, [r2, r3]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d806      	bhi.n	8001516 <handle_range+0x62>
				holding_register_database[holding_register] = BAUD_RATE_4800;
 8001508:	1dbb      	adds	r3, r7, #6
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <handle_range+0xd0>)
 800150e:	0052      	lsls	r2, r2, #1
 8001510:	2102      	movs	r1, #2
 8001512:	52d1      	strh	r1, [r2, r3]
			break;
 8001514:	e02d      	b.n	8001572 <handle_range+0xbe>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 8001516:	1dbb      	adds	r3, r7, #6
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <handle_range+0xd0>)
 800151c:	0052      	lsls	r2, r2, #1
 800151e:	5ad3      	ldrh	r3, [r2, r3]
 8001520:	2b09      	cmp	r3, #9
 8001522:	d926      	bls.n	8001572 <handle_range+0xbe>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	881a      	ldrh	r2, [r3, #0]
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <handle_range+0xd0>)
 800152a:	0052      	lsls	r2, r2, #1
 800152c:	2109      	movs	r1, #9
 800152e:	52d1      	strh	r1, [r2, r3]
			break;
 8001530:	e01f      	b.n	8001572 <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 8001532:	1dbb      	adds	r3, r7, #6
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <handle_range+0xd0>)
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	5ad3      	ldrh	r3, [r2, r3]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d91a      	bls.n	8001576 <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 8001540:	1dbb      	adds	r3, r7, #6
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <handle_range+0xd0>)
 8001546:	0052      	lsls	r2, r2, #1
 8001548:	2101      	movs	r1, #1
 800154a:	52d1      	strh	r1, [r2, r3]
			break;
 800154c:	e013      	b.n	8001576 <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 800154e:	1dbb      	adds	r3, r7, #6
 8001550:	881a      	ldrh	r2, [r3, #0]
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <handle_range+0xd0>)
 8001554:	0052      	lsls	r2, r2, #1
 8001556:	5ad2      	ldrh	r2, [r2, r3]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	429a      	cmp	r2, r3
 800155e:	d30c      	bcc.n	800157a <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	881a      	ldrh	r2, [r3, #0]
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <handle_range+0xd0>)
 8001566:	0052      	lsls	r2, r2, #1
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <handle_range+0xd4>)
 800156a:	52d1      	strh	r1, [r2, r3]
			break;
 800156c:	e005      	b.n	800157a <handle_range+0xc6>
			break;
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	e004      	b.n	800157c <handle_range+0xc8>
			break;
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	e002      	b.n	800157c <handle_range+0xc8>
			break;
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	e000      	b.n	800157c <handle_range+0xc8>
			break;
 800157a:	46c0      	nop			@ (mov r8, r8)
}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	00000fff 	.word	0x00000fff

0800158c <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	000a      	movs	r2, r1
 8001596:	1cfb      	adds	r3, r7, #3
 8001598:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 800159a:	250e      	movs	r5, #14
 800159c:	197c      	adds	r4, r7, r5
 800159e:	1cfb      	adds	r3, r7, #3
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <modbus_send+0x68>)
 80015a4:	0011      	movs	r1, r2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 f8c6 	bl	8001738 <crc_16>
 80015ac:	0003      	movs	r3, r0
 80015ae:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80015b0:	1cfb      	adds	r3, r7, #3
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	197a      	adds	r2, r7, r5
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	b2d1      	uxtb	r1, r2
 80015ba:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <modbus_send+0x68>)
 80015bc:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 80015be:	197b      	adds	r3, r7, r5
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	1cfb      	adds	r3, r7, #3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b2d1      	uxtb	r1, r2
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <modbus_send+0x68>)
 80015d0:	54d1      	strb	r1, [r2, r3]

	return HAL_UART_Transmit(&huart1, modbus_tx_buffer, size + 2, 100);
 80015d2:	1cfb      	adds	r3, r7, #3
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3302      	adds	r3, #2
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4905      	ldr	r1, [pc, #20]	@ (80015f4 <modbus_send+0x68>)
 80015de:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <modbus_send+0x6c>)
 80015e0:	2364      	movs	r3, #100	@ 0x64
 80015e2:	f004 fc3f 	bl	8005e64 <HAL_UART_Transmit>
 80015e6:	0003      	movs	r3, r0
 80015e8:	b25b      	sxtb	r3, r3
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	200004ec 	.word	0x200004ec
 80015f8:	2000029c 	.word	0x2000029c

080015fc <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	if(rx_int)
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <modbus_rx+0x28>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <modbus_rx+0x18>
	{
		rx_int = 0;
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <modbus_rx+0x28>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
		return 1;
 8001610:	2301      	movs	r3, #1
 8001612:	e004      	b.n	800161e <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8001614:	f7ff fca6 	bl	8000f64 <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 8001618:	4b02      	ldr	r3, [pc, #8]	@ (8001624 <modbus_rx+0x28>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200006f2 	.word	0x200006f2

08001628 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 800162e:	490c      	ldr	r1, [pc, #48]	@ (8001660 <modbus_set_rx+0x38>)
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <modbus_set_rx+0x3c>)
 8001632:	2206      	movs	r2, #6
 8001634:	0018      	movs	r0, r3
 8001636:	f006 f901 	bl	800783c <HAL_UARTEx_ReceiveToIdle_DMA>
 800163a:	0003      	movs	r3, r0
 800163c:	001a      	movs	r2, r3
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <modbus_set_rx+0x40>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <modbus_set_rx+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2104      	movs	r1, #4
 800164e:	438a      	bics	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

	return status;
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b25b      	sxtb	r3, r3
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200005ec 	.word	0x200005ec
 8001664:	2000029c 	.word	0x2000029c
 8001668:	20000330 	.word	0x20000330

0800166c <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8001678:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <modbus_change_baud_rate+0xc0>)
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d82c      	bhi.n	80016da <modbus_change_baud_rate+0x6e>
 8001680:	009a      	lsls	r2, r3, #2
 8001682:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <modbus_change_baud_rate+0xc4>)
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 800168c:	2296      	movs	r2, #150	@ 0x96
 800168e:	0152      	lsls	r2, r2, #5
 8001690:	605a      	str	r2, [r3, #4]
			break;
 8001692:	e033      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 8001696:	2296      	movs	r2, #150	@ 0x96
 8001698:	0192      	lsls	r2, r2, #6
 800169a:	605a      	str	r2, [r3, #4]
			break;
 800169c:	e02e      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016a0:	2296      	movs	r2, #150	@ 0x96
 80016a2:	01d2      	lsls	r2, r2, #7
 80016a4:	605a      	str	r2, [r3, #4]
			break;
 80016a6:	e029      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80016a8:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016aa:	2296      	movs	r2, #150	@ 0x96
 80016ac:	0212      	lsls	r2, r2, #8
 80016ae:	605a      	str	r2, [r3, #4]
			break;
 80016b0:	e024      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016b4:	22e1      	movs	r2, #225	@ 0xe1
 80016b6:	0212      	lsls	r2, r2, #8
 80016b8:	605a      	str	r2, [r3, #4]
			break;
 80016ba:	e01f      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016be:	22e1      	movs	r2, #225	@ 0xe1
 80016c0:	0252      	lsls	r2, r2, #9
 80016c2:	605a      	str	r2, [r3, #4]
			break;
 80016c4:	e01a      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016c8:	22fa      	movs	r2, #250	@ 0xfa
 80016ca:	0252      	lsls	r2, r2, #9
 80016cc:	605a      	str	r2, [r3, #4]
			break;
 80016ce:	e015      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016d2:	22fa      	movs	r2, #250	@ 0xfa
 80016d4:	0292      	lsls	r2, r2, #10
 80016d6:	605a      	str	r2, [r3, #4]
			break;
 80016d8:	e010      	b.n	80016fc <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <modbus_change_baud_rate+0xc0>)
 80016dc:	2203      	movs	r2, #3
 80016de:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016e2:	2296      	movs	r2, #150	@ 0x96
 80016e4:	0192      	lsls	r2, r2, #6
 80016e6:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f005 f900 	bl	80068f0 <UART_SetConfig>
 80016f0:	0003      	movs	r3, r0
 80016f2:	001a      	movs	r2, r3
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 80016f8:	2306      	movs	r3, #6
 80016fa:	e013      	b.n	8001724 <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <modbus_change_baud_rate+0xc8>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f005 f8f6 	bl	80068f0 <UART_SetConfig>
 8001704:	0003      	movs	r3, r0
 8001706:	001a      	movs	r2, r3
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b25b      	sxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <modbus_change_baud_rate+0xb2>
	{
		return status;
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	e002      	b.n	8001724 <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b25b      	sxtb	r3, r3
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000000 	.word	0x20000000
 8001730:	08007c4c 	.word	0x08007c4c
 8001734:	2000029c 	.word	0x2000029c

08001738 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	000a      	movs	r2, r1
 8001742:	1cfb      	adds	r3, r7, #3
 8001744:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8001746:	230f      	movs	r3, #15
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	22ff      	movs	r2, #255	@ 0xff
 800174c:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 800174e:	230e      	movs	r3, #14
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	22ff      	movs	r2, #255	@ 0xff
 8001754:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8001756:	e019      	b.n	800178c <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	200e      	movs	r0, #14
 8001762:	183b      	adds	r3, r7, r0
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4053      	eors	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 800176c:	4a13      	ldr	r2, [pc, #76]	@ (80017bc <crc_16+0x84>)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	7819      	ldrb	r1, [r3, #0]
 8001774:	183b      	adds	r3, r7, r0
 8001776:	200f      	movs	r0, #15
 8001778:	183a      	adds	r2, r7, r0
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	404a      	eors	r2, r1
 800177e:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8001780:	183b      	adds	r3, r7, r0
 8001782:	490f      	ldr	r1, [pc, #60]	@ (80017c0 <crc_16+0x88>)
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	188a      	adds	r2, r1, r2
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	701a      	strb	r2, [r3, #0]
	while (size--)
 800178c:	1cfb      	adds	r3, r7, #3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	1cfa      	adds	r2, r7, #3
 8001792:	1e59      	subs	r1, r3, #1
 8001794:	7011      	strb	r1, [r2, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1de      	bne.n	8001758 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 800179a:	230f      	movs	r3, #15
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	230e      	movs	r3, #14
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	b29b      	uxth	r3, r3
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	08007a4c 	.word	0x08007a4c
 80017c0:	08007b4c 	.word	0x08007b4c

080017c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <HAL_MspInit+0x44>)
 80017cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_MspInit+0x44>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <HAL_MspInit+0x44>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_MspInit+0x44>)
 80017e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_MspInit+0x44>)
 80017e8:	2180      	movs	r1, #128	@ 0x80
 80017ea:	0549      	lsls	r1, r1, #21
 80017ec:	430a      	orrs	r2, r1
 80017ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_MspInit+0x44>)
 80017f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017f4:	2380      	movs	r3, #128	@ 0x80
 80017f6:	055b      	lsls	r3, r3, #21
 80017f8:	4013      	ands	r3, r2
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b093      	sub	sp, #76	@ 0x4c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	2334      	movs	r3, #52	@ 0x34
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	0018      	movs	r0, r3
 800181a:	2314      	movs	r3, #20
 800181c:	001a      	movs	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	f006 f8d2 	bl	80079c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	2414      	movs	r4, #20
 8001826:	193b      	adds	r3, r7, r4
 8001828:	0018      	movs	r0, r3
 800182a:	2320      	movs	r3, #32
 800182c:	001a      	movs	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	f006 f8ca 	bl	80079c8 <memset>
  if(hadc->Instance==ADC1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a43      	ldr	r2, [pc, #268]	@ (8001948 <HAL_ADC_MspInit+0x13c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d000      	beq.n	8001840 <HAL_ADC_MspInit+0x34>
 800183e:	e07e      	b.n	800193e <HAL_ADC_MspInit+0x132>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001840:	193b      	adds	r3, r7, r4
 8001842:	2220      	movs	r2, #32
 8001844:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184c:	193b      	adds	r3, r7, r4
 800184e:	0018      	movs	r0, r3
 8001850:	f003 fb80 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001858:	f7ff fad4 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800185c:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_ADC_MspInit+0x140>)
 800185e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001860:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <HAL_ADC_MspInit+0x140>)
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	0349      	lsls	r1, r1, #13
 8001866:	430a      	orrs	r2, r1
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40
 800186a:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_ADC_MspInit+0x140>)
 800186c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	035b      	lsls	r3, r3, #13
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b34      	ldr	r3, [pc, #208]	@ (800194c <HAL_ADC_MspInit+0x140>)
 800187a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800187c:	4b33      	ldr	r3, [pc, #204]	@ (800194c <HAL_ADC_MspInit+0x140>)
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34
 8001884:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_ADC_MspInit+0x140>)
 8001886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <HAL_ADC_MspInit+0x140>)
 8001892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001894:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_ADC_MspInit+0x140>)
 8001896:	2102      	movs	r1, #2
 8001898:	430a      	orrs	r2, r1
 800189a:	635a      	str	r2, [r3, #52]	@ 0x34
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_ADC_MspInit+0x140>)
 800189e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ADC1_IN18
    PB10     ------> ADC1_IN20
    PB11     ------> ADC1_IN21
    PB12     ------> ADC1_IN22
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018a8:	2434      	movs	r4, #52	@ 0x34
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	22e0      	movs	r2, #224	@ 0xe0
 80018ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	2203      	movs	r2, #3
 80018b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	193a      	adds	r2, r7, r4
 80018be:	23a0      	movs	r3, #160	@ 0xa0
 80018c0:	05db      	lsls	r3, r3, #23
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f001 fe4f 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	4a20      	ldr	r2, [pc, #128]	@ (8001950 <HAL_ADC_MspInit+0x144>)
 80018ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	2203      	movs	r2, #3
 80018d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <HAL_ADC_MspInit+0x148>)
 80018e0:	0019      	movs	r1, r3
 80018e2:	0010      	movs	r0, r2
 80018e4:	f001 fe40 	bl	8003568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 80018ea:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <HAL_ADC_MspInit+0x150>)
 80018ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 80018f0:	2205      	movs	r2, #5
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 8001902:	2280      	movs	r2, #128	@ 0x80
 8001904:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 8001908:	2280      	movs	r2, #128	@ 0x80
 800190a:	0052      	lsls	r2, r2, #1
 800190c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	00d2      	lsls	r2, r2, #3
 8001914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 8001924:	0018      	movs	r0, r3
 8001926:	f001 fae3 	bl	8002ef0 <HAL_DMA_Init>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 800192e:	f7ff fa69 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a08      	ldr	r2, [pc, #32]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 8001936:	651a      	str	r2, [r3, #80]	@ 0x50
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <HAL_ADC_MspInit+0x14c>)
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b013      	add	sp, #76	@ 0x4c
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	40012400 	.word	0x40012400
 800194c:	40021000 	.word	0x40021000
 8001950:	00001c03 	.word	0x00001c03
 8001954:	50000400 	.word	0x50000400
 8001958:	200000f0 	.word	0x200000f0
 800195c:	40020008 	.word	0x40020008

08001960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b093      	sub	sp, #76	@ 0x4c
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	2334      	movs	r3, #52	@ 0x34
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	0018      	movs	r0, r3
 800196e:	2314      	movs	r3, #20
 8001970:	001a      	movs	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	f006 f828 	bl	80079c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001978:	2414      	movs	r4, #20
 800197a:	193b      	adds	r3, r7, r4
 800197c:	0018      	movs	r0, r3
 800197e:	2320      	movs	r3, #32
 8001980:	001a      	movs	r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	f006 f820 	bl	80079c8 <memset>
  if(hi2c->Instance==I2C1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a27      	ldr	r2, [pc, #156]	@ (8001a2c <HAL_I2C_MspInit+0xcc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d147      	bne.n	8001a22 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001992:	193b      	adds	r3, r7, r4
 8001994:	2202      	movs	r2, #2
 8001996:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001998:	193b      	adds	r3, r7, r4
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	0018      	movs	r0, r3
 80019a2:	f003 fad7 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019aa:	f7ff fa2b 	bl	8000e04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_I2C_MspInit+0xd0>)
 80019b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <HAL_I2C_MspInit+0xd0>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <HAL_I2C_MspInit+0xd0>)
 80019bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019be:	2201      	movs	r2, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019c6:	2134      	movs	r1, #52	@ 0x34
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	22c0      	movs	r2, #192	@ 0xc0
 80019cc:	00d2      	lsls	r2, r2, #3
 80019ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2212      	movs	r2, #18
 80019d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2206      	movs	r2, #6
 80019e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	187a      	adds	r2, r7, r1
 80019ea:	23a0      	movs	r3, #160	@ 0xa0
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f001 fdb9 	bl	8003568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_I2C_MspInit+0xd0>)
 80019f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <HAL_I2C_MspInit+0xd0>)
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	0389      	lsls	r1, r1, #14
 8001a00:	430a      	orrs	r2, r1
 8001a02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_I2C_MspInit+0xd0>)
 8001a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	039b      	lsls	r3, r3, #14
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2103      	movs	r1, #3
 8001a16:	2017      	movs	r0, #23
 8001a18:	f001 fa38 	bl	8002e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001a1c:	2017      	movs	r0, #23
 8001a1e:	f001 fa4a 	bl	8002eb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b013      	add	sp, #76	@ 0x4c
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b093      	sub	sp, #76	@ 0x4c
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	2334      	movs	r3, #52	@ 0x34
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	0018      	movs	r0, r3
 8001a42:	2314      	movs	r3, #20
 8001a44:	001a      	movs	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	f005 ffbe 	bl	80079c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	2414      	movs	r4, #20
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	0018      	movs	r0, r3
 8001a52:	2320      	movs	r3, #32
 8001a54:	001a      	movs	r2, r3
 8001a56:	2100      	movs	r1, #0
 8001a58:	f005 ffb6 	bl	80079c8 <memset>
  if(hspi->Instance==SPI1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a34      	ldr	r2, [pc, #208]	@ (8001b34 <HAL_SPI_MspInit+0x100>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d162      	bne.n	8001b2c <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	2204      	movs	r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	0018      	movs	r0, r3
 8001a76:	f003 fa6d 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a7e:	f7ff f9c1 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a82:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a86:	4b2c      	ldr	r3, [pc, #176]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001a88:	2180      	movs	r1, #128	@ 0x80
 8001a8a:	0149      	lsls	r1, r1, #5
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a90:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa2:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aaa:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aba:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001abc:	2102      	movs	r1, #2
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_SPI_MspInit+0x104>)
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ace:	2134      	movs	r1, #52	@ 0x34
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2280      	movs	r2, #128	@ 0x80
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	000c      	movs	r4, r1
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	2202      	movs	r2, #2
 8001ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	193a      	adds	r2, r7, r4
 8001af4:	23a0      	movs	r3, #160	@ 0xa0
 8001af6:	05db      	lsls	r3, r3, #23
 8001af8:	0011      	movs	r1, r2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f001 fd34 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001b00:	0021      	movs	r1, r4
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2228      	movs	r2, #40	@ 0x28
 8001b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	4a06      	ldr	r2, [pc, #24]	@ (8001b3c <HAL_SPI_MspInit+0x108>)
 8001b24:	0019      	movs	r1, r3
 8001b26:	0010      	movs	r0, r2
 8001b28:	f001 fd1e 	bl	8003568 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b013      	add	sp, #76	@ 0x4c
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	40013000 	.word	0x40013000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	50000400 	.word	0x50000400

08001b40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <HAL_TIM_PWM_MspInit+0x38>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10d      	bne.n	8001b6e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	0109      	lsls	r1, r1, #4
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b004      	add	sp, #16
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x38>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10d      	bne.n	8001bae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001b98:	2180      	movs	r1, #128	@ 0x80
 8001b9a:	0209      	lsls	r1, r1, #8
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_TIM_Base_MspInit+0x3c>)
 8001ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	40002000 	.word	0x40002000
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	240c      	movs	r4, #12
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	0018      	movs	r0, r3
 8001bce:	2314      	movs	r3, #20
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f005 fef8 	bl	80079c8 <memset>
  if(htim->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a15      	ldr	r2, [pc, #84]	@ (8001c34 <HAL_TIM_MspPostInit+0x74>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d123      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_TIM_MspPostInit+0x78>)
 8001be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_TIM_MspPostInit+0x78>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_TIM_MspPostInit+0x78>)
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	0212      	lsls	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	0021      	movs	r1, r4
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2202      	movs	r2, #2
 8001c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2202      	movs	r2, #2
 8001c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	187a      	adds	r2, r7, r1
 8001c1e:	23a0      	movs	r3, #160	@ 0xa0
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f001 fc9f 	bl	8003568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b009      	add	sp, #36	@ 0x24
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40021000 	.word	0x40021000

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b095      	sub	sp, #84	@ 0x54
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	233c      	movs	r3, #60	@ 0x3c
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	0018      	movs	r0, r3
 8001c4a:	2314      	movs	r3, #20
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f005 feba 	bl	80079c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c54:	241c      	movs	r4, #28
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	0018      	movs	r0, r3
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	f005 feb2 	bl	80079c8 <memset>
  if(huart->Instance==USART1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5f      	ldr	r2, [pc, #380]	@ (8001de8 <HAL_UART_MspInit+0x1ac>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d000      	beq.n	8001c70 <HAL_UART_MspInit+0x34>
 8001c6e:	e0b7      	b.n	8001de0 <HAL_UART_MspInit+0x1a4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c76:	193b      	adds	r3, r7, r4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	193b      	adds	r3, r7, r4
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f003 f968 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c88:	f7ff f8bc 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8c:	4b57      	ldr	r3, [pc, #348]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c90:	4b56      	ldr	r3, [pc, #344]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	01c9      	lsls	r1, r1, #7
 8001c96:	430a      	orrs	r2, r1
 8001c98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c9a:	4b54      	ldr	r3, [pc, #336]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	01db      	lsls	r3, r3, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4b50      	ldr	r3, [pc, #320]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cac:	4b4f      	ldr	r3, [pc, #316]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001cae:	2104      	movs	r1, #4
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4013      	ands	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cc4:	4b49      	ldr	r3, [pc, #292]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ccc:	4b47      	ldr	r3, [pc, #284]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cdc:	4b43      	ldr	r3, [pc, #268]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce4:	4b41      	ldr	r3, [pc, #260]	@ (8001dec <HAL_UART_MspInit+0x1b0>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cf0:	213c      	movs	r1, #60	@ 0x3c
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	01d2      	lsls	r2, r2, #7
 8001cf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	000c      	movs	r4, r1
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	2202      	movs	r2, #2
 8001d00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	193b      	adds	r3, r7, r4
 8001d16:	4a36      	ldr	r2, [pc, #216]	@ (8001df0 <HAL_UART_MspInit+0x1b4>)
 8001d18:	0019      	movs	r1, r3
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	f001 fc24 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d20:	193b      	adds	r3, r7, r4
 8001d22:	2204      	movs	r2, #4
 8001d24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	2202      	movs	r2, #2
 8001d2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	193b      	adds	r3, r7, r4
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	193b      	adds	r3, r7, r4
 8001d40:	4a2c      	ldr	r2, [pc, #176]	@ (8001df4 <HAL_UART_MspInit+0x1b8>)
 8001d42:	0019      	movs	r1, r3
 8001d44:	0010      	movs	r0, r2
 8001d46:	f001 fc0f 	bl	8003568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d4a:	0021      	movs	r1, r4
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	0152      	lsls	r2, r2, #5
 8001d52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2202      	movs	r2, #2
 8001d58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2201      	movs	r2, #1
 8001d6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	187a      	adds	r2, r7, r1
 8001d6e:	23a0      	movs	r3, #160	@ 0xa0
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f001 fbf7 	bl	8003568 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dfc <HAL_UART_MspInit+0x1c0>)
 8001d7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001d82:	2232      	movs	r2, #50	@ 0x32
 8001d84:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001d94:	2280      	movs	r2, #128	@ 0x80
 8001d96:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d98:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001da4:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001daa:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001dac:	22c0      	movs	r2, #192	@ 0xc0
 8001dae:	0192      	lsls	r2, r2, #6
 8001db0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001db4:	0018      	movs	r0, r3
 8001db6:	f001 f89b 	bl	8002ef0 <HAL_DMA_Init>
 8001dba:	1e03      	subs	r3, r0, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8001dbe:	f7ff f821 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2180      	movs	r1, #128	@ 0x80
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001dc8:	505a      	str	r2, [r3, r1]
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_UART_MspInit+0x1bc>)
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	201b      	movs	r0, #27
 8001dd6:	f001 f859 	bl	8002e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dda:	201b      	movs	r0, #27
 8001ddc:	f001 f86b 	bl	8002eb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b015      	add	sp, #84	@ 0x54
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40021000 	.word	0x40021000
 8001df0:	50000800 	.word	0x50000800
 8001df4:	50000400 	.word	0x50000400
 8001df8:	20000330 	.word	0x20000330
 8001dfc:	4002001c 	.word	0x4002001c

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e04:	46c0      	nop			@ (mov r8, r8)
 8001e06:	e7fd      	b.n	8001e04 <NMI_Handler+0x4>

08001e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	e7fd      	b.n	8001e0c <HardFault_Handler+0x4>

08001e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e28:	f000 f8d6 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e38:	4b03      	ldr	r3, [pc, #12]	@ (8001e48 <DMA1_Channel1_IRQHandler+0x14>)
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f001 fa46 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	200000f0 	.word	0x200000f0

08001e4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001e52:	0018      	movs	r0, r3
 8001e54:	f001 fa3a 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001e58:	46c0      	nop			@ (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	20000330 	.word	0x20000330

08001e64 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <I2C1_IRQHandler+0x2c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	23e0      	movs	r3, #224	@ 0xe0
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	d004      	beq.n	8001e80 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <I2C1_IRQHandler+0x2c>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fdc5 	bl	8003a08 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001e7e:	e003      	b.n	8001e88 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <I2C1_IRQHandler+0x2c>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f001 fda6 	bl	80039d4 <HAL_I2C_EV_IRQHandler>
}
 8001e88:	46c0      	nop			@ (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	2000014c 	.word	0x2000014c

08001e94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <USART1_IRQHandler+0x14>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f004 f9ba 	bl	8006214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea0:	46c0      	nop			@ (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	2000029c 	.word	0x2000029c

08001eac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <SystemInit+0x14>)
 8001eb2:	2280      	movs	r2, #128	@ 0x80
 8001eb4:	0512      	lsls	r2, r2, #20
 8001eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ec4:	480d      	ldr	r0, [pc, #52]	@ (8001efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ec6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ec8:	f7ff fff0 	bl	8001eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ecc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ece:	e003      	b.n	8001ed8 <LoopCopyDataInit>

08001ed0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001ed2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ed4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ed6:	3104      	adds	r1, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ed8:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <LoopForever+0xa>)
  ldr r3, =_edata
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <LoopForever+0xe>)
  adds r2, r0, r1
 8001edc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ede:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ee0:	d3f6      	bcc.n	8001ed0 <CopyDataInit>
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <LoopForever+0x12>)
  b LoopFillZerobss
 8001ee4:	e002      	b.n	8001eec <LoopFillZerobss>

08001ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  str  r3, [r2]
 8001ee8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eea:	3204      	adds	r2, #4

08001eec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <LoopForever+0x16>)
  cmp r2, r3
 8001eee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ef0:	d3f9      	bcc.n	8001ee6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001ef2:	f005 fd71 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ef6:	f7fe fadf 	bl	80004b8 <main>

08001efa <LoopForever>:

LoopForever:
    b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   r0, =_estack
 8001efc:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001f00:	08007d58 	.word	0x08007d58
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f08:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001f0c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001f10:	200006f8 	.word	0x200006f8

08001f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_IRQHandler>

08001f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	1dfb      	adds	r3, r7, #7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f22:	2003      	movs	r0, #3
 8001f24:	f000 f80e 	bl	8001f44 <HAL_InitTick>
 8001f28:	1e03      	subs	r3, r0, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e001      	b.n	8001f38 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f34:	f7ff fc46 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	781b      	ldrb	r3, [r3, #0]
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_InitTick+0x88>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d02b      	beq.n	8001fb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <HAL_InitTick+0x8c>)
 8001f5e:	681c      	ldr	r4, [r3, #0]
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <HAL_InitTick+0x88>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	0019      	movs	r1, r3
 8001f66:	23fa      	movs	r3, #250	@ 0xfa
 8001f68:	0098      	lsls	r0, r3, #2
 8001f6a:	f7fe f8cd 	bl	8000108 <__udivsi3>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	0019      	movs	r1, r3
 8001f72:	0020      	movs	r0, r4
 8001f74:	f7fe f8c8 	bl	8000108 <__udivsi3>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 ffab 	bl	8002ed6 <HAL_SYSTICK_Config>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d112      	bne.n	8001faa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d80a      	bhi.n	8001fa0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	425b      	negs	r3, r3
 8001f90:	2200      	movs	r2, #0
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 ff7a 	bl	8002e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_InitTick+0x90>)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e00d      	b.n	8001fbc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e008      	b.n	8001fbc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e003      	b.n	8001fbc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b005      	add	sp, #20
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	2000006c 	.word	0x2000006c
 8001fd0:	20000064 	.word	0x20000064
 8001fd4:	20000068 	.word	0x20000068

08001fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_IncTick+0x1c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	18d2      	adds	r2, r2, r3
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	2000006c 	.word	0x2000006c
 8001ff8:	200006f4 	.word	0x200006f4

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b02      	ldr	r3, [pc, #8]	@ (800200c <HAL_GetTick+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	200006f4 	.word	0x200006f4

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff fff0 	bl	8001ffc <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3301      	adds	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	001a      	movs	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	189b      	adds	r3, r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	f7ff ffe0 	bl	8001ffc <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b004      	add	sp, #16
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	2000006c 	.word	0x2000006c

08002058 <LL_ADC_SetCommonPathInternalCh>:
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002068:	401a      	ands	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b002      	add	sp, #8
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	ff3fffff 	.word	0xff3fffff

08002080 <LL_ADC_GetCommonPathInternalCh>:
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	23c0      	movs	r3, #192	@ 0xc0
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	4013      	ands	r3, r2
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}

0800209a <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	2104      	movs	r1, #4
 80020ae:	400a      	ands	r2, r1
 80020b0:	2107      	movs	r1, #7
 80020b2:	4091      	lsls	r1, r2
 80020b4:	000a      	movs	r2, r1
 80020b6:	43d2      	mvns	r2, r2
 80020b8:	401a      	ands	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2104      	movs	r1, #4
 80020be:	400b      	ands	r3, r1
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4099      	lsls	r1, r3
 80020c4:	000b      	movs	r3, r1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	615a      	str	r2, [r3, #20]
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	2104      	movs	r1, #4
 80020e6:	400a      	ands	r2, r1
 80020e8:	2107      	movs	r1, #7
 80020ea:	4091      	lsls	r1, r2
 80020ec:	000a      	movs	r2, r1
 80020ee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2104      	movs	r1, #4
 80020f4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020f6:	40da      	lsrs	r2, r3
 80020f8:	0013      	movs	r3, r2
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}

08002102 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	23c0      	movs	r3, #192	@ 0xc0
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4013      	ands	r3, r2
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <LL_ADC_REG_SetSequencerRanks>:
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	211f      	movs	r1, #31
 8002138:	400a      	ands	r2, r1
 800213a:	210f      	movs	r1, #15
 800213c:	4091      	lsls	r1, r2
 800213e:	000a      	movs	r2, r1
 8002140:	43d2      	mvns	r2, r2
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	210f      	movs	r1, #15
 800214a:	4019      	ands	r1, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	201f      	movs	r0, #31
 8002150:	4003      	ands	r3, r0
 8002152:	4099      	lsls	r1, r3
 8002154:	000b      	movs	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bd80      	pop	{r7, pc}

08002164 <LL_ADC_REG_SetSequencerChAdd>:
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	025b      	lsls	r3, r3, #9
 8002176:	0a5b      	lsrs	r3, r3, #9
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}

08002186 <LL_ADC_REG_SetSequencerChRem>:
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	0252      	lsls	r2, r2, #9
 8002198:	0a52      	lsrs	r2, r2, #9
 800219a:	43d2      	mvns	r2, r2
 800219c:	401a      	ands	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b002      	add	sp, #8
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <LL_ADC_SetChannelSamplingTime>:
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	0212      	lsls	r2, r2, #8
 80021c0:	43d2      	mvns	r2, r2
 80021c2:	401a      	ands	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	400b      	ands	r3, r1
 80021cc:	4904      	ldr	r1, [pc, #16]	@ (80021e0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80021ce:	400b      	ands	r3, r1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	615a      	str	r2, [r3, #20]
}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	7fffff00 	.word	0x7fffff00

080021e4 <LL_ADC_EnableInternalRegulator>:
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <LL_ADC_EnableInternalRegulator+0x24>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	2280      	movs	r2, #128	@ 0x80
 80021f6:	0552      	lsls	r2, r2, #21
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b002      	add	sp, #8
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	6fffffe8 	.word	0x6fffffe8

0800220c <LL_ADC_IsInternalRegulatorEnabled>:
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	401a      	ands	r2, r3
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	429a      	cmp	r2, r3
 8002224:	d101      	bne.n	800222a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <LL_ADC_Enable>:
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <LL_ADC_Enable+0x20>)
 8002242:	4013      	ands	r3, r2
 8002244:	2201      	movs	r2, #1
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}
 8002254:	7fffffe8 	.word	0x7fffffe8

08002258 <LL_ADC_Disable>:
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <LL_ADC_Disable+0x20>)
 8002266:	4013      	ands	r3, r2
 8002268:	2202      	movs	r2, #2
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b002      	add	sp, #8
 8002276:	bd80      	pop	{r7, pc}
 8002278:	7fffffe8 	.word	0x7fffffe8

0800227c <LL_ADC_IsEnabled>:
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2201      	movs	r2, #1
 800228a:	4013      	ands	r3, r2
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <LL_ADC_IsEnabled+0x18>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <LL_ADC_IsEnabled+0x1a>
 8002294:	2300      	movs	r3, #0
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b002      	add	sp, #8
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <LL_ADC_REG_StartConversion>:
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <LL_ADC_REG_StartConversion+0x20>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	2204      	movs	r2, #4
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	46c0      	nop			@ (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	7fffffe8 	.word	0x7fffffe8

080022c4 <LL_ADC_REG_IsConversionOngoing>:
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2204      	movs	r2, #4
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d101      	bne.n	80022dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f0:	231f      	movs	r3, #31
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e17e      	b.n	800260c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff fa77 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2254      	movs	r2, #84	@ 0x54
 8002328:	2100      	movs	r1, #0
 800232a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff ff6b 	bl	800220c <LL_ADC_IsInternalRegulatorEnabled>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d114      	bne.n	8002364 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0018      	movs	r0, r3
 8002340:	f7ff ff50 	bl	80021e4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002344:	4bb3      	ldr	r3, [pc, #716]	@ (8002614 <HAL_ADC_Init+0x32c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	49b3      	ldr	r1, [pc, #716]	@ (8002618 <HAL_ADC_Init+0x330>)
 800234a:	0018      	movs	r0, r3
 800234c:	f7fd fedc 	bl	8000108 <__udivsi3>
 8002350:	0003      	movs	r3, r0
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002356:	e002      	b.n	800235e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3b01      	subs	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff ff4f 	bl	800220c <LL_ADC_IsInternalRegulatorEnabled>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d10f      	bne.n	8002392 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	2210      	movs	r2, #16
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2201      	movs	r2, #1
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800238a:	231f      	movs	r3, #31
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0018      	movs	r0, r3
 8002398:	f7ff ff94 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 800239c:	0003      	movs	r3, r0
 800239e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	2210      	movs	r2, #16
 80023a6:	4013      	ands	r3, r2
 80023a8:	d000      	beq.n	80023ac <HAL_ADC_Init+0xc4>
 80023aa:	e122      	b.n	80025f2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d000      	beq.n	80023b4 <HAL_ADC_Init+0xcc>
 80023b2:	e11e      	b.n	80025f2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b8:	4a98      	ldr	r2, [pc, #608]	@ (800261c <HAL_ADC_Init+0x334>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	2202      	movs	r2, #2
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff ff57 	bl	800227c <LL_ADC_IsEnabled>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d000      	beq.n	80023d4 <HAL_ADC_Init+0xec>
 80023d2:	e0ad      	b.n	8002530 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
 80023dc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80023de:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7e5b      	ldrb	r3, [r3, #25]
 80023e4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80023e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7e9b      	ldrb	r3, [r3, #26]
 80023ec:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80023ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_ADC_Init+0x116>
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	015b      	lsls	r3, r3, #5
 80023fc:	e000      	b.n	8002400 <HAL_ADC_Init+0x118>
 80023fe:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002400:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002406:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da04      	bge.n	800241a <HAL_ADC_Init+0x132>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	e001      	b.n	800241e <HAL_ADC_Init+0x136>
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800241e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	212c      	movs	r1, #44	@ 0x2c
 8002424:	5c5b      	ldrb	r3, [r3, r1]
 8002426:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002428:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d115      	bne.n	8002466 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e9b      	ldrb	r3, [r3, #26]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2280      	movs	r2, #128	@ 0x80
 8002446:	0252      	lsls	r2, r2, #9
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	e00b      	b.n	8002466 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	2220      	movs	r2, #32
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	2201      	movs	r2, #1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002472:	23e0      	movs	r3, #224	@ 0xe0
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800247c:	4313      	orrs	r3, r2
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4a65      	ldr	r2, [pc, #404]	@ (8002620 <HAL_ADC_Init+0x338>)
 800248c:	4013      	ands	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	430a      	orrs	r2, r1
 8002498:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	0f9b      	lsrs	r3, r3, #30
 80024a0:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024a6:	4313      	orrs	r3, r2
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	223c      	movs	r2, #60	@ 0x3c
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d111      	bne.n	80024dc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0f9b      	lsrs	r3, r3, #30
 80024be:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80024c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80024ca:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80024d0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	2201      	movs	r2, #1
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	4a50      	ldr	r2, [pc, #320]	@ (8002624 <HAL_ADC_Init+0x33c>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	23c0      	movs	r3, #192	@ 0xc0
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d018      	beq.n	8002530 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	05db      	lsls	r3, r3, #23
 8002506:	429a      	cmp	r2, r3
 8002508:	d012      	beq.n	8002530 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800250e:	2380      	movs	r3, #128	@ 0x80
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	429a      	cmp	r2, r3
 8002514:	d00c      	beq.n	8002530 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002516:	4b44      	ldr	r3, [pc, #272]	@ (8002628 <HAL_ADC_Init+0x340>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a44      	ldr	r2, [pc, #272]	@ (800262c <HAL_ADC_Init+0x344>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	23f0      	movs	r3, #240	@ 0xf0
 8002526:	039b      	lsls	r3, r3, #14
 8002528:	401a      	ands	r2, r3
 800252a:	4b3f      	ldr	r3, [pc, #252]	@ (8002628 <HAL_ADC_Init+0x340>)
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002538:	001a      	movs	r2, r3
 800253a:	2100      	movs	r1, #0
 800253c:	f7ff fdad 	bl	800209a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	4939      	ldr	r1, [pc, #228]	@ (8002630 <HAL_ADC_Init+0x348>)
 800254a:	001a      	movs	r2, r3
 800254c:	f7ff fda5 	bl	800209a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2110      	movs	r1, #16
 8002564:	4249      	negs	r1, r1
 8002566:	430a      	orrs	r2, r1
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
 800256a:	e018      	b.n	800259e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	039b      	lsls	r3, r3, #14
 8002574:	429a      	cmp	r2, r3
 8002576:	d112      	bne.n	800259e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	3b01      	subs	r3, #1
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	221c      	movs	r2, #28
 8002588:	4013      	ands	r3, r2
 800258a:	2210      	movs	r2, #16
 800258c:	4252      	negs	r2, r2
 800258e:	409a      	lsls	r2, r3
 8002590:	0011      	movs	r1, r2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2100      	movs	r1, #0
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff fd95 	bl	80020d4 <LL_ADC_GetSamplingTimeCommonChannels>
 80025aa:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d10b      	bne.n	80025cc <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	2203      	movs	r2, #3
 80025c0:	4393      	bics	r3, r2
 80025c2:	2201      	movs	r2, #1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025ca:	e01c      	b.n	8002606 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	2212      	movs	r2, #18
 80025d2:	4393      	bics	r3, r2
 80025d4:	2210      	movs	r2, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e0:	2201      	movs	r2, #1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80025e8:	231f      	movs	r3, #31
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80025f0:	e009      	b.n	8002606 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	2210      	movs	r2, #16
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025fe:	231f      	movs	r3, #31
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002606:	231f      	movs	r3, #31
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b008      	add	sp, #32
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000064 	.word	0x20000064
 8002618:	00030d40 	.word	0x00030d40
 800261c:	fffffefd 	.word	0xfffffefd
 8002620:	ffde0201 	.word	0xffde0201
 8002624:	1ffffc02 	.word	0x1ffffc02
 8002628:	40012708 	.word	0x40012708
 800262c:	ffc3ffff 	.word	0xffc3ffff
 8002630:	7fffff04 	.word	0x7fffff04

08002634 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff fe3d 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 800264a:	1e03      	subs	r3, r0, #0
 800264c:	d16c      	bne.n	8002728 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2254      	movs	r2, #84	@ 0x54
 8002652:	5c9b      	ldrb	r3, [r3, r2]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_ADC_Start_DMA+0x28>
 8002658:	2302      	movs	r3, #2
 800265a:	e06c      	b.n	8002736 <HAL_ADC_Start_DMA+0x102>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2254      	movs	r2, #84	@ 0x54
 8002660:	2101      	movs	r1, #1
 8002662:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d113      	bne.n	8002698 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff fe01 	bl	800227c <LL_ADC_IsEnabled>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d004      	beq.n	8002688 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff fde8 	bl	8002258 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2101      	movs	r1, #1
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002698:	2517      	movs	r5, #23
 800269a:	197c      	adds	r4, r7, r5
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 fa3c 	bl	8002b1c <ADC_Enable>
 80026a4:	0003      	movs	r3, r0
 80026a6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a8:	002c      	movs	r4, r5
 80026aa:	193b      	adds	r3, r7, r4
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d13e      	bne.n	8002730 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	4a22      	ldr	r2, [pc, #136]	@ (8002740 <HAL_ADC_Start_DMA+0x10c>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	2280      	movs	r2, #128	@ 0x80
 80026bc:	0052      	lsls	r2, r2, #1
 80026be:	431a      	orrs	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <HAL_ADC_Start_DMA+0x110>)
 80026d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <HAL_ADC_Start_DMA+0x114>)
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026de:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <HAL_ADC_Start_DMA+0x118>)
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	221c      	movs	r2, #28
 80026e8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2254      	movs	r2, #84	@ 0x54
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2110      	movs	r1, #16
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3340      	adds	r3, #64	@ 0x40
 800270c:	0019      	movs	r1, r3
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	193c      	adds	r4, r7, r4
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f000 fc76 	bl	8003004 <HAL_DMA_Start_IT>
 8002718:	0003      	movs	r3, r0
 800271a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff fdbd 	bl	80022a0 <LL_ADC_REG_StartConversion>
 8002726:	e003      	b.n	8002730 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002728:	2317      	movs	r3, #23
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2202      	movs	r2, #2
 800272e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002730:	2317      	movs	r3, #23
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b006      	add	sp, #24
 800273c:	bdb0      	pop	{r4, r5, r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	fffff0fe 	.word	0xfffff0fe
 8002744:	08002c19 	.word	0x08002c19
 8002748:	08002ce1 	.word	0x08002ce1
 800274c:	08002cff 	.word	0x08002cff

08002750 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277a:	2317      	movs	r3, #23
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2254      	movs	r2, #84	@ 0x54
 800278a:	5c9b      	ldrb	r3, [r3, r2]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x24>
 8002790:	2302      	movs	r3, #2
 8002792:	e1be      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x3a2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2254      	movs	r2, #84	@ 0x54
 8002798:	2101      	movs	r1, #1
 800279a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7ff fd8f 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d000      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x3c>
 80027aa:	e1a1      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d100      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x46>
 80027b4:	e152      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	429a      	cmp	r2, r3
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027c6:	4ac2      	ldr	r2, [pc, #776]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x360>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d108      	bne.n	80027de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0019      	movs	r1, r3
 80027d6:	0010      	movs	r0, r2
 80027d8:	f7ff fcc4 	bl	8002164 <LL_ADC_REG_SetSequencerChAdd>
 80027dc:	e0ed      	b.n	80029ba <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	211f      	movs	r1, #31
 80027e8:	400b      	ands	r3, r1
 80027ea:	210f      	movs	r1, #15
 80027ec:	4099      	lsls	r1, r3
 80027ee:	000b      	movs	r3, r1
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	0a5b      	lsrs	r3, r3, #9
 80027fe:	d105      	bne.n	800280c <HAL_ADC_ConfigChannel+0x9c>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	221f      	movs	r2, #31
 8002808:	4013      	ands	r3, r2
 800280a:	e0bc      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	d000      	beq.n	8002818 <HAL_ADC_ConfigChannel+0xa8>
 8002816:	e0b5      	b.n	8002984 <HAL_ADC_ConfigChannel+0x214>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2202      	movs	r2, #2
 800281e:	4013      	ands	r3, r2
 8002820:	d000      	beq.n	8002824 <HAL_ADC_ConfigChannel+0xb4>
 8002822:	e0ad      	b.n	8002980 <HAL_ADC_ConfigChannel+0x210>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2204      	movs	r2, #4
 800282a:	4013      	ands	r3, r2
 800282c:	d000      	beq.n	8002830 <HAL_ADC_ConfigChannel+0xc0>
 800282e:	e0a5      	b.n	800297c <HAL_ADC_ConfigChannel+0x20c>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2208      	movs	r2, #8
 8002836:	4013      	ands	r3, r2
 8002838:	d000      	beq.n	800283c <HAL_ADC_ConfigChannel+0xcc>
 800283a:	e09d      	b.n	8002978 <HAL_ADC_ConfigChannel+0x208>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	4013      	ands	r3, r2
 8002844:	d000      	beq.n	8002848 <HAL_ADC_ConfigChannel+0xd8>
 8002846:	e095      	b.n	8002974 <HAL_ADC_ConfigChannel+0x204>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2220      	movs	r2, #32
 800284e:	4013      	ands	r3, r2
 8002850:	d000      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xe4>
 8002852:	e08d      	b.n	8002970 <HAL_ADC_ConfigChannel+0x200>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	4013      	ands	r3, r2
 800285c:	d000      	beq.n	8002860 <HAL_ADC_ConfigChannel+0xf0>
 800285e:	e085      	b.n	800296c <HAL_ADC_ConfigChannel+0x1fc>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	4013      	ands	r3, r2
 8002868:	d000      	beq.n	800286c <HAL_ADC_ConfigChannel+0xfc>
 800286a:	e07d      	b.n	8002968 <HAL_ADC_ConfigChannel+0x1f8>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4013      	ands	r3, r2
 8002876:	d000      	beq.n	800287a <HAL_ADC_ConfigChannel+0x10a>
 8002878:	e074      	b.n	8002964 <HAL_ADC_ConfigChannel+0x1f4>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4013      	ands	r3, r2
 8002884:	d000      	beq.n	8002888 <HAL_ADC_ConfigChannel+0x118>
 8002886:	e06b      	b.n	8002960 <HAL_ADC_ConfigChannel+0x1f0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4013      	ands	r3, r2
 8002892:	d000      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x126>
 8002894:	e062      	b.n	800295c <HAL_ADC_ConfigChannel+0x1ec>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4013      	ands	r3, r2
 80028a0:	d000      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x134>
 80028a2:	e059      	b.n	8002958 <HAL_ADC_ConfigChannel+0x1e8>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	4013      	ands	r3, r2
 80028ae:	d151      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1e4>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	019b      	lsls	r3, r3, #6
 80028b8:	4013      	ands	r3, r2
 80028ba:	d149      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1e0>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	01db      	lsls	r3, r3, #7
 80028c4:	4013      	ands	r3, r2
 80028c6:	d141      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1dc>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4013      	ands	r3, r2
 80028d2:	d139      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1d8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	4013      	ands	r3, r2
 80028de:	d131      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1d4>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	029b      	lsls	r3, r3, #10
 80028e8:	4013      	ands	r3, r2
 80028ea:	d129      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x1d0>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	02db      	lsls	r3, r3, #11
 80028f4:	4013      	ands	r3, r2
 80028f6:	d121      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1cc>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	031b      	lsls	r3, r3, #12
 8002900:	4013      	ands	r3, r2
 8002902:	d119      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x1c8>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	035b      	lsls	r3, r3, #13
 800290c:	4013      	ands	r3, r2
 800290e:	d111      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x1c4>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	039b      	lsls	r3, r3, #14
 8002918:	4013      	ands	r3, r2
 800291a:	d109      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1c0>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	03db      	lsls	r3, r3, #15
 8002924:	4013      	ands	r3, r2
 8002926:	d001      	beq.n	800292c <HAL_ADC_ConfigChannel+0x1bc>
 8002928:	2316      	movs	r3, #22
 800292a:	e02c      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 800292c:	2300      	movs	r3, #0
 800292e:	e02a      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002930:	2315      	movs	r3, #21
 8002932:	e028      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002934:	2314      	movs	r3, #20
 8002936:	e026      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002938:	2313      	movs	r3, #19
 800293a:	e024      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 800293c:	2312      	movs	r3, #18
 800293e:	e022      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002940:	2311      	movs	r3, #17
 8002942:	e020      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002944:	2310      	movs	r3, #16
 8002946:	e01e      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002948:	230f      	movs	r3, #15
 800294a:	e01c      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 800294c:	230e      	movs	r3, #14
 800294e:	e01a      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002950:	230d      	movs	r3, #13
 8002952:	e018      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002954:	230c      	movs	r3, #12
 8002956:	e016      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002958:	230b      	movs	r3, #11
 800295a:	e014      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 800295c:	230a      	movs	r3, #10
 800295e:	e012      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002960:	2309      	movs	r3, #9
 8002962:	e010      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002964:	2308      	movs	r3, #8
 8002966:	e00e      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002968:	2307      	movs	r3, #7
 800296a:	e00c      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 800296c:	2306      	movs	r3, #6
 800296e:	e00a      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002970:	2305      	movs	r3, #5
 8002972:	e008      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002974:	2304      	movs	r3, #4
 8002976:	e006      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002978:	2303      	movs	r3, #3
 800297a:	e004      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 800297c:	2302      	movs	r3, #2
 800297e:	e002      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_ADC_ConfigChannel+0x216>
 8002984:	2300      	movs	r3, #0
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	6852      	ldr	r2, [r2, #4]
 800298a:	201f      	movs	r0, #31
 800298c:	4002      	ands	r2, r0
 800298e:	4093      	lsls	r3, r2
 8002990:	000a      	movs	r2, r1
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d808      	bhi.n	80029ba <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	001a      	movs	r2, r3
 80029b6:	f7ff fbb5 	bl	8002124 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	001a      	movs	r2, r3
 80029c8:	f7ff fbf0 	bl	80021ac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db00      	blt.n	80029d6 <HAL_ADC_ConfigChannel+0x266>
 80029d4:	e096      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x364>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fb51 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 80029de:	0003      	movs	r3, r0
 80029e0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x368>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d123      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029f4:	d11e      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2280      	movs	r2, #128	@ 0x80
 80029fa:	0412      	lsls	r2, r2, #16
 80029fc:	4313      	orrs	r3, r2
 80029fe:	4a35      	ldr	r2, [pc, #212]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x364>)
 8002a00:	0019      	movs	r1, r3
 8002a02:	0010      	movs	r0, r2
 8002a04:	f7ff fb28 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002a08:	4b34      	ldr	r3, [pc, #208]	@ (8002adc <HAL_ADC_ConfigChannel+0x36c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4934      	ldr	r1, [pc, #208]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x370>)
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7fd fb7a 	bl	8000108 <__udivsi3>
 8002a14:	0003      	movs	r3, r0
 8002a16:	001a      	movs	r2, r3
 8002a18:	0013      	movs	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	189b      	adds	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	3301      	adds	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a32:	e067      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x374>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d162      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	2380      	movs	r3, #128	@ 0x80
 8002a42:	03db      	lsls	r3, r3, #15
 8002a44:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a46:	d15d      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2280      	movs	r2, #128	@ 0x80
 8002a4c:	03d2      	lsls	r2, r2, #15
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	4a20      	ldr	r2, [pc, #128]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x364>)
 8002a52:	0019      	movs	r1, r3
 8002a54:	0010      	movs	r0, r2
 8002a56:	f7ff faff 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002a5a:	e053      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x360>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d107      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	0010      	movs	r0, r2
 8002a7e:	f7ff fb82 	bl	8002186 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da3c      	bge.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x364>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff faf7 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002a92:	0003      	movs	r3, r0
 8002a94:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x368>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d108      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4a11      	ldr	r2, [pc, #68]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x378>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x364>)
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	0010      	movs	r0, r2
 8002aac:	f7ff fad4 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002ab0:	e028      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x374>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d123      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4a0b      	ldr	r2, [pc, #44]	@ (8002aec <HAL_ADC_ConfigChannel+0x37c>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x364>)
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	f7ff fac6 	bl	8002058 <LL_ADC_SetCommonPathInternalCh>
 8002acc:	e01a      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x394>
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	80000004 	.word	0x80000004
 8002ad4:	40012708 	.word	0x40012708
 8002ad8:	a4000200 	.word	0xa4000200
 8002adc:	20000064 	.word	0x20000064
 8002ae0:	00030d40 	.word	0x00030d40
 8002ae4:	a8000400 	.word	0xa8000400
 8002ae8:	ff7fffff 	.word	0xff7fffff
 8002aec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	2220      	movs	r2, #32
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002afc:	2317      	movs	r3, #23
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2254      	movs	r2, #84	@ 0x54
 8002b08:	2100      	movs	r1, #0
 8002b0a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	2317      	movs	r3, #23
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b006      	add	sp, #24
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)

08002b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fba5 	bl	800227c <LL_ADC_IsEnabled>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d162      	bne.n	8002bfc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a32      	ldr	r2, [pc, #200]	@ (8002c08 <ADC_Enable+0xec>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	2210      	movs	r2, #16
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b52:	2201      	movs	r2, #1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e04f      	b.n	8002bfe <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7ff fb66 	bl	8002234 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002b68:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <ADC_Enable+0xf0>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7ff fa88 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002b70:	0002      	movs	r2, r0
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	4013      	ands	r3, r2
 8002b78:	d00f      	beq.n	8002b9a <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7a:	4b25      	ldr	r3, [pc, #148]	@ (8002c10 <ADC_Enable+0xf4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4925      	ldr	r1, [pc, #148]	@ (8002c14 <ADC_Enable+0xf8>)
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7fd fac1 	bl	8000108 <__udivsi3>
 8002b86:	0003      	movs	r3, r0
 8002b88:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002b8a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b8c:	e002      	b.n	8002b94 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f9      	bne.n	8002b8e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7e5b      	ldrb	r3, [r3, #25]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d02c      	beq.n	8002bfc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ba2:	f7ff fa2b 	bl	8001ffc <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002baa:	e020      	b.n	8002bee <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff fb63 	bl	800227c <LL_ADC_IsEnabled>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d104      	bne.n	8002bc4 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff fb38 	bl	8002234 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc4:	f7ff fa1a 	bl	8001ffc <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d90d      	bls.n	8002bee <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	2210      	movs	r2, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	2201      	movs	r2, #1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e007      	b.n	8002bfe <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d1d7      	bne.n	8002bac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b004      	add	sp, #16
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	80000017 	.word	0x80000017
 8002c0c:	40012708 	.word	0x40012708
 8002c10:	20000064 	.word	0x20000064
 8002c14:	00030d40 	.word	0x00030d40

08002c18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	2250      	movs	r2, #80	@ 0x50
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d141      	bne.n	8002cb4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	2280      	movs	r2, #128	@ 0x80
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff fa5d 	bl	8002102 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c48:	1e03      	subs	r3, r0, #0
 8002c4a:	d02e      	beq.n	8002caa <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	7e9b      	ldrb	r3, [r3, #26]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d12a      	bne.n	8002caa <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d123      	bne.n	8002caa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff fb2c 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d110      	bne.n	8002c92 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	210c      	movs	r1, #12
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	4a15      	ldr	r2, [pc, #84]	@ (8002cdc <ADC_DMAConvCplt+0xc4>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	2201      	movs	r2, #1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c90:	e00b      	b.n	8002caa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c96:	2220      	movs	r2, #32
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fd fbf1 	bl	8000494 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cb2:	e00f      	b.n	8002cd4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	2210      	movs	r2, #16
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff fd4d 	bl	8002760 <HAL_ADC_ErrorCallback>
}
 8002cc6:	e005      	b.n	8002cd4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	4798      	blx	r3
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	fffffefe 	.word	0xfffffefe

08002ce0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff fd2d 	bl	8002750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff fd1a 	bl	8002760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b004      	add	sp, #16
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	1dfb      	adds	r3, r7, #7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d46:	d809      	bhi.n	8002d5c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d48:	1dfb      	adds	r3, r7, #7
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	231f      	movs	r3, #31
 8002d50:	401a      	ands	r2, r3
 8002d52:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <__NVIC_EnableIRQ+0x30>)
 8002d54:	2101      	movs	r1, #1
 8002d56:	4091      	lsls	r1, r2
 8002d58:	000a      	movs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	0002      	movs	r2, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	1dfb      	adds	r3, r7, #7
 8002d74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d7c:	d828      	bhi.n	8002dd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e3c <__NVIC_SetPriority+0xd4>)
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	33c0      	adds	r3, #192	@ 0xc0
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	589b      	ldr	r3, [r3, r2]
 8002d8e:	1dfa      	adds	r2, r7, #7
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	0011      	movs	r1, r2
 8002d94:	2203      	movs	r2, #3
 8002d96:	400a      	ands	r2, r1
 8002d98:	00d2      	lsls	r2, r2, #3
 8002d9a:	21ff      	movs	r1, #255	@ 0xff
 8002d9c:	4091      	lsls	r1, r2
 8002d9e:	000a      	movs	r2, r1
 8002da0:	43d2      	mvns	r2, r2
 8002da2:	401a      	ands	r2, r3
 8002da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	22ff      	movs	r2, #255	@ 0xff
 8002dac:	401a      	ands	r2, r3
 8002dae:	1dfb      	adds	r3, r7, #7
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	0018      	movs	r0, r3
 8002db4:	2303      	movs	r3, #3
 8002db6:	4003      	ands	r3, r0
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbc:	481f      	ldr	r0, [pc, #124]	@ (8002e3c <__NVIC_SetPriority+0xd4>)
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	33c0      	adds	r3, #192	@ 0xc0
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dce:	e031      	b.n	8002e34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e40 <__NVIC_SetPriority+0xd8>)
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	230f      	movs	r3, #15
 8002dda:	400b      	ands	r3, r1
 8002ddc:	3b08      	subs	r3, #8
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	3306      	adds	r3, #6
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	18d3      	adds	r3, r2, r3
 8002de6:	3304      	adds	r3, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1dfa      	adds	r2, r7, #7
 8002dec:	7812      	ldrb	r2, [r2, #0]
 8002dee:	0011      	movs	r1, r2
 8002df0:	2203      	movs	r2, #3
 8002df2:	400a      	ands	r2, r1
 8002df4:	00d2      	lsls	r2, r2, #3
 8002df6:	21ff      	movs	r1, #255	@ 0xff
 8002df8:	4091      	lsls	r1, r2
 8002dfa:	000a      	movs	r2, r1
 8002dfc:	43d2      	mvns	r2, r2
 8002dfe:	401a      	ands	r2, r3
 8002e00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	22ff      	movs	r2, #255	@ 0xff
 8002e08:	401a      	ands	r2, r3
 8002e0a:	1dfb      	adds	r3, r7, #7
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	2303      	movs	r3, #3
 8002e12:	4003      	ands	r3, r0
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e18:	4809      	ldr	r0, [pc, #36]	@ (8002e40 <__NVIC_SetPriority+0xd8>)
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	001c      	movs	r4, r3
 8002e20:	230f      	movs	r3, #15
 8002e22:	4023      	ands	r3, r4
 8002e24:	3b08      	subs	r3, #8
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	3306      	adds	r3, #6
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	18c3      	adds	r3, r0, r3
 8002e30:	3304      	adds	r3, #4
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	46c0      	nop			@ (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b003      	add	sp, #12
 8002e3a:	bd90      	pop	{r4, r7, pc}
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1e5a      	subs	r2, r3, #1
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	045b      	lsls	r3, r3, #17
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d301      	bcc.n	8002e5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e010      	b.n	8002e7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <SysTick_Config+0x44>)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	3a01      	subs	r2, #1
 8002e62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e64:	2301      	movs	r3, #1
 8002e66:	425b      	negs	r3, r3
 8002e68:	2103      	movs	r1, #3
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7ff ff7c 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <SysTick_Config+0x44>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e76:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <SysTick_Config+0x44>)
 8002e78:	2207      	movs	r2, #7
 8002e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b002      	add	sp, #8
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	e000e010 	.word	0xe000e010

08002e8c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	210f      	movs	r1, #15
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	1c02      	adds	r2, r0, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	0011      	movs	r1, r2
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7ff ff5d 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec2:	1dfb      	adds	r3, r7, #7
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff ff33 	bl	8002d34 <__NVIC_EnableIRQ>
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b002      	add	sp, #8
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff ffaf 	bl	8002e44 <SysTick_Config>
 8002ee6:	0003      	movs	r3, r0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e077      	b.n	8002ff2 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3d      	ldr	r2, [pc, #244]	@ (8002ffc <HAL_DMA_Init+0x10c>)
 8002f08:	4694      	mov	ip, r2
 8002f0a:	4463      	add	r3, ip
 8002f0c:	2114      	movs	r1, #20
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fd f8fa 	bl	8000108 <__udivsi3>
 8002f14:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002f16:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2225      	movs	r2, #37	@ 0x25
 8002f20:	2102      	movs	r1, #2
 8002f22:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4934      	ldr	r1, [pc, #208]	@ (8003000 <HAL_DMA_Init+0x110>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 faab 	bl	80034c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	01db      	lsls	r3, r3, #7
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d102      	bne.n	8002f84 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	21ff      	movs	r1, #255	@ 0xff
 8002f8e:	400a      	ands	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <HAL_DMA_Init+0xd8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d80d      	bhi.n	8002fc8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fab6 	bl	8003520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	e008      	b.n	8002fda <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2225      	movs	r2, #37	@ 0x25
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	@ 0x24
 8002fec:	2100      	movs	r1, #0
 8002fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	bffdfff8 	.word	0xbffdfff8
 8003000:	ffff800f 	.word	0xffff800f

08003004 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2317      	movs	r3, #23
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2224      	movs	r2, #36	@ 0x24
 800301e:	5c9b      	ldrb	r3, [r3, r2]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_DMA_Start_IT+0x24>
 8003024:	2302      	movs	r3, #2
 8003026:	e070      	b.n	800310a <HAL_DMA_Start_IT+0x106>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	2101      	movs	r1, #1
 800302e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2225      	movs	r2, #37	@ 0x25
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d157      	bne.n	80030ec <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2225      	movs	r2, #37	@ 0x25
 8003040:	2102      	movs	r1, #2
 8003042:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	438a      	bics	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f9f1 	bl	8003448 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	210e      	movs	r1, #14
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e00f      	b.n	80030a0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2104      	movs	r1, #4
 800308c:	438a      	bics	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	210a      	movs	r1, #10
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	025b      	lsls	r3, r3, #9
 80030aa:	4013      	ands	r3, r2
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	0049      	lsls	r1, r1, #1
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d2:	2180      	movs	r1, #128	@ 0x80
 80030d4:	0049      	lsls	r1, r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e007      	b.n	80030fc <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2224      	movs	r2, #36	@ 0x24
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80030f4:	2317      	movs	r3, #23
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2224      	movs	r2, #36	@ 0x24
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

  return status;
 8003104:	2317      	movs	r3, #23
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b006      	add	sp, #24
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e050      	b.n	80031c8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2225      	movs	r2, #37	@ 0x25
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d008      	beq.n	8003144 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2204      	movs	r2, #4
 8003136:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	@ 0x24
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e041      	b.n	80031c8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	210e      	movs	r1, #14
 8003150:	438a      	bics	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	491c      	ldr	r1, [pc, #112]	@ (80031d0 <HAL_DMA_Abort+0xbc>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2101      	movs	r1, #1
 8003170:	438a      	bics	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003174:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <HAL_DMA_Abort+0xc0>)
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	221c      	movs	r2, #28
 800317e:	4013      	ands	r3, r2
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <HAL_DMA_Abort+0xc0>)
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003192:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00c      	beq.n	80031b6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a6:	490a      	ldr	r1, [pc, #40]	@ (80031d0 <HAL_DMA_Abort+0xbc>)
 80031a8:	400a      	ands	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80031b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2225      	movs	r2, #37	@ 0x25
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2224      	movs	r2, #36	@ 0x24
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	fffffeff 	.word	0xfffffeff
 80031d4:	40020000 	.word	0x40020000

080031d8 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	230f      	movs	r3, #15
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	@ 0x24
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	@ 0x24
 80031f4:	5c9b      	ldrb	r3, [r3, r2]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_DMA_Abort_IT+0x26>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e05e      	b.n	80032bc <HAL_DMA_Abort_IT+0xe4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2224      	movs	r2, #36	@ 0x24
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2225      	movs	r2, #37	@ 0x25
 800320a:	5c9b      	ldrb	r3, [r3, r2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d007      	beq.n	8003222 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2204      	movs	r2, #4
 8003216:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003218:	230f      	movs	r3, #15
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e049      	b.n	80032b6 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	210e      	movs	r1, #14
 800322e:	438a      	bics	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2101      	movs	r1, #1
 800323e:	438a      	bics	r2, r1
 8003240:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	491d      	ldr	r1, [pc, #116]	@ (80032c4 <HAL_DMA_Abort_IT+0xec>)
 800324e:	400a      	ands	r2, r1
 8003250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8003252:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <HAL_DMA_Abort_IT+0xf0>)
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	221c      	movs	r2, #28
 800325c:	4013      	ands	r3, r2
 800325e:	2201      	movs	r2, #1
 8003260:	409a      	lsls	r2, r3
 8003262:	4b19      	ldr	r3, [pc, #100]	@ (80032c8 <HAL_DMA_Abort_IT+0xf0>)
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003270:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003284:	490f      	ldr	r1, [pc, #60]	@ (80032c4 <HAL_DMA_Abort_IT+0xec>)
 8003286:	400a      	ands	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003292:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2225      	movs	r2, #37	@ 0x25
 8003298:	2101      	movs	r1, #1
 800329a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	@ 0x24
 80032a0:	2100      	movs	r1, #0
 80032a2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	0010      	movs	r0, r2
 80032b4:	4798      	blx	r3
    }
  }
  return status;
 80032b6:	230f      	movs	r3, #15
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fffffeff 	.word	0xfffffeff
 80032c8:	40020000 	.word	0x40020000

080032cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80032d4:	4b55      	ldr	r3, [pc, #340]	@ (800342c <HAL_DMA_IRQHandler+0x160>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	221c      	movs	r2, #28
 80032e8:	4013      	ands	r3, r2
 80032ea:	2204      	movs	r2, #4
 80032ec:	409a      	lsls	r2, r3
 80032ee:	0013      	movs	r3, r2
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_DMA_IRQHandler+0x7a>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2204      	movs	r2, #4
 80032fa:	4013      	ands	r3, r2
 80032fc:	d023      	beq.n	8003346 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2220      	movs	r2, #32
 8003306:	4013      	ands	r3, r2
 8003308:	d107      	bne.n	800331a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2104      	movs	r1, #4
 8003316:	438a      	bics	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800331a:	4b44      	ldr	r3, [pc, #272]	@ (800342c <HAL_DMA_IRQHandler+0x160>)
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	221c      	movs	r2, #28
 8003324:	4013      	ands	r3, r2
 8003326:	2204      	movs	r2, #4
 8003328:	409a      	lsls	r2, r3
 800332a:	4b40      	ldr	r3, [pc, #256]	@ (800342c <HAL_DMA_IRQHandler+0x160>)
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	2b00      	cmp	r3, #0
 8003336:	d100      	bne.n	800333a <HAL_DMA_IRQHandler+0x6e>
 8003338:	e073      	b.n	8003422 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	0010      	movs	r0, r2
 8003342:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003344:	e06d      	b.n	8003422 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	221c      	movs	r2, #28
 800334c:	4013      	ands	r3, r2
 800334e:	2202      	movs	r2, #2
 8003350:	409a      	lsls	r2, r3
 8003352:	0013      	movs	r3, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4013      	ands	r3, r2
 8003358:	d02e      	beq.n	80033b8 <HAL_DMA_IRQHandler+0xec>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2202      	movs	r2, #2
 800335e:	4013      	ands	r3, r2
 8003360:	d02a      	beq.n	80033b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2220      	movs	r2, #32
 800336a:	4013      	ands	r3, r2
 800336c:	d10b      	bne.n	8003386 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	210a      	movs	r1, #10
 800337a:	438a      	bics	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2225      	movs	r2, #37	@ 0x25
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8003386:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_DMA_IRQHandler+0x160>)
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	221c      	movs	r2, #28
 8003390:	4013      	ands	r3, r2
 8003392:	2202      	movs	r2, #2
 8003394:	409a      	lsls	r2, r3
 8003396:	4b25      	ldr	r3, [pc, #148]	@ (800342c <HAL_DMA_IRQHandler+0x160>)
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	2100      	movs	r1, #0
 80033a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03a      	beq.n	8003422 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	0010      	movs	r0, r2
 80033b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033b6:	e034      	b.n	8003422 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	221c      	movs	r2, #28
 80033be:	4013      	ands	r3, r2
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	0013      	movs	r3, r2
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	d02b      	beq.n	8003424 <HAL_DMA_IRQHandler+0x158>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2208      	movs	r2, #8
 80033d0:	4013      	ands	r3, r2
 80033d2:	d027      	beq.n	8003424 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	210e      	movs	r1, #14
 80033e0:	438a      	bics	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_DMA_IRQHandler+0x160>)
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	221c      	movs	r2, #28
 80033ee:	4013      	ands	r3, r2
 80033f0:	2201      	movs	r2, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <HAL_DMA_IRQHandler+0x160>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2225      	movs	r2, #37	@ 0x25
 8003404:	2101      	movs	r1, #1
 8003406:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	@ 0x24
 800340c:	2100      	movs	r1, #0
 800340e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	0010      	movs	r0, r2
 8003420:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	46c0      	nop			@ (mov r8, r8)
}
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40020000 	.word	0x40020000

08003430 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2225      	movs	r2, #37	@ 0x25
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	b2db      	uxtb	r3, r3
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800345e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d004      	beq.n	8003472 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003470:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003472:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <DMA_SetConfig+0x7c>)
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	221c      	movs	r2, #28
 800347c:	4013      	ands	r3, r2
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <DMA_SetConfig+0x7c>)
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b10      	cmp	r3, #16
 8003496:	d108      	bne.n	80034aa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034a8:	e007      	b.n	80034ba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]
}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	46bd      	mov	sp, r7
 80034be:	b004      	add	sp, #16
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	40020000 	.word	0x40020000

080034c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	001a      	movs	r2, r3
 80034d6:	23ff      	movs	r3, #255	@ 0xff
 80034d8:	4013      	ands	r3, r2
 80034da:	3b08      	subs	r3, #8
 80034dc:	2114      	movs	r1, #20
 80034de:	0018      	movs	r0, r3
 80034e0:	f7fc fe12 	bl	8000108 <__udivsi3>
 80034e4:	0003      	movs	r3, r0
 80034e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80034ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003518 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80034f0:	4694      	mov	ip, r2
 80034f2:	4463      	add	r3, ip
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	001a      	movs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a07      	ldr	r2, [pc, #28]	@ (800351c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003500:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	221c      	movs	r2, #28
 8003506:	4013      	ands	r3, r2
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b004      	add	sp, #16
 8003516:	bd80      	pop	{r7, pc}
 8003518:	10008200 	.word	0x10008200
 800351c:	40020880 	.word	0x40020880

08003520 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	22ff      	movs	r2, #255	@ 0xff
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003536:	4694      	mov	ip, r2
 8003538:	4463      	add	r3, ip
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	001a      	movs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a07      	ldr	r2, [pc, #28]	@ (8003564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3b01      	subs	r3, #1
 800354c:	2203      	movs	r2, #3
 800354e:	4013      	ands	r3, r2
 8003550:	2201      	movs	r2, #1
 8003552:	409a      	lsls	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003558:	46c0      	nop			@ (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}
 8003560:	1000823f 	.word	0x1000823f
 8003564:	40020940 	.word	0x40020940

08003568 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003576:	e153      	b.n	8003820 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2101      	movs	r1, #1
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4091      	lsls	r1, r2
 8003582:	000a      	movs	r2, r1
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d100      	bne.n	8003590 <HAL_GPIO_Init+0x28>
 800358e:	e144      	b.n	800381a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x38>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b12      	cmp	r3, #18
 800359e:	d125      	bne.n	80035ec <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	0092      	lsls	r2, r2, #2
 80035aa:	58d3      	ldr	r3, [r2, r3]
 80035ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2207      	movs	r2, #7
 80035b2:	4013      	ands	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	409a      	lsls	r2, r3
 80035ba:	0013      	movs	r3, r2
 80035bc:	43da      	mvns	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4013      	ands	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	220f      	movs	r2, #15
 80035ca:	401a      	ands	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2107      	movs	r1, #7
 80035d0:	400b      	ands	r3, r1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3208      	adds	r2, #8
 80035e6:	0092      	lsls	r2, r2, #2
 80035e8:	6979      	ldr	r1, [r7, #20]
 80035ea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	409a      	lsls	r2, r3
 80035fa:	0013      	movs	r3, r2
 80035fc:	43da      	mvns	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	4013      	ands	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2203      	movs	r2, #3
 800360a:	401a      	ands	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	409a      	lsls	r2, r3
 8003612:	0013      	movs	r3, r2
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d00b      	beq.n	8003640 <HAL_GPIO_Init+0xd8>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d007      	beq.n	8003640 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003634:	2b11      	cmp	r3, #17
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b12      	cmp	r3, #18
 800363e:	d130      	bne.n	80036a2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	409a      	lsls	r2, r3
 800364e:	0013      	movs	r3, r2
 8003650:	43da      	mvns	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4013      	ands	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	0013      	movs	r3, r2
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003676:	2201      	movs	r2, #1
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	409a      	lsls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	43da      	mvns	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4013      	ands	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	2201      	movs	r2, #1
 800368e:	401a      	ands	r2, r3
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	409a      	lsls	r2, r3
 8003694:	0013      	movs	r3, r2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d017      	beq.n	80036da <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	409a      	lsls	r2, r3
 80036b8:	0013      	movs	r3, r2
 80036ba:	43da      	mvns	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4013      	ands	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	055b      	lsls	r3, r3, #21
 80036e2:	4013      	ands	r3, r2
 80036e4:	d100      	bne.n	80036e8 <HAL_GPIO_Init+0x180>
 80036e6:	e098      	b.n	800381a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80036e8:	4a53      	ldr	r2, [pc, #332]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3318      	adds	r3, #24
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	589b      	ldr	r3, [r3, r2]
 80036f4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2203      	movs	r2, #3
 80036fa:	4013      	ands	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	220f      	movs	r2, #15
 8003700:	409a      	lsls	r2, r3
 8003702:	0013      	movs	r3, r2
 8003704:	43da      	mvns	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	23a0      	movs	r3, #160	@ 0xa0
 8003710:	05db      	lsls	r3, r3, #23
 8003712:	429a      	cmp	r2, r3
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x1e2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a48      	ldr	r2, [pc, #288]	@ (800383c <HAL_GPIO_Init+0x2d4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x1de>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a47      	ldr	r2, [pc, #284]	@ (8003840 <HAL_GPIO_Init+0x2d8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x1da>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a46      	ldr	r2, [pc, #280]	@ (8003844 <HAL_GPIO_Init+0x2dc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x1d6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a45      	ldr	r2, [pc, #276]	@ (8003848 <HAL_GPIO_Init+0x2e0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x1d2>
 8003736:	2305      	movs	r3, #5
 8003738:	e008      	b.n	800374c <HAL_GPIO_Init+0x1e4>
 800373a:	2306      	movs	r3, #6
 800373c:	e006      	b.n	800374c <HAL_GPIO_Init+0x1e4>
 800373e:	2303      	movs	r3, #3
 8003740:	e004      	b.n	800374c <HAL_GPIO_Init+0x1e4>
 8003742:	2302      	movs	r3, #2
 8003744:	e002      	b.n	800374c <HAL_GPIO_Init+0x1e4>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_GPIO_Init+0x1e4>
 800374a:	2300      	movs	r3, #0
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	2103      	movs	r1, #3
 8003750:	400a      	ands	r2, r1
 8003752:	00d2      	lsls	r2, r2, #3
 8003754:	4093      	lsls	r3, r2
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800375c:	4936      	ldr	r1, [pc, #216]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3318      	adds	r3, #24
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800376a:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	58d3      	ldr	r3, [r2, r3]
 8003770:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	43da      	mvns	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	4013      	ands	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	025b      	lsls	r3, r3, #9
 8003784:	4013      	ands	r3, r2
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003790:	4929      	ldr	r1, [pc, #164]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 8003792:	2280      	movs	r2, #128	@ 0x80
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003798:	4a27      	ldr	r2, [pc, #156]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 800379a:	2384      	movs	r3, #132	@ 0x84
 800379c:	58d3      	ldr	r3, [r2, r3]
 800379e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43da      	mvns	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	4013      	ands	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	029b      	lsls	r3, r3, #10
 80037b2:	4013      	ands	r3, r2
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80037be:	491e      	ldr	r1, [pc, #120]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 80037c0:	2284      	movs	r2, #132	@ 0x84
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80037c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	43da      	mvns	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	4013      	ands	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	2380      	movs	r3, #128	@ 0x80
 80037dc:	035b      	lsls	r3, r3, #13
 80037de:	4013      	ands	r3, r2
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80037ea:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80037f0:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	43da      	mvns	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	4013      	ands	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	039b      	lsls	r3, r3, #14
 8003808:	4013      	ands	r3, r2
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003814:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <HAL_GPIO_Init+0x2d0>)
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3301      	adds	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	40da      	lsrs	r2, r3
 8003828:	1e13      	subs	r3, r2, #0
 800382a:	d000      	beq.n	800382e <HAL_GPIO_Init+0x2c6>
 800382c:	e6a4      	b.n	8003578 <HAL_GPIO_Init+0x10>
  }
}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b006      	add	sp, #24
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021800 	.word	0x40021800
 800383c:	50000400 	.word	0x50000400
 8003840:	50000800 	.word	0x50000800
 8003844:	50000c00 	.word	0x50000c00
 8003848:	50001400 	.word	0x50001400

0800384c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	0008      	movs	r0, r1
 8003856:	0011      	movs	r1, r2
 8003858:	1cbb      	adds	r3, r7, #2
 800385a:	1c02      	adds	r2, r0, #0
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	1c7b      	adds	r3, r7, #1
 8003860:	1c0a      	adds	r2, r1, #0
 8003862:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003864:	1c7b      	adds	r3, r7, #1
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800386c:	1cbb      	adds	r3, r7, #2
 800386e:	881a      	ldrh	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003874:	e003      	b.n	800387e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003876:	1cbb      	adds	r3, r7, #2
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b002      	add	sp, #8
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e08f      	b.n	80039ba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2241      	movs	r2, #65	@ 0x41
 800389e:	5c9b      	ldrb	r3, [r3, r2]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	2100      	movs	r1, #0
 80038ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7fe f855 	bl	8001960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2241      	movs	r2, #65	@ 0x41
 80038ba:	2124      	movs	r1, #36	@ 0x24
 80038bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	438a      	bics	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	493b      	ldr	r1, [pc, #236]	@ (80039c4 <HAL_I2C_Init+0x13c>)
 80038d8:	400a      	ands	r2, r1
 80038da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4938      	ldr	r1, [pc, #224]	@ (80039c8 <HAL_I2C_Init+0x140>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d108      	bne.n	8003906 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2180      	movs	r1, #128	@ 0x80
 80038fe:	0209      	lsls	r1, r1, #8
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e007      	b.n	8003916 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2184      	movs	r1, #132	@ 0x84
 8003910:	0209      	lsls	r1, r1, #8
 8003912:	430a      	orrs	r2, r1
 8003914:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d109      	bne.n	8003932 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2180      	movs	r1, #128	@ 0x80
 800392a:	0109      	lsls	r1, r1, #4
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	e007      	b.n	8003942 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4923      	ldr	r1, [pc, #140]	@ (80039cc <HAL_I2C_Init+0x144>)
 800393e:	400a      	ands	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4920      	ldr	r1, [pc, #128]	@ (80039d0 <HAL_I2C_Init+0x148>)
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	491a      	ldr	r1, [pc, #104]	@ (80039c8 <HAL_I2C_Init+0x140>)
 800395e:	400a      	ands	r2, r1
 8003960:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69d9      	ldr	r1, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2101      	movs	r1, #1
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2241      	movs	r2, #65	@ 0x41
 80039a6:	2120      	movs	r1, #32
 80039a8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2242      	movs	r2, #66	@ 0x42
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	f0ffffff 	.word	0xf0ffffff
 80039c8:	ffff7fff 	.word	0xffff7fff
 80039cc:	fffff7ff 	.word	0xfffff7ff
 80039d0:	02008000 	.word	0x02008000

080039d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
  }
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4013      	ands	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2280      	movs	r2, #128	@ 0x80
 8003a2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a30:	d00a      	beq.n	8003a48 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	2201      	movs	r2, #1
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	0052      	lsls	r2, r2, #1
 8003a46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2280      	movs	r2, #128	@ 0x80
 8003a56:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a58:	d00a      	beq.n	8003a70 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	2208      	movs	r2, #8
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2280      	movs	r2, #128	@ 0x80
 8003a6c:	00d2      	lsls	r2, r2, #3
 8003a6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2280      	movs	r2, #128	@ 0x80
 8003a7e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a80:	d00a      	beq.n	8003a98 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a86:	2202      	movs	r2, #2
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	0092      	lsls	r2, r2, #2
 8003a96:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	220b      	movs	r2, #11
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d005      	beq.n	8003ab2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0011      	movs	r1, r2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 fc1d 	bl	80042ec <I2C_ITError>
  }
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b006      	add	sp, #24
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b002      	add	sp, #8
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	0008      	movs	r0, r1
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	1cfb      	adds	r3, r7, #3
 8003ae8:	1c02      	adds	r2, r0, #0
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	003b      	movs	r3, r7
 8003aee:	1c0a      	adds	r2, r1, #0
 8003af0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b002      	add	sp, #8
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b002      	add	sp, #8
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2240      	movs	r2, #64	@ 0x40
 8003b36:	5c9b      	ldrb	r3, [r3, r2]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <I2C_Slave_ISR_IT+0x24>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e0e7      	b.n	8003d10 <I2C_Slave_ISR_IT+0x1f4>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2240      	movs	r2, #64	@ 0x40
 8003b44:	2101      	movs	r1, #1
 8003b46:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00a      	beq.n	8003b66 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b56:	d006      	beq.n	8003b66 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 f9e4 	bl	8003f2c <I2C_ITSlaveCplt>
 8003b64:	e0cf      	b.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d052      	beq.n	8003c14 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2210      	movs	r2, #16
 8003b72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b74:	d04e      	beq.n	8003c14 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d12d      	bne.n	8003bdc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2241      	movs	r2, #65	@ 0x41
 8003b84:	5c9b      	ldrb	r3, [r3, r2]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b28      	cmp	r3, #40	@ 0x28
 8003b8a:	d10b      	bne.n	8003ba4 <I2C_Slave_ISR_IT+0x88>
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	049b      	lsls	r3, r3, #18
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d106      	bne.n	8003ba4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	0011      	movs	r1, r2
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f000 fb4d 	bl	800423c <I2C_ITListenCplt>
 8003ba2:	e036      	b.n	8003c12 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2241      	movs	r2, #65	@ 0x41
 8003ba8:	5c9b      	ldrb	r3, [r3, r2]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b29      	cmp	r3, #41	@ 0x29
 8003bae:	d110      	bne.n	8003bd2 <I2C_Slave_ISR_IT+0xb6>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4a59      	ldr	r2, [pc, #356]	@ (8003d18 <I2C_Slave_ISR_IT+0x1fc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00c      	beq.n	8003bd2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 fcbd 	bl	8004542 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 f94a 	bl	8003e64 <I2C_ITSlaveSeqCplt>
 8003bd0:	e01f      	b.n	8003c12 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003bda:	e091      	b.n	8003d00 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	2204      	movs	r2, #4
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <I2C_Slave_ISR_IT+0xe6>
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	2380      	movs	r3, #128	@ 0x80
 8003bfa:	045b      	lsls	r3, r3, #17
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d000      	beq.n	8003c02 <I2C_Slave_ISR_IT+0xe6>
 8003c00:	e07e      	b.n	8003d00 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	0011      	movs	r1, r2
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f000 fb6e 	bl	80042ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c10:	e076      	b.n	8003d00 <I2C_Slave_ISR_IT+0x1e4>
 8003c12:	e075      	b.n	8003d00 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2204      	movs	r2, #4
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d02f      	beq.n	8003c7c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c22:	d02b      	beq.n	8003c7c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d018      	beq.n	8003c60 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d14c      	bne.n	8003d04 <I2C_Slave_ISR_IT+0x1e8>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d18 <I2C_Slave_ISR_IT+0x1fc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d048      	beq.n	8003d04 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 f8f5 	bl	8003e64 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c7a:	e043      	b.n	8003d04 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2208      	movs	r2, #8
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00a      	beq.n	8003c9a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2208      	movs	r2, #8
 8003c88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c8a:	d006      	beq.n	8003c9a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0011      	movs	r1, r2
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 f842 	bl	8003d1c <I2C_ITAddrCplt>
 8003c98:	e035      	b.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ca8:	d02d      	beq.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d018      	beq.n	8003ce6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ce4:	e00f      	b.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	2380      	movs	r3, #128	@ 0x80
 8003cea:	045b      	lsls	r3, r3, #17
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d002      	beq.n	8003cf6 <I2C_Slave_ISR_IT+0x1da>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 f8b3 	bl	8003e64 <I2C_ITSlaveSeqCplt>
 8003cfe:	e002      	b.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003d00:	46c0      	nop			@ (mov r8, r8)
 8003d02:	e000      	b.n	8003d06 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003d04:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2240      	movs	r2, #64	@ 0x40
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b006      	add	sp, #24
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	ffff0000 	.word	0xffff0000

08003d1c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d1c:	b5b0      	push	{r4, r5, r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2241      	movs	r2, #65	@ 0x41
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	001a      	movs	r2, r3
 8003d30:	2328      	movs	r3, #40	@ 0x28
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b28      	cmp	r3, #40	@ 0x28
 8003d36:	d000      	beq.n	8003d3a <I2C_ITAddrCplt+0x1e>
 8003d38:	e088      	b.n	8003e4c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	250f      	movs	r5, #15
 8003d46:	197b      	adds	r3, r7, r5
 8003d48:	2101      	movs	r1, #1
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	200c      	movs	r0, #12
 8003d5a:	183b      	adds	r3, r7, r0
 8003d5c:	21fe      	movs	r1, #254	@ 0xfe
 8003d5e:	400a      	ands	r2, r1
 8003d60:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	240a      	movs	r4, #10
 8003d6c:	193b      	adds	r3, r7, r4
 8003d6e:	0592      	lsls	r2, r2, #22
 8003d70:	0d92      	lsrs	r2, r2, #22
 8003d72:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	21fe      	movs	r1, #254	@ 0xfe
 8003d82:	400a      	ands	r2, r1
 8003d84:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d148      	bne.n	8003e20 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d8e:	0021      	movs	r1, r4
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	09db      	lsrs	r3, r3, #7
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	183b      	adds	r3, r7, r0
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	4053      	eors	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	001a      	movs	r2, r3
 8003da2:	2306      	movs	r3, #6
 8003da4:	4013      	ands	r3, r2
 8003da6:	d120      	bne.n	8003dea <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003da8:	183b      	adds	r3, r7, r0
 8003daa:	187a      	adds	r2, r7, r1
 8003dac:	8812      	ldrh	r2, [r2, #0]
 8003dae:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d14c      	bne.n	8003e5c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dd8:	183b      	adds	r3, r7, r0
 8003dda:	881a      	ldrh	r2, [r3, #0]
 8003ddc:	197b      	adds	r3, r7, r5
 8003dde:	7819      	ldrb	r1, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff fe79 	bl	8003ada <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003de8:	e038      	b.n	8003e5c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003dea:	240c      	movs	r4, #12
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	2208      	movs	r2, #8
 8003df0:	18ba      	adds	r2, r7, r2
 8003df2:	8812      	ldrh	r2, [r2, #0]
 8003df4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 fbe0 	bl	80045c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2240      	movs	r2, #64	@ 0x40
 8003e08:	2100      	movs	r1, #0
 8003e0a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	230f      	movs	r3, #15
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	7819      	ldrb	r1, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7ff fe5e 	bl	8003ada <HAL_I2C_AddrCallback>
}
 8003e1e:	e01d      	b.n	8003e5c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0011      	movs	r1, r2
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 fbcb 	bl	80045c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2240      	movs	r2, #64	@ 0x40
 8003e32:	2100      	movs	r1, #0
 8003e34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e36:	230c      	movs	r3, #12
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	230f      	movs	r3, #15
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	7819      	ldrb	r1, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff fe48 	bl	8003ada <HAL_I2C_AddrCallback>
}
 8003e4a:	e007      	b.n	8003e5c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2208      	movs	r2, #8
 8003e52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2240      	movs	r2, #64	@ 0x40
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]
}
 8003e5c:	46c0      	nop			@ (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b004      	add	sp, #16
 8003e62:	bdb0      	pop	{r4, r5, r7, pc}

08003e64 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2242      	movs	r2, #66	@ 0x42
 8003e78:	2100      	movs	r1, #0
 8003e7a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	01db      	lsls	r3, r3, #7
 8003e82:	4013      	ands	r3, r2
 8003e84:	d008      	beq.n	8003e98 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4924      	ldr	r1, [pc, #144]	@ (8003f24 <I2C_ITSlaveSeqCplt+0xc0>)
 8003e92:	400a      	ands	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e00c      	b.n	8003eb2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	491e      	ldr	r1, [pc, #120]	@ (8003f28 <I2C_ITSlaveSeqCplt+0xc4>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2241      	movs	r2, #65	@ 0x41
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b29      	cmp	r3, #41	@ 0x29
 8003ebc:	d114      	bne.n	8003ee8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2241      	movs	r2, #65	@ 0x41
 8003ec2:	2128      	movs	r1, #40	@ 0x28
 8003ec4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2221      	movs	r2, #33	@ 0x21
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2101      	movs	r1, #1
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 fb77 	bl	80045c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2240      	movs	r2, #64	@ 0x40
 8003eda:	2100      	movs	r1, #0
 8003edc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff fdea 	bl	8003aba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ee6:	e019      	b.n	8003f1c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2241      	movs	r2, #65	@ 0x41
 8003eec:	5c9b      	ldrb	r3, [r3, r2]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ef2:	d113      	bne.n	8003f1c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2241      	movs	r2, #65	@ 0x41
 8003ef8:	2128      	movs	r1, #40	@ 0x28
 8003efa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2222      	movs	r2, #34	@ 0x22
 8003f00:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2102      	movs	r1, #2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 fb5c 	bl	80045c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2240      	movs	r2, #64	@ 0x40
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	0018      	movs	r0, r3
 8003f18:	f7ff fdd7 	bl	8003aca <HAL_I2C_SlaveRxCpltCallback>
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b004      	add	sp, #16
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	ffffbfff 	.word	0xffffbfff
 8003f28:	ffff7fff 	.word	0xffff7fff

08003f2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f48:	200b      	movs	r0, #11
 8003f4a:	183b      	adds	r3, r7, r0
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	2141      	movs	r1, #65	@ 0x41
 8003f50:	5c52      	ldrb	r2, [r2, r1]
 8003f52:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f5c:	183b      	adds	r3, r7, r0
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b21      	cmp	r3, #33	@ 0x21
 8003f62:	d003      	beq.n	8003f6c <I2C_ITSlaveCplt+0x40>
 8003f64:	183b      	adds	r3, r7, r0
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b29      	cmp	r3, #41	@ 0x29
 8003f6a:	d109      	bne.n	8003f80 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f6c:	4aac      	ldr	r2, [pc, #688]	@ (8004220 <I2C_ITSlaveCplt+0x2f4>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 fb26 	bl	80045c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2221      	movs	r2, #33	@ 0x21
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f7e:	e020      	b.n	8003fc2 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f80:	220b      	movs	r2, #11
 8003f82:	18bb      	adds	r3, r7, r2
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b22      	cmp	r3, #34	@ 0x22
 8003f88:	d003      	beq.n	8003f92 <I2C_ITSlaveCplt+0x66>
 8003f8a:	18bb      	adds	r3, r7, r2
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f90:	d109      	bne.n	8003fa6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f92:	4aa4      	ldr	r2, [pc, #656]	@ (8004224 <I2C_ITSlaveCplt+0x2f8>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	0011      	movs	r1, r2
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 fb13 	bl	80045c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2222      	movs	r2, #34	@ 0x22
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fa4:	e00d      	b.n	8003fc2 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003fa6:	230b      	movs	r3, #11
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b28      	cmp	r3, #40	@ 0x28
 8003fae:	d108      	bne.n	8003fc2 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003fb0:	4a9d      	ldr	r2, [pc, #628]	@ (8004228 <I2C_ITSlaveCplt+0x2fc>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0011      	movs	r1, r2
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 fb04 	bl	80045c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2180      	movs	r1, #128	@ 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4993      	ldr	r1, [pc, #588]	@ (800422c <I2C_ITSlaveCplt+0x300>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 faab 	bl	8004542 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	2380      	movs	r3, #128	@ 0x80
 8003ff0:	01db      	lsls	r3, r3, #7
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d013      	beq.n	800401e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	498b      	ldr	r1, [pc, #556]	@ (8004230 <I2C_ITSlaveCplt+0x304>)
 8004002:	400a      	ands	r2, r1
 8004004:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01f      	beq.n	800404e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800401c:	e017      	b.n	800404e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	4013      	ands	r3, r2
 8004026:	d012      	beq.n	800404e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4980      	ldr	r1, [pc, #512]	@ (8004234 <I2C_ITSlaveCplt+0x308>)
 8004034:	400a      	ands	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2204      	movs	r2, #4
 8004052:	4013      	ands	r3, r2
 8004054:	d020      	beq.n	8004098 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2204      	movs	r2, #4
 800405a:	4393      	bics	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00c      	beq.n	8004098 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	2204      	movs	r2, #4
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2210      	movs	r2, #16
 80040b2:	4013      	ands	r3, r2
 80040b4:	d04f      	beq.n	8004156 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2210      	movs	r2, #16
 80040ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040bc:	d04b      	beq.n	8004156 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d12d      	bne.n	8004124 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2241      	movs	r2, #65	@ 0x41
 80040cc:	5c9b      	ldrb	r3, [r3, r2]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b28      	cmp	r3, #40	@ 0x28
 80040d2:	d10b      	bne.n	80040ec <I2C_ITSlaveCplt+0x1c0>
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	049b      	lsls	r3, r3, #18
 80040da:	429a      	cmp	r2, r3
 80040dc:	d106      	bne.n	80040ec <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 f8a9 	bl	800423c <I2C_ITListenCplt>
 80040ea:	e034      	b.n	8004156 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2241      	movs	r2, #65	@ 0x41
 80040f0:	5c9b      	ldrb	r3, [r3, r2]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b29      	cmp	r3, #41	@ 0x29
 80040f6:	d110      	bne.n	800411a <I2C_ITSlaveCplt+0x1ee>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a4f      	ldr	r2, [pc, #316]	@ (8004238 <I2C_ITSlaveCplt+0x30c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00c      	beq.n	800411a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2210      	movs	r2, #16
 8004106:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 fa19 	bl	8004542 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0018      	movs	r0, r3
 8004114:	f7ff fea6 	bl	8003e64 <I2C_ITSlaveSeqCplt>
 8004118:	e01d      	b.n	8004156 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2210      	movs	r2, #16
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	e018      	b.n	8004156 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2210      	movs	r2, #16
 800412a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004130:	2204      	movs	r2, #4
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <I2C_ITSlaveCplt+0x21c>
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	045b      	lsls	r3, r3, #17
 8004144:	429a      	cmp	r2, r3
 8004146:	d106      	bne.n	8004156 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	0011      	movs	r1, r2
 8004150:	0018      	movs	r0, r3
 8004152:	f000 f8cb 	bl	80042ec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2242      	movs	r2, #66	@ 0x42
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004168:	2b00      	cmp	r3, #0
 800416a:	d013      	beq.n	8004194 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f000 f8b9 	bl	80042ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2241      	movs	r2, #65	@ 0x41
 800417e:	5c9b      	ldrb	r3, [r3, r2]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b28      	cmp	r3, #40	@ 0x28
 8004184:	d147      	bne.n	8004216 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0011      	movs	r1, r2
 800418c:	0018      	movs	r0, r3
 800418e:	f000 f855 	bl	800423c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004192:	e040      	b.n	8004216 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	4a27      	ldr	r2, [pc, #156]	@ (8004238 <I2C_ITSlaveCplt+0x30c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d016      	beq.n	80041cc <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7ff fe5f 	bl	8003e64 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a23      	ldr	r2, [pc, #140]	@ (8004238 <I2C_ITSlaveCplt+0x30c>)
 80041aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2241      	movs	r2, #65	@ 0x41
 80041b0:	2120      	movs	r1, #32
 80041b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2240      	movs	r2, #64	@ 0x40
 80041be:	2100      	movs	r1, #0
 80041c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7ff fc98 	bl	8003afa <HAL_I2C_ListenCpltCallback>
}
 80041ca:	e024      	b.n	8004216 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2241      	movs	r2, #65	@ 0x41
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b22      	cmp	r3, #34	@ 0x22
 80041d6:	d10f      	bne.n	80041f8 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2241      	movs	r2, #65	@ 0x41
 80041dc:	2120      	movs	r1, #32
 80041de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2240      	movs	r2, #64	@ 0x40
 80041ea:	2100      	movs	r1, #0
 80041ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7ff fc6a 	bl	8003aca <HAL_I2C_SlaveRxCpltCallback>
}
 80041f6:	e00e      	b.n	8004216 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2241      	movs	r2, #65	@ 0x41
 80041fc:	2120      	movs	r1, #32
 80041fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2240      	movs	r2, #64	@ 0x40
 800420a:	2100      	movs	r1, #0
 800420c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f7ff fc52 	bl	8003aba <HAL_I2C_SlaveTxCpltCallback>
}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	b006      	add	sp, #24
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	00008001 	.word	0x00008001
 8004224:	00008002 	.word	0x00008002
 8004228:	00008003 	.word	0x00008003
 800422c:	fe00e800 	.word	0xfe00e800
 8004230:	ffffbfff 	.word	0xffffbfff
 8004234:	ffff7fff 	.word	0xffff7fff
 8004238:	ffff0000 	.word	0xffff0000

0800423c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	@ (80042e4 <I2C_ITListenCplt+0xa8>)
 800424a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2241      	movs	r2, #65	@ 0x41
 8004256:	2120      	movs	r1, #32
 8004258:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2242      	movs	r2, #66	@ 0x42
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2204      	movs	r2, #4
 800426c:	4013      	ands	r3, r2
 800426e:	d022      	beq.n	80042b6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d012      	beq.n	80042b6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	2204      	movs	r2, #4
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042b6:	4a0c      	ldr	r2, [pc, #48]	@ (80042e8 <I2C_ITListenCplt+0xac>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	0011      	movs	r1, r2
 80042bc:	0018      	movs	r0, r3
 80042be:	f000 f981 	bl	80045c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2210      	movs	r2, #16
 80042c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2240      	movs	r2, #64	@ 0x40
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fc10 	bl	8003afa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	ffff0000 	.word	0xffff0000
 80042e8:	00008003 	.word	0x00008003

080042ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042f6:	200f      	movs	r0, #15
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	2141      	movs	r1, #65	@ 0x41
 80042fe:	5c52      	ldrb	r2, [r2, r1]
 8004300:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2242      	movs	r2, #66	@ 0x42
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a72      	ldr	r2, [pc, #456]	@ (80044d8 <I2C_ITError+0x1ec>)
 800430e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004322:	183b      	adds	r3, r7, r0
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b28      	cmp	r3, #40	@ 0x28
 8004328:	d007      	beq.n	800433a <I2C_ITError+0x4e>
 800432a:	183b      	adds	r3, r7, r0
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b29      	cmp	r3, #41	@ 0x29
 8004330:	d003      	beq.n	800433a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004332:	183b      	adds	r3, r7, r0
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b2a      	cmp	r3, #42	@ 0x2a
 8004338:	d10c      	bne.n	8004354 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2103      	movs	r1, #3
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f940 	bl	80045c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2241      	movs	r2, #65	@ 0x41
 8004348:	2128      	movs	r1, #40	@ 0x28
 800434a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a63      	ldr	r2, [pc, #396]	@ (80044dc <I2C_ITError+0x1f0>)
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34
 8004352:	e032      	b.n	80043ba <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004354:	4a62      	ldr	r2, [pc, #392]	@ (80044e0 <I2C_ITError+0x1f4>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0011      	movs	r1, r2
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f932 	bl	80045c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0018      	movs	r0, r3
 8004364:	f000 f8ed 	bl	8004542 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2241      	movs	r2, #65	@ 0x41
 800436c:	5c9b      	ldrb	r3, [r3, r2]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b60      	cmp	r3, #96	@ 0x60
 8004372:	d01f      	beq.n	80043b4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2241      	movs	r2, #65	@ 0x41
 8004378:	2120      	movs	r1, #32
 800437a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2220      	movs	r2, #32
 8004384:	4013      	ands	r3, r2
 8004386:	2b20      	cmp	r3, #32
 8004388:	d114      	bne.n	80043b4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2210      	movs	r2, #16
 8004392:	4013      	ands	r3, r2
 8004394:	2b10      	cmp	r3, #16
 8004396:	d109      	bne.n	80043ac <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2210      	movs	r2, #16
 800439e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a4:	2204      	movs	r2, #4
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2220      	movs	r2, #32
 80043b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d03b      	beq.n	8004440 <I2C_ITError+0x154>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b11      	cmp	r3, #17
 80043cc:	d002      	beq.n	80043d4 <I2C_ITError+0xe8>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b21      	cmp	r3, #33	@ 0x21
 80043d2:	d135      	bne.n	8004440 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	01db      	lsls	r3, r3, #7
 80043de:	401a      	ands	r2, r3
 80043e0:	2380      	movs	r3, #128	@ 0x80
 80043e2:	01db      	lsls	r3, r3, #7
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d107      	bne.n	80043f8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	493c      	ldr	r1, [pc, #240]	@ (80044e4 <I2C_ITError+0x1f8>)
 80043f4:	400a      	ands	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff f817 	bl	8003430 <HAL_DMA_GetState>
 8004402:	0003      	movs	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d016      	beq.n	8004436 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	4a36      	ldr	r2, [pc, #216]	@ (80044e8 <I2C_ITError+0x1fc>)
 800440e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2240      	movs	r2, #64	@ 0x40
 8004414:	2100      	movs	r1, #0
 8004416:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	0018      	movs	r0, r3
 800441e:	f7fe fedb 	bl	80031d8 <HAL_DMA_Abort_IT>
 8004422:	1e03      	subs	r3, r0, #0
 8004424:	d051      	beq.n	80044ca <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	0018      	movs	r0, r3
 8004432:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004434:	e049      	b.n	80044ca <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f000 f859 	bl	80044f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800443e:	e044      	b.n	80044ca <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d03b      	beq.n	80044c0 <I2C_ITError+0x1d4>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b12      	cmp	r3, #18
 800444c:	d002      	beq.n	8004454 <I2C_ITError+0x168>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b22      	cmp	r3, #34	@ 0x22
 8004452:	d135      	bne.n	80044c0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	2380      	movs	r3, #128	@ 0x80
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	401a      	ands	r2, r3
 8004460:	2380      	movs	r3, #128	@ 0x80
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	429a      	cmp	r2, r3
 8004466:	d107      	bne.n	8004478 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	491e      	ldr	r1, [pc, #120]	@ (80044ec <I2C_ITError+0x200>)
 8004474:	400a      	ands	r2, r1
 8004476:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	0018      	movs	r0, r3
 800447e:	f7fe ffd7 	bl	8003430 <HAL_DMA_GetState>
 8004482:	0003      	movs	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	d016      	beq.n	80044b6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <I2C_ITError+0x1fc>)
 800448e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	0018      	movs	r0, r3
 800449e:	f7fe fe9b 	bl	80031d8 <HAL_DMA_Abort_IT>
 80044a2:	1e03      	subs	r3, r0, #0
 80044a4:	d013      	beq.n	80044ce <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	0018      	movs	r0, r3
 80044b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044b4:	e00b      	b.n	80044ce <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 f819 	bl	80044f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044be:	e006      	b.n	80044ce <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f000 f814 	bl	80044f0 <I2C_TreatErrorCallback>
  }
}
 80044c8:	e002      	b.n	80044d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	e000      	b.n	80044d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ce:	46c0      	nop			@ (mov r8, r8)
}
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	ffff0000 	.word	0xffff0000
 80044dc:	08003b1d 	.word	0x08003b1d
 80044e0:	00008003 	.word	0x00008003
 80044e4:	ffffbfff 	.word	0xffffbfff
 80044e8:	08004587 	.word	0x08004587
 80044ec:	ffff7fff 	.word	0xffff7fff

080044f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2241      	movs	r2, #65	@ 0x41
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b60      	cmp	r3, #96	@ 0x60
 8004502:	d10f      	bne.n	8004524 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2241      	movs	r2, #65	@ 0x41
 8004508:	2120      	movs	r1, #32
 800450a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2240      	movs	r2, #64	@ 0x40
 8004516:	2100      	movs	r1, #0
 8004518:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0018      	movs	r0, r3
 800451e:	f7ff faf4 	bl	8003b0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004522:	e00a      	b.n	800453a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2240      	movs	r2, #64	@ 0x40
 800452e:	2100      	movs	r1, #0
 8004530:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f7fb ff5d 	bl	80003f4 <HAL_I2C_ErrorCallback>
}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	b002      	add	sp, #8
 8004540:	bd80      	pop	{r7, pc}

08004542 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2202      	movs	r2, #2
 8004552:	4013      	ands	r3, r2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d103      	bne.n	8004560 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2200      	movs	r2, #0
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2201      	movs	r2, #1
 8004568:	4013      	ands	r3, r2
 800456a:	2b01      	cmp	r3, #1
 800456c:	d007      	beq.n	800457e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699a      	ldr	r2, [r3, #24]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	430a      	orrs	r2, r1
 800457c:	619a      	str	r2, [r3, #24]
  }
}
 800457e:	46c0      	nop			@ (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	b002      	add	sp, #8
 8004584:	bd80      	pop	{r7, pc}

08004586 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	2200      	movs	r2, #0
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b0:	2200      	movs	r2, #0
 80045b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7ff ff9a 	bl	80044f0 <I2C_TreatErrorCallback>
}
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	000a      	movs	r2, r1
 80045ce:	1cbb      	adds	r3, r7, #2
 80045d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045d6:	1cbb      	adds	r3, r7, #2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	2201      	movs	r2, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	d010      	beq.n	8004602 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2242      	movs	r2, #66	@ 0x42
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2241      	movs	r2, #65	@ 0x41
 80045ec:	5c9b      	ldrb	r3, [r3, r2]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	001a      	movs	r2, r3
 80045f2:	2328      	movs	r3, #40	@ 0x28
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b28      	cmp	r3, #40	@ 0x28
 80045f8:	d003      	beq.n	8004602 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	22b0      	movs	r2, #176	@ 0xb0
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004602:	1cbb      	adds	r3, r7, #2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	2202      	movs	r2, #2
 8004608:	4013      	ands	r3, r2
 800460a:	d010      	beq.n	800462e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2244      	movs	r2, #68	@ 0x44
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2241      	movs	r2, #65	@ 0x41
 8004618:	5c9b      	ldrb	r3, [r3, r2]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	001a      	movs	r2, r3
 800461e:	2328      	movs	r3, #40	@ 0x28
 8004620:	4013      	ands	r3, r2
 8004622:	2b28      	cmp	r3, #40	@ 0x28
 8004624:	d003      	beq.n	800462e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	22b0      	movs	r2, #176	@ 0xb0
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800462e:	1cbb      	adds	r3, r7, #2
 8004630:	2200      	movs	r2, #0
 8004632:	5e9b      	ldrsh	r3, [r3, r2]
 8004634:	2b00      	cmp	r3, #0
 8004636:	da03      	bge.n	8004640 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	22b8      	movs	r2, #184	@ 0xb8
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004640:	1cbb      	adds	r3, r7, #2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	2b10      	cmp	r3, #16
 8004646:	d103      	bne.n	8004650 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2290      	movs	r2, #144	@ 0x90
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004650:	1cbb      	adds	r3, r7, #2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	2b20      	cmp	r3, #32
 8004656:	d103      	bne.n	8004660 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004660:	1cbb      	adds	r3, r7, #2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	2b40      	cmp	r3, #64	@ 0x40
 8004666:	d103      	bne.n	8004670 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2240      	movs	r2, #64	@ 0x40
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	43d9      	mvns	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	400a      	ands	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b004      	add	sp, #16
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2241      	movs	r2, #65	@ 0x41
 800469a:	5c9b      	ldrb	r3, [r3, r2]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d138      	bne.n	8004714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2240      	movs	r2, #64	@ 0x40
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e032      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2240      	movs	r2, #64	@ 0x40
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2241      	movs	r2, #65	@ 0x41
 80046bc:	2124      	movs	r1, #36	@ 0x24
 80046be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	438a      	bics	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4911      	ldr	r1, [pc, #68]	@ (8004720 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80046dc:	400a      	ands	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2241      	movs	r2, #65	@ 0x41
 8004704:	2120      	movs	r1, #32
 8004706:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2240      	movs	r2, #64	@ 0x40
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	0018      	movs	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	b002      	add	sp, #8
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	ffffefff 	.word	0xffffefff

08004724 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2241      	movs	r2, #65	@ 0x41
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b20      	cmp	r3, #32
 8004738:	d139      	bne.n	80047ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2240      	movs	r2, #64	@ 0x40
 800473e:	5c9b      	ldrb	r3, [r3, r2]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004744:	2302      	movs	r3, #2
 8004746:	e033      	b.n	80047b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2240      	movs	r2, #64	@ 0x40
 800474c:	2101      	movs	r1, #1
 800474e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2241      	movs	r2, #65	@ 0x41
 8004754:	2124      	movs	r1, #36	@ 0x24
 8004756:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2101      	movs	r1, #1
 8004764:	438a      	bics	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004774:	4013      	ands	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2241      	movs	r2, #65	@ 0x41
 800479e:	2120      	movs	r1, #32
 80047a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2240      	movs	r2, #64	@ 0x40
 80047a6:	2100      	movs	r1, #0
 80047a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b004      	add	sp, #16
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	fffff0ff 	.word	0xfffff0ff

080047bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e20f      	b.n	8004bee <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	4013      	ands	r3, r2
 80047d6:	d100      	bne.n	80047da <HAL_RCC_OscConfig+0x1e>
 80047d8:	e069      	b.n	80048ae <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047da:	4bc8      	ldr	r3, [pc, #800]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2238      	movs	r2, #56	@ 0x38
 80047e0:	4013      	ands	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d105      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d15d      	bne.n	80048ae <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1fb      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	2380      	movs	r3, #128	@ 0x80
 80047fc:	025b      	lsls	r3, r3, #9
 80047fe:	429a      	cmp	r2, r3
 8004800:	d107      	bne.n	8004812 <HAL_RCC_OscConfig+0x56>
 8004802:	4bbe      	ldr	r3, [pc, #760]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4bbd      	ldr	r3, [pc, #756]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004808:	2180      	movs	r1, #128	@ 0x80
 800480a:	0249      	lsls	r1, r1, #9
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e020      	b.n	8004854 <HAL_RCC_OscConfig+0x98>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	23a0      	movs	r3, #160	@ 0xa0
 8004818:	02db      	lsls	r3, r3, #11
 800481a:	429a      	cmp	r2, r3
 800481c:	d10e      	bne.n	800483c <HAL_RCC_OscConfig+0x80>
 800481e:	4bb7      	ldr	r3, [pc, #732]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4bb6      	ldr	r3, [pc, #728]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004824:	2180      	movs	r1, #128	@ 0x80
 8004826:	02c9      	lsls	r1, r1, #11
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	4bb3      	ldr	r3, [pc, #716]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4bb2      	ldr	r3, [pc, #712]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	0249      	lsls	r1, r1, #9
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x98>
 800483c:	4baf      	ldr	r3, [pc, #700]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4bae      	ldr	r3, [pc, #696]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004842:	49af      	ldr	r1, [pc, #700]	@ (8004b00 <HAL_RCC_OscConfig+0x344>)
 8004844:	400a      	ands	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	4bac      	ldr	r3, [pc, #688]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4bab      	ldr	r3, [pc, #684]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800484e:	49ad      	ldr	r1, [pc, #692]	@ (8004b04 <HAL_RCC_OscConfig+0x348>)
 8004850:	400a      	ands	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d014      	beq.n	8004886 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd fbce 	bl	8001ffc <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004866:	f7fd fbc9 	bl	8001ffc <HAL_GetTick>
 800486a:	0002      	movs	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b64      	cmp	r3, #100	@ 0x64
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1ba      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004878:	4ba0      	ldr	r3, [pc, #640]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	4013      	ands	r3, r2
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0xaa>
 8004884:	e013      	b.n	80048ae <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004886:	f7fd fbb9 	bl	8001ffc <HAL_GetTick>
 800488a:	0003      	movs	r3, r0
 800488c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004890:	f7fd fbb4 	bl	8001ffc <HAL_GetTick>
 8004894:	0002      	movs	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1a5      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a2:	4b96      	ldr	r3, [pc, #600]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	029b      	lsls	r3, r3, #10
 80048aa:	4013      	ands	r3, r2
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2202      	movs	r2, #2
 80048b4:	4013      	ands	r3, r2
 80048b6:	d100      	bne.n	80048ba <HAL_RCC_OscConfig+0xfe>
 80048b8:	e086      	b.n	80049c8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ba:	4b90      	ldr	r3, [pc, #576]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2238      	movs	r2, #56	@ 0x38
 80048c0:	4013      	ands	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d12f      	bne.n	800492a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e18b      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d6:	4b89      	ldr	r3, [pc, #548]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4a8b      	ldr	r2, [pc, #556]	@ (8004b08 <HAL_RCC_OscConfig+0x34c>)
 80048dc:	4013      	ands	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	021a      	lsls	r2, r3, #8
 80048e6:	4b85      	ldr	r3, [pc, #532]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d112      	bne.n	8004918 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80048f2:	4b82      	ldr	r3, [pc, #520]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a85      	ldr	r2, [pc, #532]	@ (8004b0c <HAL_RCC_OscConfig+0x350>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	4b7e      	ldr	r3, [pc, #504]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004906:	4b7d      	ldr	r3, [pc, #500]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0adb      	lsrs	r3, r3, #11
 800490c:	2207      	movs	r2, #7
 800490e:	4013      	ands	r3, r2
 8004910:	4a7f      	ldr	r2, [pc, #508]	@ (8004b10 <HAL_RCC_OscConfig+0x354>)
 8004912:	40da      	lsrs	r2, r3
 8004914:	4b7f      	ldr	r3, [pc, #508]	@ (8004b14 <HAL_RCC_OscConfig+0x358>)
 8004916:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004918:	4b7f      	ldr	r3, [pc, #508]	@ (8004b18 <HAL_RCC_OscConfig+0x35c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	0018      	movs	r0, r3
 800491e:	f7fd fb11 	bl	8001f44 <HAL_InitTick>
 8004922:	1e03      	subs	r3, r0, #0
 8004924:	d050      	beq.n	80049c8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e161      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d030      	beq.n	8004994 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004932:	4b72      	ldr	r3, [pc, #456]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	@ (8004b0c <HAL_RCC_OscConfig+0x350>)
 8004938:	4013      	ands	r3, r2
 800493a:	0019      	movs	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	4b6e      	ldr	r3, [pc, #440]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004946:	4b6d      	ldr	r3, [pc, #436]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b6c      	ldr	r3, [pc, #432]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800494c:	2180      	movs	r1, #128	@ 0x80
 800494e:	0049      	lsls	r1, r1, #1
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd fb52 	bl	8001ffc <HAL_GetTick>
 8004958:	0003      	movs	r3, r0
 800495a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800495e:	f7fd fb4d 	bl	8001ffc <HAL_GetTick>
 8004962:	0002      	movs	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e13e      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004970:	4b62      	ldr	r3, [pc, #392]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4013      	ands	r3, r2
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497c:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a61      	ldr	r2, [pc, #388]	@ (8004b08 <HAL_RCC_OscConfig+0x34c>)
 8004982:	4013      	ands	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	021a      	lsls	r2, r3, #8
 800498c:	4b5b      	ldr	r3, [pc, #364]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	e019      	b.n	80049c8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004994:	4b59      	ldr	r3, [pc, #356]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b58      	ldr	r3, [pc, #352]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 800499a:	4960      	ldr	r1, [pc, #384]	@ (8004b1c <HAL_RCC_OscConfig+0x360>)
 800499c:	400a      	ands	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd fb2c 	bl	8001ffc <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80049aa:	f7fd fb27 	bl	8001ffc <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e118      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049bc:	4b4f      	ldr	r3, [pc, #316]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4013      	ands	r3, r2
 80049c6:	d1f0      	bne.n	80049aa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2208      	movs	r2, #8
 80049ce:	4013      	ands	r3, r2
 80049d0:	d042      	beq.n	8004a58 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80049d2:	4b4a      	ldr	r3, [pc, #296]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2238      	movs	r2, #56	@ 0x38
 80049d8:	4013      	ands	r3, r2
 80049da:	2b18      	cmp	r3, #24
 80049dc:	d105      	bne.n	80049ea <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d138      	bne.n	8004a58 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e101      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d019      	beq.n	8004a26 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80049f2:	4b42      	ldr	r3, [pc, #264]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80049f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049f6:	4b41      	ldr	r3, [pc, #260]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 80049f8:	2101      	movs	r1, #1
 80049fa:	430a      	orrs	r2, r1
 80049fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fe:	f7fd fafd 	bl	8001ffc <HAL_GetTick>
 8004a02:	0003      	movs	r3, r0
 8004a04:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004a08:	f7fd faf8 	bl	8001ffc <HAL_GetTick>
 8004a0c:	0002      	movs	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0e9      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004a1a:	4b38      	ldr	r3, [pc, #224]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1e:	2202      	movs	r2, #2
 8004a20:	4013      	ands	r3, r2
 8004a22:	d0f1      	beq.n	8004a08 <HAL_RCC_OscConfig+0x24c>
 8004a24:	e018      	b.n	8004a58 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a26:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004a28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a2a:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	438a      	bics	r2, r1
 8004a30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fd fae3 	bl	8001ffc <HAL_GetTick>
 8004a36:	0003      	movs	r3, r0
 8004a38:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fade 	bl	8001ffc <HAL_GetTick>
 8004a40:	0002      	movs	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0cf      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a52:	2202      	movs	r2, #2
 8004a54:	4013      	ands	r3, r2
 8004a56:	d1f1      	bne.n	8004a3c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d100      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2a8>
 8004a62:	e084      	b.n	8004b6e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a64:	230f      	movs	r3, #15
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004a6c:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2238      	movs	r2, #56	@ 0x38
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d106      	bne.n	8004a86 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d000      	beq.n	8004a82 <HAL_RCC_OscConfig+0x2c6>
 8004a80:	e075      	b.n	8004b6e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e0b3      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d106      	bne.n	8004a9c <HAL_RCC_OscConfig+0x2e0>
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004a90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a92:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004a94:	2101      	movs	r1, #1
 8004a96:	430a      	orrs	r2, r1
 8004a98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a9a:	e01c      	b.n	8004ad6 <HAL_RCC_OscConfig+0x31a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b05      	cmp	r3, #5
 8004aa2:	d10c      	bne.n	8004abe <HAL_RCC_OscConfig+0x302>
 8004aa4:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004aa8:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004aaa:	2104      	movs	r1, #4
 8004aac:	430a      	orrs	r2, r1
 8004aae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ab0:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ab4:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004abc:	e00b      	b.n	8004ad6 <HAL_RCC_OscConfig+0x31a>
 8004abe:	4b0f      	ldr	r3, [pc, #60]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004ac0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	438a      	bics	r2, r1
 8004ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aca:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004acc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ace:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <HAL_RCC_OscConfig+0x340>)
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	438a      	bics	r2, r1
 8004ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d028      	beq.n	8004b30 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ade:	f7fd fa8d 	bl	8001ffc <HAL_GetTick>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fd fa88 	bl	8001ffc <HAL_GetTick>
 8004aec:	0002      	movs	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	4a0b      	ldr	r2, [pc, #44]	@ (8004b20 <HAL_RCC_OscConfig+0x364>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d915      	bls.n	8004b24 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e078      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
 8004afc:	40021000 	.word	0x40021000
 8004b00:	fffeffff 	.word	0xfffeffff
 8004b04:	fffbffff 	.word	0xfffbffff
 8004b08:	ffff80ff 	.word	0xffff80ff
 8004b0c:	ffffc7ff 	.word	0xffffc7ff
 8004b10:	02dc6c00 	.word	0x02dc6c00
 8004b14:	20000064 	.word	0x20000064
 8004b18:	20000068 	.word	0x20000068
 8004b1c:	fffffeff 	.word	0xfffffeff
 8004b20:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004b24:	4b34      	ldr	r3, [pc, #208]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b28:	2202      	movs	r2, #2
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d0dc      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x32c>
 8004b2e:	e013      	b.n	8004b58 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fd fa64 	bl	8001ffc <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004b38:	e009      	b.n	8004b4e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fd fa5f 	bl	8001ffc <HAL_GetTick>
 8004b3e:	0002      	movs	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	4a2d      	ldr	r2, [pc, #180]	@ (8004bfc <HAL_RCC_OscConfig+0x440>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e04f      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	2202      	movs	r2, #2
 8004b54:	4013      	ands	r3, r2
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b58:	230f      	movs	r3, #15
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d105      	bne.n	8004b6e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b62:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b66:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004b68:	4925      	ldr	r1, [pc, #148]	@ (8004c00 <HAL_RCC_OscConfig+0x444>)
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2210      	movs	r2, #16
 8004b74:	4013      	ands	r3, r2
 8004b76:	d039      	beq.n	8004bec <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b80:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004b86:	2180      	movs	r1, #128	@ 0x80
 8004b88:	03c9      	lsls	r1, r1, #15
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fd fa35 	bl	8001ffc <HAL_GetTick>
 8004b92:	0003      	movs	r3, r0
 8004b94:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b98:	f7fd fa30 	bl	8001ffc <HAL_GetTick>
 8004b9c:	0002      	movs	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e021      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x3dc>
 8004bb6:	e019      	b.n	8004bec <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004bbe:	4911      	ldr	r1, [pc, #68]	@ (8004c04 <HAL_RCC_OscConfig+0x448>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fd fa1a 	bl	8001ffc <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bce:	f7fd fa15 	bl	8001ffc <HAL_GetTick>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e006      	b.n	8004bee <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8004be0:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_OscConfig+0x43c>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	@ 0x80
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	4013      	ands	r3, r2
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b006      	add	sp, #24
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	00001388 	.word	0x00001388
 8004c00:	efffffff 	.word	0xefffffff
 8004c04:	ffbfffff 	.word	0xffbfffff

08004c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0f6      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b7d      	ldr	r3, [pc, #500]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2207      	movs	r2, #7
 8004c22:	4013      	ands	r3, r2
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d91e      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2207      	movs	r2, #7
 8004c30:	4393      	bics	r3, r2
 8004c32:	0019      	movs	r1, r3
 8004c34:	4b77      	ldr	r3, [pc, #476]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c3c:	f7fd f9de 	bl	8001ffc <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c44:	e009      	b.n	8004c5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c46:	f7fd f9d9 	bl	8001ffc <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	4a71      	ldr	r2, [pc, #452]	@ (8004e18 <HAL_RCC_ClockConfig+0x210>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e0d7      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2207      	movs	r2, #7
 8004c60:	4013      	ands	r3, r2
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d1ee      	bne.n	8004c46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d017      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2204      	movs	r2, #4
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004c7c:	4b67      	ldr	r3, [pc, #412]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a67      	ldr	r2, [pc, #412]	@ (8004e20 <HAL_RCC_ClockConfig+0x218>)
 8004c82:	401a      	ands	r2, r3
 8004c84:	4b65      	ldr	r3, [pc, #404]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004c86:	21b0      	movs	r1, #176	@ 0xb0
 8004c88:	0109      	lsls	r1, r1, #4
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c8e:	4b63      	ldr	r3, [pc, #396]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4a64      	ldr	r2, [pc, #400]	@ (8004e24 <HAL_RCC_ClockConfig+0x21c>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d100      	bne.n	8004cae <HAL_RCC_ClockConfig+0xa6>
 8004cac:	e061      	b.n	8004d72 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004cae:	4b5b      	ldr	r3, [pc, #364]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	221c      	movs	r2, #28
 8004cb4:	4393      	bics	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b57      	ldr	r3, [pc, #348]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cca:	4b54      	ldr	r3, [pc, #336]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	2380      	movs	r3, #128	@ 0x80
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d12b      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e097      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4013      	ands	r3, r2
 8004cec:	d11f      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e08b      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8004cfa:	4b48      	ldr	r3, [pc, #288]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	4013      	ands	r3, r2
 8004d04:	d113      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e07f      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d106      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004d12:	4b42      	ldr	r3, [pc, #264]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d16:	2202      	movs	r2, #2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e074      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004d20:	4b3e      	ldr	r3, [pc, #248]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d24:	2202      	movs	r2, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e06d      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2207      	movs	r2, #7
 8004d34:	4393      	bics	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	4b37      	ldr	r3, [pc, #220]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fd f95b 	bl	8001ffc <HAL_GetTick>
 8004d46:	0003      	movs	r3, r0
 8004d48:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4a:	e009      	b.n	8004d60 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4c:	f7fd f956 	bl	8001ffc <HAL_GetTick>
 8004d50:	0002      	movs	r2, r0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	4a30      	ldr	r2, [pc, #192]	@ (8004e18 <HAL_RCC_ClockConfig+0x210>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e054      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d60:	4b2e      	ldr	r3, [pc, #184]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2238      	movs	r2, #56	@ 0x38
 8004d66:	401a      	ands	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d1ec      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d72:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2207      	movs	r2, #7
 8004d78:	4013      	ands	r3, r2
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d21e      	bcs.n	8004dbe <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d80:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2207      	movs	r2, #7
 8004d86:	4393      	bics	r3, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	4b22      	ldr	r3, [pc, #136]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d92:	f7fd f933 	bl	8001ffc <HAL_GetTick>
 8004d96:	0003      	movs	r3, r0
 8004d98:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d9a:	e009      	b.n	8004db0 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9c:	f7fd f92e 	bl	8001ffc <HAL_GetTick>
 8004da0:	0002      	movs	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_RCC_ClockConfig+0x210>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e02c      	b.n	8004e0a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004db0:	4b18      	ldr	r3, [pc, #96]	@ (8004e14 <HAL_RCC_ClockConfig+0x20c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2207      	movs	r2, #7
 8004db6:	4013      	ands	r3, r2
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d1ee      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc8:	4b14      	ldr	r3, [pc, #80]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a16      	ldr	r2, [pc, #88]	@ (8004e28 <HAL_RCC_ClockConfig+0x220>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	4b11      	ldr	r3, [pc, #68]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004ddc:	f000 f82c 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004de0:	0001      	movs	r1, r0
 8004de2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e1c <HAL_RCC_ClockConfig+0x214>)
 8004de4:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	220f      	movs	r2, #15
 8004dea:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004dec:	4b0f      	ldr	r3, [pc, #60]	@ (8004e2c <HAL_RCC_ClockConfig+0x224>)
 8004dee:	0092      	lsls	r2, r2, #2
 8004df0:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004df2:	221f      	movs	r2, #31
 8004df4:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004df6:	000a      	movs	r2, r1
 8004df8:	40da      	lsrs	r2, r3
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <HAL_RCC_ClockConfig+0x228>)
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <HAL_RCC_ClockConfig+0x22c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fd f89e 	bl	8001f44 <HAL_InitTick>
 8004e08:	0003      	movs	r3, r0
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	40022000 	.word	0x40022000
 8004e18:	00001388 	.word	0x00001388
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	ffff84ff 	.word	0xffff84ff
 8004e24:	fffff0ff 	.word	0xfffff0ff
 8004e28:	ffff8fff 	.word	0xffff8fff
 8004e2c:	08007c74 	.word	0x08007c74
 8004e30:	20000064 	.word	0x20000064
 8004e34:	20000068 	.word	0x20000068

08004e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8004e3e:	4b27      	ldr	r3, [pc, #156]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	2207      	movs	r2, #7
 8004e46:	4013      	ands	r3, r2
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e4c:	4b23      	ldr	r3, [pc, #140]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2238      	movs	r2, #56	@ 0x38
 8004e52:	4013      	ands	r3, r2
 8004e54:	d10f      	bne.n	8004e76 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e56:	4b21      	ldr	r3, [pc, #132]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	0adb      	lsrs	r3, r3, #11
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2201      	movs	r2, #1
 8004e62:	409a      	lsls	r2, r3
 8004e64:	0013      	movs	r3, r2
 8004e66:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	481d      	ldr	r0, [pc, #116]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e6c:	f7fb f94c 	bl	8000108 <__udivsi3>
 8004e70:	0003      	movs	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e027      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e76:	4b19      	ldr	r3, [pc, #100]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2238      	movs	r2, #56	@ 0x38
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d102      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e82:	4b18      	ldr	r3, [pc, #96]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	e01e      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004e88:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2238      	movs	r2, #56	@ 0x38
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d103      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e014      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2238      	movs	r2, #56	@ 0x38
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b18      	cmp	r3, #24
 8004ea6:	d103      	bne.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ea8:	23fa      	movs	r3, #250	@ 0xfa
 8004eaa:	01db      	lsls	r3, r3, #7
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2238      	movs	r2, #56	@ 0x38
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8004ebc:	4b08      	ldr	r3, [pc, #32]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e001      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fb f91d 	bl	8000108 <__udivsi3>
 8004ece:	0003      	movs	r3, r0
 8004ed0:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b004      	add	sp, #16
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	02dc6c00 	.word	0x02dc6c00
 8004ee4:	007a1200 	.word	0x007a1200

08004ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004eec:	f7ff ffa4 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004ef0:	0001      	movs	r1, r0
 8004ef2:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	220f      	movs	r2, #15
 8004efa:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004efc:	4b07      	ldr	r3, [pc, #28]	@ (8004f1c <HAL_RCC_GetHCLKFreq+0x34>)
 8004efe:	0092      	lsls	r2, r2, #2
 8004f00:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f02:	221f      	movs	r2, #31
 8004f04:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004f06:	000a      	movs	r2, r1
 8004f08:	40da      	lsrs	r2, r3
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCC_GetHCLKFreq+0x38>)
 8004f0c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004f0e:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <HAL_RCC_GetHCLKFreq+0x38>)
 8004f10:	681b      	ldr	r3, [r3, #0]
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	08007c74 	.word	0x08007c74
 8004f20:	20000064 	.word	0x20000064

08004f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004f28:	f7ff ffde 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f2c:	0001      	movs	r1, r0
 8004f2e:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0b1b      	lsrs	r3, r3, #12
 8004f34:	2207      	movs	r2, #7
 8004f36:	401a      	ands	r2, r3
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004f3a:	0092      	lsls	r2, r2, #2
 8004f3c:	58d3      	ldr	r3, [r2, r3]
 8004f3e:	221f      	movs	r2, #31
 8004f40:	4013      	ands	r3, r2
 8004f42:	40d9      	lsrs	r1, r3
 8004f44:	000b      	movs	r3, r1
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	08007cb4 	.word	0x08007cb4

08004f54 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004f5c:	2313      	movs	r3, #19
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f64:	2312      	movs	r3, #18
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2240      	movs	r2, #64	@ 0x40
 8004f72:	4013      	ands	r3, r2
 8004f74:	d100      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004f76:	e079      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f78:	2011      	movs	r0, #17
 8004f7a:	183b      	adds	r3, r7, r0
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f80:	4b6a      	ldr	r3, [pc, #424]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f84:	2380      	movs	r3, #128	@ 0x80
 8004f86:	055b      	lsls	r3, r3, #21
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d110      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b67      	ldr	r3, [pc, #412]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f90:	4b66      	ldr	r3, [pc, #408]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f92:	2180      	movs	r1, #128	@ 0x80
 8004f94:	0549      	lsls	r1, r1, #21
 8004f96:	430a      	orrs	r2, r1
 8004f98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f9a:	4b64      	ldr	r3, [pc, #400]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f9e:	2380      	movs	r3, #128	@ 0x80
 8004fa0:	055b      	lsls	r3, r3, #21
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa8:	183b      	adds	r3, r7, r0
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004fae:	4b5f      	ldr	r3, [pc, #380]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fb2:	23c0      	movs	r3, #192	@ 0xc0
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d019      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d014      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004fca:	4b58      	ldr	r3, [pc, #352]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	4a58      	ldr	r2, [pc, #352]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fd4:	4b55      	ldr	r3, [pc, #340]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fd8:	4b54      	ldr	r3, [pc, #336]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fda:	2180      	movs	r1, #128	@ 0x80
 8004fdc:	0249      	lsls	r1, r1, #9
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe2:	4b52      	ldr	r3, [pc, #328]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fe4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fe6:	4b51      	ldr	r3, [pc, #324]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fe8:	4952      	ldr	r1, [pc, #328]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fea:	400a      	ands	r2, r1
 8004fec:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004fee:	4b4f      	ldr	r3, [pc, #316]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d016      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fffe 	bl	8001ffc <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005004:	e00c      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fc fff9 	bl	8001ffc <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	4a49      	ldr	r2, [pc, #292]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d904      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005016:	2313      	movs	r3, #19
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	2203      	movs	r2, #3
 800501c:	701a      	strb	r2, [r3, #0]
          break;
 800501e:	e004      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005020:	4b42      	ldr	r3, [pc, #264]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	2202      	movs	r2, #2
 8005026:	4013      	ands	r3, r2
 8005028:	d0ed      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800502a:	2313      	movs	r3, #19
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	4b3d      	ldr	r3, [pc, #244]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	4a3d      	ldr	r2, [pc, #244]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800503a:	4013      	ands	r3, r2
 800503c:	0019      	movs	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	4b3a      	ldr	r3, [pc, #232]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005044:	430a      	orrs	r2, r1
 8005046:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005048:	e005      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	2312      	movs	r3, #18
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	2213      	movs	r2, #19
 8005050:	18ba      	adds	r2, r7, r2
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005056:	2311      	movs	r3, #17
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005060:	4b32      	ldr	r3, [pc, #200]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005064:	4b31      	ldr	r3, [pc, #196]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005066:	4935      	ldr	r1, [pc, #212]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005068:	400a      	ands	r2, r1
 800506a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	4013      	ands	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005076:	4b2d      	ldr	r3, [pc, #180]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507a:	2203      	movs	r2, #3
 800507c:	4393      	bics	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	4b29      	ldr	r3, [pc, #164]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005086:	430a      	orrs	r2, r1
 8005088:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2202      	movs	r2, #2
 8005090:	4013      	ands	r3, r2
 8005092:	d009      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005094:	4b25      	ldr	r3, [pc, #148]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	4a29      	ldr	r2, [pc, #164]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800509a:	4013      	ands	r3, r2
 800509c:	0019      	movs	r1, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	4b22      	ldr	r3, [pc, #136]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050a4:	430a      	orrs	r2, r1
 80050a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2220      	movs	r2, #32
 80050ae:	4013      	ands	r3, r2
 80050b0:	d008      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050b2:	4b1e      	ldr	r3, [pc, #120]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	0899      	lsrs	r1, r3, #2
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050c0:	430a      	orrs	r2, r1
 80050c2:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2208      	movs	r2, #8
 80050ca:	4013      	ands	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ce:	4b17      	ldr	r3, [pc, #92]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	4b13      	ldr	r3, [pc, #76]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050de:	430a      	orrs	r2, r1
 80050e0:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2204      	movs	r2, #4
 80050e8:	4013      	ands	r3, r2
 80050ea:	d009      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80050ec:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050fc:	430a      	orrs	r2, r1
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2280      	movs	r2, #128	@ 0x80
 8005106:	4013      	ands	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800510a:	4b08      	ldr	r3, [pc, #32]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	22e0      	movs	r2, #224	@ 0xe0
 8005110:	4393      	bics	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800511a:	430a      	orrs	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
  }
  return status;
 800511e:	2312      	movs	r3, #18
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	781b      	ldrb	r3, [r3, #0]
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b006      	add	sp, #24
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021000 	.word	0x40021000
 8005130:	fffffcff 	.word	0xfffffcff
 8005134:	fffeffff 	.word	0xfffeffff
 8005138:	00001388 	.word	0x00001388
 800513c:	efffffff 	.word	0xefffffff
 8005140:	ffffcfff 	.word	0xffffcfff
 8005144:	ffffefff 	.word	0xffffefff
 8005148:	ffff3fff 	.word	0xffff3fff

0800514c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0a8      	b.n	80052b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	2382      	movs	r3, #130	@ 0x82
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	429a      	cmp	r2, r3
 8005170:	d009      	beq.n	8005186 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	61da      	str	r2, [r3, #28]
 8005178:	e005      	b.n	8005186 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	225d      	movs	r2, #93	@ 0x5d
 8005190:	5c9b      	ldrb	r3, [r3, r2]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d107      	bne.n	80051a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	225c      	movs	r2, #92	@ 0x5c
 800519c:	2100      	movs	r1, #0
 800519e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7fc fc46 	bl	8001a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	225d      	movs	r2, #93	@ 0x5d
 80051ac:	2102      	movs	r1, #2
 80051ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2140      	movs	r1, #64	@ 0x40
 80051bc:	438a      	bics	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	23e0      	movs	r3, #224	@ 0xe0
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d902      	bls.n	80051d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e002      	b.n	80051d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051d2:	2380      	movs	r3, #128	@ 0x80
 80051d4:	015b      	lsls	r3, r3, #5
 80051d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	23f0      	movs	r3, #240	@ 0xf0
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d008      	beq.n	80051f6 <HAL_SPI_Init+0xaa>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	23e0      	movs	r3, #224	@ 0xe0
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d002      	beq.n	80051f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	2382      	movs	r3, #130	@ 0x82
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	401a      	ands	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6899      	ldr	r1, [r3, #8]
 8005204:	2384      	movs	r3, #132	@ 0x84
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	400b      	ands	r3, r1
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2102      	movs	r1, #2
 8005212:	400b      	ands	r3, r1
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2101      	movs	r1, #1
 800521c:	400b      	ands	r3, r1
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6999      	ldr	r1, [r3, #24]
 8005224:	2380      	movs	r3, #128	@ 0x80
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	400b      	ands	r3, r1
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	2138      	movs	r1, #56	@ 0x38
 8005232:	400b      	ands	r3, r1
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	2180      	movs	r1, #128	@ 0x80
 800523c:	400b      	ands	r3, r1
 800523e:	431a      	orrs	r2, r3
 8005240:	0011      	movs	r1, r2
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005246:	2380      	movs	r3, #128	@ 0x80
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	401a      	ands	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	2204      	movs	r2, #4
 800525c:	401a      	ands	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	2110      	movs	r1, #16
 8005264:	400b      	ands	r3, r1
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526c:	2108      	movs	r1, #8
 800526e:	400b      	ands	r3, r1
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68d9      	ldr	r1, [r3, #12]
 8005276:	23f0      	movs	r3, #240	@ 0xf0
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	400b      	ands	r3, r1
 800527c:	431a      	orrs	r2, r3
 800527e:	0011      	movs	r1, r2
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	015b      	lsls	r3, r3, #5
 8005286:	401a      	ands	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4907      	ldr	r1, [pc, #28]	@ (80052b8 <HAL_SPI_Init+0x16c>)
 800529c:	400a      	ands	r2, r1
 800529e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	225d      	movs	r2, #93	@ 0x5d
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	fffff7ff 	.word	0xfffff7ff

080052bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e04a      	b.n	8005364 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	223d      	movs	r2, #61	@ 0x3d
 80052d2:	5c9b      	ldrb	r3, [r3, r2]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	223c      	movs	r2, #60	@ 0x3c
 80052de:	2100      	movs	r1, #0
 80052e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7fc fc4b 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	223d      	movs	r2, #61	@ 0x3d
 80052ee:	2102      	movs	r1, #2
 80052f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	0019      	movs	r1, r3
 80052fc:	0010      	movs	r0, r2
 80052fe:	f000 f98d 	bl	800561c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2248      	movs	r2, #72	@ 0x48
 8005306:	2101      	movs	r1, #1
 8005308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	223e      	movs	r2, #62	@ 0x3e
 800530e:	2101      	movs	r1, #1
 8005310:	5499      	strb	r1, [r3, r2]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	223f      	movs	r2, #63	@ 0x3f
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2240      	movs	r2, #64	@ 0x40
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2241      	movs	r2, #65	@ 0x41
 8005326:	2101      	movs	r1, #1
 8005328:	5499      	strb	r1, [r3, r2]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2242      	movs	r2, #66	@ 0x42
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2243      	movs	r2, #67	@ 0x43
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2244      	movs	r2, #68	@ 0x44
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2245      	movs	r2, #69	@ 0x45
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2246      	movs	r2, #70	@ 0x46
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2247      	movs	r2, #71	@ 0x47
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223d      	movs	r2, #61	@ 0x3d
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e04a      	b.n	8005414 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	223d      	movs	r2, #61	@ 0x3d
 8005382:	5c9b      	ldrb	r3, [r3, r2]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d107      	bne.n	800539a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	223c      	movs	r2, #60	@ 0x3c
 800538e:	2100      	movs	r1, #0
 8005390:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0018      	movs	r0, r3
 8005396:	f7fc fbd3 	bl	8001b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	223d      	movs	r2, #61	@ 0x3d
 800539e:	2102      	movs	r1, #2
 80053a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	0019      	movs	r1, r3
 80053ac:	0010      	movs	r0, r2
 80053ae:	f000 f935 	bl	800561c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2248      	movs	r2, #72	@ 0x48
 80053b6:	2101      	movs	r1, #1
 80053b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	223e      	movs	r2, #62	@ 0x3e
 80053be:	2101      	movs	r1, #1
 80053c0:	5499      	strb	r1, [r3, r2]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	223f      	movs	r2, #63	@ 0x3f
 80053c6:	2101      	movs	r1, #1
 80053c8:	5499      	strb	r1, [r3, r2]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2240      	movs	r2, #64	@ 0x40
 80053ce:	2101      	movs	r1, #1
 80053d0:	5499      	strb	r1, [r3, r2]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2241      	movs	r2, #65	@ 0x41
 80053d6:	2101      	movs	r1, #1
 80053d8:	5499      	strb	r1, [r3, r2]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2242      	movs	r2, #66	@ 0x42
 80053de:	2101      	movs	r1, #1
 80053e0:	5499      	strb	r1, [r3, r2]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2243      	movs	r2, #67	@ 0x43
 80053e6:	2101      	movs	r1, #1
 80053e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2244      	movs	r2, #68	@ 0x44
 80053ee:	2101      	movs	r1, #1
 80053f0:	5499      	strb	r1, [r3, r2]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2245      	movs	r2, #69	@ 0x45
 80053f6:	2101      	movs	r1, #1
 80053f8:	5499      	strb	r1, [r3, r2]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2246      	movs	r2, #70	@ 0x46
 80053fe:	2101      	movs	r1, #1
 8005400:	5499      	strb	r1, [r3, r2]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2247      	movs	r2, #71	@ 0x47
 8005406:	2101      	movs	r1, #1
 8005408:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	223d      	movs	r2, #61	@ 0x3d
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b002      	add	sp, #8
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2317      	movs	r3, #23
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	223c      	movs	r2, #60	@ 0x3c
 8005434:	5c9b      	ldrb	r3, [r3, r2]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_TIM_PWM_ConfigChannel+0x22>
 800543a:	2302      	movs	r3, #2
 800543c:	e0e5      	b.n	800560a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	223c      	movs	r2, #60	@ 0x3c
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b14      	cmp	r3, #20
 800544a:	d900      	bls.n	800544e <HAL_TIM_PWM_ConfigChannel+0x32>
 800544c:	e0d1      	b.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	009a      	lsls	r2, r3, #2
 8005452:	4b70      	ldr	r3, [pc, #448]	@ (8005614 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005454:	18d3      	adds	r3, r2, r3
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0011      	movs	r1, r2
 8005462:	0018      	movs	r0, r3
 8005464:	f000 f95e 	bl	8005724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2108      	movs	r1, #8
 8005474:	430a      	orrs	r2, r1
 8005476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2104      	movs	r1, #4
 8005484:	438a      	bics	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6999      	ldr	r1, [r3, #24]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	619a      	str	r2, [r3, #24]
      break;
 800549a:	e0af      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	0011      	movs	r1, r2
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 f9bd 	bl	8005824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2180      	movs	r1, #128	@ 0x80
 80054b6:	0109      	lsls	r1, r1, #4
 80054b8:	430a      	orrs	r2, r1
 80054ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4954      	ldr	r1, [pc, #336]	@ (8005618 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6999      	ldr	r1, [r3, #24]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	619a      	str	r2, [r3, #24]
      break;
 80054e0:	e08c      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	0011      	movs	r1, r2
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 fa18 	bl	8005920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2108      	movs	r1, #8
 80054fc:	430a      	orrs	r2, r1
 80054fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2104      	movs	r1, #4
 800550c:	438a      	bics	r2, r1
 800550e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69d9      	ldr	r1, [r3, #28]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	61da      	str	r2, [r3, #28]
      break;
 8005522:	e06b      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	0011      	movs	r1, r2
 800552c:	0018      	movs	r0, r3
 800552e:	f000 fa79 	bl	8005a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2180      	movs	r1, #128	@ 0x80
 800553e:	0109      	lsls	r1, r1, #4
 8005540:	430a      	orrs	r2, r1
 8005542:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4932      	ldr	r1, [pc, #200]	@ (8005618 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005550:	400a      	ands	r2, r1
 8005552:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69d9      	ldr	r1, [r3, #28]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	021a      	lsls	r2, r3, #8
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	61da      	str	r2, [r3, #28]
      break;
 8005568:	e048      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	0011      	movs	r1, r2
 8005572:	0018      	movs	r0, r3
 8005574:	f000 faba 	bl	8005aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2108      	movs	r1, #8
 8005584:	430a      	orrs	r2, r1
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2104      	movs	r1, #4
 8005594:	438a      	bics	r2, r1
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055aa:	e027      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	0011      	movs	r1, r2
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 faf3 	bl	8005ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2180      	movs	r1, #128	@ 0x80
 80055c6:	0109      	lsls	r1, r1, #4
 80055c8:	430a      	orrs	r2, r1
 80055ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4910      	ldr	r1, [pc, #64]	@ (8005618 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80055d8:	400a      	ands	r2, r1
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	021a      	lsls	r2, r3, #8
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055f0:	e004      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80055f2:	2317      	movs	r3, #23
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
      break;
 80055fa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	223c      	movs	r2, #60	@ 0x3c
 8005600:	2100      	movs	r1, #0
 8005602:	5499      	strb	r1, [r3, r2]

  return status;
 8005604:	2317      	movs	r3, #23
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	781b      	ldrb	r3, [r3, #0]
}
 800560a:	0018      	movs	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	b006      	add	sp, #24
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	08007cd4 	.word	0x08007cd4
 8005618:	fffffbff 	.word	0xfffffbff

0800561c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a37      	ldr	r2, [pc, #220]	@ (800570c <TIM_Base_SetConfig+0xf0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d008      	beq.n	8005646 <TIM_Base_SetConfig+0x2a>
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	2380      	movs	r3, #128	@ 0x80
 8005638:	05db      	lsls	r3, r3, #23
 800563a:	429a      	cmp	r2, r3
 800563c:	d003      	beq.n	8005646 <TIM_Base_SetConfig+0x2a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a33      	ldr	r2, [pc, #204]	@ (8005710 <TIM_Base_SetConfig+0xf4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2270      	movs	r2, #112	@ 0x70
 800564a:	4393      	bics	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a2c      	ldr	r2, [pc, #176]	@ (800570c <TIM_Base_SetConfig+0xf0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d014      	beq.n	800568a <TIM_Base_SetConfig+0x6e>
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	2380      	movs	r3, #128	@ 0x80
 8005664:	05db      	lsls	r3, r3, #23
 8005666:	429a      	cmp	r2, r3
 8005668:	d00f      	beq.n	800568a <TIM_Base_SetConfig+0x6e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a28      	ldr	r2, [pc, #160]	@ (8005710 <TIM_Base_SetConfig+0xf4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_Base_SetConfig+0x6e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a27      	ldr	r2, [pc, #156]	@ (8005714 <TIM_Base_SetConfig+0xf8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_Base_SetConfig+0x6e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a26      	ldr	r2, [pc, #152]	@ (8005718 <TIM_Base_SetConfig+0xfc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0x6e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a25      	ldr	r2, [pc, #148]	@ (800571c <TIM_Base_SetConfig+0x100>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a24      	ldr	r2, [pc, #144]	@ (8005720 <TIM_Base_SetConfig+0x104>)
 800568e:	4013      	ands	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2280      	movs	r2, #128	@ 0x80
 80056a0:	4393      	bics	r3, r2
 80056a2:	001a      	movs	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a11      	ldr	r2, [pc, #68]	@ (800570c <TIM_Base_SetConfig+0xf0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_Base_SetConfig+0xbe>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <TIM_Base_SetConfig+0xfc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_Base_SetConfig+0xbe>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a11      	ldr	r2, [pc, #68]	@ (800571c <TIM_Base_SetConfig+0x100>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d103      	bne.n	80056e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2201      	movs	r2, #1
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d106      	bne.n	8005702 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2201      	movs	r2, #1
 80056fa:	4393      	bics	r3, r2
 80056fc:	001a      	movs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	611a      	str	r2, [r3, #16]
  }
}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	46bd      	mov	sp, r7
 8005706:	b004      	add	sp, #16
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	40012c00 	.word	0x40012c00
 8005710:	40000400 	.word	0x40000400
 8005714:	40002000 	.word	0x40002000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800
 8005720:	fffffcff 	.word	0xfffffcff

08005724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	2201      	movs	r2, #1
 800573a:	4393      	bics	r3, r2
 800573c:	001a      	movs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a2e      	ldr	r2, [pc, #184]	@ (800580c <TIM_OC1_SetConfig+0xe8>)
 8005752:	4013      	ands	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2203      	movs	r2, #3
 800575a:	4393      	bics	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2202      	movs	r2, #2
 800576c:	4393      	bics	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a24      	ldr	r2, [pc, #144]	@ (8005810 <TIM_OC1_SetConfig+0xec>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_OC1_SetConfig+0x6e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a23      	ldr	r2, [pc, #140]	@ (8005814 <TIM_OC1_SetConfig+0xf0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC1_SetConfig+0x6e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a22      	ldr	r2, [pc, #136]	@ (8005818 <TIM_OC1_SetConfig+0xf4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10c      	bne.n	80057ac <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2208      	movs	r2, #8
 8005796:	4393      	bics	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2204      	movs	r2, #4
 80057a8:	4393      	bics	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a18      	ldr	r2, [pc, #96]	@ (8005810 <TIM_OC1_SetConfig+0xec>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC1_SetConfig+0xa0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a17      	ldr	r2, [pc, #92]	@ (8005814 <TIM_OC1_SetConfig+0xf0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC1_SetConfig+0xa0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a16      	ldr	r2, [pc, #88]	@ (8005818 <TIM_OC1_SetConfig+0xf4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d111      	bne.n	80057e8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4a15      	ldr	r2, [pc, #84]	@ (800581c <TIM_OC1_SetConfig+0xf8>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4a14      	ldr	r2, [pc, #80]	@ (8005820 <TIM_OC1_SetConfig+0xfc>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	46bd      	mov	sp, r7
 8005806:	b006      	add	sp, #24
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	fffeff8f 	.word	0xfffeff8f
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800
 800581c:	fffffeff 	.word	0xfffffeff
 8005820:	fffffdff 	.word	0xfffffdff

08005824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	2210      	movs	r2, #16
 800583a:	4393      	bics	r3, r2
 800583c:	001a      	movs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4a2c      	ldr	r2, [pc, #176]	@ (8005904 <TIM_OC2_SetConfig+0xe0>)
 8005852:	4013      	ands	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a2b      	ldr	r2, [pc, #172]	@ (8005908 <TIM_OC2_SetConfig+0xe4>)
 800585a:	4013      	ands	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2220      	movs	r2, #32
 800586e:	4393      	bics	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a22      	ldr	r2, [pc, #136]	@ (800590c <TIM_OC2_SetConfig+0xe8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10d      	bne.n	80058a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2280      	movs	r2, #128	@ 0x80
 800588a:	4393      	bics	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2240      	movs	r2, #64	@ 0x40
 800589e:	4393      	bics	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a19      	ldr	r2, [pc, #100]	@ (800590c <TIM_OC2_SetConfig+0xe8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_OC2_SetConfig+0x96>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a18      	ldr	r2, [pc, #96]	@ (8005910 <TIM_OC2_SetConfig+0xec>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC2_SetConfig+0x96>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a17      	ldr	r2, [pc, #92]	@ (8005914 <TIM_OC2_SetConfig+0xf0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d113      	bne.n	80058e2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4a16      	ldr	r2, [pc, #88]	@ (8005918 <TIM_OC2_SetConfig+0xf4>)
 80058be:	4013      	ands	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4a15      	ldr	r2, [pc, #84]	@ (800591c <TIM_OC2_SetConfig+0xf8>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	46c0      	nop			@ (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b006      	add	sp, #24
 8005902:	bd80      	pop	{r7, pc}
 8005904:	feff8fff 	.word	0xfeff8fff
 8005908:	fffffcff 	.word	0xfffffcff
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800
 8005918:	fffffbff 	.word	0xfffffbff
 800591c:	fffff7ff 	.word	0xfffff7ff

08005920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	4a31      	ldr	r2, [pc, #196]	@ (80059fc <TIM_OC3_SetConfig+0xdc>)
 8005936:	401a      	ands	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a00 <TIM_OC3_SetConfig+0xe0>)
 800594c:	4013      	ands	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2203      	movs	r2, #3
 8005954:	4393      	bics	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	4a27      	ldr	r2, [pc, #156]	@ (8005a04 <TIM_OC3_SetConfig+0xe4>)
 8005966:	4013      	ands	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a23      	ldr	r2, [pc, #140]	@ (8005a08 <TIM_OC3_SetConfig+0xe8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10d      	bne.n	800599a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	4a22      	ldr	r2, [pc, #136]	@ (8005a0c <TIM_OC3_SetConfig+0xec>)
 8005982:	4013      	ands	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <TIM_OC3_SetConfig+0xf0>)
 8005996:	4013      	ands	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a08 <TIM_OC3_SetConfig+0xe8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <TIM_OC3_SetConfig+0x92>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <TIM_OC3_SetConfig+0xf4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC3_SetConfig+0x92>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005a18 <TIM_OC3_SetConfig+0xf8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d113      	bne.n	80059da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4a19      	ldr	r2, [pc, #100]	@ (8005a1c <TIM_OC3_SetConfig+0xfc>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4a18      	ldr	r2, [pc, #96]	@ (8005a20 <TIM_OC3_SetConfig+0x100>)
 80059be:	4013      	ands	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	46c0      	nop			@ (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b006      	add	sp, #24
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	fffffeff 	.word	0xfffffeff
 8005a00:	fffeff8f 	.word	0xfffeff8f
 8005a04:	fffffdff 	.word	0xfffffdff
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	fffff7ff 	.word	0xfffff7ff
 8005a10:	fffffbff 	.word	0xfffffbff
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800
 8005a1c:	ffffefff 	.word	0xffffefff
 8005a20:	ffffdfff 	.word	0xffffdfff

08005a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	4a24      	ldr	r2, [pc, #144]	@ (8005acc <TIM_OC4_SetConfig+0xa8>)
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a20      	ldr	r2, [pc, #128]	@ (8005ad0 <TIM_OC4_SetConfig+0xac>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad4 <TIM_OC4_SetConfig+0xb0>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad8 <TIM_OC4_SetConfig+0xb4>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	031b      	lsls	r3, r3, #12
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a17      	ldr	r2, [pc, #92]	@ (8005adc <TIM_OC4_SetConfig+0xb8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d007      	beq.n	8005a94 <TIM_OC4_SetConfig+0x70>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a16      	ldr	r2, [pc, #88]	@ (8005ae0 <TIM_OC4_SetConfig+0xbc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC4_SetConfig+0x70>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ae4 <TIM_OC4_SetConfig+0xc0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d109      	bne.n	8005aa8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4a14      	ldr	r2, [pc, #80]	@ (8005ae8 <TIM_OC4_SetConfig+0xc4>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	46c0      	nop			@ (mov r8, r8)
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b006      	add	sp, #24
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	ffffefff 	.word	0xffffefff
 8005ad0:	feff8fff 	.word	0xfeff8fff
 8005ad4:	fffffcff 	.word	0xfffffcff
 8005ad8:	ffffdfff 	.word	0xffffdfff
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800
 8005ae8:	ffffbfff 	.word	0xffffbfff

08005aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	4a21      	ldr	r2, [pc, #132]	@ (8005b88 <TIM_OC5_SetConfig+0x9c>)
 8005b02:	401a      	ands	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a1d      	ldr	r2, [pc, #116]	@ (8005b8c <TIM_OC5_SetConfig+0xa0>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4a19      	ldr	r2, [pc, #100]	@ (8005b90 <TIM_OC5_SetConfig+0xa4>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <TIM_OC5_SetConfig+0xa8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <TIM_OC5_SetConfig+0x66>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a14      	ldr	r2, [pc, #80]	@ (8005b98 <TIM_OC5_SetConfig+0xac>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_OC5_SetConfig+0x66>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <TIM_OC5_SetConfig+0xb0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d109      	bne.n	8005b66 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4a0c      	ldr	r2, [pc, #48]	@ (8005b88 <TIM_OC5_SetConfig+0x9c>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	46c0      	nop			@ (mov r8, r8)
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b006      	add	sp, #24
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	fffeffff 	.word	0xfffeffff
 8005b8c:	fffeff8f 	.word	0xfffeff8f
 8005b90:	fffdffff 	.word	0xfffdffff
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	@ (8005c40 <TIM_OC6_SetConfig+0xa0>)
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a1e      	ldr	r2, [pc, #120]	@ (8005c44 <TIM_OC6_SetConfig+0xa4>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4a1a      	ldr	r2, [pc, #104]	@ (8005c48 <TIM_OC6_SetConfig+0xa8>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	051b      	lsls	r3, r3, #20
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	@ (8005c4c <TIM_OC6_SetConfig+0xac>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_OC6_SetConfig+0x68>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a15      	ldr	r2, [pc, #84]	@ (8005c50 <TIM_OC6_SetConfig+0xb0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC6_SetConfig+0x68>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a14      	ldr	r2, [pc, #80]	@ (8005c54 <TIM_OC6_SetConfig+0xb4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d109      	bne.n	8005c1c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4a13      	ldr	r2, [pc, #76]	@ (8005c58 <TIM_OC6_SetConfig+0xb8>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b006      	add	sp, #24
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	ffefffff 	.word	0xffefffff
 8005c44:	feff8fff 	.word	0xfeff8fff
 8005c48:	ffdfffff 	.word	0xffdfffff
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800
 8005c58:	fffbffff 	.word	0xfffbffff

08005c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	223c      	movs	r2, #60	@ 0x3c
 8005c6a:	5c9b      	ldrb	r3, [r3, r2]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e050      	b.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	223c      	movs	r2, #60	@ 0x3c
 8005c78:	2101      	movs	r1, #1
 8005c7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	223d      	movs	r2, #61	@ 0x3d
 8005c80:	2102      	movs	r1, #2
 8005c82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a21      	ldr	r2, [pc, #132]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d108      	bne.n	8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4a20      	ldr	r2, [pc, #128]	@ (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2270      	movs	r2, #112	@ 0x70
 8005cb4:	4393      	bics	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a14      	ldr	r2, [pc, #80]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00a      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	05db      	lsls	r3, r3, #23
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d004      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a10      	ldr	r2, [pc, #64]	@ (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10c      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2280      	movs	r2, #128	@ 0x80
 8005cee:	4393      	bics	r3, r2
 8005cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	223d      	movs	r2, #61	@ 0x3d
 8005d08:	2101      	movs	r1, #1
 8005d0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	223c      	movs	r2, #60	@ 0x3c
 8005d10:	2100      	movs	r1, #0
 8005d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b004      	add	sp, #16
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	ff0fffff 	.word	0xff0fffff
 8005d28:	40000400 	.word	0x40000400

08005d2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	223c      	movs	r2, #60	@ 0x3c
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e06f      	b.n	8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	223c      	movs	r2, #60	@ 0x3c
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	22ff      	movs	r2, #255	@ 0xff
 8005d54:	4393      	bics	r3, r2
 8005d56:	001a      	movs	r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4a33      	ldr	r2, [pc, #204]	@ (8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005d64:	401a      	ands	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4a30      	ldr	r2, [pc, #192]	@ (8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005d72:	401a      	ands	r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005d80:	401a      	ands	r2, r3
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005d8e:	401a      	ands	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a29      	ldr	r2, [pc, #164]	@ (8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005d9c:	401a      	ands	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a26      	ldr	r2, [pc, #152]	@ (8005e44 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005daa:	401a      	ands	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a24      	ldr	r2, [pc, #144]	@ (8005e48 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005db8:	401a      	ands	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	041b      	lsls	r3, r3, #16
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	@ (8005e4c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005dc8:	401a      	ands	r2, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d11c      	bne.n	8005e16 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005de0:	401a      	ands	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de6:	051b      	lsls	r3, r3, #20
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a1a      	ldr	r2, [pc, #104]	@ (8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005df0:	401a      	ands	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a17      	ldr	r2, [pc, #92]	@ (8005e5c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005dfe:	401a      	ands	r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a15      	ldr	r2, [pc, #84]	@ (8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005e0c:	401a      	ands	r2, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	223c      	movs	r2, #60	@ 0x3c
 8005e22:	2100      	movs	r1, #0
 8005e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b004      	add	sp, #16
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	fffffcff 	.word	0xfffffcff
 8005e34:	fffffbff 	.word	0xfffffbff
 8005e38:	fffff7ff 	.word	0xfffff7ff
 8005e3c:	ffffefff 	.word	0xffffefff
 8005e40:	ffffdfff 	.word	0xffffdfff
 8005e44:	ffffbfff 	.word	0xffffbfff
 8005e48:	fff0ffff 	.word	0xfff0ffff
 8005e4c:	efffffff 	.word	0xefffffff
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	ff0fffff 	.word	0xff0fffff
 8005e58:	feffffff 	.word	0xfeffffff
 8005e5c:	fdffffff 	.word	0xfdffffff
 8005e60:	dfffffff 	.word	0xdfffffff

08005e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	@ 0x28
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	1dbb      	adds	r3, r7, #6
 8005e72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2288      	movs	r2, #136	@ 0x88
 8005e78:	589b      	ldr	r3, [r3, r2]
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d000      	beq.n	8005e80 <HAL_UART_Transmit+0x1c>
 8005e7e:	e090      	b.n	8005fa2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_UART_Transmit+0x2a>
 8005e86:	1dbb      	adds	r3, r7, #6
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e088      	b.n	8005fa4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	2380      	movs	r3, #128	@ 0x80
 8005e98:	015b      	lsls	r3, r3, #5
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d109      	bne.n	8005eb2 <HAL_UART_Transmit+0x4e>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d105      	bne.n	8005eb2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d001      	beq.n	8005eb2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e078      	b.n	8005fa4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2290      	movs	r2, #144	@ 0x90
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2288      	movs	r2, #136	@ 0x88
 8005ebe:	2121      	movs	r1, #33	@ 0x21
 8005ec0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ec2:	f7fc f89b 	bl	8001ffc <HAL_GetTick>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1dba      	adds	r2, r7, #6
 8005ece:	2154      	movs	r1, #84	@ 0x54
 8005ed0:	8812      	ldrh	r2, [r2, #0]
 8005ed2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1dba      	adds	r2, r7, #6
 8005ed8:	2156      	movs	r1, #86	@ 0x56
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	2380      	movs	r3, #128	@ 0x80
 8005ee4:	015b      	lsls	r3, r3, #5
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d108      	bne.n	8005efc <HAL_UART_Transmit+0x98>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e003      	b.n	8005f04 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f04:	e030      	b.n	8005f68 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	0013      	movs	r3, r2
 8005f10:	2200      	movs	r2, #0
 8005f12:	2180      	movs	r1, #128	@ 0x80
 8005f14:	f000 ffc8 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 8005f18:	1e03      	subs	r3, r0, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2288      	movs	r2, #136	@ 0x88
 8005f20:	2120      	movs	r1, #32
 8005f22:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e03d      	b.n	8005fa4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	001a      	movs	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	05d2      	lsls	r2, r2, #23
 8005f3a:	0dd2      	lsrs	r2, r2, #23
 8005f3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	3302      	adds	r3, #2
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	e007      	b.n	8005f56 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	3301      	adds	r3, #1
 8005f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2256      	movs	r2, #86	@ 0x56
 8005f5a:	5a9b      	ldrh	r3, [r3, r2]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b299      	uxth	r1, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2256      	movs	r2, #86	@ 0x56
 8005f66:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2256      	movs	r2, #86	@ 0x56
 8005f6c:	5a9b      	ldrh	r3, [r3, r2]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1c8      	bne.n	8005f06 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	0013      	movs	r3, r2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2140      	movs	r1, #64	@ 0x40
 8005f82:	f000 ff91 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 8005f86:	1e03      	subs	r3, r0, #0
 8005f88:	d005      	beq.n	8005f96 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2288      	movs	r2, #136	@ 0x88
 8005f8e:	2120      	movs	r1, #32
 8005f90:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e006      	b.n	8005fa4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2288      	movs	r2, #136	@ 0x88
 8005f9a:	2120      	movs	r1, #32
 8005f9c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e000      	b.n	8005fa4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
  }
}
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b008      	add	sp, #32
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b098      	sub	sp, #96	@ 0x60
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8005fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			@ (mov r8, r8)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	498a      	ldr	r1, [pc, #552]	@ (8006204 <HAL_UART_Abort_IT+0x258>)
 8005fda:	400a      	ands	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fea:	f3ef 8310 	mrs	r3, PRIMASK
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8005ff2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ffa:	f383 8810 	msr	PRIMASK, r3
}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	497f      	ldr	r1, [pc, #508]	@ (8006208 <HAL_UART_Abort_IT+0x25c>)
 800600c:	400a      	ands	r2, r1
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006012:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006016:	f383 8810 	msr	PRIMASK, r3
}
 800601a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d118      	bne.n	8006056 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006024:	f3ef 8310 	mrs	r3, PRIMASK
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800602c:	653b      	str	r3, [r7, #80]	@ 0x50
 800602e:	2301      	movs	r3, #1
 8006030:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	f383 8810 	msr	PRIMASK, r3
}
 8006038:	46c0      	nop			@ (mov r8, r8)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2110      	movs	r1, #16
 8006046:	438a      	bics	r2, r1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	f383 8810 	msr	PRIMASK, r3
}
 8006054:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00f      	beq.n	800607e <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2280      	movs	r2, #128	@ 0x80
 8006066:	4013      	ands	r3, r2
 8006068:	2b80      	cmp	r3, #128	@ 0x80
 800606a:	d104      	bne.n	8006076 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006070:	4a66      	ldr	r2, [pc, #408]	@ (800620c <HAL_UART_Abort_IT+0x260>)
 8006072:	639a      	str	r2, [r3, #56]	@ 0x38
 8006074:	e003      	b.n	800607e <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800607a:	2200      	movs	r2, #0
 800607c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2280      	movs	r2, #128	@ 0x80
 8006082:	589b      	ldr	r3, [r3, r2]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d011      	beq.n	80060ac <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2240      	movs	r2, #64	@ 0x40
 8006090:	4013      	ands	r3, r2
 8006092:	2b40      	cmp	r3, #64	@ 0x40
 8006094:	d105      	bne.n	80060a2 <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2280      	movs	r2, #128	@ 0x80
 800609a:	589b      	ldr	r3, [r3, r2]
 800609c:	4a5c      	ldr	r2, [pc, #368]	@ (8006210 <HAL_UART_Abort_IT+0x264>)
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38
 80060a0:	e004      	b.n	80060ac <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2280      	movs	r2, #128	@ 0x80
 80060a6:	589b      	ldr	r3, [r3, r2]
 80060a8:	2200      	movs	r2, #0
 80060aa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2280      	movs	r2, #128	@ 0x80
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d12a      	bne.n	8006110 <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	61bb      	str	r3, [r7, #24]
  return(result);
 80060c0:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c4:	2301      	movs	r3, #1
 80060c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f383 8810 	msr	PRIMASK, r3
}
 80060ce:	46c0      	nop			@ (mov r8, r8)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2180      	movs	r1, #128	@ 0x80
 80060dc:	438a      	bics	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7fd f86d 	bl	80031d8 <HAL_DMA_Abort_IT>
 80060fe:	1e03      	subs	r3, r0, #0
 8006100:	d004      	beq.n	800610c <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006106:	2200      	movs	r2, #0
 8006108:	639a      	str	r2, [r3, #56]	@ 0x38
 800610a:	e001      	b.n	8006110 <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2240      	movs	r2, #64	@ 0x40
 8006118:	4013      	ands	r3, r2
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d12f      	bne.n	800617e <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800611e:	f3ef 8310 	mrs	r3, PRIMASK
 8006122:	60fb      	str	r3, [r7, #12]
  return(result);
 8006124:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006128:	2301      	movs	r3, #1
 800612a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f383 8810 	msr	PRIMASK, r3
}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2140      	movs	r1, #64	@ 0x40
 8006140:	438a      	bics	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f383 8810 	msr	PRIMASK, r3
}
 800614e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2280      	movs	r2, #128	@ 0x80
 8006154:	589b      	ldr	r3, [r3, r2]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d011      	beq.n	800617e <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2280      	movs	r2, #128	@ 0x80
 800615e:	589b      	ldr	r3, [r3, r2]
 8006160:	0018      	movs	r0, r3
 8006162:	f7fd f839 	bl	80031d8 <HAL_DMA_Abort_IT>
 8006166:	1e03      	subs	r3, r0, #0
 8006168:	d007      	beq.n	800617a <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2280      	movs	r2, #128	@ 0x80
 800616e:	589b      	ldr	r3, [r3, r2]
 8006170:	2200      	movs	r2, #0
 8006172:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8006174:	2301      	movs	r3, #1
 8006176:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006178:	e001      	b.n	800617e <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800617e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d13a      	bne.n	80061fa <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2256      	movs	r2, #86	@ 0x56
 8006188:	2100      	movs	r1, #0
 800618a:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	225e      	movs	r2, #94	@ 0x5e
 8006190:	2100      	movs	r1, #0
 8006192:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2290      	movs	r2, #144	@ 0x90
 80061a4:	2100      	movs	r1, #0
 80061a6:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	220f      	movs	r2, #15
 80061ae:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	059b      	lsls	r3, r3, #22
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d107      	bne.n	80061cc <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2110      	movs	r1, #16
 80061c8:	430a      	orrs	r2, r1
 80061ca:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2108      	movs	r1, #8
 80061d8:	430a      	orrs	r2, r1
 80061da:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2288      	movs	r2, #136	@ 0x88
 80061e0:	2120      	movs	r1, #32
 80061e2:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	228c      	movs	r2, #140	@ 0x8c
 80061e8:	2120      	movs	r1, #32
 80061ea:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	0018      	movs	r0, r3
 80061f6:	f000 fb73 	bl	80068e0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b018      	add	sp, #96	@ 0x60
 8006202:	bd80      	pop	{r7, pc}
 8006204:	fffffe1f 	.word	0xfffffe1f
 8006208:	ef7ffffe 	.word	0xef7ffffe
 800620c:	08007447 	.word	0x08007447
 8006210:	080074d7 	.word	0x080074d7

08006214 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006214:	b5b0      	push	{r4, r5, r7, lr}
 8006216:	b0aa      	sub	sp, #168	@ 0xa8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	22a4      	movs	r2, #164	@ 0xa4
 8006224:	18b9      	adds	r1, r7, r2
 8006226:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	20a0      	movs	r0, #160	@ 0xa0
 8006230:	1839      	adds	r1, r7, r0
 8006232:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	249c      	movs	r4, #156	@ 0x9c
 800623c:	1939      	adds	r1, r7, r4
 800623e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006240:	0011      	movs	r1, r2
 8006242:	18bb      	adds	r3, r7, r2
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4aa2      	ldr	r2, [pc, #648]	@ (80064d0 <HAL_UART_IRQHandler+0x2bc>)
 8006248:	4013      	ands	r3, r2
 800624a:	2298      	movs	r2, #152	@ 0x98
 800624c:	18bd      	adds	r5, r7, r2
 800624e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006250:	18bb      	adds	r3, r7, r2
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11a      	bne.n	800628e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006258:	187b      	adds	r3, r7, r1
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2220      	movs	r2, #32
 800625e:	4013      	ands	r3, r2
 8006260:	d015      	beq.n	800628e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006262:	183b      	adds	r3, r7, r0
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2220      	movs	r2, #32
 8006268:	4013      	ands	r3, r2
 800626a:	d105      	bne.n	8006278 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800626c:	193b      	adds	r3, r7, r4
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	2380      	movs	r3, #128	@ 0x80
 8006272:	055b      	lsls	r3, r3, #21
 8006274:	4013      	ands	r3, r2
 8006276:	d00a      	beq.n	800628e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800627c:	2b00      	cmp	r3, #0
 800627e:	d100      	bne.n	8006282 <HAL_UART_IRQHandler+0x6e>
 8006280:	e2fb      	b.n	800687a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	0010      	movs	r0, r2
 800628a:	4798      	blx	r3
      }
      return;
 800628c:	e2f5      	b.n	800687a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800628e:	2398      	movs	r3, #152	@ 0x98
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d100      	bne.n	800629a <HAL_UART_IRQHandler+0x86>
 8006298:	e122      	b.n	80064e0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800629a:	239c      	movs	r3, #156	@ 0x9c
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a8c      	ldr	r2, [pc, #560]	@ (80064d4 <HAL_UART_IRQHandler+0x2c0>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	d106      	bne.n	80062b4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062a6:	23a0      	movs	r3, #160	@ 0xa0
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a8a      	ldr	r2, [pc, #552]	@ (80064d8 <HAL_UART_IRQHandler+0x2c4>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	d100      	bne.n	80062b4 <HAL_UART_IRQHandler+0xa0>
 80062b2:	e115      	b.n	80064e0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062b4:	23a4      	movs	r3, #164	@ 0xa4
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2201      	movs	r2, #1
 80062bc:	4013      	ands	r3, r2
 80062be:	d012      	beq.n	80062e6 <HAL_UART_IRQHandler+0xd2>
 80062c0:	23a0      	movs	r3, #160	@ 0xa0
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	2380      	movs	r3, #128	@ 0x80
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	4013      	ands	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2201      	movs	r2, #1
 80062d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2290      	movs	r2, #144	@ 0x90
 80062da:	589b      	ldr	r3, [r3, r2]
 80062dc:	2201      	movs	r2, #1
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2190      	movs	r1, #144	@ 0x90
 80062e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e6:	23a4      	movs	r3, #164	@ 0xa4
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2202      	movs	r2, #2
 80062ee:	4013      	ands	r3, r2
 80062f0:	d011      	beq.n	8006316 <HAL_UART_IRQHandler+0x102>
 80062f2:	239c      	movs	r3, #156	@ 0x9c
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2201      	movs	r2, #1
 80062fa:	4013      	ands	r3, r2
 80062fc:	d00b      	beq.n	8006316 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2202      	movs	r2, #2
 8006304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2290      	movs	r2, #144	@ 0x90
 800630a:	589b      	ldr	r3, [r3, r2]
 800630c:	2204      	movs	r2, #4
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2190      	movs	r1, #144	@ 0x90
 8006314:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006316:	23a4      	movs	r3, #164	@ 0xa4
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2204      	movs	r2, #4
 800631e:	4013      	ands	r3, r2
 8006320:	d011      	beq.n	8006346 <HAL_UART_IRQHandler+0x132>
 8006322:	239c      	movs	r3, #156	@ 0x9c
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2201      	movs	r2, #1
 800632a:	4013      	ands	r3, r2
 800632c:	d00b      	beq.n	8006346 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2204      	movs	r2, #4
 8006334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2290      	movs	r2, #144	@ 0x90
 800633a:	589b      	ldr	r3, [r3, r2]
 800633c:	2202      	movs	r2, #2
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2190      	movs	r1, #144	@ 0x90
 8006344:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006346:	23a4      	movs	r3, #164	@ 0xa4
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2208      	movs	r2, #8
 800634e:	4013      	ands	r3, r2
 8006350:	d017      	beq.n	8006382 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006352:	23a0      	movs	r3, #160	@ 0xa0
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2220      	movs	r2, #32
 800635a:	4013      	ands	r3, r2
 800635c:	d105      	bne.n	800636a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800635e:	239c      	movs	r3, #156	@ 0x9c
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5b      	ldr	r2, [pc, #364]	@ (80064d4 <HAL_UART_IRQHandler+0x2c0>)
 8006366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006368:	d00b      	beq.n	8006382 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2208      	movs	r2, #8
 8006370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2290      	movs	r2, #144	@ 0x90
 8006376:	589b      	ldr	r3, [r3, r2]
 8006378:	2208      	movs	r2, #8
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2190      	movs	r1, #144	@ 0x90
 8006380:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006382:	23a4      	movs	r3, #164	@ 0xa4
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	4013      	ands	r3, r2
 800638e:	d013      	beq.n	80063b8 <HAL_UART_IRQHandler+0x1a4>
 8006390:	23a0      	movs	r3, #160	@ 0xa0
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	2380      	movs	r3, #128	@ 0x80
 8006398:	04db      	lsls	r3, r3, #19
 800639a:	4013      	ands	r3, r2
 800639c:	d00c      	beq.n	80063b8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2280      	movs	r2, #128	@ 0x80
 80063a4:	0112      	lsls	r2, r2, #4
 80063a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2290      	movs	r2, #144	@ 0x90
 80063ac:	589b      	ldr	r3, [r3, r2]
 80063ae:	2220      	movs	r2, #32
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2190      	movs	r1, #144	@ 0x90
 80063b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2290      	movs	r2, #144	@ 0x90
 80063bc:	589b      	ldr	r3, [r3, r2]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d100      	bne.n	80063c4 <HAL_UART_IRQHandler+0x1b0>
 80063c2:	e25c      	b.n	800687e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063c4:	23a4      	movs	r3, #164	@ 0xa4
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2220      	movs	r2, #32
 80063cc:	4013      	ands	r3, r2
 80063ce:	d015      	beq.n	80063fc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063d0:	23a0      	movs	r3, #160	@ 0xa0
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2220      	movs	r2, #32
 80063d8:	4013      	ands	r3, r2
 80063da:	d106      	bne.n	80063ea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063dc:	239c      	movs	r3, #156	@ 0x9c
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2380      	movs	r3, #128	@ 0x80
 80063e4:	055b      	lsls	r3, r3, #21
 80063e6:	4013      	ands	r3, r2
 80063e8:	d008      	beq.n	80063fc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	0010      	movs	r0, r2
 80063fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2290      	movs	r2, #144	@ 0x90
 8006400:	589b      	ldr	r3, [r3, r2]
 8006402:	2194      	movs	r1, #148	@ 0x94
 8006404:	187a      	adds	r2, r7, r1
 8006406:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2240      	movs	r2, #64	@ 0x40
 8006410:	4013      	ands	r3, r2
 8006412:	2b40      	cmp	r3, #64	@ 0x40
 8006414:	d004      	beq.n	8006420 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006416:	187b      	adds	r3, r7, r1
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2228      	movs	r2, #40	@ 0x28
 800641c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800641e:	d04c      	beq.n	80064ba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	0018      	movs	r0, r3
 8006424:	f000 fe96 	bl	8007154 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2240      	movs	r2, #64	@ 0x40
 8006430:	4013      	ands	r3, r2
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	d13c      	bne.n	80064b0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006436:	f3ef 8310 	mrs	r3, PRIMASK
 800643a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800643c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643e:	2090      	movs	r0, #144	@ 0x90
 8006440:	183a      	adds	r2, r7, r0
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	2301      	movs	r3, #1
 8006446:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800644a:	f383 8810 	msr	PRIMASK, r3
}
 800644e:	46c0      	nop			@ (mov r8, r8)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2140      	movs	r1, #64	@ 0x40
 800645c:	438a      	bics	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	183b      	adds	r3, r7, r0
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006468:	f383 8810 	msr	PRIMASK, r3
}
 800646c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2280      	movs	r2, #128	@ 0x80
 8006472:	589b      	ldr	r3, [r3, r2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d016      	beq.n	80064a6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2280      	movs	r2, #128	@ 0x80
 800647c:	589b      	ldr	r3, [r3, r2]
 800647e:	4a17      	ldr	r2, [pc, #92]	@ (80064dc <HAL_UART_IRQHandler+0x2c8>)
 8006480:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2280      	movs	r2, #128	@ 0x80
 8006486:	589b      	ldr	r3, [r3, r2]
 8006488:	0018      	movs	r0, r3
 800648a:	f7fc fea5 	bl	80031d8 <HAL_DMA_Abort_IT>
 800648e:	1e03      	subs	r3, r0, #0
 8006490:	d01c      	beq.n	80064cc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2280      	movs	r2, #128	@ 0x80
 8006496:	589b      	ldr	r3, [r3, r2]
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	2180      	movs	r1, #128	@ 0x80
 800649e:	5852      	ldr	r2, [r2, r1]
 80064a0:	0010      	movs	r0, r2
 80064a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	e012      	b.n	80064cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 fa11 	bl	80068d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ae:	e00d      	b.n	80064cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 fa0c 	bl	80068d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	e008      	b.n	80064cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0018      	movs	r0, r3
 80064be:	f000 fa07 	bl	80068d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2290      	movs	r2, #144	@ 0x90
 80064c6:	2100      	movs	r1, #0
 80064c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80064ca:	e1d8      	b.n	800687e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064cc:	46c0      	nop			@ (mov r8, r8)
    return;
 80064ce:	e1d6      	b.n	800687e <HAL_UART_IRQHandler+0x66a>
 80064d0:	0000080f 	.word	0x0000080f
 80064d4:	10000001 	.word	0x10000001
 80064d8:	04000120 	.word	0x04000120
 80064dc:	08007419 	.word	0x08007419

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d000      	beq.n	80064ea <HAL_UART_IRQHandler+0x2d6>
 80064e8:	e15d      	b.n	80067a6 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ea:	23a4      	movs	r3, #164	@ 0xa4
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2210      	movs	r2, #16
 80064f2:	4013      	ands	r3, r2
 80064f4:	d100      	bne.n	80064f8 <HAL_UART_IRQHandler+0x2e4>
 80064f6:	e156      	b.n	80067a6 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064f8:	23a0      	movs	r3, #160	@ 0xa0
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2210      	movs	r2, #16
 8006500:	4013      	ands	r3, r2
 8006502:	d100      	bne.n	8006506 <HAL_UART_IRQHandler+0x2f2>
 8006504:	e14f      	b.n	80067a6 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2210      	movs	r2, #16
 800650c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2240      	movs	r2, #64	@ 0x40
 8006516:	4013      	ands	r3, r2
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d000      	beq.n	800651e <HAL_UART_IRQHandler+0x30a>
 800651c:	e0c3      	b.n	80066a6 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2280      	movs	r2, #128	@ 0x80
 8006522:	589b      	ldr	r3, [r3, r2]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	217e      	movs	r1, #126	@ 0x7e
 800652a:	187b      	adds	r3, r7, r1
 800652c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800652e:	187b      	adds	r3, r7, r1
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d100      	bne.n	8006538 <HAL_UART_IRQHandler+0x324>
 8006536:	e097      	b.n	8006668 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	225c      	movs	r2, #92	@ 0x5c
 800653c:	5a9b      	ldrh	r3, [r3, r2]
 800653e:	187a      	adds	r2, r7, r1
 8006540:	8812      	ldrh	r2, [r2, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d300      	bcc.n	8006548 <HAL_UART_IRQHandler+0x334>
 8006546:	e08f      	b.n	8006668 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	187a      	adds	r2, r7, r1
 800654c:	215e      	movs	r1, #94	@ 0x5e
 800654e:	8812      	ldrh	r2, [r2, #0]
 8006550:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2280      	movs	r2, #128	@ 0x80
 8006556:	589b      	ldr	r3, [r3, r2]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2220      	movs	r2, #32
 800655e:	4013      	ands	r3, r2
 8006560:	d170      	bne.n	8006644 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006562:	f3ef 8310 	mrs	r3, PRIMASK
 8006566:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800656a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800656c:	2301      	movs	r3, #1
 800656e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006572:	f383 8810 	msr	PRIMASK, r3
}
 8006576:	46c0      	nop			@ (mov r8, r8)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	49c4      	ldr	r1, [pc, #784]	@ (8006894 <HAL_UART_IRQHandler+0x680>)
 8006584:	400a      	ands	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800658a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	f383 8810 	msr	PRIMASK, r3
}
 8006592:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006594:	f3ef 8310 	mrs	r3, PRIMASK
 8006598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	677b      	str	r3, [r7, #116]	@ 0x74
 800659e:	2301      	movs	r3, #1
 80065a0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a4:	f383 8810 	msr	PRIMASK, r3
}
 80065a8:	46c0      	nop			@ (mov r8, r8)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2101      	movs	r1, #1
 80065b6:	438a      	bics	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]
 80065ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065bc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c0:	f383 8810 	msr	PRIMASK, r3
}
 80065c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80065c6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80065cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80065d0:	2301      	movs	r3, #1
 80065d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d6:	f383 8810 	msr	PRIMASK, r3
}
 80065da:	46c0      	nop			@ (mov r8, r8)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2140      	movs	r1, #64	@ 0x40
 80065e8:	438a      	bics	r2, r1
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065f2:	f383 8810 	msr	PRIMASK, r3
}
 80065f6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	228c      	movs	r2, #140	@ 0x8c
 80065fc:	2120      	movs	r1, #32
 80065fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006606:	f3ef 8310 	mrs	r3, PRIMASK
 800660a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800660c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006610:	2301      	movs	r3, #1
 8006612:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006614:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006616:	f383 8810 	msr	PRIMASK, r3
}
 800661a:	46c0      	nop			@ (mov r8, r8)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2110      	movs	r1, #16
 8006628:	438a      	bics	r2, r1
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800662e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006632:	f383 8810 	msr	PRIMASK, r3
}
 8006636:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2280      	movs	r2, #128	@ 0x80
 800663c:	589b      	ldr	r3, [r3, r2]
 800663e:	0018      	movs	r0, r3
 8006640:	f7fc fd68 	bl	8003114 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	225c      	movs	r2, #92	@ 0x5c
 800664e:	5a9a      	ldrh	r2, [r3, r2]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	215e      	movs	r1, #94	@ 0x5e
 8006654:	5a5b      	ldrh	r3, [r3, r1]
 8006656:	b29b      	uxth	r3, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	b29a      	uxth	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0011      	movs	r1, r2
 8006660:	0018      	movs	r0, r3
 8006662:	f7fa fbd5 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006666:	e10c      	b.n	8006882 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	225c      	movs	r2, #92	@ 0x5c
 800666c:	5a9b      	ldrh	r3, [r3, r2]
 800666e:	227e      	movs	r2, #126	@ 0x7e
 8006670:	18ba      	adds	r2, r7, r2
 8006672:	8812      	ldrh	r2, [r2, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d000      	beq.n	800667a <HAL_UART_IRQHandler+0x466>
 8006678:	e103      	b.n	8006882 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2280      	movs	r2, #128	@ 0x80
 800667e:	589b      	ldr	r3, [r3, r2]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2220      	movs	r2, #32
 8006686:	4013      	ands	r3, r2
 8006688:	2b20      	cmp	r3, #32
 800668a:	d000      	beq.n	800668e <HAL_UART_IRQHandler+0x47a>
 800668c:	e0f9      	b.n	8006882 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	225c      	movs	r2, #92	@ 0x5c
 8006698:	5a9a      	ldrh	r2, [r3, r2]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	0011      	movs	r1, r2
 800669e:	0018      	movs	r0, r3
 80066a0:	f7fa fbb6 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
      return;
 80066a4:	e0ed      	b.n	8006882 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	225c      	movs	r2, #92	@ 0x5c
 80066aa:	5a99      	ldrh	r1, [r3, r2]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	225e      	movs	r2, #94	@ 0x5e
 80066b0:	5a9b      	ldrh	r3, [r3, r2]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	208e      	movs	r0, #142	@ 0x8e
 80066b6:	183b      	adds	r3, r7, r0
 80066b8:	1a8a      	subs	r2, r1, r2
 80066ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	225e      	movs	r2, #94	@ 0x5e
 80066c0:	5a9b      	ldrh	r3, [r3, r2]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d100      	bne.n	80066ca <HAL_UART_IRQHandler+0x4b6>
 80066c8:	e0dd      	b.n	8006886 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80066ca:	183b      	adds	r3, r7, r0
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d100      	bne.n	80066d4 <HAL_UART_IRQHandler+0x4c0>
 80066d2:	e0d8      	b.n	8006886 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80066d4:	f3ef 8310 	mrs	r3, PRIMASK
 80066d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80066da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066dc:	2488      	movs	r4, #136	@ 0x88
 80066de:	193a      	adds	r2, r7, r4
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	2301      	movs	r3, #1
 80066e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f383 8810 	msr	PRIMASK, r3
}
 80066ec:	46c0      	nop			@ (mov r8, r8)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4967      	ldr	r1, [pc, #412]	@ (8006898 <HAL_UART_IRQHandler+0x684>)
 80066fa:	400a      	ands	r2, r1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	193b      	adds	r3, r7, r4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f383 8810 	msr	PRIMASK, r3
}
 800670a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800670c:	f3ef 8310 	mrs	r3, PRIMASK
 8006710:	61bb      	str	r3, [r7, #24]
  return(result);
 8006712:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006714:	2484      	movs	r4, #132	@ 0x84
 8006716:	193a      	adds	r2, r7, r4
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	2301      	movs	r3, #1
 800671c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f383 8810 	msr	PRIMASK, r3
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	495a      	ldr	r1, [pc, #360]	@ (800689c <HAL_UART_IRQHandler+0x688>)
 8006732:	400a      	ands	r2, r1
 8006734:	609a      	str	r2, [r3, #8]
 8006736:	193b      	adds	r3, r7, r4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f383 8810 	msr	PRIMASK, r3
}
 8006742:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	228c      	movs	r2, #140	@ 0x8c
 8006748:	2120      	movs	r1, #32
 800674a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006758:	f3ef 8310 	mrs	r3, PRIMASK
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006760:	2480      	movs	r4, #128	@ 0x80
 8006762:	193a      	adds	r2, r7, r4
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	2301      	movs	r3, #1
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	f383 8810 	msr	PRIMASK, r3
}
 8006770:	46c0      	nop			@ (mov r8, r8)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2110      	movs	r1, #16
 800677e:	438a      	bics	r2, r1
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	193b      	adds	r3, r7, r4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678a:	f383 8810 	msr	PRIMASK, r3
}
 800678e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006796:	183b      	adds	r3, r7, r0
 8006798:	881a      	ldrh	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0011      	movs	r1, r2
 800679e:	0018      	movs	r0, r3
 80067a0:	f7fa fb36 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067a4:	e06f      	b.n	8006886 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067a6:	23a4      	movs	r3, #164	@ 0xa4
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	2380      	movs	r3, #128	@ 0x80
 80067ae:	035b      	lsls	r3, r3, #13
 80067b0:	4013      	ands	r3, r2
 80067b2:	d010      	beq.n	80067d6 <HAL_UART_IRQHandler+0x5c2>
 80067b4:	239c      	movs	r3, #156	@ 0x9c
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	2380      	movs	r3, #128	@ 0x80
 80067bc:	03db      	lsls	r3, r3, #15
 80067be:	4013      	ands	r3, r2
 80067c0:	d009      	beq.n	80067d6 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2280      	movs	r2, #128	@ 0x80
 80067c8:	0352      	lsls	r2, r2, #13
 80067ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 ff60 	bl	8007694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067d4:	e05a      	b.n	800688c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067d6:	23a4      	movs	r3, #164	@ 0xa4
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2280      	movs	r2, #128	@ 0x80
 80067de:	4013      	ands	r3, r2
 80067e0:	d016      	beq.n	8006810 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067e2:	23a0      	movs	r3, #160	@ 0xa0
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2280      	movs	r2, #128	@ 0x80
 80067ea:	4013      	ands	r3, r2
 80067ec:	d106      	bne.n	80067fc <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067ee:	239c      	movs	r3, #156	@ 0x9c
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	2380      	movs	r3, #128	@ 0x80
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	4013      	ands	r3, r2
 80067fa:	d009      	beq.n	8006810 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006800:	2b00      	cmp	r3, #0
 8006802:	d042      	beq.n	800688a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	0010      	movs	r0, r2
 800680c:	4798      	blx	r3
    }
    return;
 800680e:	e03c      	b.n	800688a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006810:	23a4      	movs	r3, #164	@ 0xa4
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2240      	movs	r2, #64	@ 0x40
 8006818:	4013      	ands	r3, r2
 800681a:	d00a      	beq.n	8006832 <HAL_UART_IRQHandler+0x61e>
 800681c:	23a0      	movs	r3, #160	@ 0xa0
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2240      	movs	r2, #64	@ 0x40
 8006824:	4013      	ands	r3, r2
 8006826:	d004      	beq.n	8006832 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0018      	movs	r0, r3
 800682c:	f000 fe94 	bl	8007558 <UART_EndTransmit_IT>
    return;
 8006830:	e02c      	b.n	800688c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006832:	23a4      	movs	r3, #164	@ 0xa4
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	2380      	movs	r3, #128	@ 0x80
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	4013      	ands	r3, r2
 800683e:	d00b      	beq.n	8006858 <HAL_UART_IRQHandler+0x644>
 8006840:	23a0      	movs	r3, #160	@ 0xa0
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	2380      	movs	r3, #128	@ 0x80
 8006848:	05db      	lsls	r3, r3, #23
 800684a:	4013      	ands	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0018      	movs	r0, r3
 8006852:	f000 ff2f 	bl	80076b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006856:	e019      	b.n	800688c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006858:	23a4      	movs	r3, #164	@ 0xa4
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	2380      	movs	r3, #128	@ 0x80
 8006860:	045b      	lsls	r3, r3, #17
 8006862:	4013      	ands	r3, r2
 8006864:	d012      	beq.n	800688c <HAL_UART_IRQHandler+0x678>
 8006866:	23a0      	movs	r3, #160	@ 0xa0
 8006868:	18fb      	adds	r3, r7, r3
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	da0d      	bge.n	800688c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	0018      	movs	r0, r3
 8006874:	f000 ff16 	bl	80076a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006878:	e008      	b.n	800688c <HAL_UART_IRQHandler+0x678>
      return;
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	e006      	b.n	800688c <HAL_UART_IRQHandler+0x678>
    return;
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	e004      	b.n	800688c <HAL_UART_IRQHandler+0x678>
      return;
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	e002      	b.n	800688c <HAL_UART_IRQHandler+0x678>
      return;
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	e000      	b.n	800688c <HAL_UART_IRQHandler+0x678>
    return;
 800688a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800688c:	46bd      	mov	sp, r7
 800688e:	b02a      	add	sp, #168	@ 0xa8
 8006890:	bdb0      	pop	{r4, r5, r7, pc}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	fffffeff 	.word	0xfffffeff
 8006898:	fffffedf 	.word	0xfffffedf
 800689c:	effffffe 	.word	0xeffffffe

080068a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068a8:	46c0      	nop			@ (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80068b8:	46c0      	nop			@ (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80068c8:	46c0      	nop			@ (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068d8:	46c0      	nop			@ (mov r8, r8)
 80068da:	46bd      	mov	sp, r7
 80068dc:	b002      	add	sp, #8
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80068e8:	46c0      	nop			@ (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b002      	add	sp, #8
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068f8:	231e      	movs	r3, #30
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4aab      	ldr	r2, [pc, #684]	@ (8006bcc <UART_SetConfig+0x2dc>)
 8006920:	4013      	ands	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	430a      	orrs	r2, r1
 800692c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4aa6      	ldr	r2, [pc, #664]	@ (8006bd0 <UART_SetConfig+0x2e0>)
 8006936:	4013      	ands	r3, r2
 8006938:	0019      	movs	r1, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4a9d      	ldr	r2, [pc, #628]	@ (8006bd4 <UART_SetConfig+0x2e4>)
 800695e:	4013      	ands	r3, r2
 8006960:	0019      	movs	r1, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	430a      	orrs	r2, r1
 800696a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	220f      	movs	r2, #15
 8006974:	4393      	bics	r3, r2
 8006976:	0019      	movs	r1, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a93      	ldr	r2, [pc, #588]	@ (8006bd8 <UART_SetConfig+0x2e8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d127      	bne.n	80069de <UART_SetConfig+0xee>
 800698e:	4b93      	ldr	r3, [pc, #588]	@ (8006bdc <UART_SetConfig+0x2ec>)
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	2203      	movs	r2, #3
 8006994:	4013      	ands	r3, r2
 8006996:	2b03      	cmp	r3, #3
 8006998:	d017      	beq.n	80069ca <UART_SetConfig+0xda>
 800699a:	d81b      	bhi.n	80069d4 <UART_SetConfig+0xe4>
 800699c:	2b02      	cmp	r3, #2
 800699e:	d00a      	beq.n	80069b6 <UART_SetConfig+0xc6>
 80069a0:	d818      	bhi.n	80069d4 <UART_SetConfig+0xe4>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <UART_SetConfig+0xbc>
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d00a      	beq.n	80069c0 <UART_SetConfig+0xd0>
 80069aa:	e013      	b.n	80069d4 <UART_SetConfig+0xe4>
 80069ac:	231f      	movs	r3, #31
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	e021      	b.n	80069fa <UART_SetConfig+0x10a>
 80069b6:	231f      	movs	r3, #31
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	2202      	movs	r2, #2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e01c      	b.n	80069fa <UART_SetConfig+0x10a>
 80069c0:	231f      	movs	r3, #31
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	2204      	movs	r2, #4
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	e017      	b.n	80069fa <UART_SetConfig+0x10a>
 80069ca:	231f      	movs	r3, #31
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	2208      	movs	r2, #8
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	e012      	b.n	80069fa <UART_SetConfig+0x10a>
 80069d4:	231f      	movs	r3, #31
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	2210      	movs	r2, #16
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	e00d      	b.n	80069fa <UART_SetConfig+0x10a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7f      	ldr	r2, [pc, #508]	@ (8006be0 <UART_SetConfig+0x2f0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d104      	bne.n	80069f2 <UART_SetConfig+0x102>
 80069e8:	231f      	movs	r3, #31
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e003      	b.n	80069fa <UART_SetConfig+0x10a>
 80069f2:	231f      	movs	r3, #31
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	2210      	movs	r2, #16
 80069f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	2380      	movs	r3, #128	@ 0x80
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d000      	beq.n	8006a08 <UART_SetConfig+0x118>
 8006a06:	e06f      	b.n	8006ae8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8006a08:	231f      	movs	r3, #31
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d01f      	beq.n	8006a52 <UART_SetConfig+0x162>
 8006a12:	dc22      	bgt.n	8006a5a <UART_SetConfig+0x16a>
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d017      	beq.n	8006a48 <UART_SetConfig+0x158>
 8006a18:	dc1f      	bgt.n	8006a5a <UART_SetConfig+0x16a>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <UART_SetConfig+0x134>
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d005      	beq.n	8006a2e <UART_SetConfig+0x13e>
 8006a22:	e01a      	b.n	8006a5a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fe fa7e 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	61bb      	str	r3, [r7, #24]
        break;
 8006a2c:	e01c      	b.n	8006a68 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006a2e:	4b6b      	ldr	r3, [pc, #428]	@ (8006bdc <UART_SetConfig+0x2ec>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	2207      	movs	r2, #7
 8006a36:	4013      	ands	r3, r2
 8006a38:	3301      	adds	r3, #1
 8006a3a:	0019      	movs	r1, r3
 8006a3c:	4869      	ldr	r0, [pc, #420]	@ (8006be4 <UART_SetConfig+0x2f4>)
 8006a3e:	f7f9 fb63 	bl	8000108 <__udivsi3>
 8006a42:	0003      	movs	r3, r0
 8006a44:	61bb      	str	r3, [r7, #24]
        break;
 8006a46:	e00f      	b.n	8006a68 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a48:	f7fe f9f6 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8006a4c:	0003      	movs	r3, r0
 8006a4e:	61bb      	str	r3, [r7, #24]
        break;
 8006a50:	e00a      	b.n	8006a68 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a52:	2380      	movs	r3, #128	@ 0x80
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	61bb      	str	r3, [r7, #24]
        break;
 8006a58:	e006      	b.n	8006a68 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a5e:	231e      	movs	r3, #30
 8006a60:	18fb      	adds	r3, r7, r3
 8006a62:	2201      	movs	r2, #1
 8006a64:	701a      	strb	r2, [r3, #0]
        break;
 8006a66:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d100      	bne.n	8006a70 <UART_SetConfig+0x180>
 8006a6e:	e097      	b.n	8006ba0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a74:	4b5c      	ldr	r3, [pc, #368]	@ (8006be8 <UART_SetConfig+0x2f8>)
 8006a76:	0052      	lsls	r2, r2, #1
 8006a78:	5ad3      	ldrh	r3, [r2, r3]
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	69b8      	ldr	r0, [r7, #24]
 8006a7e:	f7f9 fb43 	bl	8000108 <__udivsi3>
 8006a82:	0003      	movs	r3, r0
 8006a84:	005a      	lsls	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	18d2      	adds	r2, r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	0019      	movs	r1, r3
 8006a94:	0010      	movs	r0, r2
 8006a96:	f7f9 fb37 	bl	8000108 <__udivsi3>
 8006a9a:	0003      	movs	r3, r0
 8006a9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b0f      	cmp	r3, #15
 8006aa2:	d91c      	bls.n	8006ade <UART_SetConfig+0x1ee>
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	2380      	movs	r3, #128	@ 0x80
 8006aa8:	025b      	lsls	r3, r3, #9
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d217      	bcs.n	8006ade <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	200e      	movs	r0, #14
 8006ab4:	183b      	adds	r3, r7, r0
 8006ab6:	210f      	movs	r1, #15
 8006ab8:	438a      	bics	r2, r1
 8006aba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2207      	movs	r2, #7
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	b299      	uxth	r1, r3
 8006ac8:	183b      	adds	r3, r7, r0
 8006aca:	183a      	adds	r2, r7, r0
 8006acc:	8812      	ldrh	r2, [r2, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	183a      	adds	r2, r7, r0
 8006ad8:	8812      	ldrh	r2, [r2, #0]
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	e060      	b.n	8006ba0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ade:	231e      	movs	r3, #30
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e05b      	b.n	8006ba0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ae8:	231f      	movs	r3, #31
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d01f      	beq.n	8006b32 <UART_SetConfig+0x242>
 8006af2:	dc22      	bgt.n	8006b3a <UART_SetConfig+0x24a>
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d017      	beq.n	8006b28 <UART_SetConfig+0x238>
 8006af8:	dc1f      	bgt.n	8006b3a <UART_SetConfig+0x24a>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <UART_SetConfig+0x214>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d005      	beq.n	8006b0e <UART_SetConfig+0x21e>
 8006b02:	e01a      	b.n	8006b3a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fe fa0e 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	61bb      	str	r3, [r7, #24]
        break;
 8006b0c:	e01c      	b.n	8006b48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8006b0e:	4b33      	ldr	r3, [pc, #204]	@ (8006bdc <UART_SetConfig+0x2ec>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	2207      	movs	r2, #7
 8006b16:	4013      	ands	r3, r2
 8006b18:	3301      	adds	r3, #1
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	4831      	ldr	r0, [pc, #196]	@ (8006be4 <UART_SetConfig+0x2f4>)
 8006b1e:	f7f9 faf3 	bl	8000108 <__udivsi3>
 8006b22:	0003      	movs	r3, r0
 8006b24:	61bb      	str	r3, [r7, #24]
        break;
 8006b26:	e00f      	b.n	8006b48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b28:	f7fe f986 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	61bb      	str	r3, [r7, #24]
        break;
 8006b30:	e00a      	b.n	8006b48 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b32:	2380      	movs	r3, #128	@ 0x80
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	61bb      	str	r3, [r7, #24]
        break;
 8006b38:	e006      	b.n	8006b48 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b3e:	231e      	movs	r3, #30
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
        break;
 8006b46:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d028      	beq.n	8006ba0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b52:	4b25      	ldr	r3, [pc, #148]	@ (8006be8 <UART_SetConfig+0x2f8>)
 8006b54:	0052      	lsls	r2, r2, #1
 8006b56:	5ad3      	ldrh	r3, [r2, r3]
 8006b58:	0019      	movs	r1, r3
 8006b5a:	69b8      	ldr	r0, [r7, #24]
 8006b5c:	f7f9 fad4 	bl	8000108 <__udivsi3>
 8006b60:	0003      	movs	r3, r0
 8006b62:	001a      	movs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	18d2      	adds	r2, r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	0019      	movs	r1, r3
 8006b72:	0010      	movs	r0, r2
 8006b74:	f7f9 fac8 	bl	8000108 <__udivsi3>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d90a      	bls.n	8006b98 <UART_SetConfig+0x2a8>
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	2380      	movs	r3, #128	@ 0x80
 8006b86:	025b      	lsls	r3, r3, #9
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d205      	bcs.n	8006b98 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	e003      	b.n	8006ba0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b98:	231e      	movs	r3, #30
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	226a      	movs	r2, #106	@ 0x6a
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2268      	movs	r2, #104	@ 0x68
 8006bac:	2101      	movs	r1, #1
 8006bae:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bbc:	231e      	movs	r3, #30
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	781b      	ldrb	r3, [r3, #0]
}
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b008      	add	sp, #32
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	46c0      	nop			@ (mov r8, r8)
 8006bcc:	cfff69f3 	.word	0xcfff69f3
 8006bd0:	ffffcfff 	.word	0xffffcfff
 8006bd4:	11fff4ff 	.word	0x11fff4ff
 8006bd8:	40013800 	.word	0x40013800
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	40004400 	.word	0x40004400
 8006be4:	02dc6c00 	.word	0x02dc6c00
 8006be8:	08007d28 	.word	0x08007d28

08006bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4a4a      	ldr	r2, [pc, #296]	@ (8006d30 <UART_AdvFeatureConfig+0x144>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	0019      	movs	r1, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4a43      	ldr	r2, [pc, #268]	@ (8006d34 <UART_AdvFeatureConfig+0x148>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	0019      	movs	r1, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d00b      	beq.n	8006c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	4a3b      	ldr	r2, [pc, #236]	@ (8006d38 <UART_AdvFeatureConfig+0x14c>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	0019      	movs	r1, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5e:	2204      	movs	r2, #4
 8006c60:	4013      	ands	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4a34      	ldr	r2, [pc, #208]	@ (8006d3c <UART_AdvFeatureConfig+0x150>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	0019      	movs	r1, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	2210      	movs	r2, #16
 8006c82:	4013      	ands	r3, r2
 8006c84:	d00b      	beq.n	8006c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8006d40 <UART_AdvFeatureConfig+0x154>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	0019      	movs	r1, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	4a25      	ldr	r2, [pc, #148]	@ (8006d44 <UART_AdvFeatureConfig+0x158>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	0019      	movs	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc4:	2240      	movs	r2, #64	@ 0x40
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d01d      	beq.n	8006d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d48 <UART_AdvFeatureConfig+0x15c>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ce6:	2380      	movs	r3, #128	@ 0x80
 8006ce8:	035b      	lsls	r3, r3, #13
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d10b      	bne.n	8006d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <UART_AdvFeatureConfig+0x160>)
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	0019      	movs	r1, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0a:	2280      	movs	r2, #128	@ 0x80
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d00b      	beq.n	8006d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4a0e      	ldr	r2, [pc, #56]	@ (8006d50 <UART_AdvFeatureConfig+0x164>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	0019      	movs	r1, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	605a      	str	r2, [r3, #4]
  }
}
 8006d28:	46c0      	nop			@ (mov r8, r8)
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	ffff7fff 	.word	0xffff7fff
 8006d34:	fffdffff 	.word	0xfffdffff
 8006d38:	fffeffff 	.word	0xfffeffff
 8006d3c:	fffbffff 	.word	0xfffbffff
 8006d40:	ffffefff 	.word	0xffffefff
 8006d44:	ffffdfff 	.word	0xffffdfff
 8006d48:	ffefffff 	.word	0xffefffff
 8006d4c:	ff9fffff 	.word	0xff9fffff
 8006d50:	fff7ffff 	.word	0xfff7ffff

08006d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b092      	sub	sp, #72	@ 0x48
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2290      	movs	r2, #144	@ 0x90
 8006d60:	2100      	movs	r1, #0
 8006d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d64:	f7fb f94a 	bl	8001ffc <HAL_GetTick>
 8006d68:	0003      	movs	r3, r0
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2208      	movs	r2, #8
 8006d74:	4013      	ands	r3, r2
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d12d      	bne.n	8006dd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7c:	2280      	movs	r2, #128	@ 0x80
 8006d7e:	0391      	lsls	r1, r2, #14
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4a47      	ldr	r2, [pc, #284]	@ (8006ea0 <UART_CheckIdleState+0x14c>)
 8006d84:	9200      	str	r2, [sp, #0]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f000 f88e 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 8006d8c:	1e03      	subs	r3, r0, #0
 8006d8e:	d022      	beq.n	8006dd6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d90:	f3ef 8310 	mrs	r3, PRIMASK
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	f383 8810 	msr	PRIMASK, r3
}
 8006da4:	46c0      	nop			@ (mov r8, r8)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2180      	movs	r1, #128	@ 0x80
 8006db2:	438a      	bics	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	f383 8810 	msr	PRIMASK, r3
}
 8006dc0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2288      	movs	r2, #136	@ 0x88
 8006dc6:	2120      	movs	r1, #32
 8006dc8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2284      	movs	r2, #132	@ 0x84
 8006dce:	2100      	movs	r1, #0
 8006dd0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e060      	b.n	8006e98 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2204      	movs	r2, #4
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d146      	bne.n	8006e72 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de6:	2280      	movs	r2, #128	@ 0x80
 8006de8:	03d1      	lsls	r1, r2, #15
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4a2c      	ldr	r2, [pc, #176]	@ (8006ea0 <UART_CheckIdleState+0x14c>)
 8006dee:	9200      	str	r2, [sp, #0]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f000 f859 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 8006df6:	1e03      	subs	r3, r0, #0
 8006df8:	d03b      	beq.n	8006e72 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8006dfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e00:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e04:	2301      	movs	r3, #1
 8006e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f383 8810 	msr	PRIMASK, r3
}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4922      	ldr	r1, [pc, #136]	@ (8006ea4 <UART_CheckIdleState+0x150>)
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f383 8810 	msr	PRIMASK, r3
}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e30:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e32:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e36:	2301      	movs	r3, #1
 8006e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f383 8810 	msr	PRIMASK, r3
}
 8006e40:	46c0      	nop			@ (mov r8, r8)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	438a      	bics	r2, r1
 8006e50:	609a      	str	r2, [r3, #8]
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	f383 8810 	msr	PRIMASK, r3
}
 8006e5c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	228c      	movs	r2, #140	@ 0x8c
 8006e62:	2120      	movs	r1, #32
 8006e64:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2284      	movs	r2, #132	@ 0x84
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e012      	b.n	8006e98 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2288      	movs	r2, #136	@ 0x88
 8006e76:	2120      	movs	r1, #32
 8006e78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	228c      	movs	r2, #140	@ 0x8c
 8006e7e:	2120      	movs	r1, #32
 8006e80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2284      	movs	r2, #132	@ 0x84
 8006e92:	2100      	movs	r1, #0
 8006e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	0018      	movs	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	b010      	add	sp, #64	@ 0x40
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	01ffffff 	.word	0x01ffffff
 8006ea4:	fffffedf 	.word	0xfffffedf

08006ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	1dfb      	adds	r3, r7, #7
 8006eb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb8:	e051      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	d04e      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec0:	f7fb f89c 	bl	8001ffc <HAL_GetTick>
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e051      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d03b      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b80      	cmp	r3, #128	@ 0x80
 8006eea:	d038      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b40      	cmp	r3, #64	@ 0x40
 8006ef0:	d035      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	2208      	movs	r2, #8
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d111      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2208      	movs	r2, #8
 8006f06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f000 f922 	bl	8007154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2290      	movs	r2, #144	@ 0x90
 8006f14:	2108      	movs	r1, #8
 8006f16:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2284      	movs	r2, #132	@ 0x84
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e02c      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69da      	ldr	r2, [r3, #28]
 8006f2a:	2380      	movs	r3, #128	@ 0x80
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	401a      	ands	r2, r3
 8006f30:	2380      	movs	r3, #128	@ 0x80
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d112      	bne.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2280      	movs	r2, #128	@ 0x80
 8006f3e:	0112      	lsls	r2, r2, #4
 8006f40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	0018      	movs	r0, r3
 8006f46:	f000 f905 	bl	8007154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2290      	movs	r2, #144	@ 0x90
 8006f4e:	2120      	movs	r1, #32
 8006f50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2284      	movs	r2, #132	@ 0x84
 8006f56:	2100      	movs	r1, #0
 8006f58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e00f      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	4013      	ands	r3, r2
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	425a      	negs	r2, r3
 8006f6e:	4153      	adcs	r3, r2
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	001a      	movs	r2, r3
 8006f74:	1dfb      	adds	r3, r7, #7
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d09e      	beq.n	8006eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	0018      	movs	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b004      	add	sp, #16
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b090      	sub	sp, #64	@ 0x40
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	1dbb      	adds	r3, r7, #6
 8006f94:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1dba      	adds	r2, r7, #6
 8006fa0:	215c      	movs	r1, #92	@ 0x5c
 8006fa2:	8812      	ldrh	r2, [r2, #0]
 8006fa4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2290      	movs	r2, #144	@ 0x90
 8006faa:	2100      	movs	r1, #0
 8006fac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	228c      	movs	r2, #140	@ 0x8c
 8006fb2:	2122      	movs	r1, #34	@ 0x22
 8006fb4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2280      	movs	r2, #128	@ 0x80
 8006fba:	589b      	ldr	r3, [r3, r2]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d02d      	beq.n	800701c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2280      	movs	r2, #128	@ 0x80
 8006fc4:	589b      	ldr	r3, [r3, r2]
 8006fc6:	4a40      	ldr	r2, [pc, #256]	@ (80070c8 <UART_Start_Receive_DMA+0x140>)
 8006fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2280      	movs	r2, #128	@ 0x80
 8006fce:	589b      	ldr	r3, [r3, r2]
 8006fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80070cc <UART_Start_Receive_DMA+0x144>)
 8006fd2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2280      	movs	r2, #128	@ 0x80
 8006fd8:	589b      	ldr	r3, [r3, r2]
 8006fda:	4a3d      	ldr	r2, [pc, #244]	@ (80070d0 <UART_Start_Receive_DMA+0x148>)
 8006fdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2280      	movs	r2, #128	@ 0x80
 8006fe2:	589b      	ldr	r3, [r3, r2]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2280      	movs	r2, #128	@ 0x80
 8006fec:	5898      	ldr	r0, [r3, r2]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3324      	adds	r3, #36	@ 0x24
 8006ff4:	0019      	movs	r1, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	1dbb      	adds	r3, r7, #6
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	f7fc f800 	bl	8003004 <HAL_DMA_Start_IT>
 8007004:	1e03      	subs	r3, r0, #0
 8007006:	d009      	beq.n	800701c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2290      	movs	r2, #144	@ 0x90
 800700c:	2110      	movs	r1, #16
 800700e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	228c      	movs	r2, #140	@ 0x8c
 8007014:	2120      	movs	r1, #32
 8007016:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e050      	b.n	80070be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d019      	beq.n	8007058 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007024:	f3ef 8310 	mrs	r3, PRIMASK
 8007028:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800702c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800702e:	2301      	movs	r3, #1
 8007030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007034:	f383 8810 	msr	PRIMASK, r3
}
 8007038:	46c0      	nop			@ (mov r8, r8)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2180      	movs	r1, #128	@ 0x80
 8007046:	0049      	lsls	r1, r1, #1
 8007048:	430a      	orrs	r2, r1
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007058:	f3ef 8310 	mrs	r3, PRIMASK
 800705c:	613b      	str	r3, [r7, #16]
  return(result);
 800705e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007062:	2301      	movs	r3, #1
 8007064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f383 8810 	msr	PRIMASK, r3
}
 800706c:	46c0      	nop			@ (mov r8, r8)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2101      	movs	r1, #1
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	f383 8810 	msr	PRIMASK, r3
}
 8007088:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800708a:	f3ef 8310 	mrs	r3, PRIMASK
 800708e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007090:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
 8007094:	2301      	movs	r3, #1
 8007096:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	f383 8810 	msr	PRIMASK, r3
}
 800709e:	46c0      	nop			@ (mov r8, r8)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2140      	movs	r1, #64	@ 0x40
 80070ac:	430a      	orrs	r2, r1
 80070ae:	609a      	str	r2, [r3, #8]
 80070b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	f383 8810 	msr	PRIMASK, r3
}
 80070ba:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b010      	add	sp, #64	@ 0x40
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			@ (mov r8, r8)
 80070c8:	08007221 	.word	0x08007221
 80070cc:	08007351 	.word	0x08007351
 80070d0:	08007393 	.word	0x08007393

080070d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	@ 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80070dc:	f3ef 8310 	mrs	r3, PRIMASK
 80070e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80070e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e6:	2301      	movs	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f383 8810 	msr	PRIMASK, r3
}
 80070f0:	46c0      	nop			@ (mov r8, r8)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	21c0      	movs	r1, #192	@ 0xc0
 80070fe:	438a      	bics	r2, r1
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f383 8810 	msr	PRIMASK, r3
}
 800710c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800710e:	f3ef 8310 	mrs	r3, PRIMASK
 8007112:	617b      	str	r3, [r7, #20]
  return(result);
 8007114:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007116:	623b      	str	r3, [r7, #32]
 8007118:	2301      	movs	r3, #1
 800711a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f383 8810 	msr	PRIMASK, r3
}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4908      	ldr	r1, [pc, #32]	@ (8007150 <UART_EndTxTransfer+0x7c>)
 8007130:	400a      	ands	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f383 8810 	msr	PRIMASK, r3
}
 800713e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2288      	movs	r2, #136	@ 0x88
 8007144:	2120      	movs	r1, #32
 8007146:	5099      	str	r1, [r3, r2]
}
 8007148:	46c0      	nop			@ (mov r8, r8)
 800714a:	46bd      	mov	sp, r7
 800714c:	b00a      	add	sp, #40	@ 0x28
 800714e:	bd80      	pop	{r7, pc}
 8007150:	ff7fffff 	.word	0xff7fffff

08007154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	@ 0x38
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800715c:	f3ef 8310 	mrs	r3, PRIMASK
 8007160:	617b      	str	r3, [r7, #20]
  return(result);
 8007162:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007164:	637b      	str	r3, [r7, #52]	@ 0x34
 8007166:	2301      	movs	r3, #1
 8007168:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f383 8810 	msr	PRIMASK, r3
}
 8007170:	46c0      	nop			@ (mov r8, r8)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4926      	ldr	r1, [pc, #152]	@ (8007218 <UART_EndRxTransfer+0xc4>)
 800717e:	400a      	ands	r2, r1
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f383 8810 	msr	PRIMASK, r3
}
 800718c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800718e:	f3ef 8310 	mrs	r3, PRIMASK
 8007192:	623b      	str	r3, [r7, #32]
  return(result);
 8007194:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007196:	633b      	str	r3, [r7, #48]	@ 0x30
 8007198:	2301      	movs	r3, #1
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	f383 8810 	msr	PRIMASK, r3
}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	491b      	ldr	r1, [pc, #108]	@ (800721c <UART_EndRxTransfer+0xc8>)
 80071b0:	400a      	ands	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	f383 8810 	msr	PRIMASK, r3
}
 80071be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d118      	bne.n	80071fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80071c8:	f3ef 8310 	mrs	r3, PRIMASK
 80071cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80071ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071d2:	2301      	movs	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f383 8810 	msr	PRIMASK, r3
}
 80071dc:	46c0      	nop			@ (mov r8, r8)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2110      	movs	r1, #16
 80071ea:	438a      	bics	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f383 8810 	msr	PRIMASK, r3
}
 80071f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	228c      	movs	r2, #140	@ 0x8c
 80071fe:	2120      	movs	r1, #32
 8007200:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800720e:	46c0      	nop			@ (mov r8, r8)
 8007210:	46bd      	mov	sp, r7
 8007212:	b00e      	add	sp, #56	@ 0x38
 8007214:	bd80      	pop	{r7, pc}
 8007216:	46c0      	nop			@ (mov r8, r8)
 8007218:	fffffedf 	.word	0xfffffedf
 800721c:	effffffe 	.word	0xeffffffe

08007220 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b094      	sub	sp, #80	@ 0x50
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2220      	movs	r2, #32
 8007236:	4013      	ands	r3, r2
 8007238:	d16f      	bne.n	800731a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800723a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723c:	225e      	movs	r2, #94	@ 0x5e
 800723e:	2100      	movs	r1, #0
 8007240:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007242:	f3ef 8310 	mrs	r3, PRIMASK
 8007246:	61bb      	str	r3, [r7, #24]
  return(result);
 8007248:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800724a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800724c:	2301      	movs	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f383 8810 	msr	PRIMASK, r3
}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	493a      	ldr	r1, [pc, #232]	@ (800734c <UART_DMAReceiveCplt+0x12c>)
 8007264:	400a      	ands	r2, r1
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800726a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	f383 8810 	msr	PRIMASK, r3
}
 8007272:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007274:	f3ef 8310 	mrs	r3, PRIMASK
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727c:	647b      	str	r3, [r7, #68]	@ 0x44
 800727e:	2301      	movs	r3, #1
 8007280:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	f383 8810 	msr	PRIMASK, r3
}
 8007288:	46c0      	nop			@ (mov r8, r8)
 800728a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2101      	movs	r1, #1
 8007296:	438a      	bics	r2, r1
 8007298:	609a      	str	r2, [r3, #8]
 800729a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800729c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	f383 8810 	msr	PRIMASK, r3
}
 80072a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072a6:	f3ef 8310 	mrs	r3, PRIMASK
 80072aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80072b0:	2301      	movs	r3, #1
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b6:	f383 8810 	msr	PRIMASK, r3
}
 80072ba:	46c0      	nop			@ (mov r8, r8)
 80072bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2140      	movs	r1, #64	@ 0x40
 80072c8:	438a      	bics	r2, r1
 80072ca:	609a      	str	r2, [r3, #8]
 80072cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	f383 8810 	msr	PRIMASK, r3
}
 80072d6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072da:	228c      	movs	r2, #140	@ 0x8c
 80072dc:	2120      	movs	r1, #32
 80072de:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d118      	bne.n	800731a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072e8:	f3ef 8310 	mrs	r3, PRIMASK
 80072ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80072ee:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072f2:	2301      	movs	r3, #1
 80072f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f383 8810 	msr	PRIMASK, r3
}
 80072fc:	46c0      	nop			@ (mov r8, r8)
 80072fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2110      	movs	r1, #16
 800730a:	438a      	bics	r2, r1
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007310:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f383 8810 	msr	PRIMASK, r3
}
 8007318:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800731a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800731c:	2200      	movs	r2, #0
 800731e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d108      	bne.n	800733a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800732a:	225c      	movs	r2, #92	@ 0x5c
 800732c:	5a9a      	ldrh	r2, [r3, r2]
 800732e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007330:	0011      	movs	r1, r2
 8007332:	0018      	movs	r0, r3
 8007334:	f7f9 fd6c 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007338:	e003      	b.n	8007342 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800733a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800733c:	0018      	movs	r0, r3
 800733e:	f7ff fab7 	bl	80068b0 <HAL_UART_RxCpltCallback>
}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	46bd      	mov	sp, r7
 8007346:	b014      	add	sp, #80	@ 0x50
 8007348:	bd80      	pop	{r7, pc}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	fffffeff 	.word	0xfffffeff

08007350 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10a      	bne.n	8007382 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	225c      	movs	r2, #92	@ 0x5c
 8007370:	5a9b      	ldrh	r3, [r3, r2]
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	0011      	movs	r1, r2
 800737a:	0018      	movs	r0, r3
 800737c:	f7f9 fd48 	bl	8000e10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007380:	e003      	b.n	800738a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	0018      	movs	r0, r3
 8007386:	f7ff fa9b 	bl	80068c0 <HAL_UART_RxHalfCpltCallback>
}
 800738a:	46c0      	nop			@ (mov r8, r8)
 800738c:	46bd      	mov	sp, r7
 800738e:	b004      	add	sp, #16
 8007390:	bd80      	pop	{r7, pc}

08007392 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2288      	movs	r2, #136	@ 0x88
 80073a4:	589b      	ldr	r3, [r3, r2]
 80073a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	228c      	movs	r2, #140	@ 0x8c
 80073ac:	589b      	ldr	r3, [r3, r2]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	2280      	movs	r2, #128	@ 0x80
 80073b8:	4013      	ands	r3, r2
 80073ba:	2b80      	cmp	r3, #128	@ 0x80
 80073bc:	d10a      	bne.n	80073d4 <UART_DMAError+0x42>
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b21      	cmp	r3, #33	@ 0x21
 80073c2:	d107      	bne.n	80073d4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2256      	movs	r2, #86	@ 0x56
 80073c8:	2100      	movs	r1, #0
 80073ca:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	0018      	movs	r0, r3
 80073d0:	f7ff fe80 	bl	80070d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	2240      	movs	r2, #64	@ 0x40
 80073dc:	4013      	ands	r3, r2
 80073de:	2b40      	cmp	r3, #64	@ 0x40
 80073e0:	d10a      	bne.n	80073f8 <UART_DMAError+0x66>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b22      	cmp	r3, #34	@ 0x22
 80073e6:	d107      	bne.n	80073f8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	225e      	movs	r2, #94	@ 0x5e
 80073ec:	2100      	movs	r1, #0
 80073ee:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	0018      	movs	r0, r3
 80073f4:	f7ff feae 	bl	8007154 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2290      	movs	r2, #144	@ 0x90
 80073fc:	589b      	ldr	r3, [r3, r2]
 80073fe:	2210      	movs	r2, #16
 8007400:	431a      	orrs	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2190      	movs	r1, #144	@ 0x90
 8007406:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	0018      	movs	r0, r3
 800740c:	f7ff fa60 	bl	80068d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007410:	46c0      	nop			@ (mov r8, r8)
 8007412:	46bd      	mov	sp, r7
 8007414:	b006      	add	sp, #24
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	225e      	movs	r2, #94	@ 0x5e
 800742a:	2100      	movs	r1, #0
 800742c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2256      	movs	r2, #86	@ 0x56
 8007432:	2100      	movs	r1, #0
 8007434:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	0018      	movs	r0, r3
 800743a:	f7ff fa49 	bl	80068d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743e:	46c0      	nop			@ (mov r8, r8)
 8007440:	46bd      	mov	sp, r7
 8007442:	b004      	add	sp, #16
 8007444:	bd80      	pop	{r7, pc}

08007446 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007458:	2200      	movs	r2, #0
 800745a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2280      	movs	r2, #128	@ 0x80
 8007460:	589b      	ldr	r3, [r3, r2]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2280      	movs	r2, #128	@ 0x80
 800746a:	589b      	ldr	r3, [r3, r2]
 800746c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d12d      	bne.n	80074ce <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2256      	movs	r2, #86	@ 0x56
 8007476:	2100      	movs	r1, #0
 8007478:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	225e      	movs	r2, #94	@ 0x5e
 800747e:	2100      	movs	r1, #0
 8007480:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2290      	movs	r2, #144	@ 0x90
 8007486:	2100      	movs	r1, #0
 8007488:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	220f      	movs	r2, #15
 8007490:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007496:	2380      	movs	r3, #128	@ 0x80
 8007498:	059b      	lsls	r3, r3, #22
 800749a:	429a      	cmp	r2, r3
 800749c:	d107      	bne.n	80074ae <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699a      	ldr	r2, [r3, #24]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2110      	movs	r1, #16
 80074aa:	430a      	orrs	r2, r1
 80074ac:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2288      	movs	r2, #136	@ 0x88
 80074b2:	2120      	movs	r1, #32
 80074b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	228c      	movs	r2, #140	@ 0x8c
 80074ba:	2120      	movs	r1, #32
 80074bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7ff fa0a 	bl	80068e0 <HAL_UART_AbortCpltCallback>
 80074cc:	e000      	b.n	80074d0 <UART_DMATxAbortCallback+0x8a>
      return;
 80074ce:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b004      	add	sp, #16
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2280      	movs	r2, #128	@ 0x80
 80074e8:	589b      	ldr	r3, [r3, r2]
 80074ea:	2200      	movs	r2, #0
 80074ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d127      	bne.n	8007550 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2256      	movs	r2, #86	@ 0x56
 8007504:	2100      	movs	r1, #0
 8007506:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	225e      	movs	r2, #94	@ 0x5e
 800750c:	2100      	movs	r1, #0
 800750e:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2290      	movs	r2, #144	@ 0x90
 8007514:	2100      	movs	r1, #0
 8007516:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	220f      	movs	r2, #15
 800751e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2108      	movs	r1, #8
 800752c:	430a      	orrs	r2, r1
 800752e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2288      	movs	r2, #136	@ 0x88
 8007534:	2120      	movs	r1, #32
 8007536:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	228c      	movs	r2, #140	@ 0x8c
 800753c:	2120      	movs	r1, #32
 800753e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	0018      	movs	r0, r3
 800754a:	f7ff f9c9 	bl	80068e0 <HAL_UART_AbortCpltCallback>
 800754e:	e000      	b.n	8007552 <UART_DMARxAbortCallback+0x7c>
      return;
 8007550:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007552:	46bd      	mov	sp, r7
 8007554:	b004      	add	sp, #16
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007560:	f3ef 8310 	mrs	r3, PRIMASK
 8007564:	60bb      	str	r3, [r7, #8]
  return(result);
 8007566:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	2301      	movs	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f383 8810 	msr	PRIMASK, r3
}
 8007574:	46c0      	nop			@ (mov r8, r8)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2140      	movs	r1, #64	@ 0x40
 8007582:	438a      	bics	r2, r1
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f383 8810 	msr	PRIMASK, r3
}
 8007590:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2288      	movs	r2, #136	@ 0x88
 8007596:	2120      	movs	r1, #32
 8007598:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7ff f97c 	bl	80068a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a8:	46c0      	nop			@ (mov r8, r8)
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b006      	add	sp, #24
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e05d      	b.n	8007684 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2288      	movs	r2, #136	@ 0x88
 80075cc:	589b      	ldr	r3, [r3, r2]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d107      	bne.n	80075e2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2284      	movs	r2, #132	@ 0x84
 80075d6:	2100      	movs	r1, #0
 80075d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	0018      	movs	r0, r3
 80075de:	f7fa fb2d 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2288      	movs	r2, #136	@ 0x88
 80075e6:	2124      	movs	r1, #36	@ 0x24
 80075e8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2101      	movs	r1, #1
 80075f6:	438a      	bics	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	0018      	movs	r0, r3
 8007606:	f7ff faf1 	bl	8006bec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	0018      	movs	r0, r3
 800760e:	f7ff f96f 	bl	80068f0 <UART_SetConfig>
 8007612:	0003      	movs	r3, r0
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e033      	b.n	8007684 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2180      	movs	r1, #128	@ 0x80
 8007628:	01c9      	lsls	r1, r1, #7
 800762a:	430a      	orrs	r2, r1
 800762c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4a15      	ldr	r2, [pc, #84]	@ (800768c <HAL_RS485Ex_Init+0xdc>)
 8007636:	4013      	ands	r3, r2
 8007638:	0019      	movs	r1, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	430a      	orrs	r2, r1
 8007642:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	055b      	lsls	r3, r3, #21
 8007648:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	041b      	lsls	r3, r3, #16
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a0d      	ldr	r2, [pc, #52]	@ (8007690 <HAL_RS485Ex_Init+0xe0>)
 800765c:	4013      	ands	r3, r2
 800765e:	0019      	movs	r1, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	430a      	orrs	r2, r1
 8007668:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2101      	movs	r1, #1
 8007676:	430a      	orrs	r2, r1
 8007678:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	0018      	movs	r0, r3
 800767e:	f7ff fb69 	bl	8006d54 <UART_CheckIdleState>
 8007682:	0003      	movs	r3, r0
}
 8007684:	0018      	movs	r0, r3
 8007686:	46bd      	mov	sp, r7
 8007688:	b006      	add	sp, #24
 800768a:	bd80      	pop	{r7, pc}
 800768c:	ffff7fff 	.word	0xffff7fff
 8007690:	fc00ffff 	.word	0xfc00ffff

08007694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800769c:	46c0      	nop			@ (mov r8, r8)
 800769e:	46bd      	mov	sp, r7
 80076a0:	b002      	add	sp, #8
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076ac:	46c0      	nop			@ (mov r8, r8)
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b002      	add	sp, #8
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80076bc:	46c0      	nop			@ (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	b002      	add	sp, #8
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2284      	movs	r2, #132	@ 0x84
 80076d0:	5c9b      	ldrb	r3, [r3, r2]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_UARTEx_DisableFifoMode+0x16>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e027      	b.n	800772a <HAL_UARTEx_DisableFifoMode+0x66>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2284      	movs	r2, #132	@ 0x84
 80076de:	2101      	movs	r1, #1
 80076e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2288      	movs	r2, #136	@ 0x88
 80076e6:	2124      	movs	r1, #36	@ 0x24
 80076e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2101      	movs	r1, #1
 80076fe:	438a      	bics	r2, r1
 8007700:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4a0b      	ldr	r2, [pc, #44]	@ (8007734 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007706:	4013      	ands	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2288      	movs	r2, #136	@ 0x88
 800771c:	2120      	movs	r1, #32
 800771e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2284      	movs	r2, #132	@ 0x84
 8007724:	2100      	movs	r1, #0
 8007726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	0018      	movs	r0, r3
 800772c:	46bd      	mov	sp, r7
 800772e:	b004      	add	sp, #16
 8007730:	bd80      	pop	{r7, pc}
 8007732:	46c0      	nop			@ (mov r8, r8)
 8007734:	dfffffff 	.word	0xdfffffff

08007738 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2284      	movs	r2, #132	@ 0x84
 8007746:	5c9b      	ldrb	r3, [r3, r2]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800774c:	2302      	movs	r3, #2
 800774e:	e02e      	b.n	80077ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2284      	movs	r2, #132	@ 0x84
 8007754:	2101      	movs	r1, #1
 8007756:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2288      	movs	r2, #136	@ 0x88
 800775c:	2124      	movs	r1, #36	@ 0x24
 800775e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2101      	movs	r1, #1
 8007774:	438a      	bics	r2, r1
 8007776:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	08d9      	lsrs	r1, r3, #3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	0018      	movs	r0, r3
 8007790:	f000 f8bc 	bl	800790c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2288      	movs	r2, #136	@ 0x88
 80077a0:	2120      	movs	r1, #32
 80077a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2284      	movs	r2, #132	@ 0x84
 80077a8:	2100      	movs	r1, #0
 80077aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	0018      	movs	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b004      	add	sp, #16
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2284      	movs	r2, #132	@ 0x84
 80077c6:	5c9b      	ldrb	r3, [r3, r2]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e02f      	b.n	8007830 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2284      	movs	r2, #132	@ 0x84
 80077d4:	2101      	movs	r1, #1
 80077d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2288      	movs	r2, #136	@ 0x88
 80077dc:	2124      	movs	r1, #36	@ 0x24
 80077de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2101      	movs	r1, #1
 80077f4:	438a      	bics	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007838 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007800:	4013      	ands	r3, r2
 8007802:	0019      	movs	r1, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0018      	movs	r0, r3
 8007812:	f000 f87b 	bl	800790c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2288      	movs	r2, #136	@ 0x88
 8007822:	2120      	movs	r1, #32
 8007824:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2284      	movs	r2, #132	@ 0x84
 800782a:	2100      	movs	r1, #0
 800782c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	0018      	movs	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	b004      	add	sp, #16
 8007836:	bd80      	pop	{r7, pc}
 8007838:	f1ffffff 	.word	0xf1ffffff

0800783c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800783c:	b5b0      	push	{r4, r5, r7, lr}
 800783e:	b08a      	sub	sp, #40	@ 0x28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	1dbb      	adds	r3, r7, #6
 8007848:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	228c      	movs	r2, #140	@ 0x8c
 800784e:	589b      	ldr	r3, [r3, r2]
 8007850:	2b20      	cmp	r3, #32
 8007852:	d156      	bne.n	8007902 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800785a:	1dbb      	adds	r3, r7, #6
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e04e      	b.n	8007904 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	2380      	movs	r3, #128	@ 0x80
 800786c:	015b      	lsls	r3, r3, #5
 800786e:	429a      	cmp	r2, r3
 8007870:	d109      	bne.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2201      	movs	r2, #1
 800787e:	4013      	ands	r3, r2
 8007880:	d001      	beq.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e03e      	b.n	8007904 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007892:	2527      	movs	r5, #39	@ 0x27
 8007894:	197c      	adds	r4, r7, r5
 8007896:	1dbb      	adds	r3, r7, #6
 8007898:	881a      	ldrh	r2, [r3, #0]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0018      	movs	r0, r3
 80078a0:	f7ff fb72 	bl	8006f88 <UART_Start_Receive_DMA>
 80078a4:	0003      	movs	r3, r0
 80078a6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80078a8:	197b      	adds	r3, r7, r5
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d124      	bne.n	80078fa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11c      	bne.n	80078f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2210      	movs	r2, #16
 80078be:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80078c0:	f3ef 8310 	mrs	r3, PRIMASK
 80078c4:	617b      	str	r3, [r7, #20]
  return(result);
 80078c6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c8:	623b      	str	r3, [r7, #32]
 80078ca:	2301      	movs	r3, #1
 80078cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f383 8810 	msr	PRIMASK, r3
}
 80078d4:	46c0      	nop			@ (mov r8, r8)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2110      	movs	r1, #16
 80078e2:	430a      	orrs	r2, r1
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f383 8810 	msr	PRIMASK, r3
}
 80078f0:	e003      	b.n	80078fa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80078f2:	2327      	movs	r3, #39	@ 0x27
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	2201      	movs	r2, #1
 80078f8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80078fa:	2327      	movs	r3, #39	@ 0x27
 80078fc:	18fb      	adds	r3, r7, r3
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	e000      	b.n	8007904 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	0018      	movs	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	b00a      	add	sp, #40	@ 0x28
 800790a:	bdb0      	pop	{r4, r5, r7, pc}

0800790c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800790c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007918:	2b00      	cmp	r3, #0
 800791a:	d108      	bne.n	800792e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	226a      	movs	r2, #106	@ 0x6a
 8007920:	2101      	movs	r1, #1
 8007922:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2268      	movs	r2, #104	@ 0x68
 8007928:	2101      	movs	r1, #1
 800792a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800792c:	e043      	b.n	80079b6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800792e:	260f      	movs	r6, #15
 8007930:	19bb      	adds	r3, r7, r6
 8007932:	2208      	movs	r2, #8
 8007934:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007936:	200e      	movs	r0, #14
 8007938:	183b      	adds	r3, r7, r0
 800793a:	2208      	movs	r2, #8
 800793c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	0e5b      	lsrs	r3, r3, #25
 8007946:	b2da      	uxtb	r2, r3
 8007948:	240d      	movs	r4, #13
 800794a:	193b      	adds	r3, r7, r4
 800794c:	2107      	movs	r1, #7
 800794e:	400a      	ands	r2, r1
 8007950:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	0f5b      	lsrs	r3, r3, #29
 800795a:	b2da      	uxtb	r2, r3
 800795c:	250c      	movs	r5, #12
 800795e:	197b      	adds	r3, r7, r5
 8007960:	2107      	movs	r1, #7
 8007962:	400a      	ands	r2, r1
 8007964:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007966:	183b      	adds	r3, r7, r0
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	197a      	adds	r2, r7, r5
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	4914      	ldr	r1, [pc, #80]	@ (80079c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007970:	5c8a      	ldrb	r2, [r1, r2]
 8007972:	435a      	muls	r2, r3
 8007974:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007976:	197b      	adds	r3, r7, r5
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	4a12      	ldr	r2, [pc, #72]	@ (80079c4 <UARTEx_SetNbDataToProcess+0xb8>)
 800797c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800797e:	0019      	movs	r1, r3
 8007980:	f7f8 fc4c 	bl	800021c <__divsi3>
 8007984:	0003      	movs	r3, r0
 8007986:	b299      	uxth	r1, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	226a      	movs	r2, #106	@ 0x6a
 800798c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800798e:	19bb      	adds	r3, r7, r6
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	193a      	adds	r2, r7, r4
 8007994:	7812      	ldrb	r2, [r2, #0]
 8007996:	490a      	ldr	r1, [pc, #40]	@ (80079c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007998:	5c8a      	ldrb	r2, [r1, r2]
 800799a:	435a      	muls	r2, r3
 800799c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800799e:	193b      	adds	r3, r7, r4
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	4a08      	ldr	r2, [pc, #32]	@ (80079c4 <UARTEx_SetNbDataToProcess+0xb8>)
 80079a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079a6:	0019      	movs	r1, r3
 80079a8:	f7f8 fc38 	bl	800021c <__divsi3>
 80079ac:	0003      	movs	r3, r0
 80079ae:	b299      	uxth	r1, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2268      	movs	r2, #104	@ 0x68
 80079b4:	5299      	strh	r1, [r3, r2]
}
 80079b6:	46c0      	nop			@ (mov r8, r8)
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b005      	add	sp, #20
 80079bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	08007d40 	.word	0x08007d40
 80079c4:	08007d48 	.word	0x08007d48

080079c8 <memset>:
 80079c8:	0003      	movs	r3, r0
 80079ca:	1882      	adds	r2, r0, r2
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d100      	bne.n	80079d2 <memset+0xa>
 80079d0:	4770      	bx	lr
 80079d2:	7019      	strb	r1, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	e7f9      	b.n	80079cc <memset+0x4>

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	2600      	movs	r6, #0
 80079dc:	4c0c      	ldr	r4, [pc, #48]	@ (8007a10 <__libc_init_array+0x38>)
 80079de:	4d0d      	ldr	r5, [pc, #52]	@ (8007a14 <__libc_init_array+0x3c>)
 80079e0:	1b64      	subs	r4, r4, r5
 80079e2:	10a4      	asrs	r4, r4, #2
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	2600      	movs	r6, #0
 80079ea:	f000 f823 	bl	8007a34 <_init>
 80079ee:	4c0a      	ldr	r4, [pc, #40]	@ (8007a18 <__libc_init_array+0x40>)
 80079f0:	4d0a      	ldr	r5, [pc, #40]	@ (8007a1c <__libc_init_array+0x44>)
 80079f2:	1b64      	subs	r4, r4, r5
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	42a6      	cmp	r6, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	00b3      	lsls	r3, r6, #2
 80079fe:	58eb      	ldr	r3, [r5, r3]
 8007a00:	4798      	blx	r3
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	00b3      	lsls	r3, r6, #2
 8007a08:	58eb      	ldr	r3, [r5, r3]
 8007a0a:	4798      	blx	r3
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	08007d50 	.word	0x08007d50
 8007a14:	08007d50 	.word	0x08007d50
 8007a18:	08007d54 	.word	0x08007d54
 8007a1c:	08007d50 	.word	0x08007d50

08007a20 <memcpy>:
 8007a20:	2300      	movs	r3, #0
 8007a22:	b510      	push	{r4, lr}
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d100      	bne.n	8007a2a <memcpy+0xa>
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	5ccc      	ldrb	r4, [r1, r3]
 8007a2c:	54c4      	strb	r4, [r0, r3]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	e7f8      	b.n	8007a24 <memcpy+0x4>
	...

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	46c0      	nop			@ (mov r8, r8)
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	46c0      	nop			@ (mov r8, r8)
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
